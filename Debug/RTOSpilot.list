
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001585c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  080159ec  080159ec  000259ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160c0  080160c0  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  080160c0  080160c0  000260c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080160c8  080160c8  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160c8  080160c8  000260c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160cc  080160cc  000260cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080160d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          00004fd4  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00003004  200050b4  200050b4  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000461af  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a18  00000000  00000000  000762bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b0  00000000  00000000  0007ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002198  00000000  00000000  00081188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f954  00000000  00000000  00083320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000370d7  00000000  00000000  000b2c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010616a  00000000  00000000  000e9d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001efeb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009cb4  00000000  00000000  001eff08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080159d4 	.word	0x080159d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	080159d4 	.word	0x080159d4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_ldivmod>:
 8000af8:	b97b      	cbnz	r3, 8000b1a <__aeabi_ldivmod+0x22>
 8000afa:	b972      	cbnz	r2, 8000b1a <__aeabi_ldivmod+0x22>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bfbe      	ittt	lt
 8000b00:	2000      	movlt	r0, #0
 8000b02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b06:	e006      	blt.n	8000b16 <__aeabi_ldivmod+0x1e>
 8000b08:	bf08      	it	eq
 8000b0a:	2800      	cmpeq	r0, #0
 8000b0c:	bf1c      	itt	ne
 8000b0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b12:	f04f 30ff 	movne.w	r0, #4294967295
 8000b16:	f000 b9b9 	b.w	8000e8c <__aeabi_idiv0>
 8000b1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b22:	2900      	cmp	r1, #0
 8000b24:	db09      	blt.n	8000b3a <__aeabi_ldivmod+0x42>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db1a      	blt.n	8000b60 <__aeabi_ldivmod+0x68>
 8000b2a:	f000 f84d 	bl	8000bc8 <__udivmoddi4>
 8000b2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b36:	b004      	add	sp, #16
 8000b38:	4770      	bx	lr
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db1b      	blt.n	8000b7c <__aeabi_ldivmod+0x84>
 8000b44:	f000 f840 	bl	8000bc8 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4240      	negs	r0, r0
 8000b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b58:	4252      	negs	r2, r2
 8000b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5e:	4770      	bx	lr
 8000b60:	4252      	negs	r2, r2
 8000b62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b66:	f000 f82f 	bl	8000bc8 <__udivmoddi4>
 8000b6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b72:	b004      	add	sp, #16
 8000b74:	4240      	negs	r0, r0
 8000b76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7a:	4770      	bx	lr
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	f000 f821 	bl	8000bc8 <__udivmoddi4>
 8000b86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8e:	b004      	add	sp, #16
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000eae:	2205      	movs	r2, #5
 8000eb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <bmp280_init_default_params+0x38>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200041f0 	.word	0x200041f0

08000ecc <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <read_register16+0x5c>)
 8000eda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <read_register16+0x5c>)
 8000ee2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	89f9      	ldrh	r1, [r7, #14]
 8000eea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	f007 fcd6 	bl	80088ac <HAL_I2C_Mem_Read>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10b      	bne.n	8000f1e <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	801a      	strh	r2, [r3, #0]
		return true;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <read_register16+0x54>
	} else
		return false;
 8000f1e:	2300      	movs	r3, #0

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200041f0 	.word	0x200041f0

08000f2c <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af04      	add	r7, sp, #16
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <read_data+0x4c>)
 8000f3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <read_data+0x4c>)
 8000f46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	89f9      	ldrh	r1, [r7, #14]
 8000f52:	f241 3488 	movw	r4, #5000	; 0x1388
 8000f56:	9402      	str	r4, [sp, #8]
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f007 fca4 	bl	80088ac <HAL_I2C_Mem_Read>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <read_data+0x42>
		return 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <read_data+0x44>
	else
		return 1;
 8000f6e:	2301      	movs	r3, #1

}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	200041f0 	.word	0x200041f0

08000f7c <read_calibration_data>:

static bool read_calibration_data() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <read_calibration_data+0xb8>)
 8000f82:	2088      	movs	r0, #136	; 0x88
 8000f84:	f7ff ffa2 	bl	8000ecc <read_register16>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d04e      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 8000f8e:	492a      	ldr	r1, [pc, #168]	; (8001038 <read_calibration_data+0xbc>)
 8000f90:	208a      	movs	r0, #138	; 0x8a
 8000f92:	f7ff ff9b 	bl	8000ecc <read_register16>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d047      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 8000f9c:	4927      	ldr	r1, [pc, #156]	; (800103c <read_calibration_data+0xc0>)
 8000f9e:	208c      	movs	r0, #140	; 0x8c
 8000fa0:	f7ff ff94 	bl	8000ecc <read_register16>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d040      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 8000faa:	4925      	ldr	r1, [pc, #148]	; (8001040 <read_calibration_data+0xc4>)
 8000fac:	208e      	movs	r0, #142	; 0x8e
 8000fae:	f7ff ff8d 	bl	8000ecc <read_register16>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d039      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8000fb8:	4922      	ldr	r1, [pc, #136]	; (8001044 <read_calibration_data+0xc8>)
 8000fba:	2090      	movs	r0, #144	; 0x90
 8000fbc:	f7ff ff86 	bl	8000ecc <read_register16>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d032      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 8000fc6:	4920      	ldr	r1, [pc, #128]	; (8001048 <read_calibration_data+0xcc>)
 8000fc8:	2092      	movs	r0, #146	; 0x92
 8000fca:	f7ff ff7f 	bl	8000ecc <read_register16>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d02b      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 8000fd4:	491d      	ldr	r1, [pc, #116]	; (800104c <read_calibration_data+0xd0>)
 8000fd6:	2094      	movs	r0, #148	; 0x94
 8000fd8:	f7ff ff78 	bl	8000ecc <read_register16>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d024      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 8000fe2:	491b      	ldr	r1, [pc, #108]	; (8001050 <read_calibration_data+0xd4>)
 8000fe4:	2096      	movs	r0, #150	; 0x96
 8000fe6:	f7ff ff71 	bl	8000ecc <read_register16>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d01d      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 8000ff0:	4918      	ldr	r1, [pc, #96]	; (8001054 <read_calibration_data+0xd8>)
 8000ff2:	2098      	movs	r0, #152	; 0x98
 8000ff4:	f7ff ff6a 	bl	8000ecc <read_register16>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d016      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 8000ffe:	4916      	ldr	r1, [pc, #88]	; (8001058 <read_calibration_data+0xdc>)
 8001000:	209a      	movs	r0, #154	; 0x9a
 8001002:	f7ff ff63 	bl	8000ecc <read_register16>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00f      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <read_calibration_data+0xe0>)
 800100e:	209c      	movs	r0, #156	; 0x9c
 8001010:	f7ff ff5c 	bl	8000ecc <read_register16>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 800101a:	4911      	ldr	r1, [pc, #68]	; (8001060 <read_calibration_data+0xe4>)
 800101c:	209e      	movs	r0, #158	; 0x9e
 800101e:	f7ff ff55 	bl	8000ecc <read_register16>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <read_calibration_data+0xb0>
			{

		return true;
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <read_calibration_data+0xb2>
	}

	return false;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200041f0 	.word	0x200041f0
 8001038:	200041f2 	.word	0x200041f2
 800103c:	200041f4 	.word	0x200041f4
 8001040:	200041f6 	.word	0x200041f6
 8001044:	200041f8 	.word	0x200041f8
 8001048:	200041fa 	.word	0x200041fa
 800104c:	200041fc 	.word	0x200041fc
 8001050:	200041fe 	.word	0x200041fe
 8001054:	20004200 	.word	0x20004200
 8001058:	20004202 	.word	0x20004202
 800105c:	20004204 	.word	0x20004204
 8001060:	20004206 	.word	0x20004206

08001064 <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <write_register8+0x4c>)
 8001076:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <write_register8+0x4c>)
 800107e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	b29a      	uxth	r2, r3
 8001084:	89f9      	ldrh	r1, [r7, #14]
 8001086:	f242 7310 	movw	r3, #10000	; 0x2710
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	f007 fb0f 	bl	80086b8 <HAL_I2C_Mem_Write>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <write_register8+0x40>
		return false;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <write_register8+0x42>
	else
		return true;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200041f0 	.word	0x200041f0

080010b4 <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 80010bc:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <bmp280_init+0x130>)
 80010be:	2276      	movs	r2, #118	; 0x76
 80010c0:	849a      	strh	r2, [r3, #36]	; 0x24
	devv.i2c  = i2c;
 80010c2:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <bmp280_init+0x130>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6293      	str	r3, [r2, #40]	; 0x28
	bmp280_init_default_params();
 80010c8:	f7ff fee2 	bl	8000e90 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 80010cc:	4b45      	ldr	r3, [pc, #276]	; (80011e4 <bmp280_init+0x130>)
 80010ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d0:	2b76      	cmp	r3, #118	; 0x76
 80010d2:	d005      	beq.n	80010e0 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <bmp280_init+0x130>)
 80010d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d8:	2b77      	cmp	r3, #119	; 0x77
 80010da:	d001      	beq.n	80010e0 <bmp280_init+0x2c>

		return false;
 80010dc:	2300      	movs	r3, #0
 80010de:	e07d      	b.n	80011dc <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 80010e0:	2201      	movs	r2, #1
 80010e2:	4941      	ldr	r1, [pc, #260]	; (80011e8 <bmp280_init+0x134>)
 80010e4:	20d0      	movs	r0, #208	; 0xd0
 80010e6:	f7ff ff21 	bl	8000f2c <read_data>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <bmp280_init+0x40>
		return false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e073      	b.n	80011dc <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <bmp280_init+0x130>)
 80010f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80010fa:	2b58      	cmp	r3, #88	; 0x58
 80010fc:	d006      	beq.n	800110c <bmp280_init+0x58>
 80010fe:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <bmp280_init+0x130>)
 8001100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001104:	2b60      	cmp	r3, #96	; 0x60
 8001106:	d001      	beq.n	800110c <bmp280_init+0x58>

		return false;
 8001108:	2300      	movs	r3, #0
 800110a:	e067      	b.n	80011dc <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800110c:	21b6      	movs	r1, #182	; 0xb6
 800110e:	20e0      	movs	r0, #224	; 0xe0
 8001110:	f7ff ffa8 	bl	8001064 <write_register8>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <bmp280_init+0x6a>
		return false;
 800111a:	2300      	movs	r3, #0
 800111c:	e05e      	b.n	80011dc <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 800111e:	f107 030d 	add.w	r3, r7, #13
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	20f3      	movs	r0, #243	; 0xf3
 8001128:	f7ff ff00 	bl	8000f2c <read_data>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f5      	bne.n	800111e <bmp280_init+0x6a>
 8001132:	7b7b      	ldrb	r3, [r7, #13]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 800113c:	f7ff ff1e 	bl	8000f7c <read_calibration_data>
 8001140:	4603      	mov	r3, r0
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d100      	bne.n	800114e <bmp280_init+0x9a>
 800114c:	e001      	b.n	8001152 <bmp280_init+0x9e>
		return false;
 800114e:	2300      	movs	r3, #0
 8001150:	e044      	b.n	80011dc <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <bmp280_init+0x130>)
 8001154:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001158:	2b60      	cmp	r3, #96	; 0x60
 800115a:	d101      	bne.n	8001160 <bmp280_init+0xac>
		return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e03d      	b.n	80011dc <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <bmp280_init+0x130>)
 8001162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	b25a      	sxtb	r2, r3
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <bmp280_init+0x130>)
 800116c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4619      	mov	r1, r3
 800117e:	20f5      	movs	r0, #245	; 0xf5
 8001180:	f7ff ff70 	bl	8001064 <write_register8>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <bmp280_init+0xda>
		return false;
 800118a:	2300      	movs	r3, #0
 800118c:	e026      	b.n	80011dc <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <bmp280_init+0x130>)
 8001190:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001194:	2b01      	cmp	r3, #1
 8001196:	d103      	bne.n	80011a0 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <bmp280_init+0x130>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <bmp280_init+0x130>)
 80011a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011a6:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <bmp280_init+0x130>)
 80011ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25a      	sxtb	r2, r3
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <bmp280_init+0x130>)
 80011ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 80011c4:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	4619      	mov	r1, r3
 80011ca:	20f4      	movs	r0, #244	; 0xf4
 80011cc:	f7ff ff4a 	bl	8001064 <write_register8>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <bmp280_init+0x126>
		return false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <bmp280_init+0x128>
	}

	return true;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200041f0 	.word	0x200041f0
 80011e8:	20004221 	.word	0x20004221

080011ec <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	10da      	asrs	r2, r3, #3
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <compensate_temperature+0x70>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 8001202:	4a16      	ldr	r2, [pc, #88]	; (800125c <compensate_temperature+0x70>)
 8001204:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001208:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 800120c:	12db      	asrs	r3, r3, #11
 800120e:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	111b      	asrs	r3, r3, #4
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <compensate_temperature+0x70>)
 8001216:	8812      	ldrh	r2, [r2, #0]
 8001218:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	1112      	asrs	r2, r2, #4
 800121e:	490f      	ldr	r1, [pc, #60]	; (800125c <compensate_temperature+0x70>)
 8001220:	8809      	ldrh	r1, [r1, #0]
 8001222:	1a52      	subs	r2, r2, r1
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <compensate_temperature+0x70>)
 800122c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001230:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001234:	139b      	asrs	r3, r3, #14
 8001236:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	441a      	add	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3380      	adds	r3, #128	; 0x80
 800124e:	121b      	asrs	r3, r3, #8
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200041f0 	.word	0x200041f0

08001260 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 8001260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001264:	b09a      	sub	sp, #104	; 0x68
 8001266:	af00      	add	r7, sp, #0
 8001268:	64f8      	str	r0, [r7, #76]	; 0x4c
 800126a:	64b9      	str	r1, [r7, #72]	; 0x48
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800126c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800126e:	461a      	mov	r2, r3
 8001270:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001274:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001278:	f143 35ff 	adc.w	r5, r3, #4294967295
 800127c:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 8001280:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001284:	fb03 f102 	mul.w	r1, r3, r2
 8001288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800128a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800128c:	fb03 f302 	mul.w	r3, r3, r2
 8001290:	18ca      	adds	r2, r1, r3
 8001292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001294:	fba3 4503 	umull	r4, r5, r3, r3
 8001298:	1953      	adds	r3, r2, r5
 800129a:	461d      	mov	r5, r3
 800129c:	4bdb      	ldr	r3, [pc, #876]	; (800160c <compensate_pressure+0x3ac>)
 800129e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012a8:	fb02 f005 	mul.w	r0, r2, r5
 80012ac:	fb04 f103 	mul.w	r1, r4, r3
 80012b0:	4401      	add	r1, r0
 80012b2:	fba4 2302 	umull	r2, r3, r4, r2
 80012b6:	4419      	add	r1, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80012be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 80012c2:	4bd2      	ldr	r3, [pc, #840]	; (800160c <compensate_pressure+0x3ac>)
 80012c4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012d0:	fb03 f001 	mul.w	r0, r3, r1
 80012d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80012d6:	fb02 f101 	mul.w	r1, r2, r1
 80012da:	4408      	add	r0, r1
 80012dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012de:	fba1 2302 	umull	r2, r3, r1, r2
 80012e2:	18c1      	adds	r1, r0, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	f04f 0000 	mov.w	r0, #0
 80012ea:	f04f 0100 	mov.w	r1, #0
 80012ee:	0459      	lsls	r1, r3, #17
 80012f0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80012f4:	0450      	lsls	r0, r2, #17
 80012f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012fa:	eb12 0800 	adds.w	r8, r2, r0
 80012fe:	eb43 0901 	adc.w	r9, r3, r1
 8001302:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 8001306:	4bc1      	ldr	r3, [pc, #772]	; (800160c <compensate_pressure+0x3ac>)
 8001308:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800130c:	b21a      	sxth	r2, r3
 800130e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001312:	f04f 0000 	mov.w	r0, #0
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	00d1      	lsls	r1, r2, #3
 800131c:	2000      	movs	r0, #0
 800131e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001322:	1814      	adds	r4, r2, r0
 8001324:	61bc      	str	r4, [r7, #24]
 8001326:	414b      	adcs	r3, r1
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800132e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001336:	fb03 f102 	mul.w	r1, r3, r2
 800133a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800133c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800133e:	fb03 f302 	mul.w	r3, r3, r2
 8001342:	18ca      	adds	r2, r1, r3
 8001344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001346:	fba3 4503 	umull	r4, r5, r3, r3
 800134a:	1953      	adds	r3, r2, r5
 800134c:	461d      	mov	r5, r3
 800134e:	4baf      	ldr	r3, [pc, #700]	; (800160c <compensate_pressure+0x3ac>)
 8001350:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001354:	b21a      	sxth	r2, r3
 8001356:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800135a:	fb02 f005 	mul.w	r0, r2, r5
 800135e:	fb04 f103 	mul.w	r1, r4, r3
 8001362:	4401      	add	r1, r0
 8001364:	fba4 2302 	umull	r2, r3, r4, r2
 8001368:	4419      	add	r1, r3
 800136a:	460b      	mov	r3, r1
 800136c:	f04f 0800 	mov.w	r8, #0
 8001370:	f04f 0900 	mov.w	r9, #0
 8001374:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001378:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800137c:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 8001380:	4ba2      	ldr	r3, [pc, #648]	; (800160c <compensate_pressure+0x3ac>)
 8001382:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001386:	b21a      	sxth	r2, r3
 8001388:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800138c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800138e:	fb03 f001 	mul.w	r0, r3, r1
 8001392:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001394:	fb02 f101 	mul.w	r1, r2, r1
 8001398:	1844      	adds	r4, r0, r1
 800139a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800139c:	fba1 0102 	umull	r0, r1, r1, r2
 80013a0:	1863      	adds	r3, r4, r1
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	030b      	lsls	r3, r1, #12
 80013ae:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80013b2:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 80013b4:	eb18 0102 	adds.w	r1, r8, r2
 80013b8:	6139      	str	r1, [r7, #16]
 80013ba:	eb49 0303 	adc.w	r3, r9, r3
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013c4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 80013c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013cc:	1c11      	adds	r1, r2, #0
 80013ce:	6439      	str	r1, [r7, #64]	; 0x40
 80013d0:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80013d4:	647b      	str	r3, [r7, #68]	; 0x44
 80013d6:	4b8d      	ldr	r3, [pc, #564]	; (800160c <compensate_pressure+0x3ac>)
 80013d8:	88db      	ldrh	r3, [r3, #6]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80013e4:	4629      	mov	r1, r5
 80013e6:	fb02 f001 	mul.w	r0, r2, r1
 80013ea:	4621      	mov	r1, r4
 80013ec:	fb01 f103 	mul.w	r1, r1, r3
 80013f0:	4401      	add	r1, r0
 80013f2:	4620      	mov	r0, r4
 80013f4:	fba0 2302 	umull	r2, r3, r0, r2
 80013f8:	4419      	add	r1, r3
 80013fa:	460b      	mov	r3, r1
 80013fc:	f04f 0000 	mov.w	r0, #0
 8001400:	f04f 0100 	mov.w	r1, #0
 8001404:	1058      	asrs	r0, r3, #1
 8001406:	17d9      	asrs	r1, r3, #31
 8001408:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	if (var1 == 0) {
 800140c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001410:	4313      	orrs	r3, r2
 8001412:	d101      	bne.n	8001418 <compensate_pressure+0x1b8>
		return 0;  // avoid exception caused by division by zero
 8001414:	2300      	movs	r3, #0
 8001416:	e0f4      	b.n	8001602 <compensate_pressure+0x3a2>
	}

	p = 1048576 - adc_press;
 8001418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800141e:	461a      	mov	r2, r3
 8001420:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001424:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	p = (((p << 31) - var2) * 3125) / var1;
 8001428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800142a:	105b      	asrs	r3, r3, #1
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001430:	07db      	lsls	r3, r3, #31
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
 8001434:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001438:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800143c:	4621      	mov	r1, r4
 800143e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001442:	4629      	mov	r1, r5
 8001444:	eb61 0b03 	sbc.w	fp, r1, r3
 8001448:	4652      	mov	r2, sl
 800144a:	465b      	mov	r3, fp
 800144c:	1891      	adds	r1, r2, r2
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	415b      	adcs	r3, r3
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001458:	eb12 020a 	adds.w	r2, r2, sl
 800145c:	eb43 030b 	adc.w	r3, r3, fp
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	0199      	lsls	r1, r3, #6
 800146a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800146e:	0190      	lsls	r0, r2, #6
 8001470:	1812      	adds	r2, r2, r0
 8001472:	eb41 0303 	adc.w	r3, r1, r3
 8001476:	f04f 0000 	mov.w	r0, #0
 800147a:	f04f 0100 	mov.w	r1, #0
 800147e:	0099      	lsls	r1, r3, #2
 8001480:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001484:	0090      	lsls	r0, r2, #2
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	eb12 020a 	adds.w	r2, r2, sl
 800148e:	eb43 030b 	adc.w	r3, r3, fp
 8001492:	f04f 0000 	mov.w	r0, #0
 8001496:	f04f 0100 	mov.w	r1, #0
 800149a:	0099      	lsls	r1, r3, #2
 800149c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014a0:	0090      	lsls	r0, r2, #2
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	eb12 010a 	adds.w	r1, r2, sl
 80014aa:	6339      	str	r1, [r7, #48]	; 0x30
 80014ac:	eb43 030b 	adc.w	r3, r3, fp
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
 80014b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014ba:	f7ff fb1d 	bl	8000af8 <__aeabi_ldivmod>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <compensate_pressure+0x3ac>)
 80014c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80014cc:	b218      	sxth	r0, r3
 80014ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014d2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	0b62      	lsrs	r2, r4, #13
 80014e0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80014e4:	136b      	asrs	r3, r5, #13
 80014e6:	fb02 f501 	mul.w	r5, r2, r1
 80014ea:	fb00 f403 	mul.w	r4, r0, r3
 80014ee:	442c      	add	r4, r5
 80014f0:	fba0 0102 	umull	r0, r1, r0, r2
 80014f4:	1863      	adds	r3, r4, r1
 80014f6:	4619      	mov	r1, r3
 80014f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	0b62      	lsrs	r2, r4, #13
 8001506:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800150a:	136b      	asrs	r3, r5, #13
 800150c:	fb02 f501 	mul.w	r5, r2, r1
 8001510:	fb00 f403 	mul.w	r4, r0, r3
 8001514:	442c      	add	r4, r5
 8001516:	fba0 0102 	umull	r0, r1, r0, r2
 800151a:	1863      	adds	r3, r4, r1
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	0e42      	lsrs	r2, r0, #25
 8001528:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800152c:	164b      	asrs	r3, r1, #25
 800152e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <compensate_pressure+0x3ac>)
 8001534:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001538:	b21a      	sxth	r2, r3
 800153a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800153e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001540:	fb03 f001 	mul.w	r0, r3, r1
 8001544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001546:	fb02 f101 	mul.w	r1, r2, r1
 800154a:	1844      	adds	r4, r0, r1
 800154c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800154e:	fba1 0102 	umull	r0, r1, r1, r2
 8001552:	1863      	adds	r3, r4, r1
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	0cc2      	lsrs	r2, r0, #19
 8001560:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001564:	14cb      	asrs	r3, r1, #19
 8001566:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 800156a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800156e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001572:	1884      	adds	r4, r0, r2
 8001574:	62bc      	str	r4, [r7, #40]	; 0x28
 8001576:	eb41 0303 	adc.w	r3, r1, r3
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001580:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001584:	4621      	mov	r1, r4
 8001586:	1889      	adds	r1, r1, r2
 8001588:	6239      	str	r1, [r7, #32]
 800158a:	4629      	mov	r1, r5
 800158c:	eb43 0101 	adc.w	r1, r3, r1
 8001590:	6279      	str	r1, [r7, #36]	; 0x24
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800159e:	4623      	mov	r3, r4
 80015a0:	0a18      	lsrs	r0, r3, #8
 80015a2:	462b      	mov	r3, r5
 80015a4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015a8:	462b      	mov	r3, r5
 80015aa:	1219      	asrs	r1, r3, #8
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <compensate_pressure+0x3ac>)
 80015ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015b2:	b21c      	sxth	r4, r3
 80015b4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	012b      	lsls	r3, r5, #4
 80015c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80015c6:	0122      	lsls	r2, r4, #4
 80015c8:	1884      	adds	r4, r0, r2
 80015ca:	603c      	str	r4, [r7, #0]
 80015cc:	eb41 0303 	adc.w	r3, r1, r3
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015d6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	return p/256;
 80015da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015de:	2a00      	cmp	r2, #0
 80015e0:	f173 0100 	sbcs.w	r1, r3, #0
 80015e4:	da02      	bge.n	80015ec <compensate_pressure+0x38c>
 80015e6:	32ff      	adds	r2, #255	; 0xff
 80015e8:	f143 0300 	adc.w	r3, r3, #0
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	0a10      	lsrs	r0, r2, #8
 80015f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015fa:	1219      	asrs	r1, r3, #8
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4613      	mov	r3, r2
}
 8001602:	4618      	mov	r0, r3
 8001604:	3768      	adds	r7, #104	; 0x68
 8001606:	46bd      	mov	sp, r7
 8001608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800160c:	200041f0 	.word	0x200041f0

08001610 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 8001616:	463b      	mov	r3, r7
 8001618:	2203      	movs	r2, #3
 800161a:	4619      	mov	r1, r3
 800161c:	20f7      	movs	r0, #247	; 0xf7
 800161e:	f7ff fc85 	bl	8000f2c <read_data>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <bmp280_read_fixed+0x1c>
		return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e075      	b.n	8001718 <bmp280_read_fixed+0x108>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800162c:	783b      	ldrb	r3, [r7, #0]
 800162e:	031a      	lsls	r2, r3, #12
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4313      	orrs	r3, r2
 8001636:	78ba      	ldrb	r2, [r7, #2]
 8001638:	0912      	lsrs	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	4313      	orrs	r3, r2
 800163e:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <bmp280_read_fixed+0x120>)
 8001640:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 8001642:	463b      	mov	r3, r7
 8001644:	2203      	movs	r2, #3
 8001646:	4619      	mov	r1, r3
 8001648:	20fa      	movs	r0, #250	; 0xfa
 800164a:	f7ff fc6f 	bl	8000f2c <read_data>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <bmp280_read_fixed+0x48>
		return false;
 8001654:	2300      	movs	r3, #0
 8001656:	e05f      	b.n	8001718 <bmp280_read_fixed+0x108>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001658:	783b      	ldrb	r3, [r7, #0]
 800165a:	031a      	lsls	r2, r3, #12
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4313      	orrs	r3, r2
 8001662:	78ba      	ldrb	r2, [r7, #2]
 8001664:	0912      	lsrs	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4313      	orrs	r3, r2
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <bmp280_read_fixed+0x124>)
 800166c:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <bmp280_read_fixed+0x124>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4931      	ldr	r1, [pc, #196]	; (8001738 <bmp280_read_fixed+0x128>)
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fdb9 	bl	80011ec <compensate_temperature>
 800167a:	4603      	mov	r3, r0
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <bmp280_read_fixed+0x12c>)
 800167e:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <bmp280_read_fixed+0x120>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <bmp280_read_fixed+0x128>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fde8 	bl	8001260 <compensate_pressure>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <bmp280_read_fixed+0x130>)
 8001696:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <bmp280_read_fixed+0x130>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001744 <bmp280_read_fixed+0x134>
 80016a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ac:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001748 <bmp280_read_fixed+0x138>
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	f013 fc70 	bl	8014f98 <powf>
 80016b8:	ee10 3a10 	vmov	r3, s0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe feeb 	bl	8000498 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	4920      	ldr	r1, [pc, #128]	; (800174c <bmp280_read_fixed+0x13c>)
 80016cc:	f7fe fd84 	bl	80001d8 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a311      	add	r3, pc, #68	; (adr r3, 8001720 <bmp280_read_fixed+0x110>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ff33 	bl	8000548 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <bmp280_read_fixed+0x140>)
 80016f0:	f7fe ff2a 	bl	8000548 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a30a      	add	r3, pc, #40	; (adr r3, 8001728 <bmp280_read_fixed+0x118>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe fd69 	bl	80001d8 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f9cb 	bl	8000aa8 <__aeabi_d2iz>
 8001712:	4603      	mov	r3, r0
 8001714:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00000000 	.word	0x00000000
 8001724:	40e5a540 	.word	0x40e5a540
 8001728:	00000000 	.word	0x00000000
 800172c:	40f86a00 	.word	0x40f86a00
 8001730:	200000fc 	.word	0x200000fc
 8001734:	20000100 	.word	0x20000100
 8001738:	20000104 	.word	0x20000104
 800173c:	20000108 	.word	0x20000108
 8001740:	2000010c 	.word	0x2000010c
 8001744:	47c80800 	.word	0x47c80800
 8001748:	3e42de01 	.word	0x3e42de01
 800174c:	3ff00000 	.word	0x3ff00000
 8001750:	40590000 	.word	0x40590000

08001754 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <ibus_init+0x54>)
 800175e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001762:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <ibus_init+0x54>)
 8001766:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800176a:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 800176c:	2302      	movs	r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e008      	b.n	8001784 <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <ibus_init+0x54>)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800177a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b0d      	cmp	r3, #13
 8001788:	ddf3      	ble.n	8001772 <ibus_init+0x1e>
    }
	uart = uartt;
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <ibus_init+0x58>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <ibus_init+0x58>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	4906      	ldr	r1, [pc, #24]	; (80017b0 <ibus_init+0x5c>)
 8001798:	4618      	mov	r0, r3
 800179a:	f00a ff48 	bl	800c62e <HAL_UART_Receive_IT>
#endif
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20004228 	.word	0x20004228
 80017ac:	20000138 	.word	0x20000138
 80017b0:	20000134 	.word	0x20000134

080017b4 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <ibus_calback+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f80d 	bl	80017dc <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <ibus_calback+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4902      	ldr	r1, [pc, #8]	; (80017d4 <ibus_calback+0x20>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00a ff2f 	bl	800c62e <HAL_UART_Receive_IT>
#endif

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000134 	.word	0x20000134
 80017d8:	20000138 	.word	0x20000138

080017dc <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <ibusDataReceive+0x78>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <ibusDataReceive+0x7c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <ibusDataReceive+0x80>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001800:	4293      	cmp	r3, r2
 8001802:	d902      	bls.n	800180a <ibusDataReceive+0x2e>
        ibusFramePosition = 0;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <ibusDataReceive+0x84>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <ibusDataReceive+0x80>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <ibusDataReceive+0x84>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <ibusDataReceive+0x42>
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b20      	cmp	r3, #32
 800181c:	d114      	bne.n	8001848 <ibusDataReceive+0x6c>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <ibusDataReceive+0x84>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <ibusDataReceive+0x88>)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <ibusDataReceive+0x84>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b1f      	cmp	r3, #31
 8001830:	d103      	bne.n	800183a <ibusDataReceive+0x5e>
        ibusFrameDone = TRUE;
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <ibusDataReceive+0x8c>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e007      	b.n	800184a <ibusDataReceive+0x6e>
    } else {
        ibusFramePosition++;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <ibusDataReceive+0x84>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <ibusDataReceive+0x84>)
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e000      	b.n	800184a <ibusDataReceive+0x6e>
        return;
 8001848:	bf00      	nop
    }
}
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	200048cc 	.word	0x200048cc
 8001858:	2000465c 	.word	0x2000465c
 800185c:	2000013c 	.word	0x2000013c
 8001860:	20000140 	.word	0x20000140
 8001864:	20000114 	.word	0x20000114
 8001868:	20000110 	.word	0x20000110

0800186c <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <ibusFrameComplete+0x198>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80bc 	beq.w	80019f4 <ibusFrameComplete+0x188>
        ibusFrameDone = FALSE;
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <ibusFrameComplete+0x198>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001886:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e009      	b.n	80018a2 <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	b29b      	uxth	r3, r3
 8001896:	89ba      	ldrh	r2, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3301      	adds	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b1d      	cmp	r3, #29
 80018a6:	d9f2      	bls.n	800188e <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80018a8:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018aa:	7f9b      	ldrb	r3, [r3, #30]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018b0:	7fdb      	ldrb	r3, [r3, #31]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 80018bc:	89ba      	ldrh	r2, [r7, #12]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8097 	bne.w	80019f4 <ibusFrameComplete+0x188>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018c8:	78db      	ldrb	r3, [r3, #3]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018ce:	7892      	ldrb	r2, [r2, #2]
 80018d0:	4413      	add	r3, r2
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80018d6:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018da:	795b      	ldrb	r3, [r3, #5]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018e0:	7912      	ldrb	r2, [r2, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80018e8:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018ec:	79db      	ldrb	r3, [r3, #7]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018f2:	7992      	ldrb	r2, [r2, #6]
 80018f4:	4413      	add	r3, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80018fa:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <ibusFrameComplete+0x19c>)
 80018fe:	7a5b      	ldrb	r3, [r3, #9]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4a41      	ldr	r2, [pc, #260]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001904:	7a12      	ldrb	r2, [r2, #8]
 8001906:	4413      	add	r3, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800190c:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001910:	7adb      	ldrb	r3, [r3, #11]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001916:	7a92      	ldrb	r2, [r2, #10]
 8001918:	4413      	add	r3, r2
 800191a:	461a      	mov	r2, r3
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800191e:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001922:	7b5b      	ldrb	r3, [r3, #13]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001928:	7b12      	ldrb	r2, [r2, #12]
 800192a:	4413      	add	r3, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001930:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001934:	7bdb      	ldrb	r3, [r3, #15]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <ibusFrameComplete+0x19c>)
 800193a:	7b92      	ldrb	r2, [r2, #14]
 800193c:	4413      	add	r3, r2
 800193e:	461a      	mov	r2, r3
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001942:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001946:	7c5b      	ldrb	r3, [r3, #17]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <ibusFrameComplete+0x19c>)
 800194c:	7c12      	ldrb	r2, [r2, #16]
 800194e:	4413      	add	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001954:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001958:	7cdb      	ldrb	r3, [r3, #19]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <ibusFrameComplete+0x19c>)
 800195e:	7c92      	ldrb	r2, [r2, #18]
 8001960:	4413      	add	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001966:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <ibusFrameComplete+0x19c>)
 800196a:	7d5b      	ldrb	r3, [r3, #21]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001970:	7d12      	ldrb	r2, [r2, #20]
 8001972:	4413      	add	r3, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <ibusFrameComplete+0x1a0>)
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <ibusFrameComplete+0x19c>)
 800197c:	7ddb      	ldrb	r3, [r3, #23]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001982:	7d92      	ldrb	r2, [r2, #22]
 8001984:	4413      	add	r3, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <ibusFrameComplete+0x19c>)
 800198e:	7e5b      	ldrb	r3, [r3, #25]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <ibusFrameComplete+0x19c>)
 8001994:	7e12      	ldrb	r2, [r2, #24]
 8001996:	4413      	add	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <ibusFrameComplete+0x1a0>)
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019a0:	7edb      	ldrb	r3, [r3, #27]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019a6:	7e92      	ldrb	r2, [r2, #26]
 80019a8:	4413      	add	r3, r2
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019b2:	7f5b      	ldrb	r3, [r3, #29]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <ibusFrameComplete+0x19c>)
 80019b8:	7f12      	ldrb	r2, [r2, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	e010      	b.n	80019ea <ibusFrameComplete+0x17e>
			    if(ibusChannelData[i] > 2100){
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	f640 0234 	movw	r2, #2100	; 0x834
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d905      	bls.n	80019e4 <ibusFrameComplete+0x178>
				    ibusChannelData[i] = 1000;
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <ibusFrameComplete+0x1a0>)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b0d      	cmp	r3, #13
 80019ee:	ddeb      	ble.n	80019c8 <ibusFrameComplete+0x15c>
				}
			}
            return TRUE;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <ibusFrameComplete+0x18a>
        }
    }
    return FALSE;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000110 	.word	0x20000110
 8001a08:	20000114 	.word	0x20000114
 8001a0c:	20004228 	.word	0x20004228

08001a10 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <mpu6050Connection+0x24>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	2305      	movs	r3, #5
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	21d0      	movs	r1, #208	; 0xd0
 8001a1e:	f007 f96b 	bl	8008cf8 <HAL_I2C_IsDeviceReady>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <mpu6050Connection+0x28>)
 8001a28:	701a      	strb	r2, [r3, #0]
    return isConnected;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <mpu6050Connection+0x28>)
 8001a2c:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000144 	.word	0x20000144
 8001a38:	20000148 	.word	0x20000148

08001a3c <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001a44:	4a25      	ldr	r2, [pc, #148]	; (8001adc <mpu6050_init+0xa0>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8001a4a:	f7ff ffe1 	bl	8001a10 <mpu6050Connection>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d13a      	bne.n	8001ad0 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 8001a5a:	236b      	movs	r3, #107	; 0x6b
 8001a5c:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <mpu6050_init+0xa0>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f107 0208 	add.w	r2, r7, #8
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	21d0      	movs	r1, #208	; 0xd0
 8001a72:	f006 fafd 	bl	8008070 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 8001a76:	231b      	movs	r3, #27
 8001a78:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <mpu6050_init+0xa0>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f107 0208 	add.w	r2, r7, #8
 8001a86:	2301      	movs	r3, #1
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	21d0      	movs	r1, #208	; 0xd0
 8001a8e:	f006 faef 	bl	8008070 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 8001a92:	231c      	movs	r3, #28
 8001a94:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 8001a96:	2318      	movs	r3, #24
 8001a98:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <mpu6050_init+0xa0>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f107 0208 	add.w	r2, r7, #8
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	21d0      	movs	r1, #208	; 0xd0
 8001aaa:	f006 fae1 	bl	8008070 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8001aae:	2337      	movs	r3, #55	; 0x37
 8001ab0:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 8001ab2:	7a7b      	ldrb	r3, [r7, #9]
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <mpu6050_init+0xa0>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f107 0208 	add.w	r2, r7, #8
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	21d0      	movs	r1, #208	; 0xd0
 8001acc:	f006 fad0 	bl	8008070 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000144 	.word	0x20000144

08001ae0 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8001ae8:	2343      	movs	r3, #67	; 0x43
 8001aea:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <mpu6050_gyro_get_raw+0x74>)
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	f107 0208 	add.w	r2, r7, #8
 8001af4:	2301      	movs	r3, #1
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	21d0      	movs	r1, #208	; 0xd0
 8001afc:	f006 fab8 	bl	8008070 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <mpu6050_gyro_get_raw+0x74>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	f107 0208 	add.w	r2, r7, #8
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	21d0      	movs	r1, #208	; 0xd0
 8001b10:	f006 fbac 	bl	800826c <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	7a7b      	ldrb	r3, [r7, #9]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 8001b26:	7abb      	ldrb	r3, [r7, #10]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7b7b      	ldrb	r3, [r7, #13]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	809a      	strh	r2, [r3, #4]
	}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000144 	.word	0x20000144

08001b58 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	6018      	str	r0, [r3, #0]
 8001b6a:	8892      	ldrh	r2, [r2, #4]
 8001b6c:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001b6e:	233b      	movs	r3, #59	; 0x3b
 8001b70:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <mpu6050_acc_get_raw+0x80>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f107 0208 	add.w	r2, r7, #8
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	21d0      	movs	r1, #208	; 0xd0
 8001b82:	f006 fa75 	bl	8008070 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <mpu6050_acc_get_raw+0x80>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2306      	movs	r3, #6
 8001b94:	21d0      	movs	r1, #208	; 0xd0
 8001b96:	f006 fb69 	bl	800826c <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8001b9a:	7a3b      	ldrb	r3, [r7, #8]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	7a7b      	ldrb	r3, [r7, #9]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8001bac:	7abb      	ldrb	r3, [r7, #10]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	7b7b      	ldrb	r3, [r7, #13]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	809a      	strh	r2, [r3, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000144 	.word	0x20000144

08001bdc <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 8001be4:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <qmc5883_init+0x54>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8001bea:	230b      	movs	r3, #11
 8001bec:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <qmc5883_init+0x54>)
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	231a      	movs	r3, #26
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f107 020c 	add.w	r2, r7, #12
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2302      	movs	r3, #2
 8001c04:	f006 fa34 	bl	8008070 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001c0c:	231d      	movs	r3, #29
 8001c0e:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <qmc5883_init+0x54>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	231a      	movs	r3, #26
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f107 020c 	add.w	r2, r7, #12
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2302      	movs	r3, #2
 8001c22:	f006 fa25 	bl	8008070 <HAL_I2C_Master_Transmit>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000150 	.word	0x20000150

08001c34 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	2300      	movs	r3, #0
 8001c42:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <qmc_get_raw+0x6c>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	231a      	movs	r3, #26
 8001c4a:	b299      	uxth	r1, r3
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2306      	movs	r3, #6
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f006 fe25 	bl	80088ac <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 8001c62:	7a7b      	ldrb	r3, [r7, #9]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	7a3b      	ldrb	r3, [r7, #8]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	7abb      	ldrb	r3, [r7, #10]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 8001c86:	7b7b      	ldrb	r3, [r7, #13]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	809a      	strh	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000150 	.word	0x20000150

08001ca4 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cae:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8001cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001cf0 <pt1FilterGain+0x4c>
 8001cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc6:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 8001cca:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cce:	edd7 7a00 	vldr	s15, [r7]
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	ed97 7a00 	vldr	s14, [r7]
 8001cda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cde:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40c90fdb 	.word	0x40c90fdb

08001cf4 <baro_init>:

int8_t baro_calib;
int32_t alt_offset;
int32_t altitude_filted;
int32_t climb_rate;
void baro_init(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <baro_init+0x40>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <baro_init+0x44>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <baro_init+0x48>)
 8001d08:	f7ff f9d4 	bl	80010b4 <bmp280_init>
    for(int i=0; i< 100; i++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e007      	b.n	8001d22 <baro_init+0x2e>
    	bmp280_read_fixed();
 8001d12:	f7ff fc7d 	bl	8001610 <bmp280_read_fixed>
    	HAL_Delay(5);
 8001d16:	2005      	movs	r0, #5
 8001d18:	f005 f96a 	bl	8006ff0 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b63      	cmp	r3, #99	; 0x63
 8001d26:	ddf4      	ble.n	8001d12 <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20004268 	.word	0x20004268
 8001d38:	20004260 	.word	0x20004260
 8001d3c:	200046ec 	.word	0x200046ec

08001d40 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
    climb_rate = 0;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <baro_zero_calibrate+0x68>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 8001d50:	f7ff fc5e 	bl	8001610 <bmp280_read_fixed>
 8001d54:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a13      	ldr	r2, [pc, #76]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d60:	6013      	str	r3, [r2, #0]
    count ++;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d72:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	dd0f      	ble.n	8001d9e <baro_zero_calibrate+0x5e>
        alt_offset /= 100;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <baro_zero_calibrate+0x74>)
 8001d84:	fb82 1203 	smull	r1, r2, r2, r3
 8001d88:	1152      	asrs	r2, r2, #5
 8001d8a:	17db      	asrs	r3, r3, #31
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <baro_zero_calibrate+0x6c>)
 8001d90:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <baro_zero_calibrate+0x78>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
        count = 101;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <baro_zero_calibrate+0x70>)
 8001d9a:	2265      	movs	r2, #101	; 0x65
 8001d9c:	801a      	strh	r2, [r3, #0]
    }
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20004264 	.word	0x20004264
 8001dac:	20004260 	.word	0x20004260
 8001db0:	20000154 	.word	0x20000154
 8001db4:	51eb851f 	.word	0x51eb851f
 8001db8:	20004268 	.word	0x20004268

08001dbc <is_baro_calibration>:

int8_t is_baro_calibration(){
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
      return baro_calib;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <is_baro_calibration+0x14>)
 8001dc2:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	20004268 	.word	0x20004268

08001dd4 <baro_update>:

void baro_update(float dt){  //100 hz update
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	ed87 0a01 	vstr	s0, [r7, #4]
    if(baro_calib != 1){
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <baro_update+0x114>)
 8001de0:	f993 3000 	ldrsb.w	r3, [r3]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d17b      	bne.n	8001ee0 <baro_update+0x10c>
        return;
    }
    static uint16_t count = 0;
    static int32_t pre_alt = 0;
    int32_t alt = bmp280_read_fixed() - alt_offset;  // cm
 8001de8:	f7ff fc12 	bl	8001610 <bmp280_read_fixed>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <baro_update+0x118>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	60fb      	str	r3, [r7, #12]
    altitude_filted += pt1FilterGain(5,dt)*(alt - altitude_filted);
 8001df6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001dfa:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001dfe:	f7ff ff51 	bl	8001ca4 <pt1FilterGain>
 8001e02:	eeb0 7a40 	vmov.f32	s14, s0
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <baro_update+0x11c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <baro_update+0x11c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2e:	ee17 2a90 	vmov	r2, s15
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <baro_update+0x11c>)
 8001e34:	601a      	str	r2, [r3, #0]
    // calculate climb rate at 5hz
    if(count %20 == 0){
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <baro_update+0x120>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <baro_update+0x124>)
 8001e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e40:	0919      	lsrs	r1, r3, #4
 8001e42:	460b      	mov	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d13f      	bne.n	8001ed2 <baro_update+0xfe>
        int climb = (altitude_filted - pre_alt)/(dt*20);
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <baro_update+0x11c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <baro_update+0x128>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e68:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e78:	ee17 3a90 	vmov	r3, s15
 8001e7c:	60bb      	str	r3, [r7, #8]
        pre_alt = altitude_filted;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <baro_update+0x11c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <baro_update+0x128>)
 8001e84:	6013      	str	r3, [r2, #0]
        // apply low-pass filter
        climb_rate += pt1FilterGain(1,dt*20)*(climb - climb_rate);
 8001e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	eef0 0a67 	vmov.f32	s1, s15
 8001e96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001e9a:	f7ff ff03 	bl	8001ca4 <pt1FilterGain>
 8001e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <baro_update+0x12c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <baro_update+0x12c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eca:	ee17 2a90 	vmov	r2, s15
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <baro_update+0x12c>)
 8001ed0:	601a      	str	r2, [r3, #0]
    }
    count ++;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <baro_update+0x120>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <baro_update+0x120>)
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	e000      	b.n	8001ee2 <baro_update+0x10e>
        return;
 8001ee0:	bf00      	nop
}
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20004268 	.word	0x20004268
 8001eec:	20004260 	.word	0x20004260
 8001ef0:	2000014c 	.word	0x2000014c
 8001ef4:	20000156 	.word	0x20000156
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	20000158 	.word	0x20000158
 8001f00:	20004264 	.word	0x20004264

08001f04 <black_box_init>:
int32_t puts_state;

/*
 * init black box
 */
void black_box_init(){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <black_box_init+0x40>)
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <black_box_init+0x44>)
 8001f0c:	605a      	str	r2, [r3, #4]
    //SDFile.fs->id = 1;
    //SDFile.id = 1;
    mount_state = f_mount(&SDFatFS,"",1);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	490e      	ldr	r1, [pc, #56]	; (8001f4c <black_box_init+0x48>)
 8001f12:	480f      	ldr	r0, [pc, #60]	; (8001f50 <black_box_init+0x4c>)
 8001f14:	f00e fe14 	bl	8010b40 <f_mount>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <black_box_init+0x50>)
 8001f1e:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001f20:	2213      	movs	r2, #19
 8001f22:	490d      	ldr	r1, [pc, #52]	; (8001f58 <black_box_init+0x54>)
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <black_box_init+0x44>)
 8001f26:	f00e fe6f 	bl	8010c08 <f_open>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <black_box_init+0x58>)
 8001f30:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.obj.objsize);
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <black_box_init+0x44>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <black_box_init+0x44>)
 8001f3a:	f00f fae4 	bl	8011506 <f_lseek>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000426c 	.word	0x2000426c
 8001f48:	20004bfc 	.word	0x20004bfc
 8001f4c:	080159ec 	.word	0x080159ec
 8001f50:	20004e2c 	.word	0x20004e2c
 8001f54:	20004479 	.word	0x20004479
 8001f58:	080159f0 	.word	0x080159f0
 8001f5c:	20004478 	.word	0x20004478

08001f60 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <black_box_pack_int+0x130>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	220b      	movs	r2, #11
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f012 fe90 	bl	8014ca0 <memset>
	if(val != 0){
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02b      	beq.n	8001fde <black_box_pack_int+0x7e>
		val = abs(val);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bfb8      	it	lt
 8001f8c:	425b      	neglt	r3, r3
 8001f8e:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f921 	bl	80021e0 <intToStr>
 8001f9e:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(val_ < 0){
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da2b      	bge.n	8001ffe <black_box_pack_int+0x9e>
			for(int i = len_str; i > 0; i--){
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001faa:	e00f      	b.n	8001fcc <black_box_pack_int+0x6c>
				str_[i] = str_[i - 1];
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001fba:	f107 0208 	add.w	r2, r7, #8
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	4413      	add	r3, r2
 8001fc2:	460a      	mov	r2, r1
 8001fc4:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	dcec      	bgt.n	8001fac <black_box_pack_int+0x4c>
			}
			len_str ++;
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			str_[0] = '-';
 8001fd8:	232d      	movs	r3, #45	; 0x2d
 8001fda:	723b      	strb	r3, [r7, #8]
 8001fdc:	e00f      	b.n	8001ffe <black_box_pack_int+0x9e>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <black_box_pack_int+0x130>)
 8001fe0:	891b      	ldrh	r3, [r3, #8]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <black_box_pack_int+0x130>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	2230      	movs	r2, #48	; 0x30
 8001fea:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	   fs.buffer_index ++;
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <black_box_pack_int+0x130>)
 8001ff2:	891b      	ldrh	r3, [r3, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <black_box_pack_int+0x130>)
 8001ffa:	811a      	strh	r2, [r3, #8]
 8001ffc:	e045      	b.n	800208a <black_box_pack_int+0x12a>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <black_box_pack_int+0x130>)
 8002004:	891b      	ldrh	r3, [r3, #8]
 8002006:	461a      	mov	r2, r3
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	4413      	add	r3, r2
 800200c:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002014:	dc08      	bgt.n	8002028 <black_box_pack_int+0xc8>
		max_index = fs.buffer_index + len_str;
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <black_box_pack_int+0x130>)
 8002018:	891b      	ldrh	r3, [r3, #8]
 800201a:	461a      	mov	r2, r3
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	4413      	add	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	e004      	b.n	8002032 <black_box_pack_int+0xd2>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 8002028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202c:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <black_box_pack_int+0x130>)
 8002034:	891b      	ldrh	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	e010      	b.n	800205c <black_box_pack_int+0xfc>
			fs.buffer[j] = str_[str_idx ++];
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	627a      	str	r2, [r7, #36]	; 0x24
 8002040:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002044:	4413      	add	r3, r2
 8002046:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <black_box_pack_int+0x130>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	4413      	add	r3, r2
 8002050:	330a      	adds	r3, #10
 8002052:	460a      	mov	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3301      	adds	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	dbea      	blt.n	800203a <black_box_pack_int+0xda>
	}
	
	if(index_flag){
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <black_box_pack_int+0x11c>
		fs.buffer_index += len_str;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <black_box_pack_int+0x130>)
 800206c:	891a      	ldrh	r2, [r3, #8]
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	b29b      	uxth	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <black_box_pack_int+0x130>)
 8002078:	811a      	strh	r2, [r3, #8]
 800207a:	e006      	b.n	800208a <black_box_pack_int+0x12a>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <black_box_pack_int+0x130>)
 800207e:	891b      	ldrh	r3, [r3, #8]
 8002080:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b02      	ldr	r3, [pc, #8]	; (8002090 <black_box_pack_int+0x130>)
 8002088:	811a      	strh	r2, [r3, #8]
	}
}
 800208a:	3730      	adds	r7, #48	; 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000426c 	.word	0x2000426c

08002094 <black_box_pack_str>:


void black_box_pack_str(char *c){
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

    int i = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80020a0:	e01c      	b.n	80020dc <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <black_box_pack_str+0x70>)
 80020a4:	891b      	ldrh	r3, [r3, #8]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b0:	dd04      	ble.n	80020bc <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <black_box_pack_str+0x70>)
 80020b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b8:	811a      	strh	r2, [r3, #8]
                return;
 80020ba:	e01d      	b.n	80020f8 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	441a      	add	r2, r3
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <black_box_pack_str+0x70>)
 80020c4:	891b      	ldrh	r3, [r3, #8]
 80020c6:	4619      	mov	r1, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	440b      	add	r3, r1
 80020cc:	7811      	ldrb	r1, [r2, #0]
 80020ce:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <black_box_pack_str+0x70>)
 80020d0:	4413      	add	r3, r2
 80020d2:	460a      	mov	r2, r1
 80020d4:	729a      	strb	r2, [r3, #10]
        i ++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1dc      	bne.n	80020a2 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <black_box_pack_str+0x70>)
 80020ea:	891a      	ldrh	r2, [r3, #8]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <black_box_pack_str+0x70>)
 80020f6:	811a      	strh	r2, [r3, #8]
}
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000426c 	.word	0x2000426c

08002108 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <black_box_pack_char+0x30>)
 8002114:	891b      	ldrh	r3, [r3, #8]
 8002116:	461a      	mov	r2, r3
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <black_box_pack_char+0x30>)
 800211a:	4413      	add	r3, r2
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <black_box_pack_char+0x30>)
 8002122:	891b      	ldrh	r3, [r3, #8]
 8002124:	3301      	adds	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <black_box_pack_char+0x30>)
 800212a:	811a      	strh	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	2000426c 	.word	0x2000426c

0800213c <black_box_load>:



void black_box_load()
 {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <black_box_load+0x38>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <black_box_load+0x3c>)
 8002148:	f00f fca7 	bl	8011a9a <f_puts>
 800214c:	4603      	mov	r3, r0
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <black_box_load+0x40>)
 8002150:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <black_box_load+0x38>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	f00f f94c 	bl	80113f4 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 800215c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002160:	2100      	movs	r1, #0
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <black_box_load+0x3c>)
 8002164:	f012 fd9c 	bl	8014ca0 <memset>
      fs.buffer_index = 0;
 8002168:	4b02      	ldr	r3, [pc, #8]	; (8002174 <black_box_load+0x38>)
 800216a:	2200      	movs	r2, #0
 800216c:	811a      	strh	r2, [r3, #8]
 }
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000426c 	.word	0x2000426c
 8002178:	20004276 	.word	0x20004276
 800217c:	2000447c 	.word	0x2000447c

08002180 <reverse>:




static void reverse( char *str, int len)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3b01      	subs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002194:	e018      	b.n	80021c8 <reverse+0x48>
        temp = str[i];
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	441a      	add	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	440b      	add	r3, r1
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
        i++;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3301      	adds	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
        j--;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbe2      	blt.n	8002196 <reverse+0x16>
    }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
    while (x) {
 80021ec:	e01f      	b.n	800222e <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <intToStr+0x8c>)
 80021f2:	fb83 1302 	smull	r1, r3, r3, r2
 80021f6:	1099      	asrs	r1, r3, #2
 80021f8:	17d3      	asrs	r3, r2, #31
 80021fa:	1ac9      	subs	r1, r1, r3
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	1ad1      	subs	r1, r2, r3
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <intToStr+0x90>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	4818      	ldr	r0, [pc, #96]	; (8002270 <intToStr+0x90>)
 8002210:	6001      	str	r1, [r0, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	440b      	add	r3, r1
 8002218:	3230      	adds	r2, #48	; 0x30
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <intToStr+0x8c>)
 8002222:	fb82 1203 	smull	r1, r2, r2, r3
 8002226:	1092      	asrs	r2, r2, #2
 8002228:	17db      	asrs	r3, r3, #31
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1dc      	bne.n	80021ee <intToStr+0xe>
    }

    while (fs.indexx < d)
 8002234:	e009      	b.n	800224a <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <intToStr+0x90>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <intToStr+0x90>)
 800223e:	600a      	str	r2, [r1, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4413      	add	r3, r2
 8002246:	2230      	movs	r2, #48	; 0x30
 8002248:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <intToStr+0x90>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dcf0      	bgt.n	8002236 <intToStr+0x56>
    reverse(str,fs.indexx);
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <intToStr+0x90>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f7ff ff90 	bl	8002180 <reverse>
    return fs.indexx;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <intToStr+0x90>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	66666667 	.word	0x66666667
 8002270:	2000426c 	.word	0x2000426c

08002274 <compassInit>:
int8_t file_open = 0;

 AT24Cxx_devices_t device_array;
/*  Init compass
 */
void compassInit(){
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

  calibrate_value.scale_factor_axis[X] = 1.0f;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <compassInit+0x64>)
 800227a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800227e:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <compassInit+0x64>)
 8002282:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002286:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <compassInit+0x64>)
 800228a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800228e:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <compassInit+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <compassInit+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <compassInit+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]

  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <compassInit+0x68>)
 80022a4:	2100      	movs	r1, #0
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <compassInit+0x6c>)
 80022a8:	f003 fdb4 	bl	8005e14 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <compassInit+0x68>)
 80022ae:	2101      	movs	r1, #1
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <compassInit+0x6c>)
 80022b2:	f003 fdef 	bl	8005e94 <AT24Cxx_add_dev>

#ifdef QMC5883
  qmc5883_init(&hi2c1);
 80022b6:	480b      	ldr	r0, [pc, #44]	; (80022e4 <compassInit+0x70>)
 80022b8:	f7ff fc90 	bl	8001bdc <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 80022bc:	2120      	movs	r1, #32
 80022be:	480a      	ldr	r0, [pc, #40]	; (80022e8 <compassInit+0x74>)
 80022c0:	f005 fd46 	bl	8007d50 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <compassInit+0x5c>
      compass_calibrate();
 80022ca:	f000 f8e9 	bl	80024a0 <compass_calibrate>

    calibrate_value.hard_iron_calibrate_value[X] = 500;
    calibrate_value.hard_iron_calibrate_value[Y] = 20;
    calibrate_value.hard_iron_calibrate_value[Z] = 20;
*/
}
 80022ce:	e001      	b.n	80022d4 <compassInit+0x60>
      read_calibrate_file();
 80022d0:	f000 f876 	bl	80023c0 <read_calibrate_file>
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200044a8 	.word	0x200044a8
 80022dc:	200046ec 	.word	0x200046ec
 80022e0:	20004480 	.word	0x20004480
 80022e4:	20004698 	.word	0x20004698
 80022e8:	40020400 	.word	0x40020400

080022ec <compass_get>:

void compass_get(axis3_t *out){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fc9b 	bl	8001c34 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 80022fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <compass_get+0xd0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b29b      	uxth	r3, r3
 800230e:	b21a      	sxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002314:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b28      	ldr	r3, [pc, #160]	; (80023bc <compass_get+0xd0>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	b29b      	uxth	r3, r3
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	b29b      	uxth	r3, r3
 8002324:	b21a      	sxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 800232a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <compass_get+0xd0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	b29b      	uxth	r3, r3
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	b29b      	uxth	r3, r3
 800233a:	b21a      	sxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <compass_get+0xd0>)
 8002350:	edd3 7a03 	vldr	s15, [r3, #12]
 8002354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235c:	ee17 3a90 	vmov	r3, s15
 8002360:	b21a      	sxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <compass_get+0xd0>)
 8002376:	edd3 7a04 	vldr	s15, [r3, #16]
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002382:	ee17 3a90 	vmov	r3, s15
 8002386:	b21a      	sxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <compass_get+0xd0>)
 800239c:	edd3 7a05 	vldr	s15, [r3, #20]
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	809a      	strh	r2, [r3, #4]
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200044a8 	.word	0x200044a8

080023c0 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <read_calibrate_file+0xd0>)
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	231c      	movs	r3, #28
 80023d0:	2210      	movs	r2, #16
 80023d2:	4930      	ldr	r1, [pc, #192]	; (8002494 <read_calibrate_file+0xd4>)
 80023d4:	f003 feb7 	bl	8006146 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <read_calibrate_file+0xd4>)
 80023e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f0:	ee17 3a90 	vmov	r3, s15
 80023f4:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <read_calibrate_file+0xd4>)
 8002402:	edd3 7a04 	vldr	s15, [r3, #16]
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240e:	ee17 3a90 	vmov	r3, s15
 8002412:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <read_calibrate_file+0xd4>)
 8002420:	edd3 7a05 	vldr	s15, [r3, #20]
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242c:	ee17 3a90 	vmov	r3, s15
 8002430:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <read_calibrate_file+0xd4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <read_calibrate_file+0xd4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <read_calibrate_file+0xd4>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	607b      	str	r3, [r7, #4]
    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <read_calibrate_file+0xd4>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	bfb8      	it	lt
 8002460:	425b      	neglt	r3, r3
 8002462:	2b28      	cmp	r3, #40	; 0x28
 8002464:	dd10      	ble.n	8002488 <read_calibrate_file+0xc8>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800246a:	480b      	ldr	r0, [pc, #44]	; (8002498 <read_calibrate_file+0xd8>)
 800246c:	f005 fca1 	bl	8007db2 <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002470:	2120      	movs	r1, #32
 8002472:	480a      	ldr	r0, [pc, #40]	; (800249c <read_calibrate_file+0xdc>)
 8002474:	f005 fc9d 	bl	8007db2 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002478:	2110      	movs	r1, #16
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <read_calibrate_file+0xdc>)
 800247c:	f005 fc99 	bl	8007db2 <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8002480:	2032      	movs	r0, #50	; 0x32
 8002482:	f004 fdb5 	bl	8006ff0 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002486:	e7ee      	b.n	8002466 <read_calibrate_file+0xa6>
      }
    }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20004480 	.word	0x20004480
 8002494:	200044a8 	.word	0x200044a8
 8002498:	40020800 	.word	0x40020800
 800249c:	40020000 	.word	0x40020000

080024a0 <compass_calibrate>:

/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 80024a6:	4a9d      	ldr	r2, [pc, #628]	; (800271c <compass_calibrate+0x27c>)
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024b0:	6018      	str	r0, [r3, #0]
 80024b2:	3304      	adds	r3, #4
 80024b4:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 80024b6:	4a9a      	ldr	r2, [pc, #616]	; (8002720 <compass_calibrate+0x280>)
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c0:	6018      	str	r0, [r3, #0]
 80024c2:	3304      	adds	r3, #4
 80024c4:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    static cali_mag_t calibrate_temp;
    ignore_data = 0;
 80024cc:	4b95      	ldr	r3, [pc, #596]	; (8002724 <compass_calibrate+0x284>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 80024d2:	e0b1      	b.n	8002638 <compass_calibrate+0x198>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 80024d4:	463b      	mov	r3, r7
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fbac 	bl	8001c34 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 80024dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 80024e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80024e8:	813b      	strh	r3, [r7, #8]
          last_axis[Y] = as.y;
 80024ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024ee:	817b      	strh	r3, [r7, #10]
          last_axis[Z] = as.z;
 80024f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024f4:	81bb      	strh	r3, [r7, #12]
          fist_data = FALSE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          continue;
 80024fc:	e09c      	b.n	8002638 <compass_calibrate+0x198>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 80024fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002508:	b29b      	uxth	r3, r3
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	857b      	strh	r3, [r7, #42]	; 0x2a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002514:	b29a      	uxth	r2, r3
 8002516:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800251a:	b29b      	uxth	r3, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	853b      	strh	r3, [r7, #40]	; 0x28
        int16_t delta_z_ = as.z -  last_axis[Z];
 8002522:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800252c:	b29b      	uxth	r3, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	b29b      	uxth	r3, r3
 8002532:	84fb      	strh	r3, [r7, #38]	; 0x26
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8002534:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002538:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800253c:	fb02 f203 	mul.w	r2, r2, r3
 8002540:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002544:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	441a      	add	r2, r3
 800254e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002552:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff89 	bl	8000474 <__aeabi_i2d>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	ec43 2b10 	vmov	d0, r2, r3
 800256a:	f012 fce1 	bl	8014f30 <sqrt>
 800256e:	ec53 2b10 	vmov	r2, r3, d0
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe fa97 	bl	8000aa8 <__aeabi_d2iz>
 800257a:	4603      	mov	r3, r0
 800257c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(ckec > max_change){
 800257e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002582:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002586:	4293      	cmp	r3, r2
 8002588:	dd09      	ble.n	800259e <compass_calibrate+0xfe>
            fist_data = TRUE; 
 800258a:	2301      	movs	r3, #1
 800258c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ignore_data ++;
 8002590:	4b64      	ldr	r3, [pc, #400]	; (8002724 <compass_calibrate+0x284>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <compass_calibrate+0x284>)
 800259a:	801a      	strh	r2, [r3, #0]
            continue;
 800259c:	e04c      	b.n	8002638 <compass_calibrate+0x198>
        }
        last_axis[X] = as.x;
 800259e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025a2:	813b      	strh	r3, [r7, #8]
        last_axis[Y] = as.y;
 80025a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025a8:	817b      	strh	r3, [r7, #10]
        last_axis[Z] = as.z;
 80025aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025ae:	81bb      	strh	r3, [r7, #12]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 80025b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80025b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dd02      	ble.n	80025c2 <compass_calibrate+0x122>
 80025bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025c0:	833b      	strh	r3, [r7, #24]
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 80025c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dd02      	ble.n	80025d4 <compass_calibrate+0x134>
 80025ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025d2:	837b      	strh	r3, [r7, #26]
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 80025d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80025d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dd02      	ble.n	80025e6 <compass_calibrate+0x146>
 80025e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025e4:	83bb      	strh	r3, [r7, #28]

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 80025e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80025ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	da02      	bge.n	80025f8 <compass_calibrate+0x158>
 80025f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025f6:	823b      	strh	r3, [r7, #16]
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 80025f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80025fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002600:	429a      	cmp	r2, r3
 8002602:	da02      	bge.n	800260a <compass_calibrate+0x16a>
 8002604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002608:	827b      	strh	r3, [r7, #18]
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 800260a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800260e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002612:	429a      	cmp	r2, r3
 8002614:	da02      	bge.n	800261c <compass_calibrate+0x17c>
 8002616:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800261a:	82bb      	strh	r3, [r7, #20]
		
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800261c:	2120      	movs	r1, #32
 800261e:	4842      	ldr	r0, [pc, #264]	; (8002728 <compass_calibrate+0x288>)
 8002620:	f005 fbc7 	bl	8007db2 <HAL_GPIO_TogglePin>
        HAL_Delay(50); // 10 Hz loop
 8002624:	2032      	movs	r0, #50	; 0x32
 8002626:	f004 fce3 	bl	8006ff0 <HAL_Delay>

       if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 800262a:	2120      	movs	r1, #32
 800262c:	483f      	ldr	r0, [pc, #252]	; (800272c <compass_calibrate+0x28c>)
 800262e:	f005 fb8f 	bl	8007d50 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <compass_calibrate+0x1a6>
	while(!file_open){
 8002638:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <compass_calibrate+0x290>)
 800263a:	f993 3000 	ldrsb.w	r3, [r3]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f43f af48 	beq.w	80024d4 <compass_calibrate+0x34>
 8002644:	e000      	b.n	8002648 <compass_calibrate+0x1a8>
              break;
 8002646:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002648:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	dc02      	bgt.n	8002656 <compass_calibrate+0x1b6>
 8002650:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002654:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8002656:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db02      	blt.n	8002664 <compass_calibrate+0x1c4>
 800265e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002662:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8002664:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002668:	461a      	mov	r2, r3
 800266a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	0fda      	lsrs	r2, r3, #31
 8002672:	4413      	add	r3, r2
 8002674:	105b      	asrs	r3, r3, #1
 8002676:	461a      	mov	r2, r3
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <compass_calibrate+0x294>)
 800267a:	601a      	str	r2, [r3, #0]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 800267c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002680:	461a      	mov	r2, r3
 8002682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002686:	4413      	add	r3, r2
 8002688:	0fda      	lsrs	r2, r3, #31
 800268a:	4413      	add	r3, r2
 800268c:	105b      	asrs	r3, r3, #1
 800268e:	461a      	mov	r2, r3
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <compass_calibrate+0x294>)
 8002692:	605a      	str	r2, [r3, #4]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8002694:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002698:	461a      	mov	r2, r3
 800269a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800269e:	4413      	add	r3, r2
 80026a0:	0fda      	lsrs	r2, r3, #31
 80026a2:	4413      	add	r3, r2
 80026a4:	105b      	asrs	r3, r3, #1
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <compass_calibrate+0x294>)
 80026aa:	609a      	str	r2, [r3, #8]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 80026ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bfb8      	it	lt
 80026b4:	425b      	neglt	r3, r3
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bfb8      	it	lt
 80026c0:	425b      	neglt	r3, r3
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	847b      	strh	r3, [r7, #34]	; 0x22
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 80026ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bfb8      	it	lt
 80026d2:	425b      	neglt	r3, r3
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bfb8      	it	lt
 80026de:	425b      	neglt	r3, r3
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	843b      	strh	r3, [r7, #32]
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 80026e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bfb8      	it	lt
 80026f0:	425b      	neglt	r3, r3
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bfb8      	it	lt
 80026fc:	425b      	neglt	r3, r3
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4413      	add	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	83fb      	strh	r3, [r7, #30]

    // get largest value
    int16_t max_value = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x_ > y_)
 800270a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800270e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002712:	429a      	cmp	r2, r3
 8002714:	dd10      	ble.n	8002738 <compass_calibrate+0x298>
        max_value = x_;
 8002716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002718:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800271a:	e00f      	b.n	800273c <compass_calibrate+0x29c>
 800271c:	080159fc 	.word	0x080159fc
 8002720:	08015a04 	.word	0x08015a04
 8002724:	200044a4 	.word	0x200044a4
 8002728:	40020000 	.word	0x40020000
 800272c:	40020400 	.word	0x40020400
 8002730:	2000015c 	.word	0x2000015c
 8002734:	20000160 	.word	0x20000160
    else
        max_value = y_;
 8002738:	8c3b      	ldrh	r3, [r7, #32]
 800273a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(max_value < z_)
 800273c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002740:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002744:	429a      	cmp	r2, r3
 8002746:	da01      	bge.n	800274c <compass_calibrate+0x2ac>
        max_value = z_;
 8002748:	8bfb      	ldrh	r3, [r7, #30]
 800274a:	85bb      	strh	r3, [r7, #44]	; 0x2c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 800274c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002758:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002768:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <compass_calibrate+0x3c8>)
 800276a:	edc3 7a03 	vstr	s15, [r3, #12]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 800276e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800277a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <compass_calibrate+0x3c8>)
 800278c:	edc3 7a04 	vstr	s15, [r3, #16]
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8002790:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800279c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <compass_calibrate+0x3c8>)
 80027ae:	edc3 7a05 	vstr	s15, [r3, #20]

    calibrate_temp.sum_all_value = 0;
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <compass_calibrate+0x3c8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <compass_calibrate+0x3c8>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <compass_calibrate+0x3c8>)
 80027c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	ee17 2a90 	vmov	r2, s15
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <compass_calibrate+0x3c8>)
 80027d8:	619a      	str	r2, [r3, #24]
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <compass_calibrate+0x3c8>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <compass_calibrate+0x3c8>)
 80027e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f4:	ee17 2a90 	vmov	r2, s15
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <compass_calibrate+0x3c8>)
 80027fa:	619a      	str	r2, [r3, #24]
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <compass_calibrate+0x3c8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <compass_calibrate+0x3c8>)
 800280a:	edd3 7a05 	vldr	s15, [r3, #20]
 800280e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002816:	ee17 2a90 	vmov	r2, s15
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <compass_calibrate+0x3c8>)
 800281c:	619a      	str	r2, [r3, #24]

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <compass_calibrate+0x3c8>)
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <compass_calibrate+0x3c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <compass_calibrate+0x3c8>)
 800282a:	6193      	str	r3, [r2, #24]
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <compass_calibrate+0x3c8>)
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <compass_calibrate+0x3c8>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4413      	add	r3, r2
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <compass_calibrate+0x3c8>)
 8002838:	6193      	str	r3, [r2, #24]
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <compass_calibrate+0x3c8>)
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <compass_calibrate+0x3c8>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4413      	add	r3, r2
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <compass_calibrate+0x3c8>)
 8002846:	6193      	str	r3, [r2, #24]
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <compass_calibrate+0x3cc>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	231c      	movs	r3, #28
 800284e:	2210      	movs	r2, #16
 8002850:	4905      	ldr	r1, [pc, #20]	; (8002868 <compass_calibrate+0x3c8>)
 8002852:	f003 fb76 	bl	8005f42 <AT24Cxx_write_byte_buffer>
	while(1){
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002856:	2110      	movs	r1, #16
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <compass_calibrate+0x3d0>)
 800285a:	f005 faaa 	bl	8007db2 <HAL_GPIO_TogglePin>
       HAL_Delay(1000); // 10 Hz loop
 800285e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002862:	f004 fbc5 	bl	8006ff0 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002866:	e7f6      	b.n	8002856 <compass_calibrate+0x3b6>
 8002868:	20000160 	.word	0x20000160
 800286c:	20004480 	.word	0x20004480
 8002870:	40020000 	.word	0x40020000

08002874 <gps_init>:
uint8_t gps_buffer[200];
/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    offset_alt = 0;
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <gps_init+0x90>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    gps_alt_zero_calibrate = FALSE;
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <gps_init+0x94>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
	_gpsUartPort = uart;
 800288a:	4a20      	ldr	r2, [pc, #128]	; (800290c <gps_init+0x98>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <gps_init+0x9c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <gps_init+0xa0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <gps_init+0xa4>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <gps_init+0xa8>)
 80028a6:	62d3      	str	r3, [r2, #44]	; 0x2c

    _msg_id = 0;
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <gps_init+0xac>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]

    HAL_Delay(300);
 80028ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028b2:	f004 fb9d 	bl	8006ff0 <HAL_Delay>
    /* disable NMEA */
    HAL_UART_Transmit(&huart3,disable_NMEA_MSG,sizeof(disable_NMEA_MSG),1000);
 80028b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ba:	224d      	movs	r2, #77	; 0x4d
 80028bc:	4919      	ldr	r1, [pc, #100]	; (8002924 <gps_init+0xb0>)
 80028be:	481a      	ldr	r0, [pc, #104]	; (8002928 <gps_init+0xb4>)
 80028c0:	f009 fe23 	bl	800c50a <HAL_UART_Transmit>
    HAL_Delay(100);
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	f004 fb93 	bl	8006ff0 <HAL_Delay>
    /* enable UBX */
    HAL_UART_Transmit(&huart3,enable_UBX_MSG,sizeof(enable_UBX_MSG),1000);
 80028ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ce:	222c      	movs	r2, #44	; 0x2c
 80028d0:	4916      	ldr	r1, [pc, #88]	; (800292c <gps_init+0xb8>)
 80028d2:	4815      	ldr	r0, [pc, #84]	; (8002928 <gps_init+0xb4>)
 80028d4:	f009 fe19 	bl	800c50a <HAL_UART_Transmit>
    HAL_Delay(100);
 80028d8:	2064      	movs	r0, #100	; 0x64
 80028da:	f004 fb89 	bl	8006ff0 <HAL_Delay>
    /* set max rate */
    HAL_UART_Transmit(&huart3,set_rate_50hz,sizeof(set_rate_50hz),1000);
 80028de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e2:	220e      	movs	r2, #14
 80028e4:	4912      	ldr	r1, [pc, #72]	; (8002930 <gps_init+0xbc>)
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <gps_init+0xb4>)
 80028e8:	f009 fe0f 	bl	800c50a <HAL_UART_Transmit>
    HAL_Delay(100);
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	f004 fb7f 	bl	8006ff0 <HAL_Delay>

    /* set gps baudrate */
    //HAL_UART_Transmit(&huart3,uart38400,sizeof(uart38400),1000);
    //HAL_Delay(100);
    HAL_UART_Receive_DMA(&huart3,gps_buffer,200);
 80028f2:	22c8      	movs	r2, #200	; 0xc8
 80028f4:	490f      	ldr	r1, [pc, #60]	; (8002934 <gps_init+0xc0>)
 80028f6:	480c      	ldr	r0, [pc, #48]	; (8002928 <gps_init+0xb4>)
 80028f8:	f009 ff48 	bl	800c78c <HAL_UART_Receive_DMA>
    // set baudrate
    //huart3.Init.BaudRate = 38400 ;
	//HAL_UART_Init(&huart3);
    // read gps using interrupt
	//HAL_UART_Receive_IT(&huart3, &_char,1);
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200045dc 	.word	0x200045dc
 8002908:	200044cd 	.word	0x200044cd
 800290c:	2000017c 	.word	0x2000017c
 8002910:	200048cc 	.word	0x200048cc
 8002914:	2000465c 	.word	0x2000465c
 8002918:	10624dd3 	.word	0x10624dd3
 800291c:	200044d0 	.word	0x200044d0
 8002920:	20000180 	.word	0x20000180
 8002924:	08015b3c 	.word	0x08015b3c
 8002928:	200049bc 	.word	0x200049bc
 800292c:	08015b8c 	.word	0x08015b8c
 8002930:	08015bb8 	.word	0x08015bb8
 8002934:	2000450c 	.word	0x2000450c

08002938 <gps_readout>:
UART_HandleTypeDef *gps_uart_port(){
    return _gpsUartPort;
}


void gps_readout(){
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
    uint8_t buffer_index = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]
    if(receive_cplt){
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <gps_readout+0x48>)
 8002944:	f993 3000 	ldrsb.w	r3, [r3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <gps_readout+0x40>

        while(1){
            newdata(gps_buffer[buffer_index++]);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	71fa      	strb	r2, [r7, #7]
 8002952:	461a      	mov	r2, r3
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <gps_readout+0x4c>)
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f941 	bl	8002be0 <newdata>

            if(buffer_index >= 200){
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	2bc7      	cmp	r3, #199	; 0xc7
 8002962:	d800      	bhi.n	8002966 <gps_readout+0x2e>
            newdata(gps_buffer[buffer_index++]);
 8002964:	e7f2      	b.n	800294c <gps_readout+0x14>
            	 break;
 8002966:	bf00      	nop
            }
        }

        HAL_UART_Receive_DMA(&huart3,gps_buffer,200);
 8002968:	22c8      	movs	r2, #200	; 0xc8
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <gps_readout+0x4c>)
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <gps_readout+0x50>)
 800296e:	f009 ff0d 	bl	800c78c <HAL_UART_Receive_DMA>
        receive_cplt = 0;
 8002972:	4b03      	ldr	r3, [pc, #12]	; (8002980 <gps_readout+0x48>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    }
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000181 	.word	0x20000181
 8002984:	2000450c 	.word	0x2000450c
 8002988:	200049bc 	.word	0x200049bc

0800298c <gps_DMA_callback>:

uint32_t ms_gps_thread;
void gps_DMA_callback()
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
    static uint32_t last_call;
    ms_gps_thread = millis() - last_call;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <gps_DMA_callback+0x4c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <gps_DMA_callback+0x50>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <gps_DMA_callback+0x54>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	099a      	lsrs	r2, r3, #6
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <gps_DMA_callback+0x58>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <gps_DMA_callback+0x5c>)
 80029ac:	6013      	str	r3, [r2, #0]
    last_call = millis();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <gps_DMA_callback+0x4c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <gps_DMA_callback+0x50>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <gps_DMA_callback+0x54>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	099b      	lsrs	r3, r3, #6
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <gps_DMA_callback+0x58>)
 80029c4:	6013      	str	r3, [r2, #0]
    receive_cplt = 1;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <gps_DMA_callback+0x60>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200048cc 	.word	0x200048cc
 80029dc:	2000465c 	.word	0x2000465c
 80029e0:	10624dd3 	.word	0x10624dd3
 80029e4:	200001ec 	.word	0x200001ec
 80029e8:	200045e0 	.word	0x200045e0
 80029ec:	20000181 	.word	0x20000181

080029f0 <parse_msg>:
}
*/

uint32_t cnt_vel,cnt_status,cnt_poss;

static uint8_t parse_msg(){
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    static uint8_t gps_cali_count = 0;
    switch (_msg_id) {
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <parse_msg+0x1b0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b30      	cmp	r3, #48	; 0x30
 80029fa:	f000 80b8 	beq.w	8002b6e <parse_msg+0x17e>
 80029fe:	2b30      	cmp	r3, #48	; 0x30
 8002a00:	f300 80b3 	bgt.w	8002b6a <parse_msg+0x17a>
 8002a04:	2b12      	cmp	r3, #18
 8002a06:	f000 8087 	beq.w	8002b18 <parse_msg+0x128>
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	f300 80ad 	bgt.w	8002b6a <parse_msg+0x17a>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d002      	beq.n	8002a1a <parse_msg+0x2a>
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d074      	beq.n	8002b02 <parse_msg+0x112>
 8002a18:	e0a7      	b.n	8002b6a <parse_msg+0x17a>
        case MSG_POSLLH:
        	cnt_poss ++;
 8002a1a:	4b62      	ldr	r3, [pc, #392]	; (8002ba4 <parse_msg+0x1b4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <parse_msg+0x1b4>)
 8002a22:	6013      	str	r3, [r2, #0]
            _gps.position[LON] = _buffer.posllh.longitude;
 8002a24:	4b60      	ldr	r3, [pc, #384]	; (8002ba8 <parse_msg+0x1b8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a60      	ldr	r2, [pc, #384]	; (8002bac <parse_msg+0x1bc>)
 8002a2a:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <parse_msg+0x1b8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a5e      	ldr	r2, [pc, #376]	; (8002bac <parse_msg+0x1bc>)
 8002a32:	6053      	str	r3, [r2, #4]
            if(gps_alt_zero_calibrate == FALSE){
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <parse_msg+0x1c0>)
 8002a36:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <parse_msg+0x7a>
                if(gps_cali_count < 20){
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <parse_msg+0x1c4>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b13      	cmp	r3, #19
 8002a44:	d80d      	bhi.n	8002a62 <parse_msg+0x72>
                    offset_alt += _buffer.posllh.altitude_msl;
 8002a46:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <parse_msg+0x1b8>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <parse_msg+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a59      	ldr	r2, [pc, #356]	; (8002bb8 <parse_msg+0x1c8>)
 8002a52:	6013      	str	r3, [r2, #0]
                    gps_cali_count ++;
 8002a54:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <parse_msg+0x1c4>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <parse_msg+0x1c4>)
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e010      	b.n	8002a84 <parse_msg+0x94>
                }
                else{
                    gps_alt_zero_calibrate = TRUE;
 8002a62:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <parse_msg+0x1c0>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e00c      	b.n	8002a84 <parse_msg+0x94>
                }
            }
            else{
               _gps.altitude_mgl = _buffer.posllh.altitude_msl - offset_alt/20; 
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <parse_msg+0x1b8>)
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	4b52      	ldr	r3, [pc, #328]	; (8002bb8 <parse_msg+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4952      	ldr	r1, [pc, #328]	; (8002bbc <parse_msg+0x1cc>)
 8002a74:	fb81 0103 	smull	r0, r1, r1, r3
 8002a78:	10c9      	asrs	r1, r1, #3
 8002a7a:	17db      	asrs	r3, r3, #31
 8002a7c:	1a5b      	subs	r3, r3, r1
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <parse_msg+0x1bc>)
 8002a82:	6353      	str	r3, [r2, #52]	; 0x34
            }
            _gps.altitude_msl = _buffer.posllh.altitude_msl - offset_alt; 
 8002a84:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <parse_msg+0x1b8>)
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <parse_msg+0x1c8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	4a47      	ldr	r2, [pc, #284]	; (8002bac <parse_msg+0x1bc>)
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8002a92:	4b45      	ldr	r3, [pc, #276]	; (8002ba8 <parse_msg+0x1b8>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a45      	ldr	r2, [pc, #276]	; (8002bac <parse_msg+0x1bc>)
 8002a98:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 8002a9a:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <parse_msg+0x1b8>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a43      	ldr	r2, [pc, #268]	; (8002bac <parse_msg+0x1bc>)
 8002aa0:	6253      	str	r3, [r2, #36]	; 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <parse_msg+0x1d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <parse_msg+0xd4>
                lastPosUpdateTime = millis();
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <parse_msg+0x1d4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab0:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <parse_msg+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4a45      	ldr	r2, [pc, #276]	; (8002bcc <parse_msg+0x1dc>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <parse_msg+0x1d0>)
 8002ac0:	6013      	str	r3, [r2, #0]
                break;
 8002ac2:	e055      	b.n	8002b70 <parse_msg+0x180>
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <parse_msg+0x1d4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <parse_msg+0x1d8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <parse_msg+0x1dc>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	099a      	lsrs	r2, r3, #6
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <parse_msg+0x1d0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <parse_msg+0x1bc>)
 8002ae0:	6293      	str	r3, [r2, #40]	; 0x28
            lastPosUpdateTime = millis();
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <parse_msg+0x1d4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <parse_msg+0x1d8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a37      	ldr	r2, [pc, #220]	; (8002bcc <parse_msg+0x1dc>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <parse_msg+0x1d0>)
 8002af8:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002afa:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <parse_msg+0x1e0>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
            break;
 8002b00:	e036      	b.n	8002b70 <parse_msg+0x180>
        case MSG_STATUS:

        	cnt_status ++;
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <parse_msg+0x1e4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <parse_msg+0x1e4>)
 8002b0a:	6013      	str	r3, [r2, #0]

            //next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002b0c:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <parse_msg+0x1b8>)
 8002b0e:	791a      	ldrb	r2, [r3, #4]
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <parse_msg+0x1bc>)
 8002b12:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            break;
 8002b16:	e02b      	b.n	8002b70 <parse_msg+0x180>
            _gps.fix = _buffer.solution.fix_type; --------------------------------------------------------------------------------------
            _gps.numSat = _buffer.solution.satellites; -------------------------------------------------------------------------------------
            break;
        */
        case MSG_VELNED:
        	cnt_vel ++;
 8002b18:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <parse_msg+0x1e8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <parse_msg+0x1e8>)
 8002b20:	6013      	str	r3, [r2, #0]
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <parse_msg+0x1b8>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a21      	ldr	r2, [pc, #132]	; (8002bac <parse_msg+0x1bc>)
 8002b28:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <parse_msg+0x1b8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <parse_msg+0x1bc>)
 8002b30:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <parse_msg+0x1b8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <parse_msg+0x1bc>)
 8002b38:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <parse_msg+0x1b8>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <parse_msg+0x1bc>)
 8002b42:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <parse_msg+0x1b8>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <parse_msg+0x1bc>)
 8002b4c:	871a      	strh	r2, [r3, #56]	; 0x38
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <parse_msg+0x1b8>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <parse_msg+0x1bc>)
 8002b56:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <parse_msg+0x1b8>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <parse_msg+0x1bc>)
 8002b60:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <parse_msg+0x1ec>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
            break;
 8002b68:	e002      	b.n	8002b70 <parse_msg+0x180>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e012      	b.n	8002b94 <parse_msg+0x1a4>
            break;
 8002b6e:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <parse_msg+0x1e0>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <parse_msg+0x1a2>
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <parse_msg+0x1ec>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <parse_msg+0x1a2>
        _new_speed = _new_position = FALSE;
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <parse_msg+0x1e0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <parse_msg+0x1e0>)
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <parse_msg+0x1ec>)
 8002b8c:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <parse_msg+0x1a4>
    }
    return FALSE;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000180 	.word	0x20000180
 8002ba4:	200045d8 	.word	0x200045d8
 8002ba8:	20000184 	.word	0x20000184
 8002bac:	200044d0 	.word	0x200044d0
 8002bb0:	200044cd 	.word	0x200044cd
 8002bb4:	200001f0 	.word	0x200001f0
 8002bb8:	200045dc 	.word	0x200045dc
 8002bbc:	66666667 	.word	0x66666667
 8002bc0:	200001f4 	.word	0x200001f4
 8002bc4:	200048cc 	.word	0x200048cc
 8002bc8:	2000465c 	.word	0x2000465c
 8002bcc:	10624dd3 	.word	0x10624dd3
 8002bd0:	200001f8 	.word	0x200001f8
 8002bd4:	200045e8 	.word	0x200045e8
 8002bd8:	200045d4 	.word	0x200045d4
 8002bdc:	200001f9 	.word	0x200001f9

08002be0 <newdata>:

static uint16_t _payload_length = 0;
static uint16_t _payload_counter = 0;
static uint8_t newdata(uint8_t data){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    switch (_step) {
 8002bee:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <newdata+0x1f8>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	f200 80eb 	bhi.w	8002dce <newdata+0x1ee>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <newdata+0x20>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c4f 	.word	0x08002c4f
 8002c0c:	08002c6b 	.word	0x08002c6b
 8002c10:	08002c9d 	.word	0x08002c9d
 8002c14:	08002cd1 	.word	0x08002cd1
 8002c18:	08002d2b 	.word	0x08002d2b
 8002c1c:	08002d83 	.word	0x08002d83
 8002c20:	08002da1 	.word	0x08002da1
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2bb5      	cmp	r3, #181	; 0xb5
 8002c28:	f040 80ca 	bne.w	8002dc0 <newdata+0x1e0>
                _step++;
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <newdata+0x1f8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <newdata+0x1f8>)
 8002c36:	701a      	strb	r2, [r3, #0]
            break;
 8002c38:	e0c2      	b.n	8002dc0 <newdata+0x1e0>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b62      	cmp	r3, #98	; 0x62
 8002c3e:	d106      	bne.n	8002c4e <newdata+0x6e>
                _step++;
 8002c40:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <newdata+0x1f8>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <newdata+0x1f8>)
 8002c4a:	701a      	strb	r2, [r3, #0]
                break;
 8002c4c:	e0bf      	b.n	8002dce <newdata+0x1ee>
            }
        case 2: // Class
            _step++;
 8002c4e:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <newdata+0x1f8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b60      	ldr	r3, [pc, #384]	; (8002dd8 <newdata+0x1f8>)
 8002c58:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 8002c5a:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <newdata+0x1fc>)
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	7013      	strb	r3, [r2, #0]
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <newdata+0x1fc>)
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <newdata+0x200>)
 8002c66:	701a      	strb	r2, [r3, #0]
            break;
 8002c68:	e0b1      	b.n	8002dce <newdata+0x1ee>
        case 3: // ID
            _step++;
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <newdata+0x1f8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <newdata+0x1f8>)
 8002c74:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002c76:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <newdata+0x1fc>)
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <newdata+0x1fc>)
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <newdata+0x1fc>)
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <newdata+0x200>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <newdata+0x200>)
 8002c92:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8002c94:	4a53      	ldr	r2, [pc, #332]	; (8002de4 <newdata+0x204>)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	7013      	strb	r3, [r2, #0]
            break;
 8002c9a:	e098      	b.n	8002dce <newdata+0x1ee>
        case 4: 
            _step++;
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <newdata+0x1f8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <newdata+0x1f8>)
 8002ca6:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002ca8:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <newdata+0x1fc>)
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	4413      	add	r3, r2
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <newdata+0x1fc>)
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <newdata+0x1fc>)
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <newdata+0x200>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <newdata+0x200>)
 8002cc4:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <newdata+0x208>)
 8002ccc:	801a      	strh	r2, [r3, #0]
            break;
 8002cce:	e07e      	b.n	8002dce <newdata+0x1ee>
        case 5: 
            _step++;
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <newdata+0x1f8>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <newdata+0x1f8>)
 8002cda:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <newdata+0x1fc>)
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <newdata+0x1fc>)
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <newdata+0x1fc>)
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <newdata+0x200>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <newdata+0x200>)
 8002cf8:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <newdata+0x208>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <newdata+0x208>)
 8002d0c:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <newdata+0x208>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d905      	bls.n	8002d22 <newdata+0x142>
                _payload_length = 0;
 8002d16:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <newdata+0x208>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <newdata+0x1f8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <newdata+0x20c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	801a      	strh	r2, [r3, #0]
            break;
 8002d28:	e051      	b.n	8002dce <newdata+0x1ee>
        case 6:
            _ck_b += (_ck_a += data);     
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <newdata+0x1fc>)
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	4413      	add	r3, r2
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <newdata+0x1fc>)
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <newdata+0x1fc>)
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <newdata+0x200>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <newdata+0x200>)
 8002d46:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <newdata+0x20c>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	2b63      	cmp	r3, #99	; 0x63
 8002d4e:	d805      	bhi.n	8002d5c <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8002d50:	4b26      	ldr	r3, [pc, #152]	; (8002dec <newdata+0x20c>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <newdata+0x210>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <newdata+0x20c>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <newdata+0x20c>)
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <newdata+0x20c>)
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <newdata+0x208>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d127      	bne.n	8002dc4 <newdata+0x1e4>
                _step++;
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <newdata+0x1f8>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <newdata+0x1f8>)
 8002d7e:	701a      	strb	r2, [r3, #0]
            break;
 8002d80:	e020      	b.n	8002dc4 <newdata+0x1e4>
        case 7:
            _step++;
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <newdata+0x1f8>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <newdata+0x1f8>)
 8002d8c:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <newdata+0x1fc>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d017      	beq.n	8002dc8 <newdata+0x1e8>
                _step = 0;         
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <newdata+0x1f8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
            break;
 8002d9e:	e013      	b.n	8002dc8 <newdata+0x1e8>
        case 8:
            _step = 0;
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <newdata+0x1f8>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <newdata+0x200>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10d      	bne.n	8002dcc <newdata+0x1ec>
                break;   
            if(parse_msg())
 8002db0:	f7ff fe1e 	bl	80029f0 <parse_msg>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <newdata+0x1ee>
            {
                parsed = TRUE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e006      	b.n	8002dce <newdata+0x1ee>
            break;
 8002dc0:	bf00      	nop
 8002dc2:	e004      	b.n	8002dce <newdata+0x1ee>
            break;
 8002dc4:	bf00      	nop
 8002dc6:	e002      	b.n	8002dce <newdata+0x1ee>
            break;
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <newdata+0x1ee>
                break;   
 8002dcc:	bf00      	nop
            }
    } 
    return parsed;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200001fa 	.word	0x200001fa
 8002ddc:	200001fb 	.word	0x200001fb
 8002de0:	200001fc 	.word	0x200001fc
 8002de4:	20000180 	.word	0x20000180
 8002de8:	200001e8 	.word	0x200001e8
 8002dec:	200001ea 	.word	0x200001ea
 8002df0:	20000184 	.word	0x20000184

08002df4 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <imu_calibrate+0xd4>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <imu_calibrate+0xd8>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <imu_calibrate+0xdc>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e01f      	b.n	8002e5e <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fe5c 	bl	8001ae0 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e30:	4413      	add	r3, r2
 8002e32:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e34:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e42:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e50:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 8002e52:	2001      	movs	r0, #1
 8002e54:	f004 f8cc 	bl	8006ff0 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	dbdb      	blt.n	8002e1e <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <imu_calibrate+0xe4>)
 8002e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e70:	1192      	asrs	r2, r2, #6
 8002e72:	17db      	asrs	r3, r3, #31
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <imu_calibrate+0xe4>)
 8002e82:	fb82 1203 	smull	r1, r2, r2, r3
 8002e86:	1192      	asrs	r2, r2, #6
 8002e88:	17db      	asrs	r3, r3, #31
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <imu_calibrate+0xe0>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <imu_calibrate+0xe4>)
 8002e98:	fb82 1203 	smull	r1, r2, r2, r3
 8002e9c:	1192      	asrs	r2, r2, #6
 8002e9e:	17db      	asrs	r3, r3, #31
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <imu_calibrate+0xe8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <imu_calibrate+0xec>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <imu_calibrate+0xe4>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <imu_calibrate+0xf0>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20004638 	.word	0x20004638
 8002ecc:	20004608 	.word	0x20004608
 8002ed0:	20004634 	.word	0x20004634
 8002ed4:	20000230 	.word	0x20000230
 8002ed8:	10624dd3 	.word	0x10624dd3
 8002edc:	200048cc 	.word	0x200048cc
 8002ee0:	2000465c 	.word	0x2000465c
 8002ee4:	20004630 	.word	0x20004630

08002ee8 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,const float dt){
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	ed2d 8b02 	vpush	{d8}
 8002eee:	b0b5      	sub	sp, #212	; 0xd4
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	ed87 0a01 	vstr	s0, [r7, #4]
 8002efe:	4623      	mov	r3, r4
 8002f00:	81fb      	strh	r3, [r7, #14]
 8002f02:	4603      	mov	r3, r0
 8002f04:	81bb      	strh	r3, [r7, #12]
 8002f06:	460b      	mov	r3, r1
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	813b      	strh	r3, [r7, #8]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;


	gx = (gx_/config.gyr_lsb) * RAD;
 8002f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f1a:	4bea      	ldr	r3, [pc, #936]	; (80032c4 <update_ahrs+0x3dc>)
 8002f1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f24:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 80032c8 <update_ahrs+0x3e0>
 8002f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2c:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	gy = (gy_/config.gyr_lsb) * RAD;
 8002f30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f3c:	4be1      	ldr	r3, [pc, #900]	; (80032c4 <update_ahrs+0x3dc>)
 8002f3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f46:	ed9f 7ae0 	vldr	s14, [pc, #896]	; 80032c8 <update_ahrs+0x3e0>
 8002f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	gz = (gz_/config.gyr_lsb) * RAD;
 8002f52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f5e:	4bd9      	ldr	r3, [pc, #868]	; (80032c4 <update_ahrs+0x3dc>)
 8002f60:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f68:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 80032c8 <update_ahrs+0x3e0>
 8002f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f70:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 8002f74:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <update_ahrs+0xa6>
 8002f7c:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <update_ahrs+0xa6>
 8002f84:	f9b7 30ec 	ldrsh.w	r3, [r7, #236]	; 0xec
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8214 	beq.w	80033b6 <update_ahrs+0x4ce>
		uint32_t acc_abs =  accx_ * accx_ + accy_ * accy_ + accz_ * accz_;
 8002f8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f96:	fb02 f203 	mul.w	r2, r2, r3
 8002f9a:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8002f9e:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	441a      	add	r2, r3
 8002fa8:	f9b7 30ec 	ldrsh.w	r3, [r7, #236]	; 0xec
 8002fac:	f9b7 10ec 	ldrsh.w	r1, [r7, #236]	; 0xec
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		norm = invSqrt_((float)acc_abs);
 8002fba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fca:	f000 ffcd 	bl	8003f68 <invSqrt_>
 8002fce:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
		acc_x = (float)accx_ * norm;
 8002fd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fde:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		acc_y = (float)accy_ * norm;
 8002fea:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		acc_z = (float)accz_ * norm;
 8003002:	f9b7 30ec 	ldrsh.w	r3, [r7, #236]	; 0xec
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

		if(reset_state){
 800301a:	4bac      	ldr	r3, [pc, #688]	; (80032cc <update_ahrs+0x3e4>)
 800301c:	f993 3000 	ldrsb.w	r3, [r3]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <update_ahrs+0x15a>
			dcm[0][2] = acc_x;
 8003024:	4aaa      	ldr	r2, [pc, #680]	; (80032d0 <update_ahrs+0x3e8>)
 8003026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800302a:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 800302c:	4aa8      	ldr	r2, [pc, #672]	; (80032d0 <update_ahrs+0x3e8>)
 800302e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003032:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 8003034:	4aa6      	ldr	r2, [pc, #664]	; (80032d0 <update_ahrs+0x3e8>)
 8003036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800303a:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 800303c:	4ba3      	ldr	r3, [pc, #652]	; (80032cc <update_ahrs+0x3e4>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 8003042:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 8003046:	f9b7 20f0 	ldrsh.w	r2, [r7, #240]	; 0xf0
 800304a:	fb02 f203 	mul.w	r2, r2, r3
 800304e:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8003052:	f9b7 10f4 	ldrsh.w	r1, [r7, #244]	; 0xf4
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	441a      	add	r2, r3
 800305c:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8003060:	f9b7 10f8 	ldrsh.w	r1, [r7, #248]	; 0xf8
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003072:	eeb0 0a67 	vmov.f32	s0, s15
 8003076:	f000 ff77 	bl	8003f68 <invSqrt_>
 800307a:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
			mx = magx * norm;
 800307e:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
			my = magy * norm;
 8003096:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			mz = magz * norm;
 80030ae:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <update_ahrs+0x3e8>)
 80030c8:	ed93 7a00 	vldr	s14, [r3]
 80030cc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80030d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d4:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <update_ahrs+0x3e8>)
 80030d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80030da:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80030de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e6:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <update_ahrs+0x3e8>)
 80030e8:	edd3 6a06 	vldr	s13, [r3, #24]
 80030ec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80030f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 80030fc:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <update_ahrs+0x3e8>)
 80030fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8003102:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800310a:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <update_ahrs+0x3e8>)
 800310c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003110:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <update_ahrs+0x3e8>)
 800311e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003122:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 8003132:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <update_ahrs+0x3e8>)
 8003134:	ed93 7a02 	vldr	s14, [r3, #8]
 8003138:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800313c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003140:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <update_ahrs+0x3e8>)
 8003142:	edd3 6a05 	vldr	s13, [r3, #20]
 8003146:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800314a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003152:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <update_ahrs+0x3e8>)
 8003154:	edd3 6a08 	vldr	s13, [r3, #32]
 8003158:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800315c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

			bx = sqrtf(hx * hx + hy * hy);
 8003168:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800316c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003170:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003174:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317c:	eeb0 0a67 	vmov.f32	s0, s15
 8003180:	f011 ffa2 	bl	80150c8 <sqrtf>
 8003184:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8003188:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <update_ahrs+0x3e8>)
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003196:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <update_ahrs+0x3e8>)
 8003198:	edd3 6a02 	vldr	s13, [r3, #8]
 800319c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 80031ac:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <update_ahrs+0x3e8>)
 80031ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80031b2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80031b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ba:	4b45      	ldr	r3, [pc, #276]	; (80032d0 <update_ahrs+0x3e8>)
 80031bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80031c0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031cc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
			emz = mx * wy - my * wx;
 80031d0:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80031d4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80031d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031dc:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80031e0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ec:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <update_ahrs+0x3e8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		vy = dcm[1][2];
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <update_ahrs+0x3e8>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	67fb      	str	r3, [r7, #124]	; 0x7c
		vz = dcm[2][2];
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <update_ahrs+0x3e8>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	67bb      	str	r3, [r7, #120]	; 0x78

		ex = acc_y * vz - acc_z * vy;
 8003204:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003208:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800320c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003210:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8003214:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		ey = acc_z * vx - acc_x * vz;
 8003224:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003228:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800322c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003230:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8003234:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003240:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		ez = acc_x * vy - acc_y * vx;
 8003244:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003248:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800324c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003250:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8003254:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003260:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		if( Ki_imu  > 0.0f) {
 8003264:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80032d4 <update_ahrs+0x3ec>
 8003268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	dd66      	ble.n	8003340 <update_ahrs+0x458>
			integralFBx +=  Ki_imu  * ex * dt;
 8003272:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80032d4 <update_ahrs+0x3ec>
 8003276:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800327a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800327e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <update_ahrs+0x3f0>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <update_ahrs+0x3f0>)
 8003292:	edc3 7a00 	vstr	s15, [r3]
			integralFBy +=  Ki_imu  * ey * dt;
 8003296:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80032d4 <update_ahrs+0x3ec>
 800329a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800329e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <update_ahrs+0x3f4>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <update_ahrs+0x3f4>)
 80032b6:	edc3 7a00 	vstr	s15, [r3]
			integralFBz +=  Ki_imu  * ez * dt;
 80032ba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80032d4 <update_ahrs+0x3ec>
 80032be:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80032c2:	e00d      	b.n	80032e0 <update_ahrs+0x3f8>
 80032c4:	20000008 	.word	0x20000008
 80032c8:	3c8efa35 	.word	0x3c8efa35
 80032cc:	20000014 	.word	0x20000014
 80032d0:	2000020c 	.word	0x2000020c
 80032d4:	00000000 	.word	0x00000000
 80032d8:	20004638 	.word	0x20004638
 80032dc:	20004608 	.word	0x20004608
 80032e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <update_ahrs+0x44c>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <update_ahrs+0x44c>)
 80032f8:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <update_ahrs+0x450>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8003306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
			gy += integralFBy;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <update_ahrs+0x454>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
			gz += integralFBz;
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <update_ahrs+0x44c>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8003332:	e011      	b.n	8003358 <update_ahrs+0x470>
 8003334:	20004634 	.word	0x20004634
 8003338:	20004638 	.word	0x20004638
 800333c:	20004608 	.word	0x20004608
		} else {
			integralFBx = 0.0f;
 8003340:	4bdd      	ldr	r3, [pc, #884]	; (80036b8 <update_ahrs+0x7d0>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003348:	4bdc      	ldr	r3, [pc, #880]	; (80036bc <update_ahrs+0x7d4>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003350:	4bdb      	ldr	r3, [pc, #876]	; (80036c0 <update_ahrs+0x7d8>)
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8003358:	4bda      	ldr	r3, [pc, #872]	; (80036c4 <update_ahrs+0x7dc>)
 800335a:	ed93 7a00 	vldr	s14, [r3]
 800335e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800336a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
		gy += Kp_imu * ey;
 8003372:	4bd4      	ldr	r3, [pc, #848]	; (80036c4 <update_ahrs+0x7dc>)
 8003374:	ed93 7a00 	vldr	s14, [r3]
 8003378:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8003384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003388:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
		gz += Kp_imu * ez + emz * Kp_mag;
 800338c:	4bcd      	ldr	r3, [pc, #820]	; (80036c4 <update_ahrs+0x7dc>)
 800338e:	ed93 7a00 	vldr	s14, [r3]
 8003392:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800339a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800339e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80033a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033aa:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80033ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b2:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	}

	gx *= (0.5f * dt);
 80033b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	gy *= (0.5f * dt);
 80033ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80033d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033da:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	gz *= (0.5f * dt);
 80033e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 80033fe:	4bb2      	ldr	r3, [pc, #712]	; (80036c8 <update_ahrs+0x7e0>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	eeb1 7a67 	vneg.f32	s14, s15
 8003408:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800340c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003410:	4bae      	ldr	r3, [pc, #696]	; (80036cc <update_ahrs+0x7e4>)
 8003412:	edd3 6a00 	vldr	s13, [r3]
 8003416:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800341a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003422:	4bab      	ldr	r3, [pc, #684]	; (80036d0 <update_ahrs+0x7e8>)
 8003424:	edd3 6a00 	vldr	s13, [r3]
 8003428:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800342c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003434:	4ba7      	ldr	r3, [pc, #668]	; (80036d4 <update_ahrs+0x7ec>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343e:	4ba5      	ldr	r3, [pc, #660]	; (80036d4 <update_ahrs+0x7ec>)
 8003440:	edc3 7a00 	vstr	s15, [r3]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8003444:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <update_ahrs+0x7ec>)
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800344e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003452:	4b9e      	ldr	r3, [pc, #632]	; (80036cc <update_ahrs+0x7e4>)
 8003454:	edd3 6a00 	vldr	s13, [r3]
 8003458:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800345c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003464:	4b9a      	ldr	r3, [pc, #616]	; (80036d0 <update_ahrs+0x7e8>)
 8003466:	edd3 6a00 	vldr	s13, [r3]
 800346a:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800346e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003476:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <update_ahrs+0x7e0>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003480:	4b91      	ldr	r3, [pc, #580]	; (80036c8 <update_ahrs+0x7e0>)
 8003482:	edc3 7a00 	vstr	s15, [r3]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8003486:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <update_ahrs+0x7ec>)
 8003488:	ed93 7a00 	vldr	s14, [r3]
 800348c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8003490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003494:	4b8c      	ldr	r3, [pc, #560]	; (80036c8 <update_ahrs+0x7e0>)
 8003496:	edd3 6a00 	vldr	s13, [r3]
 800349a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800349e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034a6:	4b8a      	ldr	r3, [pc, #552]	; (80036d0 <update_ahrs+0x7e8>)
 80034a8:	edd3 6a00 	vldr	s13, [r3]
 80034ac:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80034b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b8:	4b84      	ldr	r3, [pc, #528]	; (80036cc <update_ahrs+0x7e4>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c2:	4b82      	ldr	r3, [pc, #520]	; (80036cc <update_ahrs+0x7e4>)
 80034c4:	edc3 7a00 	vstr	s15, [r3]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 80034c8:	4b82      	ldr	r3, [pc, #520]	; (80036d4 <update_ahrs+0x7ec>)
 80034ca:	ed93 7a00 	vldr	s14, [r3]
 80034ce:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80034d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <update_ahrs+0x7e0>)
 80034d8:	edd3 6a00 	vldr	s13, [r3]
 80034dc:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <update_ahrs+0x7e4>)
 80034ea:	edd3 6a00 	vldr	s13, [r3]
 80034ee:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80034f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034fa:	4b75      	ldr	r3, [pc, #468]	; (80036d0 <update_ahrs+0x7e8>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003504:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <update_ahrs+0x7e8>)
 8003506:	edc3 7a00 	vstr	s15, [r3]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800350a:	4b72      	ldr	r3, [pc, #456]	; (80036d4 <update_ahrs+0x7ec>)
 800350c:	ed93 7a00 	vldr	s14, [r3]
 8003510:	4b70      	ldr	r3, [pc, #448]	; (80036d4 <update_ahrs+0x7ec>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351a:	4b6b      	ldr	r3, [pc, #428]	; (80036c8 <update_ahrs+0x7e0>)
 800351c:	edd3 6a00 	vldr	s13, [r3]
 8003520:	4b69      	ldr	r3, [pc, #420]	; (80036c8 <update_ahrs+0x7e0>)
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <update_ahrs+0x7e4>)
 8003530:	edd3 6a00 	vldr	s13, [r3]
 8003534:	4b65      	ldr	r3, [pc, #404]	; (80036cc <update_ahrs+0x7e4>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <update_ahrs+0x7e8>)
 8003544:	edd3 6a00 	vldr	s13, [r3]
 8003548:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <update_ahrs+0x7e8>)
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003556:	eeb0 0a67 	vmov.f32	s0, s15
 800355a:	f000 fd05 	bl	8003f68 <invSqrt_>
 800355e:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
	q0 *= norm;
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <update_ahrs+0x7ec>)
 8003564:	ed93 7a00 	vldr	s14, [r3]
 8003568:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800356c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003570:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <update_ahrs+0x7ec>)
 8003572:	edc3 7a00 	vstr	s15, [r3]
	q1 *= norm;
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <update_ahrs+0x7e0>)
 8003578:	ed93 7a00 	vldr	s14, [r3]
 800357c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <update_ahrs+0x7e0>)
 8003586:	edc3 7a00 	vstr	s15, [r3]
	q2 *= norm;
 800358a:	4b50      	ldr	r3, [pc, #320]	; (80036cc <update_ahrs+0x7e4>)
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <update_ahrs+0x7e4>)
 800359a:	edc3 7a00 	vstr	s15, [r3]
	q3 *= norm;
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <update_ahrs+0x7e8>)
 80035a0:	ed93 7a00 	vldr	s14, [r3]
 80035a4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ac:	4b48      	ldr	r3, [pc, #288]	; (80036d0 <update_ahrs+0x7e8>)
 80035ae:	edc3 7a00 	vstr	s15, [r3]
	
	float q0q1 = q0*q1;
 80035b2:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <update_ahrs+0x7ec>)
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <update_ahrs+0x7e0>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q0q2 = q0*q2;
 80035c6:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <update_ahrs+0x7ec>)
 80035c8:	ed93 7a00 	vldr	s14, [r3]
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <update_ahrs+0x7e4>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q0q3 = q0*q3;
 80035da:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <update_ahrs+0x7ec>)
 80035dc:	ed93 7a00 	vldr	s14, [r3]
 80035e0:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <update_ahrs+0x7e8>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q1 = q1*q1;
 80035ee:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <update_ahrs+0x7e0>)
 80035f0:	ed93 7a00 	vldr	s14, [r3]
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <update_ahrs+0x7e0>)
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q1q2 = q1*q2;
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <update_ahrs+0x7e0>)
 8003604:	ed93 7a00 	vldr	s14, [r3]
 8003608:	4b30      	ldr	r3, [pc, #192]	; (80036cc <update_ahrs+0x7e4>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q1q3 = q1*q3;
 8003616:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <update_ahrs+0x7e0>)
 8003618:	ed93 7a00 	vldr	s14, [r3]
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <update_ahrs+0x7e8>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q2q2 = q2*q2;
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <update_ahrs+0x7e4>)
 800362c:	ed93 7a00 	vldr	s14, [r3]
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <update_ahrs+0x7e4>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float q2q3 = q2*q3;
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <update_ahrs+0x7e4>)
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <update_ahrs+0x7e8>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float q3q3 = q3*q3;
 8003652:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <update_ahrs+0x7e8>)
 8003654:	ed93 7a00 	vldr	s14, [r3]
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <update_ahrs+0x7e8>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003666:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800366a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800366e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003672:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <update_ahrs+0x7f0>)
 8003680:	edc3 7a00 	vstr	s15, [r3]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8003684:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003688:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800368c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <update_ahrs+0x7f0>)
 8003696:	edc3 7a03 	vstr	s15, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 800369a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800369e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <update_ahrs+0x7f0>)
 80036ac:	edc3 7a06 	vstr	s15, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 80036b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80036b4:	e012      	b.n	80036dc <update_ahrs+0x7f4>
 80036b6:	bf00      	nop
 80036b8:	20004638 	.word	0x20004638
 80036bc:	20004608 	.word	0x20004608
 80036c0:	20004634 	.word	0x20004634
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000200 	.word	0x20000200
 80036cc:	20000204 	.word	0x20000204
 80036d0:	20000208 	.word	0x20000208
 80036d4:	20000004 	.word	0x20000004
 80036d8:	2000020c 	.word	0x2000020c
 80036dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80036e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036e8:	4be2      	ldr	r3, [pc, #904]	; (8003a74 <update_ahrs+0xb8c>)
 80036ea:	edc3 7a01 	vstr	s15, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 80036ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80036f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036fa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80036fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003702:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003706:	4bdb      	ldr	r3, [pc, #876]	; (8003a74 <update_ahrs+0xb8c>)
 8003708:	edc3 7a04 	vstr	s15, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800370c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003710:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800371c:	4bd5      	ldr	r3, [pc, #852]	; (8003a74 <update_ahrs+0xb8c>)
 800371e:	edc3 7a07 	vstr	s15, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003722:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003726:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800372a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003732:	4bd0      	ldr	r3, [pc, #832]	; (8003a74 <update_ahrs+0xb8c>)
 8003734:	edc3 7a02 	vstr	s15, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8003738:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800373c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003744:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003748:	4bca      	ldr	r3, [pc, #808]	; (8003a74 <update_ahrs+0xb8c>)
 800374a:	edc3 7a05 	vstr	s15, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 800374e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003752:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003756:	ee37 7a67 	vsub.f32	s14, s14, s15
 800375a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800375e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003762:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003766:	4bc3      	ldr	r3, [pc, #780]	; (8003a74 <update_ahrs+0xb8c>)
 8003768:	edc3 7a08 	vstr	s15, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 800376c:	4bc1      	ldr	r3, [pc, #772]	; (8003a74 <update_ahrs+0xb8c>)
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003782:	4bbc      	ldr	r3, [pc, #752]	; (8003a74 <update_ahrs+0xb8c>)
 8003784:	edd3 6a03 	vldr	s13, [r3, #12]
 8003788:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800379c:	4bb5      	ldr	r3, [pc, #724]	; (8003a74 <update_ahrs+0xb8c>)
 800379e:	edd3 6a06 	vldr	s13, [r3, #24]
 80037a2:	f9b7 30ec 	ldrsh.w	r3, [r7, #236]	; 0xec
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ba:	ee17 3a90 	vmov	r3, s15
 80037be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 80037c2:	4bac      	ldr	r3, [pc, #688]	; (8003a74 <update_ahrs+0xb8c>)
 80037c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80037c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d8:	4ba6      	ldr	r3, [pc, #664]	; (8003a74 <update_ahrs+0xb8c>)
 80037da:	edd3 6a04 	vldr	s13, [r3, #16]
 80037de:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f2:	4ba0      	ldr	r3, [pc, #640]	; (8003a74 <update_ahrs+0xb8c>)
 80037f4:	edd3 6a07 	vldr	s13, [r3, #28]
 80037f8:	f9b7 30ec 	ldrsh.w	r3, [r7, #236]	; 0xec
 80037fc:	ee07 3a90 	vmov	s15, r3
 8003800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003810:	ee17 3a90 	vmov	r3, s15
 8003814:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 8003818:	4b96      	ldr	r3, [pc, #600]	; (8003a74 <update_ahrs+0xb8c>)
 800381a:	ed93 7a02 	vldr	s14, [r3, #8]
 800381e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800382a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382e:	4b91      	ldr	r3, [pc, #580]	; (8003a74 <update_ahrs+0xb8c>)
 8003830:	edd3 6a05 	vldr	s13, [r3, #20]
 8003834:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003848:	4b8a      	ldr	r3, [pc, #552]	; (8003a74 <update_ahrs+0xb8c>)
 800384a:	edd3 6a08 	vldr	s13, [r3, #32]
 800384e:	f9b7 30ec 	ldrsh.w	r3, [r7, #236]	; 0xec
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800385e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003866:	ee17 3a90 	vmov	r3, s15
 800386a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	acc_Eframez -= 2000;
 800386e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003872:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8003876:	b29b      	uxth	r3, r3
 8003878:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42


	const float accTrueScale = 9.81f/2000.0f; // 2048
 800387c:	4b7e      	ldr	r3, [pc, #504]	; (8003a78 <update_ahrs+0xb90>)
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 8003880:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	4b79      	ldr	r3, [pc, #484]	; (8003a7c <update_ahrs+0xb94>)
 8003896:	edc3 7a00 	vstr	s15, [r3]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 800389a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	4b73      	ldr	r3, [pc, #460]	; (8003a7c <update_ahrs+0xb94>)
 80038b0:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 80038b4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c8:	4b6c      	ldr	r3, [pc, #432]	; (8003a7c <update_ahrs+0xb94>)
 80038ca:	edc3 7a02 	vstr	s15, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 80038ce:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <update_ahrs+0xb94>)
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8003a80 <update_ahrs+0xb98>
 80038d8:	eeb0 0a67 	vmov.f32	s0, s15
 80038dc:	f000 fb12 	bl	8003f04 <fapplyDeadband>
 80038e0:	eef0 7a40 	vmov.f32	s15, s0
 80038e4:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <update_ahrs+0xb94>)
 80038e6:	edc3 7a00 	vstr	s15, [r3]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 80038ea:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <update_ahrs+0xb94>)
 80038ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80038f0:	eddf 0a63 	vldr	s1, [pc, #396]	; 8003a80 <update_ahrs+0xb98>
 80038f4:	eeb0 0a67 	vmov.f32	s0, s15
 80038f8:	f000 fb04 	bl	8003f04 <fapplyDeadband>
 80038fc:	eef0 7a40 	vmov.f32	s15, s0
 8003900:	4b5e      	ldr	r3, [pc, #376]	; (8003a7c <update_ahrs+0xb94>)
 8003902:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <update_ahrs+0xb94>)
 8003908:	edd3 7a02 	vldr	s15, [r3, #8]
 800390c:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8003a80 <update_ahrs+0xb98>
 8003910:	eeb0 0a67 	vmov.f32	s0, s15
 8003914:	f000 faf6 	bl	8003f04 <fapplyDeadband>
 8003918:	eef0 7a40 	vmov.f32	s15, s0
 800391c:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <update_ahrs+0xb94>)
 800391e:	edc3 7a02 	vstr	s15, [r3, #8]

    if(millis() - init_us < 5000){
 8003922:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <update_ahrs+0xb9c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003928:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <update_ahrs+0xba0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4413      	add	r3, r2
 800392e:	4a57      	ldr	r2, [pc, #348]	; (8003a8c <update_ahrs+0xba4>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099a      	lsrs	r2, r3, #6
 8003936:	4b56      	ldr	r3, [pc, #344]	; (8003a90 <update_ahrs+0xba8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003940:	4293      	cmp	r3, r2
 8003942:	d80b      	bhi.n	800395c <update_ahrs+0xa74>
    	acc_Eframe[X] = 0;
 8003944:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <update_ahrs+0xb94>)
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 800394c:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <update_ahrs+0xb94>)
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 8003954:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <update_ahrs+0xb94>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
    }

	float pitch_rad = atan2_approx(-dcm[1][2],dcm[2][2]);
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <update_ahrs+0xb8c>)
 800395e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003962:	eef1 7a67 	vneg.f32	s15, s15
 8003966:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <update_ahrs+0xb8c>)
 8003968:	ed93 7a08 	vldr	s14, [r3, #32]
 800396c:	eef0 0a47 	vmov.f32	s1, s14
 8003970:	eeb0 0a67 	vmov.f32	s0, s15
 8003974:	f000 f9fc 	bl	8003d70 <atan2_approx>
 8003978:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float roll_rad = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]));
 800397c:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <update_ahrs+0xb8c>)
 800397e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003982:	eeb1 8a67 	vneg.f32	s16, s15
 8003986:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <update_ahrs+0xb8c>)
 8003988:	ed93 7a02 	vldr	s14, [r3, #8]
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <update_ahrs+0xb8c>)
 800398e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800399e:	eeb0 0a67 	vmov.f32	s0, s15
 80039a2:	f011 fb91 	bl	80150c8 <sqrtf>
 80039a6:	eef0 7a40 	vmov.f32	s15, s0
 80039aa:	eef0 0a67 	vmov.f32	s1, s15
 80039ae:	eeb0 0a48 	vmov.f32	s0, s16
 80039b2:	f000 f9dd 	bl	8003d70 <atan2_approx>
 80039b6:	eef0 7a40 	vmov.f32	s15, s0
 80039ba:	eef1 7a67 	vneg.f32	s15, s15
 80039be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float yaw_rad = -atan2_approx(dcm[0][1],dcm[0][0]);
 80039c2:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <update_ahrs+0xb8c>)
 80039c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <update_ahrs+0xb8c>)
 80039ca:	ed93 7a00 	vldr	s14, [r3]
 80039ce:	eef0 0a47 	vmov.f32	s1, s14
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	f000 f9cb 	bl	8003d70 <atan2_approx>
 80039da:	eef0 7a40 	vmov.f32	s15, s0
 80039de:	eef1 7a67 	vneg.f32	s15, s15
 80039e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	AHRS.pitch = pitch_rad*DEG + 2.3f;
 80039e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039ea:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003a94 <update_ahrs+0xbac>
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003a98 <update_ahrs+0xbb0>
 80039f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <update_ahrs+0xbb4>)
 80039fc:	edc3 7a01 	vstr	s15, [r3, #4]
	AHRS.roll = roll_rad*DEG   - 5.45f;
 8003a00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003a04:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003a94 <update_ahrs+0xbac>
 8003a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a0c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003aa0 <update_ahrs+0xbb8>
 8003a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <update_ahrs+0xbb4>)
 8003a16:	edc3 7a00 	vstr	s15, [r3]
	float yaw_ = yaw_rad*DEG + 90.0f;;
 8003a1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003a1e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003a94 <update_ahrs+0xbac>
 8003a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003aa4 <update_ahrs+0xbbc>
 8003a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a2e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    // yaw 0 - 360
	if(yaw_ < 0){
 8003a32:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	d507      	bpl.n	8003a50 <update_ahrs+0xb68>
		 yaw_ = 360 + yaw_;
 8003a40:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003a44:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003aa8 <update_ahrs+0xbc0>
 8003a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a4c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	}
	AHRS.yaw =  yaw_;
 8003a50:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <update_ahrs+0xbb4>)
 8003a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a56:	6093      	str	r3, [r2, #8]

	float p = gx_/config.gyr_lsb;  // deg/s
 8003a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <update_ahrs+0xbc4>)
 8003a66:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003a72:	e01d      	b.n	8003ab0 <update_ahrs+0xbc8>
 8003a74:	2000020c 	.word	0x2000020c
 8003a78:	3ba0ba20 	.word	0x3ba0ba20
 8003a7c:	20004644 	.word	0x20004644
 8003a80:	3ca3d70a 	.word	0x3ca3d70a
 8003a84:	200048cc 	.word	0x200048cc
 8003a88:	2000465c 	.word	0x2000465c
 8003a8c:	10624dd3 	.word	0x10624dd3
 8003a90:	20004630 	.word	0x20004630
 8003a94:	42652ee0 	.word	0x42652ee0
 8003a98:	40133333 	.word	0x40133333
 8003a9c:	2000460c 	.word	0x2000460c
 8003aa0:	40ae6666 	.word	0x40ae6666
 8003aa4:	42b40000 	.word	0x42b40000
 8003aa8:	43b40000 	.word	0x43b40000
 8003aac:	20000008 	.word	0x20000008
	float q = -gy_/config.gyr_lsb;
 8003ab0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <update_ahrs+0xcfc>)
 8003ac0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float r = -gz_/config.gyr_lsb;
 8003acc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ad0:	425b      	negs	r3, r3
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <update_ahrs+0xcfc>)
 8003adc:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	AHRS.p   =  q;
 8003ae8:	4a3f      	ldr	r2, [pc, #252]	; (8003be8 <update_ahrs+0xd00>)
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	60d3      	str	r3, [r2, #12]
	AHRS.q   =  -p;
 8003aee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003af2:	eef1 7a67 	vneg.f32	s15, s15
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <update_ahrs+0xd00>)
 8003af8:	edc3 7a04 	vstr	s15, [r3, #16]
	AHRS.r   =  r;
 8003afc:	4a3a      	ldr	r2, [pc, #232]	; (8003be8 <update_ahrs+0xd00>)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	6153      	str	r3, [r2, #20]
    
	float cosx = cos_approx(roll_rad);
 8003b02:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003b06:	f000 f91b 	bl	8003d40 <cos_approx>
 8003b0a:	ed87 0a08 	vstr	s0, [r7, #32]
	float sinx = sin_approx(roll_rad);
 8003b0e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003b12:	f000 f86b 	bl	8003bec <sin_approx>
 8003b16:	ed87 0a07 	vstr	s0, [r7, #28]
	float cosy = cos_approx(pitch_rad);
 8003b1a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8003b1e:	f000 f90f 	bl	8003d40 <cos_approx>
 8003b22:	ed87 0a06 	vstr	s0, [r7, #24]
	float tany = tan_approx(pitch_rad);
 8003b26:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8003b2a:	f000 f85f 	bl	8003bec <sin_approx>
 8003b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8003b32:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8003b36:	f000 f903 	bl	8003d40 <cos_approx>
 8003b3a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b3e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003b42:	edc7 7a05 	vstr	s15, [r7, #20]
	
	// Body rate to euler rate (Deg/s)
    AHRS.pitch_rate  = -(p + r*cosx*tany + q*sinx*tany);
 8003b46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b62:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003b66:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7a:	eef1 7a67 	vneg.f32	s15, s15
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <update_ahrs+0xd00>)
 8003b80:	edc3 7a07 	vstr	s15, [r3, #28]
    AHRS.roll_rate = q*cosx - r*sinx;
 8003b84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b88:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b90:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003b94:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <update_ahrs+0xd00>)
 8003ba2:	edc3 7a06 	vstr	s15, [r3, #24]
    AHRS.yaw_rate   = r*cosx/cosy + q*sinx/cosy;
 8003ba6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bae:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003bbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bc2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003bc6:	edd7 6a06 	vldr	s13, [r7, #24]
 8003bca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <update_ahrs+0xd00>)
 8003bd4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	37d4      	adds	r7, #212	; 0xd4
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	ecbd 8b02 	vpop	{d8}
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	20000008 	.word	0x20000008
 8003be8:	2000460c 	.word	0x2000460c

08003bec <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 8003bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bfe:	ee17 3a90 	vmov	r3, s15
 8003c02:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f113 0f20 	cmn.w	r3, #32
 8003c0a:	db02      	blt.n	8003c12 <sin_approx+0x26>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	dd0a      	ble.n	8003c28 <sin_approx+0x3c>
 8003c12:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003d1c <sin_approx+0x130>
 8003c16:	e079      	b.n	8003d0c <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8003c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c1c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003d20 <sin_approx+0x134>
 8003c20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c24:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c2c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003d24 <sin_approx+0x138>
 8003c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	dcee      	bgt.n	8003c18 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8003c3a:	e007      	b.n	8003c4c <sin_approx+0x60>
 8003c3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c40:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003d20 <sin_approx+0x134>
 8003c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c48:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c50:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003d28 <sin_approx+0x13c>
 8003c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5c:	d4ee      	bmi.n	8003c3c <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8003c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c62:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003d2c <sin_approx+0x140>
 8003c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	dd0c      	ble.n	8003c8a <sin_approx+0x9e>
 8003c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c74:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003d2c <sin_approx+0x140>
 8003c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c7c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003d2c <sin_approx+0x140>
 8003c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c84:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c88:	e014      	b.n	8003cb4 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8003c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003d30 <sin_approx+0x144>
 8003c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	d50b      	bpl.n	8003cb4 <sin_approx+0xc8>
 8003c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ca0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003d2c <sin_approx+0x140>
 8003ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ca8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003d30 <sin_approx+0x144>
 8003cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb0:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 8003cb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cbc:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8003cc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ccc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cd0:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003d1c <sin_approx+0x130>
 8003cd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cd8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003d34 <sin_approx+0x148>
 8003cdc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003ce0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003d38 <sin_approx+0x14c>
 8003cec:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf8:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003d3c <sin_approx+0x150>
 8003cfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d08:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	00000000 	.word	0x00000000
 8003d20:	40c90fdb 	.word	0x40c90fdb
 8003d24:	40490fdb 	.word	0x40490fdb
 8003d28:	c0490fdb 	.word	0xc0490fdb
 8003d2c:	3fc90fdb 	.word	0x3fc90fdb
 8003d30:	bfc90fdb 	.word	0xbfc90fdb
 8003d34:	3941e792 	.word	0x3941e792
 8003d38:	3c083097 	.word	0x3c083097
 8003d3c:	3e2aa815 	.word	0x3e2aa815

08003d40 <cos_approx>:

float cos_approx(float x)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 8003d4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d4e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d6c <cos_approx+0x2c>
 8003d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	f7ff ff47 	bl	8003bec <sin_approx>
 8003d5e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	3fc90fdb 	.word	0x3fc90fdb

08003d70 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b08b      	sub	sp, #44	; 0x2c
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d7a:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8003d7e:	edd7 7a00 	vldr	s15, [r7]
 8003d82:	eef0 7ae7 	vabs.f32	s15, s15
 8003d86:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 8003d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d8e:	eef0 7ae7 	vabs.f32	s15, s15
 8003d92:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dae:	dd01      	ble.n	8003db4 <atan2_approx+0x44>
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	e000      	b.n	8003db6 <atan2_approx+0x46>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8003db8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	d018      	beq.n	8003df8 <atan2_approx+0x88>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	ed97 7a04 	vldr	s14, [r7, #16]
 8003dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dde:	d502      	bpl.n	8003de6 <atan2_approx+0x76>
 8003de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de4:	e001      	b.n	8003dea <atan2_approx+0x7a>
 8003de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dea:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003dee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003df2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003df6:	e002      	b.n	8003dfe <atan2_approx+0x8e>
    else res = 0.0f;
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8003dfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e02:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003ee0 <atan2_approx+0x170>
 8003e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ee4 <atan2_approx+0x174>
 8003e0e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003ee8 <atan2_approx+0x178>
 8003e1e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003eec <atan2_approx+0x17c>
 8003e2e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003ef0 <atan2_approx+0x180>
 8003e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e42:	eef1 6a67 	vneg.f32	s13, s15
 8003e46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e4a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003ef4 <atan2_approx+0x184>
 8003e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e52:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003ef8 <atan2_approx+0x188>
 8003e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003e72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e76:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	dd07      	ble.n	8003e94 <atan2_approx+0x124>
 8003e84:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003efc <atan2_approx+0x18c>
 8003e88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8003e94:	edd7 7a00 	vldr	s15, [r7]
 8003e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	d507      	bpl.n	8003eb2 <atan2_approx+0x142>
 8003ea2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003f00 <atan2_approx+0x190>
 8003ea6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8003eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebe:	d505      	bpl.n	8003ecc <atan2_approx+0x15c>
 8003ec0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ec4:	eef1 7a67 	vneg.f32	s15, s15
 8003ec8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	ee07 3a90 	vmov	s15, r3
}
 8003ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed6:	372c      	adds	r7, #44	; 0x2c
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	3d4e0939 	.word	0x3d4e0939
 8003ee4:	3e9eb5e3 	.word	0x3e9eb5e3
 8003ee8:	3e16fa88 	.word	0x3e16fa88
 8003eec:	3f7ffe45 	.word	0x3f7ffe45
 8003ef0:	34a8dfa7 	.word	0x34a8dfa7
 8003ef4:	3f24fb99 	.word	0x3f24fb99
 8003ef8:	3e16a269 	.word	0x3e16a269
 8003efc:	3fc90fdb 	.word	0x3fc90fdb
 8003f00:	40490fdb 	.word	0x40490fdb

08003f04 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f0e:	edc7 0a00 	vstr	s1, [r7]
    if (fabsf(value) < deadband) {
 8003f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f16:	eef0 7ae7 	vabs.f32	s15, s15
 8003f1a:	ed97 7a00 	vldr	s14, [r7]
 8003f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f26:	dd02      	ble.n	8003f2e <fapplyDeadband+0x2a>
        return 0;
 8003f28:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003f64 <fapplyDeadband+0x60>
 8003f2c:	e013      	b.n	8003f56 <fapplyDeadband+0x52>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8003f2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	db06      	blt.n	8003f4a <fapplyDeadband+0x46>
 8003f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f40:	edd7 7a00 	vldr	s15, [r7]
 8003f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f48:	e005      	b.n	8003f56 <fapplyDeadband+0x52>
 8003f4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f4e:	edd7 7a00 	vldr	s15, [r7]
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003f56:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	00000000 	.word	0x00000000

08003f68 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f7e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	105a      	asrs	r2, r3, #1
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <invSqrt_+0x74>)
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003f98:	f107 030c 	add.w	r3, r7, #12
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fac:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	edc7 7a04 	vstr	s15, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	ee07 3a90 	vmov	s15, r3
}
 8003fce:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	5f3759df 	.word	0x5f3759df

08003fe0 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fea:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fee:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8003ff2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004002:	d501      	bpl.n	8004008 <constrainf+0x28>
        return low;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	e00b      	b.n	8004020 <constrainf+0x40>
    else if (amt > high)
 8004008:	ed97 7a03 	vldr	s14, [r7, #12]
 800400c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004018:	dd01      	ble.n	800401e <constrainf+0x3e>
        return high;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	e000      	b.n	8004020 <constrainf+0x40>
    else
        return amt;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	ee07 3a90 	vmov	s15, r3
}
 8004024:	eeb0 0a67 	vmov.f32	s0, s15
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	ed87 0a01 	vstr	s0, [r7, #4]
 800403e:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8004042:	edd7 7a01 	vldr	s15, [r7, #4]
 8004046:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004080 <pt1FilterGain+0x4c>
 800404a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800404e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004056:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 800405a:	ed97 7a03 	vldr	s14, [r7, #12]
 800405e:	edd7 7a00 	vldr	s15, [r7]
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	ed97 7a00 	vldr	s14, [r7]
 800406a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800406e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004072:	eeb0 0a67 	vmov.f32	s0, s15
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40c90fdb 	.word	0x40c90fdb

08004084 <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_  *pid_in,float kp, float ki, float kd,float f_cut_err, float f_cut_D, float maxI){
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	61f8      	str	r0, [r7, #28]
 800408c:	ed87 0a06 	vstr	s0, [r7, #24]
 8004090:	edc7 0a05 	vstr	s1, [r7, #20]
 8004094:	ed87 1a04 	vstr	s2, [r7, #16]
 8004098:	edc7 1a03 	vstr	s3, [r7, #12]
 800409c:	ed87 2a02 	vstr	s4, [r7, #8]
 80040a0:	edc7 2a01 	vstr	s5, [r7, #4]
  memset(pid_in,0,sizeof(pid_));
 80040a4:	222c      	movs	r2, #44	; 0x2c
 80040a6:	2100      	movs	r1, #0
 80040a8:	69f8      	ldr	r0, [r7, #28]
 80040aa:	f010 fdf9 	bl	8014ca0 <memset>
  pid_in->err = 0.0f;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
  pid_in->err_fcut = f_cut_err;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	605a      	str	r2, [r3, #4]
  pid_in->kp = kp;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	609a      	str	r2, [r3, #8]
  pid_in->ki = ki;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	60da      	str	r2, [r3, #12]
  pid_in->kd = kd;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	611a      	str	r2, [r3, #16]
  pid_in->f_cut_D = f_cut_D;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24
  pid_in->I_range = maxI;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]
  pid_in->last_input = 0;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	619a      	str	r2, [r3, #24]
  pid_in->D_filted = 0;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
  pid_in->init = 1;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80040f2:	bf00      	nop
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <pid_calculate>:

float pid_calculate(pid_ *pid_in,float measurement, float setpoint,float scaler,float dt){
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b08a      	sub	sp, #40	; 0x28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6178      	str	r0, [r7, #20]
 8004102:	ed87 0a04 	vstr	s0, [r7, #16]
 8004106:	edc7 0a03 	vstr	s1, [r7, #12]
 800410a:	ed87 1a02 	vstr	s2, [r7, #8]
 800410e:	edc7 1a01 	vstr	s3, [r7, #4]
   if(pid_in->init){
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <pid_calculate+0x36>
       pid_in->last_input = measurement;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	619a      	str	r2, [r3, #24]
       pid_in->init = 0;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
       return 0.0f;
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	e0b5      	b.n	800429c <pid_calculate+0x1a2>
   }
   // Caculate P term
   float error = setpoint - measurement;
 8004130:	ed97 7a03 	vldr	s14, [r7, #12]
 8004134:	edd7 7a04 	vldr	s15, [r7, #16]
 8004138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413c:	edc7 7a08 	vstr	s15, [r7, #32]
   pid_in->err += pt1FilterGain(pid_in->err_fcut,dt)*(error - pid_in->err);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	edd3 7a01 	vldr	s15, [r3, #4]
 8004146:	edd7 0a01 	vldr	s1, [r7, #4]
 800414a:	eeb0 0a67 	vmov.f32	s0, s15
 800414e:	f7ff ff71 	bl	8004034 <pt1FilterGain>
 8004152:	eef0 6a40 	vmov.f32	s13, s0
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004164:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	edd3 7a00 	vldr	s15, [r3]
 800416e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	edc3 7a00 	vstr	s15, [r3]
   float output = pid_in->err*pid_in->kp*scaler;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	ed93 7a00 	vldr	s14, [r3]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	edd3 7a02 	vldr	s15, [r3, #8]
 8004184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004188:	ed97 7a02 	vldr	s14, [r7, #8]
 800418c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004190:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // Caculate I term
   if(pid_in->ki > 0){
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	edd3 7a03 	vldr	s15, [r3, #12]
 800419a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	dd34      	ble.n	800420e <pid_calculate+0x114>
      pid_in->i_term += pid_in->err *pid_in->ki *dt;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	edd3 6a00 	vldr	s13, [r3]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80041b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80041be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	edc3 7a05 	vstr	s15, [r3, #20]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80041d8:	eef1 7a67 	vneg.f32	s15, s15
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	edd3 6a08 	vldr	s13, [r3, #32]
 80041e2:	eeb0 1a66 	vmov.f32	s2, s13
 80041e6:	eef0 0a67 	vmov.f32	s1, s15
 80041ea:	eeb0 0a47 	vmov.f32	s0, s14
 80041ee:	f7ff fef7 	bl	8003fe0 <constrainf>
 80041f2:	eef0 7a40 	vmov.f32	s15, s0
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	edc3 7a05 	vstr	s15, [r3, #20]
      output += pid_in->i_term;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8004202:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800420a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   }
   // Caculate D term
   if(pid_in->kd > 0){
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	edd3 7a04 	vldr	s15, [r3, #16]
 8004214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	dd3d      	ble.n	800429a <pid_calculate+0x1a0>
        float delta =  (measurement - pid_in->last_input)*pid_in->kd/dt;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	edd3 7a06 	vldr	s15, [r3, #24]
 8004224:	ed97 7a04 	vldr	s14, [r7, #16]
 8004228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004232:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004236:	ed97 7a01 	vldr	s14, [r7, #4]
 800423a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800423e:	edc7 7a07 	vstr	s15, [r7, #28]
        pid_in->last_input = measurement;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	619a      	str	r2, [r3, #24]
        // low pass filter
        pid_in->D_filted += pt1FilterGain(pid_in->f_cut_D,dt)*(delta - pid_in->D_filted);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800424e:	edd7 0a01 	vldr	s1, [r7, #4]
 8004252:	eeb0 0a67 	vmov.f32	s0, s15
 8004256:	f7ff feed 	bl	8004034 <pt1FilterGain>
 800425a:	eef0 6a40 	vmov.f32	s13, s0
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	edd3 7a07 	vldr	s15, [r3, #28]
 8004264:	ed97 7a07 	vldr	s14, [r7, #28]
 8004268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	edd3 7a07 	vldr	s15, [r3, #28]
 8004276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	edc3 7a07 	vstr	s15, [r3, #28]
        output -= pid_in->D_filted*scaler;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	ed93 7a07 	vldr	s14, [r3, #28]
 8004286:	edd7 7a02 	vldr	s15, [r7, #8]
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004296:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   }
   return output;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	ee07 3a90 	vmov	s15, r3
}
 80042a0:	eeb0 0a67 	vmov.f32	s0, s15
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <pid_reset>:

void pid_reset(pid_ *pid_in)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
	pid_in->i_term = 0.0f;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
	pid_in->last_input = 0.0f;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]
   pid_in->D_filted = 0.0f;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
   pid_in->err = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
   pid_in->init = 1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	htimm = htim;
 80042f0:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <initPWM+0x7c>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <initPWM+0x80>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <initPWM+0x84>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 8004302:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <initPWM+0x88>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8004308:	2100      	movs	r1, #0
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f007 f98e 	bl	800b62c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8004310:	2104      	movs	r1, #4
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f007 f98a 	bl	800b62c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8004318:	2108      	movs	r1, #8
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f007 f986 	bl	800b62c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <initPWM+0x7c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f242 7210 	movw	r2, #10000	; 0x2710
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <initPWM+0x7c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f242 7210 	movw	r2, #10000	; 0x2710
 8004334:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <initPWM+0x7c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004340:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <initPWM+0x7c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <initPWM+0x7c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20004654 	.word	0x20004654
 8004368:	20000240 	.word	0x20000240
 800436c:	20004650 	.word	0x20004650
 8004370:	2000023c 	.word	0x2000023c

08004374 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(){
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	//htimmz = htimz;
	HAL_TIM_Base_Start_IT(&htim4);
 8004378:	4802      	ldr	r0, [pc, #8]	; (8004384 <timer_start+0x10>)
 800437a:	f007 f88d 	bl	800b498 <HAL_TIM_Base_Start_IT>
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200048cc 	.word	0x200048cc

08004388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <MX_DMA_Init+0x88>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <MX_DMA_Init+0x88>)
 8004398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800439c:	6313      	str	r3, [r2, #48]	; 0x30
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <MX_DMA_Init+0x88>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <MX_DMA_Init+0x88>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	4a17      	ldr	r2, [pc, #92]	; (8004410 <MX_DMA_Init+0x88>)
 80043b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043b8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <MX_DMA_Init+0x88>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2105      	movs	r1, #5
 80043ca:	200c      	movs	r0, #12
 80043cc:	f002 feec 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80043d0:	200c      	movs	r0, #12
 80043d2:	f002 ff05 	bl	80071e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 11, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	210b      	movs	r1, #11
 80043da:	203b      	movs	r0, #59	; 0x3b
 80043dc:	f002 fee4 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80043e0:	203b      	movs	r0, #59	; 0x3b
 80043e2:	f002 fefd 	bl	80071e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	210b      	movs	r1, #11
 80043ea:	2045      	movs	r0, #69	; 0x45
 80043ec:	f002 fedc 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80043f0:	2045      	movs	r0, #69	; 0x45
 80043f2:	f002 fef5 	bl	80071e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2105      	movs	r1, #5
 80043fa:	2046      	movs	r0, #70	; 0x46
 80043fc:	f002 fed4 	bl	80071a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004400:	2046      	movs	r0, #70	; 0x46
 8004402:	f002 feed 	bl	80071e0 <HAL_NVIC_EnableIRQ>

}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800

08004414 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    if(huart == &huart2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <HAL_UART_RxCpltCallback+0x2c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d102      	bne.n	800442a <HAL_UART_RxCpltCallback+0x16>
	{
		ibus_calback();
 8004424:	f7fd f9c6 	bl	80017b4 <ibus_calback>
    }
   else if(huart == &huart3){
      gps_DMA_callback();
   // 	gps_callback();
   }
}
 8004428:	e005      	b.n	8004436 <HAL_UART_RxCpltCallback+0x22>
   else if(huart == &huart3){
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <HAL_UART_RxCpltCallback+0x30>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_UART_RxCpltCallback+0x22>
      gps_DMA_callback();
 8004432:	f7fe faab 	bl	800298c <gps_DMA_callback>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20004aa4 	.word	0x20004aa4
 8004444:	200049bc 	.word	0x200049bc

08004448 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a04      	ldr	r2, [pc, #16]	; (8004464 <HAL_UART_TxCpltCallback+0x1c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d101      	bne.n	800445c <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8004458:	f002 fd7c 	bl	8006f54 <mavlink_tx_cpl_callback>
    }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20004a60 	.word	0x20004a60

08004468 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b094      	sub	sp, #80	; 0x50
 800446c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	timer_start(&htim4);
 800446e:	4824      	ldr	r0, [pc, #144]	; (8004500 <MX_FREERTOS_Init+0x98>)
 8004470:	f7ff ff80 	bl	8004374 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, blackbox_task, osPriorityLow, 0, 1024);
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <MX_FREERTOS_Init+0x9c>)
 8004476:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800447a:	461d      	mov	r5, r3
 800447c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800447e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	6023      	str	r3, [r4, #0]
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8004484:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f00d fce3 	bl	8011e56 <osThreadCreate>
 8004490:	4603      	mov	r3, r0
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <MX_FREERTOS_Init+0xa0>)
 8004494:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, ahrs_task, osPriorityHigh, 0, 1024);
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <MX_FREERTOS_Init+0xa4>)
 8004498:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800449c:	461d      	mov	r5, r3
 800449e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	6023      	str	r3, [r4, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80044a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f00d fcd2 	bl	8011e56 <osThreadCreate>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <MX_FREERTOS_Init+0xa8>)
 80044b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, sensor_task, osPriorityRealtime, 0, 512);
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <MX_FREERTOS_Init+0xac>)
 80044ba:	f107 0414 	add.w	r4, r7, #20
 80044be:	461d      	mov	r5, r3
 80044c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	6023      	str	r3, [r4, #0]
  task3Handle = osThreadCreate(osThread(task3), NULL);
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f00d fcc1 	bl	8011e56 <osThreadCreate>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <MX_FREERTOS_Init+0xb0>)
 80044d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, osd_task, osPriorityLow, 0, 512);
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <MX_FREERTOS_Init+0xb4>)
 80044dc:	463c      	mov	r4, r7
 80044de:	461d      	mov	r5, r3
 80044e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	6023      	str	r3, [r4, #0]
  task4Handle = osThreadCreate(osThread(task4), NULL);
 80044e8:	463b      	mov	r3, r7
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f00d fcb2 	bl	8011e56 <osThreadCreate>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <MX_FREERTOS_Init+0xb8>)
 80044f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80044f8:	bf00      	nop
 80044fa:	3750      	adds	r7, #80	; 0x50
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004500:	200048cc 	.word	0x200048cc
 8004504:	08015a2c 	.word	0x08015a2c
 8004508:	2000466c 	.word	0x2000466c
 800450c:	08015a40 	.word	0x08015a40
 8004510:	20004694 	.word	0x20004694
 8004514:	08015a54 	.word	0x08015a54
 8004518:	2000468c 	.word	0x2000468c
 800451c:	08015a68 	.word	0x08015a68
 8004520:	20004684 	.word	0x20004684
 8004524:	00000000 	.word	0x00000000

08004528 <blackbox_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blackbox_task */
void blackbox_task(void const * argument)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
		black_box_init();
 8004530:	f7fd fce8 	bl	8001f04 <black_box_init>
		black_box_reset = TRUE;
 8004534:	4bd6      	ldr	r3, [pc, #856]	; (8004890 <blackbox_task+0x368>)
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
		TickType_t xLastWakeTime;
		const TickType_t xFrequency = 100;  // 
 800453a:	2364      	movs	r3, #100	; 0x64
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
		xLastWakeTime = xTaskGetTickCount();
 800453e:	f00f f9d5 	bl	80138ec <xTaskGetTickCount>
 8004542:	4603      	mov	r3, r0
 8004544:	60bb      	str	r3, [r7, #8]
	  /* Infinite loop */
	  for(;;)
	  {
			static uint32_t start_time_ms;
			if(black_box_reset){
 8004546:	4bd2      	ldr	r3, [pc, #840]	; (8004890 <blackbox_task+0x368>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <blackbox_task+0x4a>
				black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 800454e:	48d1      	ldr	r0, [pc, #836]	; (8004894 <blackbox_task+0x36c>)
 8004550:	f7fd fda0 	bl	8002094 <black_box_pack_str>
				black_box_reset = FALSE;
 8004554:	4bce      	ldr	r3, [pc, #824]	; (8004890 <blackbox_task+0x368>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
				start_time_ms = millis();
 800455a:	4bcf      	ldr	r3, [pc, #828]	; (8004898 <blackbox_task+0x370>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004560:	4bce      	ldr	r3, [pc, #824]	; (800489c <blackbox_task+0x374>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4413      	add	r3, r2
 8004566:	4ace      	ldr	r2, [pc, #824]	; (80048a0 <blackbox_task+0x378>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	4acd      	ldr	r2, [pc, #820]	; (80048a4 <blackbox_task+0x37c>)
 8004570:	6013      	str	r3, [r2, #0]
			}
			uint32_t time_ms =  millis() - start_time_ms;
 8004572:	4bc9      	ldr	r3, [pc, #804]	; (8004898 <blackbox_task+0x370>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	4bc8      	ldr	r3, [pc, #800]	; (800489c <blackbox_task+0x374>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4413      	add	r3, r2
 800457e:	4ac8      	ldr	r2, [pc, #800]	; (80048a0 <blackbox_task+0x378>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	099a      	lsrs	r2, r3, #6
 8004586:	4bc7      	ldr	r3, [pc, #796]	; (80048a4 <blackbox_task+0x37c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	623b      	str	r3, [r7, #32]
			// control thortle 0 -> 100%
			int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 800458e:	4bc6      	ldr	r3, [pc, #792]	; (80048a8 <blackbox_task+0x380>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004596:	4618      	mov	r0, r3
 8004598:	f7fb ff6c 	bl	8000474 <__aeabi_i2d>
 800459c:	a3ba      	add	r3, pc, #744	; (adr r3, 8004888 <blackbox_task+0x360>)
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f7fb ffd1 	bl	8000548 <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	f7fc fa7b 	bl	8000aa8 <__aeabi_d2iz>
 80045b2:	4603      	mov	r3, r0
 80045b4:	61fb      	str	r3, [r7, #28]

			// tx signal 0 -> 100 %
			int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 80045b6:	4bbc      	ldr	r3, [pc, #752]	; (80048a8 <blackbox_task+0x380>)
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fb ff58 	bl	8000474 <__aeabi_i2d>
 80045c4:	a3b0      	add	r3, pc, #704	; (adr r3, 8004888 <blackbox_task+0x360>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb ffbd 	bl	8000548 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	f7fc fa67 	bl	8000aa8 <__aeabi_d2iz>
 80045da:	4603      	mov	r3, r0
 80045dc:	61bb      	str	r3, [r7, #24]

			/*** write time  ***/
			black_box_pack_int(time_ms);
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd fcbd 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80045e6:	2020      	movs	r0, #32
 80045e8:	f7fd fd8e 	bl	8002108 <black_box_pack_char>

			/*---- control parameters ---*/
			black_box_pack_int((int)servoL);
 80045ec:	4baf      	ldr	r3, [pc, #700]	; (80048ac <blackbox_task+0x384>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fd fcb5 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80045f6:	2020      	movs	r0, #32
 80045f8:	f7fd fd86 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)servoR);
 80045fc:	4bac      	ldr	r3, [pc, #688]	; (80048b0 <blackbox_task+0x388>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fd fcad 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 8004606:	2020      	movs	r0, #32
 8004608:	f7fd fd7e 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(throtle);
 800460c:	69f8      	ldr	r0, [r7, #28]
 800460e:	f7fd fca7 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 8004612:	2020      	movs	r0, #32
 8004614:	f7fd fd78 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(srri);
 8004618:	69b8      	ldr	r0, [r7, #24]
 800461a:	f7fd fca1 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800461e:	2020      	movs	r0, #32
 8004620:	f7fd fd72 	bl	8002108 <black_box_pack_char>

			/*----- attitude ---------------------*/
			black_box_pack_int((int)(AHRS.roll*100));
 8004624:	4ba3      	ldr	r3, [pc, #652]	; (80048b4 <blackbox_task+0x38c>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80048b8 <blackbox_task+0x390>
 800462e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004636:	ee17 0a90 	vmov	r0, s15
 800463a:	f7fd fc91 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800463e:	2020      	movs	r0, #32
 8004640:	f7fd fd62 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(roll_desired*100));
 8004644:	4b9d      	ldr	r3, [pc, #628]	; (80048bc <blackbox_task+0x394>)
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80048b8 <blackbox_task+0x390>
 800464e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004656:	ee17 0a90 	vmov	r0, s15
 800465a:	f7fd fc81 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800465e:	2020      	movs	r0, #32
 8004660:	f7fd fd52 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.p*100));
 8004664:	4b93      	ldr	r3, [pc, #588]	; (80048b4 <blackbox_task+0x38c>)
 8004666:	edd3 7a03 	vldr	s15, [r3, #12]
 800466a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80048b8 <blackbox_task+0x390>
 800466e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004676:	ee17 0a90 	vmov	r0, s15
 800467a:	f7fd fc71 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800467e:	2020      	movs	r0, #32
 8004680:	f7fd fd42 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.roll_rate*100));
 8004684:	4b8b      	ldr	r3, [pc, #556]	; (80048b4 <blackbox_task+0x38c>)
 8004686:	edd3 7a06 	vldr	s15, [r3, #24]
 800468a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80048b8 <blackbox_task+0x390>
 800468e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004696:	ee17 0a90 	vmov	r0, s15
 800469a:	f7fd fc61 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800469e:	2020      	movs	r0, #32
 80046a0:	f7fd fd32 	bl	8002108 <black_box_pack_char>

			black_box_pack_int((int)(AHRS.pitch*100));// cm
 80046a4:	4b83      	ldr	r3, [pc, #524]	; (80048b4 <blackbox_task+0x38c>)
 80046a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80046aa:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80048b8 <blackbox_task+0x390>
 80046ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b6:	ee17 0a90 	vmov	r0, s15
 80046ba:	f7fd fc51 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80046be:	2020      	movs	r0, #32
 80046c0:	f7fd fd22 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(pitch_desired*100));
 80046c4:	4b7e      	ldr	r3, [pc, #504]	; (80048c0 <blackbox_task+0x398>)
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80048b8 <blackbox_task+0x390>
 80046ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046d6:	ee17 0a90 	vmov	r0, s15
 80046da:	f7fd fc41 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80046de:	2020      	movs	r0, #32
 80046e0:	f7fd fd12 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.q*100));
 80046e4:	4b73      	ldr	r3, [pc, #460]	; (80048b4 <blackbox_task+0x38c>)
 80046e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80046ea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80048b8 <blackbox_task+0x390>
 80046ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f6:	ee17 0a90 	vmov	r0, s15
 80046fa:	f7fd fc31 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80046fe:	2020      	movs	r0, #32
 8004700:	f7fd fd02 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.pitch_rate*100));
 8004704:	4b6b      	ldr	r3, [pc, #428]	; (80048b4 <blackbox_task+0x38c>)
 8004706:	edd3 7a07 	vldr	s15, [r3, #28]
 800470a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80048b8 <blackbox_task+0x390>
 800470e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004716:	ee17 0a90 	vmov	r0, s15
 800471a:	f7fd fc21 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800471e:	2020      	movs	r0, #32
 8004720:	f7fd fcf2 	bl	8002108 <black_box_pack_char>

			black_box_pack_int((int)(AHRS.yaw*100));
 8004724:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <blackbox_task+0x38c>)
 8004726:	edd3 7a02 	vldr	s15, [r3, #8]
 800472a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80048b8 <blackbox_task+0x390>
 800472e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004736:	ee17 0a90 	vmov	r0, s15
 800473a:	f7fd fc11 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800473e:	2020      	movs	r0, #32
 8004740:	f7fd fce2 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.r*100));
 8004744:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <blackbox_task+0x38c>)
 8004746:	edd3 7a05 	vldr	s15, [r3, #20]
 800474a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80048b8 <blackbox_task+0x390>
 800474e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004756:	ee17 0a90 	vmov	r0, s15
 800475a:	f7fd fc01 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800475e:	2020      	movs	r0, #32
 8004760:	f7fd fcd2 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.yaw_rate*100));
 8004764:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <blackbox_task+0x38c>)
 8004766:	edd3 7a08 	vldr	s15, [r3, #32]
 800476a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80048b8 <blackbox_task+0x390>
 800476e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004776:	ee17 0a90 	vmov	r0, s15
 800477a:	f7fd fbf1 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800477e:	2020      	movs	r0, #32
 8004780:	f7fd fcc2 	bl	8002108 <black_box_pack_char>

			/*------- GPS ----------------------*/
			int16_t vx = _gps.velocity[0];  // cm/s
 8004784:	4b4f      	ldr	r3, [pc, #316]	; (80048c4 <blackbox_task+0x39c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	82fb      	strh	r3, [r7, #22]
			int16_t vy = _gps.velocity[1];  // cm/s
 800478a:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <blackbox_task+0x39c>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	82bb      	strh	r3, [r7, #20]
			int16_t vz = _gps.velocity[2];  // cm/s
 8004790:	4b4c      	ldr	r3, [pc, #304]	; (80048c4 <blackbox_task+0x39c>)
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	827b      	strh	r3, [r7, #18]
			int32_t ground_speed = sqrt(sq(vx) + sq(vy)) ;
 8004796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800479a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800479e:	fb02 f203 	mul.w	r2, r2, r3
 80047a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047a6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fe5f 	bl	8000474 <__aeabi_i2d>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	ec43 2b10 	vmov	d0, r2, r3
 80047be:	f010 fbb7 	bl	8014f30 <sqrt>
 80047c2:	ec53 2b10 	vmov	r2, r3, d0
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7fc f96d 	bl	8000aa8 <__aeabi_d2iz>
 80047ce:	4603      	mov	r3, r0
 80047d0:	60fb      	str	r3, [r7, #12]

			black_box_pack_int(_gps.position[0]);
 80047d2:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <blackbox_task+0x39c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd fbc2 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80047dc:	2020      	movs	r0, #32
 80047de:	f7fd fc93 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(_gps.position[1]);
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <blackbox_task+0x39c>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fbba 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80047ec:	2020      	movs	r0, #32
 80047ee:	f7fd fc8b 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(_gps.altitude_msl);
 80047f2:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <blackbox_task+0x39c>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fd fbb2 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 80047fc:	2020      	movs	r0, #32
 80047fe:	f7fd fc83 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(_gps.altitude_mgl);
 8004802:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <blackbox_task+0x39c>)
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fbaa 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800480c:	2020      	movs	r0, #32
 800480e:	f7fd fc7b 	bl	8002108 <black_box_pack_char>
			//black_box_pack_int(_gps.numSat);
			//lack_box_pack_char(' ');
			black_box_pack_int(_gps.fix);
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <blackbox_task+0x39c>)
 8004814:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fba1 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800481e:	2020      	movs	r0, #32
 8004820:	f7fd fc72 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(ground_speed);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7fd fb9b 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800482a:	2020      	movs	r0, #32
 800482c:	f7fd fc6c 	bl	8002108 <black_box_pack_char>
			black_box_pack_int((int)(pid_velo_scale*1000));   // cm
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <blackbox_task+0x3a0>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80048cc <blackbox_task+0x3a4>
 800483a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004842:	ee17 0a90 	vmov	r0, s15
 8004846:	f7fd fb8b 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800484a:	2020      	movs	r0, #32
 800484c:	f7fd fc5c 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(vz);
 8004850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd fb83 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800485a:	2020      	movs	r0, #32
 800485c:	f7fd fc54 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(baro_climb);   // cm
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <blackbox_task+0x3a8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fb7b 	bl	8001f60 <black_box_pack_int>
			black_box_pack_char(' ');
 800486a:	2020      	movs	r0, #32
 800486c:	f7fd fc4c 	bl	8002108 <black_box_pack_char>
			black_box_pack_int(baro_alt);   // cm
 8004870:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <blackbox_task+0x3ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd fb73 	bl	8001f60 <black_box_pack_int>

			/*----- end line && load data to sd card- -----*/
			//sdcard_fsize = black_box_get_file_size();
			black_box_pack_char('\n');
 800487a:	200a      	movs	r0, #10
 800487c:	f7fd fc44 	bl	8002108 <black_box_pack_char>
			black_box_load();
 8004880:	f7fd fc5c 	bl	800213c <black_box_load>
 8004884:	e028      	b.n	80048d8 <blackbox_task+0x3b0>
 8004886:	bf00      	nop
 8004888:	9999999a 	.word	0x9999999a
 800488c:	3fb99999 	.word	0x3fb99999
 8004890:	20004676 	.word	0x20004676
 8004894:	08015a7c 	.word	0x08015a7c
 8004898:	200048cc 	.word	0x200048cc
 800489c:	2000465c 	.word	0x2000465c
 80048a0:	10624dd3 	.word	0x10624dd3
 80048a4:	20000244 	.word	0x20000244
 80048a8:	20004228 	.word	0x20004228
 80048ac:	20004b14 	.word	0x20004b14
 80048b0:	20004aec 	.word	0x20004aec
 80048b4:	2000460c 	.word	0x2000460c
 80048b8:	42c80000 	.word	0x42c80000
 80048bc:	20004b04 	.word	0x20004b04
 80048c0:	20004afc 	.word	0x20004afc
 80048c4:	200044d0 	.word	0x200044d0
 80048c8:	20004af8 	.word	0x20004af8
 80048cc:	447a0000 	.word	0x447a0000
 80048d0:	20004ae8 	.word	0x20004ae8
 80048d4:	20004b0c 	.word	0x20004b0c

			if(puts_state != -1){
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <blackbox_task+0x3e0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d003      	beq.n	80048ea <blackbox_task+0x3c2>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80048e2:	2110      	movs	r1, #16
 80048e4:	4809      	ldr	r0, [pc, #36]	; (800490c <blackbox_task+0x3e4>)
 80048e6:	f003 fa64 	bl	8007db2 <HAL_GPIO_TogglePin>
			}
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 80048ea:	f107 0308 	add.w	r3, r7, #8
 80048ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f00e fd2d 	bl	8013350 <vTaskDelayUntil>
	#ifdef STACK_DEBUG
	    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 80048f6:	2000      	movs	r0, #0
 80048f8:	f00f fae0 	bl	8013ebc <uxTaskGetStackHighWaterMark>
 80048fc:	4603      	mov	r3, r0
 80048fe:	b29a      	uxth	r2, r3
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <blackbox_task+0x3e8>)
 8004902:	801a      	strh	r2, [r3, #0]
	  {
 8004904:	e61f      	b.n	8004546 <blackbox_task+0x1e>
 8004906:	bf00      	nop
 8004908:	2000447c 	.word	0x2000447c
 800490c:	40020000 	.word	0x40020000
 8004910:	20004688 	.word	0x20004688

08004914 <ahrs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	b08b      	sub	sp, #44	; 0x2c
 8004918:	af06      	add	r7, sp, #24
 800491a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
	attitude_ctrl_init();
 800491c:	f001 fcb4 	bl	8006288 <attitude_ctrl_init>
	initPWM(&htim3);
 8004920:	484e      	ldr	r0, [pc, #312]	; (8004a5c <ahrs_task+0x148>)
 8004922:	f7ff fce1 	bl	80042e8 <initPWM>
	compassInit();
 8004926:	f7fd fca5 	bl	8002274 <compassInit>
	gps_init(&huart3,38400);
 800492a:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 800492e:	484c      	ldr	r0, [pc, #304]	; (8004a60 <ahrs_task+0x14c>)
 8004930:	f7fd ffa0 	bl	8002874 <gps_init>
	baro_init();
 8004934:	f7fd f9de 	bl	8001cf4 <baro_init>
	mavlinkInit(1,1,&huart1,115200);
 8004938:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800493c:	4a49      	ldr	r2, [pc, #292]	; (8004a64 <ahrs_task+0x150>)
 800493e:	2101      	movs	r1, #1
 8004940:	2001      	movs	r0, #1
 8004942:	f002 fa85 	bl	8006e50 <mavlinkInit>
	ibus_init(&huart2);
 8004946:	4848      	ldr	r0, [pc, #288]	; (8004a68 <ahrs_task+0x154>)
 8004948:	f7fc ff04 	bl	8001754 <ibus_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 800494c:	230a      	movs	r3, #10
 800494e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8004950:	f00e ffcc 	bl	80138ec <xTaskGetTickCount>
 8004954:	4603      	mov	r3, r0
 8004956:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debugging
	//timer_calculate_boottime();
	if(is_baro_calibration() == FALSE){
 8004958:	f7fd fa30 	bl	8001dbc <is_baro_calibration>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <ahrs_task+0x54>
		baro_zero_calibrate();
 8004962:	f7fd f9ed 	bl	8001d40 <baro_zero_calibrate>
 8004966:	e003      	b.n	8004970 <ahrs_task+0x5c>
	}else{
		baro_update(0.01);
 8004968:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8004a6c <ahrs_task+0x158>
 800496c:	f7fd fa32 	bl	8001dd4 <baro_update>
	}
	// get rc channel 
	ibusFrameComplete();
 8004970:	f7fc ff7c 	bl	800186c <ibusFrameComplete>
	// gps
	gps_readout();
 8004974:	f7fd ffe0 	bl	8002938 <gps_readout>
	update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],0.01);
 8004978:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <ahrs_task+0x15c>)
 800497a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800497e:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <ahrs_task+0x15c>)
 8004980:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8004984:	4b3a      	ldr	r3, [pc, #232]	; (8004a70 <ahrs_task+0x15c>)
 8004986:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 800498a:	4b3a      	ldr	r3, [pc, #232]	; (8004a74 <ahrs_task+0x160>)
 800498c:	f9b3 e000 	ldrsh.w	lr, [r3]
 8004990:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <ahrs_task+0x160>)
 8004992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004996:	4a37      	ldr	r2, [pc, #220]	; (8004a74 <ahrs_task+0x160>)
 8004998:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800499c:	4936      	ldr	r1, [pc, #216]	; (8004a78 <ahrs_task+0x164>)
 800499e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80049a2:	4835      	ldr	r0, [pc, #212]	; (8004a78 <ahrs_task+0x164>)
 80049a4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80049a8:	4c33      	ldr	r4, [pc, #204]	; (8004a78 <ahrs_task+0x164>)
 80049aa:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 80049ae:	9404      	str	r4, [sp, #16]
 80049b0:	9003      	str	r0, [sp, #12]
 80049b2:	9102      	str	r1, [sp, #8]
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004a6c <ahrs_task+0x158>
 80049bc:	4673      	mov	r3, lr
 80049be:	4662      	mov	r2, ip
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	f7fe fa90 	bl	8002ee8 <update_ahrs>
	attitude_ctrl_start(0.01);
 80049c8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8004a6c <ahrs_task+0x158>
 80049cc:	f001 fcf4 	bl	80063b8 <attitude_ctrl_start>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,0);
	}
*/

	static uint32_t gps_tim_ms;
	if(millis() - gps_tim_ms > 200){
 80049d0:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <ahrs_task+0x168>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <ahrs_task+0x16c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4413      	add	r3, r2
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <ahrs_task+0x170>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099a      	lsrs	r2, r3, #6
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <ahrs_task+0x174>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2bc8      	cmp	r3, #200	; 0xc8
 80049ec:	d914      	bls.n	8004a18 <ahrs_task+0x104>
	   if(_gps.fix > 1){
 80049ee:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <ahrs_task+0x178>)
 80049f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d903      	bls.n	8004a00 <ahrs_task+0xec>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80049f8:	2120      	movs	r1, #32
 80049fa:	4825      	ldr	r0, [pc, #148]	; (8004a90 <ahrs_task+0x17c>)
 80049fc:	f003 f9d9 	bl	8007db2 <HAL_GPIO_TogglePin>
	   }
	   gps_tim_ms = millis();
 8004a00:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <ahrs_task+0x168>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <ahrs_task+0x16c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <ahrs_task+0x170>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <ahrs_task+0x174>)
 8004a16:	6013      	str	r3, [r2, #0]
	}

	if(ibusChannelData[CH6] < CHANNEL_HIGH ){
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <ahrs_task+0x180>)
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d808      	bhi.n	8004a36 <ahrs_task+0x122>
		vTaskSuspend(task1Handle);
 8004a24:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <ahrs_task+0x184>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f00e fd43 	bl	80134b4 <vTaskSuspend>
		black_box_reset = TRUE;
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <ahrs_task+0x188>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e004      	b.n	8004a40 <ahrs_task+0x12c>
	}
	else{
		vTaskResume(task1Handle);
 8004a36:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <ahrs_task+0x184>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00e fdfe 	bl	801363c <vTaskResume>
	}

	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	68f9      	ldr	r1, [r7, #12]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f00e fc82 	bl	8013350 <vTaskDelayUntil>
#ifdef STACK_DEBUG
	stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f00f fa35 	bl	8013ebc <uxTaskGetStackHighWaterMark>
 8004a52:	4603      	mov	r3, r0
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <ahrs_task+0x18c>)
 8004a58:	801a      	strh	r2, [r3, #0]
  {
 8004a5a:	e77d      	b.n	8004958 <ahrs_task+0x44>
 8004a5c:	20004914 	.word	0x20004914
 8004a60:	200049bc 	.word	0x200049bc
 8004a64:	20004a60 	.word	0x20004a60
 8004a68:	20004aa4 	.word	0x20004aa4
 8004a6c:	3c23d70a 	.word	0x3c23d70a
 8004a70:	20004670 	.word	0x20004670
 8004a74:	20004664 	.word	0x20004664
 8004a78:	20004678 	.word	0x20004678
 8004a7c:	200048cc 	.word	0x200048cc
 8004a80:	2000465c 	.word	0x2000465c
 8004a84:	10624dd3 	.word	0x10624dd3
 8004a88:	20000248 	.word	0x20000248
 8004a8c:	200044d0 	.word	0x200044d0
 8004a90:	40020000 	.word	0x40020000
 8004a94:	20004228 	.word	0x20004228
 8004a98:	2000466c 	.word	0x2000466c
 8004a9c:	20004676 	.word	0x20004676
 8004aa0:	20004692 	.word	0x20004692
 8004aa4:	00000000 	.word	0x00000000

08004aa8 <sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_task */
void sensor_task(void const * argument)
{
 8004aa8:	b5b0      	push	{r4, r5, r7, lr}
 8004aaa:	b08e      	sub	sp, #56	; 0x38
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
	int16_t gyso_offset[3] = {0,0,0};
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ab8:	2300      	movs	r3, #0
 8004aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t gyro_add[3] = {0,0,0};
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	compassInit();
 8004ad4:	f7fd fbce 	bl	8002274 <compassInit>
	mpu6050_init(&hi2c2);
 8004ad8:	4891      	ldr	r0, [pc, #580]	; (8004d20 <sensor_task+0x278>)
 8004ada:	f7fc ffaf 	bl	8001a3c <mpu6050_init>
	//i2cDectect(&hi2c2);
	HAL_Delay(2000);
 8004ade:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ae2:	f002 fa85 	bl	8006ff0 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8004ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004af0:	1c99      	adds	r1, r3, #2
 8004af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe f97c 	bl	8002df4 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 8004afc:	2302      	movs	r3, #2
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
	xLastWakeTime = xTaskGetTickCount();
 8004b00:	f00e fef4 	bl	80138ec <xTaskGetTickCount>
 8004b04:	4603      	mov	r3, r0
 8004b06:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8004b08:	f107 0320 	add.w	r3, r7, #32
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc ffe7 	bl	8001ae0 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004b1e:	1acb      	subs	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b30:	1acb      	subs	r3, r1, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004b42:	1acb      	subs	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8004b48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if(sample_count >= 5){
 8004b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d937      	bls.n	8004bca <sensor_task+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fd fbc4 	bl	80022ec <compass_get>
		   mag_raw[0] = mag.x;
 8004b64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b68:	4b6e      	ldr	r3, [pc, #440]	; (8004d24 <sensor_task+0x27c>)
 8004b6a:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 8004b6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b70:	4b6c      	ldr	r3, [pc, #432]	; (8004d24 <sensor_task+0x27c>)
 8004b72:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 8004b74:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b78:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <sensor_task+0x27c>)
 8004b7a:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	4a6a      	ldr	r2, [pc, #424]	; (8004d28 <sensor_task+0x280>)
 8004b80:	fb82 1203 	smull	r1, r2, r2, r3
 8004b84:	1052      	asrs	r2, r2, #1
 8004b86:	17db      	asrs	r3, r3, #31
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <sensor_task+0x284>)
 8004b8e:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	4a65      	ldr	r2, [pc, #404]	; (8004d28 <sensor_task+0x280>)
 8004b94:	fb82 1203 	smull	r1, r2, r2, r3
 8004b98:	1052      	asrs	r2, r2, #1
 8004b9a:	17db      	asrs	r3, r3, #31
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	4b62      	ldr	r3, [pc, #392]	; (8004d2c <sensor_task+0x284>)
 8004ba2:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4a60      	ldr	r2, [pc, #384]	; (8004d28 <sensor_task+0x280>)
 8004ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8004bac:	1052      	asrs	r2, r2, #1
 8004bae:	17db      	asrs	r3, r3, #31
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b21a      	sxth	r2, r3
 8004bb4:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <sensor_task+0x284>)
 8004bb6:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		raw.x = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	847b      	strh	r3, [r7, #34]	; 0x22
		raw.z = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	84bb      	strh	r3, [r7, #36]	; 0x24

		mpu6050_acc_get_raw(&raw);
 8004bd6:	f107 0320 	add.w	r3, r7, #32
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc ffbc 	bl	8001b58 <mpu6050_acc_get_raw>
		if(first_loop){
 8004be0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <sensor_task+0x15e>
			acc_imu[0] = raw.x;
 8004be8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004bec:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <sensor_task+0x288>)
 8004bee:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8004bf0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004bf4:	4b4e      	ldr	r3, [pc, #312]	; (8004d30 <sensor_task+0x288>)
 8004bf6:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8004bf8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004bfc:	4b4c      	ldr	r3, [pc, #304]	; (8004d30 <sensor_task+0x288>)
 8004bfe:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8004c06:	4b4a      	ldr	r3, [pc, #296]	; (8004d30 <sensor_task+0x288>)
 8004c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fc31 	bl	8000474 <__aeabi_i2d>
 8004c12:	4604      	mov	r4, r0
 8004c14:	460d      	mov	r5, r1
 8004c16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b44      	ldr	r3, [pc, #272]	; (8004d30 <sensor_task+0x288>)
 8004c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fb fc25 	bl	8000474 <__aeabi_i2d>
 8004c2a:	a33b      	add	r3, pc, #236	; (adr r3, 8004d18 <sensor_task+0x270>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fc8a 	bl	8000548 <__aeabi_dmul>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4620      	mov	r0, r4
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	f7fb face 	bl	80001dc <__adddf3>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	f7fb ff2e 	bl	8000aa8 <__aeabi_d2iz>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	b21a      	sxth	r2, r3
 8004c50:	4b37      	ldr	r3, [pc, #220]	; (8004d30 <sensor_task+0x288>)
 8004c52:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8004c54:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <sensor_task+0x288>)
 8004c56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fb fc0a 	bl	8000474 <__aeabi_i2d>
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <sensor_task+0x288>)
 8004c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fb fbfe 	bl	8000474 <__aeabi_i2d>
 8004c78:	a327      	add	r3, pc, #156	; (adr r3, 8004d18 <sensor_task+0x270>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fc63 	bl	8000548 <__aeabi_dmul>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4620      	mov	r0, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	f7fb faa7 	bl	80001dc <__adddf3>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	f7fb ff07 	bl	8000aa8 <__aeabi_d2iz>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	b21a      	sxth	r2, r3
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <sensor_task+0x288>)
 8004ca0:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <sensor_task+0x288>)
 8004ca4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fb fbe3 	bl	8000474 <__aeabi_i2d>
 8004cae:	4604      	mov	r4, r0
 8004cb0:	460d      	mov	r5, r1
 8004cb2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <sensor_task+0x288>)
 8004cba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fb fbd7 	bl	8000474 <__aeabi_i2d>
 8004cc6:	a314      	add	r3, pc, #80	; (adr r3, 8004d18 <sensor_task+0x270>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fc3c 	bl	8000548 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	f7fb fa80 	bl	80001dc <__adddf3>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7fb fee0 	bl	8000aa8 <__aeabi_d2iz>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	b21a      	sxth	r2, r3
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <sensor_task+0x288>)
 8004cee:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	4810      	ldr	r0, [pc, #64]	; (8004d34 <sensor_task+0x28c>)
 8004cf4:	f003 f85d 	bl	8007db2 <HAL_GPIO_TogglePin>
#ifdef STACK_DEBUG
		stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f00f f8df 	bl	8013ebc <uxTaskGetStackHighWaterMark>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <sensor_task+0x290>)
 8004d04:	801a      	strh	r2, [r3, #0]
#endif
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f00e fb1f 	bl	8013350 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 8004d12:	e6f9      	b.n	8004b08 <sensor_task+0x60>
 8004d14:	f3af 8000 	nop.w
 8004d18:	9999999a 	.word	0x9999999a
 8004d1c:	3fb99999 	.word	0x3fb99999
 8004d20:	200046ec 	.word	0x200046ec
 8004d24:	20004678 	.word	0x20004678
 8004d28:	66666667 	.word	0x66666667
 8004d2c:	20004670 	.word	0x20004670
 8004d30:	20004664 	.word	0x20004664
 8004d34:	40020400 	.word	0x40020400
 8004d38:	20004660 	.word	0x20004660

08004d3c <osd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_osd_task */
void osd_task(void const * argument)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN osd_task */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d48:	4807      	ldr	r0, [pc, #28]	; (8004d68 <osd_task+0x2c>)
 8004d4a:	f003 f832 	bl	8007db2 <HAL_GPIO_TogglePin>
	osDelay(1000);
 8004d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d52:	f00d f8a7 	bl	8011ea4 <osDelay>
#ifdef STACK_DEBUG
	stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8004d56:	2000      	movs	r0, #0
 8004d58:	f00f f8b0 	bl	8013ebc <uxTaskGetStackHighWaterMark>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <osd_task+0x30>)
 8004d62:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004d64:	e7ee      	b.n	8004d44 <osd_task+0x8>
 8004d66:	bf00      	nop
 8004d68:	40020800 	.word	0x40020800
 8004d6c:	20004690 	.word	0x20004690

08004d70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d76:	f107 0314 	add.w	r3, r7, #20
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	4a57      	ldr	r2, [pc, #348]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004d90:	f043 0304 	orr.w	r3, r3, #4
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
 8004d96:	4b55      	ldr	r3, [pc, #340]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4b51      	ldr	r3, [pc, #324]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	4a50      	ldr	r2, [pc, #320]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	6313      	str	r3, [r2, #48]	; 0x30
 8004db2:	4b4e      	ldr	r3, [pc, #312]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	4b4a      	ldr	r3, [pc, #296]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a49      	ldr	r2, [pc, #292]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dce:	4b47      	ldr	r3, [pc, #284]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	4b43      	ldr	r3, [pc, #268]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	4a42      	ldr	r2, [pc, #264]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004de4:	f043 0302 	orr.w	r3, r3, #2
 8004de8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dea:	4b40      	ldr	r3, [pc, #256]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	607b      	str	r3, [r7, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4a3b      	ldr	r2, [pc, #236]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004e00:	f043 0308 	orr.w	r3, r3, #8
 8004e04:	6313      	str	r3, [r2, #48]	; 0x30
 8004e06:	4b39      	ldr	r3, [pc, #228]	; (8004eec <MX_GPIO_Init+0x17c>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004e12:	2200      	movs	r2, #0
 8004e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e18:	4835      	ldr	r0, [pc, #212]	; (8004ef0 <MX_GPIO_Init+0x180>)
 8004e1a:	f002 ffb1 	bl	8007d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2132      	movs	r1, #50	; 0x32
 8004e22:	4834      	ldr	r0, [pc, #208]	; (8004ef4 <MX_GPIO_Init+0x184>)
 8004e24:	f002 ffac 	bl	8007d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	4832      	ldr	r0, [pc, #200]	; (8004ef8 <MX_GPIO_Init+0x188>)
 8004e2e:	f002 ffa7 	bl	8007d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2118      	movs	r1, #24
 8004e36:	4831      	ldr	r0, [pc, #196]	; (8004efc <MX_GPIO_Init+0x18c>)
 8004e38:	f002 ffa2 	bl	8007d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	4619      	mov	r1, r3
 8004e54:	4826      	ldr	r0, [pc, #152]	; (8004ef0 <MX_GPIO_Init+0x180>)
 8004e56:	f002 fddf 	bl	8007a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e62:	2302      	movs	r3, #2
 8004e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e66:	2300      	movs	r3, #0
 8004e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4820      	ldr	r0, [pc, #128]	; (8004ef4 <MX_GPIO_Init+0x184>)
 8004e72:	f002 fdd1 	bl	8007a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004e76:	2330      	movs	r3, #48	; 0x30
 8004e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e82:	2300      	movs	r3, #0
 8004e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4819      	ldr	r0, [pc, #100]	; (8004ef4 <MX_GPIO_Init+0x184>)
 8004e8e:	f002 fdc3 	bl	8007a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ea2:	f107 0314 	add.w	r3, r7, #20
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4813      	ldr	r0, [pc, #76]	; (8004ef8 <MX_GPIO_Init+0x188>)
 8004eaa:	f002 fdb5 	bl	8007a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004eae:	2318      	movs	r3, #24
 8004eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebe:	f107 0314 	add.w	r3, r7, #20
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	480d      	ldr	r0, [pc, #52]	; (8004efc <MX_GPIO_Init+0x18c>)
 8004ec6:	f002 fda7 	bl	8007a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed6:	f107 0314 	add.w	r3, r7, #20
 8004eda:	4619      	mov	r1, r3
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <MX_GPIO_Init+0x18c>)
 8004ede:	f002 fd9b 	bl	8007a18 <HAL_GPIO_Init>

}
 8004ee2:	bf00      	nop
 8004ee4:	3728      	adds	r7, #40	; 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020800 	.word	0x40020800
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40020c00 	.word	0x40020c00
 8004efc:	40020400 	.word	0x40020400

08004f00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f06:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <MX_I2C1_Init+0x54>)
 8004f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004f0a:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f0c:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <MX_I2C1_Init+0x58>)
 8004f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f3c:	4804      	ldr	r0, [pc, #16]	; (8004f50 <MX_I2C1_Init+0x50>)
 8004f3e:	f002 ff53 	bl	8007de8 <HAL_I2C_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004f48:	f000 f95c 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004f4c:	bf00      	nop
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20004698 	.word	0x20004698
 8004f54:	40005400 	.word	0x40005400
 8004f58:	00061a80 	.word	0x00061a80

08004f5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004f60:	4b12      	ldr	r3, [pc, #72]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <MX_I2C2_Init+0x54>)
 8004f64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f68:	4a12      	ldr	r2, [pc, #72]	; (8004fb4 <MX_I2C2_Init+0x58>)
 8004f6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004f72:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f8c:	4b07      	ldr	r3, [pc, #28]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004f98:	4804      	ldr	r0, [pc, #16]	; (8004fac <MX_I2C2_Init+0x50>)
 8004f9a:	f002 ff25 	bl	8007de8 <HAL_I2C_Init>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004fa4:	f000 f92e 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200046ec 	.word	0x200046ec
 8004fb0:	40005800 	.word	0x40005800
 8004fb4:	00061a80 	.word	0x00061a80

08004fb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	; 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc0:	f107 031c 	add.w	r3, r7, #28
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <HAL_I2C_MspInit+0xe8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d12c      	bne.n	8005034 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4a30      	ldr	r2, [pc, #192]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ff6:	23c0      	movs	r3, #192	; 0xc0
 8004ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ffa:	2312      	movs	r3, #18
 8004ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005002:	2303      	movs	r3, #3
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005006:	2304      	movs	r3, #4
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500a:	f107 031c 	add.w	r3, r7, #28
 800500e:	4619      	mov	r1, r3
 8005010:	4825      	ldr	r0, [pc, #148]	; (80050a8 <HAL_I2C_MspInit+0xf0>)
 8005012:	f002 fd01 	bl	8007a18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005024:	6413      	str	r3, [r2, #64]	; 0x40
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005032:	e031      	b.n	8005098 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <HAL_I2C_MspInit+0xf4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d12c      	bne.n	8005098 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	6313      	str	r3, [r2, #48]	; 0x30
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800505a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800505e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005060:	2312      	movs	r3, #18
 8005062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005064:	2300      	movs	r3, #0
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005068:	2303      	movs	r3, #3
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800506c:	2304      	movs	r3, #4
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005070:	f107 031c 	add.w	r3, r7, #28
 8005074:	4619      	mov	r1, r3
 8005076:	480c      	ldr	r0, [pc, #48]	; (80050a8 <HAL_I2C_MspInit+0xf0>)
 8005078:	f002 fcce 	bl	8007a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 8005086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800508a:	6413      	str	r3, [r2, #64]	; 0x40
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_I2C_MspInit+0xec>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	bf00      	nop
 800509a:	3730      	adds	r7, #48	; 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40005400 	.word	0x40005400
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40020400 	.word	0x40020400
 80050ac:	40005800 	.word	0x40005800

080050b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050b4:	f001 ff5a 	bl	8006f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050b8:	f000 f81c 	bl	80050f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050bc:	f7ff fe58 	bl	8004d70 <MX_GPIO_Init>
  MX_DMA_Init();
 80050c0:	f7ff f962 	bl	8004388 <MX_DMA_Init>
  MX_I2C1_Init();
 80050c4:	f7ff ff1c 	bl	8004f00 <MX_I2C1_Init>
  MX_I2C2_Init();
 80050c8:	f7ff ff48 	bl	8004f5c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80050cc:	f000 f8a0 	bl	8005210 <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 80050d0:	f000 fafa 	bl	80056c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80050d4:	f000 fb84 	bl	80057e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80050d8:	f000 fc68 	bl	80059ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80050dc:	f000 fc90 	bl	8005a00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80050e0:	f000 fcb8 	bl	8005a54 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80050e4:	f009 f98c 	bl	800e400 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80050e8:	f7ff f9be 	bl	8004468 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80050ec:	f00c fe90 	bl	8011e10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80050f0:	e7fe      	b.n	80050f0 <main+0x40>
	...

080050f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b094      	sub	sp, #80	; 0x50
 80050f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050fa:	f107 0320 	add.w	r3, r7, #32
 80050fe:	2230      	movs	r2, #48	; 0x30
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f00f fdcc 	bl	8014ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <SystemClock_Config+0xcc>)
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <SystemClock_Config+0xcc>)
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005126:	6413      	str	r3, [r2, #64]	; 0x40
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <SystemClock_Config+0xcc>)
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005134:	2300      	movs	r3, #0
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <SystemClock_Config+0xd0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <SystemClock_Config+0xd0>)
 800513e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <SystemClock_Config+0xd0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005150:	2302      	movs	r3, #2
 8005152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005154:	2301      	movs	r3, #1
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005158:	2310      	movs	r3, #16
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800515c:	2302      	movs	r3, #2
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005164:	2308      	movs	r3, #8
 8005166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005168:	23a8      	movs	r3, #168	; 0xa8
 800516a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800516c:	2302      	movs	r3, #2
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005170:	2307      	movs	r3, #7
 8005172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005174:	f107 0320 	add.w	r3, r7, #32
 8005178:	4618      	mov	r0, r3
 800517a:	f004 fb97 	bl	80098ac <HAL_RCC_OscConfig>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005184:	f000 f83e 	bl	8005204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005188:	230f      	movs	r3, #15
 800518a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800518c:	2302      	movs	r3, #2
 800518e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005194:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800519a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800519e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80051a0:	f107 030c 	add.w	r3, r7, #12
 80051a4:	2105      	movs	r1, #5
 80051a6:	4618      	mov	r0, r3
 80051a8:	f004 fdf8 	bl	8009d9c <HAL_RCC_ClockConfig>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80051b2:	f000 f827 	bl	8005204 <Error_Handler>
  }
}
 80051b6:	bf00      	nop
 80051b8:	3750      	adds	r7, #80	; 0x50
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40007000 	.word	0x40007000

080051c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d8:	d101      	bne.n	80051de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80051da:	f001 fee9 	bl	8006fb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim == &htim4)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a06      	ldr	r2, [pc, #24]	; (80051fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		TIMER_CALLBACK();
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80051ee:	33ff      	adds	r3, #255	; 0xff
 80051f0:	4a03      	ldr	r2, [pc, #12]	; (8005200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80051f2:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200048cc 	.word	0x200048cc
 8005200:	2000465c 	.word	0x2000465c

08005204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005208:	b672      	cpsid	i
}
 800520a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800520c:	e7fe      	b.n	800520c <Error_Handler+0x8>
	...

08005210 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <MX_SDIO_SD_Init+0x44>)
 8005218:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 800521c:	2200      	movs	r2, #0
 800521e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 8005222:	2200      	movs	r2, #0
 8005224:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 8005228:	2200      	movs	r2, #0
 800522a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 8005234:	2200      	movs	r2, #0
 8005236:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 800523a:	220a      	movs	r2, #10
 800523c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 4;
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <MX_SDIO_SD_Init+0x40>)
 8005240:	2204      	movs	r2, #4
 8005242:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20004800 	.word	0x20004800
 8005254:	40012c00 	.word	0x40012c00

08005258 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a68      	ldr	r2, [pc, #416]	; (8005418 <HAL_SD_MspInit+0x1c0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	f040 80c9 	bne.w	800540e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	4b66      	ldr	r3, [pc, #408]	; (800541c <HAL_SD_MspInit+0x1c4>)
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	4a65      	ldr	r2, [pc, #404]	; (800541c <HAL_SD_MspInit+0x1c4>)
 8005286:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800528a:	6453      	str	r3, [r2, #68]	; 0x44
 800528c:	4b63      	ldr	r3, [pc, #396]	; (800541c <HAL_SD_MspInit+0x1c4>)
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	4b5f      	ldr	r3, [pc, #380]	; (800541c <HAL_SD_MspInit+0x1c4>)
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	4a5e      	ldr	r2, [pc, #376]	; (800541c <HAL_SD_MspInit+0x1c4>)
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	6313      	str	r3, [r2, #48]	; 0x30
 80052a8:	4b5c      	ldr	r3, [pc, #368]	; (800541c <HAL_SD_MspInit+0x1c4>)
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052b4:	2300      	movs	r3, #0
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	4b58      	ldr	r3, [pc, #352]	; (800541c <HAL_SD_MspInit+0x1c4>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	4a57      	ldr	r2, [pc, #348]	; (800541c <HAL_SD_MspInit+0x1c4>)
 80052be:	f043 0308 	orr.w	r3, r3, #8
 80052c2:	6313      	str	r3, [r2, #48]	; 0x30
 80052c4:	4b55      	ldr	r3, [pc, #340]	; (800541c <HAL_SD_MspInit+0x1c4>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80052d0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80052d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d6:	2302      	movs	r3, #2
 80052d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052de:	2303      	movs	r3, #3
 80052e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052e2:	230c      	movs	r3, #12
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	4619      	mov	r1, r3
 80052ec:	484c      	ldr	r0, [pc, #304]	; (8005420 <HAL_SD_MspInit+0x1c8>)
 80052ee:	f002 fb93 	bl	8007a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052f2:	2304      	movs	r3, #4
 80052f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fe:	2303      	movs	r3, #3
 8005300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005302:	230c      	movs	r3, #12
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	4619      	mov	r1, r3
 800530c:	4845      	ldr	r0, [pc, #276]	; (8005424 <HAL_SD_MspInit+0x1cc>)
 800530e:	f002 fb83 	bl	8007a18 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005312:	4b45      	ldr	r3, [pc, #276]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005314:	4a45      	ldr	r2, [pc, #276]	; (800542c <HAL_SD_MspInit+0x1d4>)
 8005316:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005318:	4b43      	ldr	r3, [pc, #268]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 800531a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800531e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005320:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005326:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005328:	2200      	movs	r2, #0
 800532a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800532c:	4b3e      	ldr	r3, [pc, #248]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 800532e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005332:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005334:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800533a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800533c:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 800533e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005342:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005344:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005346:	2220      	movs	r2, #32
 8005348:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800534a:	4b37      	ldr	r3, [pc, #220]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 800534c:	2200      	movs	r2, #0
 800534e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005352:	2204      	movs	r2, #4
 8005354:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005358:	2203      	movs	r2, #3
 800535a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800535c:	4b32      	ldr	r3, [pc, #200]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 800535e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005364:	4b30      	ldr	r3, [pc, #192]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005366:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800536c:	482e      	ldr	r0, [pc, #184]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 800536e:	f001 ff45 	bl	80071fc <HAL_DMA_Init>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8005378:	f7ff ff44 	bl	8005204 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
 8005382:	4a29      	ldr	r2, [pc, #164]	; (8005428 <HAL_SD_MspInit+0x1d0>)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005388:	4b29      	ldr	r3, [pc, #164]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_SD_MspInit+0x1dc>)
 800538c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 8005390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005394:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005396:	4b26      	ldr	r3, [pc, #152]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 8005398:	2240      	movs	r2, #64	; 0x40
 800539a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800539c:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 800539e:	2200      	movs	r2, #0
 80053a0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053a2:	4b23      	ldr	r3, [pc, #140]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053aa:	4b21      	ldr	r3, [pc, #132]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053b0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053b8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80053ba:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053bc:	2220      	movs	r2, #32
 80053be:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053c8:	2204      	movs	r2, #4
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80053cc:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053ce:	2203      	movs	r2, #3
 80053d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80053e2:	4813      	ldr	r0, [pc, #76]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053e4:	f001 ff0a 	bl	80071fc <HAL_DMA_Init>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80053ee:	f7ff ff09 	bl	8005204 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80053f8:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <HAL_SD_MspInit+0x1d8>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 11, 0);
 80053fe:	2200      	movs	r2, #0
 8005400:	210b      	movs	r1, #11
 8005402:	2031      	movs	r0, #49	; 0x31
 8005404:	f001 fed0 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005408:	2031      	movs	r0, #49	; 0x31
 800540a:	f001 fee9 	bl	80071e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800540e:	bf00      	nop
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40023800 	.word	0x40023800
 8005420:	40020800 	.word	0x40020800
 8005424:	40020c00 	.word	0x40020c00
 8005428:	20004740 	.word	0x20004740
 800542c:	40026458 	.word	0x40026458
 8005430:	200047a0 	.word	0x200047a0
 8005434:	400264a0 	.word	0x400264a0

08005438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_MspInit+0x54>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	4a11      	ldr	r2, [pc, #68]	; (800548c <HAL_MspInit+0x54>)
 8005448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800544c:	6453      	str	r3, [r2, #68]	; 0x44
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <HAL_MspInit+0x54>)
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_MspInit+0x54>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <HAL_MspInit+0x54>)
 8005464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005468:	6413      	str	r3, [r2, #64]	; 0x40
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_MspInit+0x54>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005476:	2200      	movs	r2, #0
 8005478:	210f      	movs	r1, #15
 800547a:	f06f 0001 	mvn.w	r0, #1
 800547e:	f001 fe93 	bl	80071a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800

08005490 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	; 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80054a0:	2200      	movs	r2, #0
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	201c      	movs	r0, #28
 80054a6:	f001 fe7f 	bl	80071a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054aa:	201c      	movs	r0, #28
 80054ac:	f001 fe98 	bl	80071e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_InitTick+0xa8>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <HAL_InitTick+0xa8>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	6413      	str	r3, [r2, #64]	; 0x40
 80054c0:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <HAL_InitTick+0xa8>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054cc:	f107 0210 	add.w	r2, r7, #16
 80054d0:	f107 0314 	add.w	r3, r7, #20
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f004 fe30 	bl	800a13c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80054dc:	f004 fe06 	bl	800a0ec <HAL_RCC_GetPCLK1Freq>
 80054e0:	4603      	mov	r3, r0
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	4a14      	ldr	r2, [pc, #80]	; (800553c <HAL_InitTick+0xac>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	0c9b      	lsrs	r3, r3, #18
 80054f0:	3b01      	subs	r3, #1
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <HAL_InitTick+0xb0>)
 80054f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80054fc:	4b10      	ldr	r3, [pc, #64]	; (8005540 <HAL_InitTick+0xb0>)
 80054fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005502:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005504:	4a0e      	ldr	r2, [pc, #56]	; (8005540 <HAL_InitTick+0xb0>)
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <HAL_InitTick+0xb0>)
 800550c:	2200      	movs	r2, #0
 800550e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_InitTick+0xb0>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8005516:	480a      	ldr	r0, [pc, #40]	; (8005540 <HAL_InitTick+0xb0>)
 8005518:	f005 ff6e 	bl	800b3f8 <HAL_TIM_Base_Init>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8005522:	4807      	ldr	r0, [pc, #28]	; (8005540 <HAL_InitTick+0xb0>)
 8005524:	f005 ffb8 	bl	800b498 <HAL_TIM_Base_Start_IT>
 8005528:	4603      	mov	r3, r0
 800552a:	e000      	b.n	800552e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
}
 800552e:	4618      	mov	r0, r3
 8005530:	3730      	adds	r7, #48	; 0x30
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	431bde83 	.word	0x431bde83
 8005540:	20004884 	.word	0x20004884

08005544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005548:	e7fe      	b.n	8005548 <NMI_Handler+0x4>

0800554a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800554e:	e7fe      	b.n	800554e <HardFault_Handler+0x4>

08005550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005554:	e7fe      	b.n	8005554 <MemManage_Handler+0x4>

08005556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005556:	b480      	push	{r7}
 8005558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800555a:	e7fe      	b.n	800555a <BusFault_Handler+0x4>

0800555c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005560:	e7fe      	b.n	8005560 <UsageFault_Handler+0x4>

08005562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005562:	b480      	push	{r7}
 8005564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005574:	4802      	ldr	r0, [pc, #8]	; (8005580 <DMA1_Stream1_IRQHandler+0x10>)
 8005576:	f001 ffd9 	bl	800752c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	2000495c 	.word	0x2000495c

08005584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005588:	4802      	ldr	r0, [pc, #8]	; (8005594 <TIM2_IRQHandler+0x10>)
 800558a:	f006 f917 	bl	800b7bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20004884 	.word	0x20004884

08005598 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <TIM4_IRQHandler+0x10>)
 800559e:	f006 f90d 	bl	800b7bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200048cc 	.word	0x200048cc

080055ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <USART1_IRQHandler+0x10>)
 80055b2:	f007 f91b 	bl	800c7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20004a60 	.word	0x20004a60

080055c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <USART2_IRQHandler+0x10>)
 80055c6:	f007 f911 	bl	800c7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20004aa4 	.word	0x20004aa4

080055d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <USART3_IRQHandler+0x10>)
 80055da:	f007 f907 	bl	800c7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200049bc 	.word	0x200049bc

080055e8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80055ec:	4802      	ldr	r0, [pc, #8]	; (80055f8 <SDIO_IRQHandler+0x10>)
 80055ee:	f005 f84d 	bl	800a68c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20004800 	.word	0x20004800

080055fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005600:	4802      	ldr	r0, [pc, #8]	; (800560c <DMA2_Stream3_IRQHandler+0x10>)
 8005602:	f001 ff93 	bl	800752c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20004740 	.word	0x20004740

08005610 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <DMA2_Stream6_IRQHandler+0x10>)
 8005616:	f001 ff89 	bl	800752c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200047a0 	.word	0x200047a0

08005624 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <DMA2_Stream7_IRQHandler+0x10>)
 800562a:	f001 ff7f 	bl	800752c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20004a00 	.word	0x20004a00

08005638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <_sbrk+0x5c>)
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <_sbrk+0x60>)
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800564c:	4b13      	ldr	r3, [pc, #76]	; (800569c <_sbrk+0x64>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <_sbrk+0x64>)
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <_sbrk+0x68>)
 8005658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <_sbrk+0x64>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	429a      	cmp	r2, r3
 8005666:	d207      	bcs.n	8005678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005668:	f00f fae0 	bl	8014c2c <__errno>
 800566c:	4603      	mov	r3, r0
 800566e:	220c      	movs	r2, #12
 8005670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	e009      	b.n	800568c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005678:	4b08      	ldr	r3, [pc, #32]	; (800569c <_sbrk+0x64>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800567e:	4b07      	ldr	r3, [pc, #28]	; (800569c <_sbrk+0x64>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	4a05      	ldr	r2, [pc, #20]	; (800569c <_sbrk+0x64>)
 8005688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20020000 	.word	0x20020000
 8005698:	00002000 	.word	0x00002000
 800569c:	2000024c 	.word	0x2000024c
 80056a0:	200050b8 	.word	0x200050b8

080056a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <SystemInit+0x20>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <SystemInit+0x20>)
 80056b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	609a      	str	r2, [r3, #8]
 80056da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056dc:	f107 0320 	add.w	r3, r7, #32
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	611a      	str	r2, [r3, #16]
 80056f4:	615a      	str	r2, [r3, #20]
 80056f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80056f8:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <MX_TIM3_Init+0x110>)
 80056fa:	4a38      	ldr	r2, [pc, #224]	; (80057dc <MX_TIM3_Init+0x114>)
 80056fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80056fe:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <MX_TIM3_Init+0x110>)
 8005700:	2247      	movs	r2, #71	; 0x47
 8005702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005704:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <MX_TIM3_Init+0x110>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800570a:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <MX_TIM3_Init+0x110>)
 800570c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005710:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005712:	4b31      	ldr	r3, [pc, #196]	; (80057d8 <MX_TIM3_Init+0x110>)
 8005714:	2200      	movs	r2, #0
 8005716:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005718:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <MX_TIM3_Init+0x110>)
 800571a:	2200      	movs	r2, #0
 800571c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800571e:	482e      	ldr	r0, [pc, #184]	; (80057d8 <MX_TIM3_Init+0x110>)
 8005720:	f005 fe6a 	bl	800b3f8 <HAL_TIM_Base_Init>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800572a:	f7ff fd6b 	bl	8005204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800572e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005738:	4619      	mov	r1, r3
 800573a:	4827      	ldr	r0, [pc, #156]	; (80057d8 <MX_TIM3_Init+0x110>)
 800573c:	f006 fa08 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005746:	f7ff fd5d 	bl	8005204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800574a:	4823      	ldr	r0, [pc, #140]	; (80057d8 <MX_TIM3_Init+0x110>)
 800574c:	f005 ff14 	bl	800b578 <HAL_TIM_PWM_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005756:	f7ff fd55 	bl	8005204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005762:	f107 0320 	add.w	r3, r7, #32
 8005766:	4619      	mov	r1, r3
 8005768:	481b      	ldr	r0, [pc, #108]	; (80057d8 <MX_TIM3_Init+0x110>)
 800576a:	f006 fdf1 	bl	800c350 <HAL_TIMEx_MasterConfigSynchronization>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005774:	f7ff fd46 	bl	8005204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005778:	2360      	movs	r3, #96	; 0x60
 800577a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	2200      	movs	r2, #0
 800578c:	4619      	mov	r1, r3
 800578e:	4812      	ldr	r0, [pc, #72]	; (80057d8 <MX_TIM3_Init+0x110>)
 8005790:	f006 f91c 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800579a:	f7ff fd33 	bl	8005204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	2204      	movs	r2, #4
 80057a2:	4619      	mov	r1, r3
 80057a4:	480c      	ldr	r0, [pc, #48]	; (80057d8 <MX_TIM3_Init+0x110>)
 80057a6:	f006 f911 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80057b0:	f7ff fd28 	bl	8005204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	2208      	movs	r2, #8
 80057b8:	4619      	mov	r1, r3
 80057ba:	4807      	ldr	r0, [pc, #28]	; (80057d8 <MX_TIM3_Init+0x110>)
 80057bc:	f006 f906 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80057c6:	f7ff fd1d 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80057ca:	4803      	ldr	r0, [pc, #12]	; (80057d8 <MX_TIM3_Init+0x110>)
 80057cc:	f000 f894 	bl	80058f8 <HAL_TIM_MspPostInit>

}
 80057d0:	bf00      	nop
 80057d2:	3738      	adds	r7, #56	; 0x38
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20004914 	.word	0x20004914
 80057dc:	40000400 	.word	0x40000400

080057e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	605a      	str	r2, [r3, #4]
 80057f0:	609a      	str	r2, [r3, #8]
 80057f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057f4:	463b      	mov	r3, r7
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <MX_TIM4_Init+0x94>)
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <MX_TIM4_Init+0x98>)
 8005800:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <MX_TIM4_Init+0x94>)
 8005804:	2247      	movs	r2, #71	; 0x47
 8005806:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005808:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <MX_TIM4_Init+0x94>)
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800580e:	4b19      	ldr	r3, [pc, #100]	; (8005874 <MX_TIM4_Init+0x94>)
 8005810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005814:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <MX_TIM4_Init+0x94>)
 8005818:	2200      	movs	r2, #0
 800581a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800581c:	4b15      	ldr	r3, [pc, #84]	; (8005874 <MX_TIM4_Init+0x94>)
 800581e:	2280      	movs	r2, #128	; 0x80
 8005820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005822:	4814      	ldr	r0, [pc, #80]	; (8005874 <MX_TIM4_Init+0x94>)
 8005824:	f005 fde8 	bl	800b3f8 <HAL_TIM_Base_Init>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800582e:	f7ff fce9 	bl	8005204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005836:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	4619      	mov	r1, r3
 800583e:	480d      	ldr	r0, [pc, #52]	; (8005874 <MX_TIM4_Init+0x94>)
 8005840:	f006 f986 	bl	800bb50 <HAL_TIM_ConfigClockSource>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800584a:	f7ff fcdb 	bl	8005204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005856:	463b      	mov	r3, r7
 8005858:	4619      	mov	r1, r3
 800585a:	4806      	ldr	r0, [pc, #24]	; (8005874 <MX_TIM4_Init+0x94>)
 800585c:	f006 fd78 	bl	800c350 <HAL_TIMEx_MasterConfigSynchronization>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005866:	f7ff fccd 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200048cc 	.word	0x200048cc
 8005878:	40000800 	.word	0x40000800

0800587c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIM_Base_MspInit+0x70>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <HAL_TIM_Base_MspInit+0x74>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <HAL_TIM_Base_MspInit+0x74>)
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
 800589e:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <HAL_TIM_Base_MspInit+0x74>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80058aa:	e01a      	b.n	80058e2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <HAL_TIM_Base_MspInit+0x78>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d115      	bne.n	80058e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <HAL_TIM_Base_MspInit+0x74>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <HAL_TIM_Base_MspInit+0x74>)
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_TIM_Base_MspInit+0x74>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	60bb      	str	r3, [r7, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80058d2:	2200      	movs	r2, #0
 80058d4:	2105      	movs	r1, #5
 80058d6:	201e      	movs	r0, #30
 80058d8:	f001 fc66 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80058dc:	201e      	movs	r0, #30
 80058de:	f001 fc7f 	bl	80071e0 <HAL_NVIC_EnableIRQ>
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40000800 	.word	0x40000800

080058f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_TIM_MspPostInit+0xa4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d13b      	bne.n	8005992 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	4b20      	ldr	r3, [pc, #128]	; (80059a0 <HAL_TIM_MspPostInit+0xa8>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <HAL_TIM_MspPostInit+0xa8>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6313      	str	r3, [r2, #48]	; 0x30
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <HAL_TIM_MspPostInit+0xa8>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_TIM_MspPostInit+0xa8>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <HAL_TIM_MspPostInit+0xa8>)
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	6313      	str	r3, [r2, #48]	; 0x30
 8005946:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <HAL_TIM_MspPostInit+0xa8>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005952:	23c0      	movs	r3, #192	; 0xc0
 8005954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005956:	2302      	movs	r3, #2
 8005958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595e:	2300      	movs	r3, #0
 8005960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005962:	2302      	movs	r3, #2
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005966:	f107 0314 	add.w	r3, r7, #20
 800596a:	4619      	mov	r1, r3
 800596c:	480d      	ldr	r0, [pc, #52]	; (80059a4 <HAL_TIM_MspPostInit+0xac>)
 800596e:	f002 f853 	bl	8007a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005972:	2301      	movs	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005976:	2302      	movs	r3, #2
 8005978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800597e:	2300      	movs	r3, #0
 8005980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005982:	2302      	movs	r3, #2
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005986:	f107 0314 	add.w	r3, r7, #20
 800598a:	4619      	mov	r1, r3
 800598c:	4806      	ldr	r0, [pc, #24]	; (80059a8 <HAL_TIM_MspPostInit+0xb0>)
 800598e:	f002 f843 	bl	8007a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005992:	bf00      	nop
 8005994:	3728      	adds	r7, #40	; 0x28
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40000400 	.word	0x40000400
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40020000 	.word	0x40020000
 80059a8:	40020400 	.word	0x40020400

080059ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <MX_USART1_UART_Init+0x50>)
 80059b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80059b6:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059d2:	220c      	movs	r2, #12
 80059d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059d8:	2200      	movs	r2, #0
 80059da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059de:	2200      	movs	r2, #0
 80059e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059e2:	4805      	ldr	r0, [pc, #20]	; (80059f8 <MX_USART1_UART_Init+0x4c>)
 80059e4:	f006 fd44 	bl	800c470 <HAL_UART_Init>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80059ee:	f7ff fc09 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20004a60 	.word	0x20004a60
 80059fc:	40011000 	.word	0x40011000

08005a00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a04:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a06:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <MX_USART2_UART_Init+0x50>)
 8005a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a0a:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a12:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a24:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a26:	220c      	movs	r2, #12
 8005a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a36:	4805      	ldr	r0, [pc, #20]	; (8005a4c <MX_USART2_UART_Init+0x4c>)
 8005a38:	f006 fd1a 	bl	800c470 <HAL_UART_Init>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005a42:	f7ff fbdf 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20004aa4 	.word	0x20004aa4
 8005a50:	40004400 	.word	0x40004400

08005a54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a58:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a5a:	4a12      	ldr	r2, [pc, #72]	; (8005aa4 <MX_USART3_UART_Init+0x50>)
 8005a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a5e:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a7a:	220c      	movs	r2, #12
 8005a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <MX_USART3_UART_Init+0x4c>)
 8005a8c:	f006 fcf0 	bl	800c470 <HAL_UART_Init>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005a96:	f7ff fbb5 	bl	8005204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a9a:	bf00      	nop
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200049bc 	.word	0x200049bc
 8005aa4:	40004800 	.word	0x40004800

08005aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a86      	ldr	r2, [pc, #536]	; (8005ce0 <HAL_UART_MspInit+0x238>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d163      	bne.n	8005b92 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005aca:	2300      	movs	r3, #0
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	4a84      	ldr	r2, [pc, #528]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8005ada:	4b82      	ldr	r3, [pc, #520]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	4b7e      	ldr	r3, [pc, #504]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	4a7d      	ldr	r2, [pc, #500]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6313      	str	r3, [r2, #48]	; 0x30
 8005af6:	4b7b      	ldr	r3, [pc, #492]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005b02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b10:	2303      	movs	r3, #3
 8005b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b14:	2307      	movs	r3, #7
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4872      	ldr	r0, [pc, #456]	; (8005ce8 <HAL_UART_MspInit+0x240>)
 8005b20:	f001 ff7a 	bl	8007a18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005b24:	4b71      	ldr	r3, [pc, #452]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b26:	4a72      	ldr	r2, [pc, #456]	; (8005cf0 <HAL_UART_MspInit+0x248>)
 8005b28:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005b2a:	4b70      	ldr	r3, [pc, #448]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b30:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b32:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b38:	4b6c      	ldr	r3, [pc, #432]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b3e:	4b6b      	ldr	r3, [pc, #428]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b44:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b46:	4b69      	ldr	r3, [pc, #420]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b4c:	4b67      	ldr	r3, [pc, #412]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005b52:	4b66      	ldr	r3, [pc, #408]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b58:	4b64      	ldr	r3, [pc, #400]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b5e:	4b63      	ldr	r3, [pc, #396]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005b64:	4861      	ldr	r0, [pc, #388]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b66:	f001 fb49 	bl	80071fc <HAL_DMA_Init>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005b70:	f7ff fb48 	bl	8005204 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a5d      	ldr	r2, [pc, #372]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34
 8005b7a:	4a5c      	ldr	r2, [pc, #368]	; (8005cec <HAL_UART_MspInit+0x244>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b80:	2200      	movs	r2, #0
 8005b82:	2105      	movs	r1, #5
 8005b84:	2025      	movs	r0, #37	; 0x25
 8005b86:	f001 fb0f 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b8a:	2025      	movs	r0, #37	; 0x25
 8005b8c:	f001 fb28 	bl	80071e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005b90:	e0a1      	b.n	8005cd6 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a57      	ldr	r2, [pc, #348]	; (8005cf4 <HAL_UART_MspInit+0x24c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d134      	bne.n	8005c06 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	4b50      	ldr	r3, [pc, #320]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	4a4f      	ldr	r2, [pc, #316]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005baa:	6413      	str	r3, [r2, #64]	; 0x40
 8005bac:	4b4d      	ldr	r3, [pc, #308]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	4a48      	ldr	r2, [pc, #288]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc8:	4b46      	ldr	r3, [pc, #280]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be0:	2303      	movs	r3, #3
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005be4:	2307      	movs	r3, #7
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bec:	4619      	mov	r1, r3
 8005bee:	483e      	ldr	r0, [pc, #248]	; (8005ce8 <HAL_UART_MspInit+0x240>)
 8005bf0:	f001 ff12 	bl	8007a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	210a      	movs	r1, #10
 8005bf8:	2026      	movs	r0, #38	; 0x26
 8005bfa:	f001 fad5 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005bfe:	2026      	movs	r0, #38	; 0x26
 8005c00:	f001 faee 	bl	80071e0 <HAL_NVIC_EnableIRQ>
}
 8005c04:	e067      	b.n	8005cd6 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3b      	ldr	r2, [pc, #236]	; (8005cf8 <HAL_UART_MspInit+0x250>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d162      	bne.n	8005cd6 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	4b33      	ldr	r3, [pc, #204]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	4a32      	ldr	r2, [pc, #200]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c20:	4b30      	ldr	r3, [pc, #192]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	4a2b      	ldr	r2, [pc, #172]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005c36:	f043 0308 	orr.w	r3, r3, #8
 8005c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c3c:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <HAL_UART_MspInit+0x23c>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c56:	2303      	movs	r3, #3
 8005c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c5a:	2307      	movs	r3, #7
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c62:	4619      	mov	r1, r3
 8005c64:	4825      	ldr	r0, [pc, #148]	; (8005cfc <HAL_UART_MspInit+0x254>)
 8005c66:	f001 fed7 	bl	8007a18 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005c6a:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <HAL_UART_MspInit+0x25c>)
 8005c6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005c70:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c76:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c7e:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c84:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c8c:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c92:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005c9e:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ca4:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005caa:	4815      	ldr	r0, [pc, #84]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005cac:	f001 faa6 	bl	80071fc <HAL_DMA_Init>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_UART_MspInit+0x212>
      Error_Handler();
 8005cb6:	f7ff faa5 	bl	8005204 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8005cc0:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <HAL_UART_MspInit+0x258>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	210a      	movs	r1, #10
 8005cca:	2027      	movs	r0, #39	; 0x27
 8005ccc:	f001 fa6c 	bl	80071a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005cd0:	2027      	movs	r0, #39	; 0x27
 8005cd2:	f001 fa85 	bl	80071e0 <HAL_NVIC_EnableIRQ>
}
 8005cd6:	bf00      	nop
 8005cd8:	3738      	adds	r7, #56	; 0x38
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40011000 	.word	0x40011000
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40020000 	.word	0x40020000
 8005cec:	20004a00 	.word	0x20004a00
 8005cf0:	400264b8 	.word	0x400264b8
 8005cf4:	40004400 	.word	0x40004400
 8005cf8:	40004800 	.word	0x40004800
 8005cfc:	40020c00 	.word	0x40020c00
 8005d00:	2000495c 	.word	0x2000495c
 8005d04:	40026028 	.word	0x40026028

08005d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d0c:	480d      	ldr	r0, [pc, #52]	; (8005d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d0e:	490e      	ldr	r1, [pc, #56]	; (8005d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d10:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d14:	e002      	b.n	8005d1c <LoopCopyDataInit>

08005d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d1a:	3304      	adds	r3, #4

08005d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d20:	d3f9      	bcc.n	8005d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d22:	4a0b      	ldr	r2, [pc, #44]	; (8005d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d24:	4c0b      	ldr	r4, [pc, #44]	; (8005d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d28:	e001      	b.n	8005d2e <LoopFillZerobss>

08005d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d2c:	3204      	adds	r2, #4

08005d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d30:	d3fb      	bcc.n	8005d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d32:	f7ff fcb7 	bl	80056a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d36:	f00e ff7f 	bl	8014c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d3a:	f7ff f9b9 	bl	80050b0 <main>
  bx  lr    
 8005d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d48:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8005d4c:	080160d0 	.word	0x080160d0
  ldr r2, =_sbss
 8005d50:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8005d54:	200050b4 	.word	0x200050b4

08005d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d58:	e7fe      	b.n	8005d58 <ADC_IRQHandler>
	...

08005d5c <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	791b      	ldrb	r3, [r3, #4]
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d820      	bhi.n	8005dae <AT24Cxx_get_max_addr+0x52>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <AT24Cxx_get_max_addr+0x18>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005d97 	.word	0x08005d97
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	08005da3 	.word	0x08005da3
 8005d88:	08005da9 	.word	0x08005da9
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8005d8c:	237f      	movs	r3, #127	; 0x7f
 8005d8e:	e00f      	b.n	8005db0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8005d90:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005d94:	e00c      	b.n	8005db0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8005d96:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005d9a:	e009      	b.n	8005db0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8005d9c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8005da0:	e006      	b.n	8005db0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8005da2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005da6:	e003      	b.n	8005db0 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8005da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dac:	e000      	b.n	8005db0 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8005dae:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	791b      	ldrb	r3, [r3, #4]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d81b      	bhi.n	8005e04 <AT24Cxx_get_pg_size+0x48>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <AT24Cxx_get_pg_size+0x18>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005ded 	.word	0x08005ded
 8005dd8:	08005df1 	.word	0x08005df1
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005df9 	.word	0x08005df9
 8005de4:	08005dfd 	.word	0x08005dfd
 8005de8:	08005e01 	.word	0x08005e01
	case AT24C01:
		return AT24C01_PG_SIZE;
 8005dec:	2308      	movs	r3, #8
 8005dee:	e00a      	b.n	8005e06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8005df0:	2320      	movs	r3, #32
 8005df2:	e008      	b.n	8005e06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8005df4:	2320      	movs	r3, #32
 8005df6:	e006      	b.n	8005e06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	e004      	b.n	8005e06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	e002      	b.n	8005e06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	e000      	b.n	8005e06 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8005e04:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop

08005e14 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8005e22:	2114      	movs	r1, #20
 8005e24:	2001      	movs	r0, #1
 8005e26:	f00e fef9 	bl	8014c1c <calloc>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <AT24Cxx_init+0x26>
		return at_init_err;
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295
 8005e38:	e028      	b.n	8005e8c <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	75fb      	strb	r3, [r7, #23]
 8005e3e:	e007      	b.n	8005e50 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8005e40:	7dfa      	ldrb	r2, [r7, #23]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2100      	movs	r1, #0
 8005e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b07      	cmp	r3, #7
 8005e54:	d9f4      	bls.n	8005e40 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8005e56:	7afb      	ldrb	r3, [r7, #11]
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2200      	movs	r2, #0
 8005e62:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2200      	movs	r2, #0
 8005e68:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	601a      	str	r2, [r3, #0]

	return at_ok;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <AT24Cxx_add_dev+0x22>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d902      	bls.n	8005ebc <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8005eb6:	f06f 0301 	mvn.w	r3, #1
 8005eba:	e03e      	b.n	8005f3a <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8005ebc:	2114      	movs	r1, #20
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	f00e feac 	bl	8014c1c <calloc>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 8005ece:	f06f 0301 	mvn.w	r3, #1
 8005ed2:	e032      	b.n	8005f3a <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2201      	movs	r2, #1
 8005f04:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f1c:	1e5a      	subs	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6979      	ldr	r1, [r7, #20]
 8005f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f2c:	1e9a      	subs	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	60da      	str	r2, [r3, #12]
	return at_ok;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8005f42:	b5b0      	push	{r4, r5, r7, lr}
 8005f44:	b08a      	sub	sp, #40	; 0x28
 8005f46:	af04      	add	r7, sp, #16
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	461a      	mov	r2, r3
 8005f50:	460b      	mov	r3, r1
 8005f52:	80fb      	strh	r3, [r7, #6]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7ff ff2f 	bl	8005dbc <AT24Cxx_get_pg_size>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	7dba      	ldrb	r2, [r7, #22]
 8005f66:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f6a:	fb02 f201 	mul.w	r2, r2, r1
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	7dba      	ldrb	r2, [r7, #22]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8005f78:	88ba      	ldrh	r2, [r7, #4]
 8005f7a:	7d7b      	ldrb	r3, [r7, #21]
 8005f7c:	1ad2      	subs	r2, r2, r3
 8005f7e:	7dbb      	ldrb	r3, [r7, #22]
 8005f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f84:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8005f86:	88ba      	ldrh	r2, [r7, #4]
 8005f88:	7d7b      	ldrb	r3, [r7, #21]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	7dba      	ldrb	r2, [r7, #22]
 8005f8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f92:	fb02 f201 	mul.w	r2, r2, r1
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	7d7b      	ldrb	r3, [r7, #21]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dd23      	ble.n	8005fec <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8005fa4:	88fa      	ldrh	r2, [r7, #6]
 8005fa6:	7d7b      	ldrb	r3, [r7, #21]
 8005fa8:	18d4      	adds	r4, r2, r3
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fed6 	bl	8005d5c <AT24Cxx_get_max_addr>
 8005fb0:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8005fb2:	429c      	cmp	r4, r3
 8005fb4:	da1a      	bge.n	8005fec <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005fb6:	bf00      	nop
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88db      	ldrh	r3, [r3, #6]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	b21b      	sxth	r3, r3
 8005fc4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005fc8:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005fca:	b299      	uxth	r1, r3
 8005fcc:	7d7b      	ldrb	r3, [r7, #21]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005fd6:	9402      	str	r4, [sp, #8]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	2310      	movs	r3, #16
 8005fe0:	f002 fb6a 	bl	80086b8 <HAL_I2C_Mem_Write>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8005fea:	e002      	b.n	8005ff2 <AT24Cxx_write_byte_buffer+0xb0>
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
	}else return at_w_bytes_err;
 8005fec:	f06f 0304 	mvn.w	r3, #4
 8005ff0:	e0a5      	b.n	800613e <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
 8005ff6:	e04e      	b.n	8006096 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	7d7b      	ldrb	r3, [r7, #21]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	7db9      	ldrb	r1, [r7, #22]
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	dd3e      	ble.n	800608a <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 800600c:	88fa      	ldrh	r2, [r7, #6]
 800600e:	7d7b      	ldrb	r3, [r7, #21]
 8006010:	441a      	add	r2, r3
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	7db9      	ldrb	r1, [r7, #22]
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	18d4      	adds	r4, r2, r3
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff fe9d 	bl	8005d5c <AT24Cxx_get_max_addr>
 8006022:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006024:	429c      	cmp	r4, r3
 8006026:	da30      	bge.n	800608a <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006028:	bf00      	nop
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	88db      	ldrh	r3, [r3, #6]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	b21b      	sxth	r3, r3
 8006036:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800603a:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 800603c:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800603e:	7d7b      	ldrb	r3, [r7, #21]
 8006040:	b29a      	uxth	r2, r3
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	4413      	add	r3, r2
 8006046:	b29a      	uxth	r2, r3
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	b299      	uxth	r1, r3
 800604c:	7dbb      	ldrb	r3, [r7, #22]
 800604e:	b29b      	uxth	r3, r3
 8006050:	fb11 f303 	smulbb	r3, r1, r3
 8006054:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006056:	4413      	add	r3, r2
 8006058:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 800605a:	7d7b      	ldrb	r3, [r7, #21]
 800605c:	7dfa      	ldrb	r2, [r7, #23]
 800605e:	7db9      	ldrb	r1, [r7, #22]
 8006060:	fb01 f202 	mul.w	r2, r1, r2
 8006064:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	4413      	add	r3, r2
 800606a:	7dba      	ldrb	r2, [r7, #22]
 800606c:	b292      	uxth	r2, r2
 800606e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006072:	9102      	str	r1, [sp, #8]
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2310      	movs	r3, #16
 800607a:	462a      	mov	r2, r5
 800607c:	4621      	mov	r1, r4
 800607e:	f002 fb1b 	bl	80086b8 <HAL_I2C_Mem_Write>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1d0      	bne.n	800602a <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006088:	e002      	b.n	8006090 <AT24Cxx_write_byte_buffer+0x14e>
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
		}else return at_w_bytes_err;
 800608a:	f06f 0304 	mvn.w	r3, #4
 800608e:	e056      	b.n	800613e <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	3301      	adds	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
 8006096:	7dfa      	ldrb	r2, [r7, #23]
 8006098:	7d3b      	ldrb	r3, [r7, #20]
 800609a:	429a      	cmp	r2, r3
 800609c:	d3ac      	bcc.n	8005ff8 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 800609e:	7cfb      	ldrb	r3, [r7, #19]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d04b      	beq.n	800613c <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	7d7b      	ldrb	r3, [r7, #21]
 80060a8:	441a      	add	r2, r3
 80060aa:	7d3b      	ldrb	r3, [r7, #20]
 80060ac:	7db9      	ldrb	r1, [r7, #22]
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dd3e      	ble.n	8006136 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	7d7b      	ldrb	r3, [r7, #21]
 80060bc:	441a      	add	r2, r3
 80060be:	7d3b      	ldrb	r3, [r7, #20]
 80060c0:	7db9      	ldrb	r1, [r7, #22]
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	18d4      	adds	r4, r2, r3
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fe47 	bl	8005d5c <AT24Cxx_get_max_addr>
 80060ce:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80060d0:	429c      	cmp	r4, r3
 80060d2:	da30      	bge.n	8006136 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 80060d4:	bf00      	nop
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	88db      	ldrh	r3, [r3, #6]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	b21b      	sxth	r3, r3
 80060e2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80060e6:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80060e8:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 80060ea:	7d7b      	ldrb	r3, [r7, #21]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	4413      	add	r3, r2
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	7d3b      	ldrb	r3, [r7, #20]
 80060f6:	b299      	uxth	r1, r3
 80060f8:	7dbb      	ldrb	r3, [r7, #22]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	fb11 f303 	smulbb	r3, r1, r3
 8006100:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006102:	4413      	add	r3, r2
 8006104:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8006106:	7d7b      	ldrb	r3, [r7, #21]
 8006108:	7d3a      	ldrb	r2, [r7, #20]
 800610a:	7db9      	ldrb	r1, [r7, #22]
 800610c:	fb01 f202 	mul.w	r2, r1, r2
 8006110:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	4413      	add	r3, r2
 8006116:	7cfa      	ldrb	r2, [r7, #19]
 8006118:	b292      	uxth	r2, r2
 800611a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800611e:	9102      	str	r1, [sp, #8]
 8006120:	9201      	str	r2, [sp, #4]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2310      	movs	r3, #16
 8006126:	462a      	mov	r2, r5
 8006128:	4621      	mov	r1, r4
 800612a:	f002 fac5 	bl	80086b8 <HAL_I2C_Mem_Write>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1d0      	bne.n	80060d6 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006134:	e002      	b.n	800613c <AT24Cxx_write_byte_buffer+0x1fa>
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
		}else return at_w_bytes_err;
 8006136:	f06f 0304 	mvn.w	r3, #4
 800613a:	e000      	b.n	800613e <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bdb0      	pop	{r4, r5, r7, pc}

08006146 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b088      	sub	sp, #32
 800614a:	af04      	add	r7, sp, #16
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	4611      	mov	r1, r2
 8006152:	461a      	mov	r2, r3
 8006154:	460b      	mov	r3, r1
 8006156:	80fb      	strh	r3, [r7, #6]
 8006158:	4613      	mov	r3, r2
 800615a:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d022      	beq.n	80061a8 <AT24Cxx_read_byte_buffer+0x62>
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fdfa 	bl	8005d5c <AT24Cxx_get_max_addr>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	4293      	cmp	r3, r2
 8006170:	d21a      	bcs.n	80061a8 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8006172:	bf00      	nop
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88db      	ldrh	r3, [r3, #6]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	b21b      	sxth	r3, r3
 8006180:	f043 03a1 	orr.w	r3, r3, #161	; 0xa1
 8006184:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8006186:	b299      	uxth	r1, r3
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800618e:	9302      	str	r3, [sp, #8]
 8006190:	88bb      	ldrh	r3, [r7, #4]
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2310      	movs	r3, #16
 800619a:	f002 fb87 	bl	80088ac <HAL_I2C_Mem_Read>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e7      	bne.n	8006174 <AT24Cxx_read_byte_buffer+0x2e>
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
		return at_ok;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e001      	b.n	80061ac <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 80061a8:	f06f 0306 	mvn.w	r3, #6
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	da01      	bge.n	80061cc <constrain+0x18>
        return low;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	e006      	b.n	80061da <constrain+0x26>
    else if (amt > high)
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	dd01      	ble.n	80061d8 <constrain+0x24>
        return high;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	e000      	b.n	80061da <constrain+0x26>
    else
        return amt;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	ed87 0a03 	vstr	s0, [r7, #12]
 80061f0:	edc7 0a02 	vstr	s1, [r7, #8]
 80061f4:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 80061f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80061fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8006200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006208:	d501      	bpl.n	800620e <constrainf+0x28>
        return low;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	e00b      	b.n	8006226 <constrainf+0x40>
    else if (amt > high)
 800620e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006212:	edd7 7a01 	vldr	s15, [r7, #4]
 8006216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	dd01      	ble.n	8006224 <constrainf+0x3e>
        return high;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	e000      	b.n	8006226 <constrainf+0x40>
    else
        return amt;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	ee07 3a90 	vmov	s15, r3
}
 800622a:	eeb0 0a67 	vmov.f32	s0, s15
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006242:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8006246:	edd7 7a01 	vldr	s15, [r7, #4]
 800624a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006284 <pt1FilterGain+0x4c>
 800624e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 800625e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006262:	edd7 7a00 	vldr	s15, [r7]
 8006266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800626a:	ed97 7a00 	vldr	s14, [r7]
 800626e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006272:	eef0 7a66 	vmov.f32	s15, s13
}
 8006276:	eeb0 0a67 	vmov.f32	s0, s15
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	40c90fdb 	.word	0x40c90fdb

08006288 <attitude_ctrl_init>:
int16_t manual_trim_roll,manual_trim_pitch;

/*
 *  init pid controller
 */
void attitude_ctrl_init(){
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
   speed_filter_reset = TRUE;
 800628c:	4b42      	ldr	r3, [pc, #264]	; (8006398 <attitude_ctrl_init+0x110>)
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 8006292:	4b42      	ldr	r3, [pc, #264]	; (800639c <attitude_ctrl_init+0x114>)
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
   // init roll pid 
   pid_init(&roll_angle_pid, pid_profile_1.roll_angle_Kp,0,0,10,0,0);
 800629a:	4b41      	ldr	r3, [pc, #260]	; (80063a0 <attitude_ctrl_init+0x118>)
 800629c:	edd3 7a04 	vldr	s15, [r3, #16]
 80062a0:	eddf 2a40 	vldr	s5, [pc, #256]	; 80063a4 <attitude_ctrl_init+0x11c>
 80062a4:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 80063a4 <attitude_ctrl_init+0x11c>
 80062a8:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80062ac:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80063a4 <attitude_ctrl_init+0x11c>
 80062b0:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80063a4 <attitude_ctrl_init+0x11c>
 80062b4:	eeb0 0a67 	vmov.f32	s0, s15
 80062b8:	483b      	ldr	r0, [pc, #236]	; (80063a8 <attitude_ctrl_init+0x120>)
 80062ba:	f7fd fee3 	bl	8004084 <pid_init>
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 80062be:	4b38      	ldr	r3, [pc, #224]	; (80063a0 <attitude_ctrl_init+0x118>)
 80062c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80062c4:	4b36      	ldr	r3, [pc, #216]	; (80063a0 <attitude_ctrl_init+0x118>)
 80062c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80062ca:	4b35      	ldr	r3, [pc, #212]	; (80063a0 <attitude_ctrl_init+0x118>)
 80062cc:	edd3 6a07 	vldr	s13, [r3, #28]
            pid_profile_1.roll_rate_Ki,pid_profile_1.roll_rate_Kd,
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D,
 80062d0:	4b33      	ldr	r3, [pc, #204]	; (80063a0 <attitude_ctrl_init+0x118>)
 80062d2:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 80062d4:	ee06 3a10 	vmov	s12, r3
 80062d8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D,
 80062dc:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <attitude_ctrl_init+0x118>)
 80062de:	f993 3020 	ldrsb.w	r3, [r3, #32]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 80062e2:	ee05 3a90 	vmov	s11, r3
 80062e6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.roll_max_I);
 80062ea:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <attitude_ctrl_init+0x118>)
 80062ec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 80062f0:	ee05 3a10 	vmov	s10, r3
 80062f4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80062f8:	eef0 2a45 	vmov.f32	s5, s10
 80062fc:	eeb0 2a65 	vmov.f32	s4, s11
 8006300:	eef0 1a46 	vmov.f32	s3, s12
 8006304:	eeb0 1a66 	vmov.f32	s2, s13
 8006308:	eef0 0a47 	vmov.f32	s1, s14
 800630c:	eeb0 0a67 	vmov.f32	s0, s15
 8006310:	4826      	ldr	r0, [pc, #152]	; (80063ac <attitude_ctrl_init+0x124>)
 8006312:	f7fd feb7 	bl	8004084 <pid_init>
   // init roll pid 
   pid_init(&pitch_angle_pid, pid_profile_1.pitch_angle_Kp,0,0,10,0,0);
 8006316:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <attitude_ctrl_init+0x118>)
 8006318:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800631c:	eddf 2a21 	vldr	s5, [pc, #132]	; 80063a4 <attitude_ctrl_init+0x11c>
 8006320:	ed9f 2a20 	vldr	s4, [pc, #128]	; 80063a4 <attitude_ctrl_init+0x11c>
 8006324:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8006328:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80063a4 <attitude_ctrl_init+0x11c>
 800632c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80063a4 <attitude_ctrl_init+0x11c>
 8006330:	eeb0 0a67 	vmov.f32	s0, s15
 8006334:	481e      	ldr	r0, [pc, #120]	; (80063b0 <attitude_ctrl_init+0x128>)
 8006336:	f7fd fea5 	bl	8004084 <pid_init>
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 800633a:	4b19      	ldr	r3, [pc, #100]	; (80063a0 <attitude_ctrl_init+0x118>)
 800633c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006340:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <attitude_ctrl_init+0x118>)
 8006342:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006346:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <attitude_ctrl_init+0x118>)
 8006348:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
            pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <attitude_ctrl_init+0x118>)
 800634e:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 8006350:	ee06 3a10 	vmov	s12, r3
 8006354:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,
 8006358:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <attitude_ctrl_init+0x118>)
 800635a:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 800635e:	ee05 3a90 	vmov	s11, r3
 8006362:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.pitch_max_I);
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <attitude_ctrl_init+0x118>)
 8006368:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 800636c:	ee05 3a10 	vmov	s10, r3
 8006370:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8006374:	eef0 2a45 	vmov.f32	s5, s10
 8006378:	eeb0 2a65 	vmov.f32	s4, s11
 800637c:	eef0 1a46 	vmov.f32	s3, s12
 8006380:	eeb0 1a66 	vmov.f32	s2, s13
 8006384:	eef0 0a47 	vmov.f32	s1, s14
 8006388:	eeb0 0a67 	vmov.f32	s0, s15
 800638c:	4809      	ldr	r0, [pc, #36]	; (80063b4 <attitude_ctrl_init+0x12c>)
 800638e:	f7fd fe79 	bl	8004084 <pid_init>
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20004b08 	.word	0x20004b08
 800639c:	20004b18 	.word	0x20004b18
 80063a0:	2000001c 	.word	0x2000001c
 80063a4:	00000000 	.word	0x00000000
 80063a8:	200002a8 	.word	0x200002a8
 80063ac:	20000250 	.word	0x20000250
 80063b0:	200002d4 	.word	0x200002d4
 80063b4:	2000027c 	.word	0x2000027c

080063b8 <attitude_ctrl_start>:


/*
 *   Atittude control function
 */
void attitude_ctrl_start(const float dt){
 80063b8:	b5b0      	push	{r4, r5, r7, lr}
 80063ba:	b098      	sub	sp, #96	; 0x60
 80063bc:	af00      	add	r7, sp, #0
 80063be:	ed87 0a01 	vstr	s0, [r7, #4]
    static float roll_pid_smooth = 0.0f;
    static float pitch_pid_smooth = 0.0f;

    if(dt < 0 || dt > MAX_WAIT_TIME){
 80063c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80063c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ce:	d408      	bmi.n	80063e2 <attitude_ctrl_start+0x2a>
 80063d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80063d4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80066d8 <attitude_ctrl_start+0x320>
 80063d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	dd08      	ble.n	80063f4 <attitude_ctrl_start+0x3c>
        servoL = 1500;
 80063e2:	4bbe      	ldr	r3, [pc, #760]	; (80066dc <attitude_ctrl_start+0x324>)
 80063e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80063e8:	601a      	str	r2, [r3, #0]
        servoR = 1500;
 80063ea:	4bbd      	ldr	r3, [pc, #756]	; (80066e0 <attitude_ctrl_start+0x328>)
 80063ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80063f0:	601a      	str	r2, [r3, #0]
        //write_pwm_ctrl(1000,servoL,servoR);
        return;
 80063f2:	e391      	b.n	8006b18 <attitude_ctrl_start+0x760>
    }

   // calculate trim value
   int16_t roll_trim  = (int)ibusChannelData[CH8] - 1500;
 80063f4:	4bbb      	ldr	r3, [pc, #748]	; (80066e4 <attitude_ctrl_start+0x32c>)
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   int16_t pitch_trim = (int)ibusChannelData[CH7] - 1500;
 8006404:	4bb7      	ldr	r3, [pc, #732]	; (80066e4 <attitude_ctrl_start+0x32c>)
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800640e:	b29b      	uxth	r3, r3
 8006410:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

   if(manual_trim_state){
 8006414:	4bb4      	ldr	r3, [pc, #720]	; (80066e8 <attitude_ctrl_start+0x330>)
 8006416:	f993 3000 	ldrsb.w	r3, [r3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <attitude_ctrl_start+0x76>
        manual_trim_roll = roll_trim;
 800641e:	4ab3      	ldr	r2, [pc, #716]	; (80066ec <attitude_ctrl_start+0x334>)
 8006420:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006424:	8013      	strh	r3, [r2, #0]
        manual_trim_pitch = pitch_trim;
 8006426:	4ab2      	ldr	r2, [pc, #712]	; (80066f0 <attitude_ctrl_start+0x338>)
 8006428:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800642c:	8013      	strh	r3, [r2, #0]
   }
    // stabilize mode
   if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 800642e:	4bad      	ldr	r3, [pc, #692]	; (80066e4 <attitude_ctrl_start+0x32c>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8006436:	4293      	cmp	r3, r2
 8006438:	f240 82d6 	bls.w	80069e8 <attitude_ctrl_start+0x630>
        manual_trim_state = 0;
 800643c:	4baa      	ldr	r3, [pc, #680]	; (80066e8 <attitude_ctrl_start+0x330>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
        /* calculate roll && pitch desired */
        roll_desired  = ((int)ibusChannelData[0] - 1500)* 0.16f  + roll_trim*0.05f;   /*  -60 <-  -> +60  */
 8006442:	4ba8      	ldr	r3, [pc, #672]	; (80066e4 <attitude_ctrl_start+0x32c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006452:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80066f4 <attitude_ctrl_start+0x33c>
 8006456:	ee27 7a87 	vmul.f32	s14, s15, s14
 800645a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006466:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80066f8 <attitude_ctrl_start+0x340>
 800646a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800646e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006472:	4ba2      	ldr	r3, [pc, #648]	; (80066fc <attitude_ctrl_start+0x344>)
 8006474:	edc3 7a00 	vstr	s15, [r3]
        pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.16f  + 10;  /*    -60 <-  -> +60  */
 8006478:	4b9a      	ldr	r3, [pc, #616]	; (80066e4 <attitude_ctrl_start+0x32c>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006488:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8006700 <attitude_ctrl_start+0x348>
 800648c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006490:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006498:	4b9a      	ldr	r3, [pc, #616]	; (8006704 <attitude_ctrl_start+0x34c>)
 800649a:	edc3 7a00 	vstr	s15, [r3]
        roll_desired = constrainf(roll_desired,-80,80);
 800649e:	4b97      	ldr	r3, [pc, #604]	; (80066fc <attitude_ctrl_start+0x344>)
 80064a0:	edd3 7a00 	vldr	s15, [r3]
 80064a4:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8006708 <attitude_ctrl_start+0x350>
 80064a8:	eddf 0a98 	vldr	s1, [pc, #608]	; 800670c <attitude_ctrl_start+0x354>
 80064ac:	eeb0 0a67 	vmov.f32	s0, s15
 80064b0:	f7ff fe99 	bl	80061e6 <constrainf>
 80064b4:	eef0 7a40 	vmov.f32	s15, s0
 80064b8:	4b90      	ldr	r3, [pc, #576]	; (80066fc <attitude_ctrl_start+0x344>)
 80064ba:	edc3 7a00 	vstr	s15, [r3]
        pitch_desired = constrainf(pitch_desired,-80,80);
 80064be:	4b91      	ldr	r3, [pc, #580]	; (8006704 <attitude_ctrl_start+0x34c>)
 80064c0:	edd3 7a00 	vldr	s15, [r3]
 80064c4:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8006708 <attitude_ctrl_start+0x350>
 80064c8:	eddf 0a90 	vldr	s1, [pc, #576]	; 800670c <attitude_ctrl_start+0x354>
 80064cc:	eeb0 0a67 	vmov.f32	s0, s15
 80064d0:	f7ff fe89 	bl	80061e6 <constrainf>
 80064d4:	eef0 7a40 	vmov.f32	s15, s0
 80064d8:	4b8a      	ldr	r3, [pc, #552]	; (8006704 <attitude_ctrl_start+0x34c>)
 80064da:	edc3 7a00 	vstr	s15, [r3]

        /*---- pid scaler with velocity  -----*/
        if(_gps.fix > 1){
 80064de:	4b8c      	ldr	r3, [pc, #560]	; (8006710 <attitude_ctrl_start+0x358>)
 80064e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f240 8081 	bls.w	80065ec <attitude_ctrl_start+0x234>
            float vn = (float)_gps.velocity[0]/100;  // m
 80064ea:	4b89      	ldr	r3, [pc, #548]	; (8006710 <attitude_ctrl_start+0x358>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064f6:	eddf 6a87 	vldr	s13, [pc, #540]	; 8006714 <attitude_ctrl_start+0x35c>
 80064fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064fe:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            float ve = (float)_gps.velocity[1]/100;  // m
 8006502:	4b83      	ldr	r3, [pc, #524]	; (8006710 <attitude_ctrl_start+0x358>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800650e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8006714 <attitude_ctrl_start+0x35c>
 8006512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006516:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            //float vd = (float)_gps.velocity[2]/100;  // m

            float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 800651a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800651e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006522:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006526:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800652a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652e:	eeb0 0a67 	vmov.f32	s0, s15
 8006532:	f00e fdc9 	bl	80150c8 <sqrtf>
 8006536:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
            absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 800653a:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800653e:	eddf 0a76 	vldr	s1, [pc, #472]	; 8006718 <attitude_ctrl_start+0x360>
 8006542:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8006546:	f7ff fe4e 	bl	80061e6 <constrainf>
 800654a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
            if(speed_filter_reset){
 800654e:	4b73      	ldr	r3, [pc, #460]	; (800671c <attitude_ctrl_start+0x364>)
 8006550:	f993 3000 	ldrsb.w	r3, [r3]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <attitude_ctrl_start+0x1ac>
                ab_speed_filted = absolute_velocity;
 8006558:	4a71      	ldr	r2, [pc, #452]	; (8006720 <attitude_ctrl_start+0x368>)
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655c:	6013      	str	r3, [r2, #0]
                speed_filter_reset = FALSE;
 800655e:	4b6f      	ldr	r3, [pc, #444]	; (800671c <attitude_ctrl_start+0x364>)
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]
            }
            ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8006564:	edd7 0a01 	vldr	s1, [r7, #4]
 8006568:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800656c:	f7ff fe64 	bl	8006238 <pt1FilterGain>
 8006570:	eef0 6a40 	vmov.f32	s13, s0
 8006574:	4b6a      	ldr	r3, [pc, #424]	; (8006720 <attitude_ctrl_start+0x368>)
 8006576:	edd3 7a00 	vldr	s15, [r3]
 800657a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800657e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006582:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006586:	4b66      	ldr	r3, [pc, #408]	; (8006720 <attitude_ctrl_start+0x368>)
 8006588:	edd3 7a00 	vldr	s15, [r3]
 800658c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006590:	4b63      	ldr	r3, [pc, #396]	; (8006720 <attitude_ctrl_start+0x368>)
 8006592:	edc3 7a00 	vstr	s15, [r3]
            float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 8006596:	4b62      	ldr	r3, [pc, #392]	; (8006720 <attitude_ctrl_start+0x368>)
 8006598:	edd3 7a00 	vldr	s15, [r3]
 800659c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8006724 <attitude_ctrl_start+0x36c>
 80065a0:	eef2 0a08 	vmov.f32	s1, #40	; 0x41400000  12.0
 80065a4:	eeb0 0a67 	vmov.f32	s0, s15
 80065a8:	f7ff fe1d 	bl	80061e6 <constrainf>
 80065ac:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.09f);
 80065b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80065b4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80065b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80065bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80065c0:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80065c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065cc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006728 <attitude_ctrl_start+0x370>
 80065d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065d4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80065d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065dc:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80065e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e4:	4b51      	ldr	r3, [pc, #324]	; (800672c <attitude_ctrl_start+0x374>)
 80065e6:	edc3 7a00 	vstr	s15, [r3]
 80065ea:	e005      	b.n	80065f8 <attitude_ctrl_start+0x240>
        }
        else{
            speed_filter_reset = TRUE;
 80065ec:	4b4b      	ldr	r3, [pc, #300]	; (800671c <attitude_ctrl_start+0x364>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
            pid_velo_scale = 0.6f;
 80065f2:	4b4e      	ldr	r3, [pc, #312]	; (800672c <attitude_ctrl_start+0x374>)
 80065f4:	4a4e      	ldr	r2, [pc, #312]	; (8006730 <attitude_ctrl_start+0x378>)
 80065f6:	601a      	str	r2, [r3, #0]
            //pid_velo_scale = 1.0;
        }


        float roll_measurement = AHRS.roll;
 80065f8:	4b4e      	ldr	r3, [pc, #312]	; (8006734 <attitude_ctrl_start+0x37c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	643b      	str	r3, [r7, #64]	; 0x40
        float pitch_measurement = AHRS.pitch;
 80065fe:	4b4d      	ldr	r3, [pc, #308]	; (8006734 <attitude_ctrl_start+0x37c>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        //if(abs(roll_measurement) > SAFETY_ANGLE_ROLL && abs(pitch_measurement) < SAFETY_ANGLE_PITCH){
        //    // priority to roll
        //}
        
        const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_ROLL_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006604:	4b49      	ldr	r3, [pc, #292]	; (800672c <attitude_ctrl_start+0x374>)
 8006606:	edd3 7a00 	vldr	s15, [r3]
 800660a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800660e:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8006738 <attitude_ctrl_start+0x380>
 8006612:	eeb0 0a67 	vmov.f32	s0, s15
 8006616:	f7ff fde6 	bl	80061e6 <constrainf>
 800661a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PITCH_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 800661e:	4b43      	ldr	r3, [pc, #268]	; (800672c <attitude_ctrl_start+0x374>)
 8006620:	edd3 7a00 	vldr	s15, [r3]
 8006624:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006628:	eddf 0a44 	vldr	s1, [pc, #272]	; 800673c <attitude_ctrl_start+0x384>
 800662c:	eeb0 0a67 	vmov.f32	s0, s15
 8006630:	f7ff fdd9 	bl	80061e6 <constrainf>
 8006634:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

        /*----- roll axis pid   -----*/
        const float roll_rate_measurement = AHRS.p;
 8006638:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <attitude_ctrl_start+0x37c>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	633b      	str	r3, [r7, #48]	; 0x30
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired,1.0f,dt);
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <attitude_ctrl_start+0x344>)
 8006640:	edd3 7a00 	vldr	s15, [r3]
 8006644:	edd7 1a01 	vldr	s3, [r7, #4]
 8006648:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800664c:	eef0 0a67 	vmov.f32	s1, s15
 8006650:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8006654:	483a      	ldr	r0, [pc, #232]	; (8006740 <attitude_ctrl_start+0x388>)
 8006656:	f7fd fd50 	bl	80040fa <pid_calculate>
 800665a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        // limit rate
        roll_rate_desired = constrainf(roll_rate_desired, -pid_profile_1.roll_rate_limit, pid_profile_1.roll_rate_limit);
 800665e:	4b39      	ldr	r3, [pc, #228]	; (8006744 <attitude_ctrl_start+0x38c>)
 8006660:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006664:	425b      	negs	r3, r3
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800666e:	4b35      	ldr	r3, [pc, #212]	; (8006744 <attitude_ctrl_start+0x38c>)
 8006670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006674:	ee07 3a10 	vmov	s14, r3
 8006678:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800667c:	eeb0 1a47 	vmov.f32	s2, s14
 8006680:	eef0 0a67 	vmov.f32	s1, s15
 8006684:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006688:	f7ff fdad 	bl	80061e6 <constrainf>
 800668c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 8006690:	edd7 1a01 	vldr	s3, [r7, #4]
 8006694:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8006698:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 800669c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80066a0:	4829      	ldr	r0, [pc, #164]	; (8006748 <attitude_ctrl_start+0x390>)
 80066a2:	f7fd fd2a 	bl	80040fa <pid_calculate>
 80066a6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
        // reset I term
        if(abs(roll_angle_pid.err) < ERROR_RESET_I_TERM){
 80066aa:	4b25      	ldr	r3, [pc, #148]	; (8006740 <attitude_ctrl_start+0x388>)
 80066ac:	edd3 7a00 	vldr	s15, [r3]
 80066b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	dd48      	ble.n	800674c <attitude_ctrl_start+0x394>
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <attitude_ctrl_start+0x388>)
 80066bc:	edd3 7a00 	vldr	s15, [r3]
 80066c0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80066c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066cc:	bf4c      	ite	mi
 80066ce:	2301      	movmi	r3, #1
 80066d0:	2300      	movpl	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e047      	b.n	8006766 <attitude_ctrl_start+0x3ae>
 80066d6:	bf00      	nop
 80066d8:	3dcccccd 	.word	0x3dcccccd
 80066dc:	20004b14 	.word	0x20004b14
 80066e0:	20004aec 	.word	0x20004aec
 80066e4:	20004228 	.word	0x20004228
 80066e8:	20000068 	.word	0x20000068
 80066ec:	20004af0 	.word	0x20004af0
 80066f0:	20004b00 	.word	0x20004b00
 80066f4:	3e23d70a 	.word	0x3e23d70a
 80066f8:	3d4ccccd 	.word	0x3d4ccccd
 80066fc:	20004b04 	.word	0x20004b04
 8006700:	be23d70a 	.word	0xbe23d70a
 8006704:	20004afc 	.word	0x20004afc
 8006708:	42a00000 	.word	0x42a00000
 800670c:	c2a00000 	.word	0xc2a00000
 8006710:	200044d0 	.word	0x200044d0
 8006714:	42c80000 	.word	0x42c80000
 8006718:	00000000 	.word	0x00000000
 800671c:	20004b08 	.word	0x20004b08
 8006720:	20004b18 	.word	0x20004b18
 8006724:	42040000 	.word	0x42040000
 8006728:	3db851ec 	.word	0x3db851ec
 800672c:	20004af8 	.word	0x20004af8
 8006730:	3f19999a 	.word	0x3f19999a
 8006734:	2000460c 	.word	0x2000460c
 8006738:	3ecccccd 	.word	0x3ecccccd
 800673c:	3e99999a 	.word	0x3e99999a
 8006740:	200002a8 	.word	0x200002a8
 8006744:	2000001c 	.word	0x2000001c
 8006748:	20000250 	.word	0x20000250
 800674c:	4b97      	ldr	r3, [pc, #604]	; (80069ac <attitude_ctrl_start+0x5f4>)
 800674e:	edd3 7a00 	vldr	s15, [r3]
 8006752:	eeb8 7a04 	vmov.f32	s14, #132	; 0xc0200000 -2.5
 8006756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800675a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675e:	bfcc      	ite	gt
 8006760:	2301      	movgt	r3, #1
 8006762:	2300      	movle	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <attitude_ctrl_start+0x3ba>
            roll_rate_pid.i_term = 0.0f;
 800676a:	4b91      	ldr	r3, [pc, #580]	; (80069b0 <attitude_ctrl_start+0x5f8>)
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	615a      	str	r2, [r3, #20]
        }
        // feed forward
        float FF_roll = roll_rate_desired*pid_profile_1.roll_FF_gain;
 8006772:	4b90      	ldr	r3, [pc, #576]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 8006774:	edd3 7a02 	vldr	s15, [r3, #8]
 8006778:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800677c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006780:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        r_rate_pid = r_rate_pid + FF_roll;
 8006784:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006788:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800678c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006790:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        r_rate_pid = constrainf(r_rate_pid, -pid_profile_1.roll_max_pid, pid_profile_1.roll_max_pid);
 8006794:	4b87      	ldr	r3, [pc, #540]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 8006796:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800679a:	425b      	negs	r3, r3
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067a4:	4b83      	ldr	r3, [pc, #524]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 80067a6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80067aa:	ee07 3a10 	vmov	s14, r3
 80067ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80067b2:	eeb0 1a47 	vmov.f32	s2, s14
 80067b6:	eef0 0a67 	vmov.f32	s1, s15
 80067ba:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80067be:	f7ff fd12 	bl	80061e6 <constrainf>
 80067c2:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
        // filter pid  LPF
        roll_pid_smooth += pt1FilterGain(pid_profile_1.roll_pid_fcut,dt)*(r_rate_pid - roll_pid_smooth);
 80067c6:	4b7b      	ldr	r3, [pc, #492]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 80067c8:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d4:	edd7 0a01 	vldr	s1, [r7, #4]
 80067d8:	eeb0 0a67 	vmov.f32	s0, s15
 80067dc:	f7ff fd2c 	bl	8006238 <pt1FilterGain>
 80067e0:	eef0 6a40 	vmov.f32	s13, s0
 80067e4:	4b74      	ldr	r3, [pc, #464]	; (80069b8 <attitude_ctrl_start+0x600>)
 80067e6:	edd3 7a00 	vldr	s15, [r3]
 80067ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80067ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80067f6:	4b70      	ldr	r3, [pc, #448]	; (80069b8 <attitude_ctrl_start+0x600>)
 80067f8:	edd3 7a00 	vldr	s15, [r3]
 80067fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006800:	4b6d      	ldr	r3, [pc, #436]	; (80069b8 <attitude_ctrl_start+0x600>)
 8006802:	edc3 7a00 	vstr	s15, [r3]
            }
        }
        */

        /*-----  pitch axis pid  ---------*/
        const float pitch_rate_measurement = AHRS.q;
 8006806:	4b6d      	ldr	r3, [pc, #436]	; (80069bc <attitude_ctrl_start+0x604>)
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	623b      	str	r3, [r7, #32]
        float pitch_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired,1.0,dt);
 800680c:	4b6c      	ldr	r3, [pc, #432]	; (80069c0 <attitude_ctrl_start+0x608>)
 800680e:	edd3 7a00 	vldr	s15, [r3]
 8006812:	edd7 1a01 	vldr	s3, [r7, #4]
 8006816:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800681a:	eef0 0a67 	vmov.f32	s1, s15
 800681e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8006822:	4868      	ldr	r0, [pc, #416]	; (80069c4 <attitude_ctrl_start+0x60c>)
 8006824:	f7fd fc69 	bl	80040fa <pid_calculate>
 8006828:	ed87 0a07 	vstr	s0, [r7, #28]
        // limit rate
        pitch_rate_desired = constrainf(pitch_rate_desired, -pid_profile_1.pitch_rate_limit, pid_profile_1.pitch_rate_limit);
 800682c:	4b61      	ldr	r3, [pc, #388]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 800682e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006832:	425b      	negs	r3, r3
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800683c:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 800683e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8006842:	ee07 3a10 	vmov	s14, r3
 8006846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800684a:	eeb0 1a47 	vmov.f32	s2, s14
 800684e:	eef0 0a67 	vmov.f32	s1, s15
 8006852:	ed97 0a07 	vldr	s0, [r7, #28]
 8006856:	f7ff fcc6 	bl	80061e6 <constrainf>
 800685a:	ed87 0a07 	vstr	s0, [r7, #28]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitch_rate_desired,pid_pitch_vel_scale ,dt);
 800685e:	edd7 1a01 	vldr	s3, [r7, #4]
 8006862:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8006866:	edd7 0a07 	vldr	s1, [r7, #28]
 800686a:	ed97 0a08 	vldr	s0, [r7, #32]
 800686e:	4856      	ldr	r0, [pc, #344]	; (80069c8 <attitude_ctrl_start+0x610>)
 8006870:	f7fd fc43 	bl	80040fa <pid_calculate>
 8006874:	ed87 0a06 	vstr	s0, [r7, #24]
        // reset I term
        //if(abs(pitch_angle_pid.err) < ERROR_RESET_I_TERM){
        //    pitch_rate_pid.i_term = 0.0f;
        //}
        // feed forward
        float FF_pitch = pitch_rate_desired*pid_profile_1.pitch_FF_gain;;
 8006878:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 800687a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800687e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a05 	vstr	s15, [r7, #20]
        p_rate_pid = p_rate_pid + FF_pitch;
 800688a:	ed97 7a06 	vldr	s14, [r7, #24]
 800688e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006896:	edc7 7a06 	vstr	s15, [r7, #24]
        p_rate_pid = constrainf(p_rate_pid,- pid_profile_1.pitch_max_pid, pid_profile_1.pitch_max_pid);
 800689a:	4b46      	ldr	r3, [pc, #280]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 800689c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80068a0:	425b      	negs	r3, r3
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068aa:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 80068ac:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80068b0:	ee07 3a10 	vmov	s14, r3
 80068b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068b8:	eeb0 1a47 	vmov.f32	s2, s14
 80068bc:	eef0 0a67 	vmov.f32	s1, s15
 80068c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80068c4:	f7ff fc8f 	bl	80061e6 <constrainf>
 80068c8:	ed87 0a06 	vstr	s0, [r7, #24]
        // filter pid  LPF
        pitch_pid_smooth += pt1FilterGain(pid_profile_1.pitch_pid_fcut,dt)*(p_rate_pid - pitch_pid_smooth);
 80068cc:	4b39      	ldr	r3, [pc, #228]	; (80069b4 <attitude_ctrl_start+0x5fc>)
 80068ce:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068da:	edd7 0a01 	vldr	s1, [r7, #4]
 80068de:	eeb0 0a67 	vmov.f32	s0, s15
 80068e2:	f7ff fca9 	bl	8006238 <pt1FilterGain>
 80068e6:	eef0 6a40 	vmov.f32	s13, s0
 80068ea:	4b38      	ldr	r3, [pc, #224]	; (80069cc <attitude_ctrl_start+0x614>)
 80068ec:	edd3 7a00 	vldr	s15, [r3]
 80068f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80068f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068f8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80068fc:	4b33      	ldr	r3, [pc, #204]	; (80069cc <attitude_ctrl_start+0x614>)
 80068fe:	edd3 7a00 	vldr	s15, [r3]
 8006902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006906:	4b31      	ldr	r3, [pc, #196]	; (80069cc <attitude_ctrl_start+0x614>)
 8006908:	edc3 7a00 	vstr	s15, [r3]
        
        // enable && disable I term, for test only
		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 800690c:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <attitude_ctrl_start+0x618>)
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8006914:	4293      	cmp	r3, r2
 8006916:	d907      	bls.n	8006928 <attitude_ctrl_start+0x570>
			pitch_rate_pid.i_term = 0;
 8006918:	4b2b      	ldr	r3, [pc, #172]	; (80069c8 <attitude_ctrl_start+0x610>)
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
			roll_rate_pid.i_term = 0;
 8006920:	4b23      	ldr	r3, [pc, #140]	; (80069b0 <attitude_ctrl_start+0x5f8>)
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	615a      	str	r2, [r3, #20]
		}

        /*-------------- mix channel --------------------------*/

		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006928:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <attitude_ctrl_start+0x618>)
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8006930:	4293      	cmp	r3, r2
 8006932:	d91d      	bls.n	8006970 <attitude_ctrl_start+0x5b8>
                // roll stabilize
				int pitch_rc = 1500 - ibusChannelData[CH2];
 8006934:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <attitude_ctrl_start+0x618>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800693c:	3304      	adds	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
				//servoL = 1500 - roll_pid_smooth - pitch_rc;// + roll_trim  + pitch_trim;
				//servoR = 1500 + roll_pid_smooth - pitch_rc;// - roll_trim  + pitch_trim;
                servoL = 1500 + roll_pid_smooth;// + roll_trim  + pitch_trim;
 8006940:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <attitude_ctrl_start+0x600>)
 8006942:	edd3 7a00 	vldr	s15, [r3]
 8006946:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80069d4 <attitude_ctrl_start+0x61c>
 800694a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800694e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006952:	ee17 2a90 	vmov	r2, s15
 8006956:	4b20      	ldr	r3, [pc, #128]	; (80069d8 <attitude_ctrl_start+0x620>)
 8006958:	601a      	str	r2, [r3, #0]
				servoR = 1500 - pitch_rc - manual_trim_roll;;// - roll_trim  + pitch_trim;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006960:	3304      	adds	r3, #4
 8006962:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <attitude_ctrl_start+0x624>)
 8006964:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	4a1d      	ldr	r2, [pc, #116]	; (80069e0 <attitude_ctrl_start+0x628>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e0b0      	b.n	8006ad2 <attitude_ctrl_start+0x71a>
		}else{
               // pitch stabilize
				int roll_rc = 1500 - ibusChannelData[CH1];
 8006970:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <attitude_ctrl_start+0x618>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006978:	3304      	adds	r3, #4
 800697a:	613b      	str	r3, [r7, #16]
				//servoL = 1500 +  roll_rc*0.5 - pitch_pid_smooth;//    + roll_trim  + pitch_trim;
				//servoR = 1500 -  roll_rc*0.5 - pitch_pid_smooth;//    - roll_trim  + pitch_trim;
                servoL = 1500 -  roll_rc + manual_trim_pitch;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006982:	3304      	adds	r3, #4
 8006984:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <attitude_ctrl_start+0x62c>)
 8006986:	f9b2 2000 	ldrsh.w	r2, [r2]
 800698a:	4413      	add	r3, r2
 800698c:	4a12      	ldr	r2, [pc, #72]	; (80069d8 <attitude_ctrl_start+0x620>)
 800698e:	6013      	str	r3, [r2, #0]
				servoR = 1500 +  pitch_pid_smooth;
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <attitude_ctrl_start+0x614>)
 8006992:	edd3 7a00 	vldr	s15, [r3]
 8006996:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80069d4 <attitude_ctrl_start+0x61c>
 800699a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800699e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069a2:	ee17 2a90 	vmov	r2, s15
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <attitude_ctrl_start+0x628>)
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e092      	b.n	8006ad2 <attitude_ctrl_start+0x71a>
 80069ac:	200002a8 	.word	0x200002a8
 80069b0:	20000250 	.word	0x20000250
 80069b4:	2000001c 	.word	0x2000001c
 80069b8:	20000304 	.word	0x20000304
 80069bc:	2000460c 	.word	0x2000460c
 80069c0:	20004afc 	.word	0x20004afc
 80069c4:	200002d4 	.word	0x200002d4
 80069c8:	2000027c 	.word	0x2000027c
 80069cc:	20000308 	.word	0x20000308
 80069d0:	20004228 	.word	0x20004228
 80069d4:	44bb8000 	.word	0x44bb8000
 80069d8:	20004b14 	.word	0x20004b14
 80069dc:	20004af0 	.word	0x20004af0
 80069e0:	20004aec 	.word	0x20004aec
 80069e4:	20004b00 	.word	0x20004b00
        
    }
    // manual mode
    else{
        // reset pid
        pid_reset(&pitch_rate_pid);
 80069e8:	484f      	ldr	r0, [pc, #316]	; (8006b28 <attitude_ctrl_start+0x770>)
 80069ea:	f7fd fc5e 	bl	80042aa <pid_reset>
        pid_reset(&roll_rate_pid);
 80069ee:	484f      	ldr	r0, [pc, #316]	; (8006b2c <attitude_ctrl_start+0x774>)
 80069f0:	f7fd fc5b 	bl	80042aa <pid_reset>

        int s1 = 1500 - ibusChannelData[CH1];
 80069f4:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <attitude_ctrl_start+0x778>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80069fc:	3304      	adds	r3, #4
 80069fe:	65bb      	str	r3, [r7, #88]	; 0x58
        int s2 = 1500 - ibusChannelData[CH2];
 8006a00:	4b4b      	ldr	r3, [pc, #300]	; (8006b30 <attitude_ctrl_start+0x778>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006a08:	3304      	adds	r3, #4
 8006a0a:	657b      	str	r3, [r7, #84]	; 0x54

        smooth_ch1 += 0.7*(s1 - smooth_ch1);
 8006a0c:	4b49      	ldr	r3, [pc, #292]	; (8006b34 <attitude_ctrl_start+0x77c>)
 8006a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fd2e 	bl	8000474 <__aeabi_i2d>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4b45      	ldr	r3, [pc, #276]	; (8006b34 <attitude_ctrl_start+0x77c>)
 8006a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7f9 fd23 	bl	8000474 <__aeabi_i2d>
 8006a2e:	a33c      	add	r3, pc, #240	; (adr r3, 8006b20 <attitude_ctrl_start+0x768>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 fd88 	bl	8000548 <__aeabi_dmul>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fbcc 	bl	80001dc <__adddf3>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f7fa f82c 	bl	8000aa8 <__aeabi_d2iz>
 8006a50:	4603      	mov	r3, r0
 8006a52:	b21a      	sxth	r2, r3
 8006a54:	4b37      	ldr	r3, [pc, #220]	; (8006b34 <attitude_ctrl_start+0x77c>)
 8006a56:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.7*(s2 - smooth_ch2);
 8006a58:	4b37      	ldr	r3, [pc, #220]	; (8006b38 <attitude_ctrl_start+0x780>)
 8006a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7f9 fd08 	bl	8000474 <__aeabi_i2d>
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	4b33      	ldr	r3, [pc, #204]	; (8006b38 <attitude_ctrl_start+0x780>)
 8006a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7f9 fcfd 	bl	8000474 <__aeabi_i2d>
 8006a7a:	a329      	add	r3, pc, #164	; (adr r3, 8006b20 <attitude_ctrl_start+0x768>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f7f9 fd62 	bl	8000548 <__aeabi_dmul>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4620      	mov	r0, r4
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	f7f9 fba6 	bl	80001dc <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	f7fa f806 	bl	8000aa8 <__aeabi_d2iz>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	b21a      	sxth	r2, r3
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <attitude_ctrl_start+0x780>)
 8006aa2:	801a      	strh	r2, [r3, #0]

        //servoL = 1500 + smooth_ch1 - smooth_ch2  + manual_trim_roll  + manual_trim_pitch;
        //servoR = 1500 - smooth_ch1 - smooth_ch2  - manual_trim_roll  + manual_trim_pitch;
        
        servoL = 1500 - smooth_ch1  + manual_trim_pitch;
 8006aa4:	4b23      	ldr	r3, [pc, #140]	; (8006b34 <attitude_ctrl_start+0x77c>)
 8006aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aaa:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4a22      	ldr	r2, [pc, #136]	; (8006b3c <attitude_ctrl_start+0x784>)
 8006ab2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	4a21      	ldr	r2, [pc, #132]	; (8006b40 <attitude_ctrl_start+0x788>)
 8006aba:	6013      	str	r3, [r2, #0]
        servoR = 1500 + smooth_ch2  - manual_trim_roll;
 8006abc:	4b1e      	ldr	r3, [pc, #120]	; (8006b38 <attitude_ctrl_start+0x780>)
 8006abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8006ac6:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <attitude_ctrl_start+0x78c>)
 8006ac8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <attitude_ctrl_start+0x790>)
 8006ad0:	6013      	str	r3, [r2, #0]
    }
    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8006ad2:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <attitude_ctrl_start+0x788>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ada:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fb68 	bl	80061b4 <constrain>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <attitude_ctrl_start+0x788>)
 8006ae8:	6013      	str	r3, [r2, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8006aea:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <attitude_ctrl_start+0x790>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006af2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff fb5c 	bl	80061b4 <constrain>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4a12      	ldr	r2, [pc, #72]	; (8006b48 <attitude_ctrl_start+0x790>)
 8006b00:	6013      	str	r3, [r2, #0]
   //write_pwm_ctrl(1000,servoL,servoR);
    mavlink_rc_raw(1000,servoL,servoR);
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <attitude_ctrl_start+0x788>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <attitude_ctrl_start+0x790>)
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	b292      	uxth	r2, r2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b14:	f000 f9cc 	bl	8006eb0 <mavlink_rc_raw>
}
 8006b18:	3760      	adds	r7, #96	; 0x60
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	66666666 	.word	0x66666666
 8006b24:	3fe66666 	.word	0x3fe66666
 8006b28:	2000027c 	.word	0x2000027c
 8006b2c:	20000250 	.word	0x20000250
 8006b30:	20004228 	.word	0x20004228
 8006b34:	20000300 	.word	0x20000300
 8006b38:	20000302 	.word	0x20000302
 8006b3c:	20004b00 	.word	0x20004b00
 8006b40:	20004b14 	.word	0x20004b14
 8006b44:	20004af0 	.word	0x20004af0
 8006b48:	20004aec 	.word	0x20004aec

08006b4c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	4053      	eors	r3, r2
 8006b62:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	b25a      	sxtb	r2, r3
 8006b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b6e:	4053      	eors	r3, r2
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b21a      	sxth	r2, r3
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	b21b      	sxth	r3, r3
 8006b84:	4053      	eors	r3, r2
 8006b86:	b21a      	sxth	r2, r3
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	b21b      	sxth	r3, r3
 8006b8e:	4053      	eors	r3, r2
 8006b90:	b21a      	sxth	r2, r3
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	4053      	eors	r3, r2
 8006b9c:	b21b      	sxth	r3, r3
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	801a      	strh	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bbe:	801a      	strh	r2, [r3, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8006bd8:	f107 030e 	add.w	r3, r7, #14
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ffe7 	bl	8006bb0 <crc_init>
	while (length--) {
 8006be2:	e009      	b.n	8006bf8 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f107 020e 	add.w	r2, r7, #14
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff ffaa 	bl	8006b4c <crc_accumulate>
	while (length--) {
 8006bf8:	887b      	ldrh	r3, [r7, #2]
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	807a      	strh	r2, [r7, #2]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <crc_calculate+0x18>
        }
        return crcTmp;
 8006c02:	89fb      	ldrh	r3, [r7, #14]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	617b      	str	r3, [r7, #20]
	while (length--) {
 8006c1e:	e007      	b.n	8006c30 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	617a      	str	r2, [r7, #20]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	68f9      	ldr	r1, [r7, #12]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff ff8e 	bl	8006b4c <crc_accumulate>
	while (length--) {
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	80fa      	strh	r2, [r7, #6]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f2      	bne.n	8006c20 <crc_accumulate_buffer+0x14>
        }
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8006c4e:	79fa      	ldrb	r2, [r7, #7]
 8006c50:	4613      	mov	r3, r2
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <mavlink_get_channel_status+0x24>)
 8006c5a:	4413      	add	r3, r2
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	2000042c 	.word	0x2000042c

08006c6c <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	70fb      	strb	r3, [r7, #3]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70bb      	strb	r3, [r7, #2]
 8006c82:	4613      	mov	r3, r2
 8006c84:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	22fe      	movs	r2, #254	; 0xfe
 8006c8a:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7e3a      	ldrb	r2, [r7, #24]
 8006c90:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	78fa      	ldrb	r2, [r7, #3]
 8006c96:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	78ba      	ldrb	r2, [r7, #2]
 8006c9c:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8006c9e:	787b      	ldrb	r3, [r7, #1]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff ffcf 	bl	8006c44 <mavlink_get_channel_status>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	799a      	ldrb	r2, [r3, #6]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8006cae:	787b      	ldrb	r3, [r7, #1]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff ffc7 	bl	8006c44 <mavlink_get_channel_status>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	799c      	ldrb	r4, [r3, #6]
 8006cba:	787b      	ldrb	r3, [r7, #1]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff ffc1 	bl	8006c44 <mavlink_get_channel_status>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	1c62      	adds	r2, r4, #1
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3303      	adds	r3, #3
 8006cce:	2105      	movs	r1, #5
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff ff7b 	bl	8006bcc <crc_calculate>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f103 0108 	add.w	r1, r3, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	78db      	ldrb	r3, [r3, #3]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	f7ff ff8d 	bl	8006c0c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	7f3b      	ldrb	r3, [r7, #28]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff ff27 	bl	8006b4c <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b299      	uxth	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3308      	adds	r3, #8
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	78d2      	ldrb	r2, [r2, #3]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	b2ca      	uxtb	r2, r1
 8006d10:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f103 0208 	add.w	r2, r3, #8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	78db      	ldrb	r3, [r3, #3]
 8006d26:	3301      	adds	r3, #1
 8006d28:	4413      	add	r3, r2
 8006d2a:	b2ca      	uxtb	r2, r1
 8006d2c:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8006d2e:	7e3b      	ldrb	r3, [r7, #24]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3308      	adds	r3, #8
 8006d34:	b29b      	uxth	r3, r3
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd90      	pop	{r4, r7, pc}

08006d3e <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af02      	add	r7, sp, #8
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	4608      	mov	r0, r1
 8006d48:	4611      	mov	r1, r2
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	70fb      	strb	r3, [r7, #3]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70bb      	strb	r3, [r7, #2]
 8006d54:	4613      	mov	r3, r2
 8006d56:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 8006d58:	78ba      	ldrb	r2, [r7, #2]
 8006d5a:	78f9      	ldrb	r1, [r7, #3]
 8006d5c:	7c3b      	ldrb	r3, [r7, #16]
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	787b      	ldrb	r3, [r7, #1]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff ff80 	bl	8006c6c <mavlink_finalize_message_chan>
 8006d6c:	4603      	mov	r3, r0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	1c99      	adds	r1, r3, #2
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	3306      	adds	r3, #6
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f00d ff79 	bl	8014c84 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	78db      	ldrb	r3, [r3, #3]
 8006d96:	3306      	adds	r3, #6
 8006d98:	461a      	mov	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	78db      	ldrb	r3, [r3, #3]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	b29b      	uxth	r3, r3
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60ba      	str	r2, [r7, #8]
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	460b      	mov	r3, r1
 8006de0:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8006de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006de8:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8006dea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dec:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 8006dee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006df0:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8006df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006df6:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8006df8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006dfc:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 8006dfe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e02:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 8006e04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e08:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8006e0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e0e:	847b      	strh	r3, [r7, #34]	; 0x22
	packet.port = port;
 8006e10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006e14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet.rssi = rssi;
 8006e18:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006e1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	3308      	adds	r3, #8
 8006e24:	f107 0110 	add.w	r1, r7, #16
 8006e28:	2216      	movs	r2, #22
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f00d ff2a 	bl	8014c84 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2223      	movs	r2, #35	; 0x23
 8006e34:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 8006e36:	7bba      	ldrb	r2, [r7, #14]
 8006e38:	7bf9      	ldrb	r1, [r7, #15]
 8006e3a:	23f4      	movs	r3, #244	; 0xf4
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	2316      	movs	r3, #22
 8006e40:	68b8      	ldr	r0, [r7, #8]
 8006e42:	f7ff ff7c 	bl	8006d3e <mavlink_finalize_message>
 8006e46:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	; 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <mavlinkInit>:
static UART_HandleTypeDef *uart;
uint8_t buffer__[MAX_LENGHT];
static int isTxcpl;
uint32_t send_time_us;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60ba      	str	r2, [r7, #8]
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8006e62:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <mavlinkInit+0x44>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
    index_ =0;
 8006e68:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <mavlinkInit+0x48>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8006e6e:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <mavlinkInit+0x4c>)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8006e74:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <mavlinkInit+0x50>)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 8006e7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ea4 <mavlinkInit+0x54>)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6013      	str	r3, [r2, #0]
    //uartt->Init.BaudRate = baudrate;
	//HAL_UART_Init(uartt);
	HAL_UART_Receive_IT(&huart1, &data,1);
 8006e80:	2201      	movs	r2, #1
 8006e82:	4909      	ldr	r1, [pc, #36]	; (8006ea8 <mavlinkInit+0x58>)
 8006e84:	4809      	ldr	r0, [pc, #36]	; (8006eac <mavlinkInit+0x5c>)
 8006e86:	f005 fbd2 	bl	800c62e <HAL_UART_Receive_IT>
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000424 	.word	0x20000424
 8006e98:	2000041d 	.word	0x2000041d
 8006e9c:	20004bec 	.word	0x20004bec
 8006ea0:	20004be4 	.word	0x20004be4
 8006ea4:	20000420 	.word	0x20000420
 8006ea8:	2000041c 	.word	0x2000041c
 8006eac:	20004a60 	.word	0x20004a60

08006eb0 <mavlink_rc_raw>:
    }
    HAL_UART_Receive_IT(uart, &data,1);
}
*/

void mavlink_rc_raw(uint16_t thortle,uint16_t servo_L, uint16_t servo_R){
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af0a      	add	r7, sp, #40	; 0x28
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	80fb      	strh	r3, [r7, #6]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	80bb      	strh	r3, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	807b      	strh	r3, [r7, #2]
	static uint32_t count = 0;
	if(isTxcpl)
 8006ec2:	4b1d      	ldr	r3, [pc, #116]	; (8006f38 <mavlink_rc_raw+0x88>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d031      	beq.n	8006f2e <mavlink_rc_raw+0x7e>
	{
        count++;
 8006eca:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <mavlink_rc_raw+0x8c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <mavlink_rc_raw+0x8c>)
 8006ed2:	6013      	str	r3, [r2, #0]
		mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <mavlink_rc_raw+0x90>)
 8006ed6:	7818      	ldrb	r0, [r3, #0]
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <mavlink_rc_raw+0x94>)
 8006eda:	7819      	ldrb	r1, [r3, #0]
 8006edc:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <mavlink_rc_raw+0x8c>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9308      	str	r3, [sp, #32]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9306      	str	r3, [sp, #24]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	9304      	str	r3, [sp, #16]
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	9303      	str	r3, [sp, #12]
 8006efc:	887b      	ldrh	r3, [r7, #2]
 8006efe:	9302      	str	r3, [sp, #8]
 8006f00:	88bb      	ldrh	r3, [r7, #4]
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	2301      	movs	r3, #1
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	4a0f      	ldr	r2, [pc, #60]	; (8006f48 <mavlink_rc_raw+0x98>)
 8006f0c:	f7ff ff60 	bl	8006dd0 <mavlink_msg_rc_channels_raw_pack>
					count,1,servo_L, servo_R, thortle,0,0,0,0,0,0);
		uint16_t len = mavlink_msg_to_send_buffer(buffer__,&msg);
 8006f10:	490d      	ldr	r1, [pc, #52]	; (8006f48 <mavlink_rc_raw+0x98>)
 8006f12:	480e      	ldr	r0, [pc, #56]	; (8006f4c <mavlink_rc_raw+0x9c>)
 8006f14:	f7ff ff2f 	bl	8006d76 <mavlink_msg_to_send_buffer>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Transmit_DMA(&huart1,buffer__,len);
 8006f1c:	89fb      	ldrh	r3, [r7, #14]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	490a      	ldr	r1, [pc, #40]	; (8006f4c <mavlink_rc_raw+0x9c>)
 8006f22:	480b      	ldr	r0, [pc, #44]	; (8006f50 <mavlink_rc_raw+0xa0>)
 8006f24:	f005 fbb4 	bl	800c690 <HAL_UART_Transmit_DMA>
		isTxcpl = 0;
 8006f28:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <mavlink_rc_raw+0x88>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
	}
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000424 	.word	0x20000424
 8006f3c:	20000428 	.word	0x20000428
 8006f40:	20004bec 	.word	0x20004bec
 8006f44:	20004be4 	.word	0x20004be4
 8006f48:	2000030c 	.word	0x2000030c
 8006f4c:	20004b1c 	.word	0x20004b1c
 8006f50:	20004a60 	.word	0x20004a60

08006f54 <mavlink_tx_cpl_callback>:
  isTxcpl = 0;
 }
}

void mavlink_tx_cpl_callback()
{   
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
	isTxcpl = 1;
 8006f58:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <mavlink_tx_cpl_callback+0x14>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	20000424 	.word	0x20000424

08006f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <HAL_Init+0x40>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <HAL_Init+0x40>)
 8006f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_Init+0x40>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <HAL_Init+0x40>)
 8006f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f88:	4b08      	ldr	r3, [pc, #32]	; (8006fac <HAL_Init+0x40>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a07      	ldr	r2, [pc, #28]	; (8006fac <HAL_Init+0x40>)
 8006f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f94:	2003      	movs	r0, #3
 8006f96:	f000 f8fc 	bl	8007192 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f9a:	200f      	movs	r0, #15
 8006f9c:	f7fe fa78 	bl	8005490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fa0:	f7fe fa4a 	bl	8005438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40023c00 	.word	0x40023c00

08006fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <HAL_IncTick+0x20>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <HAL_IncTick+0x24>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <HAL_IncTick+0x24>)
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000070 	.word	0x20000070
 8006fd4:	20004bf0 	.word	0x20004bf0

08006fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return uwTick;
 8006fdc:	4b03      	ldr	r3, [pc, #12]	; (8006fec <HAL_GetTick+0x14>)
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20004bf0 	.word	0x20004bf0

08006ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ff8:	f7ff ffee 	bl	8006fd8 <HAL_GetTick>
 8006ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d005      	beq.n	8007016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800700a:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <HAL_Delay+0x44>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007016:	bf00      	nop
 8007018:	f7ff ffde 	bl	8006fd8 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d8f7      	bhi.n	8007018 <HAL_Delay+0x28>
  {
  }
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000070 	.word	0x20000070

08007038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <__NVIC_SetPriorityGrouping+0x44>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007054:	4013      	ands	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800706a:	4a04      	ldr	r2, [pc, #16]	; (800707c <__NVIC_SetPriorityGrouping+0x44>)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	60d3      	str	r3, [r2, #12]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <__NVIC_GetPriorityGrouping+0x18>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f003 0307 	and.w	r3, r3, #7
}
 800708e:	4618      	mov	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	e000ed00 	.word	0xe000ed00

0800709c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	db0b      	blt.n	80070c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	f003 021f 	and.w	r2, r3, #31
 80070b4:	4907      	ldr	r1, [pc, #28]	; (80070d4 <__NVIC_EnableIRQ+0x38>)
 80070b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	2001      	movs	r0, #1
 80070be:	fa00 f202 	lsl.w	r2, r0, r2
 80070c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	e000e100 	.word	0xe000e100

080070d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	db0a      	blt.n	8007102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	490c      	ldr	r1, [pc, #48]	; (8007124 <__NVIC_SetPriority+0x4c>)
 80070f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f6:	0112      	lsls	r2, r2, #4
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	440b      	add	r3, r1
 80070fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007100:	e00a      	b.n	8007118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	4908      	ldr	r1, [pc, #32]	; (8007128 <__NVIC_SetPriority+0x50>)
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	3b04      	subs	r3, #4
 8007110:	0112      	lsls	r2, r2, #4
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	440b      	add	r3, r1
 8007116:	761a      	strb	r2, [r3, #24]
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000e100 	.word	0xe000e100
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	; 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f1c3 0307 	rsb	r3, r3, #7
 8007146:	2b04      	cmp	r3, #4
 8007148:	bf28      	it	cs
 800714a:	2304      	movcs	r3, #4
 800714c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	3304      	adds	r3, #4
 8007152:	2b06      	cmp	r3, #6
 8007154:	d902      	bls.n	800715c <NVIC_EncodePriority+0x30>
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	3b03      	subs	r3, #3
 800715a:	e000      	b.n	800715e <NVIC_EncodePriority+0x32>
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007160:	f04f 32ff 	mov.w	r2, #4294967295
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43da      	mvns	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	401a      	ands	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007174:	f04f 31ff 	mov.w	r1, #4294967295
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	fa01 f303 	lsl.w	r3, r1, r3
 800717e:	43d9      	mvns	r1, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007184:	4313      	orrs	r3, r2
         );
}
 8007186:	4618      	mov	r0, r3
 8007188:	3724      	adds	r7, #36	; 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff ff4c 	bl	8007038 <__NVIC_SetPriorityGrouping>
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071ba:	f7ff ff61 	bl	8007080 <__NVIC_GetPriorityGrouping>
 80071be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	6978      	ldr	r0, [r7, #20]
 80071c6:	f7ff ffb1 	bl	800712c <NVIC_EncodePriority>
 80071ca:	4602      	mov	r2, r0
 80071cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff ff80 	bl	80070d8 <__NVIC_SetPriority>
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff ff54 	bl	800709c <__NVIC_EnableIRQ>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007208:	f7ff fee6 	bl	8006fd8 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e099      	b.n	800734c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0201 	bic.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007238:	e00f      	b.n	800725a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800723a:	f7ff fecd 	bl	8006fd8 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b05      	cmp	r3, #5
 8007246:	d908      	bls.n	800725a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2203      	movs	r2, #3
 8007252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e078      	b.n	800734c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e8      	bne.n	800723a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4b38      	ldr	r3, [pc, #224]	; (8007354 <HAL_DMA_Init+0x158>)
 8007274:	4013      	ands	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800729e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d107      	bne.n	80072c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	4313      	orrs	r3, r2
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0307 	bic.w	r3, r3, #7
 80072da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d117      	bne.n	800731e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00e      	beq.n	800731e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fb0d 	bl	8007920 <DMA_CheckFifoParam>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800731a:	2301      	movs	r3, #1
 800731c:	e016      	b.n	800734c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fac4 	bl	80078b4 <DMA_CalcBaseAndBitshift>
 800732c:	4603      	mov	r3, r0
 800732e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007334:	223f      	movs	r2, #63	; 0x3f
 8007336:	409a      	lsls	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	f010803f 	.word	0xf010803f

08007358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_DMA_Start_IT+0x26>
 800737a:	2302      	movs	r3, #2
 800737c:	e040      	b.n	8007400 <HAL_DMA_Start_IT+0xa8>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b01      	cmp	r3, #1
 8007390:	d12f      	bne.n	80073f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fa56 	bl	8007858 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b0:	223f      	movs	r2, #63	; 0x3f
 80073b2:	409a      	lsls	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0216 	orr.w	r2, r2, #22
 80073c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0208 	orr.w	r2, r2, #8
 80073de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e005      	b.n	80073fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80073fa:	2302      	movs	r3, #2
 80073fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007416:	f7ff fddf 	bl	8006fd8 <HAL_GetTick>
 800741a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d008      	beq.n	800743a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2280      	movs	r2, #128	; 0x80
 800742c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e052      	b.n	80074e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0216 	bic.w	r2, r2, #22
 8007448:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695a      	ldr	r2, [r3, #20]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007458:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <HAL_DMA_Abort+0x62>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	2b00      	cmp	r3, #0
 8007468:	d007      	beq.n	800747a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0208 	bic.w	r2, r2, #8
 8007478:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800748a:	e013      	b.n	80074b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800748c:	f7ff fda4 	bl	8006fd8 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b05      	cmp	r3, #5
 8007498:	d90c      	bls.n	80074b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2203      	movs	r2, #3
 80074a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e015      	b.n	80074e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e4      	bne.n	800748c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c6:	223f      	movs	r2, #63	; 0x3f
 80074c8:	409a      	lsls	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d004      	beq.n	8007506 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2280      	movs	r2, #128	; 0x80
 8007500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e00c      	b.n	8007520 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2205      	movs	r2, #5
 800750a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007538:	4b92      	ldr	r3, [pc, #584]	; (8007784 <HAL_DMA_IRQHandler+0x258>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a92      	ldr	r2, [pc, #584]	; (8007788 <HAL_DMA_IRQHandler+0x25c>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	0a9b      	lsrs	r3, r3, #10
 8007544:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007556:	2208      	movs	r2, #8
 8007558:	409a      	lsls	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4013      	ands	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01a      	beq.n	8007598 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d013      	beq.n	8007598 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0204 	bic.w	r2, r2, #4
 800757e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007584:	2208      	movs	r2, #8
 8007586:	409a      	lsls	r2, r3
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	2201      	movs	r2, #1
 800759e:	409a      	lsls	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4013      	ands	r3, r2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d012      	beq.n	80075ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	2201      	movs	r2, #1
 80075bc:	409a      	lsls	r2, r3
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c6:	f043 0202 	orr.w	r2, r3, #2
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d2:	2204      	movs	r2, #4
 80075d4:	409a      	lsls	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4013      	ands	r3, r2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d012      	beq.n	8007604 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f0:	2204      	movs	r2, #4
 80075f2:	409a      	lsls	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	f043 0204 	orr.w	r2, r3, #4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007608:	2210      	movs	r2, #16
 800760a:	409a      	lsls	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4013      	ands	r3, r2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d043      	beq.n	800769c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d03c      	beq.n	800769c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007626:	2210      	movs	r2, #16
 8007628:	409a      	lsls	r2, r3
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d018      	beq.n	800766e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d024      	beq.n	800769c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
 800765a:	e01f      	b.n	800769c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
 800766c:	e016      	b.n	800769c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d107      	bne.n	800768c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0208 	bic.w	r2, r2, #8
 800768a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	2220      	movs	r2, #32
 80076a2:	409a      	lsls	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 808e 	beq.w	80077ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8086 	beq.w	80077ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c2:	2220      	movs	r2, #32
 80076c4:	409a      	lsls	r2, r3
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d136      	bne.n	8007744 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0216 	bic.w	r2, r2, #22
 80076e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695a      	ldr	r2, [r3, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <HAL_DMA_IRQHandler+0x1da>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0208 	bic.w	r2, r2, #8
 8007714:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771a:	223f      	movs	r2, #63	; 0x3f
 800771c:	409a      	lsls	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007736:	2b00      	cmp	r3, #0
 8007738:	d07d      	beq.n	8007836 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
        }
        return;
 8007742:	e078      	b.n	8007836 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01c      	beq.n	800778c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d108      	bne.n	8007772 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	2b00      	cmp	r3, #0
 8007766:	d030      	beq.n	80077ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
 8007770:	e02b      	b.n	80077ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d027      	beq.n	80077ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
 8007782:	e022      	b.n	80077ca <HAL_DMA_IRQHandler+0x29e>
 8007784:	20000018 	.word	0x20000018
 8007788:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10f      	bne.n	80077ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0210 	bic.w	r2, r2, #16
 80077a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d032      	beq.n	8007838 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d022      	beq.n	8007824 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2205      	movs	r2, #5
 80077e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d307      	bcc.n	8007812 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f2      	bne.n	80077f6 <HAL_DMA_IRQHandler+0x2ca>
 8007810:	e000      	b.n	8007814 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007812:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
 8007834:	e000      	b.n	8007838 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007836:	bf00      	nop
    }
  }
}
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop

08007840 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007874:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d108      	bne.n	8007898 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007896:	e007      	b.n	80078a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	3b10      	subs	r3, #16
 80078c4:	4a14      	ldr	r2, [pc, #80]	; (8007918 <DMA_CalcBaseAndBitshift+0x64>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078ce:	4a13      	ldr	r2, [pc, #76]	; (800791c <DMA_CalcBaseAndBitshift+0x68>)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d909      	bls.n	80078f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80078ea:	f023 0303 	bic.w	r3, r3, #3
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	659a      	str	r2, [r3, #88]	; 0x58
 80078f4:	e007      	b.n	8007906 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	aaaaaaab 	.word	0xaaaaaaab
 800791c:	08015be0 	.word	0x08015be0

08007920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11f      	bne.n	800797a <DMA_CheckFifoParam+0x5a>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d856      	bhi.n	80079ee <DMA_CheckFifoParam+0xce>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <DMA_CheckFifoParam+0x28>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007959 	.word	0x08007959
 800794c:	0800796b 	.word	0x0800796b
 8007950:	08007959 	.word	0x08007959
 8007954:	080079ef 	.word	0x080079ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d046      	beq.n	80079f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007968:	e043      	b.n	80079f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007972:	d140      	bne.n	80079f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007978:	e03d      	b.n	80079f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007982:	d121      	bne.n	80079c8 <DMA_CheckFifoParam+0xa8>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d837      	bhi.n	80079fa <DMA_CheckFifoParam+0xda>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <DMA_CheckFifoParam+0x70>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079a7 	.word	0x080079a7
 8007998:	080079a1 	.word	0x080079a1
 800799c:	080079b9 	.word	0x080079b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
      break;
 80079a4:	e030      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d025      	beq.n	80079fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079b6:	e022      	b.n	80079fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079c0:	d11f      	bne.n	8007a02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80079c6:	e01c      	b.n	8007a02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d903      	bls.n	80079d6 <DMA_CheckFifoParam+0xb6>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d003      	beq.n	80079dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80079d4:	e018      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
      break;
 80079da:	e015      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00e      	beq.n	8007a06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
      break;
 80079ec:	e00b      	b.n	8007a06 <DMA_CheckFifoParam+0xe6>
      break;
 80079ee:	bf00      	nop
 80079f0:	e00a      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      break;
 80079f2:	bf00      	nop
 80079f4:	e008      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      break;
 80079f6:	bf00      	nop
 80079f8:	e006      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <DMA_CheckFifoParam+0xe8>
      break;
 8007a06:	bf00      	nop
    }
  } 
  
  return status; 
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop

08007a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b089      	sub	sp, #36	; 0x24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e16b      	b.n	8007d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a34:	2201      	movs	r2, #1
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4013      	ands	r3, r2
 8007a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	f040 815a 	bne.w	8007d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d005      	beq.n	8007a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d130      	bne.n	8007acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	2203      	movs	r2, #3
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	091b      	lsrs	r3, r3, #4
 8007ab6:	f003 0201 	and.w	r2, r3, #1
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d017      	beq.n	8007b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	4013      	ands	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d123      	bne.n	8007b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	08da      	lsrs	r2, r3, #3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3208      	adds	r2, #8
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	220f      	movs	r2, #15
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	43db      	mvns	r3, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4013      	ands	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	fa02 f303 	lsl.w	r3, r2, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	08da      	lsrs	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3208      	adds	r2, #8
 8007b56:	69b9      	ldr	r1, [r7, #24]
 8007b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	2203      	movs	r2, #3
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	43db      	mvns	r3, r3
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	4013      	ands	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 0203 	and.w	r2, r3, #3
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80b4 	beq.w	8007d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	4b60      	ldr	r3, [pc, #384]	; (8007d24 <HAL_GPIO_Init+0x30c>)
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	4a5f      	ldr	r2, [pc, #380]	; (8007d24 <HAL_GPIO_Init+0x30c>)
 8007ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bac:	6453      	str	r3, [r2, #68]	; 0x44
 8007bae:	4b5d      	ldr	r3, [pc, #372]	; (8007d24 <HAL_GPIO_Init+0x30c>)
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bba:	4a5b      	ldr	r2, [pc, #364]	; (8007d28 <HAL_GPIO_Init+0x310>)
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	089b      	lsrs	r3, r3, #2
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	220f      	movs	r2, #15
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a52      	ldr	r2, [pc, #328]	; (8007d2c <HAL_GPIO_Init+0x314>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d02b      	beq.n	8007c3e <HAL_GPIO_Init+0x226>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a51      	ldr	r2, [pc, #324]	; (8007d30 <HAL_GPIO_Init+0x318>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d025      	beq.n	8007c3a <HAL_GPIO_Init+0x222>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a50      	ldr	r2, [pc, #320]	; (8007d34 <HAL_GPIO_Init+0x31c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01f      	beq.n	8007c36 <HAL_GPIO_Init+0x21e>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a4f      	ldr	r2, [pc, #316]	; (8007d38 <HAL_GPIO_Init+0x320>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d019      	beq.n	8007c32 <HAL_GPIO_Init+0x21a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a4e      	ldr	r2, [pc, #312]	; (8007d3c <HAL_GPIO_Init+0x324>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_GPIO_Init+0x216>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a4d      	ldr	r2, [pc, #308]	; (8007d40 <HAL_GPIO_Init+0x328>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00d      	beq.n	8007c2a <HAL_GPIO_Init+0x212>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a4c      	ldr	r2, [pc, #304]	; (8007d44 <HAL_GPIO_Init+0x32c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <HAL_GPIO_Init+0x20e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a4b      	ldr	r2, [pc, #300]	; (8007d48 <HAL_GPIO_Init+0x330>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d101      	bne.n	8007c22 <HAL_GPIO_Init+0x20a>
 8007c1e:	2307      	movs	r3, #7
 8007c20:	e00e      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c22:	2308      	movs	r3, #8
 8007c24:	e00c      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c26:	2306      	movs	r3, #6
 8007c28:	e00a      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c2a:	2305      	movs	r3, #5
 8007c2c:	e008      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	e006      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c32:	2303      	movs	r3, #3
 8007c34:	e004      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e002      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <HAL_GPIO_Init+0x228>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	f002 0203 	and.w	r2, r2, #3
 8007c46:	0092      	lsls	r2, r2, #2
 8007c48:	4093      	lsls	r3, r2
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c50:	4935      	ldr	r1, [pc, #212]	; (8007d28 <HAL_GPIO_Init+0x310>)
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	089b      	lsrs	r3, r3, #2
 8007c56:	3302      	adds	r3, #2
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c5e:	4b3b      	ldr	r3, [pc, #236]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	43db      	mvns	r3, r3
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c82:	4a32      	ldr	r2, [pc, #200]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007c88:	4b30      	ldr	r3, [pc, #192]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4013      	ands	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cac:	4a27      	ldr	r2, [pc, #156]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cb2:	4b26      	ldr	r3, [pc, #152]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cd6:	4a1d      	ldr	r2, [pc, #116]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	43db      	mvns	r3, r3
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d00:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <HAL_GPIO_Init+0x334>)
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	2b0f      	cmp	r3, #15
 8007d10:	f67f ae90 	bls.w	8007a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3724      	adds	r7, #36	; 0x24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	40023800 	.word	0x40023800
 8007d28:	40013800 	.word	0x40013800
 8007d2c:	40020000 	.word	0x40020000
 8007d30:	40020400 	.word	0x40020400
 8007d34:	40020800 	.word	0x40020800
 8007d38:	40020c00 	.word	0x40020c00
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	40021400 	.word	0x40021400
 8007d44:	40021800 	.word	0x40021800
 8007d48:	40021c00 	.word	0x40021c00
 8007d4c:	40013c00 	.word	0x40013c00

08007d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691a      	ldr	r2, [r3, #16]
 8007d60:	887b      	ldrh	r3, [r7, #2]
 8007d62:	4013      	ands	r3, r2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	e001      	b.n	8007d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d90:	787b      	ldrb	r3, [r7, #1]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d96:	887a      	ldrh	r2, [r7, #2]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d9c:	e003      	b.n	8007da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	041a      	lsls	r2, r3, #16
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	619a      	str	r2, [r3, #24]
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007dc4:	887a      	ldrh	r2, [r7, #2]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	041a      	lsls	r2, r3, #16
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	43d9      	mvns	r1, r3
 8007dd0:	887b      	ldrh	r3, [r7, #2]
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	619a      	str	r2, [r3, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e12b      	b.n	8008052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fd f8d2 	bl	8004fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e4c:	f002 f94e 	bl	800a0ec <HAL_RCC_GetPCLK1Freq>
 8007e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4a81      	ldr	r2, [pc, #516]	; (800805c <HAL_I2C_Init+0x274>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d807      	bhi.n	8007e6c <HAL_I2C_Init+0x84>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4a80      	ldr	r2, [pc, #512]	; (8008060 <HAL_I2C_Init+0x278>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bf94      	ite	ls
 8007e64:	2301      	movls	r3, #1
 8007e66:	2300      	movhi	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e006      	b.n	8007e7a <HAL_I2C_Init+0x92>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a7d      	ldr	r2, [pc, #500]	; (8008064 <HAL_I2C_Init+0x27c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	bf94      	ite	ls
 8007e74:	2301      	movls	r3, #1
 8007e76:	2300      	movhi	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e0e7      	b.n	8008052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4a78      	ldr	r2, [pc, #480]	; (8008068 <HAL_I2C_Init+0x280>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	0c9b      	lsrs	r3, r3, #18
 8007e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4a6a      	ldr	r2, [pc, #424]	; (800805c <HAL_I2C_Init+0x274>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d802      	bhi.n	8007ebc <HAL_I2C_Init+0xd4>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	e009      	b.n	8007ed0 <HAL_I2C_Init+0xe8>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	4a69      	ldr	r2, [pc, #420]	; (800806c <HAL_I2C_Init+0x284>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	099b      	lsrs	r3, r3, #6
 8007ece:	3301      	adds	r3, #1
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	495c      	ldr	r1, [pc, #368]	; (800805c <HAL_I2C_Init+0x274>)
 8007eec:	428b      	cmp	r3, r1
 8007eee:	d819      	bhi.n	8007f24 <HAL_I2C_Init+0x13c>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	1e59      	subs	r1, r3, #1
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f04:	400b      	ands	r3, r1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_I2C_Init+0x138>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1e59      	subs	r1, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f18:	3301      	adds	r3, #1
 8007f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f1e:	e051      	b.n	8007fc4 <HAL_I2C_Init+0x1dc>
 8007f20:	2304      	movs	r3, #4
 8007f22:	e04f      	b.n	8007fc4 <HAL_I2C_Init+0x1dc>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d111      	bne.n	8007f50 <HAL_I2C_Init+0x168>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	1e58      	subs	r0, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6859      	ldr	r1, [r3, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	440b      	add	r3, r1
 8007f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bf0c      	ite	eq
 8007f48:	2301      	moveq	r3, #1
 8007f4a:	2300      	movne	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	e012      	b.n	8007f76 <HAL_I2C_Init+0x18e>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	1e58      	subs	r0, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6859      	ldr	r1, [r3, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	0099      	lsls	r1, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f66:	3301      	adds	r3, #1
 8007f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_I2C_Init+0x196>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e022      	b.n	8007fc4 <HAL_I2C_Init+0x1dc>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10e      	bne.n	8007fa4 <HAL_I2C_Init+0x1bc>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1e58      	subs	r0, r3, #1
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6859      	ldr	r1, [r3, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	440b      	add	r3, r1
 8007f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f98:	3301      	adds	r3, #1
 8007f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa2:	e00f      	b.n	8007fc4 <HAL_I2C_Init+0x1dc>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	1e58      	subs	r0, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6859      	ldr	r1, [r3, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	0099      	lsls	r1, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fba:	3301      	adds	r3, #1
 8007fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	6809      	ldr	r1, [r1, #0]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6911      	ldr	r1, [r2, #16]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	68d2      	ldr	r2, [r2, #12]
 8007ffe:	4311      	orrs	r1, r2
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	430b      	orrs	r3, r1
 8008006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2220      	movs	r2, #32
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	000186a0 	.word	0x000186a0
 8008060:	001e847f 	.word	0x001e847f
 8008064:	003d08ff 	.word	0x003d08ff
 8008068:	431bde83 	.word	0x431bde83
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	607a      	str	r2, [r7, #4]
 800807a:	461a      	mov	r2, r3
 800807c:	460b      	mov	r3, r1
 800807e:	817b      	strh	r3, [r7, #10]
 8008080:	4613      	mov	r3, r2
 8008082:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008084:	f7fe ffa8 	bl	8006fd8 <HAL_GetTick>
 8008088:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b20      	cmp	r3, #32
 8008094:	f040 80e0 	bne.w	8008258 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2319      	movs	r3, #25
 800809e:	2201      	movs	r2, #1
 80080a0:	4970      	ldr	r1, [pc, #448]	; (8008264 <HAL_I2C_Master_Transmit+0x1f4>)
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f001 fa24 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80080ae:	2302      	movs	r3, #2
 80080b0:	e0d3      	b.n	800825a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_I2C_Master_Transmit+0x50>
 80080bc:	2302      	movs	r3, #2
 80080be:	e0cc      	b.n	800825a <HAL_I2C_Master_Transmit+0x1ea>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d007      	beq.n	80080e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0201 	orr.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2221      	movs	r2, #33	; 0x21
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2210      	movs	r2, #16
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	893a      	ldrh	r2, [r7, #8]
 8008116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4a50      	ldr	r2, [pc, #320]	; (8008268 <HAL_I2C_Master_Transmit+0x1f8>)
 8008126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008128:	8979      	ldrh	r1, [r7, #10]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	6a3a      	ldr	r2, [r7, #32]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 ff10 	bl	8008f54 <I2C_MasterRequestWrite>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e08d      	b.n	800825a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800813e:	2300      	movs	r3, #0
 8008140:	613b      	str	r3, [r7, #16]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008154:	e066      	b.n	8008224 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	6a39      	ldr	r1, [r7, #32]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f001 fa9e 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	2b04      	cmp	r3, #4
 800816c:	d107      	bne.n	800817e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800817c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e06b      	b.n	800825a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	781a      	ldrb	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d11b      	bne.n	80081f8 <HAL_I2C_Master_Transmit+0x188>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d017      	beq.n	80081f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	6a39      	ldr	r1, [r7, #32]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 fa8e 	bl	800971e <I2C_WaitOnBTFFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00d      	beq.n	8008224 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	2b04      	cmp	r3, #4
 800820e:	d107      	bne.n	8008220 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800821e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e01a      	b.n	800825a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008228:	2b00      	cmp	r3, #0
 800822a:	d194      	bne.n	8008156 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	e000      	b.n	800825a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008258:	2302      	movs	r3, #2
  }
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	00100002 	.word	0x00100002
 8008268:	ffff0000 	.word	0xffff0000

0800826c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08c      	sub	sp, #48	; 0x30
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	607a      	str	r2, [r7, #4]
 8008276:	461a      	mov	r2, r3
 8008278:	460b      	mov	r3, r1
 800827a:	817b      	strh	r3, [r7, #10]
 800827c:	4613      	mov	r3, r2
 800827e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008280:	f7fe feaa 	bl	8006fd8 <HAL_GetTick>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b20      	cmp	r3, #32
 8008290:	f040 820b 	bne.w	80086aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2319      	movs	r3, #25
 800829a:	2201      	movs	r2, #1
 800829c:	497c      	ldr	r1, [pc, #496]	; (8008490 <HAL_I2C_Master_Receive+0x224>)
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f001 f926 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80082aa:	2302      	movs	r3, #2
 80082ac:	e1fe      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_I2C_Master_Receive+0x50>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e1f7      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d007      	beq.n	80082e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0201 	orr.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2222      	movs	r2, #34	; 0x22
 80082f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2210      	movs	r2, #16
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	893a      	ldrh	r2, [r7, #8]
 8008312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a5c      	ldr	r2, [pc, #368]	; (8008494 <HAL_I2C_Master_Receive+0x228>)
 8008322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008324:	8979      	ldrh	r1, [r7, #10]
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fe94 	bl	8009058 <I2C_MasterRequestRead>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e1b8      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d113      	bne.n	800836a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008342:	2300      	movs	r3, #0
 8008344:	623b      	str	r3, [r7, #32]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	623b      	str	r3, [r7, #32]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	623b      	str	r3, [r7, #32]
 8008356:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e18c      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836e:	2b01      	cmp	r3, #1
 8008370:	d11b      	bne.n	80083aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e16c      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d11b      	bne.n	80083ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083d2:	2300      	movs	r3, #0
 80083d4:	61bb      	str	r3, [r7, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	e14c      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008410:	e138      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008416:	2b03      	cmp	r3, #3
 8008418:	f200 80f1 	bhi.w	80085fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008420:	2b01      	cmp	r3, #1
 8008422:	d123      	bne.n	800846c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f001 f9b9 	bl	80097a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e139      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	855a      	strh	r2, [r3, #42]	; 0x2a
 800846a:	e10b      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008470:	2b02      	cmp	r3, #2
 8008472:	d14e      	bne.n	8008512 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2200      	movs	r2, #0
 800847c:	4906      	ldr	r1, [pc, #24]	; (8008498 <HAL_I2C_Master_Receive+0x22c>)
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f001 f836 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d008      	beq.n	800849c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e10e      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
 800848e:	bf00      	nop
 8008490:	00100002 	.word	0x00100002
 8008494:	ffff0000 	.word	0xffff0000
 8008498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008510:	e0b8      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	2200      	movs	r2, #0
 800851a:	4966      	ldr	r1, [pc, #408]	; (80086b4 <HAL_I2C_Master_Receive+0x448>)
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 ffe7 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0bf      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	2200      	movs	r2, #0
 8008576:	494f      	ldr	r1, [pc, #316]	; (80086b4 <HAL_I2C_Master_Receive+0x448>)
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 ffb9 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e091      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085fc:	e042      	b.n	8008684 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f001 f8cc 	bl	80097a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e04c      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691a      	ldr	r2, [r3, #16]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b04      	cmp	r3, #4
 8008650:	d118      	bne.n	8008684 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	691a      	ldr	r2, [r3, #16]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008688:	2b00      	cmp	r3, #0
 800868a:	f47f aec2 	bne.w	8008412 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2220      	movs	r2, #32
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e000      	b.n	80086ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80086aa:	2302      	movs	r3, #2
  }
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3728      	adds	r7, #40	; 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	00010004 	.word	0x00010004

080086b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	817b      	strh	r3, [r7, #10]
 80086ca:	460b      	mov	r3, r1
 80086cc:	813b      	strh	r3, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086d2:	f7fe fc81 	bl	8006fd8 <HAL_GetTick>
 80086d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	f040 80d9 	bne.w	8008898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2319      	movs	r3, #25
 80086ec:	2201      	movs	r2, #1
 80086ee:	496d      	ldr	r1, [pc, #436]	; (80088a4 <HAL_I2C_Mem_Write+0x1ec>)
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fefd 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
 80086fe:	e0cc      	b.n	800889a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008706:	2b01      	cmp	r3, #1
 8008708:	d101      	bne.n	800870e <HAL_I2C_Mem_Write+0x56>
 800870a:	2302      	movs	r3, #2
 800870c:	e0c5      	b.n	800889a <HAL_I2C_Mem_Write+0x1e2>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d007      	beq.n	8008734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2221      	movs	r2, #33	; 0x21
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2240      	movs	r2, #64	; 0x40
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a3a      	ldr	r2, [r7, #32]
 800875e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a4d      	ldr	r2, [pc, #308]	; (80088a8 <HAL_I2C_Mem_Write+0x1f0>)
 8008774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008776:	88f8      	ldrh	r0, [r7, #6]
 8008778:	893a      	ldrh	r2, [r7, #8]
 800877a:	8979      	ldrh	r1, [r7, #10]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	4603      	mov	r3, r0
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fd34 	bl	80091f4 <I2C_RequestMemoryWrite>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d052      	beq.n	8008838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e081      	b.n	800889a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 ff7e 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00d      	beq.n	80087c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d107      	bne.n	80087be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e06b      	b.n	800889a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	781a      	ldrb	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d11b      	bne.n	8008838 <HAL_I2C_Mem_Write+0x180>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	d017      	beq.n	8008838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	781a      	ldrb	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1aa      	bne.n	8008796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 ff6a 	bl	800971e <I2C_WaitOnBTFFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00d      	beq.n	800886c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	2b04      	cmp	r3, #4
 8008856:	d107      	bne.n	8008868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e016      	b.n	800889a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	e000      	b.n	800889a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	00100002 	.word	0x00100002
 80088a8:	ffff0000 	.word	0xffff0000

080088ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08c      	sub	sp, #48	; 0x30
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	817b      	strh	r3, [r7, #10]
 80088be:	460b      	mov	r3, r1
 80088c0:	813b      	strh	r3, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088c6:	f7fe fb87 	bl	8006fd8 <HAL_GetTick>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	f040 8208 	bne.w	8008cea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	2319      	movs	r3, #25
 80088e0:	2201      	movs	r2, #1
 80088e2:	497b      	ldr	r1, [pc, #492]	; (8008ad0 <HAL_I2C_Mem_Read+0x224>)
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fe03 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80088f0:	2302      	movs	r3, #2
 80088f2:	e1fb      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_I2C_Mem_Read+0x56>
 80088fe:	2302      	movs	r3, #2
 8008900:	e1f4      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b01      	cmp	r3, #1
 8008916:	d007      	beq.n	8008928 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0201 	orr.w	r2, r2, #1
 8008926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2222      	movs	r2, #34	; 0x22
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a5b      	ldr	r2, [pc, #364]	; (8008ad4 <HAL_I2C_Mem_Read+0x228>)
 8008968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800896a:	88f8      	ldrh	r0, [r7, #6]
 800896c:	893a      	ldrh	r2, [r7, #8]
 800896e:	8979      	ldrh	r1, [r7, #10]
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	4603      	mov	r3, r0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fcd0 	bl	8009320 <I2C_RequestMemoryRead>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e1b0      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	d113      	bne.n	80089ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	623b      	str	r3, [r7, #32]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	623b      	str	r3, [r7, #32]
 80089a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	e184      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d11b      	bne.n	80089fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	61fb      	str	r3, [r7, #28]
 80089e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	e164      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d11b      	bne.n	8008a3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a22:	2300      	movs	r3, #0
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	61bb      	str	r3, [r7, #24]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	61bb      	str	r3, [r7, #24]
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	e144      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008a50:	e138      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	f200 80f1 	bhi.w	8008c3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d123      	bne.n	8008aac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fe99 	bl	80097a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e139      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008aaa:	e10b      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d14e      	bne.n	8008b52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	2200      	movs	r2, #0
 8008abc:	4906      	ldr	r1, [pc, #24]	; (8008ad8 <HAL_I2C_Mem_Read+0x22c>)
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fd16 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d008      	beq.n	8008adc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e10e      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
 8008ace:	bf00      	nop
 8008ad0:	00100002 	.word	0x00100002
 8008ad4:	ffff0000 	.word	0xffff0000
 8008ad8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691a      	ldr	r2, [r3, #16]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	3b01      	subs	r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	691a      	ldr	r2, [r3, #16]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b50:	e0b8      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4966      	ldr	r1, [pc, #408]	; (8008cf4 <HAL_I2C_Mem_Read+0x448>)
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fcc7 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e0bf      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	494f      	ldr	r1, [pc, #316]	; (8008cf4 <HAL_I2C_Mem_Read+0x448>)
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fc99 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e091      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691a      	ldr	r2, [r3, #16]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	3b01      	subs	r3, #1
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c3c:	e042      	b.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fdac 	bl	80097a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e04c      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d118      	bne.n	8008cc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	b2d2      	uxtb	r2, r2
 8008c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f47f aec2 	bne.w	8008a52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008cea:	2302      	movs	r3, #2
  }
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3728      	adds	r7, #40	; 0x28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	00010004 	.word	0x00010004

08008cf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	; 0x28
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	607a      	str	r2, [r7, #4]
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	460b      	mov	r3, r1
 8008d06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008d08:	f7fe f966 	bl	8006fd8 <HAL_GetTick>
 8008d0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	f040 8111 	bne.w	8008f42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2319      	movs	r3, #25
 8008d26:	2201      	movs	r2, #1
 8008d28:	4988      	ldr	r1, [pc, #544]	; (8008f4c <HAL_I2C_IsDeviceReady+0x254>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fbe0 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008d36:	2302      	movs	r3, #2
 8008d38:	e104      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_I2C_IsDeviceReady+0x50>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e0fd      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d007      	beq.n	8008d6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0201 	orr.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2224      	movs	r2, #36	; 0x24
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4a70      	ldr	r2, [pc, #448]	; (8008f50 <HAL_I2C_IsDeviceReady+0x258>)
 8008d90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008da0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fb9e 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc8:	d103      	bne.n	8008dd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e0b6      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008dd6:	897b      	ldrh	r3, [r7, #10]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008de4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008de6:	f7fe f8f7 	bl	8006fd8 <HAL_GetTick>
 8008dea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	bf0c      	ite	eq
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	2300      	movne	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e10:	bf0c      	ite	eq
 8008e12:	2301      	moveq	r3, #1
 8008e14:	2300      	movne	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008e1a:	e025      	b.n	8008e68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e1c:	f7fe f8dc 	bl	8006fd8 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d302      	bcc.n	8008e32 <HAL_I2C_IsDeviceReady+0x13a>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	22a0      	movs	r2, #160	; 0xa0
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	bf0c      	ite	eq
 8008e48:	2301      	moveq	r3, #1
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5e:	bf0c      	ite	eq
 8008e60:	2301      	moveq	r3, #1
 8008e62:	2300      	movne	r3, #0
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2ba0      	cmp	r3, #160	; 0xa0
 8008e72:	d005      	beq.n	8008e80 <HAL_I2C_IsDeviceReady+0x188>
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <HAL_I2C_IsDeviceReady+0x188>
 8008e7a:	7dbb      	ldrb	r3, [r7, #22]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0cd      	beq.n	8008e1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d129      	bne.n	8008eea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	613b      	str	r3, [r7, #16]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2319      	movs	r3, #25
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	4921      	ldr	r1, [pc, #132]	; (8008f4c <HAL_I2C_IsDeviceReady+0x254>)
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 fb12 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e036      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e02c      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	2319      	movs	r3, #25
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	490f      	ldr	r1, [pc, #60]	; (8008f4c <HAL_I2C_IsDeviceReady+0x254>)
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 faee 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e012      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	3301      	adds	r3, #1
 8008f22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	f4ff af32 	bcc.w	8008d92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
  }
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	00100002 	.word	0x00100002
 8008f50:	ffff0000 	.word	0xffff0000

08008f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	460b      	mov	r3, r1
 8008f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	d006      	beq.n	8008f7e <I2C_MasterRequestWrite+0x2a>
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d003      	beq.n	8008f7e <I2C_MasterRequestWrite+0x2a>
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f7c:	d108      	bne.n	8008f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	e00b      	b.n	8008fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	2b12      	cmp	r3, #18
 8008f96:	d107      	bne.n	8008fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fa9b 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00d      	beq.n	8008fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fce:	d103      	bne.n	8008fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e035      	b.n	8009048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe4:	d108      	bne.n	8008ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fe6:	897b      	ldrh	r3, [r7, #10]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ff4:	611a      	str	r2, [r3, #16]
 8008ff6:	e01b      	b.n	8009030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008ff8:	897b      	ldrh	r3, [r7, #10]
 8008ffa:	11db      	asrs	r3, r3, #7
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f003 0306 	and.w	r3, r3, #6
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f063 030f 	orn	r3, r3, #15
 8009008:	b2da      	uxtb	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	490e      	ldr	r1, [pc, #56]	; (8009050 <I2C_MasterRequestWrite+0xfc>)
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fac1 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e010      	b.n	8009048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	4907      	ldr	r1, [pc, #28]	; (8009054 <I2C_MasterRequestWrite+0x100>)
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fab1 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	00010008 	.word	0x00010008
 8009054:	00010002 	.word	0x00010002

08009058 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	460b      	mov	r3, r1
 8009066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800907c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b08      	cmp	r3, #8
 8009082:	d006      	beq.n	8009092 <I2C_MasterRequestRead+0x3a>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d003      	beq.n	8009092 <I2C_MasterRequestRead+0x3a>
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009090:	d108      	bne.n	80090a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	e00b      	b.n	80090bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a8:	2b11      	cmp	r3, #17
 80090aa:	d107      	bne.n	80090bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fa11 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00d      	beq.n	80090f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e2:	d103      	bne.n	80090ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e079      	b.n	80091e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090f8:	d108      	bne.n	800910c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090fa:	897b      	ldrh	r3, [r7, #10]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	f043 0301 	orr.w	r3, r3, #1
 8009102:	b2da      	uxtb	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	611a      	str	r2, [r3, #16]
 800910a:	e05f      	b.n	80091cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800910c:	897b      	ldrh	r3, [r7, #10]
 800910e:	11db      	asrs	r3, r3, #7
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	b2db      	uxtb	r3, r3
 8009118:	f063 030f 	orn	r3, r3, #15
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4930      	ldr	r1, [pc, #192]	; (80091ec <I2C_MasterRequestRead+0x194>)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fa37 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e054      	b.n	80091e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800913a:	897b      	ldrh	r3, [r7, #10]
 800913c:	b2da      	uxtb	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4929      	ldr	r1, [pc, #164]	; (80091f0 <I2C_MasterRequestRead+0x198>)
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 fa27 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e044      	b.n	80091e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800915a:	2300      	movs	r3, #0
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800917e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f9af 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a6:	d103      	bne.n	80091b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e017      	b.n	80091e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80091b4:	897b      	ldrh	r3, [r7, #10]
 80091b6:	11db      	asrs	r3, r3, #7
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0306 	and.w	r3, r3, #6
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f063 030e 	orn	r3, r3, #14
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4907      	ldr	r1, [pc, #28]	; (80091f0 <I2C_MasterRequestRead+0x198>)
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f9e3 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	00010008 	.word	0x00010008
 80091f0:	00010002 	.word	0x00010002

080091f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	461a      	mov	r2, r3
 8009202:	4603      	mov	r3, r0
 8009204:	817b      	strh	r3, [r7, #10]
 8009206:	460b      	mov	r3, r1
 8009208:	813b      	strh	r3, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800921c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	2200      	movs	r2, #0
 8009226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f960 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00d      	beq.n	8009252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009244:	d103      	bne.n	800924e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800924c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e05f      	b.n	8009312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009252:	897b      	ldrh	r3, [r7, #10]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	6a3a      	ldr	r2, [r7, #32]
 8009266:	492d      	ldr	r1, [pc, #180]	; (800931c <I2C_RequestMemoryWrite+0x128>)
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 f998 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e04c      	b.n	8009312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	617b      	str	r3, [r7, #20]
 800928c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800928e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009290:	6a39      	ldr	r1, [r7, #32]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fa02 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00d      	beq.n	80092ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d107      	bne.n	80092b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e02b      	b.n	8009312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d105      	bne.n	80092cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092c0:	893b      	ldrh	r3, [r7, #8]
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	611a      	str	r2, [r3, #16]
 80092ca:	e021      	b.n	8009310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80092cc:	893b      	ldrh	r3, [r7, #8]
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092dc:	6a39      	ldr	r1, [r7, #32]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f9dc 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00d      	beq.n	8009306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d107      	bne.n	8009302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e005      	b.n	8009312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009306:	893b      	ldrh	r3, [r7, #8]
 8009308:	b2da      	uxtb	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	00010002 	.word	0x00010002

08009320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af02      	add	r7, sp, #8
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	461a      	mov	r2, r3
 800932e:	4603      	mov	r3, r0
 8009330:	817b      	strh	r3, [r7, #10]
 8009332:	460b      	mov	r3, r1
 8009334:	813b      	strh	r3, [r7, #8]
 8009336:	4613      	mov	r3, r2
 8009338:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009348:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	2200      	movs	r2, #0
 8009362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f8c2 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00d      	beq.n	800938e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009380:	d103      	bne.n	800938a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e0aa      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800938e:	897b      	ldrh	r3, [r7, #10]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800939c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	6a3a      	ldr	r2, [r7, #32]
 80093a2:	4952      	ldr	r1, [pc, #328]	; (80094ec <I2C_RequestMemoryRead+0x1cc>)
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f8fa 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e097      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093cc:	6a39      	ldr	r1, [r7, #32]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 f964 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d107      	bne.n	80093f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e076      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093f6:	88fb      	ldrh	r3, [r7, #6]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d105      	bne.n	8009408 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093fc:	893b      	ldrh	r3, [r7, #8]
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	611a      	str	r2, [r3, #16]
 8009406:	e021      	b.n	800944c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009408:	893b      	ldrh	r3, [r7, #8]
 800940a:	0a1b      	lsrs	r3, r3, #8
 800940c:	b29b      	uxth	r3, r3
 800940e:	b2da      	uxtb	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009418:	6a39      	ldr	r1, [r7, #32]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f93e 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00d      	beq.n	8009442 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	2b04      	cmp	r3, #4
 800942c:	d107      	bne.n	800943e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800943c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e050      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009442:	893b      	ldrh	r3, [r7, #8]
 8009444:	b2da      	uxtb	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800944c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944e:	6a39      	ldr	r1, [r7, #32]
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f923 	bl	800969c <I2C_WaitOnTXEFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00d      	beq.n	8009478 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	2b04      	cmp	r3, #4
 8009462:	d107      	bne.n	8009474 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009472:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e035      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009486:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2200      	movs	r2, #0
 8009490:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f82b 	bl	80094f0 <I2C_WaitOnFlagUntilTimeout>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00d      	beq.n	80094bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ae:	d103      	bne.n	80094b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e013      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80094bc:	897b      	ldrh	r3, [r7, #10]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f043 0301 	orr.w	r3, r3, #1
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	4906      	ldr	r1, [pc, #24]	; (80094ec <I2C_RequestMemoryRead+0x1cc>)
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 f863 	bl	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	00010002 	.word	0x00010002

080094f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	4613      	mov	r3, r2
 80094fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009500:	e025      	b.n	800954e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009508:	d021      	beq.n	800954e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800950a:	f7fd fd65 	bl	8006fd8 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d302      	bcc.n	8009520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d116      	bne.n	800954e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953a:	f043 0220 	orr.w	r2, r3, #32
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e023      	b.n	8009596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	0c1b      	lsrs	r3, r3, #16
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b01      	cmp	r3, #1
 8009556:	d10d      	bne.n	8009574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	43da      	mvns	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4013      	ands	r3, r2
 8009564:	b29b      	uxth	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	bf0c      	ite	eq
 800956a:	2301      	moveq	r3, #1
 800956c:	2300      	movne	r3, #0
 800956e:	b2db      	uxtb	r3, r3
 8009570:	461a      	mov	r2, r3
 8009572:	e00c      	b.n	800958e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	43da      	mvns	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4013      	ands	r3, r2
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf0c      	ite	eq
 8009586:	2301      	moveq	r3, #1
 8009588:	2300      	movne	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	461a      	mov	r2, r3
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	429a      	cmp	r2, r3
 8009592:	d0b6      	beq.n	8009502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095ac:	e051      	b.n	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095bc:	d123      	bne.n	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f043 0204 	orr.w	r2, r3, #4
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e046      	b.n	8009694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d021      	beq.n	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800960e:	f7fd fce3 	bl	8006fd8 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	429a      	cmp	r2, r3
 800961c:	d302      	bcc.n	8009624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d116      	bne.n	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2220      	movs	r2, #32
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	f043 0220 	orr.w	r2, r3, #32
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e020      	b.n	8009694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b01      	cmp	r3, #1
 800965a:	d10c      	bne.n	8009676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	43da      	mvns	r2, r3
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	4013      	ands	r3, r2
 8009668:	b29b      	uxth	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	bf14      	ite	ne
 800966e:	2301      	movne	r3, #1
 8009670:	2300      	moveq	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	e00b      	b.n	800968e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	43da      	mvns	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	4013      	ands	r3, r2
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	bf14      	ite	ne
 8009688:	2301      	movne	r3, #1
 800968a:	2300      	moveq	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d18d      	bne.n	80095ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096a8:	e02d      	b.n	8009706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f8ce 	bl	800984c <I2C_IsAcknowledgeFailed>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e02d      	b.n	8009716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c0:	d021      	beq.n	8009706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c2:	f7fd fc89 	bl	8006fd8 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d302      	bcc.n	80096d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d116      	bne.n	8009706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	f043 0220 	orr.w	r2, r3, #32
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e007      	b.n	8009716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009710:	2b80      	cmp	r3, #128	; 0x80
 8009712:	d1ca      	bne.n	80096aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800972a:	e02d      	b.n	8009788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f88d 	bl	800984c <I2C_IsAcknowledgeFailed>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e02d      	b.n	8009798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009742:	d021      	beq.n	8009788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009744:	f7fd fc48 	bl	8006fd8 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	429a      	cmp	r2, r3
 8009752:	d302      	bcc.n	800975a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d116      	bne.n	8009788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	f043 0220 	orr.w	r2, r3, #32
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	e007      	b.n	8009798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	2b04      	cmp	r3, #4
 8009794:	d1ca      	bne.n	800972c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097ac:	e042      	b.n	8009834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	f003 0310 	and.w	r3, r3, #16
 80097b8:	2b10      	cmp	r3, #16
 80097ba:	d119      	bne.n	80097f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f06f 0210 	mvn.w	r2, #16
 80097c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e029      	b.n	8009844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097f0:	f7fd fbf2 	bl	8006fd8 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d302      	bcc.n	8009806 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d116      	bne.n	8009834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	f043 0220 	orr.w	r2, r3, #32
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e007      	b.n	8009844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983e:	2b40      	cmp	r3, #64	; 0x40
 8009840:	d1b5      	bne.n	80097ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009862:	d11b      	bne.n	800989c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800986c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	f043 0204 	orr.w	r2, r3, #4
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
	...

080098ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e264      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d075      	beq.n	80099b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80098ca:	4ba3      	ldr	r3, [pc, #652]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 030c 	and.w	r3, r3, #12
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d00c      	beq.n	80098f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098d6:	4ba0      	ldr	r3, [pc, #640]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d112      	bne.n	8009908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098e2:	4b9d      	ldr	r3, [pc, #628]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098ee:	d10b      	bne.n	8009908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098f0:	4b99      	ldr	r3, [pc, #612]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d05b      	beq.n	80099b4 <HAL_RCC_OscConfig+0x108>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d157      	bne.n	80099b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e23f      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009910:	d106      	bne.n	8009920 <HAL_RCC_OscConfig+0x74>
 8009912:	4b91      	ldr	r3, [pc, #580]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a90      	ldr	r2, [pc, #576]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	e01d      	b.n	800995c <HAL_RCC_OscConfig+0xb0>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009928:	d10c      	bne.n	8009944 <HAL_RCC_OscConfig+0x98>
 800992a:	4b8b      	ldr	r3, [pc, #556]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a8a      	ldr	r2, [pc, #552]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	4b88      	ldr	r3, [pc, #544]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a87      	ldr	r2, [pc, #540]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 800993c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	e00b      	b.n	800995c <HAL_RCC_OscConfig+0xb0>
 8009944:	4b84      	ldr	r3, [pc, #528]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a83      	ldr	r2, [pc, #524]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 800994a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	4b81      	ldr	r3, [pc, #516]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a80      	ldr	r2, [pc, #512]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800995a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d013      	beq.n	800998c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009964:	f7fd fb38 	bl	8006fd8 <HAL_GetTick>
 8009968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800996a:	e008      	b.n	800997e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800996c:	f7fd fb34 	bl	8006fd8 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b64      	cmp	r3, #100	; 0x64
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e204      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800997e:	4b76      	ldr	r3, [pc, #472]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f0      	beq.n	800996c <HAL_RCC_OscConfig+0xc0>
 800998a:	e014      	b.n	80099b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800998c:	f7fd fb24 	bl	8006fd8 <HAL_GetTick>
 8009990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009992:	e008      	b.n	80099a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009994:	f7fd fb20 	bl	8006fd8 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b64      	cmp	r3, #100	; 0x64
 80099a0:	d901      	bls.n	80099a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e1f0      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099a6:	4b6c      	ldr	r3, [pc, #432]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f0      	bne.n	8009994 <HAL_RCC_OscConfig+0xe8>
 80099b2:	e000      	b.n	80099b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d063      	beq.n	8009a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80099c2:	4b65      	ldr	r3, [pc, #404]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f003 030c 	and.w	r3, r3, #12
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80099ce:	4b62      	ldr	r3, [pc, #392]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80099d6:	2b08      	cmp	r3, #8
 80099d8:	d11c      	bne.n	8009a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80099da:	4b5f      	ldr	r3, [pc, #380]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d116      	bne.n	8009a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099e6:	4b5c      	ldr	r3, [pc, #368]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <HAL_RCC_OscConfig+0x152>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d001      	beq.n	80099fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e1c4      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099fe:	4b56      	ldr	r3, [pc, #344]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	4952      	ldr	r1, [pc, #328]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a12:	e03a      	b.n	8009a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d020      	beq.n	8009a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a1c:	4b4f      	ldr	r3, [pc, #316]	; (8009b5c <HAL_RCC_OscConfig+0x2b0>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a22:	f7fd fad9 	bl	8006fd8 <HAL_GetTick>
 8009a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a28:	e008      	b.n	8009a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a2a:	f7fd fad5 	bl	8006fd8 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d901      	bls.n	8009a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e1a5      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a3c:	4b46      	ldr	r3, [pc, #280]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0302 	and.w	r3, r3, #2
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0f0      	beq.n	8009a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a48:	4b43      	ldr	r3, [pc, #268]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	00db      	lsls	r3, r3, #3
 8009a56:	4940      	ldr	r1, [pc, #256]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	600b      	str	r3, [r1, #0]
 8009a5c:	e015      	b.n	8009a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a5e:	4b3f      	ldr	r3, [pc, #252]	; (8009b5c <HAL_RCC_OscConfig+0x2b0>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a64:	f7fd fab8 	bl	8006fd8 <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a6c:	f7fd fab4 	bl	8006fd8 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e184      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a7e:	4b36      	ldr	r3, [pc, #216]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f0      	bne.n	8009a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d030      	beq.n	8009af8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d016      	beq.n	8009acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <HAL_RCC_OscConfig+0x2b4>)
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aa4:	f7fd fa98 	bl	8006fd8 <HAL_GetTick>
 8009aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009aaa:	e008      	b.n	8009abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009aac:	f7fd fa94 	bl	8006fd8 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d901      	bls.n	8009abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e164      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009abe:	4b26      	ldr	r3, [pc, #152]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0f0      	beq.n	8009aac <HAL_RCC_OscConfig+0x200>
 8009aca:	e015      	b.n	8009af8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009acc:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <HAL_RCC_OscConfig+0x2b4>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ad2:	f7fd fa81 	bl	8006fd8 <HAL_GetTick>
 8009ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ad8:	e008      	b.n	8009aec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ada:	f7fd fa7d 	bl	8006fd8 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d901      	bls.n	8009aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e14d      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aec:	4b1a      	ldr	r3, [pc, #104]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1f0      	bne.n	8009ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 80a0 	beq.w	8009c46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b0a:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10f      	bne.n	8009b36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b16:	2300      	movs	r3, #0
 8009b18:	60bb      	str	r3, [r7, #8]
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	4a0e      	ldr	r2, [pc, #56]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b24:	6413      	str	r3, [r2, #64]	; 0x40
 8009b26:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <HAL_RCC_OscConfig+0x2ac>)
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b2e:	60bb      	str	r3, [r7, #8]
 8009b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b32:	2301      	movs	r3, #1
 8009b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <HAL_RCC_OscConfig+0x2b8>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d121      	bne.n	8009b86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b42:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <HAL_RCC_OscConfig+0x2b8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a07      	ldr	r2, [pc, #28]	; (8009b64 <HAL_RCC_OscConfig+0x2b8>)
 8009b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b4e:	f7fd fa43 	bl	8006fd8 <HAL_GetTick>
 8009b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b54:	e011      	b.n	8009b7a <HAL_RCC_OscConfig+0x2ce>
 8009b56:	bf00      	nop
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	42470000 	.word	0x42470000
 8009b60:	42470e80 	.word	0x42470e80
 8009b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b68:	f7fd fa36 	bl	8006fd8 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e106      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b7a:	4b85      	ldr	r3, [pc, #532]	; (8009d90 <HAL_RCC_OscConfig+0x4e4>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f0      	beq.n	8009b68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d106      	bne.n	8009b9c <HAL_RCC_OscConfig+0x2f0>
 8009b8e:	4b81      	ldr	r3, [pc, #516]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b92:	4a80      	ldr	r2, [pc, #512]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009b94:	f043 0301 	orr.w	r3, r3, #1
 8009b98:	6713      	str	r3, [r2, #112]	; 0x70
 8009b9a:	e01c      	b.n	8009bd6 <HAL_RCC_OscConfig+0x32a>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	2b05      	cmp	r3, #5
 8009ba2:	d10c      	bne.n	8009bbe <HAL_RCC_OscConfig+0x312>
 8009ba4:	4b7b      	ldr	r3, [pc, #492]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba8:	4a7a      	ldr	r2, [pc, #488]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009baa:	f043 0304 	orr.w	r3, r3, #4
 8009bae:	6713      	str	r3, [r2, #112]	; 0x70
 8009bb0:	4b78      	ldr	r3, [pc, #480]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb4:	4a77      	ldr	r2, [pc, #476]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	6713      	str	r3, [r2, #112]	; 0x70
 8009bbc:	e00b      	b.n	8009bd6 <HAL_RCC_OscConfig+0x32a>
 8009bbe:	4b75      	ldr	r3, [pc, #468]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc2:	4a74      	ldr	r2, [pc, #464]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bc4:	f023 0301 	bic.w	r3, r3, #1
 8009bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8009bca:	4b72      	ldr	r3, [pc, #456]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bce:	4a71      	ldr	r2, [pc, #452]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bd0:	f023 0304 	bic.w	r3, r3, #4
 8009bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d015      	beq.n	8009c0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bde:	f7fd f9fb 	bl	8006fd8 <HAL_GetTick>
 8009be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009be4:	e00a      	b.n	8009bfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009be6:	f7fd f9f7 	bl	8006fd8 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d901      	bls.n	8009bfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e0c5      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bfc:	4b65      	ldr	r3, [pc, #404]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0ee      	beq.n	8009be6 <HAL_RCC_OscConfig+0x33a>
 8009c08:	e014      	b.n	8009c34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c0a:	f7fd f9e5 	bl	8006fd8 <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c10:	e00a      	b.n	8009c28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c12:	f7fd f9e1 	bl	8006fd8 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e0af      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c28:	4b5a      	ldr	r3, [pc, #360]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1ee      	bne.n	8009c12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d105      	bne.n	8009c46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c3a:	4b56      	ldr	r3, [pc, #344]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	4a55      	ldr	r2, [pc, #340]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 809b 	beq.w	8009d86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c50:	4b50      	ldr	r3, [pc, #320]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 030c 	and.w	r3, r3, #12
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d05c      	beq.n	8009d16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d141      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c64:	4b4c      	ldr	r3, [pc, #304]	; (8009d98 <HAL_RCC_OscConfig+0x4ec>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c6a:	f7fd f9b5 	bl	8006fd8 <HAL_GetTick>
 8009c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c70:	e008      	b.n	8009c84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c72:	f7fd f9b1 	bl	8006fd8 <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d901      	bls.n	8009c84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e081      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c84:	4b43      	ldr	r3, [pc, #268]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f0      	bne.n	8009c72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	69da      	ldr	r2, [r3, #28]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	019b      	lsls	r3, r3, #6
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	085b      	lsrs	r3, r3, #1
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	041b      	lsls	r3, r3, #16
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb2:	061b      	lsls	r3, r3, #24
 8009cb4:	4937      	ldr	r1, [pc, #220]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cba:	4b37      	ldr	r3, [pc, #220]	; (8009d98 <HAL_RCC_OscConfig+0x4ec>)
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc0:	f7fd f98a 	bl	8006fd8 <HAL_GetTick>
 8009cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cc8:	f7fd f986 	bl	8006fd8 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e056      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cda:	4b2e      	ldr	r3, [pc, #184]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d0f0      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x41c>
 8009ce6:	e04e      	b.n	8009d86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ce8:	4b2b      	ldr	r3, [pc, #172]	; (8009d98 <HAL_RCC_OscConfig+0x4ec>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cee:	f7fd f973 	bl	8006fd8 <HAL_GetTick>
 8009cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cf4:	e008      	b.n	8009d08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cf6:	f7fd f96f 	bl	8006fd8 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d901      	bls.n	8009d08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e03f      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d08:	4b22      	ldr	r3, [pc, #136]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1f0      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x44a>
 8009d14:	e037      	b.n	8009d86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e032      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d22:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <HAL_RCC_OscConfig+0x4e8>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d028      	beq.n	8009d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d121      	bne.n	8009d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d11a      	bne.n	8009d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d52:	4013      	ands	r3, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d111      	bne.n	8009d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d68:	085b      	lsrs	r3, r3, #1
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d107      	bne.n	8009d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d001      	beq.n	8009d86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e000      	b.n	8009d88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	40007000 	.word	0x40007000
 8009d94:	40023800 	.word	0x40023800
 8009d98:	42470060 	.word	0x42470060

08009d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0cc      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009db0:	4b68      	ldr	r3, [pc, #416]	; (8009f54 <HAL_RCC_ClockConfig+0x1b8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d90c      	bls.n	8009dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dbe:	4b65      	ldr	r3, [pc, #404]	; (8009f54 <HAL_RCC_ClockConfig+0x1b8>)
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dc6:	4b63      	ldr	r3, [pc, #396]	; (8009f54 <HAL_RCC_ClockConfig+0x1b8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d001      	beq.n	8009dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e0b8      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0302 	and.w	r3, r3, #2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d020      	beq.n	8009e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d005      	beq.n	8009dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009df0:	4b59      	ldr	r3, [pc, #356]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	4a58      	ldr	r2, [pc, #352]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0308 	and.w	r3, r3, #8
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e08:	4b53      	ldr	r3, [pc, #332]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	4a52      	ldr	r2, [pc, #328]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e14:	4b50      	ldr	r3, [pc, #320]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	494d      	ldr	r1, [pc, #308]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d044      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d107      	bne.n	8009e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e3a:	4b47      	ldr	r3, [pc, #284]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d119      	bne.n	8009e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e07f      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d003      	beq.n	8009e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d107      	bne.n	8009e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e5a:	4b3f      	ldr	r3, [pc, #252]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d109      	bne.n	8009e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e06f      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e6a:	4b3b      	ldr	r3, [pc, #236]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e067      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e7a:	4b37      	ldr	r3, [pc, #220]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f023 0203 	bic.w	r2, r3, #3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	4934      	ldr	r1, [pc, #208]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e8c:	f7fd f8a4 	bl	8006fd8 <HAL_GetTick>
 8009e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e92:	e00a      	b.n	8009eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e94:	f7fd f8a0 	bl	8006fd8 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e04f      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009eaa:	4b2b      	ldr	r3, [pc, #172]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 020c 	and.w	r2, r3, #12
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d1eb      	bne.n	8009e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ebc:	4b25      	ldr	r3, [pc, #148]	; (8009f54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0307 	and.w	r3, r3, #7
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d20c      	bcs.n	8009ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eca:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	b2d2      	uxtb	r2, r2
 8009ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ed2:	4b20      	ldr	r3, [pc, #128]	; (8009f54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d001      	beq.n	8009ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e032      	b.n	8009f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d008      	beq.n	8009f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ef0:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	4916      	ldr	r1, [pc, #88]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0308 	and.w	r3, r3, #8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	490e      	ldr	r1, [pc, #56]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f22:	f000 f821 	bl	8009f68 <HAL_RCC_GetSysClockFreq>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <HAL_RCC_ClockConfig+0x1bc>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	091b      	lsrs	r3, r3, #4
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	490a      	ldr	r1, [pc, #40]	; (8009f5c <HAL_RCC_ClockConfig+0x1c0>)
 8009f34:	5ccb      	ldrb	r3, [r1, r3]
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <HAL_RCC_ClockConfig+0x1c4>)
 8009f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <HAL_RCC_ClockConfig+0x1c8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb faa4 	bl	8005490 <HAL_InitTick>

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	40023c00 	.word	0x40023c00
 8009f58:	40023800 	.word	0x40023800
 8009f5c:	08015bc8 	.word	0x08015bc8
 8009f60:	20000018 	.word	0x20000018
 8009f64:	2000006c 	.word	0x2000006c

08009f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009f6e:	2100      	movs	r1, #0
 8009f70:	6079      	str	r1, [r7, #4]
 8009f72:	2100      	movs	r1, #0
 8009f74:	60f9      	str	r1, [r7, #12]
 8009f76:	2100      	movs	r1, #0
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f7e:	4952      	ldr	r1, [pc, #328]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f80:	6889      	ldr	r1, [r1, #8]
 8009f82:	f001 010c 	and.w	r1, r1, #12
 8009f86:	2908      	cmp	r1, #8
 8009f88:	d00d      	beq.n	8009fa6 <HAL_RCC_GetSysClockFreq+0x3e>
 8009f8a:	2908      	cmp	r1, #8
 8009f8c:	f200 8094 	bhi.w	800a0b8 <HAL_RCC_GetSysClockFreq+0x150>
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d002      	beq.n	8009f9a <HAL_RCC_GetSysClockFreq+0x32>
 8009f94:	2904      	cmp	r1, #4
 8009f96:	d003      	beq.n	8009fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8009f98:	e08e      	b.n	800a0b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f9a:	4b4c      	ldr	r3, [pc, #304]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x164>)
 8009f9c:	60bb      	str	r3, [r7, #8]
       break;
 8009f9e:	e08e      	b.n	800a0be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009fa0:	4b4b      	ldr	r3, [pc, #300]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fa2:	60bb      	str	r3, [r7, #8]
      break;
 8009fa4:	e08b      	b.n	800a0be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009fa6:	4948      	ldr	r1, [pc, #288]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fa8:	6849      	ldr	r1, [r1, #4]
 8009faa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009fae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009fb0:	4945      	ldr	r1, [pc, #276]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fb2:	6849      	ldr	r1, [r1, #4]
 8009fb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009fb8:	2900      	cmp	r1, #0
 8009fba:	d024      	beq.n	800a006 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fbc:	4942      	ldr	r1, [pc, #264]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fbe:	6849      	ldr	r1, [r1, #4]
 8009fc0:	0989      	lsrs	r1, r1, #6
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	f04f 0100 	mov.w	r1, #0
 8009fc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009fcc:	f04f 0500 	mov.w	r5, #0
 8009fd0:	ea00 0204 	and.w	r2, r0, r4
 8009fd4:	ea01 0305 	and.w	r3, r1, r5
 8009fd8:	493d      	ldr	r1, [pc, #244]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fda:	fb01 f003 	mul.w	r0, r1, r3
 8009fde:	2100      	movs	r1, #0
 8009fe0:	fb01 f102 	mul.w	r1, r1, r2
 8009fe4:	1844      	adds	r4, r0, r1
 8009fe6:	493a      	ldr	r1, [pc, #232]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fe8:	fba2 0101 	umull	r0, r1, r2, r1
 8009fec:	1863      	adds	r3, r4, r1
 8009fee:	4619      	mov	r1, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	f7f6 fdce 	bl	8000b98 <__aeabi_uldivmod>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4613      	mov	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	e04a      	b.n	800a09c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a006:	4b30      	ldr	r3, [pc, #192]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	099b      	lsrs	r3, r3, #6
 800a00c:	461a      	mov	r2, r3
 800a00e:	f04f 0300 	mov.w	r3, #0
 800a012:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a016:	f04f 0100 	mov.w	r1, #0
 800a01a:	ea02 0400 	and.w	r4, r2, r0
 800a01e:	ea03 0501 	and.w	r5, r3, r1
 800a022:	4620      	mov	r0, r4
 800a024:	4629      	mov	r1, r5
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	014b      	lsls	r3, r1, #5
 800a030:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a034:	0142      	lsls	r2, r0, #5
 800a036:	4610      	mov	r0, r2
 800a038:	4619      	mov	r1, r3
 800a03a:	1b00      	subs	r0, r0, r4
 800a03c:	eb61 0105 	sbc.w	r1, r1, r5
 800a040:	f04f 0200 	mov.w	r2, #0
 800a044:	f04f 0300 	mov.w	r3, #0
 800a048:	018b      	lsls	r3, r1, #6
 800a04a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a04e:	0182      	lsls	r2, r0, #6
 800a050:	1a12      	subs	r2, r2, r0
 800a052:	eb63 0301 	sbc.w	r3, r3, r1
 800a056:	f04f 0000 	mov.w	r0, #0
 800a05a:	f04f 0100 	mov.w	r1, #0
 800a05e:	00d9      	lsls	r1, r3, #3
 800a060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a064:	00d0      	lsls	r0, r2, #3
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	1912      	adds	r2, r2, r4
 800a06c:	eb45 0303 	adc.w	r3, r5, r3
 800a070:	f04f 0000 	mov.w	r0, #0
 800a074:	f04f 0100 	mov.w	r1, #0
 800a078:	0299      	lsls	r1, r3, #10
 800a07a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a07e:	0290      	lsls	r0, r2, #10
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4610      	mov	r0, r2
 800a086:	4619      	mov	r1, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	f7f6 fd82 	bl	8000b98 <__aeabi_uldivmod>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4613      	mov	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a09c:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b4:	60bb      	str	r3, [r7, #8]
      break;
 800a0b6:	e002      	b.n	800a0be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0b8:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x164>)
 800a0ba:	60bb      	str	r3, [r7, #8]
      break;
 800a0bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0be:	68bb      	ldr	r3, [r7, #8]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	00f42400 	.word	0x00f42400
 800a0d0:	017d7840 	.word	0x017d7840

0800a0d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0d8:	4b03      	ldr	r3, [pc, #12]	; (800a0e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0da:	681b      	ldr	r3, [r3, #0]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	20000018 	.word	0x20000018

0800a0ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0f0:	f7ff fff0 	bl	800a0d4 <HAL_RCC_GetHCLKFreq>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	0a9b      	lsrs	r3, r3, #10
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	4903      	ldr	r1, [pc, #12]	; (800a110 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a102:	5ccb      	ldrb	r3, [r1, r3]
 800a104:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a108:	4618      	mov	r0, r3
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	40023800 	.word	0x40023800
 800a110:	08015bd8 	.word	0x08015bd8

0800a114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a118:	f7ff ffdc 	bl	800a0d4 <HAL_RCC_GetHCLKFreq>
 800a11c:	4602      	mov	r2, r0
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	0b5b      	lsrs	r3, r3, #13
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	4903      	ldr	r1, [pc, #12]	; (800a138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a12a:	5ccb      	ldrb	r3, [r1, r3]
 800a12c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a130:	4618      	mov	r0, r3
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40023800 	.word	0x40023800
 800a138:	08015bd8 	.word	0x08015bd8

0800a13c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	220f      	movs	r2, #15
 800a14a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a14c:	4b12      	ldr	r3, [pc, #72]	; (800a198 <HAL_RCC_GetClockConfig+0x5c>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 0203 	and.w	r2, r3, #3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a158:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <HAL_RCC_GetClockConfig+0x5c>)
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <HAL_RCC_GetClockConfig+0x5c>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a170:	4b09      	ldr	r3, [pc, #36]	; (800a198 <HAL_RCC_GetClockConfig+0x5c>)
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	08db      	lsrs	r3, r3, #3
 800a176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a17e:	4b07      	ldr	r3, [pc, #28]	; (800a19c <HAL_RCC_GetClockConfig+0x60>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0207 	and.w	r2, r3, #7
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	601a      	str	r2, [r3, #0]
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40023800 	.word	0x40023800
 800a19c:	40023c00 	.word	0x40023c00

0800a1a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e022      	b.n	800a1f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d105      	bne.n	800a1ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7fb f847 	bl	8005258 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2203      	movs	r2, #3
 800a1ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f814 	bl	800a200 <HAL_SD_InitCard>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e00a      	b.n	800a1f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a200:	b5b0      	push	{r4, r5, r7, lr}
 800a202:	b08e      	sub	sp, #56	; 0x38
 800a204:	af04      	add	r7, sp, #16
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a208:	2300      	movs	r3, #0
 800a20a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a218:	2300      	movs	r3, #0
 800a21a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a21c:	2376      	movs	r3, #118	; 0x76
 800a21e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681d      	ldr	r5, [r3, #0]
 800a224:	466c      	mov	r4, sp
 800a226:	f107 0314 	add.w	r3, r7, #20
 800a22a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a22e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a232:	f107 0308 	add.w	r3, r7, #8
 800a236:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a238:	4628      	mov	r0, r5
 800a23a:	f003 fbaf 	bl	800d99c <SDIO_Init>
 800a23e:	4603      	mov	r3, r0
 800a240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e04c      	b.n	800a2ea <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a250:	4b28      	ldr	r3, [pc, #160]	; (800a2f4 <HAL_SD_InitCard+0xf4>)
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f003 fbe7 	bl	800da2e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a260:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <HAL_SD_InitCard+0xf4>)
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 ff6a 	bl	800b140 <SD_PowerON>
 800a26c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e02e      	b.n	800a2ea <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fe8b 	bl	800afa8 <SD_InitCard>
 800a292:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00b      	beq.n	800a2b2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e01b      	b.n	800a2ea <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f003 fc4a 	bl	800db54 <SDMMC_CmdBlockLength>
 800a2c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00f      	beq.n	800a2e8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <HAL_SD_InitCard+0xf8>)
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e000      	b.n	800a2ea <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3728      	adds	r7, #40	; 0x28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	422580a0 	.word	0x422580a0
 800a2f8:	004005ff 	.word	0x004005ff

0800a2fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b08c      	sub	sp, #48	; 0x30
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d107      	bne.n	800a324 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a318:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0c0      	b.n	800a4a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	f040 80b9 	bne.w	800a4a4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	441a      	add	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a342:	429a      	cmp	r2, r3
 800a344:	d907      	bls.n	800a356 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e0a7      	b.n	800a4a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2203      	movs	r2, #3
 800a35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a374:	f043 0302 	orr.w	r3, r3, #2
 800a378:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	4a4c      	ldr	r2, [pc, #304]	; (800a4b0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a386:	4a4b      	ldr	r2, [pc, #300]	; (800a4b4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a388:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2200      	movs	r2, #0
 800a390:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	2200      	movs	r2, #0
 800a398:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3380      	adds	r3, #128	; 0x80
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	025b      	lsls	r3, r3, #9
 800a3c8:	089b      	lsrs	r3, r3, #2
 800a3ca:	f7fc ffc5 	bl	8007358 <HAL_DMA_Start_IT>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d017      	beq.n	800a404 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a3e2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a33      	ldr	r2, [pc, #204]	; (800a4b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a3ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e050      	b.n	800a4a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a404:	4b2d      	ldr	r3, [pc, #180]	; (800a4bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a406:	2201      	movs	r2, #1
 800a408:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d002      	beq.n	800a418 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	025b      	lsls	r3, r3, #9
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	025b      	lsls	r3, r3, #9
 800a422:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a424:	2390      	movs	r3, #144	; 0x90
 800a426:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a428:	2302      	movs	r3, #2
 800a42a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a430:	2301      	movs	r3, #1
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f107 0210 	add.w	r2, r7, #16
 800a43c:	4611      	mov	r1, r2
 800a43e:	4618      	mov	r0, r3
 800a440:	f003 fb5c 	bl	800dafc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d90a      	bls.n	800a460 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2282      	movs	r2, #130	; 0x82
 800a44e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a456:	4618      	mov	r0, r3
 800a458:	f003 fbc0 	bl	800dbdc <SDMMC_CmdReadMultiBlock>
 800a45c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a45e:	e009      	b.n	800a474 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2281      	movs	r2, #129	; 0x81
 800a464:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46c:	4618      	mov	r0, r3
 800a46e:	f003 fb93 	bl	800db98 <SDMMC_CmdReadSingleBlock>
 800a472:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d012      	beq.n	800a4a0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a0e      	ldr	r2, [pc, #56]	; (800a4b8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a480:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e002      	b.n	800a4a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e000      	b.n	800a4a6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a4a4:	2302      	movs	r3, #2
  }
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3730      	adds	r7, #48	; 0x30
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800adb7 	.word	0x0800adb7
 800a4b4:	0800ae29 	.word	0x0800ae29
 800a4b8:	004005ff 	.word	0x004005ff
 800a4bc:	4225858c 	.word	0x4225858c

0800a4c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b08c      	sub	sp, #48	; 0x30
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d107      	bne.n	800a4e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e0c5      	b.n	800a674 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	f040 80be 	bne.w	800a672 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a4fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	441a      	add	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a506:	429a      	cmp	r2, r3
 800a508:	d907      	bls.n	800a51a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e0ac      	b.n	800a674 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2203      	movs	r2, #3
 800a51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2200      	movs	r2, #0
 800a528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	6812      	ldr	r2, [r2, #0]
 800a534:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a538:	f043 0302 	orr.w	r3, r3, #2
 800a53c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a542:	4a4e      	ldr	r2, [pc, #312]	; (800a67c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a54a:	4a4d      	ldr	r2, [pc, #308]	; (800a680 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a54c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a552:	2200      	movs	r2, #0
 800a554:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d002      	beq.n	800a564 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	025b      	lsls	r3, r3, #9
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d90a      	bls.n	800a580 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	22a0      	movs	r2, #160	; 0xa0
 800a56e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a576:	4618      	mov	r0, r3
 800a578:	f003 fb74 	bl	800dc64 <SDMMC_CmdWriteMultiBlock>
 800a57c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a57e:	e009      	b.n	800a594 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2290      	movs	r2, #144	; 0x90
 800a584:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a58c:	4618      	mov	r0, r3
 800a58e:	f003 fb47 	bl	800dc20 <SDMMC_CmdWriteSingleBlock>
 800a592:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d012      	beq.n	800a5c0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a39      	ldr	r2, [pc, #228]	; (800a684 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a5a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e059      	b.n	800a674 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a5c0:	4b31      	ldr	r3, [pc, #196]	; (800a688 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ca:	2240      	movs	r2, #64	; 0x40
 800a5cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3380      	adds	r3, #128	; 0x80
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	025b      	lsls	r3, r3, #9
 800a5fc:	089b      	lsrs	r3, r3, #2
 800a5fe:	f7fc feab 	bl	8007358 <HAL_DMA_Start_IT>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01c      	beq.n	800a642 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a616:	f023 0302 	bic.w	r3, r3, #2
 800a61a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a18      	ldr	r2, [pc, #96]	; (800a684 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e018      	b.n	800a674 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a642:	f04f 33ff 	mov.w	r3, #4294967295
 800a646:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	025b      	lsls	r3, r3, #9
 800a64c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a64e:	2390      	movs	r3, #144	; 0x90
 800a650:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a652:	2300      	movs	r3, #0
 800a654:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a656:	2300      	movs	r3, #0
 800a658:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f107 0210 	add.w	r2, r7, #16
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f003 fa47 	bl	800dafc <SDIO_ConfigData>

      return HAL_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	e000      	b.n	800a674 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a672:	2302      	movs	r3, #2
  }
}
 800a674:	4618      	mov	r0, r3
 800a676:	3730      	adds	r7, #48	; 0x30
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	0800ad8d 	.word	0x0800ad8d
 800a680:	0800ae29 	.word	0x0800ae29
 800a684:	004005ff 	.word	0x004005ff
 800a688:	4225858c 	.word	0x4225858c

0800a68c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a698:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d008      	beq.n	800a6ba <HAL_SD_IRQHandler+0x2e>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f003 0308 	and.w	r3, r3, #8
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fdfa 	bl	800b2ac <SD_Read_IT>
 800a6b8:	e165      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 808f 	beq.w	800a7e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6d2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a6e2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a6e6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0201 	bic.w	r2, r2, #1
 800a6f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f003 0308 	and.w	r3, r3, #8
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d039      	beq.n	800a776 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d104      	bne.n	800a716 <HAL_SD_IRQHandler+0x8a>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d011      	beq.n	800a73a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f003 fac4 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800a720:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d008      	beq.n	800a73a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	431a      	orrs	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f92f 	bl	800a998 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a742:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d104      	bne.n	800a766 <HAL_SD_IRQHandler+0xda>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f003 fee2 	bl	800e530 <HAL_SD_RxCpltCallback>
 800a76c:	e10b      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f003 fed4 	bl	800e51c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a774:	e107      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 8102 	beq.w	800a986 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f003 0320 	and.w	r3, r3, #32
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d011      	beq.n	800a7b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f003 fa89 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800a796:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d008      	beq.n	800a7b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8f4 	bl	800a998 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f040 80e5 	bne.w	800a986 <HAL_SD_IRQHandler+0x2fa>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f040 80df 	bne.w	800a986 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0208 	bic.w	r2, r2, #8
 800a7d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f003 fe9b 	bl	800e51c <HAL_SD_TxCpltCallback>
}
 800a7e6:	e0ce      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <HAL_SD_IRQHandler+0x17c>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f003 0308 	and.w	r3, r3, #8
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fda4 	bl	800b34e <SD_Write_IT>
 800a806:	e0be      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a80e:	f240 233a 	movw	r3, #570	; 0x23a
 800a812:	4013      	ands	r3, r2
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80b6 	beq.w	800a986 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82c:	f043 0202 	orr.w	r2, r3, #2
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83a:	f003 0308 	and.w	r3, r3, #8
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d005      	beq.n	800a84e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	f043 0208 	orr.w	r2, r3, #8
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a854:	f003 0320 	and.w	r3, r3, #32
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a860:	f043 0220 	orr.w	r2, r3, #32
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86e:	f003 0310 	and.w	r3, r3, #16
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87a:	f043 0210 	orr.w	r2, r3, #16
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a894:	f043 0208 	orr.w	r2, r3, #8
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f240 723a 	movw	r2, #1850	; 0x73a
 800a8a4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a8b4:	f023 0302 	bic.w	r3, r3, #2
 800a8b8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f003 f9f2 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f003 0308 	and.w	r3, r3, #8
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f855 	bl	800a998 <HAL_SD_ErrorCallback>
}
 800a8ee:	e04a      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d045      	beq.n	800a986 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <HAL_SD_IRQHandler+0x282>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d011      	beq.n	800a932 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a912:	4a1f      	ldr	r2, [pc, #124]	; (800a990 <HAL_SD_IRQHandler+0x304>)
 800a914:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fc fde4 	bl	80074e8 <HAL_DMA_Abort_IT>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d02f      	beq.n	800a986 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 face 	bl	800aecc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a930:	e029      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d104      	bne.n	800a946 <HAL_SD_IRQHandler+0x2ba>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f003 0302 	and.w	r3, r3, #2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d011      	beq.n	800a96a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	4a12      	ldr	r2, [pc, #72]	; (800a994 <HAL_SD_IRQHandler+0x308>)
 800a94c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a952:	4618      	mov	r0, r3
 800a954:	f7fc fdc8 	bl	80074e8 <HAL_DMA_Abort_IT>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d013      	beq.n	800a986 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fae9 	bl	800af3a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a968:	e00d      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f003 fdc2 	bl	800e508 <HAL_SD_AbortCallback>
}
 800a984:	e7ff      	b.n	800a986 <HAL_SD_IRQHandler+0x2fa>
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	0800aecd 	.word	0x0800aecd
 800a994:	0800af3b 	.word	0x0800af3b

0800a998 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ba:	0f9b      	lsrs	r3, r3, #30
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c6:	0e9b      	lsrs	r3, r3, #26
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d8:	0e1b      	lsrs	r3, r3, #24
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ea:	0c1b      	lsrs	r3, r3, #16
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f6:	0a1b      	lsrs	r3, r3, #8
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa0c:	0d1b      	lsrs	r3, r3, #20
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa2a:	0bdb      	lsrs	r3, r3, #15
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa3c:	0b9b      	lsrs	r3, r3, #14
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa4e:	0b5b      	lsrs	r3, r3, #13
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa60:	0b1b      	lsrs	r3, r3, #12
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2200      	movs	r2, #0
 800aa72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d163      	bne.n	800ab44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa80:	009a      	lsls	r2, r3, #2
 800aa82:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aa86:	4013      	ands	r3, r2
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aa8c:	0f92      	lsrs	r2, r2, #30
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa98:	0edb      	lsrs	r3, r3, #27
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaaa:	0e1b      	lsrs	r3, r3, #24
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 0307 	and.w	r3, r3, #7
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aabc:	0d5b      	lsrs	r3, r3, #21
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f003 0307 	and.w	r3, r3, #7
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aace:	0c9b      	lsrs	r3, r3, #18
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	f003 0307 	and.w	r3, r3, #7
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae0:	0bdb      	lsrs	r3, r3, #15
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	7e1b      	ldrb	r3, [r3, #24]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	3302      	adds	r3, #2
 800ab04:	2201      	movs	r2, #1
 800ab06:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ab0e:	fb02 f203 	mul.w	r2, r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	7a1b      	ldrb	r3, [r3, #8]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	f003 030f 	and.w	r3, r3, #15
 800ab20:	2201      	movs	r2, #1
 800ab22:	409a      	lsls	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ab30:	0a52      	lsrs	r2, r2, #9
 800ab32:	fb02 f203 	mul.w	r2, r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab40:	661a      	str	r2, [r3, #96]	; 0x60
 800ab42:	e031      	b.n	800aba8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d11d      	bne.n	800ab88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab50:	041b      	lsls	r3, r3, #16
 800ab52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab5a:	0c1b      	lsrs	r3, r3, #16
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	3301      	adds	r3, #1
 800ab68:	029a      	lsls	r2, r3, #10
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab7c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	661a      	str	r2, [r3, #96]	; 0x60
 800ab86:	e00f      	b.n	800aba8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a58      	ldr	r2, [pc, #352]	; (800acf0 <HAL_SD_GetCardCSD+0x344>)
 800ab8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e09d      	b.n	800ace4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abac:	0b9b      	lsrs	r3, r3, #14
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbe:	09db      	lsrs	r3, r3, #7
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe0:	0fdb      	lsrs	r3, r3, #31
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abec:	0f5b      	lsrs	r3, r3, #29
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfe:	0e9b      	lsrs	r3, r3, #26
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac10:	0d9b      	lsrs	r3, r3, #22
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	f003 030f 	and.w	r3, r3, #15
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac22:	0d5b      	lsrs	r3, r3, #21
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3e:	0c1b      	lsrs	r3, r3, #16
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac52:	0bdb      	lsrs	r3, r3, #15
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac66:	0b9b      	lsrs	r3, r3, #14
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7a:	0b5b      	lsrs	r3, r3, #13
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac8e:	0b1b      	lsrs	r3, r3, #12
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca2:	0a9b      	lsrs	r3, r3, #10
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	0a1b      	lsrs	r3, r3, #8
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	b2db      	uxtb	r3, r3
 800acce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	004005ff 	.word	0x004005ff

0800acf4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ad58:	f107 030c 	add.w	r3, r7, #12
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa7c 	bl	800b25c <SD_SendStatus>
 800ad64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	0a5b      	lsrs	r3, r3, #9
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad82:	693b      	ldr	r3, [r7, #16]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ada8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc8:	2b82      	cmp	r3, #130	; 0x82
 800adca:	d111      	bne.n	800adf0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4618      	mov	r0, r3
 800add2:	f002 ff69 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800add6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff fdd4 	bl	800a998 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f022 0208 	bic.w	r2, r2, #8
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae08:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f003 fb89 	bl	800e530 <HAL_SD_RxCpltCallback>
#endif
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae34:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7fc fd02 	bl	8007840 <HAL_DMA_GetError>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d03e      	beq.n	800aec0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae48:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae50:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d002      	beq.n	800ae5e <SD_DMAError+0x36>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d12d      	bne.n	800aeba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a19      	ldr	r2, [pc, #100]	; (800aec8 <SD_DMAError+0xa0>)
 800ae64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ae74:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ae82:	6978      	ldr	r0, [r7, #20]
 800ae84:	f7ff ff62 	bl	800ad4c <HAL_SD_GetCardState>
 800ae88:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b06      	cmp	r3, #6
 800ae8e:	d002      	beq.n	800ae96 <SD_DMAError+0x6e>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d10a      	bne.n	800aeac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f002 ff04 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800aea0:	4602      	mov	r2, r0
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	431a      	orrs	r2, r3
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aeba:	6978      	ldr	r0, [r7, #20]
 800aebc:	f7ff fd6c 	bl	800a998 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aec0:	bf00      	nop
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	004005ff 	.word	0x004005ff

0800aecc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f240 523a 	movw	r2, #1338	; 0x53a
 800aee2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f7ff ff31 	bl	800ad4c <HAL_SD_GetCardState>
 800aeea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2b06      	cmp	r3, #6
 800aefe:	d002      	beq.n	800af06 <SD_DMATxAbort+0x3a>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b05      	cmp	r3, #5
 800af04:	d10a      	bne.n	800af1c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f002 fecc 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800af10:	4602      	mov	r2, r0
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	431a      	orrs	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	2b00      	cmp	r3, #0
 800af22:	d103      	bne.n	800af2c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f003 faef 	bl	800e508 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800af2a:	e002      	b.n	800af32 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fd33 	bl	800a998 <HAL_SD_ErrorCallback>
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f240 523a 	movw	r2, #1338	; 0x53a
 800af50:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff fefa 	bl	800ad4c <HAL_SD_GetCardState>
 800af58:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b06      	cmp	r3, #6
 800af6c:	d002      	beq.n	800af74 <SD_DMARxAbort+0x3a>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b05      	cmp	r3, #5
 800af72:	d10a      	bne.n	800af8a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4618      	mov	r0, r3
 800af7a:	f002 fe95 	bl	800dca8 <SDMMC_CmdStopTransfer>
 800af7e:	4602      	mov	r2, r0
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af84:	431a      	orrs	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d103      	bne.n	800af9a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f003 fab8 	bl	800e508 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800af98:	e002      	b.n	800afa0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff fcfc 	bl	800a998 <HAL_SD_ErrorCallback>
}
 800afa0:	bf00      	nop
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800afa8:	b5b0      	push	{r4, r5, r7, lr}
 800afaa:	b094      	sub	sp, #80	; 0x50
 800afac:	af04      	add	r7, sp, #16
 800afae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800afb0:	2301      	movs	r3, #1
 800afb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	f002 fd47 	bl	800da4c <SDIO_GetPowerState>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afc8:	e0b6      	b.n	800b138 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d02f      	beq.n	800b032 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f002 ff2d 	bl	800de36 <SDMMC_CmdSendCID>
 800afdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <SD_InitCard+0x40>
    {
      return errorstate;
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	e0a7      	b.n	800b138 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2100      	movs	r1, #0
 800afee:	4618      	mov	r0, r3
 800aff0:	f002 fd71 	bl	800dad6 <SDIO_GetResponse>
 800aff4:	4602      	mov	r2, r0
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2104      	movs	r1, #4
 800b000:	4618      	mov	r0, r3
 800b002:	f002 fd68 	bl	800dad6 <SDIO_GetResponse>
 800b006:	4602      	mov	r2, r0
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2108      	movs	r1, #8
 800b012:	4618      	mov	r0, r3
 800b014:	f002 fd5f 	bl	800dad6 <SDIO_GetResponse>
 800b018:	4602      	mov	r2, r0
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	210c      	movs	r1, #12
 800b024:	4618      	mov	r0, r3
 800b026:	f002 fd56 	bl	800dad6 <SDIO_GetResponse>
 800b02a:	4602      	mov	r2, r0
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b036:	2b03      	cmp	r3, #3
 800b038:	d00d      	beq.n	800b056 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f107 020e 	add.w	r2, r7, #14
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f002 ff33 	bl	800deb0 <SDMMC_CmdSetRelAdd>
 800b04a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <SD_InitCard+0xae>
    {
      return errorstate;
 800b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b054:	e070      	b.n	800b138 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d036      	beq.n	800b0cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b05e:	89fb      	ldrh	r3, [r7, #14]
 800b060:	461a      	mov	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b06e:	041b      	lsls	r3, r3, #16
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f002 fefd 	bl	800de72 <SDMMC_CmdSendCSD>
 800b078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b082:	e059      	b.n	800b138 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2100      	movs	r1, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fd23 	bl	800dad6 <SDIO_GetResponse>
 800b090:	4602      	mov	r2, r0
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2104      	movs	r1, #4
 800b09c:	4618      	mov	r0, r3
 800b09e:	f002 fd1a 	bl	800dad6 <SDIO_GetResponse>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2108      	movs	r1, #8
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 fd11 	bl	800dad6 <SDIO_GetResponse>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	210c      	movs	r1, #12
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f002 fd08 	bl	800dad6 <SDIO_GetResponse>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2104      	movs	r1, #4
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f002 fcff 	bl	800dad6 <SDIO_GetResponse>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	0d1a      	lsrs	r2, r3, #20
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b0e0:	f107 0310 	add.w	r3, r7, #16
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fc60 	bl	800a9ac <HAL_SD_GetCardCSD>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0f6:	e01f      	b.n	800b138 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6819      	ldr	r1, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b100:	041b      	lsls	r3, r3, #16
 800b102:	461a      	mov	r2, r3
 800b104:	f04f 0300 	mov.w	r3, #0
 800b108:	4608      	mov	r0, r1
 800b10a:	f002 fdef 	bl	800dcec <SDMMC_CmdSelDesel>
 800b10e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <SD_InitCard+0x172>
  {
    return errorstate;
 800b116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b118:	e00e      	b.n	800b138 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681d      	ldr	r5, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	466c      	mov	r4, sp
 800b122:	f103 0210 	add.w	r2, r3, #16
 800b126:	ca07      	ldmia	r2, {r0, r1, r2}
 800b128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b12c:	3304      	adds	r3, #4
 800b12e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b130:	4628      	mov	r0, r5
 800b132:	f002 fc33 	bl	800d99c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3740      	adds	r7, #64	; 0x40
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bdb0      	pop	{r4, r5, r7, pc}

0800b140 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	2300      	movs	r3, #0
 800b152:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4618      	mov	r0, r3
 800b15a:	f002 fdea 	bl	800dd32 <SDMMC_CmdGoIdleState>
 800b15e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	e072      	b.n	800b250 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4618      	mov	r0, r3
 800b170:	f002 fdfd 	bl	800dd6e <SDMMC_CmdOperCond>
 800b174:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00d      	beq.n	800b198 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4618      	mov	r0, r3
 800b188:	f002 fdd3 	bl	800dd32 <SDMMC_CmdGoIdleState>
 800b18c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e05b      	b.n	800b250 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d137      	bne.n	800b216 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f002 fdfd 	bl	800ddac <SDMMC_CmdAppCommand>
 800b1b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d02d      	beq.n	800b216 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1be:	e047      	b.n	800b250 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f002 fdf0 	bl	800ddac <SDMMC_CmdAppCommand>
 800b1cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <SD_PowerON+0x98>
    {
      return errorstate;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	e03b      	b.n	800b250 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	491e      	ldr	r1, [pc, #120]	; (800b258 <SD_PowerON+0x118>)
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f002 fe06 	bl	800ddf0 <SDMMC_CmdAppOperCommand>
 800b1e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1f0:	e02e      	b.n	800b250 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f002 fc6c 	bl	800dad6 <SDIO_GetResponse>
 800b1fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	0fdb      	lsrs	r3, r3, #31
 800b204:	2b01      	cmp	r3, #1
 800b206:	d101      	bne.n	800b20c <SD_PowerON+0xcc>
 800b208:	2301      	movs	r3, #1
 800b20a:	e000      	b.n	800b20e <SD_PowerON+0xce>
 800b20c:	2300      	movs	r3, #0
 800b20e:	613b      	str	r3, [r7, #16]

    count++;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	3301      	adds	r3, #1
 800b214:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d802      	bhi.n	800b226 <SD_PowerON+0xe6>
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0cc      	beq.n	800b1c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d902      	bls.n	800b236 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b234:	e00c      	b.n	800b250 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d003      	beq.n	800b248 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	645a      	str	r2, [r3, #68]	; 0x44
 800b246:	e002      	b.n	800b24e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	c1100000 	.word	0xc1100000

0800b25c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b26c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b270:	e018      	b.n	800b2a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27a:	041b      	lsls	r3, r3, #16
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f002 fe37 	bl	800def2 <SDMMC_CmdSendStatus>
 800b284:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	e009      	b.n	800b2a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2100      	movs	r1, #0
 800b296:	4618      	mov	r0, r3
 800b298:	f002 fc1d 	bl	800dad6 <SDIO_GetResponse>
 800b29c:	4602      	mov	r2, r0
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d03f      	beq.n	800b346 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	e033      	b.n	800b334 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f002 fb8e 	bl	800d9f2 <SDIO_ReadFIFO>
 800b2d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	0c1b      	lsrs	r3, r3, #16
 800b306:	b2da      	uxtb	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3301      	adds	r3, #1
 800b310:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	3b01      	subs	r3, #1
 800b316:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	0e1b      	lsrs	r3, r3, #24
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3301      	adds	r3, #1
 800b326:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	3301      	adds	r3, #1
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	2b07      	cmp	r3, #7
 800b338:	d9c8      	bls.n	800b2cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b346:	bf00      	nop
 800b348:	3718      	adds	r7, #24
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b086      	sub	sp, #24
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d043      	beq.n	800b3f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b368:	2300      	movs	r3, #0
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e037      	b.n	800b3de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3301      	adds	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	021a      	lsls	r2, r3, #8
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	4313      	orrs	r3, r2
 800b38a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3301      	adds	r3, #1
 800b390:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	3b01      	subs	r3, #1
 800b396:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	041a      	lsls	r2, r3, #16
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	061a      	lsls	r2, r3, #24
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f107 0208 	add.w	r2, r7, #8
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 fb1a 	bl	800da0c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b07      	cmp	r3, #7
 800b3e2:	d9c4      	bls.n	800b36e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e041      	b.n	800b48e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d106      	bne.n	800b424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7fa fa2c 	bl	800587c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3304      	adds	r3, #4
 800b434:	4619      	mov	r1, r3
 800b436:	4610      	mov	r0, r2
 800b438:	f000 fc7a 	bl	800bd30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d001      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e04e      	b.n	800b54e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f042 0201 	orr.w	r2, r2, #1
 800b4c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a23      	ldr	r2, [pc, #140]	; (800b55c <HAL_TIM_Base_Start_IT+0xc4>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d022      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4da:	d01d      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a1f      	ldr	r2, [pc, #124]	; (800b560 <HAL_TIM_Base_Start_IT+0xc8>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d018      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1e      	ldr	r2, [pc, #120]	; (800b564 <HAL_TIM_Base_Start_IT+0xcc>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d013      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a1c      	ldr	r2, [pc, #112]	; (800b568 <HAL_TIM_Base_Start_IT+0xd0>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00e      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a1b      	ldr	r2, [pc, #108]	; (800b56c <HAL_TIM_Base_Start_IT+0xd4>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d009      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a19      	ldr	r2, [pc, #100]	; (800b570 <HAL_TIM_Base_Start_IT+0xd8>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d004      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x80>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a18      	ldr	r2, [pc, #96]	; (800b574 <HAL_TIM_Base_Start_IT+0xdc>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d111      	bne.n	800b53c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b06      	cmp	r3, #6
 800b528:	d010      	beq.n	800b54c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0201 	orr.w	r2, r2, #1
 800b538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b53a:	e007      	b.n	800b54c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f042 0201 	orr.w	r2, r2, #1
 800b54a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40010000 	.word	0x40010000
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40010400 	.word	0x40010400
 800b570:	40014000 	.word	0x40014000
 800b574:	40001800 	.word	0x40001800

0800b578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e041      	b.n	800b60e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f839 	bl	800b616 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f000 fbba 	bl	800bd30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b616:	b480      	push	{r7}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b61e:	bf00      	nop
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d109      	bne.n	800b650 <HAL_TIM_PWM_Start+0x24>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b01      	cmp	r3, #1
 800b646:	bf14      	ite	ne
 800b648:	2301      	movne	r3, #1
 800b64a:	2300      	moveq	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	e022      	b.n	800b696 <HAL_TIM_PWM_Start+0x6a>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b04      	cmp	r3, #4
 800b654:	d109      	bne.n	800b66a <HAL_TIM_PWM_Start+0x3e>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b01      	cmp	r3, #1
 800b660:	bf14      	ite	ne
 800b662:	2301      	movne	r3, #1
 800b664:	2300      	moveq	r3, #0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	e015      	b.n	800b696 <HAL_TIM_PWM_Start+0x6a>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d109      	bne.n	800b684 <HAL_TIM_PWM_Start+0x58>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b01      	cmp	r3, #1
 800b67a:	bf14      	ite	ne
 800b67c:	2301      	movne	r3, #1
 800b67e:	2300      	moveq	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	e008      	b.n	800b696 <HAL_TIM_PWM_Start+0x6a>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	bf14      	ite	ne
 800b690:	2301      	movne	r3, #1
 800b692:	2300      	moveq	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e07c      	b.n	800b798 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d104      	bne.n	800b6ae <HAL_TIM_PWM_Start+0x82>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6ac:	e013      	b.n	800b6d6 <HAL_TIM_PWM_Start+0xaa>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d104      	bne.n	800b6be <HAL_TIM_PWM_Start+0x92>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6bc:	e00b      	b.n	800b6d6 <HAL_TIM_PWM_Start+0xaa>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d104      	bne.n	800b6ce <HAL_TIM_PWM_Start+0xa2>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6cc:	e003      	b.n	800b6d6 <HAL_TIM_PWM_Start+0xaa>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 fe10 	bl	800c304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a2d      	ldr	r2, [pc, #180]	; (800b7a0 <HAL_TIM_PWM_Start+0x174>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_TIM_PWM_Start+0xcc>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a2c      	ldr	r2, [pc, #176]	; (800b7a4 <HAL_TIM_PWM_Start+0x178>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIM_PWM_Start+0xd0>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e000      	b.n	800b6fe <HAL_TIM_PWM_Start+0xd2>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a22      	ldr	r2, [pc, #136]	; (800b7a0 <HAL_TIM_PWM_Start+0x174>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d022      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b724:	d01d      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a1f      	ldr	r2, [pc, #124]	; (800b7a8 <HAL_TIM_PWM_Start+0x17c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d018      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a1d      	ldr	r2, [pc, #116]	; (800b7ac <HAL_TIM_PWM_Start+0x180>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d013      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a1c      	ldr	r2, [pc, #112]	; (800b7b0 <HAL_TIM_PWM_Start+0x184>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00e      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a16      	ldr	r2, [pc, #88]	; (800b7a4 <HAL_TIM_PWM_Start+0x178>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d009      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a18      	ldr	r2, [pc, #96]	; (800b7b4 <HAL_TIM_PWM_Start+0x188>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d004      	beq.n	800b762 <HAL_TIM_PWM_Start+0x136>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a16      	ldr	r2, [pc, #88]	; (800b7b8 <HAL_TIM_PWM_Start+0x18c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d111      	bne.n	800b786 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f003 0307 	and.w	r3, r3, #7
 800b76c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2b06      	cmp	r3, #6
 800b772:	d010      	beq.n	800b796 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0201 	orr.w	r2, r2, #1
 800b782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b784:	e007      	b.n	800b796 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f042 0201 	orr.w	r2, r2, #1
 800b794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	40010000 	.word	0x40010000
 800b7a4:	40010400 	.word	0x40010400
 800b7a8:	40000400 	.word	0x40000400
 800b7ac:	40000800 	.word	0x40000800
 800b7b0:	40000c00 	.word	0x40000c00
 800b7b4:	40014000 	.word	0x40014000
 800b7b8:	40001800 	.word	0x40001800

0800b7bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d122      	bne.n	800b818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d11b      	bne.n	800b818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f06f 0202 	mvn.w	r2, #2
 800b7e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa77 	bl	800bcf2 <HAL_TIM_IC_CaptureCallback>
 800b804:	e005      	b.n	800b812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fa69 	bl	800bcde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fa7a 	bl	800bd06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f003 0304 	and.w	r3, r3, #4
 800b822:	2b04      	cmp	r3, #4
 800b824:	d122      	bne.n	800b86c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f003 0304 	and.w	r3, r3, #4
 800b830:	2b04      	cmp	r3, #4
 800b832:	d11b      	bne.n	800b86c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f06f 0204 	mvn.w	r2, #4
 800b83c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2202      	movs	r2, #2
 800b842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fa4d 	bl	800bcf2 <HAL_TIM_IC_CaptureCallback>
 800b858:	e005      	b.n	800b866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fa3f 	bl	800bcde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fa50 	bl	800bd06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	f003 0308 	and.w	r3, r3, #8
 800b876:	2b08      	cmp	r3, #8
 800b878:	d122      	bne.n	800b8c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 0308 	and.w	r3, r3, #8
 800b884:	2b08      	cmp	r3, #8
 800b886:	d11b      	bne.n	800b8c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0208 	mvn.w	r2, #8
 800b890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2204      	movs	r2, #4
 800b896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	f003 0303 	and.w	r3, r3, #3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fa23 	bl	800bcf2 <HAL_TIM_IC_CaptureCallback>
 800b8ac:	e005      	b.n	800b8ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fa15 	bl	800bcde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fa26 	bl	800bd06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	f003 0310 	and.w	r3, r3, #16
 800b8ca:	2b10      	cmp	r3, #16
 800b8cc:	d122      	bne.n	800b914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	f003 0310 	and.w	r3, r3, #16
 800b8d8:	2b10      	cmp	r3, #16
 800b8da:	d11b      	bne.n	800b914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f06f 0210 	mvn.w	r2, #16
 800b8e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f9f9 	bl	800bcf2 <HAL_TIM_IC_CaptureCallback>
 800b900:	e005      	b.n	800b90e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f9eb 	bl	800bcde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f9fc 	bl	800bd06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d10e      	bne.n	800b940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d107      	bne.n	800b940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f06f 0201 	mvn.w	r2, #1
 800b938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7f9 fc44 	bl	80051c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94a:	2b80      	cmp	r3, #128	; 0x80
 800b94c:	d10e      	bne.n	800b96c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b958:	2b80      	cmp	r3, #128	; 0x80
 800b95a:	d107      	bne.n	800b96c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fd78 	bl	800c45c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b976:	2b40      	cmp	r3, #64	; 0x40
 800b978:	d10e      	bne.n	800b998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b984:	2b40      	cmp	r3, #64	; 0x40
 800b986:	d107      	bne.n	800b998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9c1 	bl	800bd1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	d10e      	bne.n	800b9c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f003 0320 	and.w	r3, r3, #32
 800b9b0:	2b20      	cmp	r3, #32
 800b9b2:	d107      	bne.n	800b9c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f06f 0220 	mvn.w	r2, #32
 800b9bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fd42 	bl	800c448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9c4:	bf00      	nop
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e0ae      	b.n	800bb48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b0c      	cmp	r3, #12
 800b9f6:	f200 809f 	bhi.w	800bb38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba00:	0800ba35 	.word	0x0800ba35
 800ba04:	0800bb39 	.word	0x0800bb39
 800ba08:	0800bb39 	.word	0x0800bb39
 800ba0c:	0800bb39 	.word	0x0800bb39
 800ba10:	0800ba75 	.word	0x0800ba75
 800ba14:	0800bb39 	.word	0x0800bb39
 800ba18:	0800bb39 	.word	0x0800bb39
 800ba1c:	0800bb39 	.word	0x0800bb39
 800ba20:	0800bab7 	.word	0x0800bab7
 800ba24:	0800bb39 	.word	0x0800bb39
 800ba28:	0800bb39 	.word	0x0800bb39
 800ba2c:	0800bb39 	.word	0x0800bb39
 800ba30:	0800baf7 	.word	0x0800baf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68b9      	ldr	r1, [r7, #8]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 fa18 	bl	800be70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699a      	ldr	r2, [r3, #24]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0208 	orr.w	r2, r2, #8
 800ba4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	699a      	ldr	r2, [r3, #24]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f022 0204 	bic.w	r2, r2, #4
 800ba5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6999      	ldr	r1, [r3, #24]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	691a      	ldr	r2, [r3, #16]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	619a      	str	r2, [r3, #24]
      break;
 800ba72:	e064      	b.n	800bb3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68b9      	ldr	r1, [r7, #8]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fa68 	bl	800bf50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	699a      	ldr	r2, [r3, #24]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	699a      	ldr	r2, [r3, #24]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6999      	ldr	r1, [r3, #24]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	021a      	lsls	r2, r3, #8
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	619a      	str	r2, [r3, #24]
      break;
 800bab4:	e043      	b.n	800bb3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68b9      	ldr	r1, [r7, #8]
 800babc:	4618      	mov	r0, r3
 800babe:	f000 fabd 	bl	800c03c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	69da      	ldr	r2, [r3, #28]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0208 	orr.w	r2, r2, #8
 800bad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	69da      	ldr	r2, [r3, #28]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0204 	bic.w	r2, r2, #4
 800bae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69d9      	ldr	r1, [r3, #28]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	61da      	str	r2, [r3, #28]
      break;
 800baf4:	e023      	b.n	800bb3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fb11 	bl	800c124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	69da      	ldr	r2, [r3, #28]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	69da      	ldr	r2, [r3, #28]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69d9      	ldr	r1, [r3, #28]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	021a      	lsls	r2, r3, #8
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	61da      	str	r2, [r3, #28]
      break;
 800bb36:	e002      	b.n	800bb3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d101      	bne.n	800bb6c <HAL_TIM_ConfigClockSource+0x1c>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	e0b4      	b.n	800bcd6 <HAL_TIM_ConfigClockSource+0x186>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bb8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba4:	d03e      	beq.n	800bc24 <HAL_TIM_ConfigClockSource+0xd4>
 800bba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbaa:	f200 8087 	bhi.w	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb2:	f000 8086 	beq.w	800bcc2 <HAL_TIM_ConfigClockSource+0x172>
 800bbb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbba:	d87f      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbbc:	2b70      	cmp	r3, #112	; 0x70
 800bbbe:	d01a      	beq.n	800bbf6 <HAL_TIM_ConfigClockSource+0xa6>
 800bbc0:	2b70      	cmp	r3, #112	; 0x70
 800bbc2:	d87b      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbc4:	2b60      	cmp	r3, #96	; 0x60
 800bbc6:	d050      	beq.n	800bc6a <HAL_TIM_ConfigClockSource+0x11a>
 800bbc8:	2b60      	cmp	r3, #96	; 0x60
 800bbca:	d877      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbcc:	2b50      	cmp	r3, #80	; 0x50
 800bbce:	d03c      	beq.n	800bc4a <HAL_TIM_ConfigClockSource+0xfa>
 800bbd0:	2b50      	cmp	r3, #80	; 0x50
 800bbd2:	d873      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	d058      	beq.n	800bc8a <HAL_TIM_ConfigClockSource+0x13a>
 800bbd8:	2b40      	cmp	r3, #64	; 0x40
 800bbda:	d86f      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbdc:	2b30      	cmp	r3, #48	; 0x30
 800bbde:	d064      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x15a>
 800bbe0:	2b30      	cmp	r3, #48	; 0x30
 800bbe2:	d86b      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	d060      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x15a>
 800bbe8:	2b20      	cmp	r3, #32
 800bbea:	d867      	bhi.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d05c      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x15a>
 800bbf0:	2b10      	cmp	r3, #16
 800bbf2:	d05a      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x15a>
 800bbf4:	e062      	b.n	800bcbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6818      	ldr	r0, [r3, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	6899      	ldr	r1, [r3, #8]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	f000 fb5d 	bl	800c2c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	609a      	str	r2, [r3, #8]
      break;
 800bc22:	e04f      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	6899      	ldr	r1, [r3, #8]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f000 fb46 	bl	800c2c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689a      	ldr	r2, [r3, #8]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc46:	609a      	str	r2, [r3, #8]
      break;
 800bc48:	e03c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6818      	ldr	r0, [r3, #0]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	6859      	ldr	r1, [r3, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	461a      	mov	r2, r3
 800bc58:	f000 faba 	bl	800c1d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2150      	movs	r1, #80	; 0x50
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fb13 	bl	800c28e <TIM_ITRx_SetConfig>
      break;
 800bc68:	e02c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6818      	ldr	r0, [r3, #0]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	6859      	ldr	r1, [r3, #4]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f000 fad9 	bl	800c22e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2160      	movs	r1, #96	; 0x60
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fb03 	bl	800c28e <TIM_ITRx_SetConfig>
      break;
 800bc88:	e01c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	6859      	ldr	r1, [r3, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f000 fa9a 	bl	800c1d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2140      	movs	r1, #64	; 0x40
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 faf3 	bl	800c28e <TIM_ITRx_SetConfig>
      break;
 800bca8:	e00c      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	f000 faea 	bl	800c28e <TIM_ITRx_SetConfig>
      break;
 800bcba:	e003      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc0:	e000      	b.n	800bcc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bcc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcfa:	bf00      	nop
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd22:	bf00      	nop
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a40      	ldr	r2, [pc, #256]	; (800be44 <TIM_Base_SetConfig+0x114>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d013      	beq.n	800bd70 <TIM_Base_SetConfig+0x40>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd4e:	d00f      	beq.n	800bd70 <TIM_Base_SetConfig+0x40>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a3d      	ldr	r2, [pc, #244]	; (800be48 <TIM_Base_SetConfig+0x118>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d00b      	beq.n	800bd70 <TIM_Base_SetConfig+0x40>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a3c      	ldr	r2, [pc, #240]	; (800be4c <TIM_Base_SetConfig+0x11c>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d007      	beq.n	800bd70 <TIM_Base_SetConfig+0x40>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a3b      	ldr	r2, [pc, #236]	; (800be50 <TIM_Base_SetConfig+0x120>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d003      	beq.n	800bd70 <TIM_Base_SetConfig+0x40>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a3a      	ldr	r2, [pc, #232]	; (800be54 <TIM_Base_SetConfig+0x124>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d108      	bne.n	800bd82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a2f      	ldr	r2, [pc, #188]	; (800be44 <TIM_Base_SetConfig+0x114>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d02b      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd90:	d027      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a2c      	ldr	r2, [pc, #176]	; (800be48 <TIM_Base_SetConfig+0x118>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d023      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a2b      	ldr	r2, [pc, #172]	; (800be4c <TIM_Base_SetConfig+0x11c>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d01f      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <TIM_Base_SetConfig+0x120>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d01b      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a29      	ldr	r2, [pc, #164]	; (800be54 <TIM_Base_SetConfig+0x124>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d017      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a28      	ldr	r2, [pc, #160]	; (800be58 <TIM_Base_SetConfig+0x128>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d013      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a27      	ldr	r2, [pc, #156]	; (800be5c <TIM_Base_SetConfig+0x12c>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d00f      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a26      	ldr	r2, [pc, #152]	; (800be60 <TIM_Base_SetConfig+0x130>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00b      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a25      	ldr	r2, [pc, #148]	; (800be64 <TIM_Base_SetConfig+0x134>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d007      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a24      	ldr	r2, [pc, #144]	; (800be68 <TIM_Base_SetConfig+0x138>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d003      	beq.n	800bde2 <TIM_Base_SetConfig+0xb2>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a23      	ldr	r2, [pc, #140]	; (800be6c <TIM_Base_SetConfig+0x13c>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d108      	bne.n	800bdf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bde8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a0a      	ldr	r2, [pc, #40]	; (800be44 <TIM_Base_SetConfig+0x114>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d003      	beq.n	800be28 <TIM_Base_SetConfig+0xf8>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a0c      	ldr	r2, [pc, #48]	; (800be54 <TIM_Base_SetConfig+0x124>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d103      	bne.n	800be30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	691a      	ldr	r2, [r3, #16]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	615a      	str	r2, [r3, #20]
}
 800be36:	bf00      	nop
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	40010000 	.word	0x40010000
 800be48:	40000400 	.word	0x40000400
 800be4c:	40000800 	.word	0x40000800
 800be50:	40000c00 	.word	0x40000c00
 800be54:	40010400 	.word	0x40010400
 800be58:	40014000 	.word	0x40014000
 800be5c:	40014400 	.word	0x40014400
 800be60:	40014800 	.word	0x40014800
 800be64:	40001800 	.word	0x40001800
 800be68:	40001c00 	.word	0x40001c00
 800be6c:	40002000 	.word	0x40002000

0800be70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	f023 0201 	bic.w	r2, r3, #1
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f023 0303 	bic.w	r3, r3, #3
 800bea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4313      	orrs	r3, r2
 800beb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f023 0302 	bic.w	r3, r3, #2
 800beb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a20      	ldr	r2, [pc, #128]	; (800bf48 <TIM_OC1_SetConfig+0xd8>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d003      	beq.n	800bed4 <TIM_OC1_SetConfig+0x64>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a1f      	ldr	r2, [pc, #124]	; (800bf4c <TIM_OC1_SetConfig+0xdc>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d10c      	bne.n	800beee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f023 0308 	bic.w	r3, r3, #8
 800beda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f023 0304 	bic.w	r3, r3, #4
 800beec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a15      	ldr	r2, [pc, #84]	; (800bf48 <TIM_OC1_SetConfig+0xd8>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d003      	beq.n	800befe <TIM_OC1_SetConfig+0x8e>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a14      	ldr	r2, [pc, #80]	; (800bf4c <TIM_OC1_SetConfig+0xdc>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d111      	bne.n	800bf22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	693a      	ldr	r2, [r7, #16]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	621a      	str	r2, [r3, #32]
}
 800bf3c:	bf00      	nop
 800bf3e:	371c      	adds	r7, #28
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	40010000 	.word	0x40010000
 800bf4c:	40010400 	.word	0x40010400

0800bf50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	f023 0210 	bic.w	r2, r3, #16
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	021b      	lsls	r3, r3, #8
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f023 0320 	bic.w	r3, r3, #32
 800bf9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a22      	ldr	r2, [pc, #136]	; (800c034 <TIM_OC2_SetConfig+0xe4>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d003      	beq.n	800bfb8 <TIM_OC2_SetConfig+0x68>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a21      	ldr	r2, [pc, #132]	; (800c038 <TIM_OC2_SetConfig+0xe8>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d10d      	bne.n	800bfd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a17      	ldr	r2, [pc, #92]	; (800c034 <TIM_OC2_SetConfig+0xe4>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d003      	beq.n	800bfe4 <TIM_OC2_SetConfig+0x94>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a16      	ldr	r2, [pc, #88]	; (800c038 <TIM_OC2_SetConfig+0xe8>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d113      	bne.n	800c00c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	4313      	orrs	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	621a      	str	r2, [r3, #32]
}
 800c026:	bf00      	nop
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	40010000 	.word	0x40010000
 800c038:	40010400 	.word	0x40010400

0800c03c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f023 0303 	bic.w	r3, r3, #3
 800c072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	021b      	lsls	r3, r3, #8
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a21      	ldr	r2, [pc, #132]	; (800c11c <TIM_OC3_SetConfig+0xe0>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d003      	beq.n	800c0a2 <TIM_OC3_SetConfig+0x66>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a20      	ldr	r2, [pc, #128]	; (800c120 <TIM_OC3_SetConfig+0xe4>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d10d      	bne.n	800c0be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	021b      	lsls	r3, r3, #8
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a16      	ldr	r2, [pc, #88]	; (800c11c <TIM_OC3_SetConfig+0xe0>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d003      	beq.n	800c0ce <TIM_OC3_SetConfig+0x92>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a15      	ldr	r2, [pc, #84]	; (800c120 <TIM_OC3_SetConfig+0xe4>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d113      	bne.n	800c0f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	011b      	lsls	r3, r3, #4
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	621a      	str	r2, [r3, #32]
}
 800c110:	bf00      	nop
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	40010000 	.word	0x40010000
 800c120:	40010400 	.word	0x40010400

0800c124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c124:	b480      	push	{r7}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	69db      	ldr	r3, [r3, #28]
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	021b      	lsls	r3, r3, #8
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	4313      	orrs	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c16e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	031b      	lsls	r3, r3, #12
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	4313      	orrs	r3, r2
 800c17a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a12      	ldr	r2, [pc, #72]	; (800c1c8 <TIM_OC4_SetConfig+0xa4>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d003      	beq.n	800c18c <TIM_OC4_SetConfig+0x68>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a11      	ldr	r2, [pc, #68]	; (800c1cc <TIM_OC4_SetConfig+0xa8>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d109      	bne.n	800c1a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	695b      	ldr	r3, [r3, #20]
 800c198:	019b      	lsls	r3, r3, #6
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	621a      	str	r2, [r3, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	40010000 	.word	0x40010000
 800c1cc:	40010400 	.word	0x40010400

0800c1d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	f023 0201 	bic.w	r2, r3, #1
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	011b      	lsls	r3, r3, #4
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	4313      	orrs	r3, r2
 800c204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f023 030a 	bic.w	r3, r3, #10
 800c20c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	4313      	orrs	r3, r2
 800c214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	621a      	str	r2, [r3, #32]
}
 800c222:	bf00      	nop
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c22e:	b480      	push	{r7}
 800c230:	b087      	sub	sp, #28
 800c232:	af00      	add	r7, sp, #0
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	f023 0210 	bic.w	r2, r3, #16
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	031b      	lsls	r3, r3, #12
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	4313      	orrs	r3, r2
 800c262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c26a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	011b      	lsls	r3, r3, #4
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	4313      	orrs	r3, r2
 800c274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	621a      	str	r2, [r3, #32]
}
 800c282:	bf00      	nop
 800c284:	371c      	adds	r7, #28
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c28e:	b480      	push	{r7}
 800c290:	b085      	sub	sp, #20
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	f043 0307 	orr.w	r3, r3, #7
 800c2b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	609a      	str	r2, [r3, #8]
}
 800c2b8:	bf00      	nop
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	021a      	lsls	r2, r3, #8
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	609a      	str	r2, [r3, #8]
}
 800c2f8:	bf00      	nop
 800c2fa:	371c      	adds	r7, #28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f003 031f 	and.w	r3, r3, #31
 800c316:	2201      	movs	r2, #1
 800c318:	fa02 f303 	lsl.w	r3, r2, r3
 800c31c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6a1a      	ldr	r2, [r3, #32]
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	43db      	mvns	r3, r3
 800c326:	401a      	ands	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6a1a      	ldr	r2, [r3, #32]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	f003 031f 	and.w	r3, r3, #31
 800c336:	6879      	ldr	r1, [r7, #4]
 800c338:	fa01 f303 	lsl.w	r3, r1, r3
 800c33c:	431a      	orrs	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	621a      	str	r2, [r3, #32]
}
 800c342:	bf00      	nop
 800c344:	371c      	adds	r7, #28
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
	...

0800c350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c360:	2b01      	cmp	r3, #1
 800c362:	d101      	bne.n	800c368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c364:	2302      	movs	r3, #2
 800c366:	e05a      	b.n	800c41e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c38e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4313      	orrs	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a21      	ldr	r2, [pc, #132]	; (800c42c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d022      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3b4:	d01d      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a1d      	ldr	r2, [pc, #116]	; (800c430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d018      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a1b      	ldr	r2, [pc, #108]	; (800c434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d013      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a1a      	ldr	r2, [pc, #104]	; (800c438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d00e      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a18      	ldr	r2, [pc, #96]	; (800c43c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d009      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a17      	ldr	r2, [pc, #92]	; (800c440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d004      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a15      	ldr	r2, [pc, #84]	; (800c444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d10c      	bne.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	4313      	orrs	r3, r2
 800c402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	40010000 	.word	0x40010000
 800c430:	40000400 	.word	0x40000400
 800c434:	40000800 	.word	0x40000800
 800c438:	40000c00 	.word	0x40000c00
 800c43c:	40010400 	.word	0x40010400
 800c440:	40014000 	.word	0x40014000
 800c444:	40001800 	.word	0x40001800

0800c448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	e03f      	b.n	800c502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7f9 fb06 	bl	8005aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2224      	movs	r2, #36	; 0x24
 800c4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68da      	ldr	r2, [r3, #12]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f001 f8a9 	bl	800d60c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	695a      	ldr	r2, [r3, #20]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68da      	ldr	r2, [r3, #12]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2220      	movs	r2, #32
 800c4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2220      	movs	r2, #32
 800c4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b08a      	sub	sp, #40	; 0x28
 800c50e:	af02      	add	r7, sp, #8
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	603b      	str	r3, [r7, #0]
 800c516:	4613      	mov	r3, r2
 800c518:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c524:	b2db      	uxtb	r3, r3
 800c526:	2b20      	cmp	r3, #32
 800c528:	d17c      	bne.n	800c624 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <HAL_UART_Transmit+0x2c>
 800c530:	88fb      	ldrh	r3, [r7, #6]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e075      	b.n	800c626 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c540:	2b01      	cmp	r3, #1
 800c542:	d101      	bne.n	800c548 <HAL_UART_Transmit+0x3e>
 800c544:	2302      	movs	r3, #2
 800c546:	e06e      	b.n	800c626 <HAL_UART_Transmit+0x11c>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2221      	movs	r2, #33	; 0x21
 800c55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c55e:	f7fa fd3b 	bl	8006fd8 <HAL_GetTick>
 800c562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	88fa      	ldrh	r2, [r7, #6]
 800c568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	88fa      	ldrh	r2, [r7, #6]
 800c56e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c578:	d108      	bne.n	800c58c <HAL_UART_Transmit+0x82>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d104      	bne.n	800c58c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c582:	2300      	movs	r3, #0
 800c584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	61bb      	str	r3, [r7, #24]
 800c58a:	e003      	b.n	800c594 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c590:	2300      	movs	r3, #0
 800c592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c59c:	e02a      	b.n	800c5f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2180      	movs	r1, #128	; 0x80
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 fd2a 	bl	800d002 <UART_WaitOnFlagUntilTimeout>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e036      	b.n	800c626 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10b      	bne.n	800c5d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	3302      	adds	r3, #2
 800c5d2:	61bb      	str	r3, [r7, #24]
 800c5d4:	e007      	b.n	800c5e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	781a      	ldrb	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1cf      	bne.n	800c59e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2200      	movs	r2, #0
 800c606:	2140      	movs	r1, #64	; 0x40
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 fcfa 	bl	800d002 <UART_WaitOnFlagUntilTimeout>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e006      	b.n	800c626 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	e000      	b.n	800c626 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c624:	2302      	movs	r3, #2
  }
}
 800c626:	4618      	mov	r0, r3
 800c628:	3720      	adds	r7, #32
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	4613      	mov	r3, r2
 800c63a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b20      	cmp	r3, #32
 800c646:	d11d      	bne.n	800c684 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <HAL_UART_Receive_IT+0x26>
 800c64e:	88fb      	ldrh	r3, [r7, #6]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	e016      	b.n	800c686 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d101      	bne.n	800c666 <HAL_UART_Receive_IT+0x38>
 800c662:	2302      	movs	r3, #2
 800c664:	e00f      	b.n	800c686 <HAL_UART_Receive_IT+0x58>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c674:	88fb      	ldrh	r3, [r7, #6]
 800c676:	461a      	mov	r2, r3
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 fd2f 	bl	800d0de <UART_Start_Receive_IT>
 800c680:	4603      	mov	r3, r0
 800c682:	e000      	b.n	800c686 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c684:	2302      	movs	r3, #2
  }
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08c      	sub	sp, #48	; 0x30
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	4613      	mov	r3, r2
 800c69c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	2b20      	cmp	r3, #32
 800c6a8:	d165      	bne.n	800c776 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <HAL_UART_Transmit_DMA+0x26>
 800c6b0:	88fb      	ldrh	r3, [r7, #6]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e05e      	b.n	800c778 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d101      	bne.n	800c6c8 <HAL_UART_Transmit_DMA+0x38>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e057      	b.n	800c778 <HAL_UART_Transmit_DMA+0xe8>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	88fa      	ldrh	r2, [r7, #6]
 800c6da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	88fa      	ldrh	r2, [r7, #6]
 800c6e0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2221      	movs	r2, #33	; 0x21
 800c6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f4:	4a22      	ldr	r2, [pc, #136]	; (800c780 <HAL_UART_Transmit_DMA+0xf0>)
 800c6f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6fc:	4a21      	ldr	r2, [pc, #132]	; (800c784 <HAL_UART_Transmit_DMA+0xf4>)
 800c6fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c704:	4a20      	ldr	r2, [pc, #128]	; (800c788 <HAL_UART_Transmit_DMA+0xf8>)
 800c706:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c70c:	2200      	movs	r2, #0
 800c70e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c710:	f107 0308 	add.w	r3, r7, #8
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	6819      	ldr	r1, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3304      	adds	r3, #4
 800c724:	461a      	mov	r2, r3
 800c726:	88fb      	ldrh	r3, [r7, #6]
 800c728:	f7fa fe16 	bl	8007358 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c734:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3314      	adds	r3, #20
 800c744:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	617b      	str	r3, [r7, #20]
   return(result);
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c754:	62bb      	str	r3, [r7, #40]	; 0x28
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3314      	adds	r3, #20
 800c75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c75e:	627a      	str	r2, [r7, #36]	; 0x24
 800c760:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	6a39      	ldr	r1, [r7, #32]
 800c764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e5      	bne.n	800c73e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	e000      	b.n	800c778 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c776:	2302      	movs	r3, #2
  }
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3730      	adds	r7, #48	; 0x30
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	0800cd5d 	.word	0x0800cd5d
 800c784:	0800cdf7 	.word	0x0800cdf7
 800c788:	0800cf6f 	.word	0x0800cf6f

0800c78c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	4613      	mov	r3, r2
 800c798:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d11d      	bne.n	800c7e2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <HAL_UART_Receive_DMA+0x26>
 800c7ac:	88fb      	ldrh	r3, [r7, #6]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e016      	b.n	800c7e4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d101      	bne.n	800c7c4 <HAL_UART_Receive_DMA+0x38>
 800c7c0:	2302      	movs	r3, #2
 800c7c2:	e00f      	b.n	800c7e4 <HAL_UART_Receive_DMA+0x58>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c7d2:	88fb      	ldrh	r3, [r7, #6]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 fcbb 	bl	800d154 <UART_Start_Receive_DMA>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	e000      	b.n	800c7e4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c7e2:	2302      	movs	r3, #2
  }
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b0ba      	sub	sp, #232	; 0xe8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c812:	2300      	movs	r3, #0
 800c814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c818:	2300      	movs	r3, #0
 800c81a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c822:	f003 030f 	and.w	r3, r3, #15
 800c826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c82a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10f      	bne.n	800c852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c836:	f003 0320 	and.w	r3, r3, #32
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d009      	beq.n	800c852 <HAL_UART_IRQHandler+0x66>
 800c83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fe23 	bl	800d496 <UART_Receive_IT>
      return;
 800c850:	e256      	b.n	800cd00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 80de 	beq.w	800ca18 <HAL_UART_IRQHandler+0x22c>
 800c85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	d106      	bne.n	800c876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c86c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c870:	2b00      	cmp	r3, #0
 800c872:	f000 80d1 	beq.w	800ca18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c87a:	f003 0301 	and.w	r3, r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00b      	beq.n	800c89a <HAL_UART_IRQHandler+0xae>
 800c882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c892:	f043 0201 	orr.w	r2, r3, #1
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c89e:	f003 0304 	and.w	r3, r3, #4
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00b      	beq.n	800c8be <HAL_UART_IRQHandler+0xd2>
 800c8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d005      	beq.n	800c8be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b6:	f043 0202 	orr.w	r2, r3, #2
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8c2:	f003 0302 	and.w	r3, r3, #2
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00b      	beq.n	800c8e2 <HAL_UART_IRQHandler+0xf6>
 800c8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d005      	beq.n	800c8e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	f043 0204 	orr.w	r2, r3, #4
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e6:	f003 0308 	and.w	r3, r3, #8
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d011      	beq.n	800c912 <HAL_UART_IRQHandler+0x126>
 800c8ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f2:	f003 0320 	and.w	r3, r3, #32
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d105      	bne.n	800c906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8fe:	f003 0301 	and.w	r3, r3, #1
 800c902:	2b00      	cmp	r3, #0
 800c904:	d005      	beq.n	800c912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	f043 0208 	orr.w	r2, r3, #8
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 81ed 	beq.w	800ccf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c920:	f003 0320 	and.w	r3, r3, #32
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <HAL_UART_IRQHandler+0x14e>
 800c928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c92c:	f003 0320 	and.w	r3, r3, #32
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 fdae 	bl	800d496 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c944:	2b40      	cmp	r3, #64	; 0x40
 800c946:	bf0c      	ite	eq
 800c948:	2301      	moveq	r3, #1
 800c94a:	2300      	movne	r3, #0
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	f003 0308 	and.w	r3, r3, #8
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d103      	bne.n	800c966 <HAL_UART_IRQHandler+0x17a>
 800c95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c962:	2b00      	cmp	r3, #0
 800c964:	d04f      	beq.n	800ca06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fcb6 	bl	800d2d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c976:	2b40      	cmp	r3, #64	; 0x40
 800c978:	d141      	bne.n	800c9fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3314      	adds	r3, #20
 800c980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c988:	e853 3f00 	ldrex	r3, [r3]
 800c98c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3314      	adds	r3, #20
 800c9a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c9a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c9aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c9b6:	e841 2300 	strex	r3, r2, [r1]
 800c9ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c9be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1d9      	bne.n	800c97a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d013      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	4a7d      	ldr	r2, [pc, #500]	; (800cbc8 <HAL_UART_IRQHandler+0x3dc>)
 800c9d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fa fd84 	bl	80074e8 <HAL_DMA_Abort_IT>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d016      	beq.n	800ca14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9f4:	e00e      	b.n	800ca14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 f99a 	bl	800cd30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fc:	e00a      	b.n	800ca14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f996 	bl	800cd30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca04:	e006      	b.n	800ca14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f992 	bl	800cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ca12:	e170      	b.n	800ccf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca14:	bf00      	nop
    return;
 800ca16:	e16e      	b.n	800ccf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	f040 814a 	bne.w	800ccb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ca22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca26:	f003 0310 	and.w	r3, r3, #16
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 8143 	beq.w	800ccb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ca30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca34:	f003 0310 	and.w	r3, r3, #16
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 813c 	beq.w	800ccb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60bb      	str	r3, [r7, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	60bb      	str	r3, [r7, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	60bb      	str	r3, [r7, #8]
 800ca52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca5e:	2b40      	cmp	r3, #64	; 0x40
 800ca60:	f040 80b4 	bne.w	800cbcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ca70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f000 8140 	beq.w	800ccfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca82:	429a      	cmp	r2, r3
 800ca84:	f080 8139 	bcs.w	800ccfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ca8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca9a:	f000 8088 	beq.w	800cbae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	330c      	adds	r3, #12
 800caa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800caac:	e853 3f00 	ldrex	r3, [r3]
 800cab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cabc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	330c      	adds	r3, #12
 800cac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800caca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cada:	e841 2300 	strex	r3, r2, [r1]
 800cade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1d9      	bne.n	800ca9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3314      	adds	r3, #20
 800caf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800caf4:	e853 3f00 	ldrex	r3, [r3]
 800caf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cafa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cafc:	f023 0301 	bic.w	r3, r3, #1
 800cb00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3314      	adds	r3, #20
 800cb0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cb12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cb20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e1      	bne.n	800caea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cb36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3314      	adds	r3, #20
 800cb46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cb4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cb4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cb58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e3      	bne.n	800cb26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2220      	movs	r2, #32
 800cb62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	330c      	adds	r3, #12
 800cb72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb7e:	f023 0310 	bic.w	r3, r3, #16
 800cb82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	330c      	adds	r3, #12
 800cb8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cb90:	65ba      	str	r2, [r7, #88]	; 0x58
 800cb92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb98:	e841 2300 	strex	r3, r2, [r1]
 800cb9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1e3      	bne.n	800cb6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fa fc2d 	bl	8007408 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f8c0 	bl	800cd44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbc4:	e099      	b.n	800ccfa <HAL_UART_IRQHandler+0x50e>
 800cbc6:	bf00      	nop
 800cbc8:	0800d39f 	.word	0x0800d39f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 808b 	beq.w	800ccfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cbe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 8086 	beq.w	800ccfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	330c      	adds	r3, #12
 800cbf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	e853 3f00 	ldrex	r3, [r3]
 800cc00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	330c      	adds	r3, #12
 800cc12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cc16:	647a      	str	r2, [r7, #68]	; 0x44
 800cc18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc1e:	e841 2300 	strex	r3, r2, [r1]
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1e3      	bne.n	800cbf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3314      	adds	r3, #20
 800cc30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	e853 3f00 	ldrex	r3, [r3]
 800cc38:	623b      	str	r3, [r7, #32]
   return(result);
 800cc3a:	6a3b      	ldr	r3, [r7, #32]
 800cc3c:	f023 0301 	bic.w	r3, r3, #1
 800cc40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	3314      	adds	r3, #20
 800cc4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cc4e:	633a      	str	r2, [r7, #48]	; 0x30
 800cc50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc56:	e841 2300 	strex	r3, r2, [r1]
 800cc5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1e3      	bne.n	800cc2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2220      	movs	r2, #32
 800cc66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	330c      	adds	r3, #12
 800cc76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	e853 3f00 	ldrex	r3, [r3]
 800cc7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f023 0310 	bic.w	r3, r3, #16
 800cc86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	330c      	adds	r3, #12
 800cc90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cc94:	61fa      	str	r2, [r7, #28]
 800cc96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc98:	69b9      	ldr	r1, [r7, #24]
 800cc9a:	69fa      	ldr	r2, [r7, #28]
 800cc9c:	e841 2300 	strex	r3, r2, [r1]
 800cca0:	617b      	str	r3, [r7, #20]
   return(result);
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1e3      	bne.n	800cc70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f848 	bl	800cd44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ccb4:	e023      	b.n	800ccfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ccb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d009      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x4ea>
 800ccc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fb79 	bl	800d3c6 <UART_Transmit_IT>
    return;
 800ccd4:	e014      	b.n	800cd00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ccd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00e      	beq.n	800cd00 <HAL_UART_IRQHandler+0x514>
 800cce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d008      	beq.n	800cd00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fbb9 	bl	800d466 <UART_EndTransmit_IT>
    return;
 800ccf4:	e004      	b.n	800cd00 <HAL_UART_IRQHandler+0x514>
    return;
 800ccf6:	bf00      	nop
 800ccf8:	e002      	b.n	800cd00 <HAL_UART_IRQHandler+0x514>
      return;
 800ccfa:	bf00      	nop
 800ccfc:	e000      	b.n	800cd00 <HAL_UART_IRQHandler+0x514>
      return;
 800ccfe:	bf00      	nop
  }
}
 800cd00:	37e8      	adds	r7, #232	; 0xe8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop

0800cd08 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b090      	sub	sp, #64	; 0x40
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd68:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d137      	bne.n	800cde8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3314      	adds	r3, #20
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	e853 3f00 	ldrex	r3, [r3]
 800cd8c:	623b      	str	r3, [r7, #32]
   return(result);
 800cd8e:	6a3b      	ldr	r3, [r7, #32]
 800cd90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd94:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	3314      	adds	r3, #20
 800cd9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd9e:	633a      	str	r2, [r7, #48]	; 0x30
 800cda0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda6:	e841 2300 	strex	r3, r2, [r1]
 800cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1e5      	bne.n	800cd7e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	330c      	adds	r3, #12
 800cdb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	e853 3f00 	ldrex	r3, [r3]
 800cdc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	330c      	adds	r3, #12
 800cdd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd2:	61fa      	str	r2, [r7, #28]
 800cdd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd6:	69b9      	ldr	r1, [r7, #24]
 800cdd8:	69fa      	ldr	r2, [r7, #28]
 800cdda:	e841 2300 	strex	r3, r2, [r1]
 800cdde:	617b      	str	r3, [r7, #20]
   return(result);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1e5      	bne.n	800cdb2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cde6:	e002      	b.n	800cdee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cde8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cdea:	f7f7 fb2d 	bl	8004448 <HAL_UART_TxCpltCallback>
}
 800cdee:	bf00      	nop
 800cdf0:	3740      	adds	r7, #64	; 0x40
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff ff7f 	bl	800cd08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b09c      	sub	sp, #112	; 0x70
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d172      	bne.n	800cf14 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ce2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce30:	2200      	movs	r2, #0
 800ce32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	330c      	adds	r3, #12
 800ce3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce3e:	e853 3f00 	ldrex	r3, [r3]
 800ce42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	330c      	adds	r3, #12
 800ce52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce54:	65ba      	str	r2, [r7, #88]	; 0x58
 800ce56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce5c:	e841 2300 	strex	r3, r2, [r1]
 800ce60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e5      	bne.n	800ce34 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3314      	adds	r3, #20
 800ce6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce72:	e853 3f00 	ldrex	r3, [r3]
 800ce76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	667b      	str	r3, [r7, #100]	; 0x64
 800ce80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3314      	adds	r3, #20
 800ce86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce88:	647a      	str	r2, [r7, #68]	; 0x44
 800ce8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce90:	e841 2300 	strex	r3, r2, [r1]
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1e5      	bne.n	800ce68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3314      	adds	r3, #20
 800cea2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	e853 3f00 	ldrex	r3, [r3]
 800ceaa:	623b      	str	r3, [r7, #32]
   return(result);
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb2:	663b      	str	r3, [r7, #96]	; 0x60
 800ceb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3314      	adds	r3, #20
 800ceba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cebc:	633a      	str	r2, [r7, #48]	; 0x30
 800cebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cec4:	e841 2300 	strex	r3, r2, [r1]
 800cec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1e5      	bne.n	800ce9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ced0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced2:	2220      	movs	r2, #32
 800ced4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d119      	bne.n	800cf14 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	330c      	adds	r3, #12
 800cee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	e853 3f00 	ldrex	r3, [r3]
 800ceee:	60fb      	str	r3, [r7, #12]
   return(result);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f023 0310 	bic.w	r3, r3, #16
 800cef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	330c      	adds	r3, #12
 800cefe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf00:	61fa      	str	r2, [r7, #28]
 800cf02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf04:	69b9      	ldr	r1, [r7, #24]
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	e841 2300 	strex	r3, r2, [r1]
 800cf0c:	617b      	str	r3, [r7, #20]
   return(result);
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e5      	bne.n	800cee0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d106      	bne.n	800cf2a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf20:	4619      	mov	r1, r3
 800cf22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf24:	f7ff ff0e 	bl	800cd44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf28:	e002      	b.n	800cf30 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cf2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf2c:	f7f7 fa72 	bl	8004414 <HAL_UART_RxCpltCallback>
}
 800cf30:	bf00      	nop
 800cf32:	3770      	adds	r7, #112	; 0x70
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d108      	bne.n	800cf60 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf52:	085b      	lsrs	r3, r3, #1
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	4619      	mov	r1, r3
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff fef3 	bl	800cd44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf5e:	e002      	b.n	800cf66 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff fedb 	bl	800cd1c <HAL_UART_RxHalfCpltCallback>
}
 800cf66:	bf00      	nop
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b084      	sub	sp, #16
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf8a:	2b80      	cmp	r3, #128	; 0x80
 800cf8c:	bf0c      	ite	eq
 800cf8e:	2301      	moveq	r3, #1
 800cf90:	2300      	movne	r3, #0
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b21      	cmp	r3, #33	; 0x21
 800cfa0:	d108      	bne.n	800cfb4 <UART_DMAError+0x46>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d005      	beq.n	800cfb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f000 f96a 	bl	800d288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	695b      	ldr	r3, [r3, #20]
 800cfba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfbe:	2b40      	cmp	r3, #64	; 0x40
 800cfc0:	bf0c      	ite	eq
 800cfc2:	2301      	moveq	r3, #1
 800cfc4:	2300      	movne	r3, #0
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b22      	cmp	r3, #34	; 0x22
 800cfd4:	d108      	bne.n	800cfe8 <UART_DMAError+0x7a>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d005      	beq.n	800cfe8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cfe2:	68b8      	ldr	r0, [r7, #8]
 800cfe4:	f000 f978 	bl	800d2d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfec:	f043 0210 	orr.w	r2, r3, #16
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cff4:	68b8      	ldr	r0, [r7, #8]
 800cff6:	f7ff fe9b 	bl	800cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b090      	sub	sp, #64	; 0x40
 800d006:	af00      	add	r7, sp, #0
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	603b      	str	r3, [r7, #0]
 800d00e:	4613      	mov	r3, r2
 800d010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d012:	e050      	b.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01a:	d04c      	beq.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d007      	beq.n	800d032 <UART_WaitOnFlagUntilTimeout+0x30>
 800d022:	f7f9 ffd9 	bl	8006fd8 <HAL_GetTick>
 800d026:	4602      	mov	r2, r0
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d02e:	429a      	cmp	r2, r3
 800d030:	d241      	bcs.n	800d0b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	330c      	adds	r3, #12
 800d038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	330c      	adds	r3, #12
 800d050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d052:	637a      	str	r2, [r7, #52]	; 0x34
 800d054:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e5      	bne.n	800d032 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3314      	adds	r3, #20
 800d06c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	e853 3f00 	ldrex	r3, [r3]
 800d074:	613b      	str	r3, [r7, #16]
   return(result);
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f023 0301 	bic.w	r3, r3, #1
 800d07c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3314      	adds	r3, #20
 800d084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d086:	623a      	str	r2, [r7, #32]
 800d088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08a:	69f9      	ldr	r1, [r7, #28]
 800d08c:	6a3a      	ldr	r2, [r7, #32]
 800d08e:	e841 2300 	strex	r3, r2, [r1]
 800d092:	61bb      	str	r3, [r7, #24]
   return(result);
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1e5      	bne.n	800d066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2220      	movs	r2, #32
 800d09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	e00f      	b.n	800d0d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	4013      	ands	r3, r2
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	bf0c      	ite	eq
 800d0c6:	2301      	moveq	r3, #1
 800d0c8:	2300      	movne	r3, #0
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d09f      	beq.n	800d014 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3740      	adds	r7, #64	; 0x40
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	88fa      	ldrh	r2, [r7, #6]
 800d0f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	88fa      	ldrh	r2, [r7, #6]
 800d0fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2222      	movs	r2, #34	; 0x22
 800d108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d122:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	695a      	ldr	r2, [r3, #20]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f042 0201 	orr.w	r2, r2, #1
 800d132:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68da      	ldr	r2, [r3, #12]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f042 0220 	orr.w	r2, r2, #32
 800d142:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
	...

0800d154 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b098      	sub	sp, #96	; 0x60
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	88fa      	ldrh	r2, [r7, #6]
 800d16c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2222      	movs	r2, #34	; 0x22
 800d178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d180:	4a3e      	ldr	r2, [pc, #248]	; (800d27c <UART_Start_Receive_DMA+0x128>)
 800d182:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d188:	4a3d      	ldr	r2, [pc, #244]	; (800d280 <UART_Start_Receive_DMA+0x12c>)
 800d18a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d190:	4a3c      	ldr	r2, [pc, #240]	; (800d284 <UART_Start_Receive_DMA+0x130>)
 800d192:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d198:	2200      	movs	r2, #0
 800d19a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d19c:	f107 0308 	add.w	r3, r7, #8
 800d1a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	88fb      	ldrh	r3, [r7, #6]
 800d1b4:	f7fa f8d0 	bl	8007358 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	613b      	str	r3, [r7, #16]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	613b      	str	r3, [r7, #16]
 800d1cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	330c      	adds	r3, #12
 800d1dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1e0:	e853 3f00 	ldrex	r3, [r3]
 800d1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	330c      	adds	r3, #12
 800d1f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d1f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1fe:	e841 2300 	strex	r3, r2, [r1]
 800d202:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1e5      	bne.n	800d1d6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3314      	adds	r3, #20
 800d210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	e853 3f00 	ldrex	r3, [r3]
 800d218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21c:	f043 0301 	orr.w	r3, r3, #1
 800d220:	657b      	str	r3, [r7, #84]	; 0x54
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3314      	adds	r3, #20
 800d228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d22a:	63ba      	str	r2, [r7, #56]	; 0x38
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d232:	e841 2300 	strex	r3, r2, [r1]
 800d236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1e5      	bne.n	800d20a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3314      	adds	r3, #20
 800d244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	617b      	str	r3, [r7, #20]
   return(result);
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d254:	653b      	str	r3, [r7, #80]	; 0x50
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3314      	adds	r3, #20
 800d25c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d25e:	627a      	str	r2, [r7, #36]	; 0x24
 800d260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d262:	6a39      	ldr	r1, [r7, #32]
 800d264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d266:	e841 2300 	strex	r3, r2, [r1]
 800d26a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1e5      	bne.n	800d23e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3760      	adds	r7, #96	; 0x60
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	0800ce13 	.word	0x0800ce13
 800d280:	0800cf39 	.word	0x0800cf39
 800d284:	0800cf6f 	.word	0x0800cf6f

0800d288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d288:	b480      	push	{r7}
 800d28a:	b089      	sub	sp, #36	; 0x24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	330c      	adds	r3, #12
 800d296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2a6:	61fb      	str	r3, [r7, #28]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	330c      	adds	r3, #12
 800d2ae:	69fa      	ldr	r2, [r7, #28]
 800d2b0:	61ba      	str	r2, [r7, #24]
 800d2b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b4:	6979      	ldr	r1, [r7, #20]
 800d2b6:	69ba      	ldr	r2, [r7, #24]
 800d2b8:	e841 2300 	strex	r3, r2, [r1]
 800d2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e5      	bne.n	800d290 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d2cc:	bf00      	nop
 800d2ce:	3724      	adds	r7, #36	; 0x24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b095      	sub	sp, #84	; 0x54
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	330c      	adds	r3, #12
 800d2e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ea:	e853 3f00 	ldrex	r3, [r3]
 800d2ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	330c      	adds	r3, #12
 800d2fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d300:	643a      	str	r2, [r7, #64]	; 0x40
 800d302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d304:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d308:	e841 2300 	strex	r3, r2, [r1]
 800d30c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1e5      	bne.n	800d2e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3314      	adds	r3, #20
 800d31a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	61fb      	str	r3, [r7, #28]
   return(result);
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	f023 0301 	bic.w	r3, r3, #1
 800d32a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3314      	adds	r3, #20
 800d332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d334:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e5      	bne.n	800d314 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d119      	bne.n	800d384 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	330c      	adds	r3, #12
 800d356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	e853 3f00 	ldrex	r3, [r3]
 800d35e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f023 0310 	bic.w	r3, r3, #16
 800d366:	647b      	str	r3, [r7, #68]	; 0x44
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	330c      	adds	r3, #12
 800d36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d370:	61ba      	str	r2, [r7, #24]
 800d372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d374:	6979      	ldr	r1, [r7, #20]
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	e841 2300 	strex	r3, r2, [r1]
 800d37c:	613b      	str	r3, [r7, #16]
   return(result);
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e5      	bne.n	800d350 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2220      	movs	r2, #32
 800d388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d392:	bf00      	nop
 800d394:	3754      	adds	r7, #84	; 0x54
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b084      	sub	sp, #16
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f7ff fcb9 	bl	800cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d3c6:	b480      	push	{r7}
 800d3c8:	b085      	sub	sp, #20
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b21      	cmp	r3, #33	; 0x21
 800d3d8:	d13e      	bne.n	800d458 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e2:	d114      	bne.n	800d40e <UART_Transmit_IT+0x48>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d110      	bne.n	800d40e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a1b      	ldr	r3, [r3, #32]
 800d3f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	881b      	ldrh	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d400:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	1c9a      	adds	r2, r3, #2
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	621a      	str	r2, [r3, #32]
 800d40c:	e008      	b.n	800d420 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	1c59      	adds	r1, r3, #1
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	6211      	str	r1, [r2, #32]
 800d418:	781a      	ldrb	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d424:	b29b      	uxth	r3, r3
 800d426:	3b01      	subs	r3, #1
 800d428:	b29b      	uxth	r3, r3
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	4619      	mov	r1, r3
 800d42e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10f      	bne.n	800d454 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68da      	ldr	r2, [r3, #12]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d442:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	68da      	ldr	r2, [r3, #12]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d452:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	e000      	b.n	800d45a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d458:	2302      	movs	r3, #2
  }
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b082      	sub	sp, #8
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68da      	ldr	r2, [r3, #12]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d47c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2220      	movs	r2, #32
 800d482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7f6 ffde 	bl	8004448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d48c:	2300      	movs	r3, #0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b08c      	sub	sp, #48	; 0x30
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b22      	cmp	r3, #34	; 0x22
 800d4a8:	f040 80ab 	bne.w	800d602 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4b4:	d117      	bne.n	800d4e6 <UART_Receive_IT+0x50>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d113      	bne.n	800d4e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4de:	1c9a      	adds	r2, r3, #2
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	629a      	str	r2, [r3, #40]	; 0x28
 800d4e4:	e026      	b.n	800d534 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4f8:	d007      	beq.n	800d50a <UART_Receive_IT+0x74>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <UART_Receive_IT+0x82>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	b2da      	uxtb	r2, r3
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	e008      	b.n	800d52a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d524:	b2da      	uxtb	r2, r3
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3b01      	subs	r3, #1
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	4619      	mov	r1, r3
 800d542:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d544:	2b00      	cmp	r3, #0
 800d546:	d15a      	bne.n	800d5fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f022 0220 	bic.w	r2, r2, #32
 800d556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	68da      	ldr	r2, [r3, #12]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	695a      	ldr	r2, [r3, #20]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f022 0201 	bic.w	r2, r2, #1
 800d576:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2220      	movs	r2, #32
 800d57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d584:	2b01      	cmp	r3, #1
 800d586:	d135      	bne.n	800d5f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	330c      	adds	r3, #12
 800d594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	e853 3f00 	ldrex	r3, [r3]
 800d59c:	613b      	str	r3, [r7, #16]
   return(result);
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f023 0310 	bic.w	r3, r3, #16
 800d5a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	330c      	adds	r3, #12
 800d5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ae:	623a      	str	r2, [r7, #32]
 800d5b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b2:	69f9      	ldr	r1, [r7, #28]
 800d5b4:	6a3a      	ldr	r2, [r7, #32]
 800d5b6:	e841 2300 	strex	r3, r2, [r1]
 800d5ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1e5      	bne.n	800d58e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f003 0310 	and.w	r3, r3, #16
 800d5cc:	2b10      	cmp	r3, #16
 800d5ce:	d10a      	bne.n	800d5e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff fba9 	bl	800cd44 <HAL_UARTEx_RxEventCallback>
 800d5f2:	e002      	b.n	800d5fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7f6 ff0d 	bl	8004414 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	e002      	b.n	800d604 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e000      	b.n	800d604 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d602:	2302      	movs	r3, #2
  }
}
 800d604:	4618      	mov	r0, r3
 800d606:	3730      	adds	r7, #48	; 0x30
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d610:	b09f      	sub	sp, #124	; 0x7c
 800d612:	af00      	add	r7, sp, #0
 800d614:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d622:	68d9      	ldr	r1, [r3, #12]
 800d624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	ea40 0301 	orr.w	r3, r0, r1
 800d62c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d630:	689a      	ldr	r2, [r3, #8]
 800d632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	431a      	orrs	r2, r3
 800d638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d63a:	695b      	ldr	r3, [r3, #20]
 800d63c:	431a      	orrs	r2, r3
 800d63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	4313      	orrs	r3, r2
 800d644:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d650:	f021 010c 	bic.w	r1, r1, #12
 800d654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d65a:	430b      	orrs	r3, r1
 800d65c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66a:	6999      	ldr	r1, [r3, #24]
 800d66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	ea40 0301 	orr.w	r3, r0, r1
 800d674:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	4bc5      	ldr	r3, [pc, #788]	; (800d990 <UART_SetConfig+0x384>)
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d004      	beq.n	800d68a <UART_SetConfig+0x7e>
 800d680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	4bc3      	ldr	r3, [pc, #780]	; (800d994 <UART_SetConfig+0x388>)
 800d686:	429a      	cmp	r2, r3
 800d688:	d103      	bne.n	800d692 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d68a:	f7fc fd43 	bl	800a114 <HAL_RCC_GetPCLK2Freq>
 800d68e:	6778      	str	r0, [r7, #116]	; 0x74
 800d690:	e002      	b.n	800d698 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d692:	f7fc fd2b 	bl	800a0ec <HAL_RCC_GetPCLK1Freq>
 800d696:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6a0:	f040 80b6 	bne.w	800d810 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d6a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6a6:	461c      	mov	r4, r3
 800d6a8:	f04f 0500 	mov.w	r5, #0
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	1891      	adds	r1, r2, r2
 800d6b2:	6439      	str	r1, [r7, #64]	; 0x40
 800d6b4:	415b      	adcs	r3, r3
 800d6b6:	647b      	str	r3, [r7, #68]	; 0x44
 800d6b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d6bc:	1912      	adds	r2, r2, r4
 800d6be:	eb45 0303 	adc.w	r3, r5, r3
 800d6c2:	f04f 0000 	mov.w	r0, #0
 800d6c6:	f04f 0100 	mov.w	r1, #0
 800d6ca:	00d9      	lsls	r1, r3, #3
 800d6cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d6d0:	00d0      	lsls	r0, r2, #3
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	1911      	adds	r1, r2, r4
 800d6d8:	6639      	str	r1, [r7, #96]	; 0x60
 800d6da:	416b      	adcs	r3, r5
 800d6dc:	667b      	str	r3, [r7, #100]	; 0x64
 800d6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	f04f 0300 	mov.w	r3, #0
 800d6e8:	1891      	adds	r1, r2, r2
 800d6ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800d6ec:	415b      	adcs	r3, r3
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d6f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d6f8:	f7f3 fa4e 	bl	8000b98 <__aeabi_uldivmod>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4ba5      	ldr	r3, [pc, #660]	; (800d998 <UART_SetConfig+0x38c>)
 800d702:	fba3 2302 	umull	r2, r3, r3, r2
 800d706:	095b      	lsrs	r3, r3, #5
 800d708:	011e      	lsls	r6, r3, #4
 800d70a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d70c:	461c      	mov	r4, r3
 800d70e:	f04f 0500 	mov.w	r5, #0
 800d712:	4622      	mov	r2, r4
 800d714:	462b      	mov	r3, r5
 800d716:	1891      	adds	r1, r2, r2
 800d718:	6339      	str	r1, [r7, #48]	; 0x30
 800d71a:	415b      	adcs	r3, r3
 800d71c:	637b      	str	r3, [r7, #52]	; 0x34
 800d71e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d722:	1912      	adds	r2, r2, r4
 800d724:	eb45 0303 	adc.w	r3, r5, r3
 800d728:	f04f 0000 	mov.w	r0, #0
 800d72c:	f04f 0100 	mov.w	r1, #0
 800d730:	00d9      	lsls	r1, r3, #3
 800d732:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d736:	00d0      	lsls	r0, r2, #3
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	1911      	adds	r1, r2, r4
 800d73e:	65b9      	str	r1, [r7, #88]	; 0x58
 800d740:	416b      	adcs	r3, r5
 800d742:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	461a      	mov	r2, r3
 800d74a:	f04f 0300 	mov.w	r3, #0
 800d74e:	1891      	adds	r1, r2, r2
 800d750:	62b9      	str	r1, [r7, #40]	; 0x28
 800d752:	415b      	adcs	r3, r3
 800d754:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d75a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d75e:	f7f3 fa1b 	bl	8000b98 <__aeabi_uldivmod>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4b8c      	ldr	r3, [pc, #560]	; (800d998 <UART_SetConfig+0x38c>)
 800d768:	fba3 1302 	umull	r1, r3, r3, r2
 800d76c:	095b      	lsrs	r3, r3, #5
 800d76e:	2164      	movs	r1, #100	; 0x64
 800d770:	fb01 f303 	mul.w	r3, r1, r3
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	3332      	adds	r3, #50	; 0x32
 800d77a:	4a87      	ldr	r2, [pc, #540]	; (800d998 <UART_SetConfig+0x38c>)
 800d77c:	fba2 2303 	umull	r2, r3, r2, r3
 800d780:	095b      	lsrs	r3, r3, #5
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d788:	441e      	add	r6, r3
 800d78a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d78c:	4618      	mov	r0, r3
 800d78e:	f04f 0100 	mov.w	r1, #0
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	1894      	adds	r4, r2, r2
 800d798:	623c      	str	r4, [r7, #32]
 800d79a:	415b      	adcs	r3, r3
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
 800d79e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d7a2:	1812      	adds	r2, r2, r0
 800d7a4:	eb41 0303 	adc.w	r3, r1, r3
 800d7a8:	f04f 0400 	mov.w	r4, #0
 800d7ac:	f04f 0500 	mov.w	r5, #0
 800d7b0:	00dd      	lsls	r5, r3, #3
 800d7b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d7b6:	00d4      	lsls	r4, r2, #3
 800d7b8:	4622      	mov	r2, r4
 800d7ba:	462b      	mov	r3, r5
 800d7bc:	1814      	adds	r4, r2, r0
 800d7be:	653c      	str	r4, [r7, #80]	; 0x50
 800d7c0:	414b      	adcs	r3, r1
 800d7c2:	657b      	str	r3, [r7, #84]	; 0x54
 800d7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	f04f 0300 	mov.w	r3, #0
 800d7ce:	1891      	adds	r1, r2, r2
 800d7d0:	61b9      	str	r1, [r7, #24]
 800d7d2:	415b      	adcs	r3, r3
 800d7d4:	61fb      	str	r3, [r7, #28]
 800d7d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d7da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7de:	f7f3 f9db 	bl	8000b98 <__aeabi_uldivmod>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4b6c      	ldr	r3, [pc, #432]	; (800d998 <UART_SetConfig+0x38c>)
 800d7e8:	fba3 1302 	umull	r1, r3, r3, r2
 800d7ec:	095b      	lsrs	r3, r3, #5
 800d7ee:	2164      	movs	r1, #100	; 0x64
 800d7f0:	fb01 f303 	mul.w	r3, r1, r3
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	3332      	adds	r3, #50	; 0x32
 800d7fa:	4a67      	ldr	r2, [pc, #412]	; (800d998 <UART_SetConfig+0x38c>)
 800d7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d800:	095b      	lsrs	r3, r3, #5
 800d802:	f003 0207 	and.w	r2, r3, #7
 800d806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4432      	add	r2, r6
 800d80c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d80e:	e0b9      	b.n	800d984 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d812:	461c      	mov	r4, r3
 800d814:	f04f 0500 	mov.w	r5, #0
 800d818:	4622      	mov	r2, r4
 800d81a:	462b      	mov	r3, r5
 800d81c:	1891      	adds	r1, r2, r2
 800d81e:	6139      	str	r1, [r7, #16]
 800d820:	415b      	adcs	r3, r3
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d828:	1912      	adds	r2, r2, r4
 800d82a:	eb45 0303 	adc.w	r3, r5, r3
 800d82e:	f04f 0000 	mov.w	r0, #0
 800d832:	f04f 0100 	mov.w	r1, #0
 800d836:	00d9      	lsls	r1, r3, #3
 800d838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d83c:	00d0      	lsls	r0, r2, #3
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	eb12 0804 	adds.w	r8, r2, r4
 800d846:	eb43 0905 	adc.w	r9, r3, r5
 800d84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	f04f 0100 	mov.w	r1, #0
 800d854:	f04f 0200 	mov.w	r2, #0
 800d858:	f04f 0300 	mov.w	r3, #0
 800d85c:	008b      	lsls	r3, r1, #2
 800d85e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d862:	0082      	lsls	r2, r0, #2
 800d864:	4640      	mov	r0, r8
 800d866:	4649      	mov	r1, r9
 800d868:	f7f3 f996 	bl	8000b98 <__aeabi_uldivmod>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4b49      	ldr	r3, [pc, #292]	; (800d998 <UART_SetConfig+0x38c>)
 800d872:	fba3 2302 	umull	r2, r3, r3, r2
 800d876:	095b      	lsrs	r3, r3, #5
 800d878:	011e      	lsls	r6, r3, #4
 800d87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d87c:	4618      	mov	r0, r3
 800d87e:	f04f 0100 	mov.w	r1, #0
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	1894      	adds	r4, r2, r2
 800d888:	60bc      	str	r4, [r7, #8]
 800d88a:	415b      	adcs	r3, r3
 800d88c:	60fb      	str	r3, [r7, #12]
 800d88e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d892:	1812      	adds	r2, r2, r0
 800d894:	eb41 0303 	adc.w	r3, r1, r3
 800d898:	f04f 0400 	mov.w	r4, #0
 800d89c:	f04f 0500 	mov.w	r5, #0
 800d8a0:	00dd      	lsls	r5, r3, #3
 800d8a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d8a6:	00d4      	lsls	r4, r2, #3
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	1814      	adds	r4, r2, r0
 800d8ae:	64bc      	str	r4, [r7, #72]	; 0x48
 800d8b0:	414b      	adcs	r3, r1
 800d8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f04f 0100 	mov.w	r1, #0
 800d8be:	f04f 0200 	mov.w	r2, #0
 800d8c2:	f04f 0300 	mov.w	r3, #0
 800d8c6:	008b      	lsls	r3, r1, #2
 800d8c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d8cc:	0082      	lsls	r2, r0, #2
 800d8ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d8d2:	f7f3 f961 	bl	8000b98 <__aeabi_uldivmod>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4b2f      	ldr	r3, [pc, #188]	; (800d998 <UART_SetConfig+0x38c>)
 800d8dc:	fba3 1302 	umull	r1, r3, r3, r2
 800d8e0:	095b      	lsrs	r3, r3, #5
 800d8e2:	2164      	movs	r1, #100	; 0x64
 800d8e4:	fb01 f303 	mul.w	r3, r1, r3
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	3332      	adds	r3, #50	; 0x32
 800d8ee:	4a2a      	ldr	r2, [pc, #168]	; (800d998 <UART_SetConfig+0x38c>)
 800d8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f4:	095b      	lsrs	r3, r3, #5
 800d8f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8fa:	441e      	add	r6, r3
 800d8fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8fe:	4618      	mov	r0, r3
 800d900:	f04f 0100 	mov.w	r1, #0
 800d904:	4602      	mov	r2, r0
 800d906:	460b      	mov	r3, r1
 800d908:	1894      	adds	r4, r2, r2
 800d90a:	603c      	str	r4, [r7, #0]
 800d90c:	415b      	adcs	r3, r3
 800d90e:	607b      	str	r3, [r7, #4]
 800d910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d914:	1812      	adds	r2, r2, r0
 800d916:	eb41 0303 	adc.w	r3, r1, r3
 800d91a:	f04f 0400 	mov.w	r4, #0
 800d91e:	f04f 0500 	mov.w	r5, #0
 800d922:	00dd      	lsls	r5, r3, #3
 800d924:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d928:	00d4      	lsls	r4, r2, #3
 800d92a:	4622      	mov	r2, r4
 800d92c:	462b      	mov	r3, r5
 800d92e:	eb12 0a00 	adds.w	sl, r2, r0
 800d932:	eb43 0b01 	adc.w	fp, r3, r1
 800d936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f04f 0100 	mov.w	r1, #0
 800d940:	f04f 0200 	mov.w	r2, #0
 800d944:	f04f 0300 	mov.w	r3, #0
 800d948:	008b      	lsls	r3, r1, #2
 800d94a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d94e:	0082      	lsls	r2, r0, #2
 800d950:	4650      	mov	r0, sl
 800d952:	4659      	mov	r1, fp
 800d954:	f7f3 f920 	bl	8000b98 <__aeabi_uldivmod>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	4b0e      	ldr	r3, [pc, #56]	; (800d998 <UART_SetConfig+0x38c>)
 800d95e:	fba3 1302 	umull	r1, r3, r3, r2
 800d962:	095b      	lsrs	r3, r3, #5
 800d964:	2164      	movs	r1, #100	; 0x64
 800d966:	fb01 f303 	mul.w	r3, r1, r3
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	3332      	adds	r3, #50	; 0x32
 800d970:	4a09      	ldr	r2, [pc, #36]	; (800d998 <UART_SetConfig+0x38c>)
 800d972:	fba2 2303 	umull	r2, r3, r2, r3
 800d976:	095b      	lsrs	r3, r3, #5
 800d978:	f003 020f 	and.w	r2, r3, #15
 800d97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4432      	add	r2, r6
 800d982:	609a      	str	r2, [r3, #8]
}
 800d984:	bf00      	nop
 800d986:	377c      	adds	r7, #124	; 0x7c
 800d988:	46bd      	mov	sp, r7
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	bf00      	nop
 800d990:	40011000 	.word	0x40011000
 800d994:	40011400 	.word	0x40011400
 800d998:	51eb851f 	.word	0x51eb851f

0800d99c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d99c:	b084      	sub	sp, #16
 800d99e:	b480      	push	{r7}
 800d9a0:	b085      	sub	sp, #20
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	f107 001c 	add.w	r0, r7, #28
 800d9aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d9b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d9b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d9ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d9be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d9c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d9c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d9d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	b004      	add	sp, #16
 800d9f0:	4770      	bx	lr

0800d9f2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr

0800da2e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2203      	movs	r2, #3
 800da3a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800da3c:	2002      	movs	r0, #2
 800da3e:	f7f9 fad7 	bl	8006ff0 <HAL_Delay>
  
  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f003 0303 	and.w	r3, r3, #3
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800da8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800da92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4313      	orrs	r3, r2
 800da98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800daa2:	f023 030f 	bic.w	r3, r3, #15
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	431a      	orrs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	b2db      	uxtb	r3, r3
}
 800daca:	4618      	mov	r0, r3
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b085      	sub	sp, #20
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3314      	adds	r3, #20
 800dae4:	461a      	mov	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	4413      	add	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
}  
 800daf0:	4618      	mov	r0, r3
 800daf2:	3714      	adds	r7, #20
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db22:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800db28:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800db2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	4313      	orrs	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	431a      	orrs	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800db46:	2300      	movs	r3, #0

}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db62:	2310      	movs	r3, #16
 800db64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db66:	2340      	movs	r3, #64	; 0x40
 800db68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db6a:	2300      	movs	r3, #0
 800db6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db74:	f107 0308 	add.w	r3, r7, #8
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff ff74 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800db80:	f241 3288 	movw	r2, #5000	; 0x1388
 800db84:	2110      	movs	r1, #16
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 fa02 	bl	800df90 <SDMMC_GetCmdResp1>
 800db8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db8e:	69fb      	ldr	r3, [r7, #28]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3720      	adds	r7, #32
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b088      	sub	sp, #32
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dba6:	2311      	movs	r3, #17
 800dba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbaa:	2340      	movs	r3, #64	; 0x40
 800dbac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbb8:	f107 0308 	add.w	r3, r7, #8
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff ff52 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dbc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbc8:	2111      	movs	r1, #17
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f9e0 	bl	800df90 <SDMMC_GetCmdResp1>
 800dbd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dbea:	2312      	movs	r3, #18
 800dbec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbee:	2340      	movs	r3, #64	; 0x40
 800dbf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbfc:	f107 0308 	add.w	r3, r7, #8
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff ff30 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dc08:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc0c:	2112      	movs	r1, #18
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f9be 	bl	800df90 <SDMMC_GetCmdResp1>
 800dc14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc16:	69fb      	ldr	r3, [r7, #28]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3720      	adds	r7, #32
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b088      	sub	sp, #32
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dc2e:	2318      	movs	r3, #24
 800dc30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc32:	2340      	movs	r3, #64	; 0x40
 800dc34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc36:	2300      	movs	r3, #0
 800dc38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc40:	f107 0308 	add.w	r3, r7, #8
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7ff ff0e 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dc4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc50:	2118      	movs	r1, #24
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f99c 	bl	800df90 <SDMMC_GetCmdResp1>
 800dc58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3720      	adds	r7, #32
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b088      	sub	sp, #32
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dc72:	2319      	movs	r3, #25
 800dc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc76:	2340      	movs	r3, #64	; 0x40
 800dc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc84:	f107 0308 	add.w	r3, r7, #8
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff feec 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dc90:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc94:	2119      	movs	r1, #25
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f97a 	bl	800df90 <SDMMC_GetCmdResp1>
 800dc9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc9e:	69fb      	ldr	r3, [r7, #28]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3720      	adds	r7, #32
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dcb4:	230c      	movs	r3, #12
 800dcb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcb8:	2340      	movs	r3, #64	; 0x40
 800dcba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcc6:	f107 0308 	add.w	r3, r7, #8
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff fecb 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dcd2:	4a05      	ldr	r2, [pc, #20]	; (800dce8 <SDMMC_CmdStopTransfer+0x40>)
 800dcd4:	210c      	movs	r1, #12
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f95a 	bl	800df90 <SDMMC_GetCmdResp1>
 800dcdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcde:	69fb      	ldr	r3, [r7, #28]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3720      	adds	r7, #32
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	05f5e100 	.word	0x05f5e100

0800dcec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08a      	sub	sp, #40	; 0x28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dcfc:	2307      	movs	r3, #7
 800dcfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd00:	2340      	movs	r3, #64	; 0x40
 800dd02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd04:	2300      	movs	r3, #0
 800dd06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd0c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd0e:	f107 0310 	add.w	r3, r7, #16
 800dd12:	4619      	mov	r1, r3
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7ff fea7 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dd1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd1e:	2107      	movs	r1, #7
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f000 f935 	bl	800df90 <SDMMC_GetCmdResp1>
 800dd26:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3728      	adds	r7, #40	; 0x28
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b088      	sub	sp, #32
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dd42:	2300      	movs	r3, #0
 800dd44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd46:	2300      	movs	r3, #0
 800dd48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd50:	f107 0308 	add.w	r3, r7, #8
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff fe86 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f8eb 	bl	800df38 <SDMMC_GetCmdError>
 800dd62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd64:	69fb      	ldr	r3, [r7, #28]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b088      	sub	sp, #32
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dd76:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dd7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd80:	2340      	movs	r3, #64	; 0x40
 800dd82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd84:	2300      	movs	r3, #0
 800dd86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd8e:	f107 0308 	add.w	r3, r7, #8
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff fe67 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fae2 	bl	800e364 <SDMMC_GetCmdResp7>
 800dda0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dda2:	69fb      	ldr	r3, [r7, #28]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3720      	adds	r7, #32
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ddba:	2337      	movs	r3, #55	; 0x37
 800ddbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddbe:	2340      	movs	r3, #64	; 0x40
 800ddc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddcc:	f107 0308 	add.w	r3, r7, #8
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff fe48 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ddd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dddc:	2137      	movs	r1, #55	; 0x37
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f8d6 	bl	800df90 <SDMMC_GetCmdResp1>
 800dde4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dde6:	69fb      	ldr	r3, [r7, #28]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3720      	adds	r7, #32
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b088      	sub	sp, #32
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de06:	2329      	movs	r3, #41	; 0x29
 800de08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de0a:	2340      	movs	r3, #64	; 0x40
 800de0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de0e:	2300      	movs	r3, #0
 800de10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de18:	f107 0308 	add.w	r3, r7, #8
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff fe22 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f9e9 	bl	800e1fc <SDMMC_GetCmdResp3>
 800de2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de2c:	69fb      	ldr	r3, [r7, #28]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b088      	sub	sp, #32
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800de3e:	2300      	movs	r3, #0
 800de40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800de42:	2302      	movs	r3, #2
 800de44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800de46:	23c0      	movs	r3, #192	; 0xc0
 800de48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de54:	f107 0308 	add.w	r3, r7, #8
 800de58:	4619      	mov	r1, r3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff fe04 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 f983 	bl	800e16c <SDMMC_GetCmdResp2>
 800de66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de68:	69fb      	ldr	r3, [r7, #28]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b088      	sub	sp, #32
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800de80:	2309      	movs	r3, #9
 800de82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800de84:	23c0      	movs	r3, #192	; 0xc0
 800de86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de92:	f107 0308 	add.w	r3, r7, #8
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff fde5 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 f964 	bl	800e16c <SDMMC_GetCmdResp2>
 800dea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dea6:	69fb      	ldr	r3, [r7, #28]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3720      	adds	r7, #32
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b088      	sub	sp, #32
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800deba:	2300      	movs	r3, #0
 800debc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800debe:	2303      	movs	r3, #3
 800dec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dec2:	2340      	movs	r3, #64	; 0x40
 800dec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800deca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dece:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ded0:	f107 0308 	add.w	r3, r7, #8
 800ded4:	4619      	mov	r1, r3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff fdc6 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	2103      	movs	r1, #3
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f9c9 	bl	800e278 <SDMMC_GetCmdResp6>
 800dee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dee8:	69fb      	ldr	r3, [r7, #28]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3720      	adds	r7, #32
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b088      	sub	sp, #32
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800df00:	230d      	movs	r3, #13
 800df02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df04:	2340      	movs	r3, #64	; 0x40
 800df06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df08:	2300      	movs	r3, #0
 800df0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df12:	f107 0308 	add.w	r3, r7, #8
 800df16:	4619      	mov	r1, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff fda5 	bl	800da68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800df1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800df22:	210d      	movs	r1, #13
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f833 	bl	800df90 <SDMMC_GetCmdResp1>
 800df2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df2c:	69fb      	ldr	r3, [r7, #28]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3720      	adds	r7, #32
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df40:	4b11      	ldr	r3, [pc, #68]	; (800df88 <SDMMC_GetCmdError+0x50>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a11      	ldr	r2, [pc, #68]	; (800df8c <SDMMC_GetCmdError+0x54>)
 800df46:	fba2 2303 	umull	r2, r3, r2, r3
 800df4a:	0a5b      	lsrs	r3, r3, #9
 800df4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800df50:	fb02 f303 	mul.w	r3, r2, r3
 800df54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	1e5a      	subs	r2, r3, #1
 800df5a:	60fa      	str	r2, [r7, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d102      	bne.n	800df66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df64:	e009      	b.n	800df7a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0f1      	beq.n	800df56 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	22c5      	movs	r2, #197	; 0xc5
 800df76:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3714      	adds	r7, #20
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	20000018 	.word	0x20000018
 800df8c:	10624dd3 	.word	0x10624dd3

0800df90 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b088      	sub	sp, #32
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	460b      	mov	r3, r1
 800df9a:	607a      	str	r2, [r7, #4]
 800df9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df9e:	4b70      	ldr	r3, [pc, #448]	; (800e160 <SDMMC_GetCmdResp1+0x1d0>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a70      	ldr	r2, [pc, #448]	; (800e164 <SDMMC_GetCmdResp1+0x1d4>)
 800dfa4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa8:	0a5a      	lsrs	r2, r3, #9
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	fb02 f303 	mul.w	r3, r2, r3
 800dfb0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	1e5a      	subs	r2, r3, #1
 800dfb6:	61fa      	str	r2, [r7, #28]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d102      	bne.n	800dfc2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfc0:	e0c9      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0ef      	beq.n	800dfb2 <SDMMC_GetCmdResp1+0x22>
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1ea      	bne.n	800dfb2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe0:	f003 0304 	and.w	r3, r3, #4
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d004      	beq.n	800dff2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2204      	movs	r2, #4
 800dfec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfee:	2304      	movs	r3, #4
 800dff0:	e0b1      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff6:	f003 0301 	and.w	r3, r3, #1
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d004      	beq.n	800e008 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2201      	movs	r2, #1
 800e002:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e004:	2301      	movs	r3, #1
 800e006:	e0a6      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	22c5      	movs	r2, #197	; 0xc5
 800e00c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7ff fd54 	bl	800dabc <SDIO_GetCommandResponse>
 800e014:	4603      	mov	r3, r0
 800e016:	461a      	mov	r2, r3
 800e018:	7afb      	ldrb	r3, [r7, #11]
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d001      	beq.n	800e022 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e01e:	2301      	movs	r3, #1
 800e020:	e099      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e022:	2100      	movs	r1, #0
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7ff fd56 	bl	800dad6 <SDIO_GetResponse>
 800e02a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	4b4e      	ldr	r3, [pc, #312]	; (800e168 <SDMMC_GetCmdResp1+0x1d8>)
 800e030:	4013      	ands	r3, r2
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e036:	2300      	movs	r3, #0
 800e038:	e08d      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	da02      	bge.n	800e046 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e044:	e087      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e050:	2340      	movs	r3, #64	; 0x40
 800e052:	e080      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e05e:	2380      	movs	r3, #128	; 0x80
 800e060:	e079      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e06c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e070:	e071      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d002      	beq.n	800e082 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e07c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e080:	e069      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e08c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e090:	e061      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e09c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0a0:	e059      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0b0:	e051      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0c0:	e049      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e0cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e0d0:	e041      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e0dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0e0:	e039      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e0ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e0f0:	e031      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e100:	e029      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d002      	beq.n	800e112 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e10c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e110:	e021      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e11c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e120:	e019      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e12c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e130:	e011      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e13c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e140:	e009      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f003 0308 	and.w	r3, r3, #8
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e14c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e150:	e001      	b.n	800e156 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e156:	4618      	mov	r0, r3
 800e158:	3720      	adds	r7, #32
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	20000018 	.word	0x20000018
 800e164:	10624dd3 	.word	0x10624dd3
 800e168:	fdffe008 	.word	0xfdffe008

0800e16c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b085      	sub	sp, #20
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e174:	4b1f      	ldr	r3, [pc, #124]	; (800e1f4 <SDMMC_GetCmdResp2+0x88>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a1f      	ldr	r2, [pc, #124]	; (800e1f8 <SDMMC_GetCmdResp2+0x8c>)
 800e17a:	fba2 2303 	umull	r2, r3, r2, r3
 800e17e:	0a5b      	lsrs	r3, r3, #9
 800e180:	f241 3288 	movw	r2, #5000	; 0x1388
 800e184:	fb02 f303 	mul.w	r3, r2, r3
 800e188:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	1e5a      	subs	r2, r3, #1
 800e18e:	60fa      	str	r2, [r7, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d102      	bne.n	800e19a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e198:	e026      	b.n	800e1e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0ef      	beq.n	800e18a <SDMMC_GetCmdResp2+0x1e>
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1ea      	bne.n	800e18a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b8:	f003 0304 	and.w	r3, r3, #4
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d004      	beq.n	800e1ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2204      	movs	r2, #4
 800e1c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1c6:	2304      	movs	r3, #4
 800e1c8:	e00e      	b.n	800e1e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d004      	beq.n	800e1e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e003      	b.n	800e1e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	22c5      	movs	r2, #197	; 0xc5
 800e1e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	20000018 	.word	0x20000018
 800e1f8:	10624dd3 	.word	0x10624dd3

0800e1fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e204:	4b1a      	ldr	r3, [pc, #104]	; (800e270 <SDMMC_GetCmdResp3+0x74>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a1a      	ldr	r2, [pc, #104]	; (800e274 <SDMMC_GetCmdResp3+0x78>)
 800e20a:	fba2 2303 	umull	r2, r3, r2, r3
 800e20e:	0a5b      	lsrs	r3, r3, #9
 800e210:	f241 3288 	movw	r2, #5000	; 0x1388
 800e214:	fb02 f303 	mul.w	r3, r2, r3
 800e218:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	1e5a      	subs	r2, r3, #1
 800e21e:	60fa      	str	r2, [r7, #12]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d102      	bne.n	800e22a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e228:	e01b      	b.n	800e262 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0ef      	beq.n	800e21a <SDMMC_GetCmdResp3+0x1e>
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1ea      	bne.n	800e21a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e248:	f003 0304 	and.w	r3, r3, #4
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d004      	beq.n	800e25a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2204      	movs	r2, #4
 800e254:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e256:	2304      	movs	r3, #4
 800e258:	e003      	b.n	800e262 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	22c5      	movs	r2, #197	; 0xc5
 800e25e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	20000018 	.word	0x20000018
 800e274:	10624dd3 	.word	0x10624dd3

0800e278 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	460b      	mov	r3, r1
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e286:	4b35      	ldr	r3, [pc, #212]	; (800e35c <SDMMC_GetCmdResp6+0xe4>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a35      	ldr	r2, [pc, #212]	; (800e360 <SDMMC_GetCmdResp6+0xe8>)
 800e28c:	fba2 2303 	umull	r2, r3, r2, r3
 800e290:	0a5b      	lsrs	r3, r3, #9
 800e292:	f241 3288 	movw	r2, #5000	; 0x1388
 800e296:	fb02 f303 	mul.w	r3, r2, r3
 800e29a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	61fa      	str	r2, [r7, #28]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d102      	bne.n	800e2ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2aa:	e052      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0ef      	beq.n	800e29c <SDMMC_GetCmdResp6+0x24>
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1ea      	bne.n	800e29c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ca:	f003 0304 	and.w	r3, r3, #4
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d004      	beq.n	800e2dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2204      	movs	r2, #4
 800e2d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2d8:	2304      	movs	r3, #4
 800e2da:	e03a      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e02f      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff fbe2 	bl	800dabc <SDIO_GetCommandResponse>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	7afb      	ldrb	r3, [r7, #11]
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d001      	beq.n	800e306 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e302:	2301      	movs	r3, #1
 800e304:	e025      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	22c5      	movs	r2, #197	; 0xc5
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e30c:	2100      	movs	r1, #0
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f7ff fbe1 	bl	800dad6 <SDIO_GetResponse>
 800e314:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d106      	bne.n	800e32e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	0c1b      	lsrs	r3, r3, #16
 800e324:	b29a      	uxth	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e32a:	2300      	movs	r3, #0
 800e32c:	e011      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d002      	beq.n	800e33e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e33c:	e009      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e34c:	e001      	b.n	800e352 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e34e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e352:	4618      	mov	r0, r3
 800e354:	3720      	adds	r7, #32
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20000018 	.word	0x20000018
 800e360:	10624dd3 	.word	0x10624dd3

0800e364 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e36c:	4b22      	ldr	r3, [pc, #136]	; (800e3f8 <SDMMC_GetCmdResp7+0x94>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a22      	ldr	r2, [pc, #136]	; (800e3fc <SDMMC_GetCmdResp7+0x98>)
 800e372:	fba2 2303 	umull	r2, r3, r2, r3
 800e376:	0a5b      	lsrs	r3, r3, #9
 800e378:	f241 3288 	movw	r2, #5000	; 0x1388
 800e37c:	fb02 f303 	mul.w	r3, r2, r3
 800e380:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	1e5a      	subs	r2, r3, #1
 800e386:	60fa      	str	r2, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d102      	bne.n	800e392 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e38c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e390:	e02c      	b.n	800e3ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e396:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0ef      	beq.n	800e382 <SDMMC_GetCmdResp7+0x1e>
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1ea      	bne.n	800e382 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b0:	f003 0304 	and.w	r3, r3, #4
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d004      	beq.n	800e3c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2204      	movs	r2, #4
 800e3bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3be:	2304      	movs	r3, #4
 800e3c0:	e014      	b.n	800e3ec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d004      	beq.n	800e3d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e009      	b.n	800e3ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2240      	movs	r2, #64	; 0x40
 800e3e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e3ea:	2300      	movs	r3, #0
  
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	20000018 	.word	0x20000018
 800e3fc:	10624dd3 	.word	0x10624dd3

0800e400 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e404:	4904      	ldr	r1, [pc, #16]	; (800e418 <MX_FATFS_Init+0x18>)
 800e406:	4805      	ldr	r0, [pc, #20]	; (800e41c <MX_FATFS_Init+0x1c>)
 800e408:	f003 fbb8 	bl	8011b7c <FATFS_LinkDriver>
 800e40c:	4603      	mov	r3, r0
 800e40e:	461a      	mov	r2, r3
 800e410:	4b03      	ldr	r3, [pc, #12]	; (800e420 <MX_FATFS_Init+0x20>)
 800e412:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e414:	bf00      	nop
 800e416:	bd80      	pop	{r7, pc}
 800e418:	20004bf8 	.word	0x20004bf8
 800e41c:	08015be8 	.word	0x08015be8
 800e420:	20004bf4 	.word	0x20004bf4

0800e424 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e424:	b480      	push	{r7}
 800e426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e428:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e43e:	f000 f888 	bl	800e552 <BSP_SD_IsDetected>
 800e442:	4603      	mov	r3, r0
 800e444:	2b01      	cmp	r3, #1
 800e446:	d001      	beq.n	800e44c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	e005      	b.n	800e458 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e44c:	4804      	ldr	r0, [pc, #16]	; (800e460 <BSP_SD_Init+0x2c>)
 800e44e:	f7fb fea7 	bl	800a1a0 <HAL_SD_Init>
 800e452:	4603      	mov	r3, r0
 800e454:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e456:	79fb      	ldrb	r3, [r7, #7]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20004800 	.word	0x20004800

0800e464 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e470:	2300      	movs	r3, #0
 800e472:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	68ba      	ldr	r2, [r7, #8]
 800e478:	68f9      	ldr	r1, [r7, #12]
 800e47a:	4806      	ldr	r0, [pc, #24]	; (800e494 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e47c:	f7fb ff3e 	bl	800a2fc <HAL_SD_ReadBlocks_DMA>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20004800 	.word	0x20004800

0800e498 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	68f9      	ldr	r1, [r7, #12]
 800e4ae:	4806      	ldr	r0, [pc, #24]	; (800e4c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e4b0:	f7fc f806 	bl	800a4c0 <HAL_SD_WriteBlocks_DMA>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	20004800 	.word	0x20004800

0800e4cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e4d0:	4805      	ldr	r0, [pc, #20]	; (800e4e8 <BSP_SD_GetCardState+0x1c>)
 800e4d2:	f7fc fc3b 	bl	800ad4c <HAL_SD_GetCardState>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	bf14      	ite	ne
 800e4dc:	2301      	movne	r3, #1
 800e4de:	2300      	moveq	r3, #0
 800e4e0:	b2db      	uxtb	r3, r3
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20004800 	.word	0x20004800

0800e4ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e4f4:	6879      	ldr	r1, [r7, #4]
 800e4f6:	4803      	ldr	r0, [pc, #12]	; (800e504 <BSP_SD_GetCardInfo+0x18>)
 800e4f8:	f7fc fbfc 	bl	800acf4 <HAL_SD_GetCardInfo>
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	20004800 	.word	0x20004800

0800e508 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e510:	f000 f818 	bl	800e544 <BSP_SD_AbortCallback>
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e524:	f000 f9c4 	bl	800e8b0 <BSP_SD_WriteCpltCallback>
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e538:	f000 f9c8 	bl	800e8cc <BSP_SD_ReadCpltCallback>
}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e544:	b480      	push	{r7}
 800e546:	af00      	add	r7, sp, #0

}
 800e548:	bf00      	nop
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr

0800e552 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b082      	sub	sp, #8
 800e556:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e558:	2301      	movs	r3, #1
 800e55a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e55c:	f000 f80c 	bl	800e578 <BSP_PlatformIsDetected>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e566:	2300      	movs	r3, #0
 800e568:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	b2db      	uxtb	r3, r3
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3708      	adds	r7, #8
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
	...

0800e578 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e57e:	2301      	movs	r3, #1
 800e580:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e582:	2120      	movs	r1, #32
 800e584:	4806      	ldr	r0, [pc, #24]	; (800e5a0 <BSP_PlatformIsDetected+0x28>)
 800e586:	f7f9 fbe3 	bl	8007d50 <HAL_GPIO_ReadPin>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e590:	2300      	movs	r3, #0
 800e592:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e594:	79fb      	ldrb	r3, [r7, #7]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	40020400 	.word	0x40020400

0800e5a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e5ac:	f003 fc43 	bl	8011e36 <osKernelSysTick>
 800e5b0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e5b2:	e006      	b.n	800e5c2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e5b4:	f7ff ff8a 	bl	800e4cc <BSP_SD_GetCardState>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e009      	b.n	800e5d6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e5c2:	f003 fc38 	bl	8011e36 <osKernelSysTick>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d8f0      	bhi.n	800e5b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e5d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
	...

0800e5e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <SD_CheckStatus+0x38>)
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e5f0:	f7ff ff6c 	bl	800e4cc <BSP_SD_GetCardState>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d107      	bne.n	800e60a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e5fa:	4b07      	ldr	r3, [pc, #28]	; (800e618 <SD_CheckStatus+0x38>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	f023 0301 	bic.w	r3, r3, #1
 800e604:	b2da      	uxtb	r2, r3
 800e606:	4b04      	ldr	r3, [pc, #16]	; (800e618 <SD_CheckStatus+0x38>)
 800e608:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e60a:	4b03      	ldr	r3, [pc, #12]	; (800e618 <SD_CheckStatus+0x38>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	b2db      	uxtb	r3, r3
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	20000071 	.word	0x20000071

0800e61c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e626:	4b20      	ldr	r3, [pc, #128]	; (800e6a8 <SD_initialize+0x8c>)
 800e628:	2201      	movs	r2, #1
 800e62a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e62c:	f003 fbf7 	bl	8011e1e <osKernelRunning>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d031      	beq.n	800e69a <SD_initialize+0x7e>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e636:	f7ff fefd 	bl	800e434 <BSP_SD_Init>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d107      	bne.n	800e650 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff ffcc 	bl	800e5e0 <SD_CheckStatus>
 800e648:	4603      	mov	r3, r0
 800e64a:	461a      	mov	r2, r3
 800e64c:	4b16      	ldr	r3, [pc, #88]	; (800e6a8 <SD_initialize+0x8c>)
 800e64e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e650:	4b15      	ldr	r3, [pc, #84]	; (800e6a8 <SD_initialize+0x8c>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b01      	cmp	r3, #1
 800e658:	d01f      	beq.n	800e69a <SD_initialize+0x7e>
    {
      if (SDQueueID == NULL)
 800e65a:	4b14      	ldr	r3, [pc, #80]	; (800e6ac <SD_initialize+0x90>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10f      	bne.n	800e682 <SD_initialize+0x66>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e662:	4a13      	ldr	r2, [pc, #76]	; (800e6b0 <SD_initialize+0x94>)
 800e664:	f107 0308 	add.w	r3, r7, #8
 800e668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e66c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	2100      	movs	r1, #0
 800e676:	4618      	mov	r0, r3
 800e678:	f003 fcdd 	bl	8012036 <osMessageCreate>
 800e67c:	4603      	mov	r3, r0
 800e67e:	4a0b      	ldr	r2, [pc, #44]	; (800e6ac <SD_initialize+0x90>)
 800e680:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e682:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <SD_initialize+0x90>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d107      	bne.n	800e69a <SD_initialize+0x7e>
      {
        Stat |= STA_NOINIT;
 800e68a:	4b07      	ldr	r3, [pc, #28]	; (800e6a8 <SD_initialize+0x8c>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	f043 0301 	orr.w	r3, r3, #1
 800e694:	b2da      	uxtb	r2, r3
 800e696:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <SD_initialize+0x8c>)
 800e698:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e69a:	4b03      	ldr	r3, [pc, #12]	; (800e6a8 <SD_initialize+0x8c>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	b2db      	uxtb	r3, r3
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	20000071 	.word	0x20000071
 800e6ac:	2000045c 	.word	0x2000045c
 800e6b0:	08015ae4 	.word	0x08015ae4

0800e6b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff ff8d 	bl	800e5e0 <SD_CheckStatus>
 800e6c6:	4603      	mov	r3, r0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b08a      	sub	sp, #40	; 0x28
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	607a      	str	r2, [r7, #4]
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e6e6:	f247 5030 	movw	r0, #30000	; 0x7530
 800e6ea:	f7ff ff5b 	bl	800e5a4 <SD_CheckStatusWithTimeout>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da02      	bge.n	800e6fa <SD_read+0x2a>
  {
    return res;
 800e6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f8:	e032      	b.n	800e760 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	6879      	ldr	r1, [r7, #4]
 800e6fe:	68b8      	ldr	r0, [r7, #8]
 800e700:	f7ff feb0 	bl	800e464 <BSP_SD_ReadBlocks_DMA>
 800e704:	4603      	mov	r3, r0
 800e706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800e70a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d124      	bne.n	800e75c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e712:	4b15      	ldr	r3, [pc, #84]	; (800e768 <SD_read+0x98>)
 800e714:	6819      	ldr	r1, [r3, #0]
 800e716:	f107 0314 	add.w	r3, r7, #20
 800e71a:	f247 5230 	movw	r2, #30000	; 0x7530
 800e71e:	4618      	mov	r0, r3
 800e720:	f003 fcdc 	bl	80120dc <osMessageGet>

    if (event.status == osEventMessage)
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2b10      	cmp	r3, #16
 800e728:	d118      	bne.n	800e75c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d115      	bne.n	800e75c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e730:	f003 fb81 	bl	8011e36 <osKernelSysTick>
 800e734:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e736:	e008      	b.n	800e74a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e738:	f7ff fec8 	bl	800e4cc <BSP_SD_GetCardState>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d103      	bne.n	800e74a <SD_read+0x7a>
              {
                res = RES_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e748:	e008      	b.n	800e75c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e74a:	f003 fb74 	bl	8011e36 <osKernelSysTick>
 800e74e:	4602      	mov	r2, r0
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	f247 522f 	movw	r2, #29999	; 0x752f
 800e758:	4293      	cmp	r3, r2
 800e75a:	d9ed      	bls.n	800e738 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e760:	4618      	mov	r0, r3
 800e762:	3728      	adds	r7, #40	; 0x28
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	2000045c 	.word	0x2000045c

0800e76c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08a      	sub	sp, #40	; 0x28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60b9      	str	r1, [r7, #8]
 800e774:	607a      	str	r2, [r7, #4]
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	4603      	mov	r3, r0
 800e77a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e77c:	2301      	movs	r3, #1
 800e77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e782:	f247 5030 	movw	r0, #30000	; 0x7530
 800e786:	f7ff ff0d 	bl	800e5a4 <SD_CheckStatusWithTimeout>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	da02      	bge.n	800e796 <SD_write+0x2a>
  {
    return res;
 800e790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e794:	e02e      	b.n	800e7f4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	6879      	ldr	r1, [r7, #4]
 800e79a:	68b8      	ldr	r0, [r7, #8]
 800e79c:	f7ff fe7c 	bl	800e498 <BSP_SD_WriteBlocks_DMA>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d124      	bne.n	800e7f0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e7a6:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <SD_write+0x90>)
 800e7a8:	6819      	ldr	r1, [r3, #0]
 800e7aa:	f107 0314 	add.w	r3, r7, #20
 800e7ae:	f247 5230 	movw	r2, #30000	; 0x7530
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f003 fc92 	bl	80120dc <osMessageGet>

    if (event.status == osEventMessage)
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2b10      	cmp	r3, #16
 800e7bc:	d118      	bne.n	800e7f0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d115      	bne.n	800e7f0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e7c4:	f003 fb37 	bl	8011e36 <osKernelSysTick>
 800e7c8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e7ca:	e008      	b.n	800e7de <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e7cc:	f7ff fe7e 	bl	800e4cc <BSP_SD_GetCardState>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d103      	bne.n	800e7de <SD_write+0x72>
          {
            res = RES_OK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e7dc:	e008      	b.n	800e7f0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e7de:	f003 fb2a 	bl	8011e36 <osKernelSysTick>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6a3b      	ldr	r3, [r7, #32]
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d9ed      	bls.n	800e7cc <SD_write+0x60>
    }

  }
#endif

  return res;
 800e7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3728      	adds	r7, #40	; 0x28
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	2000045c 	.word	0x2000045c

0800e800 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b08c      	sub	sp, #48	; 0x30
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	603a      	str	r2, [r7, #0]
 800e80a:	71fb      	strb	r3, [r7, #7]
 800e80c:	460b      	mov	r3, r1
 800e80e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e816:	4b25      	ldr	r3, [pc, #148]	; (800e8ac <SD_ioctl+0xac>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	f003 0301 	and.w	r3, r3, #1
 800e820:	2b00      	cmp	r3, #0
 800e822:	d001      	beq.n	800e828 <SD_ioctl+0x28>
 800e824:	2303      	movs	r3, #3
 800e826:	e03c      	b.n	800e8a2 <SD_ioctl+0xa2>

  switch (cmd)
 800e828:	79bb      	ldrb	r3, [r7, #6]
 800e82a:	2b03      	cmp	r3, #3
 800e82c:	d834      	bhi.n	800e898 <SD_ioctl+0x98>
 800e82e:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <SD_ioctl+0x34>)
 800e830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e834:	0800e845 	.word	0x0800e845
 800e838:	0800e84d 	.word	0x0800e84d
 800e83c:	0800e865 	.word	0x0800e865
 800e840:	0800e87f 	.word	0x0800e87f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e84a:	e028      	b.n	800e89e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e84c:	f107 030c 	add.w	r3, r7, #12
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff fe4b 	bl	800e4ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e862:	e01c      	b.n	800e89e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e864:	f107 030c 	add.w	r3, r7, #12
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff fe3f 	bl	800e4ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e870:	b29a      	uxth	r2, r3
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e87c:	e00f      	b.n	800e89e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e87e:	f107 030c 	add.w	r3, r7, #12
 800e882:	4618      	mov	r0, r3
 800e884:	f7ff fe32 	bl	800e4ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	0a5a      	lsrs	r2, r3, #9
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e896:	e002      	b.n	800e89e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e898:	2304      	movs	r3, #4
 800e89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e89e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3730      	adds	r7, #48	; 0x30
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20000071 	.word	0x20000071

0800e8b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e8b4:	4b04      	ldr	r3, [pc, #16]	; (800e8c8 <BSP_SD_WriteCpltCallback+0x18>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2102      	movs	r1, #2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f003 fbcd 	bl	801205c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e8c2:	bf00      	nop
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	2000045c 	.word	0x2000045c

0800e8cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e8d0:	4b04      	ldr	r3, [pc, #16]	; (800e8e4 <BSP_SD_ReadCpltCallback+0x18>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f003 fbbf 	bl	801205c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e8de:	bf00      	nop
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	2000045c 	.word	0x2000045c

0800e8e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e8f2:	79fb      	ldrb	r3, [r7, #7]
 800e8f4:	4a08      	ldr	r2, [pc, #32]	; (800e918 <disk_status+0x30>)
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	79fa      	ldrb	r2, [r7, #7]
 800e900:	4905      	ldr	r1, [pc, #20]	; (800e918 <disk_status+0x30>)
 800e902:	440a      	add	r2, r1
 800e904:	7a12      	ldrb	r2, [r2, #8]
 800e906:	4610      	mov	r0, r2
 800e908:	4798      	blx	r3
 800e90a:	4603      	mov	r3, r0
 800e90c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	20000488 	.word	0x20000488

0800e91c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e926:	2300      	movs	r3, #0
 800e928:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	4a0d      	ldr	r2, [pc, #52]	; (800e964 <disk_initialize+0x48>)
 800e92e:	5cd3      	ldrb	r3, [r2, r3]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d111      	bne.n	800e958 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e934:	79fb      	ldrb	r3, [r7, #7]
 800e936:	4a0b      	ldr	r2, [pc, #44]	; (800e964 <disk_initialize+0x48>)
 800e938:	2101      	movs	r1, #1
 800e93a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	4a09      	ldr	r2, [pc, #36]	; (800e964 <disk_initialize+0x48>)
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	4413      	add	r3, r2
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	79fa      	ldrb	r2, [r7, #7]
 800e94a:	4906      	ldr	r1, [pc, #24]	; (800e964 <disk_initialize+0x48>)
 800e94c:	440a      	add	r2, r1
 800e94e:	7a12      	ldrb	r2, [r2, #8]
 800e950:	4610      	mov	r0, r2
 800e952:	4798      	blx	r3
 800e954:	4603      	mov	r3, r0
 800e956:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e958:	7bfb      	ldrb	r3, [r7, #15]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000488 	.word	0x20000488

0800e968 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e968:	b590      	push	{r4, r7, lr}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60b9      	str	r1, [r7, #8]
 800e970:	607a      	str	r2, [r7, #4]
 800e972:	603b      	str	r3, [r7, #0]
 800e974:	4603      	mov	r3, r0
 800e976:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e978:	7bfb      	ldrb	r3, [r7, #15]
 800e97a:	4a0a      	ldr	r2, [pc, #40]	; (800e9a4 <disk_read+0x3c>)
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	4413      	add	r3, r2
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	689c      	ldr	r4, [r3, #8]
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	4a07      	ldr	r2, [pc, #28]	; (800e9a4 <disk_read+0x3c>)
 800e988:	4413      	add	r3, r2
 800e98a:	7a18      	ldrb	r0, [r3, #8]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	68b9      	ldr	r1, [r7, #8]
 800e992:	47a0      	blx	r4
 800e994:	4603      	mov	r3, r0
 800e996:	75fb      	strb	r3, [r7, #23]
  return res;
 800e998:	7dfb      	ldrb	r3, [r7, #23]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	371c      	adds	r7, #28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd90      	pop	{r4, r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20000488 	.word	0x20000488

0800e9a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
 800e9b2:	603b      	str	r3, [r7, #0]
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e9b8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ba:	4a0a      	ldr	r2, [pc, #40]	; (800e9e4 <disk_write+0x3c>)
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4413      	add	r3, r2
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	68dc      	ldr	r4, [r3, #12]
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
 800e9c6:	4a07      	ldr	r2, [pc, #28]	; (800e9e4 <disk_write+0x3c>)
 800e9c8:	4413      	add	r3, r2
 800e9ca:	7a18      	ldrb	r0, [r3, #8]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	68b9      	ldr	r1, [r7, #8]
 800e9d2:	47a0      	blx	r4
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	371c      	adds	r7, #28
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd90      	pop	{r4, r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20000488 	.word	0x20000488

0800e9e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	603a      	str	r2, [r7, #0]
 800e9f2:	71fb      	strb	r3, [r7, #7]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	4a09      	ldr	r2, [pc, #36]	; (800ea20 <disk_ioctl+0x38>)
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4413      	add	r3, r2
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	79fa      	ldrb	r2, [r7, #7]
 800ea06:	4906      	ldr	r1, [pc, #24]	; (800ea20 <disk_ioctl+0x38>)
 800ea08:	440a      	add	r2, r1
 800ea0a:	7a10      	ldrb	r0, [r2, #8]
 800ea0c:	79b9      	ldrb	r1, [r7, #6]
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	4798      	blx	r3
 800ea12:	4603      	mov	r3, r0
 800ea14:	73fb      	strb	r3, [r7, #15]
  return res;
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	20000488 	.word	0x20000488

0800ea24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ea34:	89fb      	ldrh	r3, [r7, #14]
 800ea36:	021b      	lsls	r3, r3, #8
 800ea38:	b21a      	sxth	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	b21b      	sxth	r3, r3
 800ea40:	4313      	orrs	r3, r2
 800ea42:	b21b      	sxth	r3, r3
 800ea44:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ea46:	89fb      	ldrh	r3, [r7, #14]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3714      	adds	r7, #20
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3303      	adds	r3, #3
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	021b      	lsls	r3, r3, #8
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	3202      	adds	r2, #2
 800ea6c:	7812      	ldrb	r2, [r2, #0]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	3201      	adds	r2, #1
 800ea7a:	7812      	ldrb	r2, [r2, #0]
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	021b      	lsls	r3, r3, #8
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	7812      	ldrb	r2, [r2, #0]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3714      	adds	r7, #20
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr

0800ea9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea9a:	b480      	push	{r7}
 800ea9c:	b083      	sub	sp, #12
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	887a      	ldrh	r2, [r7, #2]
 800eaae:	b2d2      	uxtb	r2, r2
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	887b      	ldrh	r3, [r7, #2]
 800eab4:	0a1b      	lsrs	r3, r3, #8
 800eab6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	607a      	str	r2, [r7, #4]
 800eabe:	887a      	ldrh	r2, [r7, #2]
 800eac0:	b2d2      	uxtb	r2, r2
 800eac2:	701a      	strb	r2, [r3, #0]
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	683a      	ldr	r2, [r7, #0]
 800eae2:	b2d2      	uxtb	r2, r2
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	0a1b      	lsrs	r3, r3, #8
 800eaea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	607a      	str	r2, [r7, #4]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	b2d2      	uxtb	r2, r2
 800eaf6:	701a      	strb	r2, [r3, #0]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	0a1b      	lsrs	r3, r3, #8
 800eafc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	1c5a      	adds	r2, r3, #1
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	b2d2      	uxtb	r2, r2
 800eb08:	701a      	strb	r2, [r3, #0]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	0a1b      	lsrs	r3, r3, #8
 800eb0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	1c5a      	adds	r2, r3, #1
 800eb14:	607a      	str	r2, [r7, #4]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	b2d2      	uxtb	r2, r2
 800eb1a:	701a      	strb	r2, [r3, #0]
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eb28:	b480      	push	{r7}
 800eb2a:	b087      	sub	sp, #28
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00d      	beq.n	800eb5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eb42:	693a      	ldr	r2, [r7, #16]
 800eb44:	1c53      	adds	r3, r2, #1
 800eb46:	613b      	str	r3, [r7, #16]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	1c59      	adds	r1, r3, #1
 800eb4c:	6179      	str	r1, [r7, #20]
 800eb4e:	7812      	ldrb	r2, [r2, #0]
 800eb50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	607b      	str	r3, [r7, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1f1      	bne.n	800eb42 <mem_cpy+0x1a>
	}
}
 800eb5e:	bf00      	nop
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eb6a:	b480      	push	{r7}
 800eb6c:	b087      	sub	sp, #28
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	60f8      	str	r0, [r7, #12]
 800eb72:	60b9      	str	r1, [r7, #8]
 800eb74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	617a      	str	r2, [r7, #20]
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	b2d2      	uxtb	r2, r2
 800eb84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3b01      	subs	r3, #1
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1f3      	bne.n	800eb7a <mem_set+0x10>
}
 800eb92:	bf00      	nop
 800eb94:	bf00      	nop
 800eb96:	371c      	adds	r7, #28
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eba0:	b480      	push	{r7}
 800eba2:	b089      	sub	sp, #36	; 0x24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	61fb      	str	r3, [r7, #28]
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	1c5a      	adds	r2, r3, #1
 800ebbc:	61fa      	str	r2, [r7, #28]
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	1c5a      	adds	r2, r3, #1
 800ebc6:	61ba      	str	r2, [r7, #24]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	1acb      	subs	r3, r1, r3
 800ebcc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	607b      	str	r3, [r7, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <mem_cmp+0x40>
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d0eb      	beq.n	800ebb8 <mem_cmp+0x18>

	return r;
 800ebe0:	697b      	ldr	r3, [r7, #20]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3724      	adds	r7, #36	; 0x24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ebf8:	e002      	b.n	800ec00 <chk_chr+0x12>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	607b      	str	r3, [r7, #4]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d005      	beq.n	800ec14 <chk_chr+0x26>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d1f2      	bne.n	800ebfa <chk_chr+0xc>
	return *str;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	781b      	ldrb	r3, [r3, #0]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d009      	beq.n	800ec46 <lock_fs+0x22>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f003 f8a0 	bl	8011d7c <ff_req_grant>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d001      	beq.n	800ec46 <lock_fs+0x22>
 800ec42:	2301      	movs	r3, #1
 800ec44:	e000      	b.n	800ec48 <lock_fs+0x24>
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00d      	beq.n	800ec7e <unlock_fs+0x2e>
 800ec62:	78fb      	ldrb	r3, [r7, #3]
 800ec64:	2b0c      	cmp	r3, #12
 800ec66:	d00a      	beq.n	800ec7e <unlock_fs+0x2e>
 800ec68:	78fb      	ldrb	r3, [r7, #3]
 800ec6a:	2b0b      	cmp	r3, #11
 800ec6c:	d007      	beq.n	800ec7e <unlock_fs+0x2e>
 800ec6e:	78fb      	ldrb	r3, [r7, #3]
 800ec70:	2b0f      	cmp	r3, #15
 800ec72:	d004      	beq.n	800ec7e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f003 f894 	bl	8011da6 <ff_rel_grant>
	}
}
 800ec7e:	bf00      	nop
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
	...

0800ec88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec92:	2300      	movs	r3, #0
 800ec94:	60bb      	str	r3, [r7, #8]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	60fb      	str	r3, [r7, #12]
 800ec9a:	e029      	b.n	800ecf0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ec9c:	4a27      	ldr	r2, [pc, #156]	; (800ed3c <chk_lock+0xb4>)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	4413      	add	r3, r2
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d01d      	beq.n	800ece6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ecaa:	4a24      	ldr	r2, [pc, #144]	; (800ed3c <chk_lock+0xb4>)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	011b      	lsls	r3, r3, #4
 800ecb0:	4413      	add	r3, r2
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d116      	bne.n	800ecea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ecbc:	4a1f      	ldr	r2, [pc, #124]	; (800ed3c <chk_lock+0xb4>)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	011b      	lsls	r3, r3, #4
 800ecc2:	4413      	add	r3, r2
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d10c      	bne.n	800ecea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ecd0:	4a1a      	ldr	r2, [pc, #104]	; (800ed3c <chk_lock+0xb4>)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	011b      	lsls	r3, r3, #4
 800ecd6:	4413      	add	r3, r2
 800ecd8:	3308      	adds	r3, #8
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d102      	bne.n	800ecea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ece4:	e007      	b.n	800ecf6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ece6:	2301      	movs	r3, #1
 800ece8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3301      	adds	r3, #1
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d9d2      	bls.n	800ec9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	d109      	bne.n	800ed10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d102      	bne.n	800ed08 <chk_lock+0x80>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d101      	bne.n	800ed0c <chk_lock+0x84>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	e010      	b.n	800ed2e <chk_lock+0xa6>
 800ed0c:	2312      	movs	r3, #18
 800ed0e:	e00e      	b.n	800ed2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d108      	bne.n	800ed28 <chk_lock+0xa0>
 800ed16:	4a09      	ldr	r2, [pc, #36]	; (800ed3c <chk_lock+0xb4>)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	011b      	lsls	r3, r3, #4
 800ed1c:	4413      	add	r3, r2
 800ed1e:	330c      	adds	r3, #12
 800ed20:	881b      	ldrh	r3, [r3, #0]
 800ed22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed26:	d101      	bne.n	800ed2c <chk_lock+0xa4>
 800ed28:	2310      	movs	r3, #16
 800ed2a:	e000      	b.n	800ed2e <chk_lock+0xa6>
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3714      	adds	r7, #20
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	20000468 	.word	0x20000468

0800ed40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed46:	2300      	movs	r3, #0
 800ed48:	607b      	str	r3, [r7, #4]
 800ed4a:	e002      	b.n	800ed52 <enq_lock+0x12>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	607b      	str	r3, [r7, #4]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d806      	bhi.n	800ed66 <enq_lock+0x26>
 800ed58:	4a09      	ldr	r2, [pc, #36]	; (800ed80 <enq_lock+0x40>)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	011b      	lsls	r3, r3, #4
 800ed5e:	4413      	add	r3, r2
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1f2      	bne.n	800ed4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	bf14      	ite	ne
 800ed6c:	2301      	movne	r3, #1
 800ed6e:	2300      	moveq	r3, #0
 800ed70:	b2db      	uxtb	r3, r3
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	20000468 	.word	0x20000468

0800ed84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed8e:	2300      	movs	r3, #0
 800ed90:	60fb      	str	r3, [r7, #12]
 800ed92:	e01f      	b.n	800edd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ed94:	4a41      	ldr	r2, [pc, #260]	; (800ee9c <inc_lock+0x118>)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	011b      	lsls	r3, r3, #4
 800ed9a:	4413      	add	r3, r2
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d113      	bne.n	800edce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eda6:	4a3d      	ldr	r2, [pc, #244]	; (800ee9c <inc_lock+0x118>)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	011b      	lsls	r3, r3, #4
 800edac:	4413      	add	r3, r2
 800edae:	3304      	adds	r3, #4
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d109      	bne.n	800edce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800edba:	4a38      	ldr	r2, [pc, #224]	; (800ee9c <inc_lock+0x118>)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	011b      	lsls	r3, r3, #4
 800edc0:	4413      	add	r3, r2
 800edc2:	3308      	adds	r3, #8
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800edca:	429a      	cmp	r2, r3
 800edcc:	d006      	beq.n	800eddc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3301      	adds	r3, #1
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d9dc      	bls.n	800ed94 <inc_lock+0x10>
 800edda:	e000      	b.n	800edde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eddc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d132      	bne.n	800ee4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	e002      	b.n	800edf0 <inc_lock+0x6c>
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	3301      	adds	r3, #1
 800edee:	60fb      	str	r3, [r7, #12]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d806      	bhi.n	800ee04 <inc_lock+0x80>
 800edf6:	4a29      	ldr	r2, [pc, #164]	; (800ee9c <inc_lock+0x118>)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	011b      	lsls	r3, r3, #4
 800edfc:	4413      	add	r3, r2
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1f2      	bne.n	800edea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	d101      	bne.n	800ee0e <inc_lock+0x8a>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e040      	b.n	800ee90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	4922      	ldr	r1, [pc, #136]	; (800ee9c <inc_lock+0x118>)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	011b      	lsls	r3, r3, #4
 800ee18:	440b      	add	r3, r1
 800ee1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	689a      	ldr	r2, [r3, #8]
 800ee20:	491e      	ldr	r1, [pc, #120]	; (800ee9c <inc_lock+0x118>)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	440b      	add	r3, r1
 800ee28:	3304      	adds	r3, #4
 800ee2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	695a      	ldr	r2, [r3, #20]
 800ee30:	491a      	ldr	r1, [pc, #104]	; (800ee9c <inc_lock+0x118>)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	011b      	lsls	r3, r3, #4
 800ee36:	440b      	add	r3, r1
 800ee38:	3308      	adds	r3, #8
 800ee3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ee3c:	4a17      	ldr	r2, [pc, #92]	; (800ee9c <inc_lock+0x118>)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	011b      	lsls	r3, r3, #4
 800ee42:	4413      	add	r3, r2
 800ee44:	330c      	adds	r3, #12
 800ee46:	2200      	movs	r2, #0
 800ee48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d009      	beq.n	800ee64 <inc_lock+0xe0>
 800ee50:	4a12      	ldr	r2, [pc, #72]	; (800ee9c <inc_lock+0x118>)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	011b      	lsls	r3, r3, #4
 800ee56:	4413      	add	r3, r2
 800ee58:	330c      	adds	r3, #12
 800ee5a:	881b      	ldrh	r3, [r3, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <inc_lock+0xe0>
 800ee60:	2300      	movs	r3, #0
 800ee62:	e015      	b.n	800ee90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d108      	bne.n	800ee7c <inc_lock+0xf8>
 800ee6a:	4a0c      	ldr	r2, [pc, #48]	; (800ee9c <inc_lock+0x118>)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	4413      	add	r3, r2
 800ee72:	330c      	adds	r3, #12
 800ee74:	881b      	ldrh	r3, [r3, #0]
 800ee76:	3301      	adds	r3, #1
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	e001      	b.n	800ee80 <inc_lock+0xfc>
 800ee7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee80:	4906      	ldr	r1, [pc, #24]	; (800ee9c <inc_lock+0x118>)
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	011b      	lsls	r3, r3, #4
 800ee86:	440b      	add	r3, r1
 800ee88:	330c      	adds	r3, #12
 800ee8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3301      	adds	r3, #1
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3714      	adds	r7, #20
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	20000468 	.word	0x20000468

0800eea0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800eea8:	2300      	movs	r3, #0
 800eeaa:	60fb      	str	r3, [r7, #12]
 800eeac:	e010      	b.n	800eed0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800eeae:	4a0d      	ldr	r2, [pc, #52]	; (800eee4 <clear_lock+0x44>)
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	011b      	lsls	r3, r3, #4
 800eeb4:	4413      	add	r3, r2
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d105      	bne.n	800eeca <clear_lock+0x2a>
 800eebe:	4a09      	ldr	r2, [pc, #36]	; (800eee4 <clear_lock+0x44>)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	011b      	lsls	r3, r3, #4
 800eec4:	4413      	add	r3, r2
 800eec6:	2200      	movs	r2, #0
 800eec8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	3301      	adds	r3, #1
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d9eb      	bls.n	800eeae <clear_lock+0xe>
	}
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	3714      	adds	r7, #20
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	20000468 	.word	0x20000468

0800eee8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	78db      	ldrb	r3, [r3, #3]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d034      	beq.n	800ef66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	7858      	ldrb	r0, [r3, #1]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	f7ff fd4a 	bl	800e9a8 <disk_write>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d002      	beq.n	800ef20 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	73fb      	strb	r3, [r7, #15]
 800ef1e:	e022      	b.n	800ef66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	1ad2      	subs	r2, r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d217      	bcs.n	800ef66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	789b      	ldrb	r3, [r3, #2]
 800ef3a:	613b      	str	r3, [r7, #16]
 800ef3c:	e010      	b.n	800ef60 <sync_window+0x78>
					wsect += fs->fsize;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6a1b      	ldr	r3, [r3, #32]
 800ef42:	697a      	ldr	r2, [r7, #20]
 800ef44:	4413      	add	r3, r2
 800ef46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7858      	ldrb	r0, [r3, #1]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef52:	2301      	movs	r3, #1
 800ef54:	697a      	ldr	r2, [r7, #20]
 800ef56:	f7ff fd27 	bl	800e9a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	613b      	str	r3, [r7, #16]
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d8eb      	bhi.n	800ef3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ef66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d01b      	beq.n	800efc0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7ff ffad 	bl	800eee8 <sync_window>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef92:	7bfb      	ldrb	r3, [r7, #15]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d113      	bne.n	800efc0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7858      	ldrb	r0, [r3, #1]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800efa2:	2301      	movs	r3, #1
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	f7ff fcdf 	bl	800e968 <disk_read>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800efb0:	f04f 33ff 	mov.w	r3, #4294967295
 800efb4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	683a      	ldr	r2, [r7, #0]
 800efbe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800efc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff ff87 	bl	800eee8 <sync_window>
 800efda:	4603      	mov	r3, r0
 800efdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800efde:	7bfb      	ldrb	r3, [r7, #15]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d158      	bne.n	800f096 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	2b03      	cmp	r3, #3
 800efea:	d148      	bne.n	800f07e <sync_fs+0xb2>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	791b      	ldrb	r3, [r3, #4]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d144      	bne.n	800f07e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3338      	adds	r3, #56	; 0x38
 800eff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800effc:	2100      	movs	r1, #0
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff fdb3 	bl	800eb6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	3338      	adds	r3, #56	; 0x38
 800f008:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f00c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fd42 	bl	800ea9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	3338      	adds	r3, #56	; 0x38
 800f01a:	4921      	ldr	r1, [pc, #132]	; (800f0a0 <sync_fs+0xd4>)
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7ff fd57 	bl	800ead0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	3338      	adds	r3, #56	; 0x38
 800f026:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f02a:	491e      	ldr	r1, [pc, #120]	; (800f0a4 <sync_fs+0xd8>)
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fd4f 	bl	800ead0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3338      	adds	r3, #56	; 0x38
 800f036:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	4619      	mov	r1, r3
 800f040:	4610      	mov	r0, r2
 800f042:	f7ff fd45 	bl	800ead0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	3338      	adds	r3, #56	; 0x38
 800f04a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	4619      	mov	r1, r3
 800f054:	4610      	mov	r0, r2
 800f056:	f7ff fd3b 	bl	800ead0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f05e:	1c5a      	adds	r2, r3, #1
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	7858      	ldrb	r0, [r3, #1]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f072:	2301      	movs	r3, #1
 800f074:	f7ff fc98 	bl	800e9a8 <disk_write>
			fs->fsi_flag = 0;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	785b      	ldrb	r3, [r3, #1]
 800f082:	2200      	movs	r2, #0
 800f084:	2100      	movs	r1, #0
 800f086:	4618      	mov	r0, r3
 800f088:	f7ff fcae 	bl	800e9e8 <disk_ioctl>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <sync_fs+0xca>
 800f092:	2301      	movs	r3, #1
 800f094:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f096:	7bfb      	ldrb	r3, [r7, #15]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	41615252 	.word	0x41615252
 800f0a4:	61417272 	.word	0x61417272

0800f0a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	3b02      	subs	r3, #2
 800f0b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	69db      	ldr	r3, [r3, #28]
 800f0bc:	3b02      	subs	r3, #2
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d301      	bcc.n	800f0c8 <clust2sect+0x20>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	e008      	b.n	800f0da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	895b      	ldrh	r3, [r3, #10]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	fb03 f202 	mul.w	r2, r3, r2
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d8:	4413      	add	r3, r2
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	370c      	adds	r7, #12
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr

0800f0e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b086      	sub	sp, #24
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d904      	bls.n	800f106 <get_fat+0x20>
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	69db      	ldr	r3, [r3, #28]
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	429a      	cmp	r2, r3
 800f104:	d302      	bcc.n	800f10c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f106:	2301      	movs	r3, #1
 800f108:	617b      	str	r3, [r7, #20]
 800f10a:	e08f      	b.n	800f22c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f10c:	f04f 33ff 	mov.w	r3, #4294967295
 800f110:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2b03      	cmp	r3, #3
 800f118:	d062      	beq.n	800f1e0 <get_fat+0xfa>
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	dc7c      	bgt.n	800f218 <get_fat+0x132>
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d002      	beq.n	800f128 <get_fat+0x42>
 800f122:	2b02      	cmp	r3, #2
 800f124:	d042      	beq.n	800f1ac <get_fat+0xc6>
 800f126:	e077      	b.n	800f218 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	085b      	lsrs	r3, r3, #1
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	4413      	add	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	0a5b      	lsrs	r3, r3, #9
 800f13e:	4413      	add	r3, r2
 800f140:	4619      	mov	r1, r3
 800f142:	6938      	ldr	r0, [r7, #16]
 800f144:	f7ff ff14 	bl	800ef70 <move_window>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d167      	bne.n	800f21e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	1c5a      	adds	r2, r3, #1
 800f152:	60fa      	str	r2, [r7, #12]
 800f154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	4413      	add	r3, r2
 800f15c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f160:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	0a5b      	lsrs	r3, r3, #9
 800f16a:	4413      	add	r3, r2
 800f16c:	4619      	mov	r1, r3
 800f16e:	6938      	ldr	r0, [r7, #16]
 800f170:	f7ff fefe 	bl	800ef70 <move_window>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d153      	bne.n	800f222 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f180:	693a      	ldr	r2, [r7, #16]
 800f182:	4413      	add	r3, r2
 800f184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f188:	021b      	lsls	r3, r3, #8
 800f18a:	461a      	mov	r2, r3
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	4313      	orrs	r3, r2
 800f190:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d002      	beq.n	800f1a2 <get_fat+0xbc>
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	091b      	lsrs	r3, r3, #4
 800f1a0:	e002      	b.n	800f1a8 <get_fat+0xc2>
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1a8:	617b      	str	r3, [r7, #20]
			break;
 800f1aa:	e03f      	b.n	800f22c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	0a1b      	lsrs	r3, r3, #8
 800f1b4:	4413      	add	r3, r2
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	6938      	ldr	r0, [r7, #16]
 800f1ba:	f7ff fed9 	bl	800ef70 <move_window>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d130      	bne.n	800f226 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	005b      	lsls	r3, r3, #1
 800f1ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f1d2:	4413      	add	r3, r2
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff fc25 	bl	800ea24 <ld_word>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	617b      	str	r3, [r7, #20]
			break;
 800f1de:	e025      	b.n	800f22c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	09db      	lsrs	r3, r3, #7
 800f1e8:	4413      	add	r3, r2
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	6938      	ldr	r0, [r7, #16]
 800f1ee:	f7ff febf 	bl	800ef70 <move_window>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d118      	bne.n	800f22a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f206:	4413      	add	r3, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff fc23 	bl	800ea54 <ld_dword>
 800f20e:	4603      	mov	r3, r0
 800f210:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f214:	617b      	str	r3, [r7, #20]
			break;
 800f216:	e009      	b.n	800f22c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f218:	2301      	movs	r3, #1
 800f21a:	617b      	str	r3, [r7, #20]
 800f21c:	e006      	b.n	800f22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f21e:	bf00      	nop
 800f220:	e004      	b.n	800f22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f222:	bf00      	nop
 800f224:	e002      	b.n	800f22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f226:	bf00      	nop
 800f228:	e000      	b.n	800f22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f22a:	bf00      	nop
		}
	}

	return val;
 800f22c:	697b      	ldr	r3, [r7, #20]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3718      	adds	r7, #24
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f236:	b590      	push	{r4, r7, lr}
 800f238:	b089      	sub	sp, #36	; 0x24
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	60b9      	str	r1, [r7, #8]
 800f240:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f242:	2302      	movs	r3, #2
 800f244:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	f240 80d2 	bls.w	800f3f2 <put_fat+0x1bc>
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	429a      	cmp	r2, r3
 800f256:	f080 80cc 	bcs.w	800f3f2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b03      	cmp	r3, #3
 800f260:	f000 8096 	beq.w	800f390 <put_fat+0x15a>
 800f264:	2b03      	cmp	r3, #3
 800f266:	f300 80cd 	bgt.w	800f404 <put_fat+0x1ce>
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d002      	beq.n	800f274 <put_fat+0x3e>
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d06e      	beq.n	800f350 <put_fat+0x11a>
 800f272:	e0c7      	b.n	800f404 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	61bb      	str	r3, [r7, #24]
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	085b      	lsrs	r3, r3, #1
 800f27c:	69ba      	ldr	r2, [r7, #24]
 800f27e:	4413      	add	r3, r2
 800f280:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	0a5b      	lsrs	r3, r3, #9
 800f28a:	4413      	add	r3, r2
 800f28c:	4619      	mov	r1, r3
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f7ff fe6e 	bl	800ef70 <move_window>
 800f294:	4603      	mov	r3, r0
 800f296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f298:	7ffb      	ldrb	r3, [r7, #31]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f040 80ab 	bne.w	800f3f6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	1c59      	adds	r1, r3, #1
 800f2aa:	61b9      	str	r1, [r7, #24]
 800f2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b0:	4413      	add	r3, r2
 800f2b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f003 0301 	and.w	r3, r3, #1
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00d      	beq.n	800f2da <put_fat+0xa4>
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	b25b      	sxtb	r3, r3
 800f2c4:	f003 030f 	and.w	r3, r3, #15
 800f2c8:	b25a      	sxtb	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	011b      	lsls	r3, r3, #4
 800f2d0:	b25b      	sxtb	r3, r3
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	b25b      	sxtb	r3, r3
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	e001      	b.n	800f2de <put_fat+0xa8>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	0a5b      	lsrs	r3, r3, #9
 800f2f0:	4413      	add	r3, r2
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f7ff fe3b 	bl	800ef70 <move_window>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2fe:	7ffb      	ldrb	r3, [r7, #31]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d17a      	bne.n	800f3fa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f310:	4413      	add	r3, r2
 800f312:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <put_fat+0xf0>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	091b      	lsrs	r3, r3, #4
 800f322:	b2db      	uxtb	r3, r3
 800f324:	e00e      	b.n	800f344 <put_fat+0x10e>
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	b25b      	sxtb	r3, r3
 800f32c:	f023 030f 	bic.w	r3, r3, #15
 800f330:	b25a      	sxtb	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	0a1b      	lsrs	r3, r3, #8
 800f336:	b25b      	sxtb	r3, r3
 800f338:	f003 030f 	and.w	r3, r3, #15
 800f33c:	b25b      	sxtb	r3, r3
 800f33e:	4313      	orrs	r3, r2
 800f340:	b25b      	sxtb	r3, r3
 800f342:	b2db      	uxtb	r3, r3
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2201      	movs	r2, #1
 800f34c:	70da      	strb	r2, [r3, #3]
			break;
 800f34e:	e059      	b.n	800f404 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	0a1b      	lsrs	r3, r3, #8
 800f358:	4413      	add	r3, r2
 800f35a:	4619      	mov	r1, r3
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f7ff fe07 	bl	800ef70 <move_window>
 800f362:	4603      	mov	r3, r0
 800f364:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f366:	7ffb      	ldrb	r3, [r7, #31]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d148      	bne.n	800f3fe <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f37a:	4413      	add	r3, r2
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	b292      	uxth	r2, r2
 800f380:	4611      	mov	r1, r2
 800f382:	4618      	mov	r0, r3
 800f384:	f7ff fb89 	bl	800ea9a <st_word>
			fs->wflag = 1;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2201      	movs	r2, #1
 800f38c:	70da      	strb	r2, [r3, #3]
			break;
 800f38e:	e039      	b.n	800f404 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	09db      	lsrs	r3, r3, #7
 800f398:	4413      	add	r3, r2
 800f39a:	4619      	mov	r1, r3
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7ff fde7 	bl	800ef70 <move_window>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3a6:	7ffb      	ldrb	r3, [r7, #31]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d12a      	bne.n	800f402 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3c0:	4413      	add	r3, r2
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7ff fb46 	bl	800ea54 <ld_dword>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f3ce:	4323      	orrs	r3, r4
 800f3d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3e0:	4413      	add	r3, r2
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff fb73 	bl	800ead0 <st_dword>
			fs->wflag = 1;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	70da      	strb	r2, [r3, #3]
			break;
 800f3f0:	e008      	b.n	800f404 <put_fat+0x1ce>
		}
	}
 800f3f2:	bf00      	nop
 800f3f4:	e006      	b.n	800f404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3f6:	bf00      	nop
 800f3f8:	e004      	b.n	800f404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3fa:	bf00      	nop
 800f3fc:	e002      	b.n	800f404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f3fe:	bf00      	nop
 800f400:	e000      	b.n	800f404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f402:	bf00      	nop
	return res;
 800f404:	7ffb      	ldrb	r3, [r7, #31]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3724      	adds	r7, #36	; 0x24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd90      	pop	{r4, r7, pc}

0800f40e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b088      	sub	sp, #32
 800f412:	af00      	add	r7, sp, #0
 800f414:	60f8      	str	r0, [r7, #12]
 800f416:	60b9      	str	r1, [r7, #8]
 800f418:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f41a:	2300      	movs	r3, #0
 800f41c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d904      	bls.n	800f434 <remove_chain+0x26>
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	69db      	ldr	r3, [r3, #28]
 800f42e:	68ba      	ldr	r2, [r7, #8]
 800f430:	429a      	cmp	r2, r3
 800f432:	d301      	bcc.n	800f438 <remove_chain+0x2a>
 800f434:	2302      	movs	r3, #2
 800f436:	e04b      	b.n	800f4d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00c      	beq.n	800f458 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f43e:	f04f 32ff 	mov.w	r2, #4294967295
 800f442:	6879      	ldr	r1, [r7, #4]
 800f444:	69b8      	ldr	r0, [r7, #24]
 800f446:	f7ff fef6 	bl	800f236 <put_fat>
 800f44a:	4603      	mov	r3, r0
 800f44c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f44e:	7ffb      	ldrb	r3, [r7, #31]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <remove_chain+0x4a>
 800f454:	7ffb      	ldrb	r3, [r7, #31]
 800f456:	e03b      	b.n	800f4d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f458:	68b9      	ldr	r1, [r7, #8]
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fe43 	bl	800f0e6 <get_fat>
 800f460:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d031      	beq.n	800f4cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d101      	bne.n	800f472 <remove_chain+0x64>
 800f46e:	2302      	movs	r3, #2
 800f470:	e02e      	b.n	800f4d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f478:	d101      	bne.n	800f47e <remove_chain+0x70>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e028      	b.n	800f4d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f47e:	2200      	movs	r2, #0
 800f480:	68b9      	ldr	r1, [r7, #8]
 800f482:	69b8      	ldr	r0, [r7, #24]
 800f484:	f7ff fed7 	bl	800f236 <put_fat>
 800f488:	4603      	mov	r3, r0
 800f48a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f48c:	7ffb      	ldrb	r3, [r7, #31]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <remove_chain+0x88>
 800f492:	7ffb      	ldrb	r3, [r7, #31]
 800f494:	e01c      	b.n	800f4d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	699a      	ldr	r2, [r3, #24]
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	69db      	ldr	r3, [r3, #28]
 800f49e:	3b02      	subs	r3, #2
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d20b      	bcs.n	800f4bc <remove_chain+0xae>
			fs->free_clst++;
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	699b      	ldr	r3, [r3, #24]
 800f4a8:	1c5a      	adds	r2, r3, #1
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	791b      	ldrb	r3, [r3, #4]
 800f4b2:	f043 0301 	orr.w	r3, r3, #1
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	69db      	ldr	r3, [r3, #28]
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d3c6      	bcc.n	800f458 <remove_chain+0x4a>
 800f4ca:	e000      	b.n	800f4ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f4cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3720      	adds	r7, #32
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b088      	sub	sp, #32
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10d      	bne.n	800f50a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	695b      	ldr	r3, [r3, #20]
 800f4f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d004      	beq.n	800f504 <create_chain+0x2c>
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	69db      	ldr	r3, [r3, #28]
 800f4fe:	69ba      	ldr	r2, [r7, #24]
 800f500:	429a      	cmp	r2, r3
 800f502:	d31b      	bcc.n	800f53c <create_chain+0x64>
 800f504:	2301      	movs	r3, #1
 800f506:	61bb      	str	r3, [r7, #24]
 800f508:	e018      	b.n	800f53c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7ff fdea 	bl	800f0e6 <get_fat>
 800f512:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2b01      	cmp	r3, #1
 800f518:	d801      	bhi.n	800f51e <create_chain+0x46>
 800f51a:	2301      	movs	r3, #1
 800f51c:	e070      	b.n	800f600 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f524:	d101      	bne.n	800f52a <create_chain+0x52>
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	e06a      	b.n	800f600 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	69db      	ldr	r3, [r3, #28]
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	429a      	cmp	r2, r3
 800f532:	d201      	bcs.n	800f538 <create_chain+0x60>
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	e063      	b.n	800f600 <create_chain+0x128>
		scl = clst;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	3301      	adds	r3, #1
 800f544:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	69db      	ldr	r3, [r3, #28]
 800f54a:	69fa      	ldr	r2, [r7, #28]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d307      	bcc.n	800f560 <create_chain+0x88>
				ncl = 2;
 800f550:	2302      	movs	r3, #2
 800f552:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f554:	69fa      	ldr	r2, [r7, #28]
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d901      	bls.n	800f560 <create_chain+0x88>
 800f55c:	2300      	movs	r3, #0
 800f55e:	e04f      	b.n	800f600 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f560:	69f9      	ldr	r1, [r7, #28]
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff fdbf 	bl	800f0e6 <get_fat>
 800f568:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00e      	beq.n	800f58e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b01      	cmp	r3, #1
 800f574:	d003      	beq.n	800f57e <create_chain+0xa6>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57c:	d101      	bne.n	800f582 <create_chain+0xaa>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	e03e      	b.n	800f600 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f582:	69fa      	ldr	r2, [r7, #28]
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	429a      	cmp	r2, r3
 800f588:	d1da      	bne.n	800f540 <create_chain+0x68>
 800f58a:	2300      	movs	r3, #0
 800f58c:	e038      	b.n	800f600 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f58e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f590:	f04f 32ff 	mov.w	r2, #4294967295
 800f594:	69f9      	ldr	r1, [r7, #28]
 800f596:	6938      	ldr	r0, [r7, #16]
 800f598:	f7ff fe4d 	bl	800f236 <put_fat>
 800f59c:	4603      	mov	r3, r0
 800f59e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f5a0:	7dfb      	ldrb	r3, [r7, #23]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d109      	bne.n	800f5ba <create_chain+0xe2>
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d006      	beq.n	800f5ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f5ac:	69fa      	ldr	r2, [r7, #28]
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	6938      	ldr	r0, [r7, #16]
 800f5b2:	f7ff fe40 	bl	800f236 <put_fat>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f5ba:	7dfb      	ldrb	r3, [r7, #23]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d116      	bne.n	800f5ee <create_chain+0x116>
		fs->last_clst = ncl;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	69fa      	ldr	r2, [r7, #28]
 800f5c4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	699a      	ldr	r2, [r3, #24]
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	69db      	ldr	r3, [r3, #28]
 800f5ce:	3b02      	subs	r3, #2
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d804      	bhi.n	800f5de <create_chain+0x106>
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	1e5a      	subs	r2, r3, #1
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	791b      	ldrb	r3, [r3, #4]
 800f5e2:	f043 0301 	orr.w	r3, r3, #1
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	711a      	strb	r2, [r3, #4]
 800f5ec:	e007      	b.n	800f5fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d102      	bne.n	800f5fa <create_chain+0x122>
 800f5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f8:	e000      	b.n	800f5fc <create_chain+0x124>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f5fe:	69fb      	ldr	r3, [r7, #28]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3720      	adds	r7, #32
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f608:	b480      	push	{r7}
 800f60a:	b087      	sub	sp, #28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61c:	3304      	adds	r3, #4
 800f61e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	0a5b      	lsrs	r3, r3, #9
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	8952      	ldrh	r2, [r2, #10]
 800f628:	fbb3 f3f2 	udiv	r3, r3, r2
 800f62c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	1d1a      	adds	r2, r3, #4
 800f632:	613a      	str	r2, [r7, #16]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <clmt_clust+0x3a>
 800f63e:	2300      	movs	r3, #0
 800f640:	e010      	b.n	800f664 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	429a      	cmp	r2, r3
 800f648:	d307      	bcc.n	800f65a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	1ad3      	subs	r3, r2, r3
 800f650:	617b      	str	r3, [r7, #20]
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	3304      	adds	r3, #4
 800f656:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f658:	e7e9      	b.n	800f62e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f65a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	4413      	add	r3, r2
}
 800f664:	4618      	mov	r0, r3
 800f666:	371c      	adds	r7, #28
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f686:	d204      	bcs.n	800f692 <dir_sdi+0x22>
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	f003 031f 	and.w	r3, r3, #31
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f692:	2302      	movs	r3, #2
 800f694:	e063      	b.n	800f75e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d106      	bne.n	800f6b6 <dir_sdi+0x46>
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	d902      	bls.n	800f6b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10c      	bne.n	800f6d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	095b      	lsrs	r3, r3, #5
 800f6c0:	693a      	ldr	r2, [r7, #16]
 800f6c2:	8912      	ldrh	r2, [r2, #8]
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d301      	bcc.n	800f6cc <dir_sdi+0x5c>
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	e048      	b.n	800f75e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	61da      	str	r2, [r3, #28]
 800f6d4:	e029      	b.n	800f72a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	895b      	ldrh	r3, [r3, #10]
 800f6da:	025b      	lsls	r3, r3, #9
 800f6dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6de:	e019      	b.n	800f714 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6979      	ldr	r1, [r7, #20]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff fcfe 	bl	800f0e6 <get_fat>
 800f6ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f2:	d101      	bne.n	800f6f8 <dir_sdi+0x88>
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e032      	b.n	800f75e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d904      	bls.n	800f708 <dir_sdi+0x98>
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	69db      	ldr	r3, [r3, #28]
 800f702:	697a      	ldr	r2, [r7, #20]
 800f704:	429a      	cmp	r2, r3
 800f706:	d301      	bcc.n	800f70c <dir_sdi+0x9c>
 800f708:	2302      	movs	r3, #2
 800f70a:	e028      	b.n	800f75e <dir_sdi+0xee>
			ofs -= csz;
 800f70c:	683a      	ldr	r2, [r7, #0]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d2e1      	bcs.n	800f6e0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f71c:	6979      	ldr	r1, [r7, #20]
 800f71e:	6938      	ldr	r0, [r7, #16]
 800f720:	f7ff fcc2 	bl	800f0a8 <clust2sect>
 800f724:	4602      	mov	r2, r0
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	69db      	ldr	r3, [r3, #28]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d101      	bne.n	800f73c <dir_sdi+0xcc>
 800f738:	2302      	movs	r3, #2
 800f73a:	e010      	b.n	800f75e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	69da      	ldr	r2, [r3, #28]
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	0a5b      	lsrs	r3, r3, #9
 800f744:	441a      	add	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f756:	441a      	add	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f766:	b580      	push	{r7, lr}
 800f768:	b086      	sub	sp, #24
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	3320      	adds	r3, #32
 800f77c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d003      	beq.n	800f78e <dir_next+0x28>
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f78c:	d301      	bcc.n	800f792 <dir_next+0x2c>
 800f78e:	2304      	movs	r3, #4
 800f790:	e0aa      	b.n	800f8e8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f040 8098 	bne.w	800f8ce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	69db      	ldr	r3, [r3, #28]
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	699b      	ldr	r3, [r3, #24]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10b      	bne.n	800f7c8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	095b      	lsrs	r3, r3, #5
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	8912      	ldrh	r2, [r2, #8]
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	f0c0 8088 	bcc.w	800f8ce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	61da      	str	r2, [r3, #28]
 800f7c4:	2304      	movs	r3, #4
 800f7c6:	e08f      	b.n	800f8e8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	0a5b      	lsrs	r3, r3, #9
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	8952      	ldrh	r2, [r2, #10]
 800f7d0:	3a01      	subs	r2, #1
 800f7d2:	4013      	ands	r3, r2
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d17a      	bne.n	800f8ce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	699b      	ldr	r3, [r3, #24]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	f7ff fc80 	bl	800f0e6 <get_fat>
 800f7e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d801      	bhi.n	800f7f2 <dir_next+0x8c>
 800f7ee:	2302      	movs	r3, #2
 800f7f0:	e07a      	b.n	800f8e8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f8:	d101      	bne.n	800f7fe <dir_next+0x98>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e074      	b.n	800f8e8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	69db      	ldr	r3, [r3, #28]
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	429a      	cmp	r2, r3
 800f806:	d358      	bcc.n	800f8ba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d104      	bne.n	800f818 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	61da      	str	r2, [r3, #28]
 800f814:	2304      	movs	r3, #4
 800f816:	e067      	b.n	800f8e8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	699b      	ldr	r3, [r3, #24]
 800f81e:	4619      	mov	r1, r3
 800f820:	4610      	mov	r0, r2
 800f822:	f7ff fe59 	bl	800f4d8 <create_chain>
 800f826:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d101      	bne.n	800f832 <dir_next+0xcc>
 800f82e:	2307      	movs	r3, #7
 800f830:	e05a      	b.n	800f8e8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d101      	bne.n	800f83c <dir_next+0xd6>
 800f838:	2302      	movs	r3, #2
 800f83a:	e055      	b.n	800f8e8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f842:	d101      	bne.n	800f848 <dir_next+0xe2>
 800f844:	2301      	movs	r3, #1
 800f846:	e04f      	b.n	800f8e8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f7ff fb4d 	bl	800eee8 <sync_window>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d001      	beq.n	800f858 <dir_next+0xf2>
 800f854:	2301      	movs	r3, #1
 800f856:	e047      	b.n	800f8e8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	3338      	adds	r3, #56	; 0x38
 800f85c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f860:	2100      	movs	r1, #0
 800f862:	4618      	mov	r0, r3
 800f864:	f7ff f981 	bl	800eb6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f868:	2300      	movs	r3, #0
 800f86a:	613b      	str	r3, [r7, #16]
 800f86c:	6979      	ldr	r1, [r7, #20]
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff fc1a 	bl	800f0a8 <clust2sect>
 800f874:	4602      	mov	r2, r0
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	635a      	str	r2, [r3, #52]	; 0x34
 800f87a:	e012      	b.n	800f8a2 <dir_next+0x13c>
						fs->wflag = 1;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2201      	movs	r2, #1
 800f880:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f7ff fb30 	bl	800eee8 <sync_window>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <dir_next+0x12c>
 800f88e:	2301      	movs	r3, #1
 800f890:	e02a      	b.n	800f8e8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	3301      	adds	r3, #1
 800f896:	613b      	str	r3, [r7, #16]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	635a      	str	r2, [r3, #52]	; 0x34
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	895b      	ldrh	r3, [r3, #10]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d3e6      	bcc.n	800f87c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	1ad2      	subs	r2, r2, r3
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	697a      	ldr	r2, [r7, #20]
 800f8be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f8c0:	6979      	ldr	r1, [r7, #20]
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f7ff fbf0 	bl	800f0a8 <clust2sect>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	68ba      	ldr	r2, [r7, #8]
 800f8d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8e0:	441a      	add	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f8e6:	2300      	movs	r3, #0
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3718      	adds	r7, #24
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f900:	2100      	movs	r1, #0
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7ff feb4 	bl	800f670 <dir_sdi>
 800f908:	4603      	mov	r3, r0
 800f90a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f90c:	7dfb      	ldrb	r3, [r7, #23]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d12b      	bne.n	800f96a <dir_alloc+0x7a>
		n = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	69db      	ldr	r3, [r3, #28]
 800f91a:	4619      	mov	r1, r3
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7ff fb27 	bl	800ef70 <move_window>
 800f922:	4603      	mov	r3, r0
 800f924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d11d      	bne.n	800f968 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6a1b      	ldr	r3, [r3, #32]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	2be5      	cmp	r3, #229	; 0xe5
 800f934:	d004      	beq.n	800f940 <dir_alloc+0x50>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d107      	bne.n	800f950 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	3301      	adds	r3, #1
 800f944:	613b      	str	r3, [r7, #16]
 800f946:	693a      	ldr	r2, [r7, #16]
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d102      	bne.n	800f954 <dir_alloc+0x64>
 800f94e:	e00c      	b.n	800f96a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f950:	2300      	movs	r3, #0
 800f952:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f954:	2101      	movs	r1, #1
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7ff ff05 	bl	800f766 <dir_next>
 800f95c:	4603      	mov	r3, r0
 800f95e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f960:	7dfb      	ldrb	r3, [r7, #23]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0d7      	beq.n	800f916 <dir_alloc+0x26>
 800f966:	e000      	b.n	800f96a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f968:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f96a:	7dfb      	ldrb	r3, [r7, #23]
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d101      	bne.n	800f974 <dir_alloc+0x84>
 800f970:	2307      	movs	r3, #7
 800f972:	75fb      	strb	r3, [r7, #23]
	return res;
 800f974:	7dfb      	ldrb	r3, [r7, #23]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3718      	adds	r7, #24
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	331a      	adds	r3, #26
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff f849 	bl	800ea24 <ld_word>
 800f992:	4603      	mov	r3, r0
 800f994:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d109      	bne.n	800f9b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	3314      	adds	r3, #20
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7ff f83e 	bl	800ea24 <ld_word>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	041b      	lsls	r3, r3, #16
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	331a      	adds	r3, #26
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	b292      	uxth	r2, r2
 800f9d0:	4611      	mov	r1, r2
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff f861 	bl	800ea9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	2b03      	cmp	r3, #3
 800f9de:	d109      	bne.n	800f9f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	f103 0214 	add.w	r2, r3, #20
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	0c1b      	lsrs	r3, r3, #16
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	f7ff f853 	bl	800ea9a <st_word>
	}
}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f9fc:	b590      	push	{r4, r7, lr}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	331a      	adds	r3, #26
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7ff f80a 	bl	800ea24 <ld_word>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <cmp_lfn+0x1e>
 800fa16:	2300      	movs	r3, #0
 800fa18:	e059      	b.n	800face <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa22:	1e5a      	subs	r2, r3, #1
 800fa24:	4613      	mov	r3, r2
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	4413      	add	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fa30:	2301      	movs	r3, #1
 800fa32:	81fb      	strh	r3, [r7, #14]
 800fa34:	2300      	movs	r3, #0
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	e033      	b.n	800faa2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fa3a:	4a27      	ldr	r2, [pc, #156]	; (800fad8 <cmp_lfn+0xdc>)
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	4413      	add	r3, r2
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	4413      	add	r3, r2
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fe ffeb 	bl	800ea24 <ld_word>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fa52:	89fb      	ldrh	r3, [r7, #14]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d01a      	beq.n	800fa8e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2bfe      	cmp	r3, #254	; 0xfe
 800fa5c:	d812      	bhi.n	800fa84 <cmp_lfn+0x88>
 800fa5e:	89bb      	ldrh	r3, [r7, #12]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f002 f8d7 	bl	8011c14 <ff_wtoupper>
 800fa66:	4603      	mov	r3, r0
 800fa68:	461c      	mov	r4, r3
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	617a      	str	r2, [r7, #20]
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	687a      	ldr	r2, [r7, #4]
 800fa74:	4413      	add	r3, r2
 800fa76:	881b      	ldrh	r3, [r3, #0]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f002 f8cb 	bl	8011c14 <ff_wtoupper>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	429c      	cmp	r4, r3
 800fa82:	d001      	beq.n	800fa88 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800fa84:	2300      	movs	r3, #0
 800fa86:	e022      	b.n	800face <cmp_lfn+0xd2>
			}
			wc = uc;
 800fa88:	89bb      	ldrh	r3, [r7, #12]
 800fa8a:	81fb      	strh	r3, [r7, #14]
 800fa8c:	e006      	b.n	800fa9c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fa8e:	89bb      	ldrh	r3, [r7, #12]
 800fa90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d001      	beq.n	800fa9c <cmp_lfn+0xa0>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	e018      	b.n	800face <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	613b      	str	r3, [r7, #16]
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	2b0c      	cmp	r3, #12
 800faa6:	d9c8      	bls.n	800fa3a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00b      	beq.n	800facc <cmp_lfn+0xd0>
 800fab4:	89fb      	ldrh	r3, [r7, #14]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d008      	beq.n	800facc <cmp_lfn+0xd0>
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	4413      	add	r3, r2
 800fac2:	881b      	ldrh	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <cmp_lfn+0xd0>
 800fac8:	2300      	movs	r3, #0
 800faca:	e000      	b.n	800face <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800facc:	2301      	movs	r3, #1
}
 800face:	4618      	mov	r0, r3
 800fad0:	371c      	adds	r7, #28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd90      	pop	{r4, r7, pc}
 800fad6:	bf00      	nop
 800fad8:	08015c7c 	.word	0x08015c7c

0800fadc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b088      	sub	sp, #32
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	4611      	mov	r1, r2
 800fae8:	461a      	mov	r2, r3
 800faea:	460b      	mov	r3, r1
 800faec:	71fb      	strb	r3, [r7, #7]
 800faee:	4613      	mov	r3, r2
 800faf0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	330d      	adds	r3, #13
 800faf6:	79ba      	ldrb	r2, [r7, #6]
 800faf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	330b      	adds	r3, #11
 800fafe:	220f      	movs	r2, #15
 800fb00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	330c      	adds	r3, #12
 800fb06:	2200      	movs	r2, #0
 800fb08:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	331a      	adds	r3, #26
 800fb0e:	2100      	movs	r1, #0
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fe ffc2 	bl	800ea9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fb16:	79fb      	ldrb	r3, [r7, #7]
 800fb18:	1e5a      	subs	r2, r3, #1
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	005b      	lsls	r3, r3, #1
 800fb1e:	4413      	add	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fb26:	2300      	movs	r3, #0
 800fb28:	82fb      	strh	r3, [r7, #22]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fb2e:	8afb      	ldrh	r3, [r7, #22]
 800fb30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d007      	beq.n	800fb48 <put_lfn+0x6c>
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	61fa      	str	r2, [r7, #28]
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fb48:	4a17      	ldr	r2, [pc, #92]	; (800fba8 <put_lfn+0xcc>)
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	461a      	mov	r2, r3
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	4413      	add	r3, r2
 800fb56:	8afa      	ldrh	r2, [r7, #22]
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fe ff9d 	bl	800ea9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fb60:	8afb      	ldrh	r3, [r7, #22]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d102      	bne.n	800fb6c <put_lfn+0x90>
 800fb66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	61bb      	str	r3, [r7, #24]
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	2b0c      	cmp	r3, #12
 800fb76:	d9da      	bls.n	800fb2e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fb78:	8afb      	ldrh	r3, [r7, #22]
 800fb7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d006      	beq.n	800fb90 <put_lfn+0xb4>
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	005b      	lsls	r3, r3, #1
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	4413      	add	r3, r2
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d103      	bne.n	800fb98 <put_lfn+0xbc>
 800fb90:	79fb      	ldrb	r3, [r7, #7]
 800fb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	79fa      	ldrb	r2, [r7, #7]
 800fb9c:	701a      	strb	r2, [r3, #0]
}
 800fb9e:	bf00      	nop
 800fba0:	3720      	adds	r7, #32
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	08015c7c 	.word	0x08015c7c

0800fbac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b08c      	sub	sp, #48	; 0x30
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
 800fbb8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fbba:	220b      	movs	r2, #11
 800fbbc:	68b9      	ldr	r1, [r7, #8]
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f7fe ffb2 	bl	800eb28 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	2b05      	cmp	r3, #5
 800fbc8:	d92b      	bls.n	800fc22 <gen_numname+0x76>
		sr = seq;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fbce:	e022      	b.n	800fc16 <gen_numname+0x6a>
			wc = *lfn++;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	1c9a      	adds	r2, r3, #2
 800fbd4:	607a      	str	r2, [r7, #4]
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800fbda:	2300      	movs	r3, #0
 800fbdc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbde:	e017      	b.n	800fc10 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	005a      	lsls	r2, r3, #1
 800fbe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbe6:	f003 0301 	and.w	r3, r3, #1
 800fbea:	4413      	add	r3, r2
 800fbec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fbee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbf0:	085b      	lsrs	r3, r3, #1
 800fbf2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d005      	beq.n	800fc0a <gen_numname+0x5e>
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800fc04:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800fc08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	2b0f      	cmp	r3, #15
 800fc14:	d9e4      	bls.n	800fbe0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	881b      	ldrh	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1d8      	bne.n	800fbd0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fc22:	2307      	movs	r3, #7
 800fc24:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	3330      	adds	r3, #48	; 0x30
 800fc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800fc36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc3a:	2b39      	cmp	r3, #57	; 0x39
 800fc3c:	d904      	bls.n	800fc48 <gen_numname+0x9c>
 800fc3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc42:	3307      	adds	r3, #7
 800fc44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	1e5a      	subs	r2, r3, #1
 800fc4c:	62ba      	str	r2, [r7, #40]	; 0x28
 800fc4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fc52:	4413      	add	r3, r2
 800fc54:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fc58:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	091b      	lsrs	r3, r3, #4
 800fc60:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1de      	bne.n	800fc26 <gen_numname+0x7a>
	ns[i] = '~';
 800fc68:	f107 0214 	add.w	r2, r7, #20
 800fc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6e:	4413      	add	r3, r2
 800fc70:	227e      	movs	r2, #126	; 0x7e
 800fc72:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fc74:	2300      	movs	r3, #0
 800fc76:	627b      	str	r3, [r7, #36]	; 0x24
 800fc78:	e002      	b.n	800fc80 <gen_numname+0xd4>
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d205      	bcs.n	800fc94 <gen_numname+0xe8>
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8c:	4413      	add	r3, r2
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	2b20      	cmp	r3, #32
 800fc92:	d1f2      	bne.n	800fc7a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc96:	2b07      	cmp	r3, #7
 800fc98:	d808      	bhi.n	800fcac <gen_numname+0x100>
 800fc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9c:	1c5a      	adds	r2, r3, #1
 800fc9e:	62ba      	str	r2, [r7, #40]	; 0x28
 800fca0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fca4:	4413      	add	r3, r2
 800fca6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fcaa:	e000      	b.n	800fcae <gen_numname+0x102>
 800fcac:	2120      	movs	r1, #32
 800fcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb0:	1c5a      	adds	r2, r3, #1
 800fcb2:	627a      	str	r2, [r7, #36]	; 0x24
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	460a      	mov	r2, r1
 800fcba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	2b07      	cmp	r3, #7
 800fcc0:	d9e8      	bls.n	800fc94 <gen_numname+0xe8>
}
 800fcc2:	bf00      	nop
 800fcc4:	bf00      	nop
 800fcc6:	3730      	adds	r7, #48	; 0x30
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fcd8:	230b      	movs	r3, #11
 800fcda:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	0852      	lsrs	r2, r2, #1
 800fce2:	01db      	lsls	r3, r3, #7
 800fce4:	4313      	orrs	r3, r2
 800fce6:	b2da      	uxtb	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	1c59      	adds	r1, r3, #1
 800fcec:	6079      	str	r1, [r7, #4]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	60bb      	str	r3, [r7, #8]
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1ed      	bne.n	800fcdc <sum_sfn+0x10>
	return sum;
 800fd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b086      	sub	sp, #24
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff fca6 	bl	800f670 <dir_sdi>
 800fd24:	4603      	mov	r3, r0
 800fd26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d001      	beq.n	800fd32 <dir_find+0x24>
 800fd2e:	7dfb      	ldrb	r3, [r7, #23]
 800fd30:	e0a9      	b.n	800fe86 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fd32:	23ff      	movs	r3, #255	; 0xff
 800fd34:	753b      	strb	r3, [r7, #20]
 800fd36:	7d3b      	ldrb	r3, [r7, #20]
 800fd38:	757b      	strb	r3, [r7, #21]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd40:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	4619      	mov	r1, r3
 800fd48:	6938      	ldr	r0, [r7, #16]
 800fd4a:	f7ff f911 	bl	800ef70 <move_window>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd52:	7dfb      	ldrb	r3, [r7, #23]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f040 8090 	bne.w	800fe7a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a1b      	ldr	r3, [r3, #32]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fd62:	7dbb      	ldrb	r3, [r7, #22]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <dir_find+0x60>
 800fd68:	2304      	movs	r3, #4
 800fd6a:	75fb      	strb	r3, [r7, #23]
 800fd6c:	e08a      	b.n	800fe84 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a1b      	ldr	r3, [r3, #32]
 800fd72:	330b      	adds	r3, #11
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd7a:	73fb      	strb	r3, [r7, #15]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	7bfa      	ldrb	r2, [r7, #15]
 800fd80:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fd82:	7dbb      	ldrb	r3, [r7, #22]
 800fd84:	2be5      	cmp	r3, #229	; 0xe5
 800fd86:	d007      	beq.n	800fd98 <dir_find+0x8a>
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	f003 0308 	and.w	r3, r3, #8
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d009      	beq.n	800fda6 <dir_find+0x98>
 800fd92:	7bfb      	ldrb	r3, [r7, #15]
 800fd94:	2b0f      	cmp	r3, #15
 800fd96:	d006      	beq.n	800fda6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fd98:	23ff      	movs	r3, #255	; 0xff
 800fd9a:	757b      	strb	r3, [r7, #21]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fda2:	631a      	str	r2, [r3, #48]	; 0x30
 800fda4:	e05e      	b.n	800fe64 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fda6:	7bfb      	ldrb	r3, [r7, #15]
 800fda8:	2b0f      	cmp	r3, #15
 800fdaa:	d136      	bne.n	800fe1a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fdb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d154      	bne.n	800fe64 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fdba:	7dbb      	ldrb	r3, [r7, #22]
 800fdbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00d      	beq.n	800fde0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6a1b      	ldr	r3, [r3, #32]
 800fdc8:	7b5b      	ldrb	r3, [r3, #13]
 800fdca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fdcc:	7dbb      	ldrb	r3, [r7, #22]
 800fdce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdd2:	75bb      	strb	r3, [r7, #22]
 800fdd4:	7dbb      	ldrb	r3, [r7, #22]
 800fdd6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	695a      	ldr	r2, [r3, #20]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fde0:	7dba      	ldrb	r2, [r7, #22]
 800fde2:	7d7b      	ldrb	r3, [r7, #21]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d115      	bne.n	800fe14 <dir_find+0x106>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	330d      	adds	r3, #13
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	7d3a      	ldrb	r2, [r7, #20]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d10e      	bne.n	800fe14 <dir_find+0x106>
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	68da      	ldr	r2, [r3, #12]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4610      	mov	r0, r2
 800fe02:	f7ff fdfb 	bl	800f9fc <cmp_lfn>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d003      	beq.n	800fe14 <dir_find+0x106>
 800fe0c:	7d7b      	ldrb	r3, [r7, #21]
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	e000      	b.n	800fe16 <dir_find+0x108>
 800fe14:	23ff      	movs	r3, #255	; 0xff
 800fe16:	757b      	strb	r3, [r7, #21]
 800fe18:	e024      	b.n	800fe64 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fe1a:	7d7b      	ldrb	r3, [r7, #21]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d109      	bne.n	800fe34 <dir_find+0x126>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a1b      	ldr	r3, [r3, #32]
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff ff51 	bl	800fccc <sum_sfn>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	7d3b      	ldrb	r3, [r7, #20]
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d024      	beq.n	800fe7e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe3a:	f003 0301 	and.w	r3, r3, #1
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d10a      	bne.n	800fe58 <dir_find+0x14a>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a18      	ldr	r0, [r3, #32]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	3324      	adds	r3, #36	; 0x24
 800fe4a:	220b      	movs	r2, #11
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	f7fe fea7 	bl	800eba0 <mem_cmp>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d014      	beq.n	800fe82 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fe58:	23ff      	movs	r3, #255	; 0xff
 800fe5a:	757b      	strb	r3, [r7, #21]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe62:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fe64:	2100      	movs	r1, #0
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7ff fc7d 	bl	800f766 <dir_next>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fe70:	7dfb      	ldrb	r3, [r7, #23]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	f43f af65 	beq.w	800fd42 <dir_find+0x34>
 800fe78:	e004      	b.n	800fe84 <dir_find+0x176>
		if (res != FR_OK) break;
 800fe7a:	bf00      	nop
 800fe7c:	e002      	b.n	800fe84 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fe7e:	bf00      	nop
 800fe80:	e000      	b.n	800fe84 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fe82:	bf00      	nop

	return res;
 800fe84:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3718      	adds	r7, #24
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b08c      	sub	sp, #48	; 0x30
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fea4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d001      	beq.n	800feb0 <dir_register+0x20>
 800feac:	2306      	movs	r3, #6
 800feae:	e0e0      	b.n	8010072 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800feb0:	2300      	movs	r3, #0
 800feb2:	627b      	str	r3, [r7, #36]	; 0x24
 800feb4:	e002      	b.n	800febc <dir_register+0x2c>
 800feb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb8:	3301      	adds	r3, #1
 800feba:	627b      	str	r3, [r7, #36]	; 0x24
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	68da      	ldr	r2, [r3, #12]
 800fec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	4413      	add	r3, r2
 800fec6:	881b      	ldrh	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1f4      	bne.n	800feb6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800fed2:	f107 030c 	add.w	r3, r7, #12
 800fed6:	220c      	movs	r2, #12
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe fe25 	bl	800eb28 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fede:	7dfb      	ldrb	r3, [r7, #23]
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d032      	beq.n	800ff4e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2240      	movs	r2, #64	; 0x40
 800feec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800fef0:	2301      	movs	r3, #1
 800fef2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fef4:	e016      	b.n	800ff24 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	68da      	ldr	r2, [r3, #12]
 800ff00:	f107 010c 	add.w	r1, r7, #12
 800ff04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff06:	f7ff fe51 	bl	800fbac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f7ff feff 	bl	800fd0e <dir_find>
 800ff10:	4603      	mov	r3, r0
 800ff12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ff16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	3301      	adds	r3, #1
 800ff22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	2b63      	cmp	r3, #99	; 0x63
 800ff28:	d9e5      	bls.n	800fef6 <dir_register+0x66>
 800ff2a:	e000      	b.n	800ff2e <dir_register+0x9e>
			if (res != FR_OK) break;
 800ff2c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	2b64      	cmp	r3, #100	; 0x64
 800ff32:	d101      	bne.n	800ff38 <dir_register+0xa8>
 800ff34:	2307      	movs	r3, #7
 800ff36:	e09c      	b.n	8010072 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ff38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff3c:	2b04      	cmp	r3, #4
 800ff3e:	d002      	beq.n	800ff46 <dir_register+0xb6>
 800ff40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff44:	e095      	b.n	8010072 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ff46:	7dfa      	ldrb	r2, [r7, #23]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ff4e:	7dfb      	ldrb	r3, [r7, #23]
 800ff50:	f003 0302 	and.w	r3, r3, #2
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d007      	beq.n	800ff68 <dir_register+0xd8>
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	330c      	adds	r3, #12
 800ff5c:	4a47      	ldr	r2, [pc, #284]	; (801007c <dir_register+0x1ec>)
 800ff5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff62:	089b      	lsrs	r3, r3, #2
 800ff64:	3301      	adds	r3, #1
 800ff66:	e000      	b.n	800ff6a <dir_register+0xda>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ff6c:	6a39      	ldr	r1, [r7, #32]
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7ff fcbe 	bl	800f8f0 <dir_alloc>
 800ff74:	4603      	mov	r3, r0
 800ff76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ff7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d148      	bne.n	8010014 <dir_register+0x184>
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	3b01      	subs	r3, #1
 800ff86:	623b      	str	r3, [r7, #32]
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d042      	beq.n	8010014 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	695a      	ldr	r2, [r3, #20]
 800ff92:	6a3b      	ldr	r3, [r7, #32]
 800ff94:	015b      	lsls	r3, r3, #5
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff fb68 	bl	800f670 <dir_sdi>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ffa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d132      	bne.n	8010014 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	3324      	adds	r3, #36	; 0x24
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7ff fe8a 	bl	800fccc <sum_sfn>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	69db      	ldr	r3, [r3, #28]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	69f8      	ldr	r0, [r7, #28]
 800ffc4:	f7fe ffd4 	bl	800ef70 <move_window>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ffce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d11d      	bne.n	8010012 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	68d8      	ldr	r0, [r3, #12]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a19      	ldr	r1, [r3, #32]
 800ffde:	6a3b      	ldr	r3, [r7, #32]
 800ffe0:	b2da      	uxtb	r2, r3
 800ffe2:	7efb      	ldrb	r3, [r7, #27]
 800ffe4:	f7ff fd7a 	bl	800fadc <put_lfn>
				fs->wflag = 1;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	2201      	movs	r2, #1
 800ffec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ffee:	2100      	movs	r1, #0
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7ff fbb8 	bl	800f766 <dir_next>
 800fff6:	4603      	mov	r3, r0
 800fff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800fffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010000:	2b00      	cmp	r3, #0
 8010002:	d107      	bne.n	8010014 <dir_register+0x184>
 8010004:	6a3b      	ldr	r3, [r7, #32]
 8010006:	3b01      	subs	r3, #1
 8010008:	623b      	str	r3, [r7, #32]
 801000a:	6a3b      	ldr	r3, [r7, #32]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1d5      	bne.n	800ffbc <dir_register+0x12c>
 8010010:	e000      	b.n	8010014 <dir_register+0x184>
				if (res != FR_OK) break;
 8010012:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010018:	2b00      	cmp	r3, #0
 801001a:	d128      	bne.n	801006e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	69db      	ldr	r3, [r3, #28]
 8010020:	4619      	mov	r1, r3
 8010022:	69f8      	ldr	r0, [r7, #28]
 8010024:	f7fe ffa4 	bl	800ef70 <move_window>
 8010028:	4603      	mov	r3, r0
 801002a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801002e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010032:	2b00      	cmp	r3, #0
 8010034:	d11b      	bne.n	801006e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	2220      	movs	r2, #32
 801003c:	2100      	movs	r1, #0
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe fd93 	bl	800eb6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a18      	ldr	r0, [r3, #32]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	3324      	adds	r3, #36	; 0x24
 801004c:	220b      	movs	r2, #11
 801004e:	4619      	mov	r1, r3
 8010050:	f7fe fd6a 	bl	800eb28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a1b      	ldr	r3, [r3, #32]
 801005e:	330c      	adds	r3, #12
 8010060:	f002 0218 	and.w	r2, r2, #24
 8010064:	b2d2      	uxtb	r2, r2
 8010066:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	2201      	movs	r2, #1
 801006c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801006e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010072:	4618      	mov	r0, r3
 8010074:	3730      	adds	r7, #48	; 0x30
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	4ec4ec4f 	.word	0x4ec4ec4f

08010080 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08a      	sub	sp, #40	; 0x28
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	613b      	str	r3, [r7, #16]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	60fb      	str	r3, [r7, #12]
 8010098:	2300      	movs	r3, #0
 801009a:	617b      	str	r3, [r7, #20]
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	61ba      	str	r2, [r7, #24]
 80100a6:	693a      	ldr	r2, [r7, #16]
 80100a8:	4413      	add	r3, r2
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80100ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100b0:	2b1f      	cmp	r3, #31
 80100b2:	d940      	bls.n	8010136 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80100b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100b6:	2b2f      	cmp	r3, #47	; 0x2f
 80100b8:	d006      	beq.n	80100c8 <create_name+0x48>
 80100ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100bc:	2b5c      	cmp	r3, #92	; 0x5c
 80100be:	d110      	bne.n	80100e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80100c0:	e002      	b.n	80100c8 <create_name+0x48>
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	3301      	adds	r3, #1
 80100c6:	61bb      	str	r3, [r7, #24]
 80100c8:	693a      	ldr	r2, [r7, #16]
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	4413      	add	r3, r2
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2b2f      	cmp	r3, #47	; 0x2f
 80100d2:	d0f6      	beq.n	80100c2 <create_name+0x42>
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	4413      	add	r3, r2
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	2b5c      	cmp	r3, #92	; 0x5c
 80100de:	d0f0      	beq.n	80100c2 <create_name+0x42>
			break;
 80100e0:	e02a      	b.n	8010138 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	2bfe      	cmp	r3, #254	; 0xfe
 80100e6:	d901      	bls.n	80100ec <create_name+0x6c>
 80100e8:	2306      	movs	r3, #6
 80100ea:	e177      	b.n	80103dc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80100ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80100f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100f4:	2101      	movs	r1, #1
 80100f6:	4618      	mov	r0, r3
 80100f8:	f001 fd50 	bl	8011b9c <ff_convert>
 80100fc:	4603      	mov	r3, r0
 80100fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010102:	2b00      	cmp	r3, #0
 8010104:	d101      	bne.n	801010a <create_name+0x8a>
 8010106:	2306      	movs	r3, #6
 8010108:	e168      	b.n	80103dc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801010a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801010c:	2b7f      	cmp	r3, #127	; 0x7f
 801010e:	d809      	bhi.n	8010124 <create_name+0xa4>
 8010110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010112:	4619      	mov	r1, r3
 8010114:	48b3      	ldr	r0, [pc, #716]	; (80103e4 <create_name+0x364>)
 8010116:	f7fe fd6a 	bl	800ebee <chk_chr>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <create_name+0xa4>
 8010120:	2306      	movs	r3, #6
 8010122:	e15b      	b.n	80103dc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	617a      	str	r2, [r7, #20]
 801012a:	005b      	lsls	r3, r3, #1
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	4413      	add	r3, r2
 8010130:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010132:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010134:	e7b4      	b.n	80100a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010136:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	441a      	add	r2, r3
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010144:	2b1f      	cmp	r3, #31
 8010146:	d801      	bhi.n	801014c <create_name+0xcc>
 8010148:	2304      	movs	r3, #4
 801014a:	e000      	b.n	801014e <create_name+0xce>
 801014c:	2300      	movs	r3, #0
 801014e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010152:	e011      	b.n	8010178 <create_name+0xf8>
		w = lfn[di - 1];
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801015a:	3b01      	subs	r3, #1
 801015c:	005b      	lsls	r3, r3, #1
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	4413      	add	r3, r2
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8010166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010168:	2b20      	cmp	r3, #32
 801016a:	d002      	beq.n	8010172 <create_name+0xf2>
 801016c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801016e:	2b2e      	cmp	r3, #46	; 0x2e
 8010170:	d106      	bne.n	8010180 <create_name+0x100>
		di--;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	3b01      	subs	r3, #1
 8010176:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1ea      	bne.n	8010154 <create_name+0xd4>
 801017e:	e000      	b.n	8010182 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010180:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	4413      	add	r3, r2
 801018a:	2200      	movs	r2, #0
 801018c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <create_name+0x118>
 8010194:	2306      	movs	r3, #6
 8010196:	e121      	b.n	80103dc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3324      	adds	r3, #36	; 0x24
 801019c:	220b      	movs	r2, #11
 801019e:	2120      	movs	r1, #32
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fe fce2 	bl	800eb6a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80101a6:	2300      	movs	r3, #0
 80101a8:	61bb      	str	r3, [r7, #24]
 80101aa:	e002      	b.n	80101b2 <create_name+0x132>
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	3301      	adds	r3, #1
 80101b0:	61bb      	str	r3, [r7, #24]
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	68fa      	ldr	r2, [r7, #12]
 80101b8:	4413      	add	r3, r2
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	2b20      	cmp	r3, #32
 80101be:	d0f5      	beq.n	80101ac <create_name+0x12c>
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	005b      	lsls	r3, r3, #1
 80101c4:	68fa      	ldr	r2, [r7, #12]
 80101c6:	4413      	add	r3, r2
 80101c8:	881b      	ldrh	r3, [r3, #0]
 80101ca:	2b2e      	cmp	r3, #46	; 0x2e
 80101cc:	d0ee      	beq.n	80101ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d009      	beq.n	80101e8 <create_name+0x168>
 80101d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101d8:	f043 0303 	orr.w	r3, r3, #3
 80101dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80101e0:	e002      	b.n	80101e8 <create_name+0x168>
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	617b      	str	r3, [r7, #20]
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d009      	beq.n	8010202 <create_name+0x182>
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80101f4:	3b01      	subs	r3, #1
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	4413      	add	r3, r2
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	2b2e      	cmp	r3, #46	; 0x2e
 8010200:	d1ef      	bne.n	80101e2 <create_name+0x162>

	i = b = 0; ni = 8;
 8010202:	2300      	movs	r3, #0
 8010204:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010208:	2300      	movs	r3, #0
 801020a:	623b      	str	r3, [r7, #32]
 801020c:	2308      	movs	r3, #8
 801020e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	61ba      	str	r2, [r7, #24]
 8010216:	005b      	lsls	r3, r3, #1
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4413      	add	r3, r2
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 8090 	beq.w	8010348 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801022a:	2b20      	cmp	r3, #32
 801022c:	d006      	beq.n	801023c <create_name+0x1bc>
 801022e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010230:	2b2e      	cmp	r3, #46	; 0x2e
 8010232:	d10a      	bne.n	801024a <create_name+0x1ca>
 8010234:	69ba      	ldr	r2, [r7, #24]
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	429a      	cmp	r2, r3
 801023a:	d006      	beq.n	801024a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801023c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010240:	f043 0303 	orr.w	r3, r3, #3
 8010244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010248:	e07d      	b.n	8010346 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801024a:	6a3a      	ldr	r2, [r7, #32]
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	429a      	cmp	r2, r3
 8010250:	d203      	bcs.n	801025a <create_name+0x1da>
 8010252:	69ba      	ldr	r2, [r7, #24]
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	429a      	cmp	r2, r3
 8010258:	d123      	bne.n	80102a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	2b0b      	cmp	r3, #11
 801025e:	d106      	bne.n	801026e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010264:	f043 0303 	orr.w	r3, r3, #3
 8010268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801026c:	e06f      	b.n	801034e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801026e:	69ba      	ldr	r2, [r7, #24]
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	429a      	cmp	r2, r3
 8010274:	d005      	beq.n	8010282 <create_name+0x202>
 8010276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801027a:	f043 0303 	orr.w	r3, r3, #3
 801027e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8010282:	69ba      	ldr	r2, [r7, #24]
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	429a      	cmp	r2, r3
 8010288:	d860      	bhi.n	801034c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	61bb      	str	r3, [r7, #24]
 801028e:	2308      	movs	r3, #8
 8010290:	623b      	str	r3, [r7, #32]
 8010292:	230b      	movs	r3, #11
 8010294:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80102a0:	e051      	b.n	8010346 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80102a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102a4:	2b7f      	cmp	r3, #127	; 0x7f
 80102a6:	d914      	bls.n	80102d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80102a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102aa:	2100      	movs	r1, #0
 80102ac:	4618      	mov	r0, r3
 80102ae:	f001 fc75 	bl	8011b9c <ff_convert>
 80102b2:	4603      	mov	r3, r0
 80102b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80102b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d004      	beq.n	80102c6 <create_name+0x246>
 80102bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102be:	3b80      	subs	r3, #128	; 0x80
 80102c0:	4a49      	ldr	r2, [pc, #292]	; (80103e8 <create_name+0x368>)
 80102c2:	5cd3      	ldrb	r3, [r2, r3]
 80102c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80102c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102ca:	f043 0302 	orr.w	r3, r3, #2
 80102ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80102d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <create_name+0x268>
 80102d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102da:	4619      	mov	r1, r3
 80102dc:	4843      	ldr	r0, [pc, #268]	; (80103ec <create_name+0x36c>)
 80102de:	f7fe fc86 	bl	800ebee <chk_chr>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d008      	beq.n	80102fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80102e8:	235f      	movs	r3, #95	; 0x5f
 80102ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80102ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102f0:	f043 0303 	orr.w	r3, r3, #3
 80102f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102f8:	e01b      	b.n	8010332 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80102fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102fc:	2b40      	cmp	r3, #64	; 0x40
 80102fe:	d909      	bls.n	8010314 <create_name+0x294>
 8010300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010302:	2b5a      	cmp	r3, #90	; 0x5a
 8010304:	d806      	bhi.n	8010314 <create_name+0x294>
					b |= 2;
 8010306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801030a:	f043 0302 	orr.w	r3, r3, #2
 801030e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010312:	e00e      	b.n	8010332 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010316:	2b60      	cmp	r3, #96	; 0x60
 8010318:	d90b      	bls.n	8010332 <create_name+0x2b2>
 801031a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801031c:	2b7a      	cmp	r3, #122	; 0x7a
 801031e:	d808      	bhi.n	8010332 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010324:	f043 0301 	orr.w	r3, r3, #1
 8010328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801032c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801032e:	3b20      	subs	r3, #32
 8010330:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010332:	6a3b      	ldr	r3, [r7, #32]
 8010334:	1c5a      	adds	r2, r3, #1
 8010336:	623a      	str	r2, [r7, #32]
 8010338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801033a:	b2d1      	uxtb	r1, r2
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	4413      	add	r3, r2
 8010340:	460a      	mov	r2, r1
 8010342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010346:	e763      	b.n	8010210 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010348:	bf00      	nop
 801034a:	e000      	b.n	801034e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801034c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010354:	2be5      	cmp	r3, #229	; 0xe5
 8010356:	d103      	bne.n	8010360 <create_name+0x2e0>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2205      	movs	r2, #5
 801035c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	2b08      	cmp	r3, #8
 8010364:	d104      	bne.n	8010370 <create_name+0x2f0>
 8010366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010374:	f003 030c 	and.w	r3, r3, #12
 8010378:	2b0c      	cmp	r3, #12
 801037a:	d005      	beq.n	8010388 <create_name+0x308>
 801037c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010380:	f003 0303 	and.w	r3, r3, #3
 8010384:	2b03      	cmp	r3, #3
 8010386:	d105      	bne.n	8010394 <create_name+0x314>
 8010388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801038c:	f043 0302 	orr.w	r3, r3, #2
 8010390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010398:	f003 0302 	and.w	r3, r3, #2
 801039c:	2b00      	cmp	r3, #0
 801039e:	d117      	bne.n	80103d0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80103a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103a4:	f003 0303 	and.w	r3, r3, #3
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d105      	bne.n	80103b8 <create_name+0x338>
 80103ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103b0:	f043 0310 	orr.w	r3, r3, #16
 80103b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80103b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103bc:	f003 030c 	and.w	r3, r3, #12
 80103c0:	2b04      	cmp	r3, #4
 80103c2:	d105      	bne.n	80103d0 <create_name+0x350>
 80103c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103c8:	f043 0308 	orr.w	r3, r3, #8
 80103cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80103d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80103da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3728      	adds	r7, #40	; 0x28
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	08015aec 	.word	0x08015aec
 80103e8:	08015bfc 	.word	0x08015bfc
 80103ec:	08015af8 	.word	0x08015af8

080103f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010404:	e002      	b.n	801040c <follow_path+0x1c>
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	3301      	adds	r3, #1
 801040a:	603b      	str	r3, [r7, #0]
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	2b2f      	cmp	r3, #47	; 0x2f
 8010412:	d0f8      	beq.n	8010406 <follow_path+0x16>
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	2b5c      	cmp	r3, #92	; 0x5c
 801041a:	d0f4      	beq.n	8010406 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	2200      	movs	r2, #0
 8010420:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b1f      	cmp	r3, #31
 8010428:	d80a      	bhi.n	8010440 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2280      	movs	r2, #128	; 0x80
 801042e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010432:	2100      	movs	r1, #0
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7ff f91b 	bl	800f670 <dir_sdi>
 801043a:	4603      	mov	r3, r0
 801043c:	75fb      	strb	r3, [r7, #23]
 801043e:	e043      	b.n	80104c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010440:	463b      	mov	r3, r7
 8010442:	4619      	mov	r1, r3
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7ff fe1b 	bl	8010080 <create_name>
 801044a:	4603      	mov	r3, r0
 801044c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801044e:	7dfb      	ldrb	r3, [r7, #23]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d134      	bne.n	80104be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff fc5a 	bl	800fd0e <dir_find>
 801045a:	4603      	mov	r3, r0
 801045c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010464:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010466:	7dfb      	ldrb	r3, [r7, #23]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00a      	beq.n	8010482 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801046c:	7dfb      	ldrb	r3, [r7, #23]
 801046e:	2b04      	cmp	r3, #4
 8010470:	d127      	bne.n	80104c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010472:	7afb      	ldrb	r3, [r7, #11]
 8010474:	f003 0304 	and.w	r3, r3, #4
 8010478:	2b00      	cmp	r3, #0
 801047a:	d122      	bne.n	80104c2 <follow_path+0xd2>
 801047c:	2305      	movs	r3, #5
 801047e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010480:	e01f      	b.n	80104c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010482:	7afb      	ldrb	r3, [r7, #11]
 8010484:	f003 0304 	and.w	r3, r3, #4
 8010488:	2b00      	cmp	r3, #0
 801048a:	d11c      	bne.n	80104c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	799b      	ldrb	r3, [r3, #6]
 8010490:	f003 0310 	and.w	r3, r3, #16
 8010494:	2b00      	cmp	r3, #0
 8010496:	d102      	bne.n	801049e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010498:	2305      	movs	r3, #5
 801049a:	75fb      	strb	r3, [r7, #23]
 801049c:	e014      	b.n	80104c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	695b      	ldr	r3, [r3, #20]
 80104a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ac:	4413      	add	r3, r2
 80104ae:	4619      	mov	r1, r3
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7ff fa64 	bl	800f97e <ld_clust>
 80104b6:	4602      	mov	r2, r0
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80104bc:	e7c0      	b.n	8010440 <follow_path+0x50>
			if (res != FR_OK) break;
 80104be:	bf00      	nop
 80104c0:	e002      	b.n	80104c8 <follow_path+0xd8>
				break;
 80104c2:	bf00      	nop
 80104c4:	e000      	b.n	80104c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104c6:	bf00      	nop
			}
		}
	}

	return res;
 80104c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3718      	adds	r7, #24
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80104d2:	b480      	push	{r7}
 80104d4:	b087      	sub	sp, #28
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80104da:	f04f 33ff 	mov.w	r3, #4294967295
 80104de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d031      	beq.n	801054c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	617b      	str	r3, [r7, #20]
 80104ee:	e002      	b.n	80104f6 <get_ldnumber+0x24>
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	3301      	adds	r3, #1
 80104f4:	617b      	str	r3, [r7, #20]
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	2b1f      	cmp	r3, #31
 80104fc:	d903      	bls.n	8010506 <get_ldnumber+0x34>
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b3a      	cmp	r3, #58	; 0x3a
 8010504:	d1f4      	bne.n	80104f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	2b3a      	cmp	r3, #58	; 0x3a
 801050c:	d11c      	bne.n	8010548 <get_ldnumber+0x76>
			tp = *path;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	1c5a      	adds	r2, r3, #1
 8010518:	60fa      	str	r2, [r7, #12]
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	3b30      	subs	r3, #48	; 0x30
 801051e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	2b09      	cmp	r3, #9
 8010524:	d80e      	bhi.n	8010544 <get_ldnumber+0x72>
 8010526:	68fa      	ldr	r2, [r7, #12]
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	429a      	cmp	r2, r3
 801052c:	d10a      	bne.n	8010544 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d107      	bne.n	8010544 <get_ldnumber+0x72>
					vol = (int)i;
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	3301      	adds	r3, #1
 801053c:	617b      	str	r3, [r7, #20]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	e002      	b.n	801054e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010548:	2300      	movs	r3, #0
 801054a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801054c:	693b      	ldr	r3, [r7, #16]
}
 801054e:	4618      	mov	r0, r3
 8010550:	371c      	adds	r7, #28
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
	...

0801055c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	70da      	strb	r2, [r3, #3]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f04f 32ff 	mov.w	r2, #4294967295
 8010572:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010574:	6839      	ldr	r1, [r7, #0]
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7fe fcfa 	bl	800ef70 <move_window>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <check_fs+0x2a>
 8010582:	2304      	movs	r3, #4
 8010584:	e038      	b.n	80105f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	3338      	adds	r3, #56	; 0x38
 801058a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801058e:	4618      	mov	r0, r3
 8010590:	f7fe fa48 	bl	800ea24 <ld_word>
 8010594:	4603      	mov	r3, r0
 8010596:	461a      	mov	r2, r3
 8010598:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801059c:	429a      	cmp	r2, r3
 801059e:	d001      	beq.n	80105a4 <check_fs+0x48>
 80105a0:	2303      	movs	r3, #3
 80105a2:	e029      	b.n	80105f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105aa:	2be9      	cmp	r3, #233	; 0xe9
 80105ac:	d009      	beq.n	80105c2 <check_fs+0x66>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105b4:	2beb      	cmp	r3, #235	; 0xeb
 80105b6:	d11e      	bne.n	80105f6 <check_fs+0x9a>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80105be:	2b90      	cmp	r3, #144	; 0x90
 80105c0:	d119      	bne.n	80105f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3338      	adds	r3, #56	; 0x38
 80105c6:	3336      	adds	r3, #54	; 0x36
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fe fa43 	bl	800ea54 <ld_dword>
 80105ce:	4603      	mov	r3, r0
 80105d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80105d4:	4a0a      	ldr	r2, [pc, #40]	; (8010600 <check_fs+0xa4>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d101      	bne.n	80105de <check_fs+0x82>
 80105da:	2300      	movs	r3, #0
 80105dc:	e00c      	b.n	80105f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3338      	adds	r3, #56	; 0x38
 80105e2:	3352      	adds	r3, #82	; 0x52
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fe fa35 	bl	800ea54 <ld_dword>
 80105ea:	4603      	mov	r3, r0
 80105ec:	4a05      	ldr	r2, [pc, #20]	; (8010604 <check_fs+0xa8>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d101      	bne.n	80105f6 <check_fs+0x9a>
 80105f2:	2300      	movs	r3, #0
 80105f4:	e000      	b.n	80105f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80105f6:	2302      	movs	r3, #2
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	00544146 	.word	0x00544146
 8010604:	33544146 	.word	0x33544146

08010608 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b096      	sub	sp, #88	; 0x58
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	60b9      	str	r1, [r7, #8]
 8010612:	4613      	mov	r3, r2
 8010614:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2200      	movs	r2, #0
 801061a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f7ff ff58 	bl	80104d2 <get_ldnumber>
 8010622:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010626:	2b00      	cmp	r3, #0
 8010628:	da01      	bge.n	801062e <find_volume+0x26>
 801062a:	230b      	movs	r3, #11
 801062c:	e236      	b.n	8010a9c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801062e:	4aac      	ldr	r2, [pc, #688]	; (80108e0 <find_volume+0x2d8>)
 8010630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010636:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <find_volume+0x3a>
 801063e:	230c      	movs	r3, #12
 8010640:	e22c      	b.n	8010a9c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010642:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010644:	f7fe faee 	bl	800ec24 <lock_fs>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <find_volume+0x4a>
 801064e:	230f      	movs	r3, #15
 8010650:	e224      	b.n	8010a9c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010656:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010658:	79fb      	ldrb	r3, [r7, #7]
 801065a:	f023 0301 	bic.w	r3, r3, #1
 801065e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01a      	beq.n	801069e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	785b      	ldrb	r3, [r3, #1]
 801066c:	4618      	mov	r0, r3
 801066e:	f7fe f93b 	bl	800e8e8 <disk_status>
 8010672:	4603      	mov	r3, r0
 8010674:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10c      	bne.n	801069e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010684:	79fb      	ldrb	r3, [r7, #7]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d007      	beq.n	801069a <find_volume+0x92>
 801068a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801068e:	f003 0304 	and.w	r3, r3, #4
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010696:	230a      	movs	r3, #10
 8010698:	e200      	b.n	8010a9c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801069a:	2300      	movs	r3, #0
 801069c:	e1fe      	b.n	8010a9c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801069e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a0:	2200      	movs	r2, #0
 80106a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80106a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a6:	b2da      	uxtb	r2, r3
 80106a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	785b      	ldrb	r3, [r3, #1]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7fe f933 	bl	800e91c <disk_initialize>
 80106b6:	4603      	mov	r3, r0
 80106b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80106bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106c0:	f003 0301 	and.w	r3, r3, #1
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80106c8:	2303      	movs	r3, #3
 80106ca:	e1e7      	b.n	8010a9c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80106cc:	79fb      	ldrb	r3, [r7, #7]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d007      	beq.n	80106e2 <find_volume+0xda>
 80106d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106d6:	f003 0304 	and.w	r3, r3, #4
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80106de:	230a      	movs	r3, #10
 80106e0:	e1dc      	b.n	8010a9c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80106e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106ea:	f7ff ff37 	bl	801055c <check_fs>
 80106ee:	4603      	mov	r3, r0
 80106f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80106f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	d14b      	bne.n	8010794 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80106fc:	2300      	movs	r3, #0
 80106fe:	643b      	str	r3, [r7, #64]	; 0x40
 8010700:	e01f      	b.n	8010742 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070a:	011b      	lsls	r3, r3, #4
 801070c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010710:	4413      	add	r3, r2
 8010712:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010716:	3304      	adds	r3, #4
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d006      	beq.n	801072c <find_volume+0x124>
 801071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010720:	3308      	adds	r3, #8
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe f996 	bl	800ea54 <ld_dword>
 8010728:	4602      	mov	r2, r0
 801072a:	e000      	b.n	801072e <find_volume+0x126>
 801072c:	2200      	movs	r2, #0
 801072e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010736:	440b      	add	r3, r1
 8010738:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801073c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801073e:	3301      	adds	r3, #1
 8010740:	643b      	str	r3, [r7, #64]	; 0x40
 8010742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010744:	2b03      	cmp	r3, #3
 8010746:	d9dc      	bls.n	8010702 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010748:	2300      	movs	r3, #0
 801074a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801074c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <find_volume+0x150>
 8010752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010754:	3b01      	subs	r3, #1
 8010756:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010760:	4413      	add	r3, r2
 8010762:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010766:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801076a:	2b00      	cmp	r3, #0
 801076c:	d005      	beq.n	801077a <find_volume+0x172>
 801076e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010772:	f7ff fef3 	bl	801055c <check_fs>
 8010776:	4603      	mov	r3, r0
 8010778:	e000      	b.n	801077c <find_volume+0x174>
 801077a:	2303      	movs	r3, #3
 801077c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010784:	2b01      	cmp	r3, #1
 8010786:	d905      	bls.n	8010794 <find_volume+0x18c>
 8010788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801078a:	3301      	adds	r3, #1
 801078c:	643b      	str	r3, [r7, #64]	; 0x40
 801078e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010790:	2b03      	cmp	r3, #3
 8010792:	d9e1      	bls.n	8010758 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010798:	2b04      	cmp	r3, #4
 801079a:	d101      	bne.n	80107a0 <find_volume+0x198>
 801079c:	2301      	movs	r3, #1
 801079e:	e17d      	b.n	8010a9c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80107a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d901      	bls.n	80107ac <find_volume+0x1a4>
 80107a8:	230d      	movs	r3, #13
 80107aa:	e177      	b.n	8010a9c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80107ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ae:	3338      	adds	r3, #56	; 0x38
 80107b0:	330b      	adds	r3, #11
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe f936 	bl	800ea24 <ld_word>
 80107b8:	4603      	mov	r3, r0
 80107ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107be:	d001      	beq.n	80107c4 <find_volume+0x1bc>
 80107c0:	230d      	movs	r3, #13
 80107c2:	e16b      	b.n	8010a9c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80107c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c6:	3338      	adds	r3, #56	; 0x38
 80107c8:	3316      	adds	r3, #22
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fe f92a 	bl	800ea24 <ld_word>
 80107d0:	4603      	mov	r3, r0
 80107d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80107d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <find_volume+0x1e0>
 80107da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107dc:	3338      	adds	r3, #56	; 0x38
 80107de:	3324      	adds	r3, #36	; 0x24
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fe f937 	bl	800ea54 <ld_dword>
 80107e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80107e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80107ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80107f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	789b      	ldrb	r3, [r3, #2]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d005      	beq.n	801080c <find_volume+0x204>
 8010800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010802:	789b      	ldrb	r3, [r3, #2]
 8010804:	2b02      	cmp	r3, #2
 8010806:	d001      	beq.n	801080c <find_volume+0x204>
 8010808:	230d      	movs	r3, #13
 801080a:	e147      	b.n	8010a9c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080e:	789b      	ldrb	r3, [r3, #2]
 8010810:	461a      	mov	r2, r3
 8010812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010814:	fb02 f303 	mul.w	r3, r2, r3
 8010818:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801081a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010820:	b29a      	uxth	r2, r3
 8010822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010824:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010828:	895b      	ldrh	r3, [r3, #10]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d008      	beq.n	8010840 <find_volume+0x238>
 801082e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010830:	895b      	ldrh	r3, [r3, #10]
 8010832:	461a      	mov	r2, r3
 8010834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010836:	895b      	ldrh	r3, [r3, #10]
 8010838:	3b01      	subs	r3, #1
 801083a:	4013      	ands	r3, r2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <find_volume+0x23c>
 8010840:	230d      	movs	r3, #13
 8010842:	e12b      	b.n	8010a9c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	3338      	adds	r3, #56	; 0x38
 8010848:	3311      	adds	r3, #17
 801084a:	4618      	mov	r0, r3
 801084c:	f7fe f8ea 	bl	800ea24 <ld_word>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	891b      	ldrh	r3, [r3, #8]
 801085c:	f003 030f 	and.w	r3, r3, #15
 8010860:	b29b      	uxth	r3, r3
 8010862:	2b00      	cmp	r3, #0
 8010864:	d001      	beq.n	801086a <find_volume+0x262>
 8010866:	230d      	movs	r3, #13
 8010868:	e118      	b.n	8010a9c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801086a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086c:	3338      	adds	r3, #56	; 0x38
 801086e:	3313      	adds	r3, #19
 8010870:	4618      	mov	r0, r3
 8010872:	f7fe f8d7 	bl	800ea24 <ld_word>
 8010876:	4603      	mov	r3, r0
 8010878:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801087a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801087c:	2b00      	cmp	r3, #0
 801087e:	d106      	bne.n	801088e <find_volume+0x286>
 8010880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010882:	3338      	adds	r3, #56	; 0x38
 8010884:	3320      	adds	r3, #32
 8010886:	4618      	mov	r0, r3
 8010888:	f7fe f8e4 	bl	800ea54 <ld_dword>
 801088c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010890:	3338      	adds	r3, #56	; 0x38
 8010892:	330e      	adds	r3, #14
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe f8c5 	bl	800ea24 <ld_word>
 801089a:	4603      	mov	r3, r0
 801089c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801089e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d101      	bne.n	80108a8 <find_volume+0x2a0>
 80108a4:	230d      	movs	r3, #13
 80108a6:	e0f9      	b.n	8010a9c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80108a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ac:	4413      	add	r3, r2
 80108ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108b0:	8912      	ldrh	r2, [r2, #8]
 80108b2:	0912      	lsrs	r2, r2, #4
 80108b4:	b292      	uxth	r2, r2
 80108b6:	4413      	add	r3, r2
 80108b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80108ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108be:	429a      	cmp	r2, r3
 80108c0:	d201      	bcs.n	80108c6 <find_volume+0x2be>
 80108c2:	230d      	movs	r3, #13
 80108c4:	e0ea      	b.n	8010a9c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80108c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108ce:	8952      	ldrh	r2, [r2, #10]
 80108d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80108d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80108d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d103      	bne.n	80108e4 <find_volume+0x2dc>
 80108dc:	230d      	movs	r3, #13
 80108de:	e0dd      	b.n	8010a9c <find_volume+0x494>
 80108e0:	20000460 	.word	0x20000460
		fmt = FS_FAT32;
 80108e4:	2303      	movs	r3, #3
 80108e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d802      	bhi.n	80108fa <find_volume+0x2f2>
 80108f4:	2302      	movs	r3, #2
 80108f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010900:	4293      	cmp	r3, r2
 8010902:	d802      	bhi.n	801090a <find_volume+0x302>
 8010904:	2301      	movs	r3, #1
 8010906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	1c9a      	adds	r2, r3, #2
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010916:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010918:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801091a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801091c:	441a      	add	r2, r3
 801091e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010920:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010922:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	441a      	add	r2, r3
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801092c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010930:	2b03      	cmp	r3, #3
 8010932:	d11e      	bne.n	8010972 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010936:	3338      	adds	r3, #56	; 0x38
 8010938:	332a      	adds	r3, #42	; 0x2a
 801093a:	4618      	mov	r0, r3
 801093c:	f7fe f872 	bl	800ea24 <ld_word>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d001      	beq.n	801094a <find_volume+0x342>
 8010946:	230d      	movs	r3, #13
 8010948:	e0a8      	b.n	8010a9c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801094a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094c:	891b      	ldrh	r3, [r3, #8]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <find_volume+0x34e>
 8010952:	230d      	movs	r3, #13
 8010954:	e0a2      	b.n	8010a9c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	3338      	adds	r3, #56	; 0x38
 801095a:	332c      	adds	r3, #44	; 0x2c
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe f879 	bl	800ea54 <ld_dword>
 8010962:	4602      	mov	r2, r0
 8010964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010966:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096a:	69db      	ldr	r3, [r3, #28]
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	647b      	str	r3, [r7, #68]	; 0x44
 8010970:	e01f      	b.n	80109b2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	891b      	ldrh	r3, [r3, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <find_volume+0x376>
 801097a:	230d      	movs	r3, #13
 801097c:	e08e      	b.n	8010a9c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801097e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010984:	441a      	add	r2, r3
 8010986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010988:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801098a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801098e:	2b02      	cmp	r3, #2
 8010990:	d103      	bne.n	801099a <find_volume+0x392>
 8010992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010994:	69db      	ldr	r3, [r3, #28]
 8010996:	005b      	lsls	r3, r3, #1
 8010998:	e00a      	b.n	80109b0 <find_volume+0x3a8>
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	69da      	ldr	r2, [r3, #28]
 801099e:	4613      	mov	r3, r2
 80109a0:	005b      	lsls	r3, r3, #1
 80109a2:	4413      	add	r3, r2
 80109a4:	085a      	lsrs	r2, r3, #1
 80109a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a8:	69db      	ldr	r3, [r3, #28]
 80109aa:	f003 0301 	and.w	r3, r3, #1
 80109ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80109b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80109b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b4:	6a1a      	ldr	r2, [r3, #32]
 80109b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80109bc:	0a5b      	lsrs	r3, r3, #9
 80109be:	429a      	cmp	r2, r3
 80109c0:	d201      	bcs.n	80109c6 <find_volume+0x3be>
 80109c2:	230d      	movs	r3, #13
 80109c4:	e06a      	b.n	8010a9c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80109c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c8:	f04f 32ff 	mov.w	r2, #4294967295
 80109cc:	619a      	str	r2, [r3, #24]
 80109ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d0:	699a      	ldr	r2, [r3, #24]
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80109d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d8:	2280      	movs	r2, #128	; 0x80
 80109da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80109dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109e0:	2b03      	cmp	r3, #3
 80109e2:	d149      	bne.n	8010a78 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80109e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e6:	3338      	adds	r3, #56	; 0x38
 80109e8:	3330      	adds	r3, #48	; 0x30
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fe f81a 	bl	800ea24 <ld_word>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d140      	bne.n	8010a78 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80109f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f8:	3301      	adds	r3, #1
 80109fa:	4619      	mov	r1, r3
 80109fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109fe:	f7fe fab7 	bl	800ef70 <move_window>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d137      	bne.n	8010a78 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8010a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	3338      	adds	r3, #56	; 0x38
 8010a12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fe f804 	bl	800ea24 <ld_word>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	461a      	mov	r2, r3
 8010a20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d127      	bne.n	8010a78 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2a:	3338      	adds	r3, #56	; 0x38
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7fe f811 	bl	800ea54 <ld_dword>
 8010a32:	4603      	mov	r3, r0
 8010a34:	4a1b      	ldr	r2, [pc, #108]	; (8010aa4 <find_volume+0x49c>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d11e      	bne.n	8010a78 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3c:	3338      	adds	r3, #56	; 0x38
 8010a3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe f806 	bl	800ea54 <ld_dword>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	4a17      	ldr	r2, [pc, #92]	; (8010aa8 <find_volume+0x4a0>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d113      	bne.n	8010a78 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	3338      	adds	r3, #56	; 0x38
 8010a54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fd fffb 	bl	800ea54 <ld_dword>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a62:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	3338      	adds	r3, #56	; 0x38
 8010a68:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fd fff1 	bl	800ea54 <ld_dword>
 8010a72:	4602      	mov	r2, r0
 8010a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a76:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010a7e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010a80:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <find_volume+0x4a4>)
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	3301      	adds	r3, #1
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	4b08      	ldr	r3, [pc, #32]	; (8010aac <find_volume+0x4a4>)
 8010a8a:	801a      	strh	r2, [r3, #0]
 8010a8c:	4b07      	ldr	r3, [pc, #28]	; (8010aac <find_volume+0x4a4>)
 8010a8e:	881a      	ldrh	r2, [r3, #0]
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a96:	f7fe fa03 	bl	800eea0 <clear_lock>
#endif
	return FR_OK;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3758      	adds	r7, #88	; 0x58
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	41615252 	.word	0x41615252
 8010aa8:	61417272 	.word	0x61417272
 8010aac:	20000464 	.word	0x20000464

08010ab0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010aba:	2309      	movs	r3, #9
 8010abc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d02e      	beq.n	8010b22 <validate+0x72>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d02a      	beq.n	8010b22 <validate+0x72>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d025      	beq.n	8010b22 <validate+0x72>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	889a      	ldrh	r2, [r3, #4]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	88db      	ldrh	r3, [r3, #6]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d11e      	bne.n	8010b22 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fe f89b 	bl	800ec24 <lock_fs>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d014      	beq.n	8010b1e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	785b      	ldrb	r3, [r3, #1]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fd fef4 	bl	800e8e8 <disk_status>
 8010b00:	4603      	mov	r3, r0
 8010b02:	f003 0301 	and.w	r3, r3, #1
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d102      	bne.n	8010b10 <validate+0x60>
				res = FR_OK;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	73fb      	strb	r3, [r7, #15]
 8010b0e:	e008      	b.n	8010b22 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2100      	movs	r1, #0
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe f89a 	bl	800ec50 <unlock_fs>
 8010b1c:	e001      	b.n	8010b22 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010b1e:	230f      	movs	r3, #15
 8010b20:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010b22:	7bfb      	ldrb	r3, [r7, #15]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d102      	bne.n	8010b2e <validate+0x7e>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	e000      	b.n	8010b30 <validate+0x80>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	6013      	str	r3, [r2, #0]
	return res;
 8010b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
	...

08010b40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010b52:	f107 0310 	add.w	r3, r7, #16
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7ff fcbb 	bl	80104d2 <get_ldnumber>
 8010b5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	da01      	bge.n	8010b68 <f_mount+0x28>
 8010b64:	230b      	movs	r3, #11
 8010b66:	e048      	b.n	8010bfa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010b68:	4a26      	ldr	r2, [pc, #152]	; (8010c04 <f_mount+0xc4>)
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d00f      	beq.n	8010b98 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010b78:	69b8      	ldr	r0, [r7, #24]
 8010b7a:	f7fe f991 	bl	800eea0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	691b      	ldr	r3, [r3, #16]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f001 f8ee 	bl	8011d64 <ff_del_syncobj>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <f_mount+0x52>
 8010b8e:	2302      	movs	r3, #2
 8010b90:	e033      	b.n	8010bfa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	2200      	movs	r2, #0
 8010b96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00f      	beq.n	8010bbe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010ba4:	69fb      	ldr	r3, [r7, #28]
 8010ba6:	b2da      	uxtb	r2, r3
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	3310      	adds	r3, #16
 8010bac:	4619      	mov	r1, r3
 8010bae:	4610      	mov	r0, r2
 8010bb0:	f001 f8ba 	bl	8011d28 <ff_cre_syncobj>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d101      	bne.n	8010bbe <f_mount+0x7e>
 8010bba:	2302      	movs	r3, #2
 8010bbc:	e01d      	b.n	8010bfa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	4910      	ldr	r1, [pc, #64]	; (8010c04 <f_mount+0xc4>)
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d002      	beq.n	8010bd4 <f_mount+0x94>
 8010bce:	79fb      	ldrb	r3, [r7, #7]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d001      	beq.n	8010bd8 <f_mount+0x98>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	e010      	b.n	8010bfa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010bd8:	f107 010c 	add.w	r1, r7, #12
 8010bdc:	f107 0308 	add.w	r3, r7, #8
 8010be0:	2200      	movs	r2, #0
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff fd10 	bl	8010608 <find_volume>
 8010be8:	4603      	mov	r3, r0
 8010bea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	7dfa      	ldrb	r2, [r7, #23]
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fe f82c 	bl	800ec50 <unlock_fs>
 8010bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3720      	adds	r7, #32
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	20000460 	.word	0x20000460

08010c08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	f107 030c 	add.w	r3, r7, #12
 8010c14:	6018      	str	r0, [r3, #0]
 8010c16:	f107 0308 	add.w	r3, r7, #8
 8010c1a:	6019      	str	r1, [r3, #0]
 8010c1c:	1dfb      	adds	r3, r7, #7
 8010c1e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010c20:	f107 030c 	add.w	r3, r7, #12
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d101      	bne.n	8010c2e <f_open+0x26>
 8010c2a:	2309      	movs	r3, #9
 8010c2c:	e239      	b.n	80110a2 <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c2e:	1dfb      	adds	r3, r7, #7
 8010c30:	1dfa      	adds	r2, r7, #7
 8010c32:	7812      	ldrb	r2, [r2, #0]
 8010c34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010c38:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8010c3a:	1dfb      	adds	r3, r7, #7
 8010c3c:	781a      	ldrb	r2, [r3, #0]
 8010c3e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8010c42:	f107 0308 	add.w	r3, r7, #8
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff fcde 	bl	8010608 <find_volume>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8010c52:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f040 8210 	bne.w	801107c <f_open+0x474>
		dj.obj.fs = fs;
 8010c5c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c60:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8010c64:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c68:	f107 0214 	add.w	r2, r7, #20
 8010c6c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010c6e:	f107 0308 	add.w	r3, r7, #8
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7ff fbb8 	bl	80103f0 <follow_path>
 8010c80:	4603      	mov	r3, r0
 8010c82:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c86:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d11b      	bne.n	8010cc6 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c8e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8010c92:	b25b      	sxtb	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	da03      	bge.n	8010ca0 <f_open+0x98>
				res = FR_INVALID_NAME;
 8010c98:	2306      	movs	r3, #6
 8010c9a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010c9e:	e012      	b.n	8010cc6 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010ca0:	1dfb      	adds	r3, r7, #7
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	f023 0301 	bic.w	r3, r3, #1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	bf14      	ite	ne
 8010cac:	2301      	movne	r3, #1
 8010cae:	2300      	moveq	r3, #0
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010cb8:	4611      	mov	r1, r2
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fd ffe4 	bl	800ec88 <chk_lock>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010cc6:	1dfb      	adds	r3, r7, #7
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	f003 031c 	and.w	r3, r3, #28
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f000 809b 	beq.w	8010e0a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8010cd4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d019      	beq.n	8010d10 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010cdc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010ce0:	2b04      	cmp	r3, #4
 8010ce2:	d10e      	bne.n	8010d02 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010ce4:	f7fe f82c 	bl	800ed40 <enq_lock>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d006      	beq.n	8010cfc <f_open+0xf4>
 8010cee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff f8cc 	bl	800fe90 <dir_register>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	e000      	b.n	8010cfe <f_open+0xf6>
 8010cfc:	2312      	movs	r3, #18
 8010cfe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010d02:	1dfb      	adds	r3, r7, #7
 8010d04:	1dfa      	adds	r2, r7, #7
 8010d06:	7812      	ldrb	r2, [r2, #0]
 8010d08:	f042 0208 	orr.w	r2, r2, #8
 8010d0c:	701a      	strb	r2, [r3, #0]
 8010d0e:	e012      	b.n	8010d36 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010d10:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010d14:	f003 0311 	and.w	r3, r3, #17
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d003      	beq.n	8010d24 <f_open+0x11c>
					res = FR_DENIED;
 8010d1c:	2307      	movs	r3, #7
 8010d1e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010d22:	e008      	b.n	8010d36 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010d24:	1dfb      	adds	r3, r7, #7
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	f003 0304 	and.w	r3, r3, #4
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <f_open+0x12e>
 8010d30:	2308      	movs	r3, #8
 8010d32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d36:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	f040 8082 	bne.w	8010e44 <f_open+0x23c>
 8010d40:	1dfb      	adds	r3, r7, #7
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	f003 0308 	and.w	r3, r3, #8
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d07b      	beq.n	8010e44 <f_open+0x23c>
				dw = GET_FATTIME();
 8010d4c:	f7fd fb6a 	bl	800e424 <get_fattime>
 8010d50:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d54:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010d58:	330e      	adds	r3, #14
 8010d5a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fd feb6 	bl	800ead0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d64:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010d68:	3316      	adds	r3, #22
 8010d6a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fd feae 	bl	800ead0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d74:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010d78:	330b      	adds	r3, #11
 8010d7a:	2220      	movs	r2, #32
 8010d7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010d82:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010d86:	4611      	mov	r1, r2
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe fdf8 	bl	800f97e <ld_clust>
 8010d8e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010d96:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe fe0d 	bl	800f9bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010da2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010da6:	331c      	adds	r3, #28
 8010da8:	2100      	movs	r1, #0
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fd fe90 	bl	800ead0 <st_dword>
					fs->wflag = 1;
 8010db0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010db4:	2201      	movs	r2, #1
 8010db6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010db8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d041      	beq.n	8010e44 <f_open+0x23c>
						dw = fs->winsect;
 8010dc0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8010dca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fb1a 	bl	800f40e <remove_chain>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8010de0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d12d      	bne.n	8010e44 <f_open+0x23c>
							res = move_window(fs, dw);
 8010de8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010dec:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fe f8bd 	bl	800ef70 <move_window>
 8010df6:	4603      	mov	r3, r0
 8010df8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010dfc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010e00:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8010e04:	3a01      	subs	r2, #1
 8010e06:	615a      	str	r2, [r3, #20]
 8010e08:	e01c      	b.n	8010e44 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010e0a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d118      	bne.n	8010e44 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010e12:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010e16:	f003 0310 	and.w	r3, r3, #16
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d003      	beq.n	8010e26 <f_open+0x21e>
					res = FR_NO_FILE;
 8010e1e:	2304      	movs	r3, #4
 8010e20:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010e24:	e00e      	b.n	8010e44 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010e26:	1dfb      	adds	r3, r7, #7
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	f003 0302 	and.w	r3, r3, #2
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d008      	beq.n	8010e44 <f_open+0x23c>
 8010e32:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d002      	beq.n	8010e44 <f_open+0x23c>
						res = FR_DENIED;
 8010e3e:	2307      	movs	r3, #7
 8010e40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8010e44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d136      	bne.n	8010eba <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e4c:	1dfb      	adds	r3, r7, #7
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	f003 0308 	and.w	r3, r3, #8
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8010e58:	1dfb      	adds	r3, r7, #7
 8010e5a:	1dfa      	adds	r2, r7, #7
 8010e5c:	7812      	ldrb	r2, [r2, #0]
 8010e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e62:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e64:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e6a:	f107 030c 	add.w	r3, r7, #12
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010e72:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010e76:	f107 030c 	add.w	r3, r7, #12
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e7e:	1dfb      	adds	r3, r7, #7
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	f023 0301 	bic.w	r3, r3, #1
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	bf14      	ite	ne
 8010e8a:	2301      	movne	r3, #1
 8010e8c:	2300      	moveq	r3, #0
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	461a      	mov	r2, r3
 8010e92:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010e96:	4611      	mov	r1, r2
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7fd ff73 	bl	800ed84 <inc_lock>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	f107 030c 	add.w	r3, r7, #12
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ea8:	f107 030c 	add.w	r3, r7, #12
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d102      	bne.n	8010eba <f_open+0x2b2>
 8010eb4:	2302      	movs	r3, #2
 8010eb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010eba:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f040 80dc 	bne.w	801107c <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010ec4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010ec8:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010ecc:	4611      	mov	r1, r2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe fd55 	bl	800f97e <ld_clust>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	f107 030c 	add.w	r3, r7, #12
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010ede:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010ee2:	331c      	adds	r3, #28
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fd fdb5 	bl	800ea54 <ld_dword>
 8010eea:	4602      	mov	r2, r0
 8010eec:	f107 030c 	add.w	r3, r7, #12
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010ef4:	f107 030c 	add.w	r3, r7, #12
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	2200      	movs	r2, #0
 8010efc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010efe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8010f02:	f107 030c 	add.w	r3, r7, #12
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010f0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010f0e:	88da      	ldrh	r2, [r3, #6]
 8010f10:	f107 030c 	add.w	r3, r7, #12
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010f18:	f107 030c 	add.w	r3, r7, #12
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	1dfa      	adds	r2, r7, #7
 8010f20:	7812      	ldrb	r2, [r2, #0]
 8010f22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010f24:	f107 030c 	add.w	r3, r7, #12
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010f2e:	f107 030c 	add.w	r3, r7, #12
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2200      	movs	r2, #0
 8010f36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010f38:	f107 030c 	add.w	r3, r7, #12
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010f42:	f107 030c 	add.w	r3, r7, #12
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	3330      	adds	r3, #48	; 0x30
 8010f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f4e:	2100      	movs	r1, #0
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fd fe0a 	bl	800eb6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010f56:	1dfb      	adds	r3, r7, #7
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	f003 0320 	and.w	r3, r3, #32
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f000 808c 	beq.w	801107c <f_open+0x474>
 8010f64:	f107 030c 	add.w	r3, r7, #12
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 8085 	beq.w	801107c <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010f72:	f107 030c 	add.w	r3, r7, #12
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	68da      	ldr	r2, [r3, #12]
 8010f7a:	f107 030c 	add.w	r3, r7, #12
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010f82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010f86:	895b      	ldrh	r3, [r3, #10]
 8010f88:	025b      	lsls	r3, r3, #9
 8010f8a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010f8e:	f107 030c 	add.w	r3, r7, #12
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f9a:	f107 030c 	add.w	r3, r7, #12
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010fa6:	e01f      	b.n	8010fe8 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8010fa8:	f107 030c 	add.w	r3, r7, #12
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fe f897 	bl	800f0e6 <get_fat>
 8010fb8:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8010fbc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d802      	bhi.n	8010fca <f_open+0x3c2>
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010fca:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd2:	d102      	bne.n	8010fda <f_open+0x3d2>
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010fda:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010fde:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010fe8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d105      	bne.n	8010ffc <f_open+0x3f4>
 8010ff0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010ff4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d8d5      	bhi.n	8010fa8 <f_open+0x3a0>
				}
				fp->clust = clst;
 8010ffc:	f107 030c 	add.w	r3, r7, #12
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8011006:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011008:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801100c:	2b00      	cmp	r3, #0
 801100e:	d135      	bne.n	801107c <f_open+0x474>
 8011010:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8011014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011018:	2b00      	cmp	r3, #0
 801101a:	d02f      	beq.n	801107c <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801101c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011020:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8011024:	4618      	mov	r0, r3
 8011026:	f7fe f83f 	bl	800f0a8 <clust2sect>
 801102a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 801102e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011032:	2b00      	cmp	r3, #0
 8011034:	d103      	bne.n	801103e <f_open+0x436>
						res = FR_INT_ERR;
 8011036:	2302      	movs	r3, #2
 8011038:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801103c:	e01e      	b.n	801107c <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801103e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8011042:	0a5a      	lsrs	r2, r3, #9
 8011044:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011048:	441a      	add	r2, r3
 801104a:	f107 030c 	add.w	r3, r7, #12
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011052:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011056:	7858      	ldrb	r0, [r3, #1]
 8011058:	f107 030c 	add.w	r3, r7, #12
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011062:	f107 030c 	add.w	r3, r7, #12
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	6a1a      	ldr	r2, [r3, #32]
 801106a:	2301      	movs	r3, #1
 801106c:	f7fd fc7c 	bl	800e968 <disk_read>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d002      	beq.n	801107c <f_open+0x474>
 8011076:	2301      	movs	r3, #1
 8011078:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801107c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011080:	2b00      	cmp	r3, #0
 8011082:	d004      	beq.n	801108e <f_open+0x486>
 8011084:	f107 030c 	add.w	r3, r7, #12
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801108e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011092:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8011096:	4611      	mov	r1, r2
 8011098:	4618      	mov	r0, r3
 801109a:	f7fd fdd9 	bl	800ec50 <unlock_fs>
 801109e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b08c      	sub	sp, #48	; 0x30
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	607a      	str	r2, [r7, #4]
 80110b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f107 0210 	add.w	r2, r7, #16
 80110ca:	4611      	mov	r1, r2
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7ff fcef 	bl	8010ab0 <validate>
 80110d2:	4603      	mov	r3, r0
 80110d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80110d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d107      	bne.n	80110f0 <f_write+0x44>
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	7d5b      	ldrb	r3, [r3, #21]
 80110e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80110e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d009      	beq.n	8011104 <f_write+0x58>
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80110f6:	4611      	mov	r1, r2
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fd fda9 	bl	800ec50 <unlock_fs>
 80110fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011102:	e173      	b.n	80113ec <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	7d1b      	ldrb	r3, [r3, #20]
 8011108:	f003 0302 	and.w	r3, r3, #2
 801110c:	2b00      	cmp	r3, #0
 801110e:	d106      	bne.n	801111e <f_write+0x72>
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	2107      	movs	r1, #7
 8011114:	4618      	mov	r0, r3
 8011116:	f7fd fd9b 	bl	800ec50 <unlock_fs>
 801111a:	2307      	movs	r3, #7
 801111c:	e166      	b.n	80113ec <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	699a      	ldr	r2, [r3, #24]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	441a      	add	r2, r3
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	699b      	ldr	r3, [r3, #24]
 801112a:	429a      	cmp	r2, r3
 801112c:	f080 814b 	bcs.w	80113c6 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	699b      	ldr	r3, [r3, #24]
 8011134:	43db      	mvns	r3, r3
 8011136:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011138:	e145      	b.n	80113c6 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	699b      	ldr	r3, [r3, #24]
 801113e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011142:	2b00      	cmp	r3, #0
 8011144:	f040 8101 	bne.w	801134a <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	0a5b      	lsrs	r3, r3, #9
 801114e:	693a      	ldr	r2, [r7, #16]
 8011150:	8952      	ldrh	r2, [r2, #10]
 8011152:	3a01      	subs	r2, #1
 8011154:	4013      	ands	r3, r2
 8011156:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d14d      	bne.n	80111fa <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	699b      	ldr	r3, [r3, #24]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10c      	bne.n	8011180 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116e:	2b00      	cmp	r3, #0
 8011170:	d11a      	bne.n	80111a8 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2100      	movs	r1, #0
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe f9ae 	bl	800f4d8 <create_chain>
 801117c:	62b8      	str	r0, [r7, #40]	; 0x28
 801117e:	e013      	b.n	80111a8 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011184:	2b00      	cmp	r3, #0
 8011186:	d007      	beq.n	8011198 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	699b      	ldr	r3, [r3, #24]
 801118c:	4619      	mov	r1, r3
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f7fe fa3a 	bl	800f608 <clmt_clust>
 8011194:	62b8      	str	r0, [r7, #40]	; 0x28
 8011196:	e007      	b.n	80111a8 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	69db      	ldr	r3, [r3, #28]
 801119e:	4619      	mov	r1, r3
 80111a0:	4610      	mov	r0, r2
 80111a2:	f7fe f999 	bl	800f4d8 <create_chain>
 80111a6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80111a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 8110 	beq.w	80113d0 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80111b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d109      	bne.n	80111ca <f_write+0x11e>
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2202      	movs	r2, #2
 80111ba:	755a      	strb	r2, [r3, #21]
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	2102      	movs	r1, #2
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fd fd45 	bl	800ec50 <unlock_fs>
 80111c6:	2302      	movs	r3, #2
 80111c8:	e110      	b.n	80113ec <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d0:	d109      	bne.n	80111e6 <f_write+0x13a>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2201      	movs	r2, #1
 80111d6:	755a      	strb	r2, [r3, #21]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	2101      	movs	r1, #1
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fd fd37 	bl	800ec50 <unlock_fs>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e102      	b.n	80113ec <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111ea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d102      	bne.n	80111fa <f_write+0x14e>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	7d1b      	ldrb	r3, [r3, #20]
 80111fe:	b25b      	sxtb	r3, r3
 8011200:	2b00      	cmp	r3, #0
 8011202:	da1d      	bge.n	8011240 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	7858      	ldrb	r0, [r3, #1]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6a1a      	ldr	r2, [r3, #32]
 8011212:	2301      	movs	r3, #1
 8011214:	f7fd fbc8 	bl	800e9a8 <disk_write>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d009      	beq.n	8011232 <f_write+0x186>
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2201      	movs	r2, #1
 8011222:	755a      	strb	r2, [r3, #21]
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	2101      	movs	r1, #1
 8011228:	4618      	mov	r0, r3
 801122a:	f7fd fd11 	bl	800ec50 <unlock_fs>
 801122e:	2301      	movs	r3, #1
 8011230:	e0dc      	b.n	80113ec <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	7d1b      	ldrb	r3, [r3, #20]
 8011236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801123a:	b2da      	uxtb	r2, r3
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	69db      	ldr	r3, [r3, #28]
 8011246:	4619      	mov	r1, r3
 8011248:	4610      	mov	r0, r2
 801124a:	f7fd ff2d 	bl	800f0a8 <clust2sect>
 801124e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d109      	bne.n	801126a <f_write+0x1be>
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2202      	movs	r2, #2
 801125a:	755a      	strb	r2, [r3, #21]
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	2102      	movs	r1, #2
 8011260:	4618      	mov	r0, r3
 8011262:	f7fd fcf5 	bl	800ec50 <unlock_fs>
 8011266:	2302      	movs	r3, #2
 8011268:	e0c0      	b.n	80113ec <f_write+0x340>
			sect += csect;
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	4413      	add	r3, r2
 8011270:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	0a5b      	lsrs	r3, r3, #9
 8011276:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d041      	beq.n	8011302 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801127e:	69ba      	ldr	r2, [r7, #24]
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	4413      	add	r3, r2
 8011284:	693a      	ldr	r2, [r7, #16]
 8011286:	8952      	ldrh	r2, [r2, #10]
 8011288:	4293      	cmp	r3, r2
 801128a:	d905      	bls.n	8011298 <f_write+0x1ec>
					cc = fs->csize - csect;
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	895b      	ldrh	r3, [r3, #10]
 8011290:	461a      	mov	r2, r3
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	7858      	ldrb	r0, [r3, #1]
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	697a      	ldr	r2, [r7, #20]
 80112a0:	69f9      	ldr	r1, [r7, #28]
 80112a2:	f7fd fb81 	bl	800e9a8 <disk_write>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d009      	beq.n	80112c0 <f_write+0x214>
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2201      	movs	r2, #1
 80112b0:	755a      	strb	r2, [r3, #21]
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2101      	movs	r1, #1
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7fd fcca 	bl	800ec50 <unlock_fs>
 80112bc:	2301      	movs	r3, #1
 80112be:	e095      	b.n	80113ec <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6a1a      	ldr	r2, [r3, #32]
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	1ad3      	subs	r3, r2, r3
 80112c8:	6a3a      	ldr	r2, [r7, #32]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d915      	bls.n	80112fa <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	6a1a      	ldr	r2, [r3, #32]
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	025b      	lsls	r3, r3, #9
 80112de:	69fa      	ldr	r2, [r7, #28]
 80112e0:	4413      	add	r3, r2
 80112e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112e6:	4619      	mov	r1, r3
 80112e8:	f7fd fc1e 	bl	800eb28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	7d1b      	ldrb	r3, [r3, #20]
 80112f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80112fa:	6a3b      	ldr	r3, [r7, #32]
 80112fc:	025b      	lsls	r3, r3, #9
 80112fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011300:	e044      	b.n	801138c <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6a1b      	ldr	r3, [r3, #32]
 8011306:	697a      	ldr	r2, [r7, #20]
 8011308:	429a      	cmp	r2, r3
 801130a:	d01b      	beq.n	8011344 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	699a      	ldr	r2, [r3, #24]
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011314:	429a      	cmp	r2, r3
 8011316:	d215      	bcs.n	8011344 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	7858      	ldrb	r0, [r3, #1]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011322:	2301      	movs	r3, #1
 8011324:	697a      	ldr	r2, [r7, #20]
 8011326:	f7fd fb1f 	bl	800e968 <disk_read>
 801132a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801132c:	2b00      	cmp	r3, #0
 801132e:	d009      	beq.n	8011344 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2201      	movs	r2, #1
 8011334:	755a      	strb	r2, [r3, #21]
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	2101      	movs	r1, #1
 801133a:	4618      	mov	r0, r3
 801133c:	f7fd fc88 	bl	800ec50 <unlock_fs>
 8011340:	2301      	movs	r3, #1
 8011342:	e053      	b.n	80113ec <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	699b      	ldr	r3, [r3, #24]
 801134e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011352:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011356:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	429a      	cmp	r2, r3
 801135e:	d901      	bls.n	8011364 <f_write+0x2b8>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	699b      	ldr	r3, [r3, #24]
 801136e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011372:	4413      	add	r3, r2
 8011374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011376:	69f9      	ldr	r1, [r7, #28]
 8011378:	4618      	mov	r0, r3
 801137a:	f7fd fbd5 	bl	800eb28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	7d1b      	ldrb	r3, [r3, #20]
 8011382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011386:	b2da      	uxtb	r2, r3
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801138c:	69fa      	ldr	r2, [r7, #28]
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	4413      	add	r3, r2
 8011392:	61fb      	str	r3, [r7, #28]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	699a      	ldr	r2, [r3, #24]
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	441a      	add	r2, r3
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	619a      	str	r2, [r3, #24]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	68da      	ldr	r2, [r3, #12]
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	699b      	ldr	r3, [r3, #24]
 80113a8:	429a      	cmp	r2, r3
 80113aa:	bf38      	it	cc
 80113ac:	461a      	movcc	r2, r3
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	60da      	str	r2, [r3, #12]
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b8:	441a      	add	r2, r3
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	1ad3      	subs	r3, r2, r3
 80113c4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	f47f aeb6 	bne.w	801113a <f_write+0x8e>
 80113ce:	e000      	b.n	80113d2 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80113d0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	7d1b      	ldrb	r3, [r3, #20]
 80113d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	2100      	movs	r1, #0
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fd fc33 	bl	800ec50 <unlock_fs>
 80113ea:	2300      	movs	r3, #0
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3730      	adds	r7, #48	; 0x30
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f107 0208 	add.w	r2, r7, #8
 8011402:	4611      	mov	r1, r2
 8011404:	4618      	mov	r0, r3
 8011406:	f7ff fb53 	bl	8010ab0 <validate>
 801140a:	4603      	mov	r3, r0
 801140c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801140e:	7dfb      	ldrb	r3, [r7, #23]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d16d      	bne.n	80114f0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	7d1b      	ldrb	r3, [r3, #20]
 8011418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801141c:	2b00      	cmp	r3, #0
 801141e:	d067      	beq.n	80114f0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	7d1b      	ldrb	r3, [r3, #20]
 8011424:	b25b      	sxtb	r3, r3
 8011426:	2b00      	cmp	r3, #0
 8011428:	da1a      	bge.n	8011460 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	7858      	ldrb	r0, [r3, #1]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6a1a      	ldr	r2, [r3, #32]
 8011438:	2301      	movs	r3, #1
 801143a:	f7fd fab5 	bl	800e9a8 <disk_write>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d006      	beq.n	8011452 <f_sync+0x5e>
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	2101      	movs	r1, #1
 8011448:	4618      	mov	r0, r3
 801144a:	f7fd fc01 	bl	800ec50 <unlock_fs>
 801144e:	2301      	movs	r3, #1
 8011450:	e055      	b.n	80114fe <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	7d1b      	ldrb	r3, [r3, #20]
 8011456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801145a:	b2da      	uxtb	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011460:	f7fc ffe0 	bl	800e424 <get_fattime>
 8011464:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801146c:	4619      	mov	r1, r3
 801146e:	4610      	mov	r0, r2
 8011470:	f7fd fd7e 	bl	800ef70 <move_window>
 8011474:	4603      	mov	r3, r0
 8011476:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011478:	7dfb      	ldrb	r3, [r7, #23]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d138      	bne.n	80114f0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011482:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	330b      	adds	r3, #11
 8011488:	781a      	ldrb	r2, [r3, #0]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	330b      	adds	r3, #11
 801148e:	f042 0220 	orr.w	r2, r2, #32
 8011492:	b2d2      	uxtb	r2, r2
 8011494:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6818      	ldr	r0, [r3, #0]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	461a      	mov	r2, r3
 80114a0:	68f9      	ldr	r1, [r7, #12]
 80114a2:	f7fe fa8b 	bl	800f9bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f103 021c 	add.w	r2, r3, #28
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	4619      	mov	r1, r3
 80114b2:	4610      	mov	r0, r2
 80114b4:	f7fd fb0c 	bl	800ead0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	3316      	adds	r3, #22
 80114bc:	6939      	ldr	r1, [r7, #16]
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fd fb06 	bl	800ead0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	3312      	adds	r3, #18
 80114c8:	2100      	movs	r1, #0
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fd fae5 	bl	800ea9a <st_word>
					fs->wflag = 1;
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2201      	movs	r2, #1
 80114d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	4618      	mov	r0, r3
 80114da:	f7fd fd77 	bl	800efcc <sync_fs>
 80114de:	4603      	mov	r3, r0
 80114e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	7d1b      	ldrb	r3, [r3, #20]
 80114e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	7dfa      	ldrb	r2, [r7, #23]
 80114f4:	4611      	mov	r1, r2
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fd fbaa 	bl	800ec50 <unlock_fs>
 80114fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3718      	adds	r7, #24
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}

08011506 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b090      	sub	sp, #64	; 0x40
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
 801150e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f107 0208 	add.w	r2, r7, #8
 8011516:	4611      	mov	r1, r2
 8011518:	4618      	mov	r0, r3
 801151a:	f7ff fac9 	bl	8010ab0 <validate>
 801151e:	4603      	mov	r3, r0
 8011520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011528:	2b00      	cmp	r3, #0
 801152a:	d103      	bne.n	8011534 <f_lseek+0x2e>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	7d5b      	ldrb	r3, [r3, #21]
 8011530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011534:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011538:	2b00      	cmp	r3, #0
 801153a:	d009      	beq.n	8011550 <f_lseek+0x4a>
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011542:	4611      	mov	r1, r2
 8011544:	4618      	mov	r0, r3
 8011546:	f7fd fb83 	bl	800ec50 <unlock_fs>
 801154a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801154e:	e229      	b.n	80119a4 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011554:	2b00      	cmp	r3, #0
 8011556:	f000 80ea 	beq.w	801172e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011560:	d164      	bne.n	801162c <f_lseek+0x126>
			tbl = fp->cltbl;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011566:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	1d1a      	adds	r2, r3, #4
 801156c:	627a      	str	r2, [r7, #36]	; 0x24
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	617b      	str	r3, [r7, #20]
 8011572:	2302      	movs	r3, #2
 8011574:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157e:	2b00      	cmp	r3, #0
 8011580:	d044      	beq.n	801160c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011584:	613b      	str	r3, [r7, #16]
 8011586:	2300      	movs	r3, #0
 8011588:	62fb      	str	r3, [r7, #44]	; 0x2c
 801158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158c:	3302      	adds	r3, #2
 801158e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011592:	60fb      	str	r3, [r7, #12]
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	3301      	adds	r3, #1
 8011598:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fd fda1 	bl	800f0e6 <get_fat>
 80115a4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80115a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d809      	bhi.n	80115c0 <f_lseek+0xba>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2202      	movs	r2, #2
 80115b0:	755a      	strb	r2, [r3, #21]
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	2102      	movs	r1, #2
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fd fb4a 	bl	800ec50 <unlock_fs>
 80115bc:	2302      	movs	r3, #2
 80115be:	e1f1      	b.n	80119a4 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80115c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c6:	d109      	bne.n	80115dc <f_lseek+0xd6>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2201      	movs	r2, #1
 80115cc:	755a      	strb	r2, [r3, #21]
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	2101      	movs	r1, #1
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fd fb3c 	bl	800ec50 <unlock_fs>
 80115d8:	2301      	movs	r3, #1
 80115da:	e1e3      	b.n	80119a4 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	3301      	adds	r3, #1
 80115e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d0d4      	beq.n	8011590 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80115e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d809      	bhi.n	8011602 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80115ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f0:	1d1a      	adds	r2, r3, #4
 80115f2:	627a      	str	r2, [r7, #36]	; 0x24
 80115f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115f6:	601a      	str	r2, [r3, #0]
 80115f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fa:	1d1a      	adds	r2, r3, #4
 80115fc:	627a      	str	r2, [r7, #36]	; 0x24
 80115fe:	693a      	ldr	r2, [r7, #16]
 8011600:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	69db      	ldr	r3, [r3, #28]
 8011606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011608:	429a      	cmp	r2, r3
 801160a:	d3ba      	bcc.n	8011582 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011612:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	429a      	cmp	r2, r3
 801161a:	d803      	bhi.n	8011624 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161e:	2200      	movs	r2, #0
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	e1b6      	b.n	8011992 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011624:	2311      	movs	r3, #17
 8011626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801162a:	e1b2      	b.n	8011992 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	683a      	ldr	r2, [r7, #0]
 8011632:	429a      	cmp	r2, r3
 8011634:	d902      	bls.n	801163c <f_lseek+0x136>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	683a      	ldr	r2, [r7, #0]
 8011640:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	f000 81a4 	beq.w	8011992 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	3b01      	subs	r3, #1
 801164e:	4619      	mov	r1, r3
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f7fd ffd9 	bl	800f608 <clmt_clust>
 8011656:	4602      	mov	r2, r0
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801165c:	68ba      	ldr	r2, [r7, #8]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	69db      	ldr	r3, [r3, #28]
 8011662:	4619      	mov	r1, r3
 8011664:	4610      	mov	r0, r2
 8011666:	f7fd fd1f 	bl	800f0a8 <clust2sect>
 801166a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d109      	bne.n	8011686 <f_lseek+0x180>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2202      	movs	r2, #2
 8011676:	755a      	strb	r2, [r3, #21]
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	2102      	movs	r1, #2
 801167c:	4618      	mov	r0, r3
 801167e:	f7fd fae7 	bl	800ec50 <unlock_fs>
 8011682:	2302      	movs	r3, #2
 8011684:	e18e      	b.n	80119a4 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	3b01      	subs	r3, #1
 801168a:	0a5b      	lsrs	r3, r3, #9
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	8952      	ldrh	r2, [r2, #10]
 8011690:	3a01      	subs	r2, #1
 8011692:	4013      	ands	r3, r2
 8011694:	69ba      	ldr	r2, [r7, #24]
 8011696:	4413      	add	r3, r2
 8011698:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	699b      	ldr	r3, [r3, #24]
 801169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 8175 	beq.w	8011992 <f_lseek+0x48c>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6a1b      	ldr	r3, [r3, #32]
 80116ac:	69ba      	ldr	r2, [r7, #24]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	f000 816f 	beq.w	8011992 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	7d1b      	ldrb	r3, [r3, #20]
 80116b8:	b25b      	sxtb	r3, r3
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	da1d      	bge.n	80116fa <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	7858      	ldrb	r0, [r3, #1]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6a1a      	ldr	r2, [r3, #32]
 80116cc:	2301      	movs	r3, #1
 80116ce:	f7fd f96b 	bl	800e9a8 <disk_write>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d009      	beq.n	80116ec <f_lseek+0x1e6>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2201      	movs	r2, #1
 80116dc:	755a      	strb	r2, [r3, #21]
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	2101      	movs	r1, #1
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fd fab4 	bl	800ec50 <unlock_fs>
 80116e8:	2301      	movs	r3, #1
 80116ea:	e15b      	b.n	80119a4 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	7d1b      	ldrb	r3, [r3, #20]
 80116f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	7858      	ldrb	r0, [r3, #1]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011704:	2301      	movs	r3, #1
 8011706:	69ba      	ldr	r2, [r7, #24]
 8011708:	f7fd f92e 	bl	800e968 <disk_read>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d009      	beq.n	8011726 <f_lseek+0x220>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2201      	movs	r2, #1
 8011716:	755a      	strb	r2, [r3, #21]
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2101      	movs	r1, #1
 801171c:	4618      	mov	r0, r3
 801171e:	f7fd fa97 	bl	800ec50 <unlock_fs>
 8011722:	2301      	movs	r3, #1
 8011724:	e13e      	b.n	80119a4 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	69ba      	ldr	r2, [r7, #24]
 801172a:	621a      	str	r2, [r3, #32]
 801172c:	e131      	b.n	8011992 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	429a      	cmp	r2, r3
 8011736:	d908      	bls.n	801174a <f_lseek+0x244>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	7d1b      	ldrb	r3, [r3, #20]
 801173c:	f003 0302 	and.w	r3, r3, #2
 8011740:	2b00      	cmp	r3, #0
 8011742:	d102      	bne.n	801174a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	699b      	ldr	r3, [r3, #24]
 801174e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011750:	2300      	movs	r3, #0
 8011752:	637b      	str	r3, [r7, #52]	; 0x34
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011758:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	f000 80c0 	beq.w	80118e2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	895b      	ldrh	r3, [r3, #10]
 8011766:	025b      	lsls	r3, r3, #9
 8011768:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801176a:	6a3b      	ldr	r3, [r7, #32]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d01b      	beq.n	80117a8 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	1e5a      	subs	r2, r3, #1
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	fbb2 f2f3 	udiv	r2, r2, r3
 801177a:	6a3b      	ldr	r3, [r7, #32]
 801177c:	1e59      	subs	r1, r3, #1
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011784:	429a      	cmp	r2, r3
 8011786:	d30f      	bcc.n	80117a8 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011788:	6a3b      	ldr	r3, [r7, #32]
 801178a:	1e5a      	subs	r2, r3, #1
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	425b      	negs	r3, r3
 8011790:	401a      	ands	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	699b      	ldr	r3, [r3, #24]
 801179a:	683a      	ldr	r2, [r7, #0]
 801179c:	1ad3      	subs	r3, r2, r3
 801179e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	69db      	ldr	r3, [r3, #28]
 80117a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80117a6:	e02c      	b.n	8011802 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d123      	bne.n	80117fc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2100      	movs	r1, #0
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fd fe8d 	bl	800f4d8 <create_chain>
 80117be:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80117c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d109      	bne.n	80117da <f_lseek+0x2d4>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2202      	movs	r2, #2
 80117ca:	755a      	strb	r2, [r3, #21]
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	2102      	movs	r1, #2
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fd fa3d 	bl	800ec50 <unlock_fs>
 80117d6:	2302      	movs	r3, #2
 80117d8:	e0e4      	b.n	80119a4 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e0:	d109      	bne.n	80117f6 <f_lseek+0x2f0>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	755a      	strb	r2, [r3, #21]
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	2101      	movs	r1, #1
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7fd fa2f 	bl	800ec50 <unlock_fs>
 80117f2:	2301      	movs	r3, #1
 80117f4:	e0d6      	b.n	80119a4 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117fa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011800:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011804:	2b00      	cmp	r3, #0
 8011806:	d06c      	beq.n	80118e2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011808:	e044      	b.n	8011894 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801180a:	683a      	ldr	r2, [r7, #0]
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	603b      	str	r3, [r7, #0]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	699a      	ldr	r2, [r3, #24]
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	441a      	add	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	7d1b      	ldrb	r3, [r3, #20]
 8011822:	f003 0302 	and.w	r3, r3, #2
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00b      	beq.n	8011842 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801182e:	4618      	mov	r0, r3
 8011830:	f7fd fe52 	bl	800f4d8 <create_chain>
 8011834:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011838:	2b00      	cmp	r3, #0
 801183a:	d108      	bne.n	801184e <f_lseek+0x348>
							ofs = 0; break;
 801183c:	2300      	movs	r3, #0
 801183e:	603b      	str	r3, [r7, #0]
 8011840:	e02c      	b.n	801189c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011846:	4618      	mov	r0, r3
 8011848:	f7fd fc4d 	bl	800f0e6 <get_fat>
 801184c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801184e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011854:	d109      	bne.n	801186a <f_lseek+0x364>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2201      	movs	r2, #1
 801185a:	755a      	strb	r2, [r3, #21]
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	2101      	movs	r1, #1
 8011860:	4618      	mov	r0, r3
 8011862:	f7fd f9f5 	bl	800ec50 <unlock_fs>
 8011866:	2301      	movs	r3, #1
 8011868:	e09c      	b.n	80119a4 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186c:	2b01      	cmp	r3, #1
 801186e:	d904      	bls.n	801187a <f_lseek+0x374>
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	69db      	ldr	r3, [r3, #28]
 8011874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011876:	429a      	cmp	r2, r3
 8011878:	d309      	bcc.n	801188e <f_lseek+0x388>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2202      	movs	r2, #2
 801187e:	755a      	strb	r2, [r3, #21]
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2102      	movs	r1, #2
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd f9e3 	bl	800ec50 <unlock_fs>
 801188a:	2302      	movs	r3, #2
 801188c:	e08a      	b.n	80119a4 <f_lseek+0x49e>
					fp->clust = clst;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011892:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011894:	683a      	ldr	r2, [r7, #0]
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	429a      	cmp	r2, r3
 801189a:	d8b6      	bhi.n	801180a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	699a      	ldr	r2, [r3, #24]
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	441a      	add	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d017      	beq.n	80118e2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fd fbf6 	bl	800f0a8 <clust2sect>
 80118bc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80118be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d109      	bne.n	80118d8 <f_lseek+0x3d2>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2202      	movs	r2, #2
 80118c8:	755a      	strb	r2, [r3, #21]
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	2102      	movs	r1, #2
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fd f9be 	bl	800ec50 <unlock_fs>
 80118d4:	2302      	movs	r3, #2
 80118d6:	e065      	b.n	80119a4 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	0a5b      	lsrs	r3, r3, #9
 80118dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118de:	4413      	add	r3, r2
 80118e0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	699a      	ldr	r2, [r3, #24]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	68db      	ldr	r3, [r3, #12]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d90a      	bls.n	8011904 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	699a      	ldr	r2, [r3, #24]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	7d1b      	ldrb	r3, [r3, #20]
 80118fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118fe:	b2da      	uxtb	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	699b      	ldr	r3, [r3, #24]
 8011908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801190c:	2b00      	cmp	r3, #0
 801190e:	d040      	beq.n	8011992 <f_lseek+0x48c>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a1b      	ldr	r3, [r3, #32]
 8011914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011916:	429a      	cmp	r2, r3
 8011918:	d03b      	beq.n	8011992 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	7d1b      	ldrb	r3, [r3, #20]
 801191e:	b25b      	sxtb	r3, r3
 8011920:	2b00      	cmp	r3, #0
 8011922:	da1d      	bge.n	8011960 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	7858      	ldrb	r0, [r3, #1]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6a1a      	ldr	r2, [r3, #32]
 8011932:	2301      	movs	r3, #1
 8011934:	f7fd f838 	bl	800e9a8 <disk_write>
 8011938:	4603      	mov	r3, r0
 801193a:	2b00      	cmp	r3, #0
 801193c:	d009      	beq.n	8011952 <f_lseek+0x44c>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2201      	movs	r2, #1
 8011942:	755a      	strb	r2, [r3, #21]
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	2101      	movs	r1, #1
 8011948:	4618      	mov	r0, r3
 801194a:	f7fd f981 	bl	800ec50 <unlock_fs>
 801194e:	2301      	movs	r3, #1
 8011950:	e028      	b.n	80119a4 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	7d1b      	ldrb	r3, [r3, #20]
 8011956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801195a:	b2da      	uxtb	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	7858      	ldrb	r0, [r3, #1]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801196a:	2301      	movs	r3, #1
 801196c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801196e:	f7fc fffb 	bl	800e968 <disk_read>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d009      	beq.n	801198c <f_lseek+0x486>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2201      	movs	r2, #1
 801197c:	755a      	strb	r2, [r3, #21]
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	2101      	movs	r1, #1
 8011982:	4618      	mov	r0, r3
 8011984:	f7fd f964 	bl	800ec50 <unlock_fs>
 8011988:	2301      	movs	r3, #1
 801198a:	e00b      	b.n	80119a4 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011990:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011998:	4611      	mov	r1, r2
 801199a:	4618      	mov	r0, r3
 801199c:	f7fd f958 	bl	800ec50 <unlock_fs>
 80119a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3740      	adds	r7, #64	; 0x40
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}

080119ac <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b084      	sub	sp, #16
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	460b      	mov	r3, r1
 80119b6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80119b8:	78fb      	ldrb	r3, [r7, #3]
 80119ba:	2b0a      	cmp	r3, #10
 80119bc:	d103      	bne.n	80119c6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80119be:	210d      	movs	r1, #13
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7ff fff3 	bl	80119ac <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	db25      	blt.n	8011a1e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	1c5a      	adds	r2, r3, #1
 80119d6:	60fa      	str	r2, [r7, #12]
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	4413      	add	r3, r2
 80119dc:	78fa      	ldrb	r2, [r7, #3]
 80119de:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b3c      	cmp	r3, #60	; 0x3c
 80119e4:	dd12      	ble.n	8011a0c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6818      	ldr	r0, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f103 010c 	add.w	r1, r3, #12
 80119f0:	68fa      	ldr	r2, [r7, #12]
 80119f2:	f107 0308 	add.w	r3, r7, #8
 80119f6:	f7ff fb59 	bl	80110ac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80119fa:	68ba      	ldr	r2, [r7, #8]
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d101      	bne.n	8011a06 <putc_bfd+0x5a>
 8011a02:	2300      	movs	r3, #0
 8011a04:	e001      	b.n	8011a0a <putc_bfd+0x5e>
 8011a06:	f04f 33ff 	mov.w	r3, #4294967295
 8011a0a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	68fa      	ldr	r2, [r7, #12]
 8011a10:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	1c5a      	adds	r2, r3, #1
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	609a      	str	r2, [r3, #8]
 8011a1c:	e000      	b.n	8011a20 <putc_bfd+0x74>
	if (i < 0) return;
 8011a1e:	bf00      	nop
}
 8011a20:	3710      	adds	r7, #16
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b084      	sub	sp, #16
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	db16      	blt.n	8011a64 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6818      	ldr	r0, [r3, #0]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f103 010c 	add.w	r1, r3, #12
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	461a      	mov	r2, r3
 8011a46:	f107 030c 	add.w	r3, r7, #12
 8011a4a:	f7ff fb2f 	bl	80110ac <f_write>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d107      	bne.n	8011a64 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d102      	bne.n	8011a64 <putc_flush+0x3e>
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	e001      	b.n	8011a68 <putc_flush+0x42>
	return EOF;
 8011a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	683a      	ldr	r2, [r7, #0]
 8011a7e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	605a      	str	r2, [r3, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	685a      	ldr	r2, [r3, #4]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	609a      	str	r2, [r3, #8]
}
 8011a8e:	bf00      	nop
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b096      	sub	sp, #88	; 0x58
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8011aa4:	f107 030c 	add.w	r3, r7, #12
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7ff ffe0 	bl	8011a70 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8011ab0:	e009      	b.n	8011ac6 <f_puts+0x2c>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	1c5a      	adds	r2, r3, #1
 8011ab6:	607a      	str	r2, [r7, #4]
 8011ab8:	781a      	ldrb	r2, [r3, #0]
 8011aba:	f107 030c 	add.w	r3, r7, #12
 8011abe:	4611      	mov	r1, r2
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7ff ff73 	bl	80119ac <putc_bfd>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1f1      	bne.n	8011ab2 <f_puts+0x18>
	return putc_flush(&pb);
 8011ace:	f107 030c 	add.w	r3, r7, #12
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7ff ffa7 	bl	8011a26 <putc_flush>
 8011ad8:	4603      	mov	r3, r0
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3758      	adds	r7, #88	; 0x58
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
	...

08011ae4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b087      	sub	sp, #28
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	4613      	mov	r3, r2
 8011af0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011af2:	2301      	movs	r3, #1
 8011af4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011af6:	2300      	movs	r3, #0
 8011af8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011afa:	4b1f      	ldr	r3, [pc, #124]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011afc:	7a5b      	ldrb	r3, [r3, #9]
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d131      	bne.n	8011b68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011b04:	4b1c      	ldr	r3, [pc, #112]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b06:	7a5b      	ldrb	r3, [r3, #9]
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	4b1a      	ldr	r3, [pc, #104]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b0e:	2100      	movs	r1, #0
 8011b10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b12:	4b19      	ldr	r3, [pc, #100]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b14:	7a5b      	ldrb	r3, [r3, #9]
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	4a17      	ldr	r2, [pc, #92]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	68fa      	ldr	r2, [r7, #12]
 8011b20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b22:	4b15      	ldr	r3, [pc, #84]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b24:	7a5b      	ldrb	r3, [r3, #9]
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	461a      	mov	r2, r3
 8011b2a:	4b13      	ldr	r3, [pc, #76]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b2c:	4413      	add	r3, r2
 8011b2e:	79fa      	ldrb	r2, [r7, #7]
 8011b30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011b32:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b34:	7a5b      	ldrb	r3, [r3, #9]
 8011b36:	b2db      	uxtb	r3, r3
 8011b38:	1c5a      	adds	r2, r3, #1
 8011b3a:	b2d1      	uxtb	r1, r2
 8011b3c:	4a0e      	ldr	r2, [pc, #56]	; (8011b78 <FATFS_LinkDriverEx+0x94>)
 8011b3e:	7251      	strb	r1, [r2, #9]
 8011b40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011b42:	7dbb      	ldrb	r3, [r7, #22]
 8011b44:	3330      	adds	r3, #48	; 0x30
 8011b46:	b2da      	uxtb	r2, r3
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	3301      	adds	r3, #1
 8011b50:	223a      	movs	r2, #58	; 0x3a
 8011b52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	3302      	adds	r3, #2
 8011b58:	222f      	movs	r2, #47	; 0x2f
 8011b5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	3303      	adds	r3, #3
 8011b60:	2200      	movs	r2, #0
 8011b62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011b64:	2300      	movs	r3, #0
 8011b66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	371c      	adds	r7, #28
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	20000488 	.word	0x20000488

08011b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011b86:	2200      	movs	r2, #0
 8011b88:	6839      	ldr	r1, [r7, #0]
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7ff ffaa 	bl	8011ae4 <FATFS_LinkDriverEx>
 8011b90:	4603      	mov	r3, r0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	6039      	str	r1, [r7, #0]
 8011ba6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011ba8:	88fb      	ldrh	r3, [r7, #6]
 8011baa:	2b7f      	cmp	r3, #127	; 0x7f
 8011bac:	d802      	bhi.n	8011bb4 <ff_convert+0x18>
		c = chr;
 8011bae:	88fb      	ldrh	r3, [r7, #6]
 8011bb0:	81fb      	strh	r3, [r7, #14]
 8011bb2:	e025      	b.n	8011c00 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d00b      	beq.n	8011bd2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011bba:	88fb      	ldrh	r3, [r7, #6]
 8011bbc:	2bff      	cmp	r3, #255	; 0xff
 8011bbe:	d805      	bhi.n	8011bcc <ff_convert+0x30>
 8011bc0:	88fb      	ldrh	r3, [r7, #6]
 8011bc2:	3b80      	subs	r3, #128	; 0x80
 8011bc4:	4a12      	ldr	r2, [pc, #72]	; (8011c10 <ff_convert+0x74>)
 8011bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bca:	e000      	b.n	8011bce <ff_convert+0x32>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	81fb      	strh	r3, [r7, #14]
 8011bd0:	e016      	b.n	8011c00 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	81fb      	strh	r3, [r7, #14]
 8011bd6:	e009      	b.n	8011bec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011bd8:	89fb      	ldrh	r3, [r7, #14]
 8011bda:	4a0d      	ldr	r2, [pc, #52]	; (8011c10 <ff_convert+0x74>)
 8011bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011be0:	88fa      	ldrh	r2, [r7, #6]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d006      	beq.n	8011bf4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011be6:	89fb      	ldrh	r3, [r7, #14]
 8011be8:	3301      	adds	r3, #1
 8011bea:	81fb      	strh	r3, [r7, #14]
 8011bec:	89fb      	ldrh	r3, [r7, #14]
 8011bee:	2b7f      	cmp	r3, #127	; 0x7f
 8011bf0:	d9f2      	bls.n	8011bd8 <ff_convert+0x3c>
 8011bf2:	e000      	b.n	8011bf6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011bf4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011bf6:	89fb      	ldrh	r3, [r7, #14]
 8011bf8:	3380      	adds	r3, #128	; 0x80
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011c00:	89fb      	ldrh	r3, [r7, #14]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3714      	adds	r7, #20
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop
 8011c10:	08015c8c 	.word	0x08015c8c

08011c14 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011c14:	b480      	push	{r7}
 8011c16:	b087      	sub	sp, #28
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011c1e:	88fb      	ldrh	r3, [r7, #6]
 8011c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c24:	d201      	bcs.n	8011c2a <ff_wtoupper+0x16>
 8011c26:	4b3e      	ldr	r3, [pc, #248]	; (8011d20 <ff_wtoupper+0x10c>)
 8011c28:	e000      	b.n	8011c2c <ff_wtoupper+0x18>
 8011c2a:	4b3e      	ldr	r3, [pc, #248]	; (8011d24 <ff_wtoupper+0x110>)
 8011c2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	1c9a      	adds	r2, r3, #2
 8011c32:	617a      	str	r2, [r7, #20]
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011c38:	8a7b      	ldrh	r3, [r7, #18]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d068      	beq.n	8011d10 <ff_wtoupper+0xfc>
 8011c3e:	88fa      	ldrh	r2, [r7, #6]
 8011c40:	8a7b      	ldrh	r3, [r7, #18]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d364      	bcc.n	8011d10 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	1c9a      	adds	r2, r3, #2
 8011c4a:	617a      	str	r2, [r7, #20]
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	823b      	strh	r3, [r7, #16]
 8011c50:	8a3b      	ldrh	r3, [r7, #16]
 8011c52:	0a1b      	lsrs	r3, r3, #8
 8011c54:	81fb      	strh	r3, [r7, #14]
 8011c56:	8a3b      	ldrh	r3, [r7, #16]
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011c5c:	88fa      	ldrh	r2, [r7, #6]
 8011c5e:	8a79      	ldrh	r1, [r7, #18]
 8011c60:	8a3b      	ldrh	r3, [r7, #16]
 8011c62:	440b      	add	r3, r1
 8011c64:	429a      	cmp	r2, r3
 8011c66:	da49      	bge.n	8011cfc <ff_wtoupper+0xe8>
			switch (cmd) {
 8011c68:	89fb      	ldrh	r3, [r7, #14]
 8011c6a:	2b08      	cmp	r3, #8
 8011c6c:	d84f      	bhi.n	8011d0e <ff_wtoupper+0xfa>
 8011c6e:	a201      	add	r2, pc, #4	; (adr r2, 8011c74 <ff_wtoupper+0x60>)
 8011c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c74:	08011c99 	.word	0x08011c99
 8011c78:	08011cab 	.word	0x08011cab
 8011c7c:	08011cc1 	.word	0x08011cc1
 8011c80:	08011cc9 	.word	0x08011cc9
 8011c84:	08011cd1 	.word	0x08011cd1
 8011c88:	08011cd9 	.word	0x08011cd9
 8011c8c:	08011ce1 	.word	0x08011ce1
 8011c90:	08011ce9 	.word	0x08011ce9
 8011c94:	08011cf1 	.word	0x08011cf1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011c98:	88fa      	ldrh	r2, [r7, #6]
 8011c9a:	8a7b      	ldrh	r3, [r7, #18]
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	005b      	lsls	r3, r3, #1
 8011ca0:	697a      	ldr	r2, [r7, #20]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	881b      	ldrh	r3, [r3, #0]
 8011ca6:	80fb      	strh	r3, [r7, #6]
 8011ca8:	e027      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011caa:	88fa      	ldrh	r2, [r7, #6]
 8011cac:	8a7b      	ldrh	r3, [r7, #18]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	f003 0301 	and.w	r3, r3, #1
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	88fa      	ldrh	r2, [r7, #6]
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	80fb      	strh	r3, [r7, #6]
 8011cbe:	e01c      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011cc0:	88fb      	ldrh	r3, [r7, #6]
 8011cc2:	3b10      	subs	r3, #16
 8011cc4:	80fb      	strh	r3, [r7, #6]
 8011cc6:	e018      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011cc8:	88fb      	ldrh	r3, [r7, #6]
 8011cca:	3b20      	subs	r3, #32
 8011ccc:	80fb      	strh	r3, [r7, #6]
 8011cce:	e014      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011cd0:	88fb      	ldrh	r3, [r7, #6]
 8011cd2:	3b30      	subs	r3, #48	; 0x30
 8011cd4:	80fb      	strh	r3, [r7, #6]
 8011cd6:	e010      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011cd8:	88fb      	ldrh	r3, [r7, #6]
 8011cda:	3b1a      	subs	r3, #26
 8011cdc:	80fb      	strh	r3, [r7, #6]
 8011cde:	e00c      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011ce0:	88fb      	ldrh	r3, [r7, #6]
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	80fb      	strh	r3, [r7, #6]
 8011ce6:	e008      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011ce8:	88fb      	ldrh	r3, [r7, #6]
 8011cea:	3b50      	subs	r3, #80	; 0x50
 8011cec:	80fb      	strh	r3, [r7, #6]
 8011cee:	e004      	b.n	8011cfa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011cf0:	88fb      	ldrh	r3, [r7, #6]
 8011cf2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011cf6:	80fb      	strh	r3, [r7, #6]
 8011cf8:	bf00      	nop
			}
			break;
 8011cfa:	e008      	b.n	8011d0e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011cfc:	89fb      	ldrh	r3, [r7, #14]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d195      	bne.n	8011c2e <ff_wtoupper+0x1a>
 8011d02:	8a3b      	ldrh	r3, [r7, #16]
 8011d04:	005b      	lsls	r3, r3, #1
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	4413      	add	r3, r2
 8011d0a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011d0c:	e78f      	b.n	8011c2e <ff_wtoupper+0x1a>
			break;
 8011d0e:	bf00      	nop
	}

	return chr;
 8011d10:	88fb      	ldrh	r3, [r7, #6]
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	371c      	adds	r7, #28
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	08015d8c 	.word	0x08015d8c
 8011d24:	08015f80 	.word	0x08015f80

08011d28 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	6039      	str	r1, [r7, #0]
 8011d32:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011d34:	2300      	movs	r3, #0
 8011d36:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011d38:	f107 0308 	add.w	r3, r7, #8
 8011d3c:	2101      	movs	r1, #1
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f000 f8c4 	bl	8011ecc <osSemaphoreCreate>
 8011d44:	4602      	mov	r2, r0
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	bf14      	ite	ne
 8011d52:	2301      	movne	r3, #1
 8011d54:	2300      	moveq	r3, #0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	60fb      	str	r3, [r7, #12]

    return ret;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 f94f 	bl	8012010 <osSemaphoreDelete>
#endif
    return 1;
 8011d72:	2301      	movs	r3, #1
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3708      	adds	r7, #8
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011d88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 f8bb 	bl	8011f08 <osSemaphoreWait>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d101      	bne.n	8011d9c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011d98:	2301      	movs	r3, #1
 8011d9a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3710      	adds	r7, #16
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b082      	sub	sp, #8
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f8f8 	bl	8011fa4 <osSemaphoreRelease>
#endif
}
 8011db4:	bf00      	nop
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b085      	sub	sp, #20
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011dce:	2b84      	cmp	r3, #132	; 0x84
 8011dd0:	d005      	beq.n	8011dde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	4413      	add	r3, r2
 8011dda:	3303      	adds	r3, #3
 8011ddc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011dde:	68fb      	ldr	r3, [r7, #12]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3714      	adds	r7, #20
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011df2:	f3ef 8305 	mrs	r3, IPSR
 8011df6:	607b      	str	r3, [r7, #4]
  return(result);
 8011df8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	bf14      	ite	ne
 8011dfe:	2301      	movne	r3, #1
 8011e00:	2300      	moveq	r3, #0
 8011e02:	b2db      	uxtb	r3, r3
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011e14:	f001 fc70 	bl	80136f8 <vTaskStartScheduler>
  
  return osOK;
 8011e18:	2300      	movs	r3, #0
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011e22:	f002 f89d 	bl	8013f60 <xTaskGetSchedulerState>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d101      	bne.n	8011e30 <osKernelRunning+0x12>
    return 0;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	e000      	b.n	8011e32 <osKernelRunning+0x14>
  else
    return 1;
 8011e30:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011e3a:	f7ff ffd7 	bl	8011dec <inHandlerMode>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d003      	beq.n	8011e4c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011e44:	f001 fd62 	bl	801390c <xTaskGetTickCountFromISR>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	e002      	b.n	8011e52 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011e4c:	f001 fd4e 	bl	80138ec <xTaskGetTickCount>
 8011e50:	4603      	mov	r3, r0
  }
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e58:	b087      	sub	sp, #28
 8011e5a:	af02      	add	r7, sp, #8
 8011e5c:	6078      	str	r0, [r7, #4]
 8011e5e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	685c      	ldr	r4, [r3, #4]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011e6c:	b29e      	uxth	r6, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7ff ffa1 	bl	8011dbc <makeFreeRtosPriority>
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	f107 030c 	add.w	r3, r7, #12
 8011e80:	9301      	str	r3, [sp, #4]
 8011e82:	9200      	str	r2, [sp, #0]
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	4632      	mov	r2, r6
 8011e88:	4629      	mov	r1, r5
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f001 f90e 	bl	80130ac <xTaskCreate>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d001      	beq.n	8011e9a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011e96:	2300      	movs	r3, #0
 8011e98:	e000      	b.n	8011e9c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3714      	adds	r7, #20
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ea4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d001      	beq.n	8011eba <osDelay+0x16>
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	e000      	b.n	8011ebc <osDelay+0x18>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f001 fac5 	bl	801344c <vTaskDelay>
  
  return osOK;
 8011ec2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3710      	adds	r7, #16
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}

08011ecc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	d110      	bne.n	8011efe <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011edc:	2203      	movs	r2, #3
 8011ede:	2100      	movs	r1, #0
 8011ee0:	2001      	movs	r0, #1
 8011ee2:	f000 fa8b 	bl	80123fc <xQueueGenericCreate>
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d005      	beq.n	8011efa <osSemaphoreCreate+0x2e>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 fad7 	bl	80124a8 <xQueueGenericSend>
    return sema;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	e000      	b.n	8011f00 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8011efe:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011f12:	2300      	movs	r3, #0
 8011f14:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d101      	bne.n	8011f20 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011f1c:	2380      	movs	r3, #128	; 0x80
 8011f1e:	e03a      	b.n	8011f96 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011f20:	2300      	movs	r3, #0
 8011f22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f2a:	d103      	bne.n	8011f34 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	e009      	b.n	8011f48 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d006      	beq.n	8011f48 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d101      	bne.n	8011f48 <osSemaphoreWait+0x40>
      ticks = 1;
 8011f44:	2301      	movs	r3, #1
 8011f46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011f48:	f7ff ff50 	bl	8011dec <inHandlerMode>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d017      	beq.n	8011f82 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011f52:	f107 0308 	add.w	r3, r7, #8
 8011f56:	461a      	mov	r2, r3
 8011f58:	2100      	movs	r1, #0
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 feb6 	bl	8012ccc <xQueueReceiveFromISR>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d001      	beq.n	8011f6a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011f66:	23ff      	movs	r3, #255	; 0xff
 8011f68:	e015      	b.n	8011f96 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d011      	beq.n	8011f94 <osSemaphoreWait+0x8c>
 8011f70:	4b0b      	ldr	r3, [pc, #44]	; (8011fa0 <osSemaphoreWait+0x98>)
 8011f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	f3bf 8f4f 	dsb	sy
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	e008      	b.n	8011f94 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011f82:	68f9      	ldr	r1, [r7, #12]
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 fd95 	bl	8012ab4 <xQueueSemaphoreTake>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d001      	beq.n	8011f94 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011f90:	23ff      	movs	r3, #255	; 0xff
 8011f92:	e000      	b.n	8011f96 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011f94:	2300      	movs	r3, #0
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	e000ed04 	.word	0xe000ed04

08011fa4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011fac:	2300      	movs	r3, #0
 8011fae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011fb4:	f7ff ff1a 	bl	8011dec <inHandlerMode>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d016      	beq.n	8011fec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011fbe:	f107 0308 	add.w	r3, r7, #8
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fc08 	bl	80127da <xQueueGiveFromISR>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d001      	beq.n	8011fd4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011fd0:	23ff      	movs	r3, #255	; 0xff
 8011fd2:	e017      	b.n	8012004 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d013      	beq.n	8012002 <osSemaphoreRelease+0x5e>
 8011fda:	4b0c      	ldr	r3, [pc, #48]	; (801200c <osSemaphoreRelease+0x68>)
 8011fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fe0:	601a      	str	r2, [r3, #0]
 8011fe2:	f3bf 8f4f 	dsb	sy
 8011fe6:	f3bf 8f6f 	isb	sy
 8011fea:	e00a      	b.n	8012002 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011fec:	2300      	movs	r3, #0
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f000 fa58 	bl	80124a8 <xQueueGenericSend>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d001      	beq.n	8012002 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011ffe:	23ff      	movs	r3, #255	; 0xff
 8012000:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012002:	68fb      	ldr	r3, [r7, #12]
}
 8012004:	4618      	mov	r0, r3
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	e000ed04 	.word	0xe000ed04

08012010 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012018:	f7ff fee8 	bl	8011dec <inHandlerMode>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012022:	2382      	movs	r3, #130	; 0x82
 8012024:	e003      	b.n	801202e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 fed0 	bl	8012dcc <vQueueDelete>

  return osOK; 
 801202c:	2300      	movs	r3, #0
}
 801202e:	4618      	mov	r0, r3
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b082      	sub	sp, #8
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
 801203e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6818      	ldr	r0, [r3, #0]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	2200      	movs	r2, #0
 801204a:	4619      	mov	r1, r3
 801204c:	f000 f9d6 	bl	80123fc <xQueueGenericCreate>
 8012050:	4603      	mov	r3, r0
#endif
}
 8012052:	4618      	mov	r0, r3
 8012054:	3708      	adds	r7, #8
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b086      	sub	sp, #24
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012068:	2300      	movs	r3, #0
 801206a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <osMessagePut+0x1e>
    ticks = 1;
 8012076:	2301      	movs	r3, #1
 8012078:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801207a:	f7ff feb7 	bl	8011dec <inHandlerMode>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d018      	beq.n	80120b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012084:	f107 0210 	add.w	r2, r7, #16
 8012088:	f107 0108 	add.w	r1, r7, #8
 801208c:	2300      	movs	r3, #0
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f000 fb08 	bl	80126a4 <xQueueGenericSendFromISR>
 8012094:	4603      	mov	r3, r0
 8012096:	2b01      	cmp	r3, #1
 8012098:	d001      	beq.n	801209e <osMessagePut+0x42>
      return osErrorOS;
 801209a:	23ff      	movs	r3, #255	; 0xff
 801209c:	e018      	b.n	80120d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d014      	beq.n	80120ce <osMessagePut+0x72>
 80120a4:	4b0c      	ldr	r3, [pc, #48]	; (80120d8 <osMessagePut+0x7c>)
 80120a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	f3bf 8f6f 	isb	sy
 80120b4:	e00b      	b.n	80120ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80120b6:	f107 0108 	add.w	r1, r7, #8
 80120ba:	2300      	movs	r3, #0
 80120bc:	697a      	ldr	r2, [r7, #20]
 80120be:	68f8      	ldr	r0, [r7, #12]
 80120c0:	f000 f9f2 	bl	80124a8 <xQueueGenericSend>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d001      	beq.n	80120ce <osMessagePut+0x72>
      return osErrorOS;
 80120ca:	23ff      	movs	r3, #255	; 0xff
 80120cc:	e000      	b.n	80120d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3718      	adds	r7, #24
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	e000ed04 	.word	0xe000ed04

080120dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80120dc:	b590      	push	{r4, r7, lr}
 80120de:	b08b      	sub	sp, #44	; 0x2c
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80120ec:	2300      	movs	r3, #0
 80120ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d10a      	bne.n	801210c <osMessageGet+0x30>
    event.status = osErrorParameter;
 80120f6:	2380      	movs	r3, #128	; 0x80
 80120f8:	617b      	str	r3, [r7, #20]
    return event;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	461c      	mov	r4, r3
 80120fe:	f107 0314 	add.w	r3, r7, #20
 8012102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801210a:	e054      	b.n	80121b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801210c:	2300      	movs	r3, #0
 801210e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801211a:	d103      	bne.n	8012124 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801211c:	f04f 33ff 	mov.w	r3, #4294967295
 8012120:	627b      	str	r3, [r7, #36]	; 0x24
 8012122:	e009      	b.n	8012138 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d006      	beq.n	8012138 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <osMessageGet+0x5c>
      ticks = 1;
 8012134:	2301      	movs	r3, #1
 8012136:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012138:	f7ff fe58 	bl	8011dec <inHandlerMode>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d01c      	beq.n	801217c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012142:	f107 0220 	add.w	r2, r7, #32
 8012146:	f107 0314 	add.w	r3, r7, #20
 801214a:	3304      	adds	r3, #4
 801214c:	4619      	mov	r1, r3
 801214e:	68b8      	ldr	r0, [r7, #8]
 8012150:	f000 fdbc 	bl	8012ccc <xQueueReceiveFromISR>
 8012154:	4603      	mov	r3, r0
 8012156:	2b01      	cmp	r3, #1
 8012158:	d102      	bne.n	8012160 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801215a:	2310      	movs	r3, #16
 801215c:	617b      	str	r3, [r7, #20]
 801215e:	e001      	b.n	8012164 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012160:	2300      	movs	r3, #0
 8012162:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012164:	6a3b      	ldr	r3, [r7, #32]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d01d      	beq.n	80121a6 <osMessageGet+0xca>
 801216a:	4b15      	ldr	r3, [pc, #84]	; (80121c0 <osMessageGet+0xe4>)
 801216c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	f3bf 8f6f 	isb	sy
 801217a:	e014      	b.n	80121a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801217c:	f107 0314 	add.w	r3, r7, #20
 8012180:	3304      	adds	r3, #4
 8012182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012184:	4619      	mov	r1, r3
 8012186:	68b8      	ldr	r0, [r7, #8]
 8012188:	f000 fbb4 	bl	80128f4 <xQueueReceive>
 801218c:	4603      	mov	r3, r0
 801218e:	2b01      	cmp	r3, #1
 8012190:	d102      	bne.n	8012198 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012192:	2310      	movs	r3, #16
 8012194:	617b      	str	r3, [r7, #20]
 8012196:	e006      	b.n	80121a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219a:	2b00      	cmp	r3, #0
 801219c:	d101      	bne.n	80121a2 <osMessageGet+0xc6>
 801219e:	2300      	movs	r3, #0
 80121a0:	e000      	b.n	80121a4 <osMessageGet+0xc8>
 80121a2:	2340      	movs	r3, #64	; 0x40
 80121a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	461c      	mov	r4, r3
 80121aa:	f107 0314 	add.w	r3, r7, #20
 80121ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80121b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	372c      	adds	r7, #44	; 0x2c
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd90      	pop	{r4, r7, pc}
 80121be:	bf00      	nop
 80121c0:	e000ed04 	.word	0xe000ed04

080121c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f103 0208 	add.w	r2, r3, #8
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f04f 32ff 	mov.w	r2, #4294967295
 80121dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f103 0208 	add.w	r2, r3, #8
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f103 0208 	add.w	r2, r3, #8
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2200      	movs	r2, #0
 80121f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80121f8:	bf00      	nop
 80121fa:	370c      	adds	r7, #12
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2200      	movs	r2, #0
 8012210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012212:	bf00      	nop
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr

0801221e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801221e:	b480      	push	{r7}
 8012220:	b085      	sub	sp, #20
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
 8012226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	689a      	ldr	r2, [r3, #8]
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	689b      	ldr	r3, [r3, #8]
 8012240:	683a      	ldr	r2, [r7, #0]
 8012242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	1c5a      	adds	r2, r3, #1
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	601a      	str	r2, [r3, #0]
}
 801225a:	bf00      	nop
 801225c:	3714      	adds	r7, #20
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr

08012266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012266:	b480      	push	{r7}
 8012268:	b085      	sub	sp, #20
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227c:	d103      	bne.n	8012286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	691b      	ldr	r3, [r3, #16]
 8012282:	60fb      	str	r3, [r7, #12]
 8012284:	e00c      	b.n	80122a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	3308      	adds	r3, #8
 801228a:	60fb      	str	r3, [r7, #12]
 801228c:	e002      	b.n	8012294 <vListInsert+0x2e>
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	60fb      	str	r3, [r7, #12]
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	68ba      	ldr	r2, [r7, #8]
 801229c:	429a      	cmp	r2, r3
 801229e:	d2f6      	bcs.n	801228e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	685a      	ldr	r2, [r3, #4]
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	683a      	ldr	r2, [r7, #0]
 80122ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	68fa      	ldr	r2, [r7, #12]
 80122b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	683a      	ldr	r2, [r7, #0]
 80122ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	1c5a      	adds	r2, r3, #1
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	601a      	str	r2, [r3, #0]
}
 80122cc:	bf00      	nop
 80122ce:	3714      	adds	r7, #20
 80122d0:	46bd      	mov	sp, r7
 80122d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d6:	4770      	bx	lr

080122d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80122d8:	b480      	push	{r7}
 80122da:	b085      	sub	sp, #20
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	6892      	ldr	r2, [r2, #8]
 80122ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	6852      	ldr	r2, [r2, #4]
 80122f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	429a      	cmp	r2, r3
 8012302:	d103      	bne.n	801230c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	689a      	ldr	r2, [r3, #8]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	1e5a      	subs	r2, r3, #1
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
}
 8012320:	4618      	mov	r0, r3
 8012322:	3714      	adds	r7, #20
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr

0801232c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d10a      	bne.n	8012356 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012344:	f383 8811 	msr	BASEPRI, r3
 8012348:	f3bf 8f6f 	isb	sy
 801234c:	f3bf 8f4f 	dsb	sy
 8012350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012352:	bf00      	nop
 8012354:	e7fe      	b.n	8012354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012356:	f002 f955 	bl	8014604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012362:	68f9      	ldr	r1, [r7, #12]
 8012364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012366:	fb01 f303 	mul.w	r3, r1, r3
 801236a:	441a      	add	r2, r3
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2200      	movs	r2, #0
 8012374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012386:	3b01      	subs	r3, #1
 8012388:	68f9      	ldr	r1, [r7, #12]
 801238a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801238c:	fb01 f303 	mul.w	r3, r1, r3
 8012390:	441a      	add	r2, r3
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	22ff      	movs	r2, #255	; 0xff
 801239a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	22ff      	movs	r2, #255	; 0xff
 80123a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d114      	bne.n	80123d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d01a      	beq.n	80123ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	3310      	adds	r3, #16
 80123b8:	4618      	mov	r0, r3
 80123ba:	f001 fbf7 	bl	8013bac <xTaskRemoveFromEventList>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d012      	beq.n	80123ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80123c4:	4b0c      	ldr	r3, [pc, #48]	; (80123f8 <xQueueGenericReset+0xcc>)
 80123c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ca:	601a      	str	r2, [r3, #0]
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	e009      	b.n	80123ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	3310      	adds	r3, #16
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fef2 	bl	80121c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	3324      	adds	r3, #36	; 0x24
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7ff feed 	bl	80121c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80123ea:	f002 f93b 	bl	8014664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80123ee:	2301      	movs	r3, #1
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	e000ed04 	.word	0xe000ed04

080123fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b08a      	sub	sp, #40	; 0x28
 8012400:	af02      	add	r7, sp, #8
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	4613      	mov	r3, r2
 8012408:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d10a      	bne.n	8012426 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012414:	f383 8811 	msr	BASEPRI, r3
 8012418:	f3bf 8f6f 	isb	sy
 801241c:	f3bf 8f4f 	dsb	sy
 8012420:	613b      	str	r3, [r7, #16]
}
 8012422:	bf00      	nop
 8012424:	e7fe      	b.n	8012424 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	fb02 f303 	mul.w	r3, r2, r3
 801242e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	3348      	adds	r3, #72	; 0x48
 8012434:	4618      	mov	r0, r3
 8012436:	f002 fa07 	bl	8014848 <pvPortMalloc>
 801243a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00d      	beq.n	801245e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	3348      	adds	r3, #72	; 0x48
 801244a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801244c:	79fa      	ldrb	r2, [r7, #7]
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	4613      	mov	r3, r2
 8012454:	697a      	ldr	r2, [r7, #20]
 8012456:	68b9      	ldr	r1, [r7, #8]
 8012458:	68f8      	ldr	r0, [r7, #12]
 801245a:	f000 f805 	bl	8012468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801245e:	69bb      	ldr	r3, [r7, #24]
	}
 8012460:	4618      	mov	r0, r3
 8012462:	3720      	adds	r7, #32
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
 8012474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d103      	bne.n	8012484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	69ba      	ldr	r2, [r7, #24]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	e002      	b.n	801248a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	68fa      	ldr	r2, [r7, #12]
 801248e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012496:	2101      	movs	r1, #1
 8012498:	69b8      	ldr	r0, [r7, #24]
 801249a:	f7ff ff47 	bl	801232c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801249e:	bf00      	nop
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
	...

080124a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b08e      	sub	sp, #56	; 0x38
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
 80124b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80124b6:	2300      	movs	r3, #0
 80124b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80124be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10a      	bne.n	80124da <xQueueGenericSend+0x32>
	__asm volatile
 80124c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80124d6:	bf00      	nop
 80124d8:	e7fe      	b.n	80124d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d103      	bne.n	80124e8 <xQueueGenericSend+0x40>
 80124e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d101      	bne.n	80124ec <xQueueGenericSend+0x44>
 80124e8:	2301      	movs	r3, #1
 80124ea:	e000      	b.n	80124ee <xQueueGenericSend+0x46>
 80124ec:	2300      	movs	r3, #0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d10a      	bne.n	8012508 <xQueueGenericSend+0x60>
	__asm volatile
 80124f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f6:	f383 8811 	msr	BASEPRI, r3
 80124fa:	f3bf 8f6f 	isb	sy
 80124fe:	f3bf 8f4f 	dsb	sy
 8012502:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012504:	bf00      	nop
 8012506:	e7fe      	b.n	8012506 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	2b02      	cmp	r3, #2
 801250c:	d103      	bne.n	8012516 <xQueueGenericSend+0x6e>
 801250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012512:	2b01      	cmp	r3, #1
 8012514:	d101      	bne.n	801251a <xQueueGenericSend+0x72>
 8012516:	2301      	movs	r3, #1
 8012518:	e000      	b.n	801251c <xQueueGenericSend+0x74>
 801251a:	2300      	movs	r3, #0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10a      	bne.n	8012536 <xQueueGenericSend+0x8e>
	__asm volatile
 8012520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012524:	f383 8811 	msr	BASEPRI, r3
 8012528:	f3bf 8f6f 	isb	sy
 801252c:	f3bf 8f4f 	dsb	sy
 8012530:	623b      	str	r3, [r7, #32]
}
 8012532:	bf00      	nop
 8012534:	e7fe      	b.n	8012534 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012536:	f001 fd13 	bl	8013f60 <xTaskGetSchedulerState>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d102      	bne.n	8012546 <xQueueGenericSend+0x9e>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d101      	bne.n	801254a <xQueueGenericSend+0xa2>
 8012546:	2301      	movs	r3, #1
 8012548:	e000      	b.n	801254c <xQueueGenericSend+0xa4>
 801254a:	2300      	movs	r3, #0
 801254c:	2b00      	cmp	r3, #0
 801254e:	d10a      	bne.n	8012566 <xQueueGenericSend+0xbe>
	__asm volatile
 8012550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	61fb      	str	r3, [r7, #28]
}
 8012562:	bf00      	nop
 8012564:	e7fe      	b.n	8012564 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012566:	f002 f84d 	bl	8014604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012572:	429a      	cmp	r2, r3
 8012574:	d302      	bcc.n	801257c <xQueueGenericSend+0xd4>
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	2b02      	cmp	r3, #2
 801257a:	d129      	bne.n	80125d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801257c:	683a      	ldr	r2, [r7, #0]
 801257e:	68b9      	ldr	r1, [r7, #8]
 8012580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012582:	f000 fc59 	bl	8012e38 <prvCopyDataToQueue>
 8012586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258c:	2b00      	cmp	r3, #0
 801258e:	d010      	beq.n	80125b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012592:	3324      	adds	r3, #36	; 0x24
 8012594:	4618      	mov	r0, r3
 8012596:	f001 fb09 	bl	8013bac <xTaskRemoveFromEventList>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d013      	beq.n	80125c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80125a0:	4b3f      	ldr	r3, [pc, #252]	; (80126a0 <xQueueGenericSend+0x1f8>)
 80125a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125a6:	601a      	str	r2, [r3, #0]
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	f3bf 8f6f 	isb	sy
 80125b0:	e00a      	b.n	80125c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d007      	beq.n	80125c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80125b8:	4b39      	ldr	r3, [pc, #228]	; (80126a0 <xQueueGenericSend+0x1f8>)
 80125ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125be:	601a      	str	r2, [r3, #0]
 80125c0:	f3bf 8f4f 	dsb	sy
 80125c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80125c8:	f002 f84c 	bl	8014664 <vPortExitCritical>
				return pdPASS;
 80125cc:	2301      	movs	r3, #1
 80125ce:	e063      	b.n	8012698 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d103      	bne.n	80125de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80125d6:	f002 f845 	bl	8014664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	e05c      	b.n	8012698 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d106      	bne.n	80125f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80125e4:	f107 0314 	add.w	r3, r7, #20
 80125e8:	4618      	mov	r0, r3
 80125ea:	f001 fb41 	bl	8013c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80125ee:	2301      	movs	r3, #1
 80125f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80125f2:	f002 f837 	bl	8014664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125f6:	f001 f8cf 	bl	8013798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125fa:	f002 f803 	bl	8014604 <vPortEnterCritical>
 80125fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012604:	b25b      	sxtb	r3, r3
 8012606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260a:	d103      	bne.n	8012614 <xQueueGenericSend+0x16c>
 801260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260e:	2200      	movs	r2, #0
 8012610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801261a:	b25b      	sxtb	r3, r3
 801261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012620:	d103      	bne.n	801262a <xQueueGenericSend+0x182>
 8012622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012624:	2200      	movs	r2, #0
 8012626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801262a:	f002 f81b 	bl	8014664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801262e:	1d3a      	adds	r2, r7, #4
 8012630:	f107 0314 	add.w	r3, r7, #20
 8012634:	4611      	mov	r1, r2
 8012636:	4618      	mov	r0, r3
 8012638:	f001 fb30 	bl	8013c9c <xTaskCheckForTimeOut>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d124      	bne.n	801268c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012644:	f000 fcf0 	bl	8013028 <prvIsQueueFull>
 8012648:	4603      	mov	r3, r0
 801264a:	2b00      	cmp	r3, #0
 801264c:	d018      	beq.n	8012680 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012650:	3310      	adds	r3, #16
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	4611      	mov	r1, r2
 8012656:	4618      	mov	r0, r3
 8012658:	f001 fa84 	bl	8013b64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801265c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801265e:	f000 fc7b 	bl	8012f58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012662:	f001 f8a7 	bl	80137b4 <xTaskResumeAll>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	f47f af7c 	bne.w	8012566 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801266e:	4b0c      	ldr	r3, [pc, #48]	; (80126a0 <xQueueGenericSend+0x1f8>)
 8012670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	f3bf 8f4f 	dsb	sy
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	e772      	b.n	8012566 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012682:	f000 fc69 	bl	8012f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012686:	f001 f895 	bl	80137b4 <xTaskResumeAll>
 801268a:	e76c      	b.n	8012566 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801268c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801268e:	f000 fc63 	bl	8012f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012692:	f001 f88f 	bl	80137b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012698:	4618      	mov	r0, r3
 801269a:	3738      	adds	r7, #56	; 0x38
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	e000ed04 	.word	0xe000ed04

080126a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b090      	sub	sp, #64	; 0x40
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80126b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10a      	bne.n	80126d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80126bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80126ce:	bf00      	nop
 80126d0:	e7fe      	b.n	80126d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d103      	bne.n	80126e0 <xQueueGenericSendFromISR+0x3c>
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d101      	bne.n	80126e4 <xQueueGenericSendFromISR+0x40>
 80126e0:	2301      	movs	r3, #1
 80126e2:	e000      	b.n	80126e6 <xQueueGenericSendFromISR+0x42>
 80126e4:	2300      	movs	r3, #0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d10a      	bne.n	8012700 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80126ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ee:	f383 8811 	msr	BASEPRI, r3
 80126f2:	f3bf 8f6f 	isb	sy
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126fc:	bf00      	nop
 80126fe:	e7fe      	b.n	80126fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	2b02      	cmp	r3, #2
 8012704:	d103      	bne.n	801270e <xQueueGenericSendFromISR+0x6a>
 8012706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801270a:	2b01      	cmp	r3, #1
 801270c:	d101      	bne.n	8012712 <xQueueGenericSendFromISR+0x6e>
 801270e:	2301      	movs	r3, #1
 8012710:	e000      	b.n	8012714 <xQueueGenericSendFromISR+0x70>
 8012712:	2300      	movs	r3, #0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d10a      	bne.n	801272e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271c:	f383 8811 	msr	BASEPRI, r3
 8012720:	f3bf 8f6f 	isb	sy
 8012724:	f3bf 8f4f 	dsb	sy
 8012728:	623b      	str	r3, [r7, #32]
}
 801272a:	bf00      	nop
 801272c:	e7fe      	b.n	801272c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801272e:	f002 f84b 	bl	80147c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012732:	f3ef 8211 	mrs	r2, BASEPRI
 8012736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273a:	f383 8811 	msr	BASEPRI, r3
 801273e:	f3bf 8f6f 	isb	sy
 8012742:	f3bf 8f4f 	dsb	sy
 8012746:	61fa      	str	r2, [r7, #28]
 8012748:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801274a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801274c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012756:	429a      	cmp	r2, r3
 8012758:	d302      	bcc.n	8012760 <xQueueGenericSendFromISR+0xbc>
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	2b02      	cmp	r3, #2
 801275e:	d12f      	bne.n	80127c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801276e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	68b9      	ldr	r1, [r7, #8]
 8012774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012776:	f000 fb5f 	bl	8012e38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801277a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012782:	d112      	bne.n	80127aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012788:	2b00      	cmp	r3, #0
 801278a:	d016      	beq.n	80127ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278e:	3324      	adds	r3, #36	; 0x24
 8012790:	4618      	mov	r0, r3
 8012792:	f001 fa0b 	bl	8013bac <xTaskRemoveFromEventList>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d00e      	beq.n	80127ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00b      	beq.n	80127ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2201      	movs	r2, #1
 80127a6:	601a      	str	r2, [r3, #0]
 80127a8:	e007      	b.n	80127ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80127aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80127ae:	3301      	adds	r3, #1
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	b25a      	sxtb	r2, r3
 80127b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80127ba:	2301      	movs	r3, #1
 80127bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80127be:	e001      	b.n	80127c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80127c0:	2300      	movs	r3, #0
 80127c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80127c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80127ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80127d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3740      	adds	r7, #64	; 0x40
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80127da:	b580      	push	{r7, lr}
 80127dc:	b08e      	sub	sp, #56	; 0x38
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80127e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d10a      	bne.n	8012804 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80127ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f2:	f383 8811 	msr	BASEPRI, r3
 80127f6:	f3bf 8f6f 	isb	sy
 80127fa:	f3bf 8f4f 	dsb	sy
 80127fe:	623b      	str	r3, [r7, #32]
}
 8012800:	bf00      	nop
 8012802:	e7fe      	b.n	8012802 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00a      	beq.n	8012822 <xQueueGiveFromISR+0x48>
	__asm volatile
 801280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012810:	f383 8811 	msr	BASEPRI, r3
 8012814:	f3bf 8f6f 	isb	sy
 8012818:	f3bf 8f4f 	dsb	sy
 801281c:	61fb      	str	r3, [r7, #28]
}
 801281e:	bf00      	nop
 8012820:	e7fe      	b.n	8012820 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d103      	bne.n	8012832 <xQueueGiveFromISR+0x58>
 801282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d101      	bne.n	8012836 <xQueueGiveFromISR+0x5c>
 8012832:	2301      	movs	r3, #1
 8012834:	e000      	b.n	8012838 <xQueueGiveFromISR+0x5e>
 8012836:	2300      	movs	r3, #0
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10a      	bne.n	8012852 <xQueueGiveFromISR+0x78>
	__asm volatile
 801283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012840:	f383 8811 	msr	BASEPRI, r3
 8012844:	f3bf 8f6f 	isb	sy
 8012848:	f3bf 8f4f 	dsb	sy
 801284c:	61bb      	str	r3, [r7, #24]
}
 801284e:	bf00      	nop
 8012850:	e7fe      	b.n	8012850 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012852:	f001 ffb9 	bl	80147c8 <vPortValidateInterruptPriority>
	__asm volatile
 8012856:	f3ef 8211 	mrs	r2, BASEPRI
 801285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801285e:	f383 8811 	msr	BASEPRI, r3
 8012862:	f3bf 8f6f 	isb	sy
 8012866:	f3bf 8f4f 	dsb	sy
 801286a:	617a      	str	r2, [r7, #20]
 801286c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801286e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012876:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801287c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801287e:	429a      	cmp	r2, r3
 8012880:	d22b      	bcs.n	80128da <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012892:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801289c:	d112      	bne.n	80128c4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d016      	beq.n	80128d4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a8:	3324      	adds	r3, #36	; 0x24
 80128aa:	4618      	mov	r0, r3
 80128ac:	f001 f97e 	bl	8013bac <xTaskRemoveFromEventList>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00e      	beq.n	80128d4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00b      	beq.n	80128d4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2201      	movs	r2, #1
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	e007      	b.n	80128d4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80128c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128c8:	3301      	adds	r3, #1
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	b25a      	sxtb	r2, r3
 80128ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80128d4:	2301      	movs	r3, #1
 80128d6:	637b      	str	r3, [r7, #52]	; 0x34
 80128d8:	e001      	b.n	80128de <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80128da:	2300      	movs	r3, #0
 80128dc:	637b      	str	r3, [r7, #52]	; 0x34
 80128de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f383 8811 	msr	BASEPRI, r3
}
 80128e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80128ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3738      	adds	r7, #56	; 0x38
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b08c      	sub	sp, #48	; 0x30
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012900:	2300      	movs	r3, #0
 8012902:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290a:	2b00      	cmp	r3, #0
 801290c:	d10a      	bne.n	8012924 <xQueueReceive+0x30>
	__asm volatile
 801290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012912:	f383 8811 	msr	BASEPRI, r3
 8012916:	f3bf 8f6f 	isb	sy
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	623b      	str	r3, [r7, #32]
}
 8012920:	bf00      	nop
 8012922:	e7fe      	b.n	8012922 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d103      	bne.n	8012932 <xQueueReceive+0x3e>
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801292e:	2b00      	cmp	r3, #0
 8012930:	d101      	bne.n	8012936 <xQueueReceive+0x42>
 8012932:	2301      	movs	r3, #1
 8012934:	e000      	b.n	8012938 <xQueueReceive+0x44>
 8012936:	2300      	movs	r3, #0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d10a      	bne.n	8012952 <xQueueReceive+0x5e>
	__asm volatile
 801293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012940:	f383 8811 	msr	BASEPRI, r3
 8012944:	f3bf 8f6f 	isb	sy
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	61fb      	str	r3, [r7, #28]
}
 801294e:	bf00      	nop
 8012950:	e7fe      	b.n	8012950 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012952:	f001 fb05 	bl	8013f60 <xTaskGetSchedulerState>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d102      	bne.n	8012962 <xQueueReceive+0x6e>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d101      	bne.n	8012966 <xQueueReceive+0x72>
 8012962:	2301      	movs	r3, #1
 8012964:	e000      	b.n	8012968 <xQueueReceive+0x74>
 8012966:	2300      	movs	r3, #0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d10a      	bne.n	8012982 <xQueueReceive+0x8e>
	__asm volatile
 801296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012970:	f383 8811 	msr	BASEPRI, r3
 8012974:	f3bf 8f6f 	isb	sy
 8012978:	f3bf 8f4f 	dsb	sy
 801297c:	61bb      	str	r3, [r7, #24]
}
 801297e:	bf00      	nop
 8012980:	e7fe      	b.n	8012980 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012982:	f001 fe3f 	bl	8014604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298e:	2b00      	cmp	r3, #0
 8012990:	d01f      	beq.n	80129d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012992:	68b9      	ldr	r1, [r7, #8]
 8012994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012996:	f000 fab9 	bl	8012f0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299c:	1e5a      	subs	r2, r3, #1
 801299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00f      	beq.n	80129ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ac:	3310      	adds	r3, #16
 80129ae:	4618      	mov	r0, r3
 80129b0:	f001 f8fc 	bl	8013bac <xTaskRemoveFromEventList>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d007      	beq.n	80129ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80129ba:	4b3d      	ldr	r3, [pc, #244]	; (8012ab0 <xQueueReceive+0x1bc>)
 80129bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80129ca:	f001 fe4b 	bl	8014664 <vPortExitCritical>
				return pdPASS;
 80129ce:	2301      	movs	r3, #1
 80129d0:	e069      	b.n	8012aa6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d103      	bne.n	80129e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80129d8:	f001 fe44 	bl	8014664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80129dc:	2300      	movs	r3, #0
 80129de:	e062      	b.n	8012aa6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80129e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d106      	bne.n	80129f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80129e6:	f107 0310 	add.w	r3, r7, #16
 80129ea:	4618      	mov	r0, r3
 80129ec:	f001 f940 	bl	8013c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80129f0:	2301      	movs	r3, #1
 80129f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80129f4:	f001 fe36 	bl	8014664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80129f8:	f000 fece 	bl	8013798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80129fc:	f001 fe02 	bl	8014604 <vPortEnterCritical>
 8012a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a06:	b25b      	sxtb	r3, r3
 8012a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a0c:	d103      	bne.n	8012a16 <xQueueReceive+0x122>
 8012a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a10:	2200      	movs	r2, #0
 8012a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a1c:	b25b      	sxtb	r3, r3
 8012a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a22:	d103      	bne.n	8012a2c <xQueueReceive+0x138>
 8012a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a26:	2200      	movs	r2, #0
 8012a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a2c:	f001 fe1a 	bl	8014664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a30:	1d3a      	adds	r2, r7, #4
 8012a32:	f107 0310 	add.w	r3, r7, #16
 8012a36:	4611      	mov	r1, r2
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f001 f92f 	bl	8013c9c <xTaskCheckForTimeOut>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d123      	bne.n	8012a8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a46:	f000 fad9 	bl	8012ffc <prvIsQueueEmpty>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d017      	beq.n	8012a80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a52:	3324      	adds	r3, #36	; 0x24
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	4611      	mov	r1, r2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f001 f883 	bl	8013b64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a60:	f000 fa7a 	bl	8012f58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012a64:	f000 fea6 	bl	80137b4 <xTaskResumeAll>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d189      	bne.n	8012982 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012a6e:	4b10      	ldr	r3, [pc, #64]	; (8012ab0 <xQueueReceive+0x1bc>)
 8012a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	f3bf 8f4f 	dsb	sy
 8012a7a:	f3bf 8f6f 	isb	sy
 8012a7e:	e780      	b.n	8012982 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a82:	f000 fa69 	bl	8012f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a86:	f000 fe95 	bl	80137b4 <xTaskResumeAll>
 8012a8a:	e77a      	b.n	8012982 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a8e:	f000 fa63 	bl	8012f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a92:	f000 fe8f 	bl	80137b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a98:	f000 fab0 	bl	8012ffc <prvIsQueueEmpty>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f43f af6f 	beq.w	8012982 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012aa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3730      	adds	r7, #48	; 0x30
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	e000ed04 	.word	0xe000ed04

08012ab4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b08e      	sub	sp, #56	; 0x38
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d10a      	bne.n	8012ae6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad4:	f383 8811 	msr	BASEPRI, r3
 8012ad8:	f3bf 8f6f 	isb	sy
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	623b      	str	r3, [r7, #32]
}
 8012ae2:	bf00      	nop
 8012ae4:	e7fe      	b.n	8012ae4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00a      	beq.n	8012b04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	61fb      	str	r3, [r7, #28]
}
 8012b00:	bf00      	nop
 8012b02:	e7fe      	b.n	8012b02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b04:	f001 fa2c 	bl	8013f60 <xTaskGetSchedulerState>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d102      	bne.n	8012b14 <xQueueSemaphoreTake+0x60>
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d101      	bne.n	8012b18 <xQueueSemaphoreTake+0x64>
 8012b14:	2301      	movs	r3, #1
 8012b16:	e000      	b.n	8012b1a <xQueueSemaphoreTake+0x66>
 8012b18:	2300      	movs	r3, #0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d10a      	bne.n	8012b34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b22:	f383 8811 	msr	BASEPRI, r3
 8012b26:	f3bf 8f6f 	isb	sy
 8012b2a:	f3bf 8f4f 	dsb	sy
 8012b2e:	61bb      	str	r3, [r7, #24]
}
 8012b30:	bf00      	nop
 8012b32:	e7fe      	b.n	8012b32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b34:	f001 fd66 	bl	8014604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d024      	beq.n	8012b8e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b46:	1e5a      	subs	r2, r3, #1
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d104      	bne.n	8012b5e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012b54:	f001 fbac 	bl	80142b0 <pvTaskIncrementMutexHeldCount>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b60:	691b      	ldr	r3, [r3, #16]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00f      	beq.n	8012b86 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b68:	3310      	adds	r3, #16
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f001 f81e 	bl	8013bac <xTaskRemoveFromEventList>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d007      	beq.n	8012b86 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012b76:	4b54      	ldr	r3, [pc, #336]	; (8012cc8 <xQueueSemaphoreTake+0x214>)
 8012b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b7c:	601a      	str	r2, [r3, #0]
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012b86:	f001 fd6d 	bl	8014664 <vPortExitCritical>
				return pdPASS;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e097      	b.n	8012cbe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d111      	bne.n	8012bb8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d00a      	beq.n	8012bb0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9e:	f383 8811 	msr	BASEPRI, r3
 8012ba2:	f3bf 8f6f 	isb	sy
 8012ba6:	f3bf 8f4f 	dsb	sy
 8012baa:	617b      	str	r3, [r7, #20]
}
 8012bac:	bf00      	nop
 8012bae:	e7fe      	b.n	8012bae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012bb0:	f001 fd58 	bl	8014664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	e082      	b.n	8012cbe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d106      	bne.n	8012bcc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012bbe:	f107 030c 	add.w	r3, r7, #12
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f001 f854 	bl	8013c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012bc8:	2301      	movs	r3, #1
 8012bca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012bcc:	f001 fd4a 	bl	8014664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bd0:	f000 fde2 	bl	8013798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bd4:	f001 fd16 	bl	8014604 <vPortEnterCritical>
 8012bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bde:	b25b      	sxtb	r3, r3
 8012be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012be4:	d103      	bne.n	8012bee <xQueueSemaphoreTake+0x13a>
 8012be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be8:	2200      	movs	r2, #0
 8012bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012bf4:	b25b      	sxtb	r3, r3
 8012bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bfa:	d103      	bne.n	8012c04 <xQueueSemaphoreTake+0x150>
 8012bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c04:	f001 fd2e 	bl	8014664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c08:	463a      	mov	r2, r7
 8012c0a:	f107 030c 	add.w	r3, r7, #12
 8012c0e:	4611      	mov	r1, r2
 8012c10:	4618      	mov	r0, r3
 8012c12:	f001 f843 	bl	8013c9c <xTaskCheckForTimeOut>
 8012c16:	4603      	mov	r3, r0
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d132      	bne.n	8012c82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c1e:	f000 f9ed 	bl	8012ffc <prvIsQueueEmpty>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d026      	beq.n	8012c76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d109      	bne.n	8012c44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012c30:	f001 fce8 	bl	8014604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f001 f9af 	bl	8013f9c <xTaskPriorityInherit>
 8012c3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012c40:	f001 fd10 	bl	8014664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c46:	3324      	adds	r3, #36	; 0x24
 8012c48:	683a      	ldr	r2, [r7, #0]
 8012c4a:	4611      	mov	r1, r2
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f000 ff89 	bl	8013b64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c54:	f000 f980 	bl	8012f58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012c58:	f000 fdac 	bl	80137b4 <xTaskResumeAll>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	f47f af68 	bne.w	8012b34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012c64:	4b18      	ldr	r3, [pc, #96]	; (8012cc8 <xQueueSemaphoreTake+0x214>)
 8012c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c6a:	601a      	str	r2, [r3, #0]
 8012c6c:	f3bf 8f4f 	dsb	sy
 8012c70:	f3bf 8f6f 	isb	sy
 8012c74:	e75e      	b.n	8012b34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c78:	f000 f96e 	bl	8012f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c7c:	f000 fd9a 	bl	80137b4 <xTaskResumeAll>
 8012c80:	e758      	b.n	8012b34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c84:	f000 f968 	bl	8012f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c88:	f000 fd94 	bl	80137b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c8e:	f000 f9b5 	bl	8012ffc <prvIsQueueEmpty>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f43f af4d 	beq.w	8012b34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d00d      	beq.n	8012cbc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012ca0:	f001 fcb0 	bl	8014604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ca6:	f000 f8af 	bl	8012e08 <prvGetDisinheritPriorityAfterTimeout>
 8012caa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cae:	689b      	ldr	r3, [r3, #8]
 8012cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f001 fa6e 	bl	8014194 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012cb8:	f001 fcd4 	bl	8014664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012cbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3738      	adds	r7, #56	; 0x38
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	e000ed04 	.word	0xe000ed04

08012ccc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b08e      	sub	sp, #56	; 0x38
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d10a      	bne.n	8012cf8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce6:	f383 8811 	msr	BASEPRI, r3
 8012cea:	f3bf 8f6f 	isb	sy
 8012cee:	f3bf 8f4f 	dsb	sy
 8012cf2:	623b      	str	r3, [r7, #32]
}
 8012cf4:	bf00      	nop
 8012cf6:	e7fe      	b.n	8012cf6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d103      	bne.n	8012d06 <xQueueReceiveFromISR+0x3a>
 8012cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d101      	bne.n	8012d0a <xQueueReceiveFromISR+0x3e>
 8012d06:	2301      	movs	r3, #1
 8012d08:	e000      	b.n	8012d0c <xQueueReceiveFromISR+0x40>
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d10a      	bne.n	8012d26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	61fb      	str	r3, [r7, #28]
}
 8012d22:	bf00      	nop
 8012d24:	e7fe      	b.n	8012d24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d26:	f001 fd4f 	bl	80147c8 <vPortValidateInterruptPriority>
	__asm volatile
 8012d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8012d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d32:	f383 8811 	msr	BASEPRI, r3
 8012d36:	f3bf 8f6f 	isb	sy
 8012d3a:	f3bf 8f4f 	dsb	sy
 8012d3e:	61ba      	str	r2, [r7, #24]
 8012d40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012d42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d02f      	beq.n	8012db2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d5c:	68b9      	ldr	r1, [r7, #8]
 8012d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d60:	f000 f8d4 	bl	8012f0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d66:	1e5a      	subs	r2, r3, #1
 8012d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d74:	d112      	bne.n	8012d9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d78:	691b      	ldr	r3, [r3, #16]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d016      	beq.n	8012dac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	3310      	adds	r3, #16
 8012d82:	4618      	mov	r0, r3
 8012d84:	f000 ff12 	bl	8013bac <xTaskRemoveFromEventList>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d00e      	beq.n	8012dac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d00b      	beq.n	8012dac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2201      	movs	r2, #1
 8012d98:	601a      	str	r2, [r3, #0]
 8012d9a:	e007      	b.n	8012dac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012da0:	3301      	adds	r3, #1
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	b25a      	sxtb	r2, r3
 8012da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012dac:	2301      	movs	r3, #1
 8012dae:	637b      	str	r3, [r7, #52]	; 0x34
 8012db0:	e001      	b.n	8012db6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012db2:	2300      	movs	r3, #0
 8012db4:	637b      	str	r3, [r7, #52]	; 0x34
 8012db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	f383 8811 	msr	BASEPRI, r3
}
 8012dc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3738      	adds	r7, #56	; 0x38
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d10a      	bne.n	8012df4 <vQueueDelete+0x28>
	__asm volatile
 8012dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de2:	f383 8811 	msr	BASEPRI, r3
 8012de6:	f3bf 8f6f 	isb	sy
 8012dea:	f3bf 8f4f 	dsb	sy
 8012dee:	60bb      	str	r3, [r7, #8]
}
 8012df0:	bf00      	nop
 8012df2:	e7fe      	b.n	8012df2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012df4:	68f8      	ldr	r0, [r7, #12]
 8012df6:	f000 f92f 	bl	8013058 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8012dfa:	68f8      	ldr	r0, [r7, #12]
 8012dfc:	f001 fdf0 	bl	80149e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012e00:	bf00      	nop
 8012e02:	3710      	adds	r7, #16
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e08:	b480      	push	{r7}
 8012e0a:	b085      	sub	sp, #20
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d006      	beq.n	8012e26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f1c3 0307 	rsb	r3, r3, #7
 8012e22:	60fb      	str	r3, [r7, #12]
 8012e24:	e001      	b.n	8012e2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012e26:	2300      	movs	r3, #0
 8012e28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
	}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3714      	adds	r7, #20
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b086      	sub	sp, #24
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012e44:	2300      	movs	r3, #0
 8012e46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d10d      	bne.n	8012e72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d14d      	bne.n	8012efa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	689b      	ldr	r3, [r3, #8]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f001 f910 	bl	8014088 <xTaskPriorityDisinherit>
 8012e68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	609a      	str	r2, [r3, #8]
 8012e70:	e043      	b.n	8012efa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d119      	bne.n	8012eac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	6858      	ldr	r0, [r3, #4]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e80:	461a      	mov	r2, r3
 8012e82:	68b9      	ldr	r1, [r7, #8]
 8012e84:	f001 fefe 	bl	8014c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e90:	441a      	add	r2, r3
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	685a      	ldr	r2, [r3, #4]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	689b      	ldr	r3, [r3, #8]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d32b      	bcc.n	8012efa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	605a      	str	r2, [r3, #4]
 8012eaa:	e026      	b.n	8012efa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	68d8      	ldr	r0, [r3, #12]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	68b9      	ldr	r1, [r7, #8]
 8012eb8:	f001 fee4 	bl	8014c84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	68da      	ldr	r2, [r3, #12]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ec4:	425b      	negs	r3, r3
 8012ec6:	441a      	add	r2, r3
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	68da      	ldr	r2, [r3, #12]
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d207      	bcs.n	8012ee8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	689a      	ldr	r2, [r3, #8]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee0:	425b      	negs	r3, r3
 8012ee2:	441a      	add	r2, r3
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b02      	cmp	r3, #2
 8012eec:	d105      	bne.n	8012efa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	1c5a      	adds	r2, r3, #1
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f02:	697b      	ldr	r3, [r7, #20]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3718      	adds	r7, #24
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d018      	beq.n	8012f50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	68da      	ldr	r2, [r3, #12]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f26:	441a      	add	r2, r3
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	68da      	ldr	r2, [r3, #12]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	689b      	ldr	r3, [r3, #8]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d303      	bcc.n	8012f40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	68d9      	ldr	r1, [r3, #12]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f48:	461a      	mov	r2, r3
 8012f4a:	6838      	ldr	r0, [r7, #0]
 8012f4c:	f001 fe9a 	bl	8014c84 <memcpy>
	}
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012f60:	f001 fb50 	bl	8014604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f6c:	e011      	b.n	8012f92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d012      	beq.n	8012f9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	3324      	adds	r3, #36	; 0x24
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f000 fe16 	bl	8013bac <xTaskRemoveFromEventList>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012f86:	f000 feeb 	bl	8013d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012f8a:	7bfb      	ldrb	r3, [r7, #15]
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	dce9      	bgt.n	8012f6e <prvUnlockQueue+0x16>
 8012f9a:	e000      	b.n	8012f9e <prvUnlockQueue+0x46>
					break;
 8012f9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	22ff      	movs	r2, #255	; 0xff
 8012fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012fa6:	f001 fb5d 	bl	8014664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012faa:	f001 fb2b 	bl	8014604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012fb6:	e011      	b.n	8012fdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	691b      	ldr	r3, [r3, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d012      	beq.n	8012fe6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3310      	adds	r3, #16
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f000 fdf1 	bl	8013bac <xTaskRemoveFromEventList>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d001      	beq.n	8012fd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012fd0:	f000 fec6 	bl	8013d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012fd4:	7bbb      	ldrb	r3, [r7, #14]
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	dce9      	bgt.n	8012fb8 <prvUnlockQueue+0x60>
 8012fe4:	e000      	b.n	8012fe8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012fe6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	22ff      	movs	r2, #255	; 0xff
 8012fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012ff0:	f001 fb38 	bl	8014664 <vPortExitCritical>
}
 8012ff4:	bf00      	nop
 8012ff6:	3710      	adds	r7, #16
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013004:	f001 fafe 	bl	8014604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801300c:	2b00      	cmp	r3, #0
 801300e:	d102      	bne.n	8013016 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013010:	2301      	movs	r3, #1
 8013012:	60fb      	str	r3, [r7, #12]
 8013014:	e001      	b.n	801301a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013016:	2300      	movs	r3, #0
 8013018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801301a:	f001 fb23 	bl	8014664 <vPortExitCritical>

	return xReturn;
 801301e:	68fb      	ldr	r3, [r7, #12]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b084      	sub	sp, #16
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013030:	f001 fae8 	bl	8014604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303c:	429a      	cmp	r2, r3
 801303e:	d102      	bne.n	8013046 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013040:	2301      	movs	r3, #1
 8013042:	60fb      	str	r3, [r7, #12]
 8013044:	e001      	b.n	801304a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801304a:	f001 fb0b 	bl	8014664 <vPortExitCritical>

	return xReturn;
 801304e:	68fb      	ldr	r3, [r7, #12]
}
 8013050:	4618      	mov	r0, r3
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013058:	b480      	push	{r7}
 801305a:	b085      	sub	sp, #20
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013060:	2300      	movs	r3, #0
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	e016      	b.n	8013094 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013066:	4a10      	ldr	r2, [pc, #64]	; (80130a8 <vQueueUnregisterQueue+0x50>)
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	00db      	lsls	r3, r3, #3
 801306c:	4413      	add	r3, r2
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	429a      	cmp	r2, r3
 8013074:	d10b      	bne.n	801308e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013076:	4a0c      	ldr	r2, [pc, #48]	; (80130a8 <vQueueUnregisterQueue+0x50>)
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2100      	movs	r1, #0
 801307c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013080:	4a09      	ldr	r2, [pc, #36]	; (80130a8 <vQueueUnregisterQueue+0x50>)
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	00db      	lsls	r3, r3, #3
 8013086:	4413      	add	r3, r2
 8013088:	2200      	movs	r2, #0
 801308a:	605a      	str	r2, [r3, #4]
				break;
 801308c:	e006      	b.n	801309c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	3301      	adds	r3, #1
 8013092:	60fb      	str	r3, [r7, #12]
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2b07      	cmp	r3, #7
 8013098:	d9e5      	bls.n	8013066 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801309a:	bf00      	nop
 801309c:	bf00      	nop
 801309e:	3714      	adds	r7, #20
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr
 80130a8:	20005064 	.word	0x20005064

080130ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b08c      	sub	sp, #48	; 0x30
 80130b0:	af04      	add	r7, sp, #16
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	603b      	str	r3, [r7, #0]
 80130b8:	4613      	mov	r3, r2
 80130ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80130bc:	88fb      	ldrh	r3, [r7, #6]
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	4618      	mov	r0, r3
 80130c2:	f001 fbc1 	bl	8014848 <pvPortMalloc>
 80130c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00e      	beq.n	80130ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80130ce:	20b4      	movs	r0, #180	; 0xb4
 80130d0:	f001 fbba 	bl	8014848 <pvPortMalloc>
 80130d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d003      	beq.n	80130e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	631a      	str	r2, [r3, #48]	; 0x30
 80130e2:	e005      	b.n	80130f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80130e4:	6978      	ldr	r0, [r7, #20]
 80130e6:	f001 fc7b 	bl	80149e0 <vPortFree>
 80130ea:	e001      	b.n	80130f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80130f0:	69fb      	ldr	r3, [r7, #28]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d013      	beq.n	801311e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80130f6:	88fa      	ldrh	r2, [r7, #6]
 80130f8:	2300      	movs	r3, #0
 80130fa:	9303      	str	r3, [sp, #12]
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	9302      	str	r3, [sp, #8]
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	9301      	str	r3, [sp, #4]
 8013104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013106:	9300      	str	r3, [sp, #0]
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	68b9      	ldr	r1, [r7, #8]
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f000 f80f 	bl	8013130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013112:	69f8      	ldr	r0, [r7, #28]
 8013114:	f000 f8b2 	bl	801327c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013118:	2301      	movs	r3, #1
 801311a:	61bb      	str	r3, [r7, #24]
 801311c:	e002      	b.n	8013124 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801311e:	f04f 33ff 	mov.w	r3, #4294967295
 8013122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013124:	69bb      	ldr	r3, [r7, #24]
	}
 8013126:	4618      	mov	r0, r3
 8013128:	3720      	adds	r7, #32
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
	...

08013130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b088      	sub	sp, #32
 8013134:	af00      	add	r7, sp, #0
 8013136:	60f8      	str	r0, [r7, #12]
 8013138:	60b9      	str	r1, [r7, #8]
 801313a:	607a      	str	r2, [r7, #4]
 801313c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013140:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	461a      	mov	r2, r3
 8013148:	21a5      	movs	r1, #165	; 0xa5
 801314a:	f001 fda9 	bl	8014ca0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013158:	3b01      	subs	r3, #1
 801315a:	009b      	lsls	r3, r3, #2
 801315c:	4413      	add	r3, r2
 801315e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	f023 0307 	bic.w	r3, r3, #7
 8013166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	f003 0307 	and.w	r3, r3, #7
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00a      	beq.n	8013188 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013176:	f383 8811 	msr	BASEPRI, r3
 801317a:	f3bf 8f6f 	isb	sy
 801317e:	f3bf 8f4f 	dsb	sy
 8013182:	617b      	str	r3, [r7, #20]
}
 8013184:	bf00      	nop
 8013186:	e7fe      	b.n	8013186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d01f      	beq.n	80131ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801318e:	2300      	movs	r3, #0
 8013190:	61fb      	str	r3, [r7, #28]
 8013192:	e012      	b.n	80131ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	4413      	add	r3, r2
 801319a:	7819      	ldrb	r1, [r3, #0]
 801319c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801319e:	69fb      	ldr	r3, [r7, #28]
 80131a0:	4413      	add	r3, r2
 80131a2:	3334      	adds	r3, #52	; 0x34
 80131a4:	460a      	mov	r2, r1
 80131a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80131a8:	68ba      	ldr	r2, [r7, #8]
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	4413      	add	r3, r2
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d006      	beq.n	80131c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131b4:	69fb      	ldr	r3, [r7, #28]
 80131b6:	3301      	adds	r3, #1
 80131b8:	61fb      	str	r3, [r7, #28]
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	2b0f      	cmp	r3, #15
 80131be:	d9e9      	bls.n	8013194 <prvInitialiseNewTask+0x64>
 80131c0:	e000      	b.n	80131c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80131c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80131c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c6:	2200      	movs	r2, #0
 80131c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80131cc:	e003      	b.n	80131d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80131ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80131d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d8:	2b06      	cmp	r3, #6
 80131da:	d901      	bls.n	80131e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80131dc:	2306      	movs	r3, #6
 80131de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80131e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80131e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80131ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ee:	2200      	movs	r2, #0
 80131f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80131f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f4:	3304      	adds	r3, #4
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7ff f804 	bl	8012204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80131fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fe:	3318      	adds	r3, #24
 8013200:	4618      	mov	r0, r3
 8013202:	f7fe ffff 	bl	8012204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801320a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320e:	f1c3 0207 	rsb	r2, r3, #7
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801321a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321e:	2200      	movs	r2, #0
 8013220:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013226:	2200      	movs	r2, #0
 8013228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801322e:	334c      	adds	r3, #76	; 0x4c
 8013230:	2260      	movs	r2, #96	; 0x60
 8013232:	2100      	movs	r1, #0
 8013234:	4618      	mov	r0, r3
 8013236:	f001 fd33 	bl	8014ca0 <memset>
 801323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323c:	4a0c      	ldr	r2, [pc, #48]	; (8013270 <prvInitialiseNewTask+0x140>)
 801323e:	651a      	str	r2, [r3, #80]	; 0x50
 8013240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013242:	4a0c      	ldr	r2, [pc, #48]	; (8013274 <prvInitialiseNewTask+0x144>)
 8013244:	655a      	str	r2, [r3, #84]	; 0x54
 8013246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013248:	4a0b      	ldr	r2, [pc, #44]	; (8013278 <prvInitialiseNewTask+0x148>)
 801324a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801324c:	683a      	ldr	r2, [r7, #0]
 801324e:	68f9      	ldr	r1, [r7, #12]
 8013250:	69b8      	ldr	r0, [r7, #24]
 8013252:	f001 f8a7 	bl	80143a4 <pxPortInitialiseStack>
 8013256:	4602      	mov	r2, r0
 8013258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801325a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325e:	2b00      	cmp	r3, #0
 8013260:	d002      	beq.n	8013268 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013268:	bf00      	nop
 801326a:	3720      	adds	r7, #32
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	0801605c 	.word	0x0801605c
 8013274:	0801607c 	.word	0x0801607c
 8013278:	0801603c 	.word	0x0801603c

0801327c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013284:	f001 f9be 	bl	8014604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013288:	4b2a      	ldr	r3, [pc, #168]	; (8013334 <prvAddNewTaskToReadyList+0xb8>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	3301      	adds	r3, #1
 801328e:	4a29      	ldr	r2, [pc, #164]	; (8013334 <prvAddNewTaskToReadyList+0xb8>)
 8013290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013292:	4b29      	ldr	r3, [pc, #164]	; (8013338 <prvAddNewTaskToReadyList+0xbc>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d109      	bne.n	80132ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801329a:	4a27      	ldr	r2, [pc, #156]	; (8013338 <prvAddNewTaskToReadyList+0xbc>)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80132a0:	4b24      	ldr	r3, [pc, #144]	; (8013334 <prvAddNewTaskToReadyList+0xb8>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d110      	bne.n	80132ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80132a8:	f000 fd7e 	bl	8013da8 <prvInitialiseTaskLists>
 80132ac:	e00d      	b.n	80132ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80132ae:	4b23      	ldr	r3, [pc, #140]	; (801333c <prvAddNewTaskToReadyList+0xc0>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d109      	bne.n	80132ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80132b6:	4b20      	ldr	r3, [pc, #128]	; (8013338 <prvAddNewTaskToReadyList+0xbc>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d802      	bhi.n	80132ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80132c4:	4a1c      	ldr	r2, [pc, #112]	; (8013338 <prvAddNewTaskToReadyList+0xbc>)
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80132ca:	4b1d      	ldr	r3, [pc, #116]	; (8013340 <prvAddNewTaskToReadyList+0xc4>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	3301      	adds	r3, #1
 80132d0:	4a1b      	ldr	r2, [pc, #108]	; (8013340 <prvAddNewTaskToReadyList+0xc4>)
 80132d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132d8:	2201      	movs	r2, #1
 80132da:	409a      	lsls	r2, r3
 80132dc:	4b19      	ldr	r3, [pc, #100]	; (8013344 <prvAddNewTaskToReadyList+0xc8>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	4313      	orrs	r3, r2
 80132e2:	4a18      	ldr	r2, [pc, #96]	; (8013344 <prvAddNewTaskToReadyList+0xc8>)
 80132e4:	6013      	str	r3, [r2, #0]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ea:	4613      	mov	r3, r2
 80132ec:	009b      	lsls	r3, r3, #2
 80132ee:	4413      	add	r3, r2
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	4a15      	ldr	r2, [pc, #84]	; (8013348 <prvAddNewTaskToReadyList+0xcc>)
 80132f4:	441a      	add	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	3304      	adds	r3, #4
 80132fa:	4619      	mov	r1, r3
 80132fc:	4610      	mov	r0, r2
 80132fe:	f7fe ff8e 	bl	801221e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013302:	f001 f9af 	bl	8014664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013306:	4b0d      	ldr	r3, [pc, #52]	; (801333c <prvAddNewTaskToReadyList+0xc0>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d00e      	beq.n	801332c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801330e:	4b0a      	ldr	r3, [pc, #40]	; (8013338 <prvAddNewTaskToReadyList+0xbc>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013318:	429a      	cmp	r2, r3
 801331a:	d207      	bcs.n	801332c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801331c:	4b0b      	ldr	r3, [pc, #44]	; (801334c <prvAddNewTaskToReadyList+0xd0>)
 801331e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013322:	601a      	str	r2, [r3, #0]
 8013324:	f3bf 8f4f 	dsb	sy
 8013328:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801332c:	bf00      	nop
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	20000594 	.word	0x20000594
 8013338:	20000494 	.word	0x20000494
 801333c:	200005a0 	.word	0x200005a0
 8013340:	200005b0 	.word	0x200005b0
 8013344:	2000059c 	.word	0x2000059c
 8013348:	20000498 	.word	0x20000498
 801334c:	e000ed04 	.word	0xe000ed04

08013350 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013350:	b580      	push	{r7, lr}
 8013352:	b08a      	sub	sp, #40	; 0x28
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801335a:	2300      	movs	r3, #0
 801335c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d10a      	bne.n	801337a <vTaskDelayUntil+0x2a>
	__asm volatile
 8013364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013368:	f383 8811 	msr	BASEPRI, r3
 801336c:	f3bf 8f6f 	isb	sy
 8013370:	f3bf 8f4f 	dsb	sy
 8013374:	617b      	str	r3, [r7, #20]
}
 8013376:	bf00      	nop
 8013378:	e7fe      	b.n	8013378 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d10a      	bne.n	8013396 <vTaskDelayUntil+0x46>
	__asm volatile
 8013380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	613b      	str	r3, [r7, #16]
}
 8013392:	bf00      	nop
 8013394:	e7fe      	b.n	8013394 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8013396:	4b2a      	ldr	r3, [pc, #168]	; (8013440 <vTaskDelayUntil+0xf0>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d00a      	beq.n	80133b4 <vTaskDelayUntil+0x64>
	__asm volatile
 801339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a2:	f383 8811 	msr	BASEPRI, r3
 80133a6:	f3bf 8f6f 	isb	sy
 80133aa:	f3bf 8f4f 	dsb	sy
 80133ae:	60fb      	str	r3, [r7, #12]
}
 80133b0:	bf00      	nop
 80133b2:	e7fe      	b.n	80133b2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80133b4:	f000 f9f0 	bl	8013798 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80133b8:	4b22      	ldr	r3, [pc, #136]	; (8013444 <vTaskDelayUntil+0xf4>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	4413      	add	r3, r2
 80133c6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	6a3a      	ldr	r2, [r7, #32]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d20b      	bcs.n	80133ea <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	69fa      	ldr	r2, [r7, #28]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d211      	bcs.n	8013400 <vTaskDelayUntil+0xb0>
 80133dc:	69fa      	ldr	r2, [r7, #28]
 80133de:	6a3b      	ldr	r3, [r7, #32]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d90d      	bls.n	8013400 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80133e4:	2301      	movs	r3, #1
 80133e6:	627b      	str	r3, [r7, #36]	; 0x24
 80133e8:	e00a      	b.n	8013400 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	69fa      	ldr	r2, [r7, #28]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d303      	bcc.n	80133fc <vTaskDelayUntil+0xac>
 80133f4:	69fa      	ldr	r2, [r7, #28]
 80133f6:	6a3b      	ldr	r3, [r7, #32]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d901      	bls.n	8013400 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80133fc:	2301      	movs	r3, #1
 80133fe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	69fa      	ldr	r2, [r7, #28]
 8013404:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013408:	2b00      	cmp	r3, #0
 801340a:	d006      	beq.n	801341a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801340c:	69fa      	ldr	r2, [r7, #28]
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	2100      	movs	r1, #0
 8013414:	4618      	mov	r0, r3
 8013416:	f000 ff5f 	bl	80142d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801341a:	f000 f9cb 	bl	80137b4 <xTaskResumeAll>
 801341e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d107      	bne.n	8013436 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8013426:	4b08      	ldr	r3, [pc, #32]	; (8013448 <vTaskDelayUntil+0xf8>)
 8013428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801342c:	601a      	str	r2, [r3, #0]
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013436:	bf00      	nop
 8013438:	3728      	adds	r7, #40	; 0x28
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	200005bc 	.word	0x200005bc
 8013444:	20000598 	.word	0x20000598
 8013448:	e000ed04 	.word	0xe000ed04

0801344c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013454:	2300      	movs	r3, #0
 8013456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d017      	beq.n	801348e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801345e:	4b13      	ldr	r3, [pc, #76]	; (80134ac <vTaskDelay+0x60>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00a      	beq.n	801347c <vTaskDelay+0x30>
	__asm volatile
 8013466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346a:	f383 8811 	msr	BASEPRI, r3
 801346e:	f3bf 8f6f 	isb	sy
 8013472:	f3bf 8f4f 	dsb	sy
 8013476:	60bb      	str	r3, [r7, #8]
}
 8013478:	bf00      	nop
 801347a:	e7fe      	b.n	801347a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801347c:	f000 f98c 	bl	8013798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013480:	2100      	movs	r1, #0
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f000 ff28 	bl	80142d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013488:	f000 f994 	bl	80137b4 <xTaskResumeAll>
 801348c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d107      	bne.n	80134a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013494:	4b06      	ldr	r3, [pc, #24]	; (80134b0 <vTaskDelay+0x64>)
 8013496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801349a:	601a      	str	r2, [r3, #0]
 801349c:	f3bf 8f4f 	dsb	sy
 80134a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134a4:	bf00      	nop
 80134a6:	3710      	adds	r7, #16
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	200005bc 	.word	0x200005bc
 80134b0:	e000ed04 	.word	0xe000ed04

080134b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80134bc:	f001 f8a2 	bl	8014604 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d102      	bne.n	80134cc <vTaskSuspend+0x18>
 80134c6:	4b3c      	ldr	r3, [pc, #240]	; (80135b8 <vTaskSuspend+0x104>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	e000      	b.n	80134ce <vTaskSuspend+0x1a>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	3304      	adds	r3, #4
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fe feff 	bl	80122d8 <uxListRemove>
 80134da:	4603      	mov	r3, r0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d115      	bne.n	801350c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e4:	4935      	ldr	r1, [pc, #212]	; (80135bc <vTaskSuspend+0x108>)
 80134e6:	4613      	mov	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4413      	add	r3, r2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	440b      	add	r3, r1
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d10a      	bne.n	801350c <vTaskSuspend+0x58>
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134fa:	2201      	movs	r2, #1
 80134fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013500:	43da      	mvns	r2, r3
 8013502:	4b2f      	ldr	r3, [pc, #188]	; (80135c0 <vTaskSuspend+0x10c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	4013      	ands	r3, r2
 8013508:	4a2d      	ldr	r2, [pc, #180]	; (80135c0 <vTaskSuspend+0x10c>)
 801350a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013510:	2b00      	cmp	r3, #0
 8013512:	d004      	beq.n	801351e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	3318      	adds	r3, #24
 8013518:	4618      	mov	r0, r3
 801351a:	f7fe fedd 	bl	80122d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	3304      	adds	r3, #4
 8013522:	4619      	mov	r1, r3
 8013524:	4827      	ldr	r0, [pc, #156]	; (80135c4 <vTaskSuspend+0x110>)
 8013526:	f7fe fe7a 	bl	801221e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2b01      	cmp	r3, #1
 8013534:	d103      	bne.n	801353e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2200      	movs	r2, #0
 801353a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801353e:	f001 f891 	bl	8014664 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013542:	4b21      	ldr	r3, [pc, #132]	; (80135c8 <vTaskSuspend+0x114>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d005      	beq.n	8013556 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801354a:	f001 f85b 	bl	8014604 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801354e:	f000 fce7 	bl	8013f20 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013552:	f001 f887 	bl	8014664 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013556:	4b18      	ldr	r3, [pc, #96]	; (80135b8 <vTaskSuspend+0x104>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	68fa      	ldr	r2, [r7, #12]
 801355c:	429a      	cmp	r2, r3
 801355e:	d127      	bne.n	80135b0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8013560:	4b19      	ldr	r3, [pc, #100]	; (80135c8 <vTaskSuspend+0x114>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d017      	beq.n	8013598 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013568:	4b18      	ldr	r3, [pc, #96]	; (80135cc <vTaskSuspend+0x118>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d00a      	beq.n	8013586 <vTaskSuspend+0xd2>
	__asm volatile
 8013570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013574:	f383 8811 	msr	BASEPRI, r3
 8013578:	f3bf 8f6f 	isb	sy
 801357c:	f3bf 8f4f 	dsb	sy
 8013580:	60bb      	str	r3, [r7, #8]
}
 8013582:	bf00      	nop
 8013584:	e7fe      	b.n	8013584 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8013586:	4b12      	ldr	r3, [pc, #72]	; (80135d0 <vTaskSuspend+0x11c>)
 8013588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801358c:	601a      	str	r2, [r3, #0]
 801358e:	f3bf 8f4f 	dsb	sy
 8013592:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013596:	e00b      	b.n	80135b0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013598:	4b0a      	ldr	r3, [pc, #40]	; (80135c4 <vTaskSuspend+0x110>)
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	4b0d      	ldr	r3, [pc, #52]	; (80135d4 <vTaskSuspend+0x120>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d103      	bne.n	80135ac <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80135a4:	4b04      	ldr	r3, [pc, #16]	; (80135b8 <vTaskSuspend+0x104>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	601a      	str	r2, [r3, #0]
	}
 80135aa:	e001      	b.n	80135b0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80135ac:	f000 fa78 	bl	8013aa0 <vTaskSwitchContext>
	}
 80135b0:	bf00      	nop
 80135b2:	3710      	adds	r7, #16
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	20000494 	.word	0x20000494
 80135bc:	20000498 	.word	0x20000498
 80135c0:	2000059c 	.word	0x2000059c
 80135c4:	20000580 	.word	0x20000580
 80135c8:	200005a0 	.word	0x200005a0
 80135cc:	200005bc 	.word	0x200005bc
 80135d0:	e000ed04 	.word	0xe000ed04
 80135d4:	20000594 	.word	0x20000594

080135d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80135d8:	b480      	push	{r7}
 80135da:	b087      	sub	sp, #28
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80135e0:	2300      	movs	r3, #0
 80135e2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d10a      	bne.n	8013604 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80135ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	60fb      	str	r3, [r7, #12]
}
 8013600:	bf00      	nop
 8013602:	e7fe      	b.n	8013602 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	695b      	ldr	r3, [r3, #20]
 8013608:	4a0a      	ldr	r2, [pc, #40]	; (8013634 <prvTaskIsTaskSuspended+0x5c>)
 801360a:	4293      	cmp	r3, r2
 801360c:	d10a      	bne.n	8013624 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013612:	4a09      	ldr	r2, [pc, #36]	; (8013638 <prvTaskIsTaskSuspended+0x60>)
 8013614:	4293      	cmp	r3, r2
 8013616:	d005      	beq.n	8013624 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801361c:	2b00      	cmp	r3, #0
 801361e:	d101      	bne.n	8013624 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013620:	2301      	movs	r3, #1
 8013622:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013624:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013626:	4618      	mov	r0, r3
 8013628:	371c      	adds	r7, #28
 801362a:	46bd      	mov	sp, r7
 801362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013630:	4770      	bx	lr
 8013632:	bf00      	nop
 8013634:	20000580 	.word	0x20000580
 8013638:	20000554 	.word	0x20000554

0801363c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d10a      	bne.n	8013664 <vTaskResume+0x28>
	__asm volatile
 801364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013652:	f383 8811 	msr	BASEPRI, r3
 8013656:	f3bf 8f6f 	isb	sy
 801365a:	f3bf 8f4f 	dsb	sy
 801365e:	60bb      	str	r3, [r7, #8]
}
 8013660:	bf00      	nop
 8013662:	e7fe      	b.n	8013662 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8013664:	4b20      	ldr	r3, [pc, #128]	; (80136e8 <vTaskResume+0xac>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	429a      	cmp	r2, r3
 801366c:	d037      	beq.n	80136de <vTaskResume+0xa2>
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d034      	beq.n	80136de <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8013674:	f000 ffc6 	bl	8014604 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f7ff ffad 	bl	80135d8 <prvTaskIsTaskSuspended>
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d02a      	beq.n	80136da <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	3304      	adds	r3, #4
 8013688:	4618      	mov	r0, r3
 801368a:	f7fe fe25 	bl	80122d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013692:	2201      	movs	r2, #1
 8013694:	409a      	lsls	r2, r3
 8013696:	4b15      	ldr	r3, [pc, #84]	; (80136ec <vTaskResume+0xb0>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	4313      	orrs	r3, r2
 801369c:	4a13      	ldr	r2, [pc, #76]	; (80136ec <vTaskResume+0xb0>)
 801369e:	6013      	str	r3, [r2, #0]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	4a10      	ldr	r2, [pc, #64]	; (80136f0 <vTaskResume+0xb4>)
 80136ae:	441a      	add	r2, r3
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	3304      	adds	r3, #4
 80136b4:	4619      	mov	r1, r3
 80136b6:	4610      	mov	r0, r2
 80136b8:	f7fe fdb1 	bl	801221e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136c0:	4b09      	ldr	r3, [pc, #36]	; (80136e8 <vTaskResume+0xac>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d307      	bcc.n	80136da <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80136ca:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <vTaskResume+0xb8>)
 80136cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	f3bf 8f4f 	dsb	sy
 80136d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80136da:	f000 ffc3 	bl	8014664 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136de:	bf00      	nop
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20000494 	.word	0x20000494
 80136ec:	2000059c 	.word	0x2000059c
 80136f0:	20000498 	.word	0x20000498
 80136f4:	e000ed04 	.word	0xe000ed04

080136f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b086      	sub	sp, #24
 80136fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80136fe:	4b1e      	ldr	r3, [pc, #120]	; (8013778 <vTaskStartScheduler+0x80>)
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	2300      	movs	r3, #0
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	2300      	movs	r3, #0
 8013708:	2280      	movs	r2, #128	; 0x80
 801370a:	491c      	ldr	r1, [pc, #112]	; (801377c <vTaskStartScheduler+0x84>)
 801370c:	481c      	ldr	r0, [pc, #112]	; (8013780 <vTaskStartScheduler+0x88>)
 801370e:	f7ff fccd 	bl	80130ac <xTaskCreate>
 8013712:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2b01      	cmp	r3, #1
 8013718:	d11b      	bne.n	8013752 <vTaskStartScheduler+0x5a>
	__asm volatile
 801371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371e:	f383 8811 	msr	BASEPRI, r3
 8013722:	f3bf 8f6f 	isb	sy
 8013726:	f3bf 8f4f 	dsb	sy
 801372a:	60bb      	str	r3, [r7, #8]
}
 801372c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801372e:	4b15      	ldr	r3, [pc, #84]	; (8013784 <vTaskStartScheduler+0x8c>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	334c      	adds	r3, #76	; 0x4c
 8013734:	4a14      	ldr	r2, [pc, #80]	; (8013788 <vTaskStartScheduler+0x90>)
 8013736:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013738:	4b14      	ldr	r3, [pc, #80]	; (801378c <vTaskStartScheduler+0x94>)
 801373a:	f04f 32ff 	mov.w	r2, #4294967295
 801373e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013740:	4b13      	ldr	r3, [pc, #76]	; (8013790 <vTaskStartScheduler+0x98>)
 8013742:	2201      	movs	r2, #1
 8013744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013746:	4b13      	ldr	r3, [pc, #76]	; (8013794 <vTaskStartScheduler+0x9c>)
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801374c:	f000 feb8 	bl	80144c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013750:	e00e      	b.n	8013770 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013758:	d10a      	bne.n	8013770 <vTaskStartScheduler+0x78>
	__asm volatile
 801375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375e:	f383 8811 	msr	BASEPRI, r3
 8013762:	f3bf 8f6f 	isb	sy
 8013766:	f3bf 8f4f 	dsb	sy
 801376a:	607b      	str	r3, [r7, #4]
}
 801376c:	bf00      	nop
 801376e:	e7fe      	b.n	801376e <vTaskStartScheduler+0x76>
}
 8013770:	bf00      	nop
 8013772:	3710      	adds	r7, #16
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	200005b8 	.word	0x200005b8
 801377c:	08015b34 	.word	0x08015b34
 8013780:	08013d79 	.word	0x08013d79
 8013784:	20000494 	.word	0x20000494
 8013788:	20000078 	.word	0x20000078
 801378c:	200005b4 	.word	0x200005b4
 8013790:	200005a0 	.word	0x200005a0
 8013794:	20000598 	.word	0x20000598

08013798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013798:	b480      	push	{r7}
 801379a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801379c:	4b04      	ldr	r3, [pc, #16]	; (80137b0 <vTaskSuspendAll+0x18>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	3301      	adds	r3, #1
 80137a2:	4a03      	ldr	r2, [pc, #12]	; (80137b0 <vTaskSuspendAll+0x18>)
 80137a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80137a6:	bf00      	nop
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr
 80137b0:	200005bc 	.word	0x200005bc

080137b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80137ba:	2300      	movs	r3, #0
 80137bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80137be:	2300      	movs	r3, #0
 80137c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80137c2:	4b41      	ldr	r3, [pc, #260]	; (80138c8 <xTaskResumeAll+0x114>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d10a      	bne.n	80137e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80137ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	603b      	str	r3, [r7, #0]
}
 80137dc:	bf00      	nop
 80137de:	e7fe      	b.n	80137de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80137e0:	f000 ff10 	bl	8014604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80137e4:	4b38      	ldr	r3, [pc, #224]	; (80138c8 <xTaskResumeAll+0x114>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	3b01      	subs	r3, #1
 80137ea:	4a37      	ldr	r2, [pc, #220]	; (80138c8 <xTaskResumeAll+0x114>)
 80137ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137ee:	4b36      	ldr	r3, [pc, #216]	; (80138c8 <xTaskResumeAll+0x114>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d161      	bne.n	80138ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80137f6:	4b35      	ldr	r3, [pc, #212]	; (80138cc <xTaskResumeAll+0x118>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d05d      	beq.n	80138ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80137fe:	e02e      	b.n	801385e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013800:	4b33      	ldr	r3, [pc, #204]	; (80138d0 <xTaskResumeAll+0x11c>)
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	3318      	adds	r3, #24
 801380c:	4618      	mov	r0, r3
 801380e:	f7fe fd63 	bl	80122d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	3304      	adds	r3, #4
 8013816:	4618      	mov	r0, r3
 8013818:	f7fe fd5e 	bl	80122d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013820:	2201      	movs	r2, #1
 8013822:	409a      	lsls	r2, r3
 8013824:	4b2b      	ldr	r3, [pc, #172]	; (80138d4 <xTaskResumeAll+0x120>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	4313      	orrs	r3, r2
 801382a:	4a2a      	ldr	r2, [pc, #168]	; (80138d4 <xTaskResumeAll+0x120>)
 801382c:	6013      	str	r3, [r2, #0]
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013832:	4613      	mov	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	4a27      	ldr	r2, [pc, #156]	; (80138d8 <xTaskResumeAll+0x124>)
 801383c:	441a      	add	r2, r3
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	3304      	adds	r3, #4
 8013842:	4619      	mov	r1, r3
 8013844:	4610      	mov	r0, r2
 8013846:	f7fe fcea 	bl	801221e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384e:	4b23      	ldr	r3, [pc, #140]	; (80138dc <xTaskResumeAll+0x128>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013854:	429a      	cmp	r2, r3
 8013856:	d302      	bcc.n	801385e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013858:	4b21      	ldr	r3, [pc, #132]	; (80138e0 <xTaskResumeAll+0x12c>)
 801385a:	2201      	movs	r2, #1
 801385c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801385e:	4b1c      	ldr	r3, [pc, #112]	; (80138d0 <xTaskResumeAll+0x11c>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d1cc      	bne.n	8013800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d001      	beq.n	8013870 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801386c:	f000 fb58 	bl	8013f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013870:	4b1c      	ldr	r3, [pc, #112]	; (80138e4 <xTaskResumeAll+0x130>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d010      	beq.n	801389e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801387c:	f000 f858 	bl	8013930 <xTaskIncrementTick>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013886:	4b16      	ldr	r3, [pc, #88]	; (80138e0 <xTaskResumeAll+0x12c>)
 8013888:	2201      	movs	r2, #1
 801388a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	3b01      	subs	r3, #1
 8013890:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1f1      	bne.n	801387c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8013898:	4b12      	ldr	r3, [pc, #72]	; (80138e4 <xTaskResumeAll+0x130>)
 801389a:	2200      	movs	r2, #0
 801389c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801389e:	4b10      	ldr	r3, [pc, #64]	; (80138e0 <xTaskResumeAll+0x12c>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d009      	beq.n	80138ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80138a6:	2301      	movs	r3, #1
 80138a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80138aa:	4b0f      	ldr	r3, [pc, #60]	; (80138e8 <xTaskResumeAll+0x134>)
 80138ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	f3bf 8f4f 	dsb	sy
 80138b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80138ba:	f000 fed3 	bl	8014664 <vPortExitCritical>

	return xAlreadyYielded;
 80138be:	68bb      	ldr	r3, [r7, #8]
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3710      	adds	r7, #16
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	200005bc 	.word	0x200005bc
 80138cc:	20000594 	.word	0x20000594
 80138d0:	20000554 	.word	0x20000554
 80138d4:	2000059c 	.word	0x2000059c
 80138d8:	20000498 	.word	0x20000498
 80138dc:	20000494 	.word	0x20000494
 80138e0:	200005a8 	.word	0x200005a8
 80138e4:	200005a4 	.word	0x200005a4
 80138e8:	e000ed04 	.word	0xe000ed04

080138ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80138ec:	b480      	push	{r7}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80138f2:	4b05      	ldr	r3, [pc, #20]	; (8013908 <xTaskGetTickCount+0x1c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80138f8:	687b      	ldr	r3, [r7, #4]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	370c      	adds	r7, #12
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	20000598 	.word	0x20000598

0801390c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013912:	f000 ff59 	bl	80147c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013916:	2300      	movs	r3, #0
 8013918:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801391a:	4b04      	ldr	r3, [pc, #16]	; (801392c <xTaskGetTickCountFromISR+0x20>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013920:	683b      	ldr	r3, [r7, #0]
}
 8013922:	4618      	mov	r0, r3
 8013924:	3708      	adds	r7, #8
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	20000598 	.word	0x20000598

08013930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013936:	2300      	movs	r3, #0
 8013938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801393a:	4b4e      	ldr	r3, [pc, #312]	; (8013a74 <xTaskIncrementTick+0x144>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	f040 808e 	bne.w	8013a60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013944:	4b4c      	ldr	r3, [pc, #304]	; (8013a78 <xTaskIncrementTick+0x148>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	3301      	adds	r3, #1
 801394a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801394c:	4a4a      	ldr	r2, [pc, #296]	; (8013a78 <xTaskIncrementTick+0x148>)
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d120      	bne.n	801399a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013958:	4b48      	ldr	r3, [pc, #288]	; (8013a7c <xTaskIncrementTick+0x14c>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00a      	beq.n	8013978 <xTaskIncrementTick+0x48>
	__asm volatile
 8013962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013966:	f383 8811 	msr	BASEPRI, r3
 801396a:	f3bf 8f6f 	isb	sy
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	603b      	str	r3, [r7, #0]
}
 8013974:	bf00      	nop
 8013976:	e7fe      	b.n	8013976 <xTaskIncrementTick+0x46>
 8013978:	4b40      	ldr	r3, [pc, #256]	; (8013a7c <xTaskIncrementTick+0x14c>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	60fb      	str	r3, [r7, #12]
 801397e:	4b40      	ldr	r3, [pc, #256]	; (8013a80 <xTaskIncrementTick+0x150>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	4a3e      	ldr	r2, [pc, #248]	; (8013a7c <xTaskIncrementTick+0x14c>)
 8013984:	6013      	str	r3, [r2, #0]
 8013986:	4a3e      	ldr	r2, [pc, #248]	; (8013a80 <xTaskIncrementTick+0x150>)
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	6013      	str	r3, [r2, #0]
 801398c:	4b3d      	ldr	r3, [pc, #244]	; (8013a84 <xTaskIncrementTick+0x154>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	3301      	adds	r3, #1
 8013992:	4a3c      	ldr	r2, [pc, #240]	; (8013a84 <xTaskIncrementTick+0x154>)
 8013994:	6013      	str	r3, [r2, #0]
 8013996:	f000 fac3 	bl	8013f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801399a:	4b3b      	ldr	r3, [pc, #236]	; (8013a88 <xTaskIncrementTick+0x158>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	693a      	ldr	r2, [r7, #16]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d348      	bcc.n	8013a36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139a4:	4b35      	ldr	r3, [pc, #212]	; (8013a7c <xTaskIncrementTick+0x14c>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d104      	bne.n	80139b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139ae:	4b36      	ldr	r3, [pc, #216]	; (8013a88 <xTaskIncrementTick+0x158>)
 80139b0:	f04f 32ff 	mov.w	r2, #4294967295
 80139b4:	601a      	str	r2, [r3, #0]
					break;
 80139b6:	e03e      	b.n	8013a36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139b8:	4b30      	ldr	r3, [pc, #192]	; (8013a7c <xTaskIncrementTick+0x14c>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	68db      	ldr	r3, [r3, #12]
 80139c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80139c8:	693a      	ldr	r2, [r7, #16]
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d203      	bcs.n	80139d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80139d0:	4a2d      	ldr	r2, [pc, #180]	; (8013a88 <xTaskIncrementTick+0x158>)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80139d6:	e02e      	b.n	8013a36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	3304      	adds	r3, #4
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fe fc7b 	bl	80122d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d004      	beq.n	80139f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	3318      	adds	r3, #24
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fe fc72 	bl	80122d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f8:	2201      	movs	r2, #1
 80139fa:	409a      	lsls	r2, r3
 80139fc:	4b23      	ldr	r3, [pc, #140]	; (8013a8c <xTaskIncrementTick+0x15c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	4313      	orrs	r3, r2
 8013a02:	4a22      	ldr	r2, [pc, #136]	; (8013a8c <xTaskIncrementTick+0x15c>)
 8013a04:	6013      	str	r3, [r2, #0]
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	4413      	add	r3, r2
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	4a1f      	ldr	r2, [pc, #124]	; (8013a90 <xTaskIncrementTick+0x160>)
 8013a14:	441a      	add	r2, r3
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	3304      	adds	r3, #4
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	f7fe fbfe 	bl	801221e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a26:	4b1b      	ldr	r3, [pc, #108]	; (8013a94 <xTaskIncrementTick+0x164>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d3b9      	bcc.n	80139a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013a30:	2301      	movs	r3, #1
 8013a32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a34:	e7b6      	b.n	80139a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013a36:	4b17      	ldr	r3, [pc, #92]	; (8013a94 <xTaskIncrementTick+0x164>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a3c:	4914      	ldr	r1, [pc, #80]	; (8013a90 <xTaskIncrementTick+0x160>)
 8013a3e:	4613      	mov	r3, r2
 8013a40:	009b      	lsls	r3, r3, #2
 8013a42:	4413      	add	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	440b      	add	r3, r1
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d901      	bls.n	8013a52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013a52:	4b11      	ldr	r3, [pc, #68]	; (8013a98 <xTaskIncrementTick+0x168>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d007      	beq.n	8013a6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	617b      	str	r3, [r7, #20]
 8013a5e:	e004      	b.n	8013a6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013a60:	4b0e      	ldr	r3, [pc, #56]	; (8013a9c <xTaskIncrementTick+0x16c>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	3301      	adds	r3, #1
 8013a66:	4a0d      	ldr	r2, [pc, #52]	; (8013a9c <xTaskIncrementTick+0x16c>)
 8013a68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013a6a:	697b      	ldr	r3, [r7, #20]
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3718      	adds	r7, #24
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	200005bc 	.word	0x200005bc
 8013a78:	20000598 	.word	0x20000598
 8013a7c:	2000054c 	.word	0x2000054c
 8013a80:	20000550 	.word	0x20000550
 8013a84:	200005ac 	.word	0x200005ac
 8013a88:	200005b4 	.word	0x200005b4
 8013a8c:	2000059c 	.word	0x2000059c
 8013a90:	20000498 	.word	0x20000498
 8013a94:	20000494 	.word	0x20000494
 8013a98:	200005a8 	.word	0x200005a8
 8013a9c:	200005a4 	.word	0x200005a4

08013aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b087      	sub	sp, #28
 8013aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013aa6:	4b29      	ldr	r3, [pc, #164]	; (8013b4c <vTaskSwitchContext+0xac>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d003      	beq.n	8013ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013aae:	4b28      	ldr	r3, [pc, #160]	; (8013b50 <vTaskSwitchContext+0xb0>)
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ab4:	e044      	b.n	8013b40 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8013ab6:	4b26      	ldr	r3, [pc, #152]	; (8013b50 <vTaskSwitchContext+0xb0>)
 8013ab8:	2200      	movs	r2, #0
 8013aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013abc:	4b25      	ldr	r3, [pc, #148]	; (8013b54 <vTaskSwitchContext+0xb4>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	fab3 f383 	clz	r3, r3
 8013ac8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013aca:	7afb      	ldrb	r3, [r7, #11]
 8013acc:	f1c3 031f 	rsb	r3, r3, #31
 8013ad0:	617b      	str	r3, [r7, #20]
 8013ad2:	4921      	ldr	r1, [pc, #132]	; (8013b58 <vTaskSwitchContext+0xb8>)
 8013ad4:	697a      	ldr	r2, [r7, #20]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	009b      	lsls	r3, r3, #2
 8013ada:	4413      	add	r3, r2
 8013adc:	009b      	lsls	r3, r3, #2
 8013ade:	440b      	add	r3, r1
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d10a      	bne.n	8013afc <vTaskSwitchContext+0x5c>
	__asm volatile
 8013ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aea:	f383 8811 	msr	BASEPRI, r3
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	607b      	str	r3, [r7, #4]
}
 8013af8:	bf00      	nop
 8013afa:	e7fe      	b.n	8013afa <vTaskSwitchContext+0x5a>
 8013afc:	697a      	ldr	r2, [r7, #20]
 8013afe:	4613      	mov	r3, r2
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	4413      	add	r3, r2
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	4a14      	ldr	r2, [pc, #80]	; (8013b58 <vTaskSwitchContext+0xb8>)
 8013b08:	4413      	add	r3, r2
 8013b0a:	613b      	str	r3, [r7, #16]
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	685a      	ldr	r2, [r3, #4]
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	605a      	str	r2, [r3, #4]
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	685a      	ldr	r2, [r3, #4]
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	3308      	adds	r3, #8
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d104      	bne.n	8013b2c <vTaskSwitchContext+0x8c>
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	685a      	ldr	r2, [r3, #4]
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	605a      	str	r2, [r3, #4]
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	68db      	ldr	r3, [r3, #12]
 8013b32:	4a0a      	ldr	r2, [pc, #40]	; (8013b5c <vTaskSwitchContext+0xbc>)
 8013b34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013b36:	4b09      	ldr	r3, [pc, #36]	; (8013b5c <vTaskSwitchContext+0xbc>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	334c      	adds	r3, #76	; 0x4c
 8013b3c:	4a08      	ldr	r2, [pc, #32]	; (8013b60 <vTaskSwitchContext+0xc0>)
 8013b3e:	6013      	str	r3, [r2, #0]
}
 8013b40:	bf00      	nop
 8013b42:	371c      	adds	r7, #28
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	200005bc 	.word	0x200005bc
 8013b50:	200005a8 	.word	0x200005a8
 8013b54:	2000059c 	.word	0x2000059c
 8013b58:	20000498 	.word	0x20000498
 8013b5c:	20000494 	.word	0x20000494
 8013b60:	20000078 	.word	0x20000078

08013b64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d10a      	bne.n	8013b8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b78:	f383 8811 	msr	BASEPRI, r3
 8013b7c:	f3bf 8f6f 	isb	sy
 8013b80:	f3bf 8f4f 	dsb	sy
 8013b84:	60fb      	str	r3, [r7, #12]
}
 8013b86:	bf00      	nop
 8013b88:	e7fe      	b.n	8013b88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b8a:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <vTaskPlaceOnEventList+0x44>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	3318      	adds	r3, #24
 8013b90:	4619      	mov	r1, r3
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f7fe fb67 	bl	8012266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013b98:	2101      	movs	r1, #1
 8013b9a:	6838      	ldr	r0, [r7, #0]
 8013b9c:	f000 fb9c 	bl	80142d8 <prvAddCurrentTaskToDelayedList>
}
 8013ba0:	bf00      	nop
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	20000494 	.word	0x20000494

08013bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d10a      	bne.n	8013bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc6:	f383 8811 	msr	BASEPRI, r3
 8013bca:	f3bf 8f6f 	isb	sy
 8013bce:	f3bf 8f4f 	dsb	sy
 8013bd2:	60fb      	str	r3, [r7, #12]
}
 8013bd4:	bf00      	nop
 8013bd6:	e7fe      	b.n	8013bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	3318      	adds	r3, #24
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fe fb7b 	bl	80122d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013be2:	4b1d      	ldr	r3, [pc, #116]	; (8013c58 <xTaskRemoveFromEventList+0xac>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d11c      	bne.n	8013c24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	3304      	adds	r3, #4
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7fe fb72 	bl	80122d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	409a      	lsls	r2, r3
 8013bfc:	4b17      	ldr	r3, [pc, #92]	; (8013c5c <xTaskRemoveFromEventList+0xb0>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	4313      	orrs	r3, r2
 8013c02:	4a16      	ldr	r2, [pc, #88]	; (8013c5c <xTaskRemoveFromEventList+0xb0>)
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c0a:	4613      	mov	r3, r2
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	4413      	add	r3, r2
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4a13      	ldr	r2, [pc, #76]	; (8013c60 <xTaskRemoveFromEventList+0xb4>)
 8013c14:	441a      	add	r2, r3
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	3304      	adds	r3, #4
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	4610      	mov	r0, r2
 8013c1e:	f7fe fafe 	bl	801221e <vListInsertEnd>
 8013c22:	e005      	b.n	8013c30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	3318      	adds	r3, #24
 8013c28:	4619      	mov	r1, r3
 8013c2a:	480e      	ldr	r0, [pc, #56]	; (8013c64 <xTaskRemoveFromEventList+0xb8>)
 8013c2c:	f7fe faf7 	bl	801221e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c34:	4b0c      	ldr	r3, [pc, #48]	; (8013c68 <xTaskRemoveFromEventList+0xbc>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d905      	bls.n	8013c4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013c42:	4b0a      	ldr	r3, [pc, #40]	; (8013c6c <xTaskRemoveFromEventList+0xc0>)
 8013c44:	2201      	movs	r2, #1
 8013c46:	601a      	str	r2, [r3, #0]
 8013c48:	e001      	b.n	8013c4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013c4e:	697b      	ldr	r3, [r7, #20]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	200005bc 	.word	0x200005bc
 8013c5c:	2000059c 	.word	0x2000059c
 8013c60:	20000498 	.word	0x20000498
 8013c64:	20000554 	.word	0x20000554
 8013c68:	20000494 	.word	0x20000494
 8013c6c:	200005a8 	.word	0x200005a8

08013c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c78:	4b06      	ldr	r3, [pc, #24]	; (8013c94 <vTaskInternalSetTimeOutState+0x24>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013c80:	4b05      	ldr	r3, [pc, #20]	; (8013c98 <vTaskInternalSetTimeOutState+0x28>)
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	605a      	str	r2, [r3, #4]
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr
 8013c94:	200005ac 	.word	0x200005ac
 8013c98:	20000598 	.word	0x20000598

08013c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b088      	sub	sp, #32
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d10a      	bne.n	8013cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb0:	f383 8811 	msr	BASEPRI, r3
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	613b      	str	r3, [r7, #16]
}
 8013cbe:	bf00      	nop
 8013cc0:	e7fe      	b.n	8013cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10a      	bne.n	8013cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ccc:	f383 8811 	msr	BASEPRI, r3
 8013cd0:	f3bf 8f6f 	isb	sy
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	60fb      	str	r3, [r7, #12]
}
 8013cda:	bf00      	nop
 8013cdc:	e7fe      	b.n	8013cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013cde:	f000 fc91 	bl	8014604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013ce2:	4b1d      	ldr	r3, [pc, #116]	; (8013d58 <xTaskCheckForTimeOut+0xbc>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	69ba      	ldr	r2, [r7, #24]
 8013cee:	1ad3      	subs	r3, r2, r3
 8013cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cfa:	d102      	bne.n	8013d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	61fb      	str	r3, [r7, #28]
 8013d00:	e023      	b.n	8013d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <xTaskCheckForTimeOut+0xc0>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d007      	beq.n	8013d1e <xTaskCheckForTimeOut+0x82>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	69ba      	ldr	r2, [r7, #24]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d302      	bcc.n	8013d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	61fb      	str	r3, [r7, #28]
 8013d1c:	e015      	b.n	8013d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	697a      	ldr	r2, [r7, #20]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d20b      	bcs.n	8013d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	1ad2      	subs	r2, r2, r3
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff ff9b 	bl	8013c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	61fb      	str	r3, [r7, #28]
 8013d3e:	e004      	b.n	8013d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	2200      	movs	r2, #0
 8013d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d46:	2301      	movs	r3, #1
 8013d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d4a:	f000 fc8b 	bl	8014664 <vPortExitCritical>

	return xReturn;
 8013d4e:	69fb      	ldr	r3, [r7, #28]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3720      	adds	r7, #32
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}
 8013d58:	20000598 	.word	0x20000598
 8013d5c:	200005ac 	.word	0x200005ac

08013d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013d60:	b480      	push	{r7}
 8013d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013d64:	4b03      	ldr	r3, [pc, #12]	; (8013d74 <vTaskMissedYield+0x14>)
 8013d66:	2201      	movs	r2, #1
 8013d68:	601a      	str	r2, [r3, #0]
}
 8013d6a:	bf00      	nop
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr
 8013d74:	200005a8 	.word	0x200005a8

08013d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013d80:	f000 f852 	bl	8013e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013d84:	4b06      	ldr	r3, [pc, #24]	; (8013da0 <prvIdleTask+0x28>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d9f9      	bls.n	8013d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013d8c:	4b05      	ldr	r3, [pc, #20]	; (8013da4 <prvIdleTask+0x2c>)
 8013d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	f3bf 8f4f 	dsb	sy
 8013d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013d9c:	e7f0      	b.n	8013d80 <prvIdleTask+0x8>
 8013d9e:	bf00      	nop
 8013da0:	20000498 	.word	0x20000498
 8013da4:	e000ed04 	.word	0xe000ed04

08013da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dae:	2300      	movs	r3, #0
 8013db0:	607b      	str	r3, [r7, #4]
 8013db2:	e00c      	b.n	8013dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	4613      	mov	r3, r2
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	4413      	add	r3, r2
 8013dbc:	009b      	lsls	r3, r3, #2
 8013dbe:	4a12      	ldr	r2, [pc, #72]	; (8013e08 <prvInitialiseTaskLists+0x60>)
 8013dc0:	4413      	add	r3, r2
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fe f9fe 	bl	80121c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	607b      	str	r3, [r7, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b06      	cmp	r3, #6
 8013dd2:	d9ef      	bls.n	8013db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013dd4:	480d      	ldr	r0, [pc, #52]	; (8013e0c <prvInitialiseTaskLists+0x64>)
 8013dd6:	f7fe f9f5 	bl	80121c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013dda:	480d      	ldr	r0, [pc, #52]	; (8013e10 <prvInitialiseTaskLists+0x68>)
 8013ddc:	f7fe f9f2 	bl	80121c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013de0:	480c      	ldr	r0, [pc, #48]	; (8013e14 <prvInitialiseTaskLists+0x6c>)
 8013de2:	f7fe f9ef 	bl	80121c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013de6:	480c      	ldr	r0, [pc, #48]	; (8013e18 <prvInitialiseTaskLists+0x70>)
 8013de8:	f7fe f9ec 	bl	80121c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013dec:	480b      	ldr	r0, [pc, #44]	; (8013e1c <prvInitialiseTaskLists+0x74>)
 8013dee:	f7fe f9e9 	bl	80121c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013df2:	4b0b      	ldr	r3, [pc, #44]	; (8013e20 <prvInitialiseTaskLists+0x78>)
 8013df4:	4a05      	ldr	r2, [pc, #20]	; (8013e0c <prvInitialiseTaskLists+0x64>)
 8013df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013df8:	4b0a      	ldr	r3, [pc, #40]	; (8013e24 <prvInitialiseTaskLists+0x7c>)
 8013dfa:	4a05      	ldr	r2, [pc, #20]	; (8013e10 <prvInitialiseTaskLists+0x68>)
 8013dfc:	601a      	str	r2, [r3, #0]
}
 8013dfe:	bf00      	nop
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	20000498 	.word	0x20000498
 8013e0c:	20000524 	.word	0x20000524
 8013e10:	20000538 	.word	0x20000538
 8013e14:	20000554 	.word	0x20000554
 8013e18:	20000568 	.word	0x20000568
 8013e1c:	20000580 	.word	0x20000580
 8013e20:	2000054c 	.word	0x2000054c
 8013e24:	20000550 	.word	0x20000550

08013e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e2e:	e019      	b.n	8013e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e30:	f000 fbe8 	bl	8014604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e34:	4b10      	ldr	r3, [pc, #64]	; (8013e78 <prvCheckTasksWaitingTermination+0x50>)
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	68db      	ldr	r3, [r3, #12]
 8013e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	3304      	adds	r3, #4
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fe fa49 	bl	80122d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e46:	4b0d      	ldr	r3, [pc, #52]	; (8013e7c <prvCheckTasksWaitingTermination+0x54>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	3b01      	subs	r3, #1
 8013e4c:	4a0b      	ldr	r2, [pc, #44]	; (8013e7c <prvCheckTasksWaitingTermination+0x54>)
 8013e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e50:	4b0b      	ldr	r3, [pc, #44]	; (8013e80 <prvCheckTasksWaitingTermination+0x58>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	3b01      	subs	r3, #1
 8013e56:	4a0a      	ldr	r2, [pc, #40]	; (8013e80 <prvCheckTasksWaitingTermination+0x58>)
 8013e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e5a:	f000 fc03 	bl	8014664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 f848 	bl	8013ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e64:	4b06      	ldr	r3, [pc, #24]	; (8013e80 <prvCheckTasksWaitingTermination+0x58>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d1e1      	bne.n	8013e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013e6c:	bf00      	nop
 8013e6e:	bf00      	nop
 8013e70:	3708      	adds	r7, #8
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	20000568 	.word	0x20000568
 8013e7c:	20000594 	.word	0x20000594
 8013e80:	2000057c 	.word	0x2000057c

08013e84 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8013e84:	b480      	push	{r7}
 8013e86:	b085      	sub	sp, #20
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013e90:	e005      	b.n	8013e9e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	3301      	adds	r3, #1
 8013e96:	607b      	str	r3, [r7, #4]
			ulCount++;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	2ba5      	cmp	r3, #165	; 0xa5
 8013ea4:	d0f5      	beq.n	8013e92 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	089b      	lsrs	r3, r3, #2
 8013eaa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	b29b      	uxth	r3, r3
	}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3714      	adds	r7, #20
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b086      	sub	sp, #24
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d102      	bne.n	8013ed0 <uxTaskGetStackHighWaterMark+0x14>
 8013eca:	4b09      	ldr	r3, [pc, #36]	; (8013ef0 <uxTaskGetStackHighWaterMark+0x34>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	e000      	b.n	8013ed2 <uxTaskGetStackHighWaterMark+0x16>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ed8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8013eda:	6938      	ldr	r0, [r7, #16]
 8013edc:	f7ff ffd2 	bl	8013e84 <prvTaskCheckFreeStackSpace>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
	}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3718      	adds	r7, #24
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	20000494 	.word	0x20000494

08013ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	334c      	adds	r3, #76	; 0x4c
 8013f00:	4618      	mov	r0, r3
 8013f02:	f000 ff4d 	bl	8014da0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f000 fd68 	bl	80149e0 <vPortFree>
			vPortFree( pxTCB );
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 fd65 	bl	80149e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013f16:	bf00      	nop
 8013f18:	3708      	adds	r7, #8
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
	...

08013f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f26:	4b0c      	ldr	r3, [pc, #48]	; (8013f58 <prvResetNextTaskUnblockTime+0x38>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d104      	bne.n	8013f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f30:	4b0a      	ldr	r3, [pc, #40]	; (8013f5c <prvResetNextTaskUnblockTime+0x3c>)
 8013f32:	f04f 32ff 	mov.w	r2, #4294967295
 8013f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013f38:	e008      	b.n	8013f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f3a:	4b07      	ldr	r3, [pc, #28]	; (8013f58 <prvResetNextTaskUnblockTime+0x38>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	4a04      	ldr	r2, [pc, #16]	; (8013f5c <prvResetNextTaskUnblockTime+0x3c>)
 8013f4a:	6013      	str	r3, [r2, #0]
}
 8013f4c:	bf00      	nop
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr
 8013f58:	2000054c 	.word	0x2000054c
 8013f5c:	200005b4 	.word	0x200005b4

08013f60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f66:	4b0b      	ldr	r3, [pc, #44]	; (8013f94 <xTaskGetSchedulerState+0x34>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d102      	bne.n	8013f74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013f6e:	2301      	movs	r3, #1
 8013f70:	607b      	str	r3, [r7, #4]
 8013f72:	e008      	b.n	8013f86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f74:	4b08      	ldr	r3, [pc, #32]	; (8013f98 <xTaskGetSchedulerState+0x38>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013f7c:	2302      	movs	r3, #2
 8013f7e:	607b      	str	r3, [r7, #4]
 8013f80:	e001      	b.n	8013f86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013f82:	2300      	movs	r3, #0
 8013f84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013f86:	687b      	ldr	r3, [r7, #4]
	}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	370c      	adds	r7, #12
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr
 8013f94:	200005a0 	.word	0x200005a0
 8013f98:	200005bc 	.word	0x200005bc

08013f9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d05e      	beq.n	8014070 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb6:	4b31      	ldr	r3, [pc, #196]	; (801407c <xTaskPriorityInherit+0xe0>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d24e      	bcs.n	801405e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	699b      	ldr	r3, [r3, #24]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	db06      	blt.n	8013fd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fc8:	4b2c      	ldr	r3, [pc, #176]	; (801407c <xTaskPriorityInherit+0xe0>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fce:	f1c3 0207 	rsb	r2, r3, #7
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	6959      	ldr	r1, [r3, #20]
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fde:	4613      	mov	r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	4413      	add	r3, r2
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	4a26      	ldr	r2, [pc, #152]	; (8014080 <xTaskPriorityInherit+0xe4>)
 8013fe8:	4413      	add	r3, r2
 8013fea:	4299      	cmp	r1, r3
 8013fec:	d12f      	bne.n	801404e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fe f970 	bl	80122d8 <uxListRemove>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d10a      	bne.n	8014014 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014002:	2201      	movs	r2, #1
 8014004:	fa02 f303 	lsl.w	r3, r2, r3
 8014008:	43da      	mvns	r2, r3
 801400a:	4b1e      	ldr	r3, [pc, #120]	; (8014084 <xTaskPriorityInherit+0xe8>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	4013      	ands	r3, r2
 8014010:	4a1c      	ldr	r2, [pc, #112]	; (8014084 <xTaskPriorityInherit+0xe8>)
 8014012:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014014:	4b19      	ldr	r3, [pc, #100]	; (801407c <xTaskPriorityInherit+0xe0>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014022:	2201      	movs	r2, #1
 8014024:	409a      	lsls	r2, r3
 8014026:	4b17      	ldr	r3, [pc, #92]	; (8014084 <xTaskPriorityInherit+0xe8>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	4313      	orrs	r3, r2
 801402c:	4a15      	ldr	r2, [pc, #84]	; (8014084 <xTaskPriorityInherit+0xe8>)
 801402e:	6013      	str	r3, [r2, #0]
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014034:	4613      	mov	r3, r2
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	4a10      	ldr	r2, [pc, #64]	; (8014080 <xTaskPriorityInherit+0xe4>)
 801403e:	441a      	add	r2, r3
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	3304      	adds	r3, #4
 8014044:	4619      	mov	r1, r3
 8014046:	4610      	mov	r0, r2
 8014048:	f7fe f8e9 	bl	801221e <vListInsertEnd>
 801404c:	e004      	b.n	8014058 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801404e:	4b0b      	ldr	r3, [pc, #44]	; (801407c <xTaskPriorityInherit+0xe0>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014058:	2301      	movs	r3, #1
 801405a:	60fb      	str	r3, [r7, #12]
 801405c:	e008      	b.n	8014070 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014062:	4b06      	ldr	r3, [pc, #24]	; (801407c <xTaskPriorityInherit+0xe0>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014068:	429a      	cmp	r2, r3
 801406a:	d201      	bcs.n	8014070 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801406c:	2301      	movs	r3, #1
 801406e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014070:	68fb      	ldr	r3, [r7, #12]
	}
 8014072:	4618      	mov	r0, r3
 8014074:	3710      	adds	r7, #16
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
 801407a:	bf00      	nop
 801407c:	20000494 	.word	0x20000494
 8014080:	20000498 	.word	0x20000498
 8014084:	2000059c 	.word	0x2000059c

08014088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014088:	b580      	push	{r7, lr}
 801408a:	b086      	sub	sp, #24
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014094:	2300      	movs	r3, #0
 8014096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d06e      	beq.n	801417c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801409e:	4b3a      	ldr	r3, [pc, #232]	; (8014188 <xTaskPriorityDisinherit+0x100>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	693a      	ldr	r2, [r7, #16]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d00a      	beq.n	80140be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80140a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ac:	f383 8811 	msr	BASEPRI, r3
 80140b0:	f3bf 8f6f 	isb	sy
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	60fb      	str	r3, [r7, #12]
}
 80140ba:	bf00      	nop
 80140bc:	e7fe      	b.n	80140bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d10a      	bne.n	80140dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80140c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ca:	f383 8811 	msr	BASEPRI, r3
 80140ce:	f3bf 8f6f 	isb	sy
 80140d2:	f3bf 8f4f 	dsb	sy
 80140d6:	60bb      	str	r3, [r7, #8]
}
 80140d8:	bf00      	nop
 80140da:	e7fe      	b.n	80140da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140e0:	1e5a      	subs	r2, r3, #1
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d044      	beq.n	801417c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d140      	bne.n	801417c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	3304      	adds	r3, #4
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fe f8ea 	bl	80122d8 <uxListRemove>
 8014104:	4603      	mov	r3, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d115      	bne.n	8014136 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801410e:	491f      	ldr	r1, [pc, #124]	; (801418c <xTaskPriorityDisinherit+0x104>)
 8014110:	4613      	mov	r3, r2
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4413      	add	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	440b      	add	r3, r1
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10a      	bne.n	8014136 <xTaskPriorityDisinherit+0xae>
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014124:	2201      	movs	r2, #1
 8014126:	fa02 f303 	lsl.w	r3, r2, r3
 801412a:	43da      	mvns	r2, r3
 801412c:	4b18      	ldr	r3, [pc, #96]	; (8014190 <xTaskPriorityDisinherit+0x108>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	4013      	ands	r3, r2
 8014132:	4a17      	ldr	r2, [pc, #92]	; (8014190 <xTaskPriorityDisinherit+0x108>)
 8014134:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801413e:	693b      	ldr	r3, [r7, #16]
 8014140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014142:	f1c3 0207 	rsb	r2, r3, #7
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414e:	2201      	movs	r2, #1
 8014150:	409a      	lsls	r2, r3
 8014152:	4b0f      	ldr	r3, [pc, #60]	; (8014190 <xTaskPriorityDisinherit+0x108>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	4313      	orrs	r3, r2
 8014158:	4a0d      	ldr	r2, [pc, #52]	; (8014190 <xTaskPriorityDisinherit+0x108>)
 801415a:	6013      	str	r3, [r2, #0]
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014160:	4613      	mov	r3, r2
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	4413      	add	r3, r2
 8014166:	009b      	lsls	r3, r3, #2
 8014168:	4a08      	ldr	r2, [pc, #32]	; (801418c <xTaskPriorityDisinherit+0x104>)
 801416a:	441a      	add	r2, r3
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	3304      	adds	r3, #4
 8014170:	4619      	mov	r1, r3
 8014172:	4610      	mov	r0, r2
 8014174:	f7fe f853 	bl	801221e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014178:	2301      	movs	r3, #1
 801417a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801417c:	697b      	ldr	r3, [r7, #20]
	}
 801417e:	4618      	mov	r0, r3
 8014180:	3718      	adds	r7, #24
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	20000494 	.word	0x20000494
 801418c:	20000498 	.word	0x20000498
 8014190:	2000059c 	.word	0x2000059c

08014194 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014194:	b580      	push	{r7, lr}
 8014196:	b088      	sub	sp, #32
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80141a2:	2301      	movs	r3, #1
 80141a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d077      	beq.n	801429c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10a      	bne.n	80141ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80141b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b8:	f383 8811 	msr	BASEPRI, r3
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	60fb      	str	r3, [r7, #12]
}
 80141c6:	bf00      	nop
 80141c8:	e7fe      	b.n	80141c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141ce:	683a      	ldr	r2, [r7, #0]
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d902      	bls.n	80141da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	61fb      	str	r3, [r7, #28]
 80141d8:	e002      	b.n	80141e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e4:	69fa      	ldr	r2, [r7, #28]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d058      	beq.n	801429c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141ee:	697a      	ldr	r2, [r7, #20]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d153      	bne.n	801429c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80141f4:	4b2b      	ldr	r3, [pc, #172]	; (80142a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	69ba      	ldr	r2, [r7, #24]
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d10a      	bne.n	8014214 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80141fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014202:	f383 8811 	msr	BASEPRI, r3
 8014206:	f3bf 8f6f 	isb	sy
 801420a:	f3bf 8f4f 	dsb	sy
 801420e:	60bb      	str	r3, [r7, #8]
}
 8014210:	bf00      	nop
 8014212:	e7fe      	b.n	8014212 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014218:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801421a:	69bb      	ldr	r3, [r7, #24]
 801421c:	69fa      	ldr	r2, [r7, #28]
 801421e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	699b      	ldr	r3, [r3, #24]
 8014224:	2b00      	cmp	r3, #0
 8014226:	db04      	blt.n	8014232 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	f1c3 0207 	rsb	r2, r3, #7
 801422e:	69bb      	ldr	r3, [r7, #24]
 8014230:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	6959      	ldr	r1, [r3, #20]
 8014236:	693a      	ldr	r2, [r7, #16]
 8014238:	4613      	mov	r3, r2
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	4413      	add	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	4a19      	ldr	r2, [pc, #100]	; (80142a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014242:	4413      	add	r3, r2
 8014244:	4299      	cmp	r1, r3
 8014246:	d129      	bne.n	801429c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	3304      	adds	r3, #4
 801424c:	4618      	mov	r0, r3
 801424e:	f7fe f843 	bl	80122d8 <uxListRemove>
 8014252:	4603      	mov	r3, r0
 8014254:	2b00      	cmp	r3, #0
 8014256:	d10a      	bne.n	801426e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801425c:	2201      	movs	r2, #1
 801425e:	fa02 f303 	lsl.w	r3, r2, r3
 8014262:	43da      	mvns	r2, r3
 8014264:	4b11      	ldr	r3, [pc, #68]	; (80142ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	4013      	ands	r3, r2
 801426a:	4a10      	ldr	r2, [pc, #64]	; (80142ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801426c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014272:	2201      	movs	r2, #1
 8014274:	409a      	lsls	r2, r3
 8014276:	4b0d      	ldr	r3, [pc, #52]	; (80142ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4313      	orrs	r3, r2
 801427c:	4a0b      	ldr	r2, [pc, #44]	; (80142ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801427e:	6013      	str	r3, [r2, #0]
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014284:	4613      	mov	r3, r2
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	4413      	add	r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	4a06      	ldr	r2, [pc, #24]	; (80142a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801428e:	441a      	add	r2, r3
 8014290:	69bb      	ldr	r3, [r7, #24]
 8014292:	3304      	adds	r3, #4
 8014294:	4619      	mov	r1, r3
 8014296:	4610      	mov	r0, r2
 8014298:	f7fd ffc1 	bl	801221e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801429c:	bf00      	nop
 801429e:	3720      	adds	r7, #32
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	20000494 	.word	0x20000494
 80142a8:	20000498 	.word	0x20000498
 80142ac:	2000059c 	.word	0x2000059c

080142b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80142b0:	b480      	push	{r7}
 80142b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80142b4:	4b07      	ldr	r3, [pc, #28]	; (80142d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d004      	beq.n	80142c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80142bc:	4b05      	ldr	r3, [pc, #20]	; (80142d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80142c2:	3201      	adds	r2, #1
 80142c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80142c6:	4b03      	ldr	r3, [pc, #12]	; (80142d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80142c8:	681b      	ldr	r3, [r3, #0]
	}
 80142ca:	4618      	mov	r0, r3
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr
 80142d4:	20000494 	.word	0x20000494

080142d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80142e2:	4b29      	ldr	r3, [pc, #164]	; (8014388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80142e8:	4b28      	ldr	r3, [pc, #160]	; (801438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	3304      	adds	r3, #4
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7fd fff2 	bl	80122d8 <uxListRemove>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d10b      	bne.n	8014312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80142fa:	4b24      	ldr	r3, [pc, #144]	; (801438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014300:	2201      	movs	r2, #1
 8014302:	fa02 f303 	lsl.w	r3, r2, r3
 8014306:	43da      	mvns	r2, r3
 8014308:	4b21      	ldr	r3, [pc, #132]	; (8014390 <prvAddCurrentTaskToDelayedList+0xb8>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	4013      	ands	r3, r2
 801430e:	4a20      	ldr	r2, [pc, #128]	; (8014390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014318:	d10a      	bne.n	8014330 <prvAddCurrentTaskToDelayedList+0x58>
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d007      	beq.n	8014330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014320:	4b1a      	ldr	r3, [pc, #104]	; (801438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	3304      	adds	r3, #4
 8014326:	4619      	mov	r1, r3
 8014328:	481a      	ldr	r0, [pc, #104]	; (8014394 <prvAddCurrentTaskToDelayedList+0xbc>)
 801432a:	f7fd ff78 	bl	801221e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801432e:	e026      	b.n	801437e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014330:	68fa      	ldr	r2, [r7, #12]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	4413      	add	r3, r2
 8014336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014338:	4b14      	ldr	r3, [pc, #80]	; (801438c <prvAddCurrentTaskToDelayedList+0xb4>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68ba      	ldr	r2, [r7, #8]
 801433e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014340:	68ba      	ldr	r2, [r7, #8]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	429a      	cmp	r2, r3
 8014346:	d209      	bcs.n	801435c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014348:	4b13      	ldr	r3, [pc, #76]	; (8014398 <prvAddCurrentTaskToDelayedList+0xc0>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	4b0f      	ldr	r3, [pc, #60]	; (801438c <prvAddCurrentTaskToDelayedList+0xb4>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	3304      	adds	r3, #4
 8014352:	4619      	mov	r1, r3
 8014354:	4610      	mov	r0, r2
 8014356:	f7fd ff86 	bl	8012266 <vListInsert>
}
 801435a:	e010      	b.n	801437e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801435c:	4b0f      	ldr	r3, [pc, #60]	; (801439c <prvAddCurrentTaskToDelayedList+0xc4>)
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	4b0a      	ldr	r3, [pc, #40]	; (801438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	3304      	adds	r3, #4
 8014366:	4619      	mov	r1, r3
 8014368:	4610      	mov	r0, r2
 801436a:	f7fd ff7c 	bl	8012266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801436e:	4b0c      	ldr	r3, [pc, #48]	; (80143a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	68ba      	ldr	r2, [r7, #8]
 8014374:	429a      	cmp	r2, r3
 8014376:	d202      	bcs.n	801437e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014378:	4a09      	ldr	r2, [pc, #36]	; (80143a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	6013      	str	r3, [r2, #0]
}
 801437e:	bf00      	nop
 8014380:	3710      	adds	r7, #16
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop
 8014388:	20000598 	.word	0x20000598
 801438c:	20000494 	.word	0x20000494
 8014390:	2000059c 	.word	0x2000059c
 8014394:	20000580 	.word	0x20000580
 8014398:	20000550 	.word	0x20000550
 801439c:	2000054c 	.word	0x2000054c
 80143a0:	200005b4 	.word	0x200005b4

080143a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60f8      	str	r0, [r7, #12]
 80143ac:	60b9      	str	r1, [r7, #8]
 80143ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	3b04      	subs	r3, #4
 80143b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80143bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	3b04      	subs	r3, #4
 80143c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	f023 0201 	bic.w	r2, r3, #1
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	3b04      	subs	r3, #4
 80143d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80143d4:	4a0c      	ldr	r2, [pc, #48]	; (8014408 <pxPortInitialiseStack+0x64>)
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	3b14      	subs	r3, #20
 80143de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	3b04      	subs	r3, #4
 80143ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f06f 0202 	mvn.w	r2, #2
 80143f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	3b20      	subs	r3, #32
 80143f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80143fa:	68fb      	ldr	r3, [r7, #12]
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3714      	adds	r7, #20
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr
 8014408:	0801440d 	.word	0x0801440d

0801440c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801440c:	b480      	push	{r7}
 801440e:	b085      	sub	sp, #20
 8014410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014412:	2300      	movs	r3, #0
 8014414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014416:	4b12      	ldr	r3, [pc, #72]	; (8014460 <prvTaskExitError+0x54>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801441e:	d00a      	beq.n	8014436 <prvTaskExitError+0x2a>
	__asm volatile
 8014420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014424:	f383 8811 	msr	BASEPRI, r3
 8014428:	f3bf 8f6f 	isb	sy
 801442c:	f3bf 8f4f 	dsb	sy
 8014430:	60fb      	str	r3, [r7, #12]
}
 8014432:	bf00      	nop
 8014434:	e7fe      	b.n	8014434 <prvTaskExitError+0x28>
	__asm volatile
 8014436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443a:	f383 8811 	msr	BASEPRI, r3
 801443e:	f3bf 8f6f 	isb	sy
 8014442:	f3bf 8f4f 	dsb	sy
 8014446:	60bb      	str	r3, [r7, #8]
}
 8014448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801444a:	bf00      	nop
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d0fc      	beq.n	801444c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014452:	bf00      	nop
 8014454:	bf00      	nop
 8014456:	3714      	adds	r7, #20
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr
 8014460:	20000074 	.word	0x20000074
	...

08014470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014470:	4b07      	ldr	r3, [pc, #28]	; (8014490 <pxCurrentTCBConst2>)
 8014472:	6819      	ldr	r1, [r3, #0]
 8014474:	6808      	ldr	r0, [r1, #0]
 8014476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447a:	f380 8809 	msr	PSP, r0
 801447e:	f3bf 8f6f 	isb	sy
 8014482:	f04f 0000 	mov.w	r0, #0
 8014486:	f380 8811 	msr	BASEPRI, r0
 801448a:	4770      	bx	lr
 801448c:	f3af 8000 	nop.w

08014490 <pxCurrentTCBConst2>:
 8014490:	20000494 	.word	0x20000494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014494:	bf00      	nop
 8014496:	bf00      	nop

08014498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014498:	4808      	ldr	r0, [pc, #32]	; (80144bc <prvPortStartFirstTask+0x24>)
 801449a:	6800      	ldr	r0, [r0, #0]
 801449c:	6800      	ldr	r0, [r0, #0]
 801449e:	f380 8808 	msr	MSP, r0
 80144a2:	f04f 0000 	mov.w	r0, #0
 80144a6:	f380 8814 	msr	CONTROL, r0
 80144aa:	b662      	cpsie	i
 80144ac:	b661      	cpsie	f
 80144ae:	f3bf 8f4f 	dsb	sy
 80144b2:	f3bf 8f6f 	isb	sy
 80144b6:	df00      	svc	0
 80144b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80144ba:	bf00      	nop
 80144bc:	e000ed08 	.word	0xe000ed08

080144c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b086      	sub	sp, #24
 80144c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80144c6:	4b46      	ldr	r3, [pc, #280]	; (80145e0 <xPortStartScheduler+0x120>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	4a46      	ldr	r2, [pc, #280]	; (80145e4 <xPortStartScheduler+0x124>)
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d10a      	bne.n	80144e6 <xPortStartScheduler+0x26>
	__asm volatile
 80144d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d4:	f383 8811 	msr	BASEPRI, r3
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	613b      	str	r3, [r7, #16]
}
 80144e2:	bf00      	nop
 80144e4:	e7fe      	b.n	80144e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80144e6:	4b3e      	ldr	r3, [pc, #248]	; (80145e0 <xPortStartScheduler+0x120>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a3f      	ldr	r2, [pc, #252]	; (80145e8 <xPortStartScheduler+0x128>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d10a      	bne.n	8014506 <xPortStartScheduler+0x46>
	__asm volatile
 80144f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f4:	f383 8811 	msr	BASEPRI, r3
 80144f8:	f3bf 8f6f 	isb	sy
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	60fb      	str	r3, [r7, #12]
}
 8014502:	bf00      	nop
 8014504:	e7fe      	b.n	8014504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014506:	4b39      	ldr	r3, [pc, #228]	; (80145ec <xPortStartScheduler+0x12c>)
 8014508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	b2db      	uxtb	r3, r3
 8014510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	22ff      	movs	r2, #255	; 0xff
 8014516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	b2db      	uxtb	r3, r3
 801451e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014520:	78fb      	ldrb	r3, [r7, #3]
 8014522:	b2db      	uxtb	r3, r3
 8014524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014528:	b2da      	uxtb	r2, r3
 801452a:	4b31      	ldr	r3, [pc, #196]	; (80145f0 <xPortStartScheduler+0x130>)
 801452c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801452e:	4b31      	ldr	r3, [pc, #196]	; (80145f4 <xPortStartScheduler+0x134>)
 8014530:	2207      	movs	r2, #7
 8014532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014534:	e009      	b.n	801454a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014536:	4b2f      	ldr	r3, [pc, #188]	; (80145f4 <xPortStartScheduler+0x134>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	3b01      	subs	r3, #1
 801453c:	4a2d      	ldr	r2, [pc, #180]	; (80145f4 <xPortStartScheduler+0x134>)
 801453e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014540:	78fb      	ldrb	r3, [r7, #3]
 8014542:	b2db      	uxtb	r3, r3
 8014544:	005b      	lsls	r3, r3, #1
 8014546:	b2db      	uxtb	r3, r3
 8014548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801454a:	78fb      	ldrb	r3, [r7, #3]
 801454c:	b2db      	uxtb	r3, r3
 801454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014552:	2b80      	cmp	r3, #128	; 0x80
 8014554:	d0ef      	beq.n	8014536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014556:	4b27      	ldr	r3, [pc, #156]	; (80145f4 <xPortStartScheduler+0x134>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	f1c3 0307 	rsb	r3, r3, #7
 801455e:	2b04      	cmp	r3, #4
 8014560:	d00a      	beq.n	8014578 <xPortStartScheduler+0xb8>
	__asm volatile
 8014562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014566:	f383 8811 	msr	BASEPRI, r3
 801456a:	f3bf 8f6f 	isb	sy
 801456e:	f3bf 8f4f 	dsb	sy
 8014572:	60bb      	str	r3, [r7, #8]
}
 8014574:	bf00      	nop
 8014576:	e7fe      	b.n	8014576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014578:	4b1e      	ldr	r3, [pc, #120]	; (80145f4 <xPortStartScheduler+0x134>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	021b      	lsls	r3, r3, #8
 801457e:	4a1d      	ldr	r2, [pc, #116]	; (80145f4 <xPortStartScheduler+0x134>)
 8014580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014582:	4b1c      	ldr	r3, [pc, #112]	; (80145f4 <xPortStartScheduler+0x134>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801458a:	4a1a      	ldr	r2, [pc, #104]	; (80145f4 <xPortStartScheduler+0x134>)
 801458c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	b2da      	uxtb	r2, r3
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014596:	4b18      	ldr	r3, [pc, #96]	; (80145f8 <xPortStartScheduler+0x138>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4a17      	ldr	r2, [pc, #92]	; (80145f8 <xPortStartScheduler+0x138>)
 801459c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80145a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80145a2:	4b15      	ldr	r3, [pc, #84]	; (80145f8 <xPortStartScheduler+0x138>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	4a14      	ldr	r2, [pc, #80]	; (80145f8 <xPortStartScheduler+0x138>)
 80145a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80145ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80145ae:	f000 f8dd 	bl	801476c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80145b2:	4b12      	ldr	r3, [pc, #72]	; (80145fc <xPortStartScheduler+0x13c>)
 80145b4:	2200      	movs	r2, #0
 80145b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80145b8:	f000 f8fc 	bl	80147b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80145bc:	4b10      	ldr	r3, [pc, #64]	; (8014600 <xPortStartScheduler+0x140>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a0f      	ldr	r2, [pc, #60]	; (8014600 <xPortStartScheduler+0x140>)
 80145c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80145c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80145c8:	f7ff ff66 	bl	8014498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80145cc:	f7ff fa68 	bl	8013aa0 <vTaskSwitchContext>
	prvTaskExitError();
 80145d0:	f7ff ff1c 	bl	801440c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80145d4:	2300      	movs	r3, #0
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3718      	adds	r7, #24
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	e000ed00 	.word	0xe000ed00
 80145e4:	410fc271 	.word	0x410fc271
 80145e8:	410fc270 	.word	0x410fc270
 80145ec:	e000e400 	.word	0xe000e400
 80145f0:	200005c0 	.word	0x200005c0
 80145f4:	200005c4 	.word	0x200005c4
 80145f8:	e000ed20 	.word	0xe000ed20
 80145fc:	20000074 	.word	0x20000074
 8014600:	e000ef34 	.word	0xe000ef34

08014604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014604:	b480      	push	{r7}
 8014606:	b083      	sub	sp, #12
 8014608:	af00      	add	r7, sp, #0
	__asm volatile
 801460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460e:	f383 8811 	msr	BASEPRI, r3
 8014612:	f3bf 8f6f 	isb	sy
 8014616:	f3bf 8f4f 	dsb	sy
 801461a:	607b      	str	r3, [r7, #4]
}
 801461c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801461e:	4b0f      	ldr	r3, [pc, #60]	; (801465c <vPortEnterCritical+0x58>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	3301      	adds	r3, #1
 8014624:	4a0d      	ldr	r2, [pc, #52]	; (801465c <vPortEnterCritical+0x58>)
 8014626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014628:	4b0c      	ldr	r3, [pc, #48]	; (801465c <vPortEnterCritical+0x58>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b01      	cmp	r3, #1
 801462e:	d10f      	bne.n	8014650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014630:	4b0b      	ldr	r3, [pc, #44]	; (8014660 <vPortEnterCritical+0x5c>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	b2db      	uxtb	r3, r3
 8014636:	2b00      	cmp	r3, #0
 8014638:	d00a      	beq.n	8014650 <vPortEnterCritical+0x4c>
	__asm volatile
 801463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801463e:	f383 8811 	msr	BASEPRI, r3
 8014642:	f3bf 8f6f 	isb	sy
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	603b      	str	r3, [r7, #0]
}
 801464c:	bf00      	nop
 801464e:	e7fe      	b.n	801464e <vPortEnterCritical+0x4a>
	}
}
 8014650:	bf00      	nop
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	20000074 	.word	0x20000074
 8014660:	e000ed04 	.word	0xe000ed04

08014664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801466a:	4b12      	ldr	r3, [pc, #72]	; (80146b4 <vPortExitCritical+0x50>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10a      	bne.n	8014688 <vPortExitCritical+0x24>
	__asm volatile
 8014672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014676:	f383 8811 	msr	BASEPRI, r3
 801467a:	f3bf 8f6f 	isb	sy
 801467e:	f3bf 8f4f 	dsb	sy
 8014682:	607b      	str	r3, [r7, #4]
}
 8014684:	bf00      	nop
 8014686:	e7fe      	b.n	8014686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014688:	4b0a      	ldr	r3, [pc, #40]	; (80146b4 <vPortExitCritical+0x50>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	3b01      	subs	r3, #1
 801468e:	4a09      	ldr	r2, [pc, #36]	; (80146b4 <vPortExitCritical+0x50>)
 8014690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014692:	4b08      	ldr	r3, [pc, #32]	; (80146b4 <vPortExitCritical+0x50>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d105      	bne.n	80146a6 <vPortExitCritical+0x42>
 801469a:	2300      	movs	r3, #0
 801469c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	f383 8811 	msr	BASEPRI, r3
}
 80146a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80146a6:	bf00      	nop
 80146a8:	370c      	adds	r7, #12
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	20000074 	.word	0x20000074
	...

080146c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80146c0:	f3ef 8009 	mrs	r0, PSP
 80146c4:	f3bf 8f6f 	isb	sy
 80146c8:	4b15      	ldr	r3, [pc, #84]	; (8014720 <pxCurrentTCBConst>)
 80146ca:	681a      	ldr	r2, [r3, #0]
 80146cc:	f01e 0f10 	tst.w	lr, #16
 80146d0:	bf08      	it	eq
 80146d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80146d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146da:	6010      	str	r0, [r2, #0]
 80146dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80146e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80146e4:	f380 8811 	msr	BASEPRI, r0
 80146e8:	f3bf 8f4f 	dsb	sy
 80146ec:	f3bf 8f6f 	isb	sy
 80146f0:	f7ff f9d6 	bl	8013aa0 <vTaskSwitchContext>
 80146f4:	f04f 0000 	mov.w	r0, #0
 80146f8:	f380 8811 	msr	BASEPRI, r0
 80146fc:	bc09      	pop	{r0, r3}
 80146fe:	6819      	ldr	r1, [r3, #0]
 8014700:	6808      	ldr	r0, [r1, #0]
 8014702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014706:	f01e 0f10 	tst.w	lr, #16
 801470a:	bf08      	it	eq
 801470c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014710:	f380 8809 	msr	PSP, r0
 8014714:	f3bf 8f6f 	isb	sy
 8014718:	4770      	bx	lr
 801471a:	bf00      	nop
 801471c:	f3af 8000 	nop.w

08014720 <pxCurrentTCBConst>:
 8014720:	20000494 	.word	0x20000494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014724:	bf00      	nop
 8014726:	bf00      	nop

08014728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
	__asm volatile
 801472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014732:	f383 8811 	msr	BASEPRI, r3
 8014736:	f3bf 8f6f 	isb	sy
 801473a:	f3bf 8f4f 	dsb	sy
 801473e:	607b      	str	r3, [r7, #4]
}
 8014740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014742:	f7ff f8f5 	bl	8013930 <xTaskIncrementTick>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d003      	beq.n	8014754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801474c:	4b06      	ldr	r3, [pc, #24]	; (8014768 <SysTick_Handler+0x40>)
 801474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014752:	601a      	str	r2, [r3, #0]
 8014754:	2300      	movs	r3, #0
 8014756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	f383 8811 	msr	BASEPRI, r3
}
 801475e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014760:	bf00      	nop
 8014762:	3708      	adds	r7, #8
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}
 8014768:	e000ed04 	.word	0xe000ed04

0801476c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801476c:	b480      	push	{r7}
 801476e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014770:	4b0b      	ldr	r3, [pc, #44]	; (80147a0 <vPortSetupTimerInterrupt+0x34>)
 8014772:	2200      	movs	r2, #0
 8014774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014776:	4b0b      	ldr	r3, [pc, #44]	; (80147a4 <vPortSetupTimerInterrupt+0x38>)
 8014778:	2200      	movs	r2, #0
 801477a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801477c:	4b0a      	ldr	r3, [pc, #40]	; (80147a8 <vPortSetupTimerInterrupt+0x3c>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4a0a      	ldr	r2, [pc, #40]	; (80147ac <vPortSetupTimerInterrupt+0x40>)
 8014782:	fba2 2303 	umull	r2, r3, r2, r3
 8014786:	099b      	lsrs	r3, r3, #6
 8014788:	4a09      	ldr	r2, [pc, #36]	; (80147b0 <vPortSetupTimerInterrupt+0x44>)
 801478a:	3b01      	subs	r3, #1
 801478c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801478e:	4b04      	ldr	r3, [pc, #16]	; (80147a0 <vPortSetupTimerInterrupt+0x34>)
 8014790:	2207      	movs	r2, #7
 8014792:	601a      	str	r2, [r3, #0]
}
 8014794:	bf00      	nop
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	e000e010 	.word	0xe000e010
 80147a4:	e000e018 	.word	0xe000e018
 80147a8:	20000018 	.word	0x20000018
 80147ac:	10624dd3 	.word	0x10624dd3
 80147b0:	e000e014 	.word	0xe000e014

080147b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80147b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80147c4 <vPortEnableVFP+0x10>
 80147b8:	6801      	ldr	r1, [r0, #0]
 80147ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80147be:	6001      	str	r1, [r0, #0]
 80147c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80147c2:	bf00      	nop
 80147c4:	e000ed88 	.word	0xe000ed88

080147c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80147c8:	b480      	push	{r7}
 80147ca:	b085      	sub	sp, #20
 80147cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80147ce:	f3ef 8305 	mrs	r3, IPSR
 80147d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b0f      	cmp	r3, #15
 80147d8:	d914      	bls.n	8014804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80147da:	4a17      	ldr	r2, [pc, #92]	; (8014838 <vPortValidateInterruptPriority+0x70>)
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	4413      	add	r3, r2
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80147e4:	4b15      	ldr	r3, [pc, #84]	; (801483c <vPortValidateInterruptPriority+0x74>)
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	7afa      	ldrb	r2, [r7, #11]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d20a      	bcs.n	8014804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80147ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f2:	f383 8811 	msr	BASEPRI, r3
 80147f6:	f3bf 8f6f 	isb	sy
 80147fa:	f3bf 8f4f 	dsb	sy
 80147fe:	607b      	str	r3, [r7, #4]
}
 8014800:	bf00      	nop
 8014802:	e7fe      	b.n	8014802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014804:	4b0e      	ldr	r3, [pc, #56]	; (8014840 <vPortValidateInterruptPriority+0x78>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801480c:	4b0d      	ldr	r3, [pc, #52]	; (8014844 <vPortValidateInterruptPriority+0x7c>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	429a      	cmp	r2, r3
 8014812:	d90a      	bls.n	801482a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014818:	f383 8811 	msr	BASEPRI, r3
 801481c:	f3bf 8f6f 	isb	sy
 8014820:	f3bf 8f4f 	dsb	sy
 8014824:	603b      	str	r3, [r7, #0]
}
 8014826:	bf00      	nop
 8014828:	e7fe      	b.n	8014828 <vPortValidateInterruptPriority+0x60>
	}
 801482a:	bf00      	nop
 801482c:	3714      	adds	r7, #20
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	e000e3f0 	.word	0xe000e3f0
 801483c:	200005c0 	.word	0x200005c0
 8014840:	e000ed0c 	.word	0xe000ed0c
 8014844:	200005c4 	.word	0x200005c4

08014848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b08a      	sub	sp, #40	; 0x28
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014850:	2300      	movs	r3, #0
 8014852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014854:	f7fe ffa0 	bl	8013798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014858:	4b5b      	ldr	r3, [pc, #364]	; (80149c8 <pvPortMalloc+0x180>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d101      	bne.n	8014864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014860:	f000 f920 	bl	8014aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014864:	4b59      	ldr	r3, [pc, #356]	; (80149cc <pvPortMalloc+0x184>)
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	4013      	ands	r3, r2
 801486c:	2b00      	cmp	r3, #0
 801486e:	f040 8093 	bne.w	8014998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d01d      	beq.n	80148b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014878:	2208      	movs	r2, #8
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	4413      	add	r3, r2
 801487e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f003 0307 	and.w	r3, r3, #7
 8014886:	2b00      	cmp	r3, #0
 8014888:	d014      	beq.n	80148b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f023 0307 	bic.w	r3, r3, #7
 8014890:	3308      	adds	r3, #8
 8014892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f003 0307 	and.w	r3, r3, #7
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00a      	beq.n	80148b4 <pvPortMalloc+0x6c>
	__asm volatile
 801489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a2:	f383 8811 	msr	BASEPRI, r3
 80148a6:	f3bf 8f6f 	isb	sy
 80148aa:	f3bf 8f4f 	dsb	sy
 80148ae:	617b      	str	r3, [r7, #20]
}
 80148b0:	bf00      	nop
 80148b2:	e7fe      	b.n	80148b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d06e      	beq.n	8014998 <pvPortMalloc+0x150>
 80148ba:	4b45      	ldr	r3, [pc, #276]	; (80149d0 <pvPortMalloc+0x188>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d869      	bhi.n	8014998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80148c4:	4b43      	ldr	r3, [pc, #268]	; (80149d4 <pvPortMalloc+0x18c>)
 80148c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80148c8:	4b42      	ldr	r3, [pc, #264]	; (80149d4 <pvPortMalloc+0x18c>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80148ce:	e004      	b.n	80148da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80148d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80148d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80148da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d903      	bls.n	80148ec <pvPortMalloc+0xa4>
 80148e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d1f1      	bne.n	80148d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80148ec:	4b36      	ldr	r3, [pc, #216]	; (80149c8 <pvPortMalloc+0x180>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d050      	beq.n	8014998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80148f6:	6a3b      	ldr	r3, [r7, #32]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2208      	movs	r2, #8
 80148fc:	4413      	add	r3, r2
 80148fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	6a3b      	ldr	r3, [r7, #32]
 8014906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490a:	685a      	ldr	r2, [r3, #4]
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	1ad2      	subs	r2, r2, r3
 8014910:	2308      	movs	r3, #8
 8014912:	005b      	lsls	r3, r3, #1
 8014914:	429a      	cmp	r2, r3
 8014916:	d91f      	bls.n	8014958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4413      	add	r3, r2
 801491e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	f003 0307 	and.w	r3, r3, #7
 8014926:	2b00      	cmp	r3, #0
 8014928:	d00a      	beq.n	8014940 <pvPortMalloc+0xf8>
	__asm volatile
 801492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801492e:	f383 8811 	msr	BASEPRI, r3
 8014932:	f3bf 8f6f 	isb	sy
 8014936:	f3bf 8f4f 	dsb	sy
 801493a:	613b      	str	r3, [r7, #16]
}
 801493c:	bf00      	nop
 801493e:	e7fe      	b.n	801493e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014942:	685a      	ldr	r2, [r3, #4]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	1ad2      	subs	r2, r2, r3
 8014948:	69bb      	ldr	r3, [r7, #24]
 801494a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014952:	69b8      	ldr	r0, [r7, #24]
 8014954:	f000 f908 	bl	8014b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014958:	4b1d      	ldr	r3, [pc, #116]	; (80149d0 <pvPortMalloc+0x188>)
 801495a:	681a      	ldr	r2, [r3, #0]
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	4a1b      	ldr	r2, [pc, #108]	; (80149d0 <pvPortMalloc+0x188>)
 8014964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014966:	4b1a      	ldr	r3, [pc, #104]	; (80149d0 <pvPortMalloc+0x188>)
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	4b1b      	ldr	r3, [pc, #108]	; (80149d8 <pvPortMalloc+0x190>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	429a      	cmp	r2, r3
 8014970:	d203      	bcs.n	801497a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014972:	4b17      	ldr	r3, [pc, #92]	; (80149d0 <pvPortMalloc+0x188>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	4a18      	ldr	r2, [pc, #96]	; (80149d8 <pvPortMalloc+0x190>)
 8014978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	685a      	ldr	r2, [r3, #4]
 801497e:	4b13      	ldr	r3, [pc, #76]	; (80149cc <pvPortMalloc+0x184>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	431a      	orrs	r2, r3
 8014984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498a:	2200      	movs	r2, #0
 801498c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801498e:	4b13      	ldr	r3, [pc, #76]	; (80149dc <pvPortMalloc+0x194>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	3301      	adds	r3, #1
 8014994:	4a11      	ldr	r2, [pc, #68]	; (80149dc <pvPortMalloc+0x194>)
 8014996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014998:	f7fe ff0c 	bl	80137b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	f003 0307 	and.w	r3, r3, #7
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d00a      	beq.n	80149bc <pvPortMalloc+0x174>
	__asm volatile
 80149a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149aa:	f383 8811 	msr	BASEPRI, r3
 80149ae:	f3bf 8f6f 	isb	sy
 80149b2:	f3bf 8f4f 	dsb	sy
 80149b6:	60fb      	str	r3, [r7, #12]
}
 80149b8:	bf00      	nop
 80149ba:	e7fe      	b.n	80149ba <pvPortMalloc+0x172>
	return pvReturn;
 80149bc:	69fb      	ldr	r3, [r7, #28]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3728      	adds	r7, #40	; 0x28
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	200041d0 	.word	0x200041d0
 80149cc:	200041e4 	.word	0x200041e4
 80149d0:	200041d4 	.word	0x200041d4
 80149d4:	200041c8 	.word	0x200041c8
 80149d8:	200041d8 	.word	0x200041d8
 80149dc:	200041dc 	.word	0x200041dc

080149e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b086      	sub	sp, #24
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d04d      	beq.n	8014a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80149f2:	2308      	movs	r3, #8
 80149f4:	425b      	negs	r3, r3
 80149f6:	697a      	ldr	r2, [r7, #20]
 80149f8:	4413      	add	r3, r2
 80149fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	685a      	ldr	r2, [r3, #4]
 8014a04:	4b24      	ldr	r3, [pc, #144]	; (8014a98 <vPortFree+0xb8>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4013      	ands	r3, r2
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d10a      	bne.n	8014a24 <vPortFree+0x44>
	__asm volatile
 8014a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a12:	f383 8811 	msr	BASEPRI, r3
 8014a16:	f3bf 8f6f 	isb	sy
 8014a1a:	f3bf 8f4f 	dsb	sy
 8014a1e:	60fb      	str	r3, [r7, #12]
}
 8014a20:	bf00      	nop
 8014a22:	e7fe      	b.n	8014a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d00a      	beq.n	8014a42 <vPortFree+0x62>
	__asm volatile
 8014a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a30:	f383 8811 	msr	BASEPRI, r3
 8014a34:	f3bf 8f6f 	isb	sy
 8014a38:	f3bf 8f4f 	dsb	sy
 8014a3c:	60bb      	str	r3, [r7, #8]
}
 8014a3e:	bf00      	nop
 8014a40:	e7fe      	b.n	8014a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	685a      	ldr	r2, [r3, #4]
 8014a46:	4b14      	ldr	r3, [pc, #80]	; (8014a98 <vPortFree+0xb8>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	4013      	ands	r3, r2
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d01e      	beq.n	8014a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d11a      	bne.n	8014a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014a58:	693b      	ldr	r3, [r7, #16]
 8014a5a:	685a      	ldr	r2, [r3, #4]
 8014a5c:	4b0e      	ldr	r3, [pc, #56]	; (8014a98 <vPortFree+0xb8>)
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	43db      	mvns	r3, r3
 8014a62:	401a      	ands	r2, r3
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014a68:	f7fe fe96 	bl	8013798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014a6c:	693b      	ldr	r3, [r7, #16]
 8014a6e:	685a      	ldr	r2, [r3, #4]
 8014a70:	4b0a      	ldr	r3, [pc, #40]	; (8014a9c <vPortFree+0xbc>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	4413      	add	r3, r2
 8014a76:	4a09      	ldr	r2, [pc, #36]	; (8014a9c <vPortFree+0xbc>)
 8014a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014a7a:	6938      	ldr	r0, [r7, #16]
 8014a7c:	f000 f874 	bl	8014b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014a80:	4b07      	ldr	r3, [pc, #28]	; (8014aa0 <vPortFree+0xc0>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	3301      	adds	r3, #1
 8014a86:	4a06      	ldr	r2, [pc, #24]	; (8014aa0 <vPortFree+0xc0>)
 8014a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014a8a:	f7fe fe93 	bl	80137b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014a8e:	bf00      	nop
 8014a90:	3718      	adds	r7, #24
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	200041e4 	.word	0x200041e4
 8014a9c:	200041d4 	.word	0x200041d4
 8014aa0:	200041e0 	.word	0x200041e0

08014aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b085      	sub	sp, #20
 8014aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ab0:	4b27      	ldr	r3, [pc, #156]	; (8014b50 <prvHeapInit+0xac>)
 8014ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f003 0307 	and.w	r3, r3, #7
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d00c      	beq.n	8014ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3307      	adds	r3, #7
 8014ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	f023 0307 	bic.w	r3, r3, #7
 8014aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014acc:	68ba      	ldr	r2, [r7, #8]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	4a1f      	ldr	r2, [pc, #124]	; (8014b50 <prvHeapInit+0xac>)
 8014ad4:	4413      	add	r3, r2
 8014ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014adc:	4a1d      	ldr	r2, [pc, #116]	; (8014b54 <prvHeapInit+0xb0>)
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014ae2:	4b1c      	ldr	r3, [pc, #112]	; (8014b54 <prvHeapInit+0xb0>)
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	68ba      	ldr	r2, [r7, #8]
 8014aec:	4413      	add	r3, r2
 8014aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014af0:	2208      	movs	r2, #8
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	1a9b      	subs	r3, r3, r2
 8014af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f023 0307 	bic.w	r3, r3, #7
 8014afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	4a15      	ldr	r2, [pc, #84]	; (8014b58 <prvHeapInit+0xb4>)
 8014b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014b06:	4b14      	ldr	r3, [pc, #80]	; (8014b58 <prvHeapInit+0xb4>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014b0e:	4b12      	ldr	r3, [pc, #72]	; (8014b58 <prvHeapInit+0xb4>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2200      	movs	r2, #0
 8014b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	1ad2      	subs	r2, r2, r3
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014b24:	4b0c      	ldr	r3, [pc, #48]	; (8014b58 <prvHeapInit+0xb4>)
 8014b26:	681a      	ldr	r2, [r3, #0]
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	4a0a      	ldr	r2, [pc, #40]	; (8014b5c <prvHeapInit+0xb8>)
 8014b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	4a09      	ldr	r2, [pc, #36]	; (8014b60 <prvHeapInit+0xbc>)
 8014b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014b3c:	4b09      	ldr	r3, [pc, #36]	; (8014b64 <prvHeapInit+0xc0>)
 8014b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014b42:	601a      	str	r2, [r3, #0]
}
 8014b44:	bf00      	nop
 8014b46:	3714      	adds	r7, #20
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr
 8014b50:	200005c8 	.word	0x200005c8
 8014b54:	200041c8 	.word	0x200041c8
 8014b58:	200041d0 	.word	0x200041d0
 8014b5c:	200041d8 	.word	0x200041d8
 8014b60:	200041d4 	.word	0x200041d4
 8014b64:	200041e4 	.word	0x200041e4

08014b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b085      	sub	sp, #20
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014b70:	4b28      	ldr	r3, [pc, #160]	; (8014c14 <prvInsertBlockIntoFreeList+0xac>)
 8014b72:	60fb      	str	r3, [r7, #12]
 8014b74:	e002      	b.n	8014b7c <prvInsertBlockIntoFreeList+0x14>
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	60fb      	str	r3, [r7, #12]
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	687a      	ldr	r2, [r7, #4]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d8f7      	bhi.n	8014b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	68ba      	ldr	r2, [r7, #8]
 8014b90:	4413      	add	r3, r2
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d108      	bne.n	8014baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	685a      	ldr	r2, [r3, #4]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	441a      	add	r2, r3
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	68ba      	ldr	r2, [r7, #8]
 8014bb4:	441a      	add	r2, r3
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d118      	bne.n	8014bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	4b15      	ldr	r3, [pc, #84]	; (8014c18 <prvInsertBlockIntoFreeList+0xb0>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d00d      	beq.n	8014be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	685a      	ldr	r2, [r3, #4]
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	685b      	ldr	r3, [r3, #4]
 8014bd4:	441a      	add	r2, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	601a      	str	r2, [r3, #0]
 8014be4:	e008      	b.n	8014bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014be6:	4b0c      	ldr	r3, [pc, #48]	; (8014c18 <prvInsertBlockIntoFreeList+0xb0>)
 8014be8:	681a      	ldr	r2, [r3, #0]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	601a      	str	r2, [r3, #0]
 8014bee:	e003      	b.n	8014bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014bf8:	68fa      	ldr	r2, [r7, #12]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d002      	beq.n	8014c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	687a      	ldr	r2, [r7, #4]
 8014c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c06:	bf00      	nop
 8014c08:	3714      	adds	r7, #20
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	200041c8 	.word	0x200041c8
 8014c18:	200041d0 	.word	0x200041d0

08014c1c <calloc>:
 8014c1c:	4b02      	ldr	r3, [pc, #8]	; (8014c28 <calloc+0xc>)
 8014c1e:	460a      	mov	r2, r1
 8014c20:	4601      	mov	r1, r0
 8014c22:	6818      	ldr	r0, [r3, #0]
 8014c24:	f000 b844 	b.w	8014cb0 <_calloc_r>
 8014c28:	20000078 	.word	0x20000078

08014c2c <__errno>:
 8014c2c:	4b01      	ldr	r3, [pc, #4]	; (8014c34 <__errno+0x8>)
 8014c2e:	6818      	ldr	r0, [r3, #0]
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	20000078 	.word	0x20000078

08014c38 <__libc_init_array>:
 8014c38:	b570      	push	{r4, r5, r6, lr}
 8014c3a:	4d0d      	ldr	r5, [pc, #52]	; (8014c70 <__libc_init_array+0x38>)
 8014c3c:	4c0d      	ldr	r4, [pc, #52]	; (8014c74 <__libc_init_array+0x3c>)
 8014c3e:	1b64      	subs	r4, r4, r5
 8014c40:	10a4      	asrs	r4, r4, #2
 8014c42:	2600      	movs	r6, #0
 8014c44:	42a6      	cmp	r6, r4
 8014c46:	d109      	bne.n	8014c5c <__libc_init_array+0x24>
 8014c48:	4d0b      	ldr	r5, [pc, #44]	; (8014c78 <__libc_init_array+0x40>)
 8014c4a:	4c0c      	ldr	r4, [pc, #48]	; (8014c7c <__libc_init_array+0x44>)
 8014c4c:	f000 fec2 	bl	80159d4 <_init>
 8014c50:	1b64      	subs	r4, r4, r5
 8014c52:	10a4      	asrs	r4, r4, #2
 8014c54:	2600      	movs	r6, #0
 8014c56:	42a6      	cmp	r6, r4
 8014c58:	d105      	bne.n	8014c66 <__libc_init_array+0x2e>
 8014c5a:	bd70      	pop	{r4, r5, r6, pc}
 8014c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c60:	4798      	blx	r3
 8014c62:	3601      	adds	r6, #1
 8014c64:	e7ee      	b.n	8014c44 <__libc_init_array+0xc>
 8014c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c6a:	4798      	blx	r3
 8014c6c:	3601      	adds	r6, #1
 8014c6e:	e7f2      	b.n	8014c56 <__libc_init_array+0x1e>
 8014c70:	080160c8 	.word	0x080160c8
 8014c74:	080160c8 	.word	0x080160c8
 8014c78:	080160c8 	.word	0x080160c8
 8014c7c:	080160cc 	.word	0x080160cc

08014c80 <__retarget_lock_acquire_recursive>:
 8014c80:	4770      	bx	lr

08014c82 <__retarget_lock_release_recursive>:
 8014c82:	4770      	bx	lr

08014c84 <memcpy>:
 8014c84:	440a      	add	r2, r1
 8014c86:	4291      	cmp	r1, r2
 8014c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c8c:	d100      	bne.n	8014c90 <memcpy+0xc>
 8014c8e:	4770      	bx	lr
 8014c90:	b510      	push	{r4, lr}
 8014c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c9a:	4291      	cmp	r1, r2
 8014c9c:	d1f9      	bne.n	8014c92 <memcpy+0xe>
 8014c9e:	bd10      	pop	{r4, pc}

08014ca0 <memset>:
 8014ca0:	4402      	add	r2, r0
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	d100      	bne.n	8014caa <memset+0xa>
 8014ca8:	4770      	bx	lr
 8014caa:	f803 1b01 	strb.w	r1, [r3], #1
 8014cae:	e7f9      	b.n	8014ca4 <memset+0x4>

08014cb0 <_calloc_r>:
 8014cb0:	b513      	push	{r0, r1, r4, lr}
 8014cb2:	434a      	muls	r2, r1
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	9201      	str	r2, [sp, #4]
 8014cb8:	f000 f80a 	bl	8014cd0 <_malloc_r>
 8014cbc:	4604      	mov	r4, r0
 8014cbe:	b118      	cbz	r0, 8014cc8 <_calloc_r+0x18>
 8014cc0:	9a01      	ldr	r2, [sp, #4]
 8014cc2:	2100      	movs	r1, #0
 8014cc4:	f7ff ffec 	bl	8014ca0 <memset>
 8014cc8:	4620      	mov	r0, r4
 8014cca:	b002      	add	sp, #8
 8014ccc:	bd10      	pop	{r4, pc}
	...

08014cd0 <_malloc_r>:
 8014cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cd2:	1ccd      	adds	r5, r1, #3
 8014cd4:	f025 0503 	bic.w	r5, r5, #3
 8014cd8:	3508      	adds	r5, #8
 8014cda:	2d0c      	cmp	r5, #12
 8014cdc:	bf38      	it	cc
 8014cde:	250c      	movcc	r5, #12
 8014ce0:	2d00      	cmp	r5, #0
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	db01      	blt.n	8014cea <_malloc_r+0x1a>
 8014ce6:	42a9      	cmp	r1, r5
 8014ce8:	d903      	bls.n	8014cf2 <_malloc_r+0x22>
 8014cea:	230c      	movs	r3, #12
 8014cec:	6033      	str	r3, [r6, #0]
 8014cee:	2000      	movs	r0, #0
 8014cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf2:	f000 f8c1 	bl	8014e78 <__malloc_lock>
 8014cf6:	4921      	ldr	r1, [pc, #132]	; (8014d7c <_malloc_r+0xac>)
 8014cf8:	680a      	ldr	r2, [r1, #0]
 8014cfa:	4614      	mov	r4, r2
 8014cfc:	b99c      	cbnz	r4, 8014d26 <_malloc_r+0x56>
 8014cfe:	4f20      	ldr	r7, [pc, #128]	; (8014d80 <_malloc_r+0xb0>)
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	b923      	cbnz	r3, 8014d0e <_malloc_r+0x3e>
 8014d04:	4621      	mov	r1, r4
 8014d06:	4630      	mov	r0, r6
 8014d08:	f000 f8a6 	bl	8014e58 <_sbrk_r>
 8014d0c:	6038      	str	r0, [r7, #0]
 8014d0e:	4629      	mov	r1, r5
 8014d10:	4630      	mov	r0, r6
 8014d12:	f000 f8a1 	bl	8014e58 <_sbrk_r>
 8014d16:	1c43      	adds	r3, r0, #1
 8014d18:	d123      	bne.n	8014d62 <_malloc_r+0x92>
 8014d1a:	230c      	movs	r3, #12
 8014d1c:	6033      	str	r3, [r6, #0]
 8014d1e:	4630      	mov	r0, r6
 8014d20:	f000 f8b0 	bl	8014e84 <__malloc_unlock>
 8014d24:	e7e3      	b.n	8014cee <_malloc_r+0x1e>
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	1b5b      	subs	r3, r3, r5
 8014d2a:	d417      	bmi.n	8014d5c <_malloc_r+0x8c>
 8014d2c:	2b0b      	cmp	r3, #11
 8014d2e:	d903      	bls.n	8014d38 <_malloc_r+0x68>
 8014d30:	6023      	str	r3, [r4, #0]
 8014d32:	441c      	add	r4, r3
 8014d34:	6025      	str	r5, [r4, #0]
 8014d36:	e004      	b.n	8014d42 <_malloc_r+0x72>
 8014d38:	6863      	ldr	r3, [r4, #4]
 8014d3a:	42a2      	cmp	r2, r4
 8014d3c:	bf0c      	ite	eq
 8014d3e:	600b      	streq	r3, [r1, #0]
 8014d40:	6053      	strne	r3, [r2, #4]
 8014d42:	4630      	mov	r0, r6
 8014d44:	f000 f89e 	bl	8014e84 <__malloc_unlock>
 8014d48:	f104 000b 	add.w	r0, r4, #11
 8014d4c:	1d23      	adds	r3, r4, #4
 8014d4e:	f020 0007 	bic.w	r0, r0, #7
 8014d52:	1ac2      	subs	r2, r0, r3
 8014d54:	d0cc      	beq.n	8014cf0 <_malloc_r+0x20>
 8014d56:	1a1b      	subs	r3, r3, r0
 8014d58:	50a3      	str	r3, [r4, r2]
 8014d5a:	e7c9      	b.n	8014cf0 <_malloc_r+0x20>
 8014d5c:	4622      	mov	r2, r4
 8014d5e:	6864      	ldr	r4, [r4, #4]
 8014d60:	e7cc      	b.n	8014cfc <_malloc_r+0x2c>
 8014d62:	1cc4      	adds	r4, r0, #3
 8014d64:	f024 0403 	bic.w	r4, r4, #3
 8014d68:	42a0      	cmp	r0, r4
 8014d6a:	d0e3      	beq.n	8014d34 <_malloc_r+0x64>
 8014d6c:	1a21      	subs	r1, r4, r0
 8014d6e:	4630      	mov	r0, r6
 8014d70:	f000 f872 	bl	8014e58 <_sbrk_r>
 8014d74:	3001      	adds	r0, #1
 8014d76:	d1dd      	bne.n	8014d34 <_malloc_r+0x64>
 8014d78:	e7cf      	b.n	8014d1a <_malloc_r+0x4a>
 8014d7a:	bf00      	nop
 8014d7c:	200041e8 	.word	0x200041e8
 8014d80:	200041ec 	.word	0x200041ec

08014d84 <cleanup_glue>:
 8014d84:	b538      	push	{r3, r4, r5, lr}
 8014d86:	460c      	mov	r4, r1
 8014d88:	6809      	ldr	r1, [r1, #0]
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	b109      	cbz	r1, 8014d92 <cleanup_glue+0xe>
 8014d8e:	f7ff fff9 	bl	8014d84 <cleanup_glue>
 8014d92:	4621      	mov	r1, r4
 8014d94:	4628      	mov	r0, r5
 8014d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d9a:	f000 b879 	b.w	8014e90 <_free_r>
	...

08014da0 <_reclaim_reent>:
 8014da0:	4b2c      	ldr	r3, [pc, #176]	; (8014e54 <_reclaim_reent+0xb4>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4283      	cmp	r3, r0
 8014da6:	b570      	push	{r4, r5, r6, lr}
 8014da8:	4604      	mov	r4, r0
 8014daa:	d051      	beq.n	8014e50 <_reclaim_reent+0xb0>
 8014dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014dae:	b143      	cbz	r3, 8014dc2 <_reclaim_reent+0x22>
 8014db0:	68db      	ldr	r3, [r3, #12]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d14a      	bne.n	8014e4c <_reclaim_reent+0xac>
 8014db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014db8:	6819      	ldr	r1, [r3, #0]
 8014dba:	b111      	cbz	r1, 8014dc2 <_reclaim_reent+0x22>
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	f000 f867 	bl	8014e90 <_free_r>
 8014dc2:	6961      	ldr	r1, [r4, #20]
 8014dc4:	b111      	cbz	r1, 8014dcc <_reclaim_reent+0x2c>
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	f000 f862 	bl	8014e90 <_free_r>
 8014dcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014dce:	b111      	cbz	r1, 8014dd6 <_reclaim_reent+0x36>
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f000 f85d 	bl	8014e90 <_free_r>
 8014dd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014dd8:	b111      	cbz	r1, 8014de0 <_reclaim_reent+0x40>
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f000 f858 	bl	8014e90 <_free_r>
 8014de0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014de2:	b111      	cbz	r1, 8014dea <_reclaim_reent+0x4a>
 8014de4:	4620      	mov	r0, r4
 8014de6:	f000 f853 	bl	8014e90 <_free_r>
 8014dea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014dec:	b111      	cbz	r1, 8014df4 <_reclaim_reent+0x54>
 8014dee:	4620      	mov	r0, r4
 8014df0:	f000 f84e 	bl	8014e90 <_free_r>
 8014df4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014df6:	b111      	cbz	r1, 8014dfe <_reclaim_reent+0x5e>
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f000 f849 	bl	8014e90 <_free_r>
 8014dfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014e00:	b111      	cbz	r1, 8014e08 <_reclaim_reent+0x68>
 8014e02:	4620      	mov	r0, r4
 8014e04:	f000 f844 	bl	8014e90 <_free_r>
 8014e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e0a:	b111      	cbz	r1, 8014e12 <_reclaim_reent+0x72>
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	f000 f83f 	bl	8014e90 <_free_r>
 8014e12:	69a3      	ldr	r3, [r4, #24]
 8014e14:	b1e3      	cbz	r3, 8014e50 <_reclaim_reent+0xb0>
 8014e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e18:	4620      	mov	r0, r4
 8014e1a:	4798      	blx	r3
 8014e1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014e1e:	b1b9      	cbz	r1, 8014e50 <_reclaim_reent+0xb0>
 8014e20:	4620      	mov	r0, r4
 8014e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e26:	f7ff bfad 	b.w	8014d84 <cleanup_glue>
 8014e2a:	5949      	ldr	r1, [r1, r5]
 8014e2c:	b941      	cbnz	r1, 8014e40 <_reclaim_reent+0xa0>
 8014e2e:	3504      	adds	r5, #4
 8014e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e32:	2d80      	cmp	r5, #128	; 0x80
 8014e34:	68d9      	ldr	r1, [r3, #12]
 8014e36:	d1f8      	bne.n	8014e2a <_reclaim_reent+0x8a>
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f000 f829 	bl	8014e90 <_free_r>
 8014e3e:	e7ba      	b.n	8014db6 <_reclaim_reent+0x16>
 8014e40:	680e      	ldr	r6, [r1, #0]
 8014e42:	4620      	mov	r0, r4
 8014e44:	f000 f824 	bl	8014e90 <_free_r>
 8014e48:	4631      	mov	r1, r6
 8014e4a:	e7ef      	b.n	8014e2c <_reclaim_reent+0x8c>
 8014e4c:	2500      	movs	r5, #0
 8014e4e:	e7ef      	b.n	8014e30 <_reclaim_reent+0x90>
 8014e50:	bd70      	pop	{r4, r5, r6, pc}
 8014e52:	bf00      	nop
 8014e54:	20000078 	.word	0x20000078

08014e58 <_sbrk_r>:
 8014e58:	b538      	push	{r3, r4, r5, lr}
 8014e5a:	4d06      	ldr	r5, [pc, #24]	; (8014e74 <_sbrk_r+0x1c>)
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	4604      	mov	r4, r0
 8014e60:	4608      	mov	r0, r1
 8014e62:	602b      	str	r3, [r5, #0]
 8014e64:	f7f0 fbe8 	bl	8005638 <_sbrk>
 8014e68:	1c43      	adds	r3, r0, #1
 8014e6a:	d102      	bne.n	8014e72 <_sbrk_r+0x1a>
 8014e6c:	682b      	ldr	r3, [r5, #0]
 8014e6e:	b103      	cbz	r3, 8014e72 <_sbrk_r+0x1a>
 8014e70:	6023      	str	r3, [r4, #0]
 8014e72:	bd38      	pop	{r3, r4, r5, pc}
 8014e74:	200050b0 	.word	0x200050b0

08014e78 <__malloc_lock>:
 8014e78:	4801      	ldr	r0, [pc, #4]	; (8014e80 <__malloc_lock+0x8>)
 8014e7a:	f7ff bf01 	b.w	8014c80 <__retarget_lock_acquire_recursive>
 8014e7e:	bf00      	nop
 8014e80:	200050a8 	.word	0x200050a8

08014e84 <__malloc_unlock>:
 8014e84:	4801      	ldr	r0, [pc, #4]	; (8014e8c <__malloc_unlock+0x8>)
 8014e86:	f7ff befc 	b.w	8014c82 <__retarget_lock_release_recursive>
 8014e8a:	bf00      	nop
 8014e8c:	200050a8 	.word	0x200050a8

08014e90 <_free_r>:
 8014e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e92:	2900      	cmp	r1, #0
 8014e94:	d048      	beq.n	8014f28 <_free_r+0x98>
 8014e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e9a:	9001      	str	r0, [sp, #4]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8014ea2:	bfb8      	it	lt
 8014ea4:	18e4      	addlt	r4, r4, r3
 8014ea6:	f7ff ffe7 	bl	8014e78 <__malloc_lock>
 8014eaa:	4a20      	ldr	r2, [pc, #128]	; (8014f2c <_free_r+0x9c>)
 8014eac:	9801      	ldr	r0, [sp, #4]
 8014eae:	6813      	ldr	r3, [r2, #0]
 8014eb0:	4615      	mov	r5, r2
 8014eb2:	b933      	cbnz	r3, 8014ec2 <_free_r+0x32>
 8014eb4:	6063      	str	r3, [r4, #4]
 8014eb6:	6014      	str	r4, [r2, #0]
 8014eb8:	b003      	add	sp, #12
 8014eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ebe:	f7ff bfe1 	b.w	8014e84 <__malloc_unlock>
 8014ec2:	42a3      	cmp	r3, r4
 8014ec4:	d90b      	bls.n	8014ede <_free_r+0x4e>
 8014ec6:	6821      	ldr	r1, [r4, #0]
 8014ec8:	1862      	adds	r2, r4, r1
 8014eca:	4293      	cmp	r3, r2
 8014ecc:	bf04      	itt	eq
 8014ece:	681a      	ldreq	r2, [r3, #0]
 8014ed0:	685b      	ldreq	r3, [r3, #4]
 8014ed2:	6063      	str	r3, [r4, #4]
 8014ed4:	bf04      	itt	eq
 8014ed6:	1852      	addeq	r2, r2, r1
 8014ed8:	6022      	streq	r2, [r4, #0]
 8014eda:	602c      	str	r4, [r5, #0]
 8014edc:	e7ec      	b.n	8014eb8 <_free_r+0x28>
 8014ede:	461a      	mov	r2, r3
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	b10b      	cbz	r3, 8014ee8 <_free_r+0x58>
 8014ee4:	42a3      	cmp	r3, r4
 8014ee6:	d9fa      	bls.n	8014ede <_free_r+0x4e>
 8014ee8:	6811      	ldr	r1, [r2, #0]
 8014eea:	1855      	adds	r5, r2, r1
 8014eec:	42a5      	cmp	r5, r4
 8014eee:	d10b      	bne.n	8014f08 <_free_r+0x78>
 8014ef0:	6824      	ldr	r4, [r4, #0]
 8014ef2:	4421      	add	r1, r4
 8014ef4:	1854      	adds	r4, r2, r1
 8014ef6:	42a3      	cmp	r3, r4
 8014ef8:	6011      	str	r1, [r2, #0]
 8014efa:	d1dd      	bne.n	8014eb8 <_free_r+0x28>
 8014efc:	681c      	ldr	r4, [r3, #0]
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	6053      	str	r3, [r2, #4]
 8014f02:	4421      	add	r1, r4
 8014f04:	6011      	str	r1, [r2, #0]
 8014f06:	e7d7      	b.n	8014eb8 <_free_r+0x28>
 8014f08:	d902      	bls.n	8014f10 <_free_r+0x80>
 8014f0a:	230c      	movs	r3, #12
 8014f0c:	6003      	str	r3, [r0, #0]
 8014f0e:	e7d3      	b.n	8014eb8 <_free_r+0x28>
 8014f10:	6825      	ldr	r5, [r4, #0]
 8014f12:	1961      	adds	r1, r4, r5
 8014f14:	428b      	cmp	r3, r1
 8014f16:	bf04      	itt	eq
 8014f18:	6819      	ldreq	r1, [r3, #0]
 8014f1a:	685b      	ldreq	r3, [r3, #4]
 8014f1c:	6063      	str	r3, [r4, #4]
 8014f1e:	bf04      	itt	eq
 8014f20:	1949      	addeq	r1, r1, r5
 8014f22:	6021      	streq	r1, [r4, #0]
 8014f24:	6054      	str	r4, [r2, #4]
 8014f26:	e7c7      	b.n	8014eb8 <_free_r+0x28>
 8014f28:	b003      	add	sp, #12
 8014f2a:	bd30      	pop	{r4, r5, pc}
 8014f2c:	200041e8 	.word	0x200041e8

08014f30 <sqrt>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	ed2d 8b02 	vpush	{d8}
 8014f36:	ec55 4b10 	vmov	r4, r5, d0
 8014f3a:	f000 f8eb 	bl	8015114 <__ieee754_sqrt>
 8014f3e:	4b15      	ldr	r3, [pc, #84]	; (8014f94 <sqrt+0x64>)
 8014f40:	eeb0 8a40 	vmov.f32	s16, s0
 8014f44:	eef0 8a60 	vmov.f32	s17, s1
 8014f48:	f993 3000 	ldrsb.w	r3, [r3]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	d019      	beq.n	8014f84 <sqrt+0x54>
 8014f50:	4622      	mov	r2, r4
 8014f52:	462b      	mov	r3, r5
 8014f54:	4620      	mov	r0, r4
 8014f56:	4629      	mov	r1, r5
 8014f58:	f7eb fd90 	bl	8000a7c <__aeabi_dcmpun>
 8014f5c:	b990      	cbnz	r0, 8014f84 <sqrt+0x54>
 8014f5e:	2200      	movs	r2, #0
 8014f60:	2300      	movs	r3, #0
 8014f62:	4620      	mov	r0, r4
 8014f64:	4629      	mov	r1, r5
 8014f66:	f7eb fd61 	bl	8000a2c <__aeabi_dcmplt>
 8014f6a:	b158      	cbz	r0, 8014f84 <sqrt+0x54>
 8014f6c:	f7ff fe5e 	bl	8014c2c <__errno>
 8014f70:	2321      	movs	r3, #33	; 0x21
 8014f72:	6003      	str	r3, [r0, #0]
 8014f74:	2200      	movs	r2, #0
 8014f76:	2300      	movs	r3, #0
 8014f78:	4610      	mov	r0, r2
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	f7eb fc0e 	bl	800079c <__aeabi_ddiv>
 8014f80:	ec41 0b18 	vmov	d8, r0, r1
 8014f84:	eeb0 0a48 	vmov.f32	s0, s16
 8014f88:	eef0 0a68 	vmov.f32	s1, s17
 8014f8c:	ecbd 8b02 	vpop	{d8}
 8014f90:	bd38      	pop	{r3, r4, r5, pc}
 8014f92:	bf00      	nop
 8014f94:	200000dc 	.word	0x200000dc

08014f98 <powf>:
 8014f98:	b508      	push	{r3, lr}
 8014f9a:	ed2d 8b04 	vpush	{d8-d9}
 8014f9e:	eeb0 9a40 	vmov.f32	s18, s0
 8014fa2:	eef0 8a60 	vmov.f32	s17, s1
 8014fa6:	f000 f969 	bl	801527c <__ieee754_powf>
 8014faa:	4b43      	ldr	r3, [pc, #268]	; (80150b8 <powf+0x120>)
 8014fac:	f993 3000 	ldrsb.w	r3, [r3]
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8014fb6:	d012      	beq.n	8014fde <powf+0x46>
 8014fb8:	eef4 8a68 	vcmp.f32	s17, s17
 8014fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc0:	d60d      	bvs.n	8014fde <powf+0x46>
 8014fc2:	eeb4 9a49 	vcmp.f32	s18, s18
 8014fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fca:	d70d      	bvc.n	8014fe8 <powf+0x50>
 8014fcc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014fd8:	bf08      	it	eq
 8014fda:	eeb0 8a67 	vmoveq.f32	s16, s15
 8014fde:	eeb0 0a48 	vmov.f32	s0, s16
 8014fe2:	ecbd 8b04 	vpop	{d8-d9}
 8014fe6:	bd08      	pop	{r3, pc}
 8014fe8:	eddf 9a34 	vldr	s19, [pc, #208]	; 80150bc <powf+0x124>
 8014fec:	eeb4 9a69 	vcmp.f32	s18, s19
 8014ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff4:	d116      	bne.n	8015024 <powf+0x8c>
 8014ff6:	eef4 8a69 	vcmp.f32	s17, s19
 8014ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffe:	d057      	beq.n	80150b0 <powf+0x118>
 8015000:	eeb0 0a68 	vmov.f32	s0, s17
 8015004:	f000 fc04 	bl	8015810 <finitef>
 8015008:	2800      	cmp	r0, #0
 801500a:	d0e8      	beq.n	8014fde <powf+0x46>
 801500c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8015010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015014:	d5e3      	bpl.n	8014fde <powf+0x46>
 8015016:	f7ff fe09 	bl	8014c2c <__errno>
 801501a:	2321      	movs	r3, #33	; 0x21
 801501c:	6003      	str	r3, [r0, #0]
 801501e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80150c0 <powf+0x128>
 8015022:	e7dc      	b.n	8014fde <powf+0x46>
 8015024:	f000 fbf4 	bl	8015810 <finitef>
 8015028:	bb50      	cbnz	r0, 8015080 <powf+0xe8>
 801502a:	eeb0 0a49 	vmov.f32	s0, s18
 801502e:	f000 fbef 	bl	8015810 <finitef>
 8015032:	b328      	cbz	r0, 8015080 <powf+0xe8>
 8015034:	eeb0 0a68 	vmov.f32	s0, s17
 8015038:	f000 fbea 	bl	8015810 <finitef>
 801503c:	b300      	cbz	r0, 8015080 <powf+0xe8>
 801503e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015046:	d706      	bvc.n	8015056 <powf+0xbe>
 8015048:	f7ff fdf0 	bl	8014c2c <__errno>
 801504c:	2321      	movs	r3, #33	; 0x21
 801504e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8015052:	6003      	str	r3, [r0, #0]
 8015054:	e7c3      	b.n	8014fde <powf+0x46>
 8015056:	f7ff fde9 	bl	8014c2c <__errno>
 801505a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801505e:	2322      	movs	r3, #34	; 0x22
 8015060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015064:	6003      	str	r3, [r0, #0]
 8015066:	d508      	bpl.n	801507a <powf+0xe2>
 8015068:	eeb0 0a68 	vmov.f32	s0, s17
 801506c:	f000 fbe4 	bl	8015838 <rintf>
 8015070:	eeb4 0a68 	vcmp.f32	s0, s17
 8015074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015078:	d1d1      	bne.n	801501e <powf+0x86>
 801507a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80150c4 <powf+0x12c>
 801507e:	e7ae      	b.n	8014fde <powf+0x46>
 8015080:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015088:	d1a9      	bne.n	8014fde <powf+0x46>
 801508a:	eeb0 0a49 	vmov.f32	s0, s18
 801508e:	f000 fbbf 	bl	8015810 <finitef>
 8015092:	2800      	cmp	r0, #0
 8015094:	d0a3      	beq.n	8014fde <powf+0x46>
 8015096:	eeb0 0a68 	vmov.f32	s0, s17
 801509a:	f000 fbb9 	bl	8015810 <finitef>
 801509e:	2800      	cmp	r0, #0
 80150a0:	d09d      	beq.n	8014fde <powf+0x46>
 80150a2:	f7ff fdc3 	bl	8014c2c <__errno>
 80150a6:	2322      	movs	r3, #34	; 0x22
 80150a8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80150bc <powf+0x124>
 80150ac:	6003      	str	r3, [r0, #0]
 80150ae:	e796      	b.n	8014fde <powf+0x46>
 80150b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80150b4:	e793      	b.n	8014fde <powf+0x46>
 80150b6:	bf00      	nop
 80150b8:	200000dc 	.word	0x200000dc
 80150bc:	00000000 	.word	0x00000000
 80150c0:	ff800000 	.word	0xff800000
 80150c4:	7f800000 	.word	0x7f800000

080150c8 <sqrtf>:
 80150c8:	b508      	push	{r3, lr}
 80150ca:	ed2d 8b02 	vpush	{d8}
 80150ce:	eeb0 8a40 	vmov.f32	s16, s0
 80150d2:	f000 fb93 	bl	80157fc <__ieee754_sqrtf>
 80150d6:	4b0d      	ldr	r3, [pc, #52]	; (801510c <sqrtf+0x44>)
 80150d8:	f993 3000 	ldrsb.w	r3, [r3]
 80150dc:	3301      	adds	r3, #1
 80150de:	d011      	beq.n	8015104 <sqrtf+0x3c>
 80150e0:	eeb4 8a48 	vcmp.f32	s16, s16
 80150e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e8:	d60c      	bvs.n	8015104 <sqrtf+0x3c>
 80150ea:	eddf 8a09 	vldr	s17, [pc, #36]	; 8015110 <sqrtf+0x48>
 80150ee:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80150f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f6:	d505      	bpl.n	8015104 <sqrtf+0x3c>
 80150f8:	f7ff fd98 	bl	8014c2c <__errno>
 80150fc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015100:	2321      	movs	r3, #33	; 0x21
 8015102:	6003      	str	r3, [r0, #0]
 8015104:	ecbd 8b02 	vpop	{d8}
 8015108:	bd08      	pop	{r3, pc}
 801510a:	bf00      	nop
 801510c:	200000dc 	.word	0x200000dc
 8015110:	00000000 	.word	0x00000000

08015114 <__ieee754_sqrt>:
 8015114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	ec55 4b10 	vmov	r4, r5, d0
 801511c:	4e56      	ldr	r6, [pc, #344]	; (8015278 <__ieee754_sqrt+0x164>)
 801511e:	43ae      	bics	r6, r5
 8015120:	ee10 0a10 	vmov	r0, s0
 8015124:	ee10 3a10 	vmov	r3, s0
 8015128:	4629      	mov	r1, r5
 801512a:	462a      	mov	r2, r5
 801512c:	d110      	bne.n	8015150 <__ieee754_sqrt+0x3c>
 801512e:	ee10 2a10 	vmov	r2, s0
 8015132:	462b      	mov	r3, r5
 8015134:	f7eb fa08 	bl	8000548 <__aeabi_dmul>
 8015138:	4602      	mov	r2, r0
 801513a:	460b      	mov	r3, r1
 801513c:	4620      	mov	r0, r4
 801513e:	4629      	mov	r1, r5
 8015140:	f7eb f84c 	bl	80001dc <__adddf3>
 8015144:	4604      	mov	r4, r0
 8015146:	460d      	mov	r5, r1
 8015148:	ec45 4b10 	vmov	d0, r4, r5
 801514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015150:	2d00      	cmp	r5, #0
 8015152:	dc10      	bgt.n	8015176 <__ieee754_sqrt+0x62>
 8015154:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015158:	4330      	orrs	r0, r6
 801515a:	d0f5      	beq.n	8015148 <__ieee754_sqrt+0x34>
 801515c:	b15d      	cbz	r5, 8015176 <__ieee754_sqrt+0x62>
 801515e:	ee10 2a10 	vmov	r2, s0
 8015162:	462b      	mov	r3, r5
 8015164:	ee10 0a10 	vmov	r0, s0
 8015168:	f7eb f836 	bl	80001d8 <__aeabi_dsub>
 801516c:	4602      	mov	r2, r0
 801516e:	460b      	mov	r3, r1
 8015170:	f7eb fb14 	bl	800079c <__aeabi_ddiv>
 8015174:	e7e6      	b.n	8015144 <__ieee754_sqrt+0x30>
 8015176:	1509      	asrs	r1, r1, #20
 8015178:	d076      	beq.n	8015268 <__ieee754_sqrt+0x154>
 801517a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801517e:	07ce      	lsls	r6, r1, #31
 8015180:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015184:	bf5e      	ittt	pl
 8015186:	0fda      	lsrpl	r2, r3, #31
 8015188:	005b      	lslpl	r3, r3, #1
 801518a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801518e:	0fda      	lsrs	r2, r3, #31
 8015190:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015194:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015198:	2000      	movs	r0, #0
 801519a:	106d      	asrs	r5, r5, #1
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	f04f 0e16 	mov.w	lr, #22
 80151a2:	4684      	mov	ip, r0
 80151a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80151a8:	eb0c 0401 	add.w	r4, ip, r1
 80151ac:	4294      	cmp	r4, r2
 80151ae:	bfde      	ittt	le
 80151b0:	1b12      	suble	r2, r2, r4
 80151b2:	eb04 0c01 	addle.w	ip, r4, r1
 80151b6:	1840      	addle	r0, r0, r1
 80151b8:	0052      	lsls	r2, r2, #1
 80151ba:	f1be 0e01 	subs.w	lr, lr, #1
 80151be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80151c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80151c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80151ca:	d1ed      	bne.n	80151a8 <__ieee754_sqrt+0x94>
 80151cc:	4671      	mov	r1, lr
 80151ce:	2720      	movs	r7, #32
 80151d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80151d4:	4562      	cmp	r2, ip
 80151d6:	eb04 060e 	add.w	r6, r4, lr
 80151da:	dc02      	bgt.n	80151e2 <__ieee754_sqrt+0xce>
 80151dc:	d113      	bne.n	8015206 <__ieee754_sqrt+0xf2>
 80151de:	429e      	cmp	r6, r3
 80151e0:	d811      	bhi.n	8015206 <__ieee754_sqrt+0xf2>
 80151e2:	2e00      	cmp	r6, #0
 80151e4:	eb06 0e04 	add.w	lr, r6, r4
 80151e8:	da43      	bge.n	8015272 <__ieee754_sqrt+0x15e>
 80151ea:	f1be 0f00 	cmp.w	lr, #0
 80151ee:	db40      	blt.n	8015272 <__ieee754_sqrt+0x15e>
 80151f0:	f10c 0801 	add.w	r8, ip, #1
 80151f4:	eba2 020c 	sub.w	r2, r2, ip
 80151f8:	429e      	cmp	r6, r3
 80151fa:	bf88      	it	hi
 80151fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015200:	1b9b      	subs	r3, r3, r6
 8015202:	4421      	add	r1, r4
 8015204:	46c4      	mov	ip, r8
 8015206:	0052      	lsls	r2, r2, #1
 8015208:	3f01      	subs	r7, #1
 801520a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801520e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015212:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015216:	d1dd      	bne.n	80151d4 <__ieee754_sqrt+0xc0>
 8015218:	4313      	orrs	r3, r2
 801521a:	d006      	beq.n	801522a <__ieee754_sqrt+0x116>
 801521c:	1c4c      	adds	r4, r1, #1
 801521e:	bf13      	iteet	ne
 8015220:	3101      	addne	r1, #1
 8015222:	3001      	addeq	r0, #1
 8015224:	4639      	moveq	r1, r7
 8015226:	f021 0101 	bicne.w	r1, r1, #1
 801522a:	1043      	asrs	r3, r0, #1
 801522c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015230:	0849      	lsrs	r1, r1, #1
 8015232:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015236:	07c2      	lsls	r2, r0, #31
 8015238:	bf48      	it	mi
 801523a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801523e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015242:	460c      	mov	r4, r1
 8015244:	463d      	mov	r5, r7
 8015246:	e77f      	b.n	8015148 <__ieee754_sqrt+0x34>
 8015248:	0ada      	lsrs	r2, r3, #11
 801524a:	3815      	subs	r0, #21
 801524c:	055b      	lsls	r3, r3, #21
 801524e:	2a00      	cmp	r2, #0
 8015250:	d0fa      	beq.n	8015248 <__ieee754_sqrt+0x134>
 8015252:	02d7      	lsls	r7, r2, #11
 8015254:	d50a      	bpl.n	801526c <__ieee754_sqrt+0x158>
 8015256:	f1c1 0420 	rsb	r4, r1, #32
 801525a:	fa23 f404 	lsr.w	r4, r3, r4
 801525e:	1e4d      	subs	r5, r1, #1
 8015260:	408b      	lsls	r3, r1
 8015262:	4322      	orrs	r2, r4
 8015264:	1b41      	subs	r1, r0, r5
 8015266:	e788      	b.n	801517a <__ieee754_sqrt+0x66>
 8015268:	4608      	mov	r0, r1
 801526a:	e7f0      	b.n	801524e <__ieee754_sqrt+0x13a>
 801526c:	0052      	lsls	r2, r2, #1
 801526e:	3101      	adds	r1, #1
 8015270:	e7ef      	b.n	8015252 <__ieee754_sqrt+0x13e>
 8015272:	46e0      	mov	r8, ip
 8015274:	e7be      	b.n	80151f4 <__ieee754_sqrt+0xe0>
 8015276:	bf00      	nop
 8015278:	7ff00000 	.word	0x7ff00000

0801527c <__ieee754_powf>:
 801527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015280:	ee10 5a90 	vmov	r5, s1
 8015284:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015288:	ed2d 8b02 	vpush	{d8}
 801528c:	eeb0 8a40 	vmov.f32	s16, s0
 8015290:	eef0 8a60 	vmov.f32	s17, s1
 8015294:	f000 8291 	beq.w	80157ba <__ieee754_powf+0x53e>
 8015298:	ee10 8a10 	vmov	r8, s0
 801529c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80152a0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80152a4:	dc06      	bgt.n	80152b4 <__ieee754_powf+0x38>
 80152a6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80152aa:	dd0a      	ble.n	80152c2 <__ieee754_powf+0x46>
 80152ac:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80152b0:	f000 8283 	beq.w	80157ba <__ieee754_powf+0x53e>
 80152b4:	ecbd 8b02 	vpop	{d8}
 80152b8:	48d8      	ldr	r0, [pc, #864]	; (801561c <__ieee754_powf+0x3a0>)
 80152ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152be:	f000 bab5 	b.w	801582c <nanf>
 80152c2:	f1b8 0f00 	cmp.w	r8, #0
 80152c6:	da1f      	bge.n	8015308 <__ieee754_powf+0x8c>
 80152c8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80152cc:	da2e      	bge.n	801532c <__ieee754_powf+0xb0>
 80152ce:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80152d2:	f2c0 827b 	blt.w	80157cc <__ieee754_powf+0x550>
 80152d6:	15fb      	asrs	r3, r7, #23
 80152d8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80152dc:	fa47 f603 	asr.w	r6, r7, r3
 80152e0:	fa06 f303 	lsl.w	r3, r6, r3
 80152e4:	42bb      	cmp	r3, r7
 80152e6:	f040 8271 	bne.w	80157cc <__ieee754_powf+0x550>
 80152ea:	f006 0601 	and.w	r6, r6, #1
 80152ee:	f1c6 0602 	rsb	r6, r6, #2
 80152f2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80152f6:	d120      	bne.n	801533a <__ieee754_powf+0xbe>
 80152f8:	2d00      	cmp	r5, #0
 80152fa:	f280 8264 	bge.w	80157c6 <__ieee754_powf+0x54a>
 80152fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015302:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015306:	e00d      	b.n	8015324 <__ieee754_powf+0xa8>
 8015308:	2600      	movs	r6, #0
 801530a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801530e:	d1f0      	bne.n	80152f2 <__ieee754_powf+0x76>
 8015310:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015314:	f000 8251 	beq.w	80157ba <__ieee754_powf+0x53e>
 8015318:	dd0a      	ble.n	8015330 <__ieee754_powf+0xb4>
 801531a:	2d00      	cmp	r5, #0
 801531c:	f280 8250 	bge.w	80157c0 <__ieee754_powf+0x544>
 8015320:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8015620 <__ieee754_powf+0x3a4>
 8015324:	ecbd 8b02 	vpop	{d8}
 8015328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801532c:	2602      	movs	r6, #2
 801532e:	e7ec      	b.n	801530a <__ieee754_powf+0x8e>
 8015330:	2d00      	cmp	r5, #0
 8015332:	daf5      	bge.n	8015320 <__ieee754_powf+0xa4>
 8015334:	eeb1 0a68 	vneg.f32	s0, s17
 8015338:	e7f4      	b.n	8015324 <__ieee754_powf+0xa8>
 801533a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801533e:	d102      	bne.n	8015346 <__ieee754_powf+0xca>
 8015340:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015344:	e7ee      	b.n	8015324 <__ieee754_powf+0xa8>
 8015346:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801534a:	eeb0 0a48 	vmov.f32	s0, s16
 801534e:	d108      	bne.n	8015362 <__ieee754_powf+0xe6>
 8015350:	f1b8 0f00 	cmp.w	r8, #0
 8015354:	db05      	blt.n	8015362 <__ieee754_powf+0xe6>
 8015356:	ecbd 8b02 	vpop	{d8}
 801535a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801535e:	f000 ba4d 	b.w	80157fc <__ieee754_sqrtf>
 8015362:	f000 fa4e 	bl	8015802 <fabsf>
 8015366:	b124      	cbz	r4, 8015372 <__ieee754_powf+0xf6>
 8015368:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801536c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015370:	d117      	bne.n	80153a2 <__ieee754_powf+0x126>
 8015372:	2d00      	cmp	r5, #0
 8015374:	bfbc      	itt	lt
 8015376:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801537a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801537e:	f1b8 0f00 	cmp.w	r8, #0
 8015382:	dacf      	bge.n	8015324 <__ieee754_powf+0xa8>
 8015384:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015388:	ea54 0306 	orrs.w	r3, r4, r6
 801538c:	d104      	bne.n	8015398 <__ieee754_powf+0x11c>
 801538e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015392:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015396:	e7c5      	b.n	8015324 <__ieee754_powf+0xa8>
 8015398:	2e01      	cmp	r6, #1
 801539a:	d1c3      	bne.n	8015324 <__ieee754_powf+0xa8>
 801539c:	eeb1 0a40 	vneg.f32	s0, s0
 80153a0:	e7c0      	b.n	8015324 <__ieee754_powf+0xa8>
 80153a2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80153a6:	3801      	subs	r0, #1
 80153a8:	ea56 0300 	orrs.w	r3, r6, r0
 80153ac:	d104      	bne.n	80153b8 <__ieee754_powf+0x13c>
 80153ae:	ee38 8a48 	vsub.f32	s16, s16, s16
 80153b2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80153b6:	e7b5      	b.n	8015324 <__ieee754_powf+0xa8>
 80153b8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80153bc:	dd6b      	ble.n	8015496 <__ieee754_powf+0x21a>
 80153be:	4b99      	ldr	r3, [pc, #612]	; (8015624 <__ieee754_powf+0x3a8>)
 80153c0:	429c      	cmp	r4, r3
 80153c2:	dc06      	bgt.n	80153d2 <__ieee754_powf+0x156>
 80153c4:	2d00      	cmp	r5, #0
 80153c6:	daab      	bge.n	8015320 <__ieee754_powf+0xa4>
 80153c8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015628 <__ieee754_powf+0x3ac>
 80153cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80153d0:	e7a8      	b.n	8015324 <__ieee754_powf+0xa8>
 80153d2:	4b96      	ldr	r3, [pc, #600]	; (801562c <__ieee754_powf+0x3b0>)
 80153d4:	429c      	cmp	r4, r3
 80153d6:	dd02      	ble.n	80153de <__ieee754_powf+0x162>
 80153d8:	2d00      	cmp	r5, #0
 80153da:	dcf5      	bgt.n	80153c8 <__ieee754_powf+0x14c>
 80153dc:	e7a0      	b.n	8015320 <__ieee754_powf+0xa4>
 80153de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80153e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80153e6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8015630 <__ieee754_powf+0x3b4>
 80153ea:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80153ee:	eee0 6a67 	vfms.f32	s13, s0, s15
 80153f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80153f6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80153fa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80153fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015402:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8015634 <__ieee754_powf+0x3b8>
 8015406:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801540a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8015638 <__ieee754_powf+0x3bc>
 801540e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015412:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801563c <__ieee754_powf+0x3c0>
 8015416:	eef0 6a67 	vmov.f32	s13, s15
 801541a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801541e:	ee16 3a90 	vmov	r3, s13
 8015422:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015426:	f023 030f 	bic.w	r3, r3, #15
 801542a:	ee00 3a90 	vmov	s1, r3
 801542e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8015432:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015436:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801543a:	f025 050f 	bic.w	r5, r5, #15
 801543e:	ee07 5a10 	vmov	s14, r5
 8015442:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015446:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801544a:	ee07 3a90 	vmov	s15, r3
 801544e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8015452:	3e01      	subs	r6, #1
 8015454:	ea56 0200 	orrs.w	r2, r6, r0
 8015458:	ee07 5a10 	vmov	s14, r5
 801545c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015460:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015464:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015468:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801546c:	ee17 4a10 	vmov	r4, s14
 8015470:	bf08      	it	eq
 8015472:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015476:	2c00      	cmp	r4, #0
 8015478:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801547c:	f340 8184 	ble.w	8015788 <__ieee754_powf+0x50c>
 8015480:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015484:	f340 80fc 	ble.w	8015680 <__ieee754_powf+0x404>
 8015488:	eddf 7a67 	vldr	s15, [pc, #412]	; 8015628 <__ieee754_powf+0x3ac>
 801548c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015490:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015494:	e746      	b.n	8015324 <__ieee754_powf+0xa8>
 8015496:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801549a:	bf01      	itttt	eq
 801549c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8015640 <__ieee754_powf+0x3c4>
 80154a0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80154a4:	f06f 0217 	mvneq.w	r2, #23
 80154a8:	ee17 4a90 	vmoveq	r4, s15
 80154ac:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80154b0:	bf18      	it	ne
 80154b2:	2200      	movne	r2, #0
 80154b4:	3b7f      	subs	r3, #127	; 0x7f
 80154b6:	4413      	add	r3, r2
 80154b8:	4a62      	ldr	r2, [pc, #392]	; (8015644 <__ieee754_powf+0x3c8>)
 80154ba:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80154be:	4294      	cmp	r4, r2
 80154c0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80154c4:	dd06      	ble.n	80154d4 <__ieee754_powf+0x258>
 80154c6:	4a60      	ldr	r2, [pc, #384]	; (8015648 <__ieee754_powf+0x3cc>)
 80154c8:	4294      	cmp	r4, r2
 80154ca:	f340 80a4 	ble.w	8015616 <__ieee754_powf+0x39a>
 80154ce:	3301      	adds	r3, #1
 80154d0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80154d4:	2400      	movs	r4, #0
 80154d6:	4a5d      	ldr	r2, [pc, #372]	; (801564c <__ieee754_powf+0x3d0>)
 80154d8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80154dc:	ee07 1a90 	vmov	s15, r1
 80154e0:	ed92 7a00 	vldr	s14, [r2]
 80154e4:	4a5a      	ldr	r2, [pc, #360]	; (8015650 <__ieee754_powf+0x3d4>)
 80154e6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80154ea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80154ee:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80154f2:	1049      	asrs	r1, r1, #1
 80154f4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80154f8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80154fc:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015500:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8015504:	ee06 1a10 	vmov	s12, r1
 8015508:	ee65 4a26 	vmul.f32	s9, s10, s13
 801550c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8015510:	ee14 7a90 	vmov	r7, s9
 8015514:	4017      	ands	r7, r2
 8015516:	ee05 7a90 	vmov	s11, r7
 801551a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801551e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015522:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8015654 <__ieee754_powf+0x3d8>
 8015526:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801552a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801552e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8015532:	eddf 6a49 	vldr	s13, [pc, #292]	; 8015658 <__ieee754_powf+0x3dc>
 8015536:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801553a:	eddf 6a48 	vldr	s13, [pc, #288]	; 801565c <__ieee754_powf+0x3e0>
 801553e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015542:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8015630 <__ieee754_powf+0x3b4>
 8015546:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801554a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8015660 <__ieee754_powf+0x3e4>
 801554e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015552:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015664 <__ieee754_powf+0x3e8>
 8015556:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801555a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801555e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8015562:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015566:	eee5 6a07 	vfma.f32	s13, s10, s14
 801556a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801556e:	eef0 7a45 	vmov.f32	s15, s10
 8015572:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801557a:	ee17 1a90 	vmov	r1, s15
 801557e:	4011      	ands	r1, r2
 8015580:	ee07 1a90 	vmov	s15, r1
 8015584:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8015588:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801558c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015590:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015594:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015598:	eeb0 6a47 	vmov.f32	s12, s14
 801559c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80155a0:	ee16 1a10 	vmov	r1, s12
 80155a4:	4011      	ands	r1, r2
 80155a6:	ee06 1a90 	vmov	s13, r1
 80155aa:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80155ae:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8015668 <__ieee754_powf+0x3ec>
 80155b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801566c <__ieee754_powf+0x3f0>
 80155b6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80155ba:	ee06 1a10 	vmov	s12, r1
 80155be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80155c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015670 <__ieee754_powf+0x3f4>
 80155c6:	492b      	ldr	r1, [pc, #172]	; (8015674 <__ieee754_powf+0x3f8>)
 80155c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80155cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80155d0:	edd1 7a00 	vldr	s15, [r1]
 80155d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80155d8:	ee07 3a90 	vmov	s15, r3
 80155dc:	4b26      	ldr	r3, [pc, #152]	; (8015678 <__ieee754_powf+0x3fc>)
 80155de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80155e2:	eef0 7a47 	vmov.f32	s15, s14
 80155e6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80155ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80155ee:	edd4 0a00 	vldr	s1, [r4]
 80155f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80155f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80155fa:	ee17 3a90 	vmov	r3, s15
 80155fe:	4013      	ands	r3, r2
 8015600:	ee07 3a90 	vmov	s15, r3
 8015604:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015608:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801560c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8015610:	ee77 7a66 	vsub.f32	s15, s14, s13
 8015614:	e70f      	b.n	8015436 <__ieee754_powf+0x1ba>
 8015616:	2401      	movs	r4, #1
 8015618:	e75d      	b.n	80154d6 <__ieee754_powf+0x25a>
 801561a:	bf00      	nop
 801561c:	0801609c 	.word	0x0801609c
 8015620:	00000000 	.word	0x00000000
 8015624:	3f7ffff7 	.word	0x3f7ffff7
 8015628:	7149f2ca 	.word	0x7149f2ca
 801562c:	3f800007 	.word	0x3f800007
 8015630:	3eaaaaab 	.word	0x3eaaaaab
 8015634:	3fb8aa3b 	.word	0x3fb8aa3b
 8015638:	36eca570 	.word	0x36eca570
 801563c:	3fb8aa00 	.word	0x3fb8aa00
 8015640:	4b800000 	.word	0x4b800000
 8015644:	001cc471 	.word	0x001cc471
 8015648:	005db3d6 	.word	0x005db3d6
 801564c:	080160a0 	.word	0x080160a0
 8015650:	fffff000 	.word	0xfffff000
 8015654:	3e6c3255 	.word	0x3e6c3255
 8015658:	3e53f142 	.word	0x3e53f142
 801565c:	3e8ba305 	.word	0x3e8ba305
 8015660:	3edb6db7 	.word	0x3edb6db7
 8015664:	3f19999a 	.word	0x3f19999a
 8015668:	3f76384f 	.word	0x3f76384f
 801566c:	3f763800 	.word	0x3f763800
 8015670:	369dc3a0 	.word	0x369dc3a0
 8015674:	080160b0 	.word	0x080160b0
 8015678:	080160a8 	.word	0x080160a8
 801567c:	3338aa3c 	.word	0x3338aa3c
 8015680:	f040 8092 	bne.w	80157a8 <__ieee754_powf+0x52c>
 8015684:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801567c <__ieee754_powf+0x400>
 8015688:	ee37 7a67 	vsub.f32	s14, s14, s15
 801568c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015690:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015698:	f73f aef6 	bgt.w	8015488 <__ieee754_powf+0x20c>
 801569c:	15db      	asrs	r3, r3, #23
 801569e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80156a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80156a6:	4103      	asrs	r3, r0
 80156a8:	4423      	add	r3, r4
 80156aa:	4949      	ldr	r1, [pc, #292]	; (80157d0 <__ieee754_powf+0x554>)
 80156ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80156b0:	3a7f      	subs	r2, #127	; 0x7f
 80156b2:	4111      	asrs	r1, r2
 80156b4:	ea23 0101 	bic.w	r1, r3, r1
 80156b8:	ee07 1a10 	vmov	s14, r1
 80156bc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80156c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80156c4:	f1c2 0217 	rsb	r2, r2, #23
 80156c8:	4110      	asrs	r0, r2
 80156ca:	2c00      	cmp	r4, #0
 80156cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80156d0:	bfb8      	it	lt
 80156d2:	4240      	neglt	r0, r0
 80156d4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80156d8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80157d4 <__ieee754_powf+0x558>
 80156dc:	ee17 3a10 	vmov	r3, s14
 80156e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80156e4:	f023 030f 	bic.w	r3, r3, #15
 80156e8:	ee07 3a10 	vmov	s14, r3
 80156ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156f0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80156f4:	eddf 7a38 	vldr	s15, [pc, #224]	; 80157d8 <__ieee754_powf+0x55c>
 80156f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80156fc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8015700:	eddf 6a36 	vldr	s13, [pc, #216]	; 80157dc <__ieee754_powf+0x560>
 8015704:	eeb0 0a67 	vmov.f32	s0, s15
 8015708:	eea7 0a26 	vfma.f32	s0, s14, s13
 801570c:	eeb0 6a40 	vmov.f32	s12, s0
 8015710:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015714:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015718:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801571c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80157e0 <__ieee754_powf+0x564>
 8015720:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80157e4 <__ieee754_powf+0x568>
 8015724:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015728:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80157e8 <__ieee754_powf+0x56c>
 801572c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015730:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80157ec <__ieee754_powf+0x570>
 8015734:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015738:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80157f0 <__ieee754_powf+0x574>
 801573c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015740:	eeb0 6a40 	vmov.f32	s12, s0
 8015744:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015748:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801574c:	eeb0 7a46 	vmov.f32	s14, s12
 8015750:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015754:	ee20 6a06 	vmul.f32	s12, s0, s12
 8015758:	eee0 7a27 	vfma.f32	s15, s0, s15
 801575c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015764:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015768:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801576c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015770:	ee10 3a10 	vmov	r3, s0
 8015774:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801577c:	da1a      	bge.n	80157b4 <__ieee754_powf+0x538>
 801577e:	f000 f8b7 	bl	80158f0 <scalbnf>
 8015782:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015786:	e5cd      	b.n	8015324 <__ieee754_powf+0xa8>
 8015788:	4a1a      	ldr	r2, [pc, #104]	; (80157f4 <__ieee754_powf+0x578>)
 801578a:	4293      	cmp	r3, r2
 801578c:	dd02      	ble.n	8015794 <__ieee754_powf+0x518>
 801578e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80157f8 <__ieee754_powf+0x57c>
 8015792:	e67b      	b.n	801548c <__ieee754_powf+0x210>
 8015794:	d108      	bne.n	80157a8 <__ieee754_powf+0x52c>
 8015796:	ee37 7a67 	vsub.f32	s14, s14, s15
 801579a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157a2:	f6ff af7b 	blt.w	801569c <__ieee754_powf+0x420>
 80157a6:	e7f2      	b.n	801578e <__ieee754_powf+0x512>
 80157a8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80157ac:	f73f af76 	bgt.w	801569c <__ieee754_powf+0x420>
 80157b0:	2000      	movs	r0, #0
 80157b2:	e78f      	b.n	80156d4 <__ieee754_powf+0x458>
 80157b4:	ee00 3a10 	vmov	s0, r3
 80157b8:	e7e3      	b.n	8015782 <__ieee754_powf+0x506>
 80157ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80157be:	e5b1      	b.n	8015324 <__ieee754_powf+0xa8>
 80157c0:	eeb0 0a68 	vmov.f32	s0, s17
 80157c4:	e5ae      	b.n	8015324 <__ieee754_powf+0xa8>
 80157c6:	eeb0 0a48 	vmov.f32	s0, s16
 80157ca:	e5ab      	b.n	8015324 <__ieee754_powf+0xa8>
 80157cc:	2600      	movs	r6, #0
 80157ce:	e590      	b.n	80152f2 <__ieee754_powf+0x76>
 80157d0:	007fffff 	.word	0x007fffff
 80157d4:	3f317218 	.word	0x3f317218
 80157d8:	35bfbe8c 	.word	0x35bfbe8c
 80157dc:	3f317200 	.word	0x3f317200
 80157e0:	3331bb4c 	.word	0x3331bb4c
 80157e4:	b5ddea0e 	.word	0xb5ddea0e
 80157e8:	388ab355 	.word	0x388ab355
 80157ec:	bb360b61 	.word	0xbb360b61
 80157f0:	3e2aaaab 	.word	0x3e2aaaab
 80157f4:	43160000 	.word	0x43160000
 80157f8:	0da24260 	.word	0x0da24260

080157fc <__ieee754_sqrtf>:
 80157fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015800:	4770      	bx	lr

08015802 <fabsf>:
 8015802:	ee10 3a10 	vmov	r3, s0
 8015806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801580a:	ee00 3a10 	vmov	s0, r3
 801580e:	4770      	bx	lr

08015810 <finitef>:
 8015810:	b082      	sub	sp, #8
 8015812:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015816:	9801      	ldr	r0, [sp, #4]
 8015818:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801581c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015820:	bfac      	ite	ge
 8015822:	2000      	movge	r0, #0
 8015824:	2001      	movlt	r0, #1
 8015826:	b002      	add	sp, #8
 8015828:	4770      	bx	lr
	...

0801582c <nanf>:
 801582c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015834 <nanf+0x8>
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	7fc00000 	.word	0x7fc00000

08015838 <rintf>:
 8015838:	ee10 2a10 	vmov	r2, s0
 801583c:	b513      	push	{r0, r1, r4, lr}
 801583e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015842:	397f      	subs	r1, #127	; 0x7f
 8015844:	2916      	cmp	r1, #22
 8015846:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801584a:	dc47      	bgt.n	80158dc <rintf+0xa4>
 801584c:	b32b      	cbz	r3, 801589a <rintf+0x62>
 801584e:	2900      	cmp	r1, #0
 8015850:	ee10 3a10 	vmov	r3, s0
 8015854:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8015858:	da21      	bge.n	801589e <rintf+0x66>
 801585a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801585e:	425b      	negs	r3, r3
 8015860:	4921      	ldr	r1, [pc, #132]	; (80158e8 <rintf+0xb0>)
 8015862:	0a5b      	lsrs	r3, r3, #9
 8015864:	0d12      	lsrs	r2, r2, #20
 8015866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801586a:	0512      	lsls	r2, r2, #20
 801586c:	4313      	orrs	r3, r2
 801586e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8015872:	ee07 3a90 	vmov	s15, r3
 8015876:	edd1 6a00 	vldr	s13, [r1]
 801587a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801587e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8015882:	eddd 7a01 	vldr	s15, [sp, #4]
 8015886:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801588a:	ee17 3a90 	vmov	r3, s15
 801588e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015892:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8015896:	ee00 3a10 	vmov	s0, r3
 801589a:	b002      	add	sp, #8
 801589c:	bd10      	pop	{r4, pc}
 801589e:	4a13      	ldr	r2, [pc, #76]	; (80158ec <rintf+0xb4>)
 80158a0:	410a      	asrs	r2, r1
 80158a2:	4213      	tst	r3, r2
 80158a4:	d0f9      	beq.n	801589a <rintf+0x62>
 80158a6:	0854      	lsrs	r4, r2, #1
 80158a8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80158ac:	d006      	beq.n	80158bc <rintf+0x84>
 80158ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80158b2:	ea23 0304 	bic.w	r3, r3, r4
 80158b6:	fa42 f101 	asr.w	r1, r2, r1
 80158ba:	430b      	orrs	r3, r1
 80158bc:	4a0a      	ldr	r2, [pc, #40]	; (80158e8 <rintf+0xb0>)
 80158be:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80158c2:	ed90 7a00 	vldr	s14, [r0]
 80158c6:	ee07 3a90 	vmov	s15, r3
 80158ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80158d2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80158d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80158da:	e7de      	b.n	801589a <rintf+0x62>
 80158dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158e0:	d3db      	bcc.n	801589a <rintf+0x62>
 80158e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80158e6:	e7d8      	b.n	801589a <rintf+0x62>
 80158e8:	080160b8 	.word	0x080160b8
 80158ec:	007fffff 	.word	0x007fffff

080158f0 <scalbnf>:
 80158f0:	ee10 3a10 	vmov	r3, s0
 80158f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80158f8:	d025      	beq.n	8015946 <scalbnf+0x56>
 80158fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80158fe:	d302      	bcc.n	8015906 <scalbnf+0x16>
 8015900:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015904:	4770      	bx	lr
 8015906:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801590a:	d122      	bne.n	8015952 <scalbnf+0x62>
 801590c:	4b2a      	ldr	r3, [pc, #168]	; (80159b8 <scalbnf+0xc8>)
 801590e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80159bc <scalbnf+0xcc>
 8015912:	4298      	cmp	r0, r3
 8015914:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015918:	db16      	blt.n	8015948 <scalbnf+0x58>
 801591a:	ee10 3a10 	vmov	r3, s0
 801591e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015922:	3a19      	subs	r2, #25
 8015924:	4402      	add	r2, r0
 8015926:	2afe      	cmp	r2, #254	; 0xfe
 8015928:	dd15      	ble.n	8015956 <scalbnf+0x66>
 801592a:	ee10 3a10 	vmov	r3, s0
 801592e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80159c0 <scalbnf+0xd0>
 8015932:	eddf 6a24 	vldr	s13, [pc, #144]	; 80159c4 <scalbnf+0xd4>
 8015936:	2b00      	cmp	r3, #0
 8015938:	eeb0 7a67 	vmov.f32	s14, s15
 801593c:	bfb8      	it	lt
 801593e:	eef0 7a66 	vmovlt.f32	s15, s13
 8015942:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015946:	4770      	bx	lr
 8015948:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80159c8 <scalbnf+0xd8>
 801594c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015950:	4770      	bx	lr
 8015952:	0dd2      	lsrs	r2, r2, #23
 8015954:	e7e6      	b.n	8015924 <scalbnf+0x34>
 8015956:	2a00      	cmp	r2, #0
 8015958:	dd06      	ble.n	8015968 <scalbnf+0x78>
 801595a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801595e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015962:	ee00 3a10 	vmov	s0, r3
 8015966:	4770      	bx	lr
 8015968:	f112 0f16 	cmn.w	r2, #22
 801596c:	da1a      	bge.n	80159a4 <scalbnf+0xb4>
 801596e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015972:	4298      	cmp	r0, r3
 8015974:	ee10 3a10 	vmov	r3, s0
 8015978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801597c:	dd0a      	ble.n	8015994 <scalbnf+0xa4>
 801597e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80159c0 <scalbnf+0xd0>
 8015982:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80159c4 <scalbnf+0xd4>
 8015986:	eef0 7a40 	vmov.f32	s15, s0
 801598a:	2b00      	cmp	r3, #0
 801598c:	bf18      	it	ne
 801598e:	eeb0 0a47 	vmovne.f32	s0, s14
 8015992:	e7db      	b.n	801594c <scalbnf+0x5c>
 8015994:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80159c8 <scalbnf+0xd8>
 8015998:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80159cc <scalbnf+0xdc>
 801599c:	eef0 7a40 	vmov.f32	s15, s0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	e7f3      	b.n	801598c <scalbnf+0x9c>
 80159a4:	3219      	adds	r2, #25
 80159a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80159aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80159ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 80159d0 <scalbnf+0xe0>
 80159b2:	ee07 3a10 	vmov	s14, r3
 80159b6:	e7c4      	b.n	8015942 <scalbnf+0x52>
 80159b8:	ffff3cb0 	.word	0xffff3cb0
 80159bc:	4c000000 	.word	0x4c000000
 80159c0:	7149f2ca 	.word	0x7149f2ca
 80159c4:	f149f2ca 	.word	0xf149f2ca
 80159c8:	0da24260 	.word	0x0da24260
 80159cc:	8da24260 	.word	0x8da24260
 80159d0:	33000000 	.word	0x33000000

080159d4 <_init>:
 80159d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d6:	bf00      	nop
 80159d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159da:	bc08      	pop	{r3}
 80159dc:	469e      	mov	lr, r3
 80159de:	4770      	bx	lr

080159e0 <_fini>:
 80159e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e2:	bf00      	nop
 80159e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159e6:	bc08      	pop	{r3}
 80159e8:	469e      	mov	lr, r3
 80159ea:	4770      	bx	lr
