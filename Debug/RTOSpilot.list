
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121f4  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  080123e4  080123e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b48  08012b48  000140a0  2**0
                  CONTENTS
  4 .ARM          00000000  08012b48  08012b48  000140a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012b48  08012b48  000140a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b48  08012b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b4c  08012b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08012b50  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028d4  200000a0  08012bf0  000140a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20002974  08012bf0  00014974  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002738b  00000000  00000000  000140c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b43  00000000  00000000  0003b454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  00041f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019de  00000000  00000000  00044120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008acd  00000000  00000000  00045afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030d5c  00000000  00000000  0004e5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad69f  00000000  00000000  0007f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c9c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009020  00000000  00000000  0012ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00135a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a0 	.word	0x200000a0
 800020c:	00000000 	.word	0x00000000
 8000210:	080123cc 	.word	0x080123cc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a4 	.word	0x200000a4
 800022c:	080123cc 	.word	0x080123cc

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpun>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001108:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800110c:	d102      	bne.n	8001114 <__aeabi_fcmpun+0x14>
 800110e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001112:	d108      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001114:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001118:	d102      	bne.n	8001120 <__aeabi_fcmpun+0x20>
 800111a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111e:	d102      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	f04f 0001 	mov.w	r0, #1
 800112a:	4770      	bx	lr

0800112c <__aeabi_f2iz>:
 800112c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001130:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001134:	d30f      	bcc.n	8001156 <__aeabi_f2iz+0x2a>
 8001136:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113e:	d90d      	bls.n	800115c <__aeabi_f2iz+0x30>
 8001140:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001144:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001148:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	bf18      	it	ne
 8001152:	4240      	negne	r0, r0
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001160:	d101      	bne.n	8001166 <__aeabi_f2iz+0x3a>
 8001162:	0242      	lsls	r2, r0, #9
 8001164:	d105      	bne.n	8001172 <__aeabi_f2iz+0x46>
 8001166:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800116a:	bf08      	it	eq
 800116c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr

08001178 <__aeabi_f2uiz>:
 8001178:	0042      	lsls	r2, r0, #1
 800117a:	d20e      	bcs.n	800119a <__aeabi_f2uiz+0x22>
 800117c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001180:	d30b      	bcc.n	800119a <__aeabi_f2uiz+0x22>
 8001182:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001186:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118a:	d409      	bmi.n	80011a0 <__aeabi_f2uiz+0x28>
 800118c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001194:	fa23 f002 	lsr.w	r0, r3, r2
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2uiz+0x32>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d102      	bne.n	80011b0 <__aeabi_f2uiz+0x38>
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	4770      	bx	lr
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e008      	b.n	80011d8 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 80011c6:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <ibus_init+0x44>)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b09      	cmp	r3, #9
 80011dc:	ddf3      	ble.n	80011c6 <ibus_init+0xe>
    }
	uart = uartt;
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <ibus_init+0x48>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <ibus_init+0x48>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4906      	ldr	r1, [pc, #24]	@ (8001204 <ibus_init+0x4c>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f009 f994 	bl	800a51a <HAL_UART_Receive_IT>
#endif
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000c0 	.word	0x200000c0
 8001200:	2000010c 	.word	0x2000010c
 8001204:	20000108 	.word	0x20000108

08001208 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
   return uart;
 800120c:	4b02      	ldr	r3, [pc, #8]	@ (8001218 <ibus_uart_port+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	2000010c 	.word	0x2000010c

0800121c <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <ibus_calback+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f80d 	bl	8001244 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <ibus_calback+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4902      	ldr	r1, [pc, #8]	@ (800123c <ibus_calback+0x20>)
 8001232:	4618      	mov	r0, r3
 8001234:	f009 f971 	bl	800a51a <HAL_UART_Receive_IT>
#endif

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000108 	.word	0x20000108
 8001240:	2000010c 	.word	0x2000010c

08001244 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <ibusDataReceive+0x78>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <ibusDataReceive+0x7c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <ibusDataReceive+0x80>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800126a:	4293      	cmp	r3, r2
 800126c:	d902      	bls.n	8001274 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 800126e:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <ibusDataReceive+0x84>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001274:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <ibusDataReceive+0x80>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <ibusDataReceive+0x84>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <ibusDataReceive+0x44>
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b20      	cmp	r3, #32
 8001286:	d114      	bne.n	80012b2 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <ibusDataReceive+0x84>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4a0f      	ldr	r2, [pc, #60]	@ (80012cc <ibusDataReceive+0x88>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <ibusDataReceive+0x84>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b1f      	cmp	r3, #31
 800129a:	d103      	bne.n	80012a4 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <ibusDataReceive+0x8c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e007      	b.n	80012b4 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <ibusDataReceive+0x84>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <ibusDataReceive+0x84>)
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e000      	b.n	80012b4 <ibusDataReceive+0x70>
        return;
 80012b2:	bf00      	nop
    }
}
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200003dc 	.word	0x200003dc
 80012c0:	200003e0 	.word	0x200003e0
 80012c4:	20000110 	.word	0x20000110
 80012c8:	20000114 	.word	0x20000114
 80012cc:	200000e8 	.word	0x200000e8
 80012d0:	200000bc 	.word	0x200000bc

080012d4 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 80012da:	4b50      	ldr	r3, [pc, #320]	@ (800141c <ibusFrameComplete+0x148>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8096 	beq.w	8001410 <ibusFrameComplete+0x13c>
        ibusFrameDone = FALSE;
 80012e4:	4b4d      	ldr	r3, [pc, #308]	@ (800141c <ibusFrameComplete+0x148>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 80012ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012ee:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e009      	b.n	800130a <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	4a49      	ldr	r2, [pc, #292]	@ (8001420 <ibusFrameComplete+0x14c>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	461a      	mov	r2, r3
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	3301      	adds	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b1d      	cmp	r3, #29
 800130e:	d9f2      	bls.n	80012f6 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8001310:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001312:	7f9b      	ldrb	r3, [r3, #30]
 8001314:	461a      	mov	r2, r3
 8001316:	4b42      	ldr	r3, [pc, #264]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001318:	7fdb      	ldrb	r3, [r3, #31]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8001322:	89ba      	ldrh	r2, [r7, #12]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	429a      	cmp	r2, r3
 8001328:	d172      	bne.n	8001410 <ibusFrameComplete+0x13c>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 800132a:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <ibusFrameComplete+0x14c>)
 800132c:	78db      	ldrb	r3, [r3, #3]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4a3b      	ldr	r2, [pc, #236]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001332:	7892      	ldrb	r2, [r2, #2]
 8001334:	4413      	add	r3, r2
 8001336:	461a      	mov	r2, r3
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <ibusFrameComplete+0x150>)
 800133a:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 800133c:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <ibusFrameComplete+0x14c>)
 800133e:	795b      	ldrb	r3, [r3, #5]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	4a37      	ldr	r2, [pc, #220]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001344:	7912      	ldrb	r2, [r2, #4]
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <ibusFrameComplete+0x150>)
 800134c:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 800134e:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001350:	79db      	ldrb	r3, [r3, #7]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4a32      	ldr	r2, [pc, #200]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001356:	7992      	ldrb	r2, [r2, #6]
 8001358:	4413      	add	r3, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <ibusFrameComplete+0x150>)
 800135e:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001360:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001362:	7a5b      	ldrb	r3, [r3, #9]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	4a2e      	ldr	r2, [pc, #184]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001368:	7a12      	ldrb	r2, [r2, #8]
 800136a:	4413      	add	r3, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <ibusFrameComplete+0x150>)
 8001370:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001372:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001374:	7adb      	ldrb	r3, [r3, #11]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <ibusFrameComplete+0x14c>)
 800137a:	7a92      	ldrb	r2, [r2, #10]
 800137c:	4413      	add	r3, r2
 800137e:	461a      	mov	r2, r3
 8001380:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <ibusFrameComplete+0x150>)
 8001382:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001386:	7b5b      	ldrb	r3, [r3, #13]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <ibusFrameComplete+0x14c>)
 800138c:	7b12      	ldrb	r2, [r2, #12]
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <ibusFrameComplete+0x150>)
 8001394:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <ibusFrameComplete+0x14c>)
 8001398:	7bdb      	ldrb	r3, [r3, #15]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4a20      	ldr	r2, [pc, #128]	@ (8001420 <ibusFrameComplete+0x14c>)
 800139e:	7b92      	ldrb	r2, [r2, #14]
 80013a0:	4413      	add	r3, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <ibusFrameComplete+0x150>)
 80013a6:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <ibusFrameComplete+0x14c>)
 80013aa:	7c5b      	ldrb	r3, [r3, #17]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <ibusFrameComplete+0x14c>)
 80013b0:	7c12      	ldrb	r2, [r2, #16]
 80013b2:	4413      	add	r3, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <ibusFrameComplete+0x150>)
 80013b8:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <ibusFrameComplete+0x14c>)
 80013bc:	7cdb      	ldrb	r3, [r3, #19]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <ibusFrameComplete+0x14c>)
 80013c2:	7c92      	ldrb	r2, [r2, #18]
 80013c4:	4413      	add	r3, r2
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <ibusFrameComplete+0x150>)
 80013ca:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <ibusFrameComplete+0x14c>)
 80013ce:	7d5b      	ldrb	r3, [r3, #21]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4a13      	ldr	r2, [pc, #76]	@ (8001420 <ibusFrameComplete+0x14c>)
 80013d4:	7d12      	ldrb	r2, [r2, #20]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <ibusFrameComplete+0x150>)
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
			
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	e010      	b.n	8001406 <ibusFrameComplete+0x132>
			    if(ibusChannelData[i] > 2100){
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <ibusFrameComplete+0x150>)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	f640 0234 	movw	r2, #2100	@ 0x834
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d905      	bls.n	8001400 <ibusFrameComplete+0x12c>
				    ibusChannelData[i] = 1000;
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <ibusFrameComplete+0x150>)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3301      	adds	r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b09      	cmp	r3, #9
 800140a:	ddeb      	ble.n	80013e4 <ibusFrameComplete+0x110>
				}
			}
            return TRUE;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <ibusFrameComplete+0x13e>
        }
    }
    return FALSE;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	200000bc 	.word	0x200000bc
 8001420:	200000e8 	.word	0x200000e8
 8001424:	200000c0 	.word	0x200000c0

08001428 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <mpu6050Connection+0x24>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	2305      	movs	r3, #5
 8001432:	2203      	movs	r2, #3
 8001434:	21d0      	movs	r1, #208	@ 0xd0
 8001436:	f005 fdcd 	bl	8006fd4 <HAL_I2C_IsDeviceReady>
 800143a:	4603      	mov	r3, r0
 800143c:	b25a      	sxtb	r2, r3
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <mpu6050Connection+0x28>)
 8001440:	701a      	strb	r2, [r3, #0]
    return isConnected;
 8001442:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <mpu6050Connection+0x28>)
 8001444:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000118 	.word	0x20000118
 8001450:	2000011c 	.word	0x2000011c

08001454 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 800145c:	4a25      	ldr	r2, [pc, #148]	@ (80014f4 <mpu6050_init+0xa0>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8001462:	f7ff ffe1 	bl	8001428 <mpu6050Connection>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
	if(!k){
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d13a      	bne.n	80014e8 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 8001472:	236b      	movs	r3, #107	@ 0x6b
 8001474:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001476:	2300      	movs	r3, #0
 8001478:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <mpu6050_init+0xa0>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f107 0208 	add.w	r2, r7, #8
 8001482:	2301      	movs	r3, #1
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2302      	movs	r3, #2
 8001488:	21d0      	movs	r1, #208	@ 0xd0
 800148a:	f004 fed7 	bl	800623c <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 800148e:	231b      	movs	r3, #27
 8001490:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 8001492:	2310      	movs	r3, #16
 8001494:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <mpu6050_init+0xa0>)
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	21d0      	movs	r1, #208	@ 0xd0
 80014a6:	f004 fec9 	bl	800623c <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 80014aa:	231c      	movs	r3, #28
 80014ac:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 80014ae:	2318      	movs	r3, #24
 80014b0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <mpu6050_init+0xa0>)
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	f107 0208 	add.w	r2, r7, #8
 80014ba:	2301      	movs	r3, #1
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2302      	movs	r3, #2
 80014c0:	21d0      	movs	r1, #208	@ 0xd0
 80014c2:	f004 febb 	bl	800623c <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 80014c6:	2337      	movs	r3, #55	@ 0x37
 80014c8:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 80014ca:	7a7b      	ldrb	r3, [r7, #9]
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <mpu6050_init+0xa0>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	2301      	movs	r3, #1
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2302      	movs	r3, #2
 80014e2:	21d0      	movs	r1, #208	@ 0xd0
 80014e4:	f004 feaa 	bl	800623c <HAL_I2C_Master_Transmit>

	}
	return k;
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000118 	.word	0x20000118

080014f8 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8001500:	2343      	movs	r3, #67	@ 0x43
 8001502:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <mpu6050_gyro_get_raw+0x74>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f107 0208 	add.w	r2, r7, #8
 800150c:	2301      	movs	r3, #1
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	21d0      	movs	r1, #208	@ 0xd0
 8001514:	f004 fe92 	bl	800623c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <mpu6050_gyro_get_raw+0x74>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f107 0208 	add.w	r2, r7, #8
 8001520:	2301      	movs	r3, #1
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2306      	movs	r3, #6
 8001526:	21d0      	movs	r1, #208	@ 0xd0
 8001528:	f004 ff86 	bl	8006438 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 800152c:	7a3b      	ldrb	r3, [r7, #8]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7a7b      	ldrb	r3, [r7, #9]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800153e:	7abb      	ldrb	r3, [r7, #10]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 8001550:	7b3b      	ldrb	r3, [r7, #12]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	809a      	strh	r2, [r3, #4]
	}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000118 	.word	0x20000118

08001570 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	6810      	ldr	r0, [r2, #0]
 8001580:	6018      	str	r0, [r3, #0]
 8001582:	8892      	ldrh	r2, [r2, #4]
 8001584:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001586:	233b      	movs	r3, #59	@ 0x3b
 8001588:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <mpu6050_acc_get_raw+0x80>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	f107 0208 	add.w	r2, r7, #8
 8001592:	2301      	movs	r3, #1
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	21d0      	movs	r1, #208	@ 0xd0
 800159a:	f004 fe4f 	bl	800623c <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 800159e:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <mpu6050_acc_get_raw+0x80>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	f107 0208 	add.w	r2, r7, #8
 80015a6:	2301      	movs	r3, #1
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2306      	movs	r3, #6
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	f004 ff43 	bl	8006438 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 80015b2:	7a3b      	ldrb	r3, [r7, #8]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7a7b      	ldrb	r3, [r7, #9]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21a      	sxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 80015d6:	7b3b      	ldrb	r3, [r7, #12]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	809a      	strh	r2, [r3, #4]
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000118 	.word	0x20000118

080015f4 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 80015fc:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <qmc5883_init+0x54>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8001602:	230b      	movs	r3, #11
 8001604:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001606:	2301      	movs	r3, #1
 8001608:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <qmc5883_init+0x54>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	231a      	movs	r3, #26
 8001610:	4619      	mov	r1, r3
 8001612:	f107 020c 	add.w	r2, r7, #12
 8001616:	2301      	movs	r3, #1
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2302      	movs	r3, #2
 800161c:	f004 fe0e 	bl	800623c <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8001620:	2309      	movs	r3, #9
 8001622:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001624:	231d      	movs	r3, #29
 8001626:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <qmc5883_init+0x54>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	231a      	movs	r3, #26
 800162e:	4619      	mov	r1, r3
 8001630:	f107 020c 	add.w	r2, r7, #12
 8001634:	2301      	movs	r3, #1
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2302      	movs	r3, #2
 800163a:	f004 fdff 	bl	800623c <HAL_I2C_Master_Transmit>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000120 	.word	0x20000120

0800164c <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af04      	add	r7, sp, #16
 8001652:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	2300      	movs	r3, #0
 800165a:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <qmc_get_raw+0x6c>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	231a      	movs	r3, #26
 8001662:	4619      	mov	r1, r3
 8001664:	2301      	movs	r3, #1
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2306      	movs	r3, #6
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	2200      	movs	r2, #0
 8001676:	f005 fa45 	bl	8006b04 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 800167a:	7a7b      	ldrb	r3, [r7, #9]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	7a3b      	ldrb	r3, [r7, #8]
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21a      	sxth	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21a      	sxth	r2, r3
 8001692:	7abb      	ldrb	r3, [r7, #10]
 8001694:	b21b      	sxth	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b21a      	sxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	7b3b      	ldrb	r3, [r7, #12]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	809a      	strh	r2, [r3, #4]
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000120 	.word	0x20000120

080016bc <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <black_box_init+0x34>)
 80016c2:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <black_box_init+0x38>)
 80016c4:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	490b      	ldr	r1, [pc, #44]	@ (80016f8 <black_box_init+0x3c>)
 80016ca:	480c      	ldr	r0, [pc, #48]	@ (80016fc <black_box_init+0x40>)
 80016cc:	f00c fdb2 	bl	800e234 <f_mount>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <black_box_init+0x44>)
 80016d6:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"DM.TXT", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80016d8:	2213      	movs	r2, #19
 80016da:	490a      	ldr	r1, [pc, #40]	@ (8001704 <black_box_init+0x48>)
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <black_box_init+0x38>)
 80016de:	f00c fe11 	bl	800e304 <f_open>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <black_box_init+0x4c>)
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000124 	.word	0x20000124
 80016f4:	20001248 	.word	0x20001248
 80016f8:	080123e4 	.word	0x080123e4
 80016fc:	20000a14 	.word	0x20000a14
 8001700:	200001f8 	.word	0x200001f8
 8001704:	080123e8 	.word	0x080123e8
 8001708:	200001f9 	.word	0x200001f9

0800170c <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	@ 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8001714:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <black_box_pack_int+0x128>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	220b      	movs	r2, #11
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f010 fc7a 	bl	8012020 <memset>
	if(val != 0){
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d02a      	beq.n	8001788 <black_box_pack_int+0x7c>
		val = abs(val);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	bfb8      	it	lt
 8001738:	425b      	neglt	r3, r3
 800173a:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f915 	bl	8001974 <intToStr>
 800174a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	da2a      	bge.n	80017a8 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 8001752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001756:	e00e      	b.n	8001776 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	3b01      	subs	r3, #1
 800175c:	3330      	adds	r3, #48	@ 0x30
 800175e:	443b      	add	r3, r7
 8001760:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176a:	4413      	add	r3, r2
 800176c:	460a      	mov	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 8001770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001778:	2b00      	cmp	r3, #0
 800177a:	dced      	bgt.n	8001758 <black_box_pack_int+0x4c>
			}
			len_str ++;
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177e:	3301      	adds	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 8001782:	232d      	movs	r3, #45	@ 0x2d
 8001784:	723b      	strb	r3, [r7, #8]
 8001786:	e00f      	b.n	80017a8 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 8001788:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <black_box_pack_int+0x128>)
 800178a:	891b      	ldrh	r3, [r3, #8]
 800178c:	461a      	mov	r2, r3
 800178e:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <black_box_pack_int+0x128>)
 8001790:	4413      	add	r3, r2
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <black_box_pack_int+0x128>)
 800179c:	891b      	ldrh	r3, [r3, #8]
 800179e:	3301      	adds	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <black_box_pack_int+0x128>)
 80017a4:	811a      	strh	r2, [r3, #8]
 80017a6:	e041      	b.n	800182c <black_box_pack_int+0x120>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 80017ac:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <black_box_pack_int+0x128>)
 80017ae:	891b      	ldrh	r3, [r3, #8]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b4:	4413      	add	r3, r2
 80017b6:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80017bc:	dc08      	bgt.n	80017d0 <black_box_pack_int+0xc4>
		max_index = fs.buffer_index + len_str;
 80017be:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <black_box_pack_int+0x128>)
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	461a      	mov	r2, r3
 80017c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c6:	4413      	add	r3, r2
 80017c8:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	e003      	b.n	80017d8 <black_box_pack_int+0xcc>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 80017d0:	23c8      	movs	r3, #200	@ 0xc8
 80017d2:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <black_box_pack_int+0x128>)
 80017da:	891b      	ldrh	r3, [r3, #8]
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	e00f      	b.n	8001800 <black_box_pack_int+0xf4>
			fs.buffer[j] = str_[str_idx ++];
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017e6:	3330      	adds	r3, #48	@ 0x30
 80017e8:	443b      	add	r3, r7
 80017ea:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80017ee:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <black_box_pack_int+0x128>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	330a      	adds	r3, #10
 80017f6:	460a      	mov	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbeb      	blt.n	80017e0 <black_box_pack_int+0xd4>
	}
	
	if(index_flag){
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <black_box_pack_int+0x114>
		fs.buffer_index += len_str;
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <black_box_pack_int+0x128>)
 8001810:	891a      	ldrh	r2, [r3, #8]
 8001812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001814:	b29b      	uxth	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <black_box_pack_int+0x128>)
 800181c:	811a      	strh	r2, [r3, #8]
 800181e:	e005      	b.n	800182c <black_box_pack_int+0x120>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <black_box_pack_int+0x128>)
 8001822:	891b      	ldrh	r3, [r3, #8]
 8001824:	33c8      	adds	r3, #200	@ 0xc8
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b02      	ldr	r3, [pc, #8]	@ (8001834 <black_box_pack_int+0x128>)
 800182a:	811a      	strh	r2, [r3, #8]
	}
}
 800182c:	3730      	adds	r7, #48	@ 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000124 	.word	0x20000124

08001838 <black_box_pack_str>:


void black_box_pack_str(char *c){
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

    int i = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001844:	e01a      	b.n	800187c <black_box_pack_str+0x44>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <black_box_pack_str+0x68>)
 8001848:	891b      	ldrh	r3, [r3, #8]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	2bc8      	cmp	r3, #200	@ 0xc8
 8001852:	dd03      	ble.n	800185c <black_box_pack_str+0x24>
                fs.buffer_index = MAX_BUFFER_SIZE;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <black_box_pack_str+0x68>)
 8001856:	22c8      	movs	r2, #200	@ 0xc8
 8001858:	811a      	strh	r2, [r3, #8]
                return;
 800185a:	e01d      	b.n	8001898 <black_box_pack_str+0x60>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	441a      	add	r2, r3
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <black_box_pack_str+0x68>)
 8001864:	891b      	ldrh	r3, [r3, #8]
 8001866:	4619      	mov	r1, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	440b      	add	r3, r1
 800186c:	7811      	ldrb	r1, [r2, #0]
 800186e:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <black_box_pack_str+0x68>)
 8001870:	4413      	add	r3, r2
 8001872:	460a      	mov	r2, r1
 8001874:	729a      	strb	r2, [r3, #10]
        i ++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1de      	bne.n	8001846 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <black_box_pack_str+0x68>)
 800188a:	891a      	ldrh	r2, [r3, #8]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <black_box_pack_str+0x68>)
 8001896:	811a      	strh	r2, [r3, #8]
}
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000124 	.word	0x20000124

080018a4 <black_box_pack_char>:

void black_box_pack_char(char c){
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <black_box_pack_char+0x30>)
 80018b0:	891b      	ldrh	r3, [r3, #8]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <black_box_pack_char+0x30>)
 80018b6:	4413      	add	r3, r2
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <black_box_pack_char+0x30>)
 80018be:	891b      	ldrh	r3, [r3, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <black_box_pack_char+0x30>)
 80018c6:	811a      	strh	r2, [r3, #8]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000124 	.word	0x20000124

080018d8 <black_box_load>:



void black_box_load()
 {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <black_box_load+0x34>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4619      	mov	r1, r3
 80018e2:	480b      	ldr	r0, [pc, #44]	@ (8001910 <black_box_load+0x38>)
 80018e4:	f00d face 	bl	800ee84 <f_puts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <black_box_load+0x3c>)
 80018ec:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <black_box_load+0x34>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00d f9c0 	bl	800ec78 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 80018f8:	22c8      	movs	r2, #200	@ 0xc8
 80018fa:	2100      	movs	r1, #0
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <black_box_load+0x38>)
 80018fe:	f010 fb8f 	bl	8012020 <memset>
      fs.buffer_index = 0;
 8001902:	4b02      	ldr	r3, [pc, #8]	@ (800190c <black_box_load+0x34>)
 8001904:	2200      	movs	r2, #0
 8001906:	811a      	strh	r2, [r3, #8]
 }
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000124 	.word	0x20000124
 8001910:	2000012e 	.word	0x2000012e
 8001914:	200001fc 	.word	0x200001fc

08001918 <reverse>:




static void reverse( char *str, int len)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800192c:	e018      	b.n	8001960 <reverse+0x48>
        temp = str[i];
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	441a      	add	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	440b      	add	r3, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	701a      	strb	r2, [r3, #0]
        i++;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
        j--;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	3b01      	subs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbe2      	blt.n	800192e <reverse+0x16>
    }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    while (x) {
 8001980:	e01f      	b.n	80019c2 <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <intToStr+0x8c>)
 8001986:	fb83 1302 	smull	r1, r3, r3, r2
 800198a:	1099      	asrs	r1, r3, #2
 800198c:	17d3      	asrs	r3, r2, #31
 800198e:	1ac9      	subs	r1, r1, r3
 8001990:	460b      	mov	r3, r1
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	1ad1      	subs	r1, r2, r3
 800199a:	b2ca      	uxtb	r2, r1
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <intToStr+0x90>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	4818      	ldr	r0, [pc, #96]	@ (8001a04 <intToStr+0x90>)
 80019a4:	6001      	str	r1, [r0, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	440b      	add	r3, r1
 80019ac:	3230      	adds	r2, #48	@ 0x30
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <intToStr+0x8c>)
 80019b6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ba:	1092      	asrs	r2, r2, #2
 80019bc:	17db      	asrs	r3, r3, #31
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	60fb      	str	r3, [r7, #12]
    while (x) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1dc      	bne.n	8001982 <intToStr+0xe>
    }

    while (fs.indexx < d)
 80019c8:	e009      	b.n	80019de <intToStr+0x6a>
        str[fs.indexx++] = '0';
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <intToStr+0x90>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	490c      	ldr	r1, [pc, #48]	@ (8001a04 <intToStr+0x90>)
 80019d2:	600a      	str	r2, [r1, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	2230      	movs	r2, #48	@ 0x30
 80019dc:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <intToStr+0x90>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dcf0      	bgt.n	80019ca <intToStr+0x56>
    reverse(str,fs.indexx);
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <intToStr+0x90>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	68b8      	ldr	r0, [r7, #8]
 80019f0:	f7ff ff92 	bl	8001918 <reverse>
    return fs.indexx;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <intToStr+0x90>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	66666667 	.word	0x66666667
 8001a04:	20000124 	.word	0x20000124

08001a08 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <compassInit+0x64>)
 8001a0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a12:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <compassInit+0x64>)
 8001a16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a1a:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <compassInit+0x64>)
 8001a1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a22:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <compassInit+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <compassInit+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <compassInit+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8001a36:	4a0e      	ldr	r2, [pc, #56]	@ (8001a70 <compassInit+0x68>)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	480e      	ldr	r0, [pc, #56]	@ (8001a74 <compassInit+0x6c>)
 8001a3c:	f003 f8e8 	bl	8004c10 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <compassInit+0x68>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <compassInit+0x6c>)
 8001a46:	f003 f923 	bl	8004c90 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <compassInit+0x70>)
 8001a4c:	f7ff fdd2 	bl	80015f4 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8001a50:	2120      	movs	r1, #32
 8001a52:	480a      	ldr	r0, [pc, #40]	@ (8001a7c <compassInit+0x74>)
 8001a54:	f004 fa66 	bl	8005f24 <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <compassInit+0x5c>
      compass_calibrate();
 8001a5e:	f000 f8f3 	bl	8001c48 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8001a62:	e001      	b.n	8001a68 <compassInit+0x60>
      read_calibrate_file();
 8001a64:	f000 f87c 	bl	8001b60 <read_calibrate_file>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000228 	.word	0x20000228
 8001a70:	200006c4 	.word	0x200006c4
 8001a74:	20000204 	.word	0x20000204
 8001a78:	20000670 	.word	0x20000670
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <compass_get>:

void compass_get(axis3_t *out){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fddd 	bl	800164c <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8001a92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <compass_get+0xdc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8001aa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <compass_get+0xdc>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001abe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <compass_get+0xdc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f8f6 	bl	8000ccc <__aeabi_i2f>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <compass_get+0xdc>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4610      	mov	r0, r2
 8001aea:	f7ff f943 	bl	8000d74 <__aeabi_fmul>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fb1b 	bl	800112c <__aeabi_f2iz>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f8e1 	bl	8000ccc <__aeabi_i2f>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <compass_get+0xdc>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f7ff f92e 	bl	8000d74 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fb06 	bl	800112c <__aeabi_f2iz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8cc 	bl	8000ccc <__aeabi_i2f>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <compass_get+0xdc>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7ff f919 	bl	8000d74 <__aeabi_fmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff faf1 	bl	800112c <__aeabi_f2iz>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	809a      	strh	r2, [r3, #4]
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000228 	.word	0x20000228

08001b60 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <read_calibrate_file+0xd8>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	231c      	movs	r3, #28
 8001b70:	2210      	movs	r2, #16
 8001b72:	4932      	ldr	r1, [pc, #200]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001b74:	f003 f9e5 	bl	8004f42 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff f8a7 	bl	8000ccc <__aeabi_i2f>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f7fe ffec 	bl	8000b64 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff facc 	bl	800112c <__aeabi_f2iz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff f897 	bl	8000ccc <__aeabi_i2f>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f7fe ffdc 	bl	8000b64 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fabc 	bl	800112c <__aeabi_f2iz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff f887 	bl	8000ccc <__aeabi_i2f>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7fe ffcc 	bl	8000b64 <__addsf3>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff faac 	bl	800112c <__aeabi_f2iz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <read_calibrate_file+0xdc>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bfb8      	it	lt
 8001c06:	425b      	neglt	r3, r3
 8001c08:	2b28      	cmp	r3, #40	@ 0x28
 8001c0a:	dd11      	ble.n	8001c30 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c10:	480b      	ldr	r0, [pc, #44]	@ (8001c40 <read_calibrate_file+0xe0>)
 8001c12:	f004 f9b6 	bl	8005f82 <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c16:	2120      	movs	r1, #32
 8001c18:	480a      	ldr	r0, [pc, #40]	@ (8001c44 <read_calibrate_file+0xe4>)
 8001c1a:	f004 f9b2 	bl	8005f82 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001c1e:	2110      	movs	r1, #16
 8001c20:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <read_calibrate_file+0xe4>)
 8001c22:	f004 f9ae 	bl	8005f82 <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8001c26:	2032      	movs	r0, #50	@ 0x32
 8001c28:	f003 fda2 	bl	8005770 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c2c:	bf00      	nop
 8001c2e:	e7ed      	b.n	8001c0c <read_calibrate_file+0xac>
      }
    }
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000204 	.word	0x20000204
 8001c3c:	20000228 	.word	0x20000228
 8001c40:	40011000 	.word	0x40011000
 8001c44:	40010800 	.word	0x40010800

08001c48 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b095      	sub	sp, #84	@ 0x54
 8001c4c:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8001c4e:	4a9f      	ldr	r2, [pc, #636]	@ (8001ecc <compass_calibrate+0x284>)
 8001c50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c58:	6018      	str	r0, [r3, #0]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8001c5e:	4a9c      	ldr	r2, [pc, #624]	@ (8001ed0 <compass_calibrate+0x288>)
 8001c60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c68:	6018      	str	r0, [r3, #0]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8001c74:	4b97      	ldr	r3, [pc, #604]	@ (8001ed4 <compass_calibrate+0x28c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8001c7a:	e0b5      	b.n	8001de8 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fce4 	bl	800164c <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8001c84:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00c      	beq.n	8001ca6 <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8001c8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c90:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8001c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c96:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8001c98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c9c:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8001ca4:	e0a0      	b.n	8001de8 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8001ca6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001cce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001ce2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001ce6:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001cf2:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	441a      	add	r2, r3
 8001cfc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001d00:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fbe2 	bl	80004d4 <__aeabi_i2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f010 f9d4 	bl	80120c4 <sqrt>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fef0 	bl	8000b08 <__aeabi_d2iz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001d2e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d32:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001d36:	4293      	cmp	r3, r2
 8001d38:	dd09      	ble.n	8001d4e <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001d40:	4b64      	ldr	r3, [pc, #400]	@ (8001ed4 <compass_calibrate+0x28c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4b62      	ldr	r3, [pc, #392]	@ (8001ed4 <compass_calibrate+0x28c>)
 8001d4a:	801a      	strh	r2, [r3, #0]
            continue;
 8001d4c:	e04c      	b.n	8001de8 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001d4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d52:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d58:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d5e:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001d60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d64:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dd02      	ble.n	8001d72 <compass_calibrate+0x12a>
 8001d6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d70:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001d72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d76:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dd02      	ble.n	8001d84 <compass_calibrate+0x13c>
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001d84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d88:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dd02      	ble.n	8001d96 <compass_calibrate+0x14e>
 8001d90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d94:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001d96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d9a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	da02      	bge.n	8001da8 <compass_calibrate+0x160>
 8001da2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001da6:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001da8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001db0:	429a      	cmp	r2, r3
 8001db2:	da02      	bge.n	8001dba <compass_calibrate+0x172>
 8001db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db8:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001dba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001dbe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	da02      	bge.n	8001dcc <compass_calibrate+0x184>
 8001dc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dca:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4842      	ldr	r0, [pc, #264]	@ (8001ed8 <compass_calibrate+0x290>)
 8001dd0:	f004 f8d7 	bl	8005f82 <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	f003 fccb 	bl	8005770 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001dda:	2120      	movs	r1, #32
 8001ddc:	483f      	ldr	r0, [pc, #252]	@ (8001edc <compass_calibrate+0x294>)
 8001dde:	f004 f8a1 	bl	8005f24 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <compass_calibrate+0x1ae>
	while(!file_open){
 8001de8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <compass_calibrate+0x298>)
 8001dea:	f993 3000 	ldrsb.w	r3, [r3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f43f af44 	beq.w	8001c7c <compass_calibrate+0x34>
 8001df4:	e000      	b.n	8001df8 <compass_calibrate+0x1b0>
              break;
 8001df6:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001df8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dc02      	bgt.n	8001e06 <compass_calibrate+0x1be>
 8001e00:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001e04:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001e06:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db02      	blt.n	8001e14 <compass_calibrate+0x1cc>
 8001e0e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001e12:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001e14:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001e1e:	4413      	add	r3, r2
 8001e20:	0fda      	lsrs	r2, r3, #31
 8001e22:	4413      	add	r3, r2
 8001e24:	105b      	asrs	r3, r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001e28:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001e32:	4413      	add	r3, r2
 8001e34:	0fda      	lsrs	r2, r3, #31
 8001e36:	4413      	add	r3, r2
 8001e38:	105b      	asrs	r3, r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001e3c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001e40:	461a      	mov	r2, r3
 8001e42:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001e46:	4413      	add	r3, r2
 8001e48:	0fda      	lsrs	r2, r3, #31
 8001e4a:	4413      	add	r3, r2
 8001e4c:	105b      	asrs	r3, r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001e50:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bfb8      	it	lt
 8001e58:	425b      	neglt	r3, r3
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bfb8      	it	lt
 8001e64:	425b      	neglt	r3, r3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001e70:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bfb8      	it	lt
 8001e78:	425b      	neglt	r3, r3
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bfb8      	it	lt
 8001e84:	425b      	neglt	r3, r3
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001e90:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bfb8      	it	lt
 8001e98:	425b      	neglt	r3, r3
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bfb8      	it	lt
 8001ea4:	425b      	neglt	r3, r3
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8001eb4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8001eb8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dd11      	ble.n	8001ee4 <compass_calibrate+0x29c>
        max_value = x_;
 8001ec0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001ec4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001ec8:	e010      	b.n	8001eec <compass_calibrate+0x2a4>
 8001eca:	bf00      	nop
 8001ecc:	080123f0 	.word	0x080123f0
 8001ed0:	080123f8 	.word	0x080123f8
 8001ed4:	20000200 	.word	0x20000200
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	20000244 	.word	0x20000244
    else
        max_value = y_;
 8001ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ee8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8001eec:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001ef0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	da02      	bge.n	8001efe <compass_calibrate+0x2b6>
        max_value = z_;
 8001ef8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001efa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8001efe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fee2 	bl	8000ccc <__aeabi_i2f>
 8001f08:	4604      	mov	r4, r0
 8001f0a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fedc 	bl	8000ccc <__aeabi_i2f>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7fe ffdf 	bl	8000edc <__aeabi_fdiv>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8001f22:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fed0 	bl	8000ccc <__aeabi_i2f>
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe feca 	bl	8000ccc <__aeabi_i2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7fe ffcd 	bl	8000edc <__aeabi_fdiv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8001f46:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe febe 	bl	8000ccc <__aeabi_i2f>
 8001f50:	4604      	mov	r4, r0
 8001f52:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe feb8 	bl	8000ccc <__aeabi_i2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7fe ffbb 	bl	8000edc <__aeabi_fdiv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8001f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe feab 	bl	8000ccc <__aeabi_i2f>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f7fe fdf1 	bl	8000b64 <__addsf3>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8d1 	bl	800112c <__aeabi_f2iz>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8001f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fe9b 	bl	8000ccc <__aeabi_i2f>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe fde1 	bl	8000b64 <__addsf3>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f8c1 	bl	800112c <__aeabi_f2iz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8001fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fe8b 	bl	8000ccc <__aeabi_i2f>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	f7fe fdd1 	bl	8000b64 <__addsf3>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f8b1 	bl	800112c <__aeabi_f2iz>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8001fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 8001fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	4413      	add	r3, r2
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8001fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <compass_calibrate+0x3c4>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	f107 0114 	add.w	r1, r7, #20
 8001fee:	231c      	movs	r3, #28
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	f002 fea4 	bl	8004d3e <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	4805      	ldr	r0, [pc, #20]	@ (8002010 <compass_calibrate+0x3c8>)
 8001ffa:	f003 ffc2 	bl	8005f82 <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8001ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002002:	f003 fbb5 	bl	8005770 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002006:	bf00      	nop
 8002008:	e7f5      	b.n	8001ff6 <compass_calibrate+0x3ae>
 800200a:	bf00      	nop
 800200c:	20000204 	.word	0x20000204
 8002010:	40010800 	.word	0x40010800

08002014 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 800201e:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <gps_init+0xa8>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002024:	4b26      	ldr	r3, [pc, #152]	@ (80020c0 <gps_init+0xac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800202c:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <gps_init+0xb0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4413      	add	r3, r2
 8002032:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <gps_init+0xb4>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <gps_init+0xb8>)
 800203c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <gps_init+0xbc>)
 8002040:	2200      	movs	r2, #0
 8002042:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <gps_init+0xc0>)
 8002046:	2200      	movs	r2, #0
 8002048:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 800204a:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <gps_init+0xc4>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <gps_init+0xa8>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002058:	22a8      	movs	r2, #168	@ 0xa8
 800205a:	4920      	ldr	r1, [pc, #128]	@ (80020dc <gps_init+0xc8>)
 800205c:	f008 f9da 	bl	800a414 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002060:	200a      	movs	r0, #10
 8002062:	f003 fb85 	bl	8005770 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <gps_init+0xa8>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	2210      	movs	r2, #16
 8002070:	491b      	ldr	r1, [pc, #108]	@ (80020e0 <gps_init+0xcc>)
 8002072:	f008 f9cf 	bl	800a414 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002076:	200a      	movs	r0, #10
 8002078:	f003 fb7a 	bl	8005770 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <gps_init+0xa8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002084:	221c      	movs	r2, #28
 8002086:	4917      	ldr	r1, [pc, #92]	@ (80020e4 <gps_init+0xd0>)
 8002088:	f008 f9c4 	bl	800a414 <HAL_UART_Transmit>
    HAL_Delay(10);
 800208c:	200a      	movs	r0, #10
 800208e:	f003 fb6f 	bl	8005770 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <gps_init+0xa8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <gps_init+0xa8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f008 f968 	bl	800a374 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <gps_init+0xa8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	490f      	ldr	r1, [pc, #60]	@ (80020e8 <gps_init+0xd4>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f008 fa34 	bl	800a51a <HAL_UART_Receive_IT>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000280 	.word	0x20000280
 80020c0:	200003dc 	.word	0x200003dc
 80020c4:	200003e0 	.word	0x200003e0
 80020c8:	10624dd3 	.word	0x10624dd3
 80020cc:	20000248 	.word	0x20000248
 80020d0:	2000028e 	.word	0x2000028e
 80020d4:	20000290 	.word	0x20000290
 80020d8:	2000028c 	.word	0x2000028c
 80020dc:	080124f4 	.word	0x080124f4
 80020e0:	20000000 	.word	0x20000000
 80020e4:	0801259c 	.word	0x0801259c
 80020e8:	20000284 	.word	0x20000284

080020ec <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 80020f0:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <gps_uart_port+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000280 	.word	0x20000280

08002100 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <gps_callback+0x2c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a08      	ldr	r2, [pc, #32]	@ (800212c <gps_callback+0x2c>)
 800210c:	6013      	str	r3, [r2, #0]
   newdata(_char);
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <gps_callback+0x30>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f8f6 	bl	8002304 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <gps_callback+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4904      	ldr	r1, [pc, #16]	@ (8002130 <gps_callback+0x30>)
 8002120:	4618      	mov	r0, r3
 8002122:	f008 f9fa 	bl	800a51a <HAL_UART_Receive_IT>
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000035c 	.word	0x2000035c
 8002130:	20000284 	.word	0x20000284
 8002134:	20000280 	.word	0x20000280

08002138 <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 800213c:	4b67      	ldr	r3, [pc, #412]	@ (80022dc <parse_msg+0x1a4>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b12      	cmp	r3, #18
 8002142:	dc2b      	bgt.n	800219c <parse_msg+0x64>
 8002144:	2b02      	cmp	r3, #2
 8002146:	f2c0 80ad 	blt.w	80022a4 <parse_msg+0x16c>
 800214a:	3b02      	subs	r3, #2
 800214c:	2b10      	cmp	r3, #16
 800214e:	f200 80a9 	bhi.w	80022a4 <parse_msg+0x16c>
 8002152:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <parse_msg+0x20>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	080021a5 	.word	0x080021a5
 800215c:	08002219 	.word	0x08002219
 8002160:	080022a5 	.word	0x080022a5
 8002164:	080022a5 	.word	0x080022a5
 8002168:	08002245 	.word	0x08002245
 800216c:	080022a5 	.word	0x080022a5
 8002170:	080022a5 	.word	0x080022a5
 8002174:	080022a5 	.word	0x080022a5
 8002178:	080022a5 	.word	0x080022a5
 800217c:	080022a5 	.word	0x080022a5
 8002180:	080022a5 	.word	0x080022a5
 8002184:	080022a5 	.word	0x080022a5
 8002188:	080022a5 	.word	0x080022a5
 800218c:	080022a5 	.word	0x080022a5
 8002190:	080022a5 	.word	0x080022a5
 8002194:	080022a5 	.word	0x080022a5
 8002198:	0800225d 	.word	0x0800225d
 800219c:	2b30      	cmp	r3, #48	@ 0x30
 800219e:	f000 8083 	beq.w	80022a8 <parse_msg+0x170>
 80021a2:	e07f      	b.n	80022a4 <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 80021a4:	4b4e      	ldr	r3, [pc, #312]	@ (80022e0 <parse_msg+0x1a8>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a4e      	ldr	r2, [pc, #312]	@ (80022e4 <parse_msg+0x1ac>)
 80021aa:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 80021ac:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <parse_msg+0x1a8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	@ (80022e4 <parse_msg+0x1ac>)
 80021b2:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 80021b4:	4b4a      	ldr	r3, [pc, #296]	@ (80022e0 <parse_msg+0x1a8>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b4a      	ldr	r3, [pc, #296]	@ (80022e4 <parse_msg+0x1ac>)
 80021bc:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 80021be:	4b48      	ldr	r3, [pc, #288]	@ (80022e0 <parse_msg+0x1a8>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4a48      	ldr	r2, [pc, #288]	@ (80022e4 <parse_msg+0x1ac>)
 80021c4:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 80021c6:	4b46      	ldr	r3, [pc, #280]	@ (80022e0 <parse_msg+0x1a8>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <parse_msg+0x1ac>)
 80021cc:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 80021ce:	4b46      	ldr	r3, [pc, #280]	@ (80022e8 <parse_msg+0x1b0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06a      	beq.n	80022ac <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 80021d6:	4b45      	ldr	r3, [pc, #276]	@ (80022ec <parse_msg+0x1b4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021de:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <parse_msg+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a43      	ldr	r2, [pc, #268]	@ (80022f4 <parse_msg+0x1bc>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	099a      	lsrs	r2, r3, #6
 80021ec:	4b3e      	ldr	r3, [pc, #248]	@ (80022e8 <parse_msg+0x1b0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a3c      	ldr	r2, [pc, #240]	@ (80022e4 <parse_msg+0x1ac>)
 80021f4:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 80021f6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <parse_msg+0x1b4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021fe:	4b3c      	ldr	r3, [pc, #240]	@ (80022f0 <parse_msg+0x1b8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a3b      	ldr	r2, [pc, #236]	@ (80022f4 <parse_msg+0x1bc>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	4a36      	ldr	r2, [pc, #216]	@ (80022e8 <parse_msg+0x1b0>)
 800220e:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <parse_msg+0x1c0>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
            break;
 8002216:	e04a      	b.n	80022ae <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 8002218:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <parse_msg+0x1a8>)
 800221a:	795b      	ldrb	r3, [r3, #5]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <parse_msg+0xf8>
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <parse_msg+0x1a8>)
 8002226:	791b      	ldrb	r3, [r3, #4]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d101      	bne.n	8002230 <parse_msg+0xf8>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <parse_msg+0xfa>
 8002230:	2300      	movs	r3, #0
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <parse_msg+0x1c4>)
 8002236:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <parse_msg+0x1a8>)
 800223a:	791a      	ldrb	r2, [r3, #4]
 800223c:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <parse_msg+0x1ac>)
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 8002242:	e034      	b.n	80022ae <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 8002244:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <parse_msg+0x1a8>)
 8002246:	7a9a      	ldrb	r2, [r3, #10]
 8002248:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <parse_msg+0x1ac>)
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <parse_msg+0x1a8>)
 8002250:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002254:	4b23      	ldr	r3, [pc, #140]	@ (80022e4 <parse_msg+0x1ac>)
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 800225a:	e028      	b.n	80022ae <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 800225c:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <parse_msg+0x1a8>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <parse_msg+0x1ac>)
 8002262:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <parse_msg+0x1a8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <parse_msg+0x1ac>)
 800226a:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <parse_msg+0x1a8>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <parse_msg+0x1ac>)
 8002272:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <parse_msg+0x1a8>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	461a      	mov	r2, r3
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <parse_msg+0x1ac>)
 800227c:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <parse_msg+0x1a8>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <parse_msg+0x1ac>)
 8002286:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8002288:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <parse_msg+0x1a8>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	461a      	mov	r2, r3
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <parse_msg+0x1ac>)
 8002290:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8002292:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <parse_msg+0x1a8>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	461a      	mov	r2, r3
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <parse_msg+0x1ac>)
 800229a:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <parse_msg+0x1c8>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
            break;
 80022a2:	e004      	b.n	80022ae <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e014      	b.n	80022d2 <parse_msg+0x19a>
            break;
 80022a8:	bf00      	nop
 80022aa:	e000      	b.n	80022ae <parse_msg+0x176>
                break;
 80022ac:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 80022ae:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <parse_msg+0x1c0>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <parse_msg+0x198>
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <parse_msg+0x1c8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <parse_msg+0x1c0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <parse_msg+0x1c0>)
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <parse_msg+0x1c8>)
 80022ca:	701a      	strb	r2, [r3, #0]
        return TRUE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <parse_msg+0x19a>
    }
    return FALSE;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	2000028c 	.word	0x2000028c
 80022e0:	20000294 	.word	0x20000294
 80022e4:	20000248 	.word	0x20000248
 80022e8:	20000360 	.word	0x20000360
 80022ec:	200003dc 	.word	0x200003dc
 80022f0:	200003e0 	.word	0x200003e0
 80022f4:	10624dd3 	.word	0x10624dd3
 80022f8:	20000364 	.word	0x20000364
 80022fc:	20000365 	.word	0x20000365
 8002300:	20000366 	.word	0x20000366

08002304 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 8002312:	4b85      	ldr	r3, [pc, #532]	@ (8002528 <newdata+0x224>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b08      	cmp	r3, #8
 8002318:	f200 8100 	bhi.w	800251c <newdata+0x218>
 800231c:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <newdata+0x20>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	08002349 	.word	0x08002349
 8002328:	0800235f 	.word	0x0800235f
 800232c:	08002373 	.word	0x08002373
 8002330:	0800238f 	.word	0x0800238f
 8002334:	080023c1 	.word	0x080023c1
 8002338:	080023f5 	.word	0x080023f5
 800233c:	0800244f 	.word	0x0800244f
 8002340:	080024a7 	.word	0x080024a7
 8002344:	080024c5 	.word	0x080024c5
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2bb5      	cmp	r3, #181	@ 0xb5
 800234c:	f040 80df 	bne.w	800250e <newdata+0x20a>
                _step++;
 8002350:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <newdata+0x224>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b73      	ldr	r3, [pc, #460]	@ (8002528 <newdata+0x224>)
 800235a:	701a      	strb	r2, [r3, #0]
            break;
 800235c:	e0d7      	b.n	800250e <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b62      	cmp	r3, #98	@ 0x62
 8002362:	d106      	bne.n	8002372 <newdata+0x6e>
                _step++;
 8002364:	4b70      	ldr	r3, [pc, #448]	@ (8002528 <newdata+0x224>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b6e      	ldr	r3, [pc, #440]	@ (8002528 <newdata+0x224>)
 800236e:	701a      	strb	r2, [r3, #0]
                break;
 8002370:	e0d4      	b.n	800251c <newdata+0x218>
            }
        case 2: // Class
            _step++;
 8002372:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <newdata+0x224>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b6b      	ldr	r3, [pc, #428]	@ (8002528 <newdata+0x224>)
 800237c:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 800237e:	4a6b      	ldr	r2, [pc, #428]	@ (800252c <newdata+0x228>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	7013      	strb	r3, [r2, #0]
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <newdata+0x228>)
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	4b69      	ldr	r3, [pc, #420]	@ (8002530 <newdata+0x22c>)
 800238a:	701a      	strb	r2, [r3, #0]
            break;
 800238c:	e0c6      	b.n	800251c <newdata+0x218>
        case 3: // ID
            _step++;
 800238e:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <newdata+0x224>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b64      	ldr	r3, [pc, #400]	@ (8002528 <newdata+0x224>)
 8002398:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 800239a:	4b64      	ldr	r3, [pc, #400]	@ (800252c <newdata+0x228>)
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	4413      	add	r3, r2
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b61      	ldr	r3, [pc, #388]	@ (800252c <newdata+0x228>)
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	4b60      	ldr	r3, [pc, #384]	@ (800252c <newdata+0x228>)
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	4b60      	ldr	r3, [pc, #384]	@ (8002530 <newdata+0x22c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002530 <newdata+0x22c>)
 80023b6:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 80023b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002534 <newdata+0x230>)
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	7013      	strb	r3, [r2, #0]
            break;
 80023be:	e0ad      	b.n	800251c <newdata+0x218>
        case 4: 
            _step++;
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <newdata+0x224>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <newdata+0x224>)
 80023ca:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80023cc:	4b57      	ldr	r3, [pc, #348]	@ (800252c <newdata+0x228>)
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b55      	ldr	r3, [pc, #340]	@ (800252c <newdata+0x228>)
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	4b54      	ldr	r3, [pc, #336]	@ (800252c <newdata+0x228>)
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	4b54      	ldr	r3, [pc, #336]	@ (8002530 <newdata+0x22c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b52      	ldr	r3, [pc, #328]	@ (8002530 <newdata+0x22c>)
 80023e8:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <newdata+0x234>)
 80023f0:	801a      	strh	r2, [r3, #0]
            break;
 80023f2:	e093      	b.n	800251c <newdata+0x218>
        case 5: 
            _step++;
 80023f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002528 <newdata+0x224>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <newdata+0x224>)
 80023fe:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002400:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <newdata+0x228>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4413      	add	r3, r2
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b48      	ldr	r3, [pc, #288]	@ (800252c <newdata+0x228>)
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <newdata+0x228>)
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	4b47      	ldr	r3, [pc, #284]	@ (8002530 <newdata+0x22c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b45      	ldr	r3, [pc, #276]	@ (8002530 <newdata+0x22c>)
 800241c:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	b29b      	uxth	r3, r3
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <newdata+0x234>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b42      	ldr	r3, [pc, #264]	@ (8002538 <newdata+0x234>)
 8002430:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <newdata+0x234>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	2bc8      	cmp	r3, #200	@ 0xc8
 8002438:	d905      	bls.n	8002446 <newdata+0x142>
                _payload_length = 0;
 800243a:	4b3f      	ldr	r3, [pc, #252]	@ (8002538 <newdata+0x234>)
 800243c:	2200      	movs	r2, #0
 800243e:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002440:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <newdata+0x224>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <newdata+0x238>)
 8002448:	2200      	movs	r2, #0
 800244a:	801a      	strh	r2, [r3, #0]
            break;
 800244c:	e066      	b.n	800251c <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <newdata+0x228>)
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4413      	add	r3, r2
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b34      	ldr	r3, [pc, #208]	@ (800252c <newdata+0x228>)
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	4b33      	ldr	r3, [pc, #204]	@ (800252c <newdata+0x228>)
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <newdata+0x22c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4413      	add	r3, r2
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <newdata+0x22c>)
 800246a:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 800246c:	4b33      	ldr	r3, [pc, #204]	@ (800253c <newdata+0x238>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	2bc7      	cmp	r3, #199	@ 0xc7
 8002472:	d805      	bhi.n	8002480 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8002474:	4b31      	ldr	r3, [pc, #196]	@ (800253c <newdata+0x238>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	4a31      	ldr	r2, [pc, #196]	@ (8002540 <newdata+0x23c>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8002480:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <newdata+0x238>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b2c      	ldr	r3, [pc, #176]	@ (800253c <newdata+0x238>)
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <newdata+0x238>)
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	4b29      	ldr	r3, [pc, #164]	@ (8002538 <newdata+0x234>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d13c      	bne.n	8002512 <newdata+0x20e>
                _step++;
 8002498:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <newdata+0x224>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <newdata+0x224>)
 80024a2:	701a      	strb	r2, [r3, #0]
            break;
 80024a4:	e035      	b.n	8002512 <newdata+0x20e>
        case 7:
            _step++;
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <newdata+0x224>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <newdata+0x224>)
 80024b0:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 80024b2:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <newdata+0x228>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d02c      	beq.n	8002516 <newdata+0x212>
                _step = 0;         
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <newdata+0x224>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
            break;
 80024c2:	e028      	b.n	8002516 <newdata+0x212>
        case 8:
            _step = 0;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <newdata+0x224>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <newdata+0x22c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d122      	bne.n	800251a <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <newdata+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <newdata+0x244>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	441a      	add	r2, r3
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <newdata+0x248>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a19      	ldr	r2, [pc, #100]	@ (8002550 <newdata+0x24c>)
 80024ea:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <newdata+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <newdata+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a14      	ldr	r2, [pc, #80]	@ (800254c <newdata+0x248>)
 80024fc:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 80024fe:	f7ff fe1b 	bl	8002138 <parse_msg>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <newdata+0x218>
            {
                parsed = TRUE;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e006      	b.n	800251c <newdata+0x218>
            break;
 800250e:	bf00      	nop
 8002510:	e004      	b.n	800251c <newdata+0x218>
            break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <newdata+0x218>
            break;
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <newdata+0x218>
                break;   
 800251a:	bf00      	nop
            }
    } 
    return parsed;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000367 	.word	0x20000367
 800252c:	20000368 	.word	0x20000368
 8002530:	20000369 	.word	0x20000369
 8002534:	2000028c 	.word	0x2000028c
 8002538:	2000028e 	.word	0x2000028e
 800253c:	20000290 	.word	0x20000290
 8002540:	20000294 	.word	0x20000294
 8002544:	200003dc 	.word	0x200003dc
 8002548:	200003e0 	.word	0x200003e0
 800254c:	2000036c 	.word	0x2000036c
 8002550:	20000288 	.word	0x20000288

08002554 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 8002560:	4b2b      	ldr	r3, [pc, #172]	@ (8002610 <imu_calibrate+0xbc>)
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8002568:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <imu_calibrate+0xc0>)
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <imu_calibrate+0xc4>)
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	e01f      	b.n	80025be <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe ffb8 	bl	80014f8 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8002588:	4b24      	ldr	r3, [pc, #144]	@ (800261c <imu_calibrate+0xc8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002590:	4413      	add	r3, r2
 8002592:	4a22      	ldr	r2, [pc, #136]	@ (800261c <imu_calibrate+0xc8>)
 8002594:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 8002596:	4b21      	ldr	r3, [pc, #132]	@ (800261c <imu_calibrate+0xc8>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800259e:	4413      	add	r3, r2
 80025a0:	4a1e      	ldr	r2, [pc, #120]	@ (800261c <imu_calibrate+0xc8>)
 80025a2:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <imu_calibrate+0xc8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	4a1b      	ldr	r2, [pc, #108]	@ (800261c <imu_calibrate+0xc8>)
 80025b0:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 80025b2:	2001      	movs	r0, #1
 80025b4:	f003 f8dc 	bl	8005770 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025c4:	dbdb      	blt.n	800257e <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <imu_calibrate+0xc8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a15      	ldr	r2, [pc, #84]	@ (8002620 <imu_calibrate+0xcc>)
 80025cc:	fb82 1203 	smull	r1, r2, r2, r3
 80025d0:	1192      	asrs	r2, r2, #6
 80025d2:	17db      	asrs	r3, r3, #31
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <imu_calibrate+0xc8>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <imu_calibrate+0xcc>)
 80025e2:	fb82 1203 	smull	r1, r2, r2, r3
 80025e6:	1192      	asrs	r2, r2, #6
 80025e8:	17db      	asrs	r3, r3, #31
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <imu_calibrate+0xc8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <imu_calibrate+0xcc>)
 80025f8:	fb82 1203 	smull	r1, r2, r2, r3
 80025fc:	1192      	asrs	r2, r2, #6
 80025fe:	17db      	asrs	r3, r3, #31
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	b21a      	sxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	801a      	strh	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000388 	.word	0x20000388
 8002614:	2000038c 	.word	0x2000038c
 8002618:	20000390 	.word	0x20000390
 800261c:	200003c4 	.word	0x200003c4
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t first_loop = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b0a5      	sub	sp, #148	@ 0x94
 8002628:	af00      	add	r7, sp, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	80fb      	strh	r3, [r7, #6]
 8002636:	4603      	mov	r3, r0
 8002638:	80bb      	strh	r3, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	807b      	strh	r3, [r7, #2]
 800263e:	4613      	mov	r3, r2
 8002640:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 8002642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb40 	bl	8000ccc <__aeabi_i2f>
 800264c:	4602      	mov	r2, r0
 800264e:	4baa      	ldr	r3, [pc, #680]	@ (80028f8 <update_ahrs+0x2d4>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f7fe fc41 	bl	8000edc <__aeabi_fdiv>
 800265a:	4603      	mov	r3, r0
 800265c:	49a7      	ldr	r1, [pc, #668]	@ (80028fc <update_ahrs+0x2d8>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fb88 	bl	8000d74 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	gy = (gy_/config.gyr_lsb) * RAD;
 800266a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fb2c 	bl	8000ccc <__aeabi_i2f>
 8002674:	4602      	mov	r2, r0
 8002676:	4ba0      	ldr	r3, [pc, #640]	@ (80028f8 <update_ahrs+0x2d4>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f7fe fc2d 	bl	8000edc <__aeabi_fdiv>
 8002682:	4603      	mov	r3, r0
 8002684:	499d      	ldr	r1, [pc, #628]	@ (80028fc <update_ahrs+0x2d8>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fb74 	bl	8000d74 <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	gz = (gz_/config.gyr_lsb) * RAD;
 8002692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fb18 	bl	8000ccc <__aeabi_i2f>
 800269c:	4602      	mov	r2, r0
 800269e:	4b96      	ldr	r3, [pc, #600]	@ (80028f8 <update_ahrs+0x2d4>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4610      	mov	r0, r2
 80026a6:	f7fe fc19 	bl	8000edc <__aeabi_fdiv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4993      	ldr	r1, [pc, #588]	@ (80028fc <update_ahrs+0x2d8>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fb60 	bl	8000d74 <__aeabi_fmul>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 80026ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <update_ahrs+0xb0>
 80026c2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <update_ahrs+0xb0>
 80026ca:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8249 	beq.w	8002b66 <update_ahrs+0x542>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 80026d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80026dc:	fb03 f202 	mul.w	r2, r3, r2
 80026e0:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80026e4:	f9b7 10a0 	ldrsh.w	r1, [r7, #160]	@ 0xa0
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	441a      	add	r2, r3
 80026ee:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 80026f2:	f9b7 10a4 	ldrsh.w	r1, [r7, #164]	@ 0xa4
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fae5 	bl	8000ccc <__aeabi_i2f>
 8002702:	4603      	mov	r3, r0
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fddd 	bl	80032c4 <invSqrt_>
 800270a:	67f8      	str	r0, [r7, #124]	@ 0x7c
		acc_x = (float)accx_ * norm;
 800270c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fadb 	bl	8000ccc <__aeabi_i2f>
 8002716:	4603      	mov	r3, r0
 8002718:	4619      	mov	r1, r3
 800271a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800271c:	f7fe fb2a 	bl	8000d74 <__aeabi_fmul>
 8002720:	4603      	mov	r3, r0
 8002722:	67bb      	str	r3, [r7, #120]	@ 0x78
		acc_y = (float)accy_ * norm;
 8002724:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe facf 	bl	8000ccc <__aeabi_i2f>
 800272e:	4603      	mov	r3, r0
 8002730:	4619      	mov	r1, r3
 8002732:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002734:	f7fe fb1e 	bl	8000d74 <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	677b      	str	r3, [r7, #116]	@ 0x74
		acc_z = (float)accz_ * norm;
 800273c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fac3 	bl	8000ccc <__aeabi_i2f>
 8002746:	4603      	mov	r3, r0
 8002748:	4619      	mov	r1, r3
 800274a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800274c:	f7fe fb12 	bl	8000d74 <__aeabi_fmul>
 8002750:	4603      	mov	r3, r0
 8002752:	673b      	str	r3, [r7, #112]	@ 0x70

		if(first_loop){
 8002754:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <update_ahrs+0x2dc>)
 8002756:	f993 3000 	ldrsb.w	r3, [r3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <update_ahrs+0x152>
			dcm[0][2] = acc_x;
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <update_ahrs+0x2e0>)
 8002760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002762:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 8002764:	4a67      	ldr	r2, [pc, #412]	@ (8002904 <update_ahrs+0x2e0>)
 8002766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002768:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 800276a:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <update_ahrs+0x2e0>)
 800276c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800276e:	6213      	str	r3, [r2, #32]
			first_loop = 0;
 8002770:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <update_ahrs+0x2dc>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 8002776:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800277a:	f9b7 20a8 	ldrsh.w	r2, [r7, #168]	@ 0xa8
 800277e:	fb03 f202 	mul.w	r2, r3, r2
 8002782:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002786:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	441a      	add	r2, r3
 8002790:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8002794:	f9b7 10b0 	ldrsh.w	r1, [r7, #176]	@ 0xb0
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fa94 	bl	8000ccc <__aeabi_i2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fd8c 	bl	80032c4 <invSqrt_>
 80027ac:	67f8      	str	r0, [r7, #124]	@ 0x7c
			mx = magx * norm;
 80027ae:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fa8a 	bl	8000ccc <__aeabi_i2f>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4619      	mov	r1, r3
 80027bc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80027be:	f7fe fad9 	bl	8000d74 <__aeabi_fmul>
 80027c2:	4603      	mov	r3, r0
 80027c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			my = magy * norm;
 80027c6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fa7e 	bl	8000ccc <__aeabi_i2f>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4619      	mov	r1, r3
 80027d4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80027d6:	f7fe facd 	bl	8000d74 <__aeabi_fmul>
 80027da:	4603      	mov	r3, r0
 80027dc:	66bb      	str	r3, [r7, #104]	@ 0x68
			mz = magz * norm;
 80027de:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fa72 	bl	8000ccc <__aeabi_i2f>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80027ee:	f7fe fac1 	bl	8000d74 <__aeabi_fmul>
 80027f2:	4603      	mov	r3, r0
 80027f4:	667b      	str	r3, [r7, #100]	@ 0x64

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 80027f6:	4b43      	ldr	r3, [pc, #268]	@ (8002904 <update_ahrs+0x2e0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fab9 	bl	8000d74 <__aeabi_fmul>
 8002802:	4603      	mov	r3, r0
 8002804:	461c      	mov	r4, r3
 8002806:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <update_ahrs+0x2e0>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fab1 	bl	8000d74 <__aeabi_fmul>
 8002812:	4603      	mov	r3, r0
 8002814:	4619      	mov	r1, r3
 8002816:	4620      	mov	r0, r4
 8002818:	f7fe f9a4 	bl	8000b64 <__addsf3>
 800281c:	4603      	mov	r3, r0
 800281e:	461c      	mov	r4, r3
 8002820:	4b38      	ldr	r3, [pc, #224]	@ (8002904 <update_ahrs+0x2e0>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe faa4 	bl	8000d74 <__aeabi_fmul>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	4620      	mov	r0, r4
 8002832:	f7fe f997 	bl	8000b64 <__addsf3>
 8002836:	4603      	mov	r3, r0
 8002838:	663b      	str	r3, [r7, #96]	@ 0x60
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 800283a:	4b32      	ldr	r3, [pc, #200]	@ (8002904 <update_ahrs+0x2e0>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fa97 	bl	8000d74 <__aeabi_fmul>
 8002846:	4603      	mov	r3, r0
 8002848:	461c      	mov	r4, r3
 800284a:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <update_ahrs+0x2e0>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fa8f 	bl	8000d74 <__aeabi_fmul>
 8002856:	4603      	mov	r3, r0
 8002858:	4619      	mov	r1, r3
 800285a:	4620      	mov	r0, r4
 800285c:	f7fe f982 	bl	8000b64 <__addsf3>
 8002860:	4603      	mov	r3, r0
 8002862:	461c      	mov	r4, r3
 8002864:	4b27      	ldr	r3, [pc, #156]	@ (8002904 <update_ahrs+0x2e0>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fa82 	bl	8000d74 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	4620      	mov	r0, r4
 8002876:	f7fe f975 	bl	8000b64 <__addsf3>
 800287a:	4603      	mov	r3, r0
 800287c:	65fb      	str	r3, [r7, #92]	@ 0x5c
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <update_ahrs+0x2e0>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fa75 	bl	8000d74 <__aeabi_fmul>
 800288a:	4603      	mov	r3, r0
 800288c:	461c      	mov	r4, r3
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <update_ahrs+0x2e0>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fa6d 	bl	8000d74 <__aeabi_fmul>
 800289a:	4603      	mov	r3, r0
 800289c:	4619      	mov	r1, r3
 800289e:	4620      	mov	r0, r4
 80028a0:	f7fe f960 	bl	8000b64 <__addsf3>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461c      	mov	r4, r3
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <update_ahrs+0x2e0>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fa60 	bl	8000d74 <__aeabi_fmul>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7fe f953 	bl	8000b64 <__addsf3>
 80028be:	4603      	mov	r3, r0
 80028c0:	65bb      	str	r3, [r7, #88]	@ 0x58

			bx = sqrtf(hx * hx + hy * hy);
 80028c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80028c4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80028c6:	f7fe fa55 	bl	8000d74 <__aeabi_fmul>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461c      	mov	r4, r3
 80028ce:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80028d0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80028d2:	f7fe fa4f 	bl	8000d74 <__aeabi_fmul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4619      	mov	r1, r3
 80028da:	4620      	mov	r0, r4
 80028dc:	f7fe f942 	bl	8000b64 <__addsf3>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f00f fc12 	bl	801210c <sqrtf>
 80028e8:	6578      	str	r0, [r7, #84]	@ 0x54

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <update_ahrs+0x2e0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fa3f 	bl	8000d74 <__aeabi_fmul>
 80028f6:	e007      	b.n	8002908 <update_ahrs+0x2e4>
 80028f8:	20000018 	.word	0x20000018
 80028fc:	3c8efa35 	.word	0x3c8efa35
 8002900:	20000024 	.word	0x20000024
 8002904:	200003a0 	.word	0x200003a0
 8002908:	4603      	mov	r3, r0
 800290a:	461c      	mov	r4, r3
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <update_ahrs+0x4a8>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fa2e 	bl	8000d74 <__aeabi_fmul>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe f921 	bl	8000b64 <__addsf3>
 8002922:	4603      	mov	r3, r0
 8002924:	653b      	str	r3, [r7, #80]	@ 0x50
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8002926:	4b69      	ldr	r3, [pc, #420]	@ (8002acc <update_ahrs+0x4a8>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fa21 	bl	8000d74 <__aeabi_fmul>
 8002932:	4603      	mov	r3, r0
 8002934:	461c      	mov	r4, r3
 8002936:	4b65      	ldr	r3, [pc, #404]	@ (8002acc <update_ahrs+0x4a8>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fa19 	bl	8000d74 <__aeabi_fmul>
 8002942:	4603      	mov	r3, r0
 8002944:	4619      	mov	r1, r3
 8002946:	4620      	mov	r0, r4
 8002948:	f7fe f90c 	bl	8000b64 <__addsf3>
 800294c:	4603      	mov	r3, r0
 800294e:	64fb      	str	r3, [r7, #76]	@ 0x4c
			emz = mx * wy - my * wx;
 8002950:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002952:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002954:	f7fe fa0e 	bl	8000d74 <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	461c      	mov	r4, r3
 800295c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800295e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002960:	f7fe fa08 	bl	8000d74 <__aeabi_fmul>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	4620      	mov	r0, r4
 800296a:	f7fe f8f9 	bl	8000b60 <__aeabi_fsub>
 800296e:	4603      	mov	r3, r0
 8002970:	64bb      	str	r3, [r7, #72]	@ 0x48
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002972:	4b56      	ldr	r3, [pc, #344]	@ (8002acc <update_ahrs+0x4a8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	647b      	str	r3, [r7, #68]	@ 0x44
		vy = dcm[1][2];
 8002978:	4b54      	ldr	r3, [pc, #336]	@ (8002acc <update_ahrs+0x4a8>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	643b      	str	r3, [r7, #64]	@ 0x40
		vz = dcm[2][2];
 800297e:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <update_ahrs+0x4a8>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	63fb      	str	r3, [r7, #60]	@ 0x3c

		ex = acc_y * vz - acc_z * vy;
 8002984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002986:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002988:	f7fe f9f4 	bl	8000d74 <__aeabi_fmul>
 800298c:	4603      	mov	r3, r0
 800298e:	461c      	mov	r4, r3
 8002990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002992:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002994:	f7fe f9ee 	bl	8000d74 <__aeabi_fmul>
 8002998:	4603      	mov	r3, r0
 800299a:	4619      	mov	r1, r3
 800299c:	4620      	mov	r0, r4
 800299e:	f7fe f8df 	bl	8000b60 <__aeabi_fsub>
 80029a2:	4603      	mov	r3, r0
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
		ey = acc_z * vx - acc_x * vz;
 80029a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80029a8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80029aa:	f7fe f9e3 	bl	8000d74 <__aeabi_fmul>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461c      	mov	r4, r3
 80029b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029b4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80029b6:	f7fe f9dd 	bl	8000d74 <__aeabi_fmul>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4619      	mov	r1, r3
 80029be:	4620      	mov	r0, r4
 80029c0:	f7fe f8ce 	bl	8000b60 <__aeabi_fsub>
 80029c4:	4603      	mov	r3, r0
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
		ez = acc_x * vy - acc_y * vx;
 80029c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029ca:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80029cc:	f7fe f9d2 	bl	8000d74 <__aeabi_fmul>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461c      	mov	r4, r3
 80029d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80029d6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80029d8:	f7fe f9cc 	bl	8000d74 <__aeabi_fmul>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7fe f8bd 	bl	8000b60 <__aeabi_fsub>
 80029e6:	4603      	mov	r3, r0
 80029e8:	633b      	str	r3, [r7, #48]	@ 0x30

		if( Ki_imu  > 0.0f) {
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fb7a 	bl	80010ec <__aeabi_fcmpgt>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06e      	beq.n	8002adc <update_ahrs+0x4b8>
			integralFBx +=  Ki_imu  * ex * dt;
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f9b5 	bl	8000d74 <__aeabi_fmul>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f9af 	bl	8000d74 <__aeabi_fmul>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad0 <update_ahrs+0x4ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f7fe f89f 	bl	8000b64 <__addsf3>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <update_ahrs+0x4ac>)
 8002a2c:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f99d 	bl	8000d74 <__aeabi_fmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe f997 	bl	8000d74 <__aeabi_fmul>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <update_ahrs+0x4b0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fe f887 	bl	8000b64 <__addsf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <update_ahrs+0x4b0>)
 8002a5c:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f985 	bl	8000d74 <__aeabi_fmul>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f97f 	bl	8000d74 <__aeabi_fmul>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <update_ahrs+0x4b4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7fe f86f 	bl	8000b64 <__addsf3>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <update_ahrs+0x4b4>)
 8002a8c:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <update_ahrs+0x4ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4619      	mov	r1, r3
 8002a94:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002a98:	f7fe f864 	bl	8000b64 <__addsf3>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			gy += integralFBy;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <update_ahrs+0x4b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002aac:	f7fe f85a 	bl	8000b64 <__addsf3>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			gz += integralFBz;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <update_ahrs+0x4b4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002ac0:	f7fe f850 	bl	8000b64 <__addsf3>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002aca:	e013      	b.n	8002af4 <update_ahrs+0x4d0>
 8002acc:	200003a0 	.word	0x200003a0
 8002ad0:	20000388 	.word	0x20000388
 8002ad4:	2000038c 	.word	0x2000038c
 8002ad8:	20000390 	.word	0x20000390
		} else {
			integralFBx = 0.0f;
 8002adc:	4ba4      	ldr	r3, [pc, #656]	@ (8002d70 <update_ahrs+0x74c>)
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002ae4:	4ba3      	ldr	r3, [pc, #652]	@ (8002d74 <update_ahrs+0x750>)
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002aec:	4ba2      	ldr	r3, [pc, #648]	@ (8002d78 <update_ahrs+0x754>)
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8002af4:	4ba1      	ldr	r3, [pc, #644]	@ (8002d7c <update_ahrs+0x758>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f93a 	bl	8000d74 <__aeabi_fmul>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4619      	mov	r1, r3
 8002b04:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002b08:	f7fe f82c 	bl	8000b64 <__addsf3>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		gy += Kp_imu * ey;
 8002b12:	4b9a      	ldr	r3, [pc, #616]	@ (8002d7c <update_ahrs+0x758>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f92b 	bl	8000d74 <__aeabi_fmul>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4619      	mov	r1, r3
 8002b22:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002b26:	f7fe f81d 	bl	8000b64 <__addsf3>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		gz += Kp_imu * ez + emz * Kp_mag;
 8002b30:	4b92      	ldr	r3, [pc, #584]	@ (8002d7c <update_ahrs+0x758>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f91c 	bl	8000d74 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461c      	mov	r4, r3
 8002b40:	4b8f      	ldr	r3, [pc, #572]	@ (8002d80 <update_ahrs+0x75c>)
 8002b42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f915 	bl	8000d74 <__aeabi_fmul>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7fe f808 	bl	8000b64 <__addsf3>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4619      	mov	r1, r3
 8002b58:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002b5c:	f7fe f802 	bl	8000b64 <__addsf3>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	}

	gx *= (0.5f * dt);
 8002b66:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002b6a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002b6e:	f7fe f901 	bl	8000d74 <__aeabi_fmul>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4619      	mov	r1, r3
 8002b76:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002b7a:	f7fe f8fb 	bl	8000d74 <__aeabi_fmul>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	gy *= (0.5f * dt);
 8002b84:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002b88:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002b8c:	f7fe f8f2 	bl	8000d74 <__aeabi_fmul>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002b98:	f7fe f8ec 	bl	8000d74 <__aeabi_fmul>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	gz *= (0.5f * dt);
 8002ba2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002ba6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8002baa:	f7fe f8e3 	bl	8000d74 <__aeabi_fmul>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002bb6:	f7fe f8dd 	bl	8000d74 <__aeabi_fmul>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8002bc0:	4b70      	ldr	r3, [pc, #448]	@ (8002d84 <update_ahrs+0x760>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002bc8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f8d1 	bl	8000d74 <__aeabi_fmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	461c      	mov	r4, r3
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d88 <update_ahrs+0x764>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe f8c8 	bl	8000d74 <__aeabi_fmul>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4619      	mov	r1, r3
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7fd ffb9 	bl	8000b60 <__aeabi_fsub>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4b66      	ldr	r3, [pc, #408]	@ (8002d8c <update_ahrs+0x768>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe f8ba 	bl	8000d74 <__aeabi_fmul>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4619      	mov	r1, r3
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7fd ffab 	bl	8000b60 <__aeabi_fsub>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b60      	ldr	r3, [pc, #384]	@ (8002d90 <update_ahrs+0x76c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f7fd ffa5 	bl	8000b64 <__addsf3>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d90 <update_ahrs+0x76c>)
 8002c20:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8002c22:	4b5b      	ldr	r3, [pc, #364]	@ (8002d90 <update_ahrs+0x76c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f8a2 	bl	8000d74 <__aeabi_fmul>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461c      	mov	r4, r3
 8002c34:	4b54      	ldr	r3, [pc, #336]	@ (8002d88 <update_ahrs+0x764>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f899 	bl	8000d74 <__aeabi_fmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fd ff8c 	bl	8000b64 <__addsf3>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461c      	mov	r4, r3
 8002c50:	4b4e      	ldr	r3, [pc, #312]	@ (8002d8c <update_ahrs+0x768>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe f88b 	bl	8000d74 <__aeabi_fmul>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4619      	mov	r1, r3
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7fd ff7c 	bl	8000b60 <__aeabi_fsub>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b45      	ldr	r3, [pc, #276]	@ (8002d84 <update_ahrs+0x760>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fd ff76 	bl	8000b64 <__addsf3>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b41      	ldr	r3, [pc, #260]	@ (8002d84 <update_ahrs+0x760>)
 8002c7e:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002c80:	4b43      	ldr	r3, [pc, #268]	@ (8002d90 <update_ahrs+0x76c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f873 	bl	8000d74 <__aeabi_fmul>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461c      	mov	r4, r3
 8002c92:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <update_ahrs+0x760>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f86a 	bl	8000d74 <__aeabi_fmul>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7fd ff5b 	bl	8000b60 <__aeabi_fsub>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461c      	mov	r4, r3
 8002cae:	4b37      	ldr	r3, [pc, #220]	@ (8002d8c <update_ahrs+0x768>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe f85c 	bl	8000d74 <__aeabi_fmul>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7fd ff4f 	bl	8000b64 <__addsf3>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b2f      	ldr	r3, [pc, #188]	@ (8002d88 <update_ahrs+0x764>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7fd ff47 	bl	8000b64 <__addsf3>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b2b      	ldr	r3, [pc, #172]	@ (8002d88 <update_ahrs+0x764>)
 8002cdc:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002cde:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <update_ahrs+0x76c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f844 	bl	8000d74 <__aeabi_fmul>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461c      	mov	r4, r3
 8002cf0:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <update_ahrs+0x760>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe f83b 	bl	8000d74 <__aeabi_fmul>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4619      	mov	r1, r3
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7fd ff2e 	bl	8000b64 <__addsf3>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <update_ahrs+0x764>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe f82d 	bl	8000d74 <__aeabi_fmul>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7fd ff1e 	bl	8000b60 <__aeabi_fsub>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b18      	ldr	r3, [pc, #96]	@ (8002d8c <update_ahrs+0x768>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7fd ff18 	bl	8000b64 <__addsf3>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <update_ahrs+0x768>)
 8002d3a:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <update_ahrs+0x76c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <update_ahrs+0x76c>)
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f814 	bl	8000d74 <__aeabi_fmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461c      	mov	r4, r3
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <update_ahrs+0x760>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0b      	ldr	r2, [pc, #44]	@ (8002d84 <update_ahrs+0x760>)
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f80a 	bl	8000d74 <__aeabi_fmul>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4619      	mov	r1, r3
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7fd fefd 	bl	8000b64 <__addsf3>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	e011      	b.n	8002d94 <update_ahrs+0x770>
 8002d70:	20000388 	.word	0x20000388
 8002d74:	2000038c 	.word	0x2000038c
 8002d78:	20000390 	.word	0x20000390
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	40a00000 	.word	0x40a00000
 8002d84:	20000394 	.word	0x20000394
 8002d88:	20000398 	.word	0x20000398
 8002d8c:	2000039c 	.word	0x2000039c
 8002d90:	20000014 	.word	0x20000014
 8002d94:	4b94      	ldr	r3, [pc, #592]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a93      	ldr	r2, [pc, #588]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd ffe8 	bl	8000d74 <__aeabi_fmul>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7fd fedb 	bl	8000b64 <__addsf3>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461c      	mov	r4, r3
 8002db2:	4b8e      	ldr	r3, [pc, #568]	@ (8002fec <update_ahrs+0x9c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a8d      	ldr	r2, [pc, #564]	@ (8002fec <update_ahrs+0x9c8>)
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd ffd9 	bl	8000d74 <__aeabi_fmul>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7fd fecc 	bl	8000b64 <__addsf3>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fa78 	bl	80032c4 <invSqrt_>
 8002dd4:	67f8      	str	r0, [r7, #124]	@ 0x7c
	q0 *= norm;
 8002dd6:	4b86      	ldr	r3, [pc, #536]	@ (8002ff0 <update_ahrs+0x9cc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd ffc9 	bl	8000d74 <__aeabi_fmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b82      	ldr	r3, [pc, #520]	@ (8002ff0 <update_ahrs+0x9cc>)
 8002de8:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002dea:	4b82      	ldr	r3, [pc, #520]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd ffbf 	bl	8000d74 <__aeabi_fmul>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002dfc:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd ffb5 	bl	8000d74 <__aeabi_fmul>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002e10:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002e12:	4b76      	ldr	r3, [pc, #472]	@ (8002fec <update_ahrs+0x9c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd ffab 	bl	8000d74 <__aeabi_fmul>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b72      	ldr	r3, [pc, #456]	@ (8002fec <update_ahrs+0x9c8>)
 8002e24:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8002e26:	4b72      	ldr	r3, [pc, #456]	@ (8002ff0 <update_ahrs+0x9cc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a72      	ldr	r2, [pc, #456]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ff9f 	bl	8000d74 <__aeabi_fmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q0q2 = q0*q2;
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff0 <update_ahrs+0x9cc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ff95 	bl	8000d74 <__aeabi_fmul>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q0q3 = q0*q3;
 8002e4e:	4b68      	ldr	r3, [pc, #416]	@ (8002ff0 <update_ahrs+0x9cc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a66      	ldr	r2, [pc, #408]	@ (8002fec <update_ahrs+0x9c8>)
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd ff8b 	bl	8000d74 <__aeabi_fmul>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
	float q1q1 = q1*q1;
 8002e62:	4b64      	ldr	r3, [pc, #400]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a63      	ldr	r2, [pc, #396]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd ff81 	bl	8000d74 <__aeabi_fmul>
 8002e72:	4603      	mov	r3, r0
 8002e74:	623b      	str	r3, [r7, #32]
	float q1q2 = q1*q2;
 8002e76:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd ff77 	bl	8000d74 <__aeabi_fmul>
 8002e86:	4603      	mov	r3, r0
 8002e88:	61fb      	str	r3, [r7, #28]
	float q1q3 = q1*q3;
 8002e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff4 <update_ahrs+0x9d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a57      	ldr	r2, [pc, #348]	@ (8002fec <update_ahrs+0x9c8>)
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd ff6d 	bl	8000d74 <__aeabi_fmul>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	61bb      	str	r3, [r7, #24]
	float q2q2 = q2*q2;
 8002e9e:	4b52      	ldr	r3, [pc, #328]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a51      	ldr	r2, [pc, #324]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd ff63 	bl	8000d74 <__aeabi_fmul>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	617b      	str	r3, [r7, #20]
	float q2q3 = q2*q3;
 8002eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe8 <update_ahrs+0x9c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8002fec <update_ahrs+0x9c8>)
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd ff59 	bl	8000d74 <__aeabi_fmul>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	613b      	str	r3, [r7, #16]
	float q3q3 = q3*q3;
 8002ec6:	4b49      	ldr	r3, [pc, #292]	@ (8002fec <update_ahrs+0x9c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <update_ahrs+0x9c8>)
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd ff4f 	bl	8000d74 <__aeabi_fmul>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	60fb      	str	r3, [r7, #12]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002ee0:	f7fd fe3e 	bl	8000b60 <__aeabi_fsub>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fe39 	bl	8000b60 <__aeabi_fsub>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd fe36 	bl	8000b64 <__addsf3>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002efe:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8002f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f02:	69f8      	ldr	r0, [r7, #28]
 8002f04:	f7fd fe2c 	bl	8000b60 <__aeabi_fsub>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fe29 	bl	8000b64 <__addsf3>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b38      	ldr	r3, [pc, #224]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002f18:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8002f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f1c:	69b8      	ldr	r0, [r7, #24]
 8002f1e:	f7fd fe21 	bl	8000b64 <__addsf3>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4619      	mov	r1, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fe1c 	bl	8000b64 <__addsf3>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002f32:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8002f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f36:	69f8      	ldr	r0, [r7, #28]
 8002f38:	f7fd fe14 	bl	8000b64 <__addsf3>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fe0f 	bl	8000b64 <__addsf3>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002f4c:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002f54:	f7fd fe04 	bl	8000b60 <__aeabi_fsub>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fdff 	bl	8000b60 <__aeabi_fsub>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4619      	mov	r1, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fdfc 	bl	8000b64 <__addsf3>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002f72:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8002f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f76:	6938      	ldr	r0, [r7, #16]
 8002f78:	f7fd fdf2 	bl	8000b60 <__aeabi_fsub>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fdef 	bl	8000b64 <__addsf3>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002f8c:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8002f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f90:	69b8      	ldr	r0, [r7, #24]
 8002f92:	f7fd fde5 	bl	8000b60 <__aeabi_fsub>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fde2 	bl	8000b64 <__addsf3>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002fa6:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8002fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002faa:	6938      	ldr	r0, [r7, #16]
 8002fac:	f7fd fdda 	bl	8000b64 <__addsf3>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fdd5 	bl	8000b64 <__addsf3>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <update_ahrs+0x9d4>)
 8002fc0:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8002fc2:	6a39      	ldr	r1, [r7, #32]
 8002fc4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002fc8:	f7fd fdca 	bl	8000b60 <__aeabi_fsub>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	6979      	ldr	r1, [r7, #20]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fdc5 	bl	8000b60 <__aeabi_fsub>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fdc2 	bl	8000b64 <__addsf3>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	e00a      	b.n	8002ffc <update_ahrs+0x9d8>
 8002fe6:	bf00      	nop
 8002fe8:	20000398 	.word	0x20000398
 8002fec:	2000039c 	.word	0x2000039c
 8002ff0:	20000014 	.word	0x20000014
 8002ff4:	20000394 	.word	0x20000394
 8002ff8:	200003a0 	.word	0x200003a0
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8003130 <update_ahrs+0xb0c>)
 8002ffe:	621a      	str	r2, [r3, #32]
    AHRS.roll_rate  = (P + R*cosx*tany + Q*sinx*tany)*DEG;
    AHRS.pitch_rate = (Q*cosx - R*sinx)*DEG;
    AHRS.yaw_rate   = (R*cosx/cosy + Q*sinx/cosy)*DEG;
    */

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 8003000:	4b4b      	ldr	r3, [pc, #300]	@ (8003130 <update_ahrs+0xb0c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003008:	4b49      	ldr	r3, [pc, #292]	@ (8003130 <update_ahrs+0xb0c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a48      	ldr	r2, [pc, #288]	@ (8003130 <update_ahrs+0xb0c>)
 800300e:	6892      	ldr	r2, [r2, #8]
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd feae 	bl	8000d74 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003020:	f7fd fd9e 	bl	8000b60 <__aeabi_fsub>
 8003024:	4603      	mov	r3, r0
 8003026:	4618      	mov	r0, r3
 8003028:	f00f f870 	bl	801210c <sqrtf>
 800302c:	4603      	mov	r3, r0
 800302e:	4619      	mov	r1, r3
 8003030:	4620      	mov	r0, r4
 8003032:	f000 f887 	bl	8003144 <atan2_approx>
 8003036:	4603      	mov	r3, r0
 8003038:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800303c:	493d      	ldr	r1, [pc, #244]	@ (8003134 <update_ahrs+0xb10>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fe98 	bl	8000d74 <__aeabi_fmul>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <update_ahrs+0xb14>)
 800304a:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 800304c:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <update_ahrs+0xb0c>)
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003054:	4a36      	ldr	r2, [pc, #216]	@ (8003130 <update_ahrs+0xb0c>)
 8003056:	6a12      	ldr	r2, [r2, #32]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f872 	bl	8003144 <atan2_approx>
 8003060:	4603      	mov	r3, r0
 8003062:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003066:	4933      	ldr	r1, [pc, #204]	@ (8003134 <update_ahrs+0xb10>)
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fe83 	bl	8000d74 <__aeabi_fmul>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <update_ahrs+0xb14>)
 8003074:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003076:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <update_ahrs+0xb0c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a2d      	ldr	r2, [pc, #180]	@ (8003130 <update_ahrs+0xb0c>)
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f85f 	bl	8003144 <atan2_approx>
 8003086:	4603      	mov	r3, r0
 8003088:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800308c:	4929      	ldr	r1, [pc, #164]	@ (8003134 <update_ahrs+0xb10>)
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fe70 	bl	8000d74 <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	if(yaw_ < 0){
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030a2:	f7fe f805 	bl	80010b0 <__aeabi_fcmplt>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <update_ahrs+0xa98>
		 yaw_ = 360 + yaw_;
 80030ac:	4923      	ldr	r1, [pc, #140]	@ (800313c <update_ahrs+0xb18>)
 80030ae:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030b2:	f7fd fd57 	bl	8000b64 <__addsf3>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	}
	AHRS.yaw =  yaw_;
 80030bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <update_ahrs+0xb14>)
 80030be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030c2:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 80030c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fdff 	bl	8000ccc <__aeabi_i2f>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <update_ahrs+0xb1c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7fd ff00 	bl	8000edc <__aeabi_fdiv>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <update_ahrs+0xb14>)
 80030e2:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 80030e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030e8:	425b      	negs	r3, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fdee 	bl	8000ccc <__aeabi_i2f>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <update_ahrs+0xb1c>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f7fd feef 	bl	8000edc <__aeabi_fdiv>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <update_ahrs+0xb14>)
 8003104:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8003106:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800310a:	425b      	negs	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fddd 	bl	8000ccc <__aeabi_i2f>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <update_ahrs+0xb1c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7fd fede 	bl	8000edc <__aeabi_fdiv>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <update_ahrs+0xb14>)
 8003126:	615a      	str	r2, [r3, #20]

}
 8003128:	bf00      	nop
 800312a:	3794      	adds	r7, #148	@ 0x94
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	200003a0 	.word	0x200003a0
 8003134:	42652ee0 	.word	0x42652ee0
 8003138:	20000370 	.word	0x20000370
 800313c:	43b40000 	.word	0x43b40000
 8003140:	20000018 	.word	0x20000018

08003144 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b08b      	sub	sp, #44	@ 0x2c
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003154:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800315c:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	6979      	ldr	r1, [r7, #20]
 8003168:	69b8      	ldr	r0, [r7, #24]
 800316a:	f7fd ffbf 	bl	80010ec <__aeabi_fcmpgt>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <atan2_approx+0x34>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	e000      	b.n	800317a <atan2_approx+0x36>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003182:	f7fd ff8b 	bl	800109c <__aeabi_fcmpeq>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d114      	bne.n	80031b6 <atan2_approx+0x72>
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	6938      	ldr	r0, [r7, #16]
 8003198:	f7fd ff8a 	bl	80010b0 <__aeabi_fcmplt>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <atan2_approx+0x62>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	e000      	b.n	80031a8 <atan2_approx+0x64>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fe96 	bl	8000edc <__aeabi_fdiv>
 80031b0:	4603      	mov	r3, r0
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b4:	e002      	b.n	80031bc <atan2_approx+0x78>
    else res = 0.0f;
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80031bc:	4938      	ldr	r1, [pc, #224]	@ (80032a0 <atan2_approx+0x15c>)
 80031be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031c0:	f7fd fdd8 	bl	8000d74 <__aeabi_fmul>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4937      	ldr	r1, [pc, #220]	@ (80032a4 <atan2_approx+0x160>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fcc9 	bl	8000b60 <__aeabi_fsub>
 80031ce:	4603      	mov	r3, r0
 80031d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fdce 	bl	8000d74 <__aeabi_fmul>
 80031d8:	4603      	mov	r3, r0
 80031da:	4933      	ldr	r1, [pc, #204]	@ (80032a8 <atan2_approx+0x164>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fcbf 	bl	8000b60 <__aeabi_fsub>
 80031e2:	4603      	mov	r3, r0
 80031e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd fdc4 	bl	8000d74 <__aeabi_fmul>
 80031ec:	4603      	mov	r3, r0
 80031ee:	492f      	ldr	r1, [pc, #188]	@ (80032ac <atan2_approx+0x168>)
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd fcb5 	bl	8000b60 <__aeabi_fsub>
 80031f6:	4603      	mov	r3, r0
 80031f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd fdba 	bl	8000d74 <__aeabi_fmul>
 8003200:	4603      	mov	r3, r0
 8003202:	492b      	ldr	r1, [pc, #172]	@ (80032b0 <atan2_approx+0x16c>)
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fcab 	bl	8000b60 <__aeabi_fsub>
 800320a:	4603      	mov	r3, r0
 800320c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003210:	4928      	ldr	r1, [pc, #160]	@ (80032b4 <atan2_approx+0x170>)
 8003212:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003214:	f7fd fdae 	bl	8000d74 <__aeabi_fmul>
 8003218:	4603      	mov	r3, r0
 800321a:	4927      	ldr	r1, [pc, #156]	@ (80032b8 <atan2_approx+0x174>)
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fca1 	bl	8000b64 <__addsf3>
 8003222:	4603      	mov	r3, r0
 8003224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fda4 	bl	8000d74 <__aeabi_fmul>
 800322c:	4603      	mov	r3, r0
 800322e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fc96 	bl	8000b64 <__addsf3>
 8003238:	4603      	mov	r3, r0
 800323a:	4619      	mov	r1, r3
 800323c:	4620      	mov	r0, r4
 800323e:	f7fd fe4d 	bl	8000edc <__aeabi_fdiv>
 8003242:	4603      	mov	r3, r0
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003246:	6a39      	ldr	r1, [r7, #32]
 8003248:	69f8      	ldr	r0, [r7, #28]
 800324a:	f7fd ff4f 	bl	80010ec <__aeabi_fcmpgt>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <atan2_approx+0x11c>
 8003254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003256:	4819      	ldr	r0, [pc, #100]	@ (80032bc <atan2_approx+0x178>)
 8003258:	f7fd fc82 	bl	8000b60 <__aeabi_fsub>
 800325c:	4603      	mov	r3, r0
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f7fd ff23 	bl	80010b0 <__aeabi_fcmplt>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <atan2_approx+0x138>
 8003270:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003272:	4813      	ldr	r0, [pc, #76]	@ (80032c0 <atan2_approx+0x17c>)
 8003274:	f7fd fc74 	bl	8000b60 <__aeabi_fsub>
 8003278:	4603      	mov	r3, r0
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd ff15 	bl	80010b0 <__aeabi_fcmplt>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <atan2_approx+0x150>
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003296:	4618      	mov	r0, r3
 8003298:	372c      	adds	r7, #44	@ 0x2c
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	3d4e0939 	.word	0x3d4e0939
 80032a4:	3e9eb5e3 	.word	0x3e9eb5e3
 80032a8:	3e16fa88 	.word	0x3e16fa88
 80032ac:	3f7ffe45 	.word	0x3f7ffe45
 80032b0:	34a8dfa7 	.word	0x34a8dfa7
 80032b4:	3f24fb99 	.word	0x3f24fb99
 80032b8:	3e16a269 	.word	0x3e16a269
 80032bc:	3fc90fdb 	.word	0x3fc90fdb
 80032c0:	40490fdb 	.word	0x40490fdb

080032c4 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80032cc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fd fd4f 	bl	8000d74 <__aeabi_fmul>
 80032d6:	4603      	mov	r3, r0
 80032d8:	617b      	str	r3, [r7, #20]
	float y = x;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	105a      	asrs	r2, r3, #1
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <invSqrt_+0x74>)
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	6979      	ldr	r1, [r7, #20]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fd39 	bl	8000d74 <__aeabi_fmul>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fd fd32 	bl	8000d74 <__aeabi_fmul>
 8003310:	4603      	mov	r3, r0
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8003318:	f7fd fc22 	bl	8000b60 <__aeabi_fsub>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7fd fd25 	bl	8000d74 <__aeabi_fmul>
 800332a:	4603      	mov	r3, r0
 800332c:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 800332e:	693b      	ldr	r3, [r7, #16]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	5f3759df 	.word	0x5f3759df

0800333c <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7fd feb0 	bl	80010b0 <__aeabi_fcmplt>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <constrainf+0x1e>
        return low;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	e009      	b.n	800336e <constrainf+0x32>
    else if (amt > high)
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7fd fec5 	bl	80010ec <__aeabi_fcmpgt>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <constrainf+0x30>
        return high;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	e000      	b.n	800336e <constrainf+0x32>
    else
        return amt;
 800336c:	68fb      	ldr	r3, [r7, #12]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <pid_init>:
#include "string.h"

#define usTosec(x)    (x *(1e-06f))
#define MAX_WAIT_TIME 500000

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 8003384:	2224      	movs	r2, #36	@ 0x24
 8003386:	2100      	movs	r1, #0
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f00e fe49 	bl	8012020 <memset>
  pid_in->kp = kp;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float dt){
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b08b      	sub	sp, #44	@ 0x2c
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <pid_calculate+0x2c>
       pid_in->last_input = input;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e09e      	b.n	8003536 <pid_calculate+0x16a>
   }

   float error = input - setpoint;
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	68b8      	ldr	r0, [r7, #8]
 80033fc:	f7fd fbb0 	bl	8000b60 <__aeabi_fsub>
 8003400:	4603      	mov	r3, r0
 8003402:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	6a38      	ldr	r0, [r7, #32]
 800340c:	f7fd fcb2 	bl	8000d74 <__aeabi_fmul>
 8003410:	4603      	mov	r3, r0
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24

   if(pid_in->ki > 0){
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fe65 	bl	80010ec <__aeabi_fcmpgt>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d02b      	beq.n	8003480 <pid_calculate+0xb4>
      pid_in->i_term += error *pid_in->ki *dt;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68dc      	ldr	r4, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	6a39      	ldr	r1, [r7, #32]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd fc9e 	bl	8000d74 <__aeabi_fmul>
 8003438:	4603      	mov	r3, r0
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fc99 	bl	8000d74 <__aeabi_fmul>
 8003442:	4603      	mov	r3, r0
 8003444:	4619      	mov	r1, r3
 8003446:	4620      	mov	r0, r4
 8003448:	f7fd fb8c 	bl	8000b64 <__addsf3>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68d8      	ldr	r0, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	461a      	mov	r2, r3
 8003466:	f7ff ff69 	bl	800333c <constrainf>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4619      	mov	r1, r3
 8003476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003478:	f7fd fb74 	bl	8000b64 <__addsf3>
 800347c:	4603      	mov	r3, r0
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   if(pid_in->kd > 0){
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd fe2f 	bl	80010ec <__aeabi_fcmpgt>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d04f      	beq.n	8003534 <pid_calculate+0x168>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	4929      	ldr	r1, [pc, #164]	@ (8003540 <pid_calculate+0x174>)
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fc6a 	bl	8000d74 <__aeabi_fmul>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80034a8:	f7fd fd18 	bl	8000edc <__aeabi_fdiv>
 80034ac:	4603      	mov	r3, r0
 80034ae:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	f7fd fb56 	bl	8000b64 <__addsf3>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f7fd fd0d 	bl	8000edc <__aeabi_fdiv>
 80034c2:	4603      	mov	r3, r0
 80034c4:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	4619      	mov	r1, r3
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7fd fb47 	bl	8000b60 <__aeabi_fsub>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f7fd fc49 	bl	8000d74 <__aeabi_fmul>
 80034e2:	4603      	mov	r3, r0
 80034e4:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	611a      	str	r2, [r3, #16]
        delta /= dt;
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7fd fcf4 	bl	8000edc <__aeabi_fdiv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	695c      	ldr	r4, [r3, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4619      	mov	r1, r3
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7fd fb2c 	bl	8000b60 <__aeabi_fsub>
 8003508:	4603      	mov	r3, r0
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fc31 	bl	8000d74 <__aeabi_fmul>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	4620      	mov	r0, r4
 8003518:	f7fd fb24 	bl	8000b64 <__addsf3>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	615a      	str	r2, [r3, #20]
        output += pid_in->D_filted;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	4619      	mov	r1, r3
 800352a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800352c:	f7fd fb1a 	bl	8000b64 <__addsf3>
 8003530:	4603      	mov	r3, r0
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003536:	4618      	mov	r0, r3
 8003538:	372c      	adds	r7, #44	@ 0x2c
 800353a:	46bd      	mov	sp, r7
 800353c:	bd90      	pop	{r4, r7, pc}
 800353e:	bf00      	nop
 8003540:	40c90fdb 	.word	0x40c90fdb

08003544 <constrain>:
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	da01      	bge.n	800355c <constrain+0x18>
        return low;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	e006      	b.n	800356a <constrain+0x26>
    else if (amt > high)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	dd01      	ble.n	8003568 <constrain+0x24>
        return high;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	e000      	b.n	800356a <constrain+0x26>
        return amt;
 8003568:	68fb      	ldr	r3, [r7, #12]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	htimm = htim;
 800357c:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <initPWM+0x7c>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8003582:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <initPWM+0x80>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8003588:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <initPWM+0x84>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 800358e:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <initPWM+0x88>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8003594:	2100      	movs	r1, #0
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f006 f81e 	bl	80095d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 800359c:	2104      	movs	r1, #4
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f006 f81a 	bl	80095d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80035a4:	2108      	movs	r1, #8
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f006 f816 	bl	80095d8 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <initPWM+0x7c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035b8:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <initPWM+0x7c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035c0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <initPWM+0x7c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035cc:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <initPWM+0x7c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80035d8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <initPWM+0x7c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80035e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200003d0 	.word	0x200003d0
 80035f4:	200003d8 	.word	0x200003d8
 80035f8:	200003d9 	.word	0x200003d9
 80035fc:	200003d4 	.word	0x200003d4

08003600 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
 800360c:	4613      	mov	r3, r2
 800360e:	707b      	strb	r3, [r7, #1]
 8003610:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <writePwm+0x2c>
	    dulty -= 1000;
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800361e:	b29b      	uxth	r3, r3
 8003620:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8003628:	b29b      	uxth	r3, r3
 800362a:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 800362c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003630:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003634:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff83 	bl	8003544 <constrain>
 800363e:	4603      	mov	r3, r0
 8003640:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <writePwm+0x56>
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <writePwm+0x94>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003652:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003654:	e019      	b.n	800368a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d106      	bne.n	800366a <writePwm+0x6a>
 800365c:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <writePwm+0x94>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003666:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003668:	e00f      	b.n	800368a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d106      	bne.n	800367e <writePwm+0x7e>
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <writePwm+0x94>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800367a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800367c:	e005      	b.n	800368a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800367e:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <writePwm+0x94>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003688:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200003d0 	.word	0x200003d0

08003698 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
 80036a2:	460b      	mov	r3, r1
 80036a4:	80bb      	strh	r3, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <write_pwm_ctrl+0x70>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <write_pwm_ctrl+0x22>
 80036b2:	4b16      	ldr	r3, [pc, #88]	@ (800370c <write_pwm_ctrl+0x74>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 80036ba:	f002 f84f 	bl	800575c <HAL_GetTick>
 80036be:	4603      	mov	r3, r0
 80036c0:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <write_pwm_ctrl+0x78>)
 80036c2:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 80036c4:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <write_pwm_ctrl+0x70>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
		   return;
 80036ca:	e019      	b.n	8003700 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 80036cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4619      	mov	r1, r3
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7ff ff93 	bl	8003600 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 80036da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	4619      	mov	r1, r3
 80036e2:	2004      	movs	r0, #4
 80036e4:	f7ff ff8c 	bl	8003600 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 80036e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036ec:	2200      	movs	r2, #0
 80036ee:	4619      	mov	r1, r3
 80036f0:	2008      	movs	r0, #8
 80036f2:	f7ff ff85 	bl	8003600 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 80036f6:	f002 f831 	bl	800575c <HAL_GetTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <write_pwm_ctrl+0x78>)
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200003d8 	.word	0x200003d8
 800370c:	200003d9 	.word	0x200003d9
 8003710:	200003d4 	.word	0x200003d4

08003714 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 800371c:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <timer_start+0x20>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8003722:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <timer_start+0x20>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f005 fe9e 	bl	8009468 <HAL_TIM_Base_Start_IT>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200003dc 	.word	0x200003dc

08003738 <HAL_UART_RxCpltCallback>:
#include "../Lib/gps.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8003740:	f7fd fd62 	bl	8001208 <ibus_uart_port>
 8003744:	4602      	mov	r2, r0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4293      	cmp	r3, r2
 800374a:	d102      	bne.n	8003752 <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 800374c:	f7fd fd66 	bl	800121c <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8003750:	e007      	b.n	8003762 <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8003752:	f7fe fccb 	bl	80020ec <gps_uart_port>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 800375e:	f7fe fccf 	bl	8002100 <gps_callback>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  //  if(huart == mavlink_uart_port())
//	{
//		mavlink_tx_cpl_callback();
 //   }
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a06      	ldr	r2, [pc, #24]	@ (80037a4 <vApplicationGetIdleTaskMemory+0x28>)
 800378c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	@ 0x80
 8003798:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	200003f4 	.word	0x200003f4
 80037a8:	20000448 	.word	0x20000448

080037ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b09c      	sub	sp, #112	@ 0x70
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 80037b2:	4828      	ldr	r0, [pc, #160]	@ (8003854 <MX_FREERTOS_Init+0xa8>)
 80037b4:	f7ff ffae 	bl	8003714 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0,128);
 80037b8:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <MX_FREERTOS_Init+0xac>)
 80037ba:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80037be:	461d      	mov	r5, r3
 80037c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80037cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f00b fdbb 	bl	800f34e <osThreadCreate>
 80037d8:	4603      	mov	r3, r0
 80037da:	4a20      	ldr	r2, [pc, #128]	@ (800385c <MX_FREERTOS_Init+0xb0>)
 80037dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityNormal, 0,200);
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <MX_FREERTOS_Init+0xb4>)
 80037e0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80037e4:	461d      	mov	r5, r3
 80037e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80037f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f00b fda8 	bl	800f34e <osThreadCreate>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <MX_FREERTOS_Init+0xb8>)
 8003802:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8003804:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <MX_FREERTOS_Init+0xbc>)
 8003806:	f107 041c 	add.w	r4, r7, #28
 800380a:	461d      	mov	r5, r3
 800380c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800380e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003810:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f00b fd95 	bl	800f34e <osThreadCreate>
 8003824:	4603      	mov	r3, r0
 8003826:	4a11      	ldr	r2, [pc, #68]	@ (800386c <MX_FREERTOS_Init+0xc0>)
 8003828:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0,128);
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <MX_FREERTOS_Init+0xc4>)
 800382c:	463c      	mov	r4, r7
 800382e:	461d      	mov	r5, r3
 8003830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800383c:	463b      	mov	r3, r7
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f00b fd84 	bl	800f34e <osThreadCreate>
 8003846:	4603      	mov	r3, r0
 8003848:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <MX_FREERTOS_Init+0xc8>)
 800384a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800384c:	bf00      	nop
 800384e:	3770      	adds	r7, #112	@ 0x70
 8003850:	46bd      	mov	sp, r7
 8003852:	bdb0      	pop	{r4, r5, r7, pc}
 8003854:	20000830 	.word	0x20000830
 8003858:	08012408 	.word	0x08012408
 800385c:	200003e4 	.word	0x200003e4
 8003860:	0801242c 	.word	0x0801242c
 8003864:	200003e8 	.word	0x200003e8
 8003868:	08012450 	.word	0x08012450
 800386c:	200003ec 	.word	0x200003ec
 8003870:	08012474 	.word	0x08012474
 8003874:	200003f0 	.word	0x200003f0

08003878 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387c:	b08c      	sub	sp, #48	@ 0x30
 800387e:	af06      	add	r7, sp, #24
 8003880:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart1);
 8003882:	484b      	ldr	r0, [pc, #300]	@ (80039b0 <ahrs_task+0x138>)
 8003884:	f7fd fc98 	bl	80011b8 <ibus_init>
	gps_init(&huart3,57600);
 8003888:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800388c:	4849      	ldr	r0, [pc, #292]	@ (80039b4 <ahrs_task+0x13c>)
 800388e:	f7fe fbc1 	bl	8002014 <gps_init>
	attitude_ctrl_init();
 8003892:	f001 fbe5 	bl	8005060 <attitude_ctrl_init>
	initPWM(&htim3);
 8003896:	4848      	ldr	r0, [pc, #288]	@ (80039b8 <ahrs_task+0x140>)
 8003898:	f7ff fe6c 	bl	8003574 <initPWM>

	last_call = micros();
 800389c:	4b47      	ldr	r3, [pc, #284]	@ (80039bc <ahrs_task+0x144>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038a4:	4b46      	ldr	r3, [pc, #280]	@ (80039c0 <ahrs_task+0x148>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4413      	add	r3, r2
 80038aa:	4a46      	ldr	r2, [pc, #280]	@ (80039c4 <ahrs_task+0x14c>)
 80038ac:	6013      	str	r3, [r2, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 80038ae:	230a      	movs	r3, #10
 80038b0:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 80038b2:	f00d f98b 	bl	8010bcc <xTaskGetTickCount>
 80038b6:	4603      	mov	r3, r0
 80038b8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug

    float dt = (micros() - last_call)*(1e-6f);
 80038ba:	4b40      	ldr	r3, [pc, #256]	@ (80039bc <ahrs_task+0x144>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038c2:	4b3f      	ldr	r3, [pc, #252]	@ (80039c0 <ahrs_task+0x148>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	441a      	add	r2, r3
 80038c8:	4b3e      	ldr	r3, [pc, #248]	@ (80039c4 <ahrs_task+0x14c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd f9f8 	bl	8000cc4 <__aeabi_ui2f>
 80038d4:	4603      	mov	r3, r0
 80038d6:	493c      	ldr	r1, [pc, #240]	@ (80039c8 <ahrs_task+0x150>)
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd fa4b 	bl	8000d74 <__aeabi_fmul>
 80038de:	4603      	mov	r3, r0
 80038e0:	617b      	str	r3, [r7, #20]
    last_call = micros();
 80038e2:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <ahrs_task+0x144>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ea:	4b35      	ldr	r3, [pc, #212]	@ (80039c0 <ahrs_task+0x148>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <ahrs_task+0x14c>)
 80038f2:	6013      	str	r3, [r2, #0]
    if(dt < 0)
 80038f4:	f04f 0100 	mov.w	r1, #0
 80038f8:	6978      	ldr	r0, [r7, #20]
 80038fa:	f7fd fbd9 	bl	80010b0 <__aeabi_fcmplt>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <ahrs_task+0x92>
		dt = 0;
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
	//timer_calculate_boottime();
    ibusFrameComplete();
 800390a:	f7fd fce3 	bl	80012d4 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 800390e:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <ahrs_task+0x154>)
 8003910:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003914:	4b2d      	ldr	r3, [pc, #180]	@ (80039cc <ahrs_task+0x154>)
 8003916:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 800391a:	4b2c      	ldr	r3, [pc, #176]	@ (80039cc <ahrs_task+0x154>)
 800391c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8003920:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <ahrs_task+0x158>)
 8003922:	f9b3 8000 	ldrsh.w	r8, [r3]
 8003926:	4b2a      	ldr	r3, [pc, #168]	@ (80039d0 <ahrs_task+0x158>)
 8003928:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800392c:	4a28      	ldr	r2, [pc, #160]	@ (80039d0 <ahrs_task+0x158>)
 800392e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003932:	4928      	ldr	r1, [pc, #160]	@ (80039d4 <ahrs_task+0x15c>)
 8003934:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003938:	4826      	ldr	r0, [pc, #152]	@ (80039d4 <ahrs_task+0x15c>)
 800393a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800393e:	4c25      	ldr	r4, [pc, #148]	@ (80039d4 <ahrs_task+0x15c>)
 8003940:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8003944:	697d      	ldr	r5, [r7, #20]
 8003946:	9505      	str	r5, [sp, #20]
 8003948:	9404      	str	r4, [sp, #16]
 800394a:	9003      	str	r0, [sp, #12]
 800394c:	9102      	str	r1, [sp, #8]
 800394e:	9201      	str	r2, [sp, #4]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	4643      	mov	r3, r8
 8003954:	4672      	mov	r2, lr
 8003956:	4661      	mov	r1, ip
 8003958:	4630      	mov	r0, r6
 800395a:	f7fe fe63 	bl	8002624 <update_ahrs>
    attitude_ctrl(dt);
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f001 fbd6 	bl	8005110 <attitude_ctrl>

    if(ibusChannelData[CH5] < CHANNEL_HIGH ){
 8003964:	4b1c      	ldr	r3, [pc, #112]	@ (80039d8 <ahrs_task+0x160>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800396c:	4293      	cmp	r3, r2
 800396e:	d808      	bhi.n	8003982 <ahrs_task+0x10a>
    	 vTaskSuspend(task2Handle);
 8003970:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <ahrs_task+0x164>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f00c feed 	bl	8010754 <vTaskSuspend>
    	 black_box_reset = TRUE;
 800397a:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <ahrs_task+0x168>)
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e004      	b.n	800398c <ahrs_task+0x114>
    }else{
    	 vTaskResume(task2Handle);
 8003982:	4b16      	ldr	r3, [pc, #88]	@ (80039dc <ahrs_task+0x164>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f00c ffb4 	bl	80108f4 <vTaskResume>
    }
   
    vTaskSuspend(NULL);
 800398c:	2000      	movs	r0, #0
 800398e:	f00c fee1 	bl	8010754 <vTaskSuspend>
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	4618      	mov	r0, r3
 800399a:	f00c fe25 	bl	80105e8 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 800399e:	2000      	movs	r0, #0
 80039a0:	f00d fbee 	bl	8011180 <uxTaskGetStackHighWaterMark>
 80039a4:	4603      	mov	r3, r0
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	4b0e      	ldr	r3, [pc, #56]	@ (80039e4 <ahrs_task+0x16c>)
 80039aa:	801a      	strh	r2, [r3, #0]
  {
 80039ac:	e785      	b.n	80038ba <ahrs_task+0x42>
 80039ae:	bf00      	nop
 80039b0:	20000878 	.word	0x20000878
 80039b4:	20000908 	.word	0x20000908
 80039b8:	200007e8 	.word	0x200007e8
 80039bc:	200003dc 	.word	0x200003dc
 80039c0:	200003e0 	.word	0x200003e0
 80039c4:	20000660 	.word	0x20000660
 80039c8:	358637bd 	.word	0x358637bd
 80039cc:	20000648 	.word	0x20000648
 80039d0:	20000650 	.word	0x20000650
 80039d4:	20000658 	.word	0x20000658
 80039d8:	200000c0 	.word	0x200000c0
 80039dc:	200003e8 	.word	0x200003e8
 80039e0:	20000664 	.word	0x20000664
 80039e4:	2000065e 	.word	0x2000065e

080039e8 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */
	//vTaskSuspend(NULL);
	black_box_init();
 80039f0:	f7fd fe64 	bl	80016bc <black_box_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 80039f4:	2364      	movs	r3, #100	@ 0x64
 80039f6:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 80039f8:	f00d f8e8 	bl	8010bcc <xTaskGetTickCount>
 80039fc:	4603      	mov	r3, r0
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	uint32_t current_time = millis();
 8003a00:	4b44      	ldr	r3, [pc, #272]	@ (8003b14 <blackbox+0x12c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a08:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <blackbox+0x130>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a43      	ldr	r2, [pc, #268]	@ (8003b1c <blackbox+0x134>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	613b      	str	r3, [r7, #16]
    if(black_box_reset){
 8003a18:	4b41      	ldr	r3, [pc, #260]	@ (8003b20 <blackbox+0x138>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <blackbox+0x44>
    	black_box_pack_str("----new data-----\n");
 8003a20:	4840      	ldr	r0, [pc, #256]	@ (8003b24 <blackbox+0x13c>)
 8003a22:	f7fd ff09 	bl	8001838 <black_box_pack_str>
    	black_box_reset = FALSE;
 8003a26:	4b3e      	ldr	r3, [pc, #248]	@ (8003b20 <blackbox+0x138>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
    }
	black_box_pack_int((int)AHRS.roll*100);
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b28 <blackbox+0x140>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd fb7b 	bl	800112c <__aeabi_f2iz>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2264      	movs	r2, #100	@ 0x64
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fe64 	bl	800170c <black_box_pack_int>
	black_box_pack_char(' ');
 8003a44:	2020      	movs	r0, #32
 8003a46:	f7fd ff2d 	bl	80018a4 <black_box_pack_char>
	black_box_pack_int((int)roll_desired*100);
 8003a4a:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <blackbox+0x144>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd fb6c 	bl	800112c <__aeabi_f2iz>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2264      	movs	r2, #100	@ 0x64
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd fe55 	bl	800170c <black_box_pack_int>
	black_box_pack_char(' ');
 8003a62:	2020      	movs	r0, #32
 8003a64:	f7fd ff1e 	bl	80018a4 <black_box_pack_char>
	black_box_pack_int((int)AHRS.pitch*100);
 8003a68:	4b2f      	ldr	r3, [pc, #188]	@ (8003b28 <blackbox+0x140>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fd fb5d 	bl	800112c <__aeabi_f2iz>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2264      	movs	r2, #100	@ 0x64
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fe46 	bl	800170c <black_box_pack_int>
	black_box_pack_char(' ');
 8003a80:	2020      	movs	r0, #32
 8003a82:	f7fd ff0f 	bl	80018a4 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003a86:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <blackbox+0x148>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd fb4e 	bl	800112c <__aeabi_f2iz>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2264      	movs	r2, #100	@ 0x64
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fe37 	bl	800170c <black_box_pack_int>
	black_box_pack_char(' ');
 8003a9e:	2020      	movs	r0, #32
 8003aa0:	f7fd ff00 	bl	80018a4 <black_box_pack_char>
	black_box_pack_int((int)(ab_speed_filted*10));
 8003aa4:	4b23      	ldr	r3, [pc, #140]	@ (8003b34 <blackbox+0x14c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4923      	ldr	r1, [pc, #140]	@ (8003b38 <blackbox+0x150>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd f962 	bl	8000d74 <__aeabi_fmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fb3a 	bl	800112c <__aeabi_f2iz>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fe26 	bl	800170c <black_box_pack_int>
	black_box_pack_char('\n');
 8003ac0:	200a      	movs	r0, #10
 8003ac2:	f7fd feef 	bl	80018a4 <black_box_pack_char>
	black_box_load();
 8003ac6:	f7fd ff07 	bl	80018d8 <black_box_load>

	write_time = millis() - current_time;
 8003aca:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <blackbox+0x12c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ad2:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <blackbox+0x130>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a10      	ldr	r2, [pc, #64]	@ (8003b1c <blackbox+0x134>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	099a      	lsrs	r2, r3, #6
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <blackbox+0x154>)
 8003ae6:	6013      	str	r3, [r2, #0]
	if(write_time > 10){
 8003ae8:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <blackbox+0x154>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b0a      	cmp	r3, #10
 8003aee:	d903      	bls.n	8003af8 <blackbox+0x110>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8003af0:	2110      	movs	r1, #16
 8003af2:	4813      	ldr	r0, [pc, #76]	@ (8003b40 <blackbox+0x158>)
 8003af4:	f002 fa45 	bl	8005f82 <HAL_GPIO_TogglePin>
	}
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00c fd72 	bl	80105e8 <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8003b04:	2000      	movs	r0, #0
 8003b06:	f00d fb3b 	bl	8011180 <uxTaskGetStackHighWaterMark>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <blackbox+0x15c>)
 8003b10:	801a      	strh	r2, [r3, #0]
  {
 8003b12:	e775      	b.n	8003a00 <blackbox+0x18>
 8003b14:	200003dc 	.word	0x200003dc
 8003b18:	200003e0 	.word	0x200003e0
 8003b1c:	10624dd3 	.word	0x10624dd3
 8003b20:	20000664 	.word	0x20000664
 8003b24:	08012490 	.word	0x08012490
 8003b28:	20000370 	.word	0x20000370
 8003b2c:	20000950 	.word	0x20000950
 8003b30:	20000954 	.word	0x20000954
 8003b34:	20000a04 	.word	0x20000a04
 8003b38:	41200000 	.word	0x41200000
 8003b3c:	20000668 	.word	0x20000668
 8003b40:	40010800 	.word	0x40010800
 8003b44:	20000666 	.word	0x20000666

08003b48 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <led_indicate+0x3c>)
 8003b52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d903      	bls.n	8003b62 <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	480a      	ldr	r0, [pc, #40]	@ (8003b88 <led_indicate+0x40>)
 8003b5e:	f002 fa10 	bl	8005f82 <HAL_GPIO_TogglePin>
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 8003b62:	2000      	movs	r0, #0
 8003b64:	f00d fb0c 	bl	8011180 <uxTaskGetStackHighWaterMark>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <led_indicate+0x44>)
 8003b6e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003b70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b74:	4806      	ldr	r0, [pc, #24]	@ (8003b90 <led_indicate+0x48>)
 8003b76:	f002 fa04 	bl	8005f82 <HAL_GPIO_TogglePin>
    osDelay(100);
 8003b7a:	2064      	movs	r0, #100	@ 0x64
 8003b7c:	f00b fc33 	bl	800f3e6 <osDelay>
	if(_gps.fix > 1){
 8003b80:	e7e6      	b.n	8003b50 <led_indicate+0x8>
 8003b82:	bf00      	nop
 8003b84:	20000248 	.word	0x20000248
 8003b88:	40010800 	.word	0x40010800
 8003b8c:	2000066c 	.word	0x2000066c
 8003b90:	40011000 	.word	0x40011000
 8003b94:	00000000 	.word	0x00000000

08003b98 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b08e      	sub	sp, #56	@ 0x38
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readIMU */
 int16_t gyso_offset[3] = {0,0,0};
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003ba8:	2300      	movs	r3, #0
 8003baa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 axis3_t raw;
 uint8_t sample_count = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 int32_t gyro_add[3] = {0,0,0};
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
 uint8_t reset_state = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 compassInit();
 8003bc4:	f7fd ff20 	bl	8001a08 <compassInit>
 mpu6050_init(&hi2c2);
 8003bc8:	4891      	ldr	r0, [pc, #580]	@ (8003e10 <read_sensor+0x278>)
 8003bca:	f7fd fc43 	bl	8001454 <mpu6050_init>
 HAL_Delay(2000);
 8003bce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003bd2:	f001 fdcd 	bl	8005770 <HAL_Delay>
 imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8003bd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bda:	1d1a      	adds	r2, r3, #4
 8003bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be0:	1c99      	adds	r1, r3, #2
 8003be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fcb4 	bl	8002554 <imu_calibrate>

 TickType_t xLastWakeTime;
 const TickType_t xFrequency = 2;
 8003bec:	2302      	movs	r3, #2
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30
 xLastWakeTime = xTaskGetTickCount();
 8003bf0:	f00c ffec 	bl	8010bcc <xTaskGetTickCount>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	mpu6050_gyro_get_raw(&raw);
 8003bf8:	f107 0320 	add.w	r3, r7, #32
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fd fc7b 	bl	80014f8 <mpu6050_gyro_get_raw>

	gyro_add[0] += (raw.x - gyso_offset[0]);
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003c0e:	1acb      	subs	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
	gyro_add[1] += (raw.y - gyso_offset[1]);
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003c20:	1acb      	subs	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
	gyro_add[2] += (raw.z - gyso_offset[2]);
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003c32:	1acb      	subs	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	61fb      	str	r3, [r7, #28]

	sample_count ++;
 8003c38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(sample_count >= 5){
 8003c42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d93c      	bls.n	8003cc4 <read_sensor+0x12c>
	   axis3_t mag;
	   compass_get(&mag);
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd ff16 	bl	8001a80 <compass_get>
	   mag_raw[0] = mag.x;
 8003c54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003c58:	4b6e      	ldr	r3, [pc, #440]	@ (8003e14 <read_sensor+0x27c>)
 8003c5a:	801a      	strh	r2, [r3, #0]
	   mag_raw[1] = mag.y;
 8003c5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c60:	4b6c      	ldr	r3, [pc, #432]	@ (8003e14 <read_sensor+0x27c>)
 8003c62:	805a      	strh	r2, [r3, #2]
	   mag_raw[2] = mag.z;
 8003c64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <read_sensor+0x27c>)
 8003c6a:	809a      	strh	r2, [r3, #4]

	   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003e18 <read_sensor+0x280>)
 8003c70:	fb82 1203 	smull	r1, r2, r2, r3
 8003c74:	1052      	asrs	r2, r2, #1
 8003c76:	17db      	asrs	r3, r3, #31
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	b21a      	sxth	r2, r3
 8003c7c:	4b67      	ldr	r3, [pc, #412]	@ (8003e1c <read_sensor+0x284>)
 8003c7e:	801a      	strh	r2, [r3, #0]
	   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4a65      	ldr	r2, [pc, #404]	@ (8003e18 <read_sensor+0x280>)
 8003c84:	fb82 1203 	smull	r1, r2, r2, r3
 8003c88:	1052      	asrs	r2, r2, #1
 8003c8a:	17db      	asrs	r3, r3, #31
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	b21a      	sxth	r2, r3
 8003c90:	4b62      	ldr	r3, [pc, #392]	@ (8003e1c <read_sensor+0x284>)
 8003c92:	805a      	strh	r2, [r3, #2]
	   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4a60      	ldr	r2, [pc, #384]	@ (8003e18 <read_sensor+0x280>)
 8003c98:	fb82 1203 	smull	r1, r2, r2, r3
 8003c9c:	1052      	asrs	r2, r2, #1
 8003c9e:	17db      	asrs	r3, r3, #31
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8003e1c <read_sensor+0x284>)
 8003ca6:	809a      	strh	r2, [r3, #4]

	   gyro_add[0] = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
	   gyro_add[1] = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
	   gyro_add[2] = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
	   sample_count = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	   vTaskResume(task1Handle);
 8003cba:	4b59      	ldr	r3, [pc, #356]	@ (8003e20 <read_sensor+0x288>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f00c fe18 	bl	80108f4 <vTaskResume>
	}

	raw.x = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	843b      	strh	r3, [r7, #32]
	raw.y = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw.z = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	84bb      	strh	r3, [r7, #36]	@ 0x24

	mpu6050_acc_get_raw(&raw);
 8003cd0:	f107 0320 	add.w	r3, r7, #32
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd fc4b 	bl	8001570 <mpu6050_acc_get_raw>
	if(reset_state){
 8003cda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <read_sensor+0x168>
		acc_imu[0] = raw.x;
 8003ce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8003e24 <read_sensor+0x28c>)
 8003ce8:	801a      	strh	r2, [r3, #0]
		acc_imu[1] = raw.y;
 8003cea:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003cee:	4b4d      	ldr	r3, [pc, #308]	@ (8003e24 <read_sensor+0x28c>)
 8003cf0:	805a      	strh	r2, [r3, #2]
		acc_imu[2] = raw.z;
 8003cf2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8003cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e24 <read_sensor+0x28c>)
 8003cf8:	809a      	strh	r2, [r3, #4]
		reset_state = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	}
	// low pass filter
	acc_imu[0] += 0.2*(raw.x - acc_imu[0]);
 8003d00:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <read_sensor+0x28c>)
 8003d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fbe4 	bl	80004d4 <__aeabi_i2d>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	460d      	mov	r5, r1
 8003d10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b43      	ldr	r3, [pc, #268]	@ (8003e24 <read_sensor+0x28c>)
 8003d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fbd8 	bl	80004d4 <__aeabi_i2d>
 8003d24:	a338      	add	r3, pc, #224	@ (adr r3, 8003e08 <read_sensor+0x270>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc3d 	bl	80005a8 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f7fc fa81 	bl	800023c <__adddf3>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f7fc fee1 	bl	8000b08 <__aeabi_d2iz>
 8003d46:	4603      	mov	r3, r0
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	4b36      	ldr	r3, [pc, #216]	@ (8003e24 <read_sensor+0x28c>)
 8003d4c:	801a      	strh	r2, [r3, #0]
	acc_imu[1] += 0.2*(raw.y - acc_imu[1]);
 8003d4e:	4b35      	ldr	r3, [pc, #212]	@ (8003e24 <read_sensor+0x28c>)
 8003d50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc fbbd 	bl	80004d4 <__aeabi_i2d>
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <read_sensor+0x28c>)
 8003d66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fbb1 	bl	80004d4 <__aeabi_i2d>
 8003d72:	a325      	add	r3, pc, #148	@ (adr r3, 8003e08 <read_sensor+0x270>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f7fc fc16 	bl	80005a8 <__aeabi_dmul>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4620      	mov	r0, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	f7fc fa5a 	bl	800023c <__adddf3>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7fc feba 	bl	8000b08 <__aeabi_d2iz>
 8003d94:	4603      	mov	r3, r0
 8003d96:	b21a      	sxth	r2, r3
 8003d98:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <read_sensor+0x28c>)
 8003d9a:	805a      	strh	r2, [r3, #2]
	acc_imu[2] += 0.2*(raw.z - acc_imu[2]);
 8003d9c:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <read_sensor+0x28c>)
 8003d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fb96 	bl	80004d4 <__aeabi_i2d>
 8003da8:	4604      	mov	r4, r0
 8003daa:	460d      	mov	r5, r1
 8003dac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e24 <read_sensor+0x28c>)
 8003db4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fb8a 	bl	80004d4 <__aeabi_i2d>
 8003dc0:	a311      	add	r3, pc, #68	@ (adr r3, 8003e08 <read_sensor+0x270>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fbef 	bl	80005a8 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7fc fa33 	bl	800023c <__adddf3>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f7fc fe93 	bl	8000b08 <__aeabi_d2iz>
 8003de2:	4603      	mov	r3, r0
 8003de4:	b21a      	sxth	r2, r3
 8003de6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e24 <read_sensor+0x28c>)
 8003de8:	809a      	strh	r2, [r3, #4]
    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8003dea:	2000      	movs	r0, #0
 8003dec:	f00d f9c8 	bl	8011180 <uxTaskGetStackHighWaterMark>
 8003df0:	4603      	mov	r3, r0
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <read_sensor+0x290>)
 8003df6:	801a      	strh	r2, [r3, #0]
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003df8:	f107 0310 	add.w	r3, r7, #16
 8003dfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00c fbf2 	bl	80105e8 <vTaskDelayUntil>
	mpu6050_gyro_get_raw(&raw);
 8003e04:	e6f8      	b.n	8003bf8 <read_sensor+0x60>
 8003e06:	bf00      	nop
 8003e08:	9999999a 	.word	0x9999999a
 8003e0c:	3fc99999 	.word	0x3fc99999
 8003e10:	200006c4 	.word	0x200006c4
 8003e14:	20000658 	.word	0x20000658
 8003e18:	66666667 	.word	0x66666667
 8003e1c:	20000648 	.word	0x20000648
 8003e20:	200003e4 	.word	0x200003e4
 8003e24:	20000650 	.word	0x20000650
 8003e28:	2000066e 	.word	0x2000066e

08003e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e32:	f107 0310 	add.w	r3, r7, #16
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e40:	4b46      	ldr	r3, [pc, #280]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4a45      	ldr	r2, [pc, #276]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e46:	f043 0310 	orr.w	r3, r3, #16
 8003e4a:	6193      	str	r3, [r2, #24]
 8003e4c:	4b43      	ldr	r3, [pc, #268]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	4b40      	ldr	r3, [pc, #256]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6193      	str	r3, [r2, #24]
 8003e64:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e70:	4b3a      	ldr	r3, [pc, #232]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	4a39      	ldr	r2, [pc, #228]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6193      	str	r3, [r2, #24]
 8003e7c:	4b37      	ldr	r3, [pc, #220]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e88:	4b34      	ldr	r3, [pc, #208]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4a33      	ldr	r2, [pc, #204]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e8e:	f043 0320 	orr.w	r3, r3, #32
 8003e92:	6193      	str	r3, [r2, #24]
 8003e94:	4b31      	ldr	r3, [pc, #196]	@ (8003f5c <MX_GPIO_Init+0x130>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ea6:	482e      	ldr	r0, [pc, #184]	@ (8003f60 <MX_GPIO_Init+0x134>)
 8003ea8:	f002 f853 	bl	8005f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003eac:	2200      	movs	r2, #0
 8003eae:	2130      	movs	r1, #48	@ 0x30
 8003eb0:	482c      	ldr	r0, [pc, #176]	@ (8003f64 <MX_GPIO_Init+0x138>)
 8003eb2:	f002 f84e 	bl	8005f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	21c0      	movs	r1, #192	@ 0xc0
 8003eba:	482b      	ldr	r0, [pc, #172]	@ (8003f68 <MX_GPIO_Init+0x13c>)
 8003ebc:	f002 f849 	bl	8005f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2118      	movs	r1, #24
 8003ec4:	4829      	ldr	r0, [pc, #164]	@ (8003f6c <MX_GPIO_Init+0x140>)
 8003ec6:	f002 f844 	bl	8005f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003edc:	f107 0310 	add.w	r3, r7, #16
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	481f      	ldr	r0, [pc, #124]	@ (8003f60 <MX_GPIO_Init+0x134>)
 8003ee4:	f001 fe8a 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ee8:	2330      	movs	r3, #48	@ 0x30
 8003eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef8:	f107 0310 	add.w	r3, r7, #16
 8003efc:	4619      	mov	r1, r3
 8003efe:	4819      	ldr	r0, [pc, #100]	@ (8003f64 <MX_GPIO_Init+0x138>)
 8003f00:	f001 fe7c 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f04:	23c0      	movs	r3, #192	@ 0xc0
 8003f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2302      	movs	r3, #2
 8003f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4813      	ldr	r0, [pc, #76]	@ (8003f68 <MX_GPIO_Init+0x13c>)
 8003f1c:	f001 fe6e 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003f20:	2318      	movs	r3, #24
 8003f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f24:	2301      	movs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 0310 	add.w	r3, r7, #16
 8003f34:	4619      	mov	r1, r3
 8003f36:	480d      	ldr	r0, [pc, #52]	@ (8003f6c <MX_GPIO_Init+0x140>)
 8003f38:	f001 fe60 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f44:	2302      	movs	r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f48:	f107 0310 	add.w	r3, r7, #16
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4807      	ldr	r0, [pc, #28]	@ (8003f6c <MX_GPIO_Init+0x140>)
 8003f50:	f001 fe54 	bl	8005bfc <HAL_GPIO_Init>

}
 8003f54:	bf00      	nop
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40010800 	.word	0x40010800
 8003f68:	40011400 	.word	0x40011400
 8003f6c:	40010c00 	.word	0x40010c00

08003f70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f74:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f76:	4a13      	ldr	r2, [pc, #76]	@ (8003fc4 <MX_I2C1_Init+0x54>)
 8003f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003f7a:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f7c:	4a12      	ldr	r2, [pc, #72]	@ (8003fc8 <MX_I2C1_Init+0x58>)
 8003f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f80:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f86:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f9a:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fa6:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fac:	4804      	ldr	r0, [pc, #16]	@ (8003fc0 <MX_I2C1_Init+0x50>)
 8003fae:	f002 f801 	bl	8005fb4 <HAL_I2C_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fb8:	f000 f928 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000670 	.word	0x20000670
 8003fc4:	40005400 	.word	0x40005400
 8003fc8:	00061a80 	.word	0x00061a80

08003fcc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <MX_I2C2_Init+0x50>)
 8003fd2:	4a13      	ldr	r2, [pc, #76]	@ (8004020 <MX_I2C2_Init+0x54>)
 8003fd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003fd6:	4b11      	ldr	r3, [pc, #68]	@ (800401c <MX_I2C2_Init+0x50>)
 8003fd8:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <MX_I2C2_Init+0x58>)
 8003fda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <MX_I2C2_Init+0x50>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <MX_I2C2_Init+0x50>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <MX_I2C2_Init+0x50>)
 8003fea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <MX_I2C2_Init+0x50>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <MX_I2C2_Init+0x50>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <MX_I2C2_Init+0x50>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <MX_I2C2_Init+0x50>)
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004008:	4804      	ldr	r0, [pc, #16]	@ (800401c <MX_I2C2_Init+0x50>)
 800400a:	f001 ffd3 	bl	8005fb4 <HAL_I2C_Init>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004014:	f000 f8fa 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}
 800401c:	200006c4 	.word	0x200006c4
 8004020:	40005800 	.word	0x40005800
 8004024:	00061a80 	.word	0x00061a80

08004028 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 0318 	add.w	r3, r7, #24
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2b      	ldr	r2, [pc, #172]	@ (80040f0 <HAL_I2C_MspInit+0xc8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d124      	bne.n	8004092 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004048:	4b2a      	ldr	r3, [pc, #168]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4a29      	ldr	r2, [pc, #164]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 800404e:	f043 0308 	orr.w	r3, r3, #8
 8004052:	6193      	str	r3, [r2, #24]
 8004054:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004060:	23c0      	movs	r3, #192	@ 0xc0
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004064:	2312      	movs	r3, #18
 8004066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004068:	2303      	movs	r3, #3
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406c:	f107 0318 	add.w	r3, r7, #24
 8004070:	4619      	mov	r1, r3
 8004072:	4821      	ldr	r0, [pc, #132]	@ (80040f8 <HAL_I2C_MspInit+0xd0>)
 8004074:	f001 fdc2 	bl	8005bfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004078:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4a1d      	ldr	r2, [pc, #116]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 800407e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004082:	61d3      	str	r3, [r2, #28]
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004090:	e029      	b.n	80040e6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <HAL_I2C_MspInit+0xd4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d124      	bne.n	80040e6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800409c:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 80040a2:	f043 0308 	orr.w	r3, r3, #8
 80040a6:	6193      	str	r3, [r2, #24]
 80040a8:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80040b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ba:	2312      	movs	r3, #18
 80040bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040be:	2303      	movs	r3, #3
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c2:	f107 0318 	add.w	r3, r7, #24
 80040c6:	4619      	mov	r1, r3
 80040c8:	480b      	ldr	r0, [pc, #44]	@ (80040f8 <HAL_I2C_MspInit+0xd0>)
 80040ca:	f001 fd97 	bl	8005bfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 80040d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040d8:	61d3      	str	r3, [r2, #28]
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_I2C_MspInit+0xcc>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
}
 80040e6:	bf00      	nop
 80040e8:	3728      	adds	r7, #40	@ 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40005400 	.word	0x40005400
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40010c00 	.word	0x40010c00
 80040fc:	40005800 	.word	0x40005800

08004100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004104:	f001 fb02 	bl	800570c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004108:	f000 f81a 	bl	8004140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800410c:	f7ff fe8e 	bl	8003e2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004110:	f7ff ff2e 	bl	8003f70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004114:	f7ff ff5a 	bl	8003fcc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004118:	f000 f87e 	bl	8004218 <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 800411c:	f000 faca 	bl	80046b4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8004120:	f000 fb8c 	bl	800483c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004124:	f000 fbb4 	bl	8004890 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004128:	f000 fbdc 	bl	80048e4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800412c:	f000 fa36 	bl	800459c <MX_TIM3_Init>
  MX_FATFS_Init();
 8004130:	f007 fcb2 	bl	800ba98 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004134:	f7ff fb3a 	bl	80037ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004138:	f00b f902 	bl	800f340 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <main+0x3c>

08004140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b090      	sub	sp, #64	@ 0x40
 8004144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004146:	f107 0318 	add.w	r3, r7, #24
 800414a:	2228      	movs	r2, #40	@ 0x28
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f00d ff66 	bl	8012020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	60da      	str	r2, [r3, #12]
 8004160:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004162:	2301      	movs	r3, #1
 8004164:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800416a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800416c:	2300      	movs	r3, #0
 800416e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004170:	2301      	movs	r3, #1
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004174:	2302      	movs	r3, #2
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004178:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800417e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004184:	f107 0318 	add.w	r3, r7, #24
 8004188:	4618      	mov	r0, r3
 800418a:	f003 fd55 	bl	8007c38 <HAL_RCC_OscConfig>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004194:	f000 f83a 	bl	800420c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004198:	230f      	movs	r3, #15
 800419a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800419c:	2302      	movs	r3, #2
 800419e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 ffc2 	bl	800813c <HAL_RCC_ClockConfig>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80041be:	f000 f825 	bl	800420c <Error_Handler>
  }
}
 80041c2:	bf00      	nop
 80041c4:	3740      	adds	r7, #64	@ 0x40
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d102      	bne.n	80041e4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80041de:	f001 faab 	bl	8005738 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 80041e2:	e00b      	b.n	80041fc <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a06      	ldr	r2, [pc, #24]	@ (8004204 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80041f6:	33ff      	adds	r3, #255	@ 0xff
 80041f8:	4a03      	ldr	r2, [pc, #12]	@ (8004208 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80041fa:	6013      	str	r3, [r2, #0]
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40001400 	.word	0x40001400
 8004208:	200003e0 	.word	0x200003e0

0800420c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004210:	b672      	cpsid	i
}
 8004212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <Error_Handler+0x8>

08004218 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 800421e:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <MX_SDIO_SD_Init+0x40>)
 8004220:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004222:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 8004224:	2200      	movs	r2, #0
 8004226:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8004240:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 8004242:	22ff      	movs	r2, #255	@ 0xff
 8004244:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 8004246:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <MX_SDIO_SD_Init+0x3c>)
 8004248:	22ff      	movs	r2, #255	@ 0xff
 800424a:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20000718 	.word	0x20000718
 8004258:	40018000 	.word	0x40018000

0800425c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	@ 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0318 	add.w	r3, r7, #24
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_SD_MspInit+0xa4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d13c      	bne.n	80042f6 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800427c:	4b21      	ldr	r3, [pc, #132]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4a20      	ldr	r2, [pc, #128]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 8004282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004286:	6153      	str	r3, [r2, #20]
 8004288:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004294:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a1a      	ldr	r2, [pc, #104]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 800429a:	f043 0310 	orr.w	r3, r3, #16
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	4b18      	ldr	r3, [pc, #96]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042ac:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	4a14      	ldr	r2, [pc, #80]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 80042b2:	f043 0320 	orr.w	r3, r3, #32
 80042b6:	6193      	str	r3, [r2, #24]
 80042b8:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_SD_MspInit+0xa8>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80042c4:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80042c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ca:	2302      	movs	r3, #2
 80042cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ce:	2303      	movs	r3, #3
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042d2:	f107 0318 	add.w	r3, r7, #24
 80042d6:	4619      	mov	r1, r3
 80042d8:	480b      	ldr	r0, [pc, #44]	@ (8004308 <HAL_SD_MspInit+0xac>)
 80042da:	f001 fc8f 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042de:	2304      	movs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042e6:	2303      	movs	r3, #3
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042ea:	f107 0318 	add.w	r3, r7, #24
 80042ee:	4619      	mov	r1, r3
 80042f0:	4806      	ldr	r0, [pc, #24]	@ (800430c <HAL_SD_MspInit+0xb0>)
 80042f2:	f001 fc83 	bl	8005bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80042f6:	bf00      	nop
 80042f8:	3728      	adds	r7, #40	@ 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40018000 	.word	0x40018000
 8004304:	40021000 	.word	0x40021000
 8004308:	40011000 	.word	0x40011000
 800430c:	40011400 	.word	0x40011400

08004310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004316:	4b18      	ldr	r3, [pc, #96]	@ (8004378 <HAL_MspInit+0x68>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <HAL_MspInit+0x68>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6193      	str	r3, [r2, #24]
 8004322:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <HAL_MspInit+0x68>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <HAL_MspInit+0x68>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4a11      	ldr	r2, [pc, #68]	@ (8004378 <HAL_MspInit+0x68>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004338:	61d3      	str	r3, [r2, #28]
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <HAL_MspInit+0x68>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	210f      	movs	r1, #15
 800434a:	f06f 0001 	mvn.w	r0, #1
 800434e:	f001 fae8 	bl	8005922 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004352:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <HAL_MspInit+0x6c>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	4a04      	ldr	r2, [pc, #16]	@ (800437c <HAL_MspInit+0x6c>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	40010000 	.word	0x40010000

08004380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08e      	sub	sp, #56	@ 0x38
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004396:	4b34      	ldr	r3, [pc, #208]	@ (8004468 <HAL_InitTick+0xe8>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <HAL_InitTick+0xe8>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	61d3      	str	r3, [r2, #28]
 80043a2:	4b31      	ldr	r3, [pc, #196]	@ (8004468 <HAL_InitTick+0xe8>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043ae:	f107 0210 	add.w	r2, r7, #16
 80043b2:	f107 0314 	add.w	r3, r7, #20
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 f82f 	bl	800841c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80043c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d103      	bne.n	80043d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043c8:	f004 f800 	bl	80083cc <HAL_RCC_GetPCLK1Freq>
 80043cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80043ce:	e004      	b.n	80043da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80043d0:	f003 fffc 	bl	80083cc <HAL_RCC_GetPCLK1Freq>
 80043d4:	4603      	mov	r3, r0
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043dc:	4a23      	ldr	r2, [pc, #140]	@ (800446c <HAL_InitTick+0xec>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	0c9b      	lsrs	r3, r3, #18
 80043e4:	3b01      	subs	r3, #1
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80043e8:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <HAL_InitTick+0xf0>)
 80043ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004470 <HAL_InitTick+0xf0>)
 80043f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80043f6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80043f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004470 <HAL_InitTick+0xf0>)
 80043fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80043fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004470 <HAL_InitTick+0xf0>)
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004404:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <HAL_InitTick+0xf0>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440a:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <HAL_InitTick+0xf0>)
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004410:	4817      	ldr	r0, [pc, #92]	@ (8004470 <HAL_InitTick+0xf0>)
 8004412:	f004 ffd9 	bl	80093c8 <HAL_TIM_Base_Init>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800441c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11b      	bne.n	800445c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004424:	4812      	ldr	r0, [pc, #72]	@ (8004470 <HAL_InitTick+0xf0>)
 8004426:	f005 f81f 	bl	8009468 <HAL_TIM_Base_Start_IT>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004430:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004434:	2b00      	cmp	r3, #0
 8004436:	d111      	bne.n	800445c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004438:	201c      	movs	r0, #28
 800443a:	f001 fa8e 	bl	800595a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d808      	bhi.n	8004456 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004444:	2200      	movs	r2, #0
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	201c      	movs	r0, #28
 800444a:	f001 fa6a 	bl	8005922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <HAL_InitTick+0xf4>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e002      	b.n	800445c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800445c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004460:	4618      	mov	r0, r3
 8004462:	3738      	adds	r7, #56	@ 0x38
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	431bde83 	.word	0x431bde83
 8004470:	2000079c 	.word	0x2000079c
 8004474:	2000002c 	.word	0x2000002c

08004478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <NMI_Handler+0x4>

08004480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <HardFault_Handler+0x4>

08004488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <MemManage_Handler+0x4>

08004490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <BusFault_Handler+0x4>

08004498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <UsageFault_Handler+0x4>

080044a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044b0:	4802      	ldr	r0, [pc, #8]	@ (80044bc <TIM2_IRQHandler+0x10>)
 80044b2:	f005 f94b 	bl	800974c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000079c 	.word	0x2000079c

080044c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044c4:	4802      	ldr	r0, [pc, #8]	@ (80044d0 <TIM3_IRQHandler+0x10>)
 80044c6:	f005 f941 	bl	800974c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200007e8 	.word	0x200007e8

080044d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044d8:	4802      	ldr	r0, [pc, #8]	@ (80044e4 <USART1_IRQHandler+0x10>)
 80044da:	f006 f843 	bl	800a564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000878 	.word	0x20000878

080044e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044ec:	4802      	ldr	r0, [pc, #8]	@ (80044f8 <USART2_IRQHandler+0x10>)
 80044ee:	f006 f839 	bl	800a564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200008c0 	.word	0x200008c0

080044fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004500:	4802      	ldr	r0, [pc, #8]	@ (800450c <USART3_IRQHandler+0x10>)
 8004502:	f006 f82f 	bl	800a564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000908 	.word	0x20000908

08004510 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004514:	4802      	ldr	r0, [pc, #8]	@ (8004520 <TIM7_IRQHandler+0x10>)
 8004516:	f005 f919 	bl	800974c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000830 	.word	0x20000830

08004524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800452c:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <_sbrk+0x5c>)
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <_sbrk+0x60>)
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <_sbrk+0x64>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <_sbrk+0x64>)
 8004542:	4a12      	ldr	r2, [pc, #72]	@ (800458c <_sbrk+0x68>)
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <_sbrk+0x64>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d207      	bcs.n	8004564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004554:	f00d fd7c 	bl	8012050 <__errno>
 8004558:	4603      	mov	r3, r0
 800455a:	220c      	movs	r2, #12
 800455c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	e009      	b.n	8004578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004564:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800456a:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <_sbrk+0x64>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	4a05      	ldr	r2, [pc, #20]	@ (8004588 <_sbrk+0x64>)
 8004574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	2000c000 	.word	0x2000c000
 8004584:	00004000 	.word	0x00004000
 8004588:	200007e4 	.word	0x200007e4
 800458c:	20002978 	.word	0x20002978

08004590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08e      	sub	sp, #56	@ 0x38
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b0:	f107 0320 	add.w	r3, r7, #32
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
 80045c8:	615a      	str	r2, [r3, #20]
 80045ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045cc:	4b37      	ldr	r3, [pc, #220]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045ce:	4a38      	ldr	r2, [pc, #224]	@ (80046b0 <MX_TIM3_Init+0x114>)
 80045d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80045d2:	4b36      	ldr	r3, [pc, #216]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045d4:	2247      	movs	r2, #71	@ 0x47
 80045d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d8:	4b34      	ldr	r3, [pc, #208]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80045de:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e6:	4b31      	ldr	r3, [pc, #196]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045ec:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045ee:	2280      	movs	r2, #128	@ 0x80
 80045f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045f2:	482e      	ldr	r0, [pc, #184]	@ (80046ac <MX_TIM3_Init+0x110>)
 80045f4:	f004 fee8 	bl	80093c8 <HAL_TIM_Base_Init>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80045fe:	f7ff fe05 	bl	800420c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800460c:	4619      	mov	r1, r3
 800460e:	4827      	ldr	r0, [pc, #156]	@ (80046ac <MX_TIM3_Init+0x110>)
 8004610:	f005 fa66 	bl	8009ae0 <HAL_TIM_ConfigClockSource>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800461a:	f7ff fdf7 	bl	800420c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800461e:	4823      	ldr	r0, [pc, #140]	@ (80046ac <MX_TIM3_Init+0x110>)
 8004620:	f004 ff82 	bl	8009528 <HAL_TIM_PWM_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800462a:	f7ff fdef 	bl	800420c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004636:	f107 0320 	add.w	r3, r7, #32
 800463a:	4619      	mov	r1, r3
 800463c:	481b      	ldr	r0, [pc, #108]	@ (80046ac <MX_TIM3_Init+0x110>)
 800463e:	f005 fe1b 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004648:	f7ff fde0 	bl	800420c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800464c:	2360      	movs	r3, #96	@ 0x60
 800464e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	2200      	movs	r2, #0
 8004660:	4619      	mov	r1, r3
 8004662:	4812      	ldr	r0, [pc, #72]	@ (80046ac <MX_TIM3_Init+0x110>)
 8004664:	f005 f97a 	bl	800995c <HAL_TIM_PWM_ConfigChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800466e:	f7ff fdcd 	bl	800420c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2204      	movs	r2, #4
 8004676:	4619      	mov	r1, r3
 8004678:	480c      	ldr	r0, [pc, #48]	@ (80046ac <MX_TIM3_Init+0x110>)
 800467a:	f005 f96f 	bl	800995c <HAL_TIM_PWM_ConfigChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004684:	f7ff fdc2 	bl	800420c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	2208      	movs	r2, #8
 800468c:	4619      	mov	r1, r3
 800468e:	4807      	ldr	r0, [pc, #28]	@ (80046ac <MX_TIM3_Init+0x110>)
 8004690:	f005 f964 	bl	800995c <HAL_TIM_PWM_ConfigChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800469a:	f7ff fdb7 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800469e:	4803      	ldr	r0, [pc, #12]	@ (80046ac <MX_TIM3_Init+0x110>)
 80046a0:	f000 f880 	bl	80047a4 <HAL_TIM_MspPostInit>

}
 80046a4:	bf00      	nop
 80046a6:	3738      	adds	r7, #56	@ 0x38
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200007e8 	.word	0x200007e8
 80046b0:	40000400 	.word	0x40000400

080046b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046ba:	463b      	mov	r3, r7
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80046c2:	4b15      	ldr	r3, [pc, #84]	@ (8004718 <MX_TIM7_Init+0x64>)
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <MX_TIM7_Init+0x68>)
 80046c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80046c8:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <MX_TIM7_Init+0x64>)
 80046ca:	2247      	movs	r2, #71	@ 0x47
 80046cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <MX_TIM7_Init+0x64>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80046d4:	4b10      	ldr	r3, [pc, #64]	@ (8004718 <MX_TIM7_Init+0x64>)
 80046d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004718 <MX_TIM7_Init+0x64>)
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046e2:	480d      	ldr	r0, [pc, #52]	@ (8004718 <MX_TIM7_Init+0x64>)
 80046e4:	f004 fe70 	bl	80093c8 <HAL_TIM_Base_Init>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80046ee:	f7ff fd8d 	bl	800420c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80046fa:	463b      	mov	r3, r7
 80046fc:	4619      	mov	r1, r3
 80046fe:	4806      	ldr	r0, [pc, #24]	@ (8004718 <MX_TIM7_Init+0x64>)
 8004700:	f005 fdba 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800470a:	f7ff fd7f 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000830 	.word	0x20000830
 800471c:	40001400 	.word	0x40001400

08004720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1a      	ldr	r2, [pc, #104]	@ (8004798 <HAL_TIM_Base_MspInit+0x78>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d114      	bne.n	800475c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <HAL_TIM_Base_MspInit+0x7c>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_TIM_Base_MspInit+0x7c>)
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	61d3      	str	r3, [r2, #28]
 800473e:	4b17      	ldr	r3, [pc, #92]	@ (800479c <HAL_TIM_Base_MspInit+0x7c>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2105      	movs	r1, #5
 800474e:	201d      	movs	r0, #29
 8004750:	f001 f8e7 	bl	8005922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004754:	201d      	movs	r0, #29
 8004756:	f001 f900 	bl	800595a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800475a:	e018      	b.n	800478e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0f      	ldr	r2, [pc, #60]	@ (80047a0 <HAL_TIM_Base_MspInit+0x80>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d113      	bne.n	800478e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004766:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <HAL_TIM_Base_MspInit+0x7c>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4a0c      	ldr	r2, [pc, #48]	@ (800479c <HAL_TIM_Base_MspInit+0x7c>)
 800476c:	f043 0320 	orr.w	r3, r3, #32
 8004770:	61d3      	str	r3, [r2, #28]
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <HAL_TIM_Base_MspInit+0x7c>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2105      	movs	r1, #5
 8004782:	2037      	movs	r0, #55	@ 0x37
 8004784:	f001 f8cd 	bl	8005922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004788:	2037      	movs	r0, #55	@ 0x37
 800478a:	f001 f8e6 	bl	800595a <HAL_NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40000400 	.word	0x40000400
 800479c:	40021000 	.word	0x40021000
 80047a0:	40001400 	.word	0x40001400

080047a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ac:	f107 0310 	add.w	r3, r7, #16
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1b      	ldr	r2, [pc, #108]	@ (800482c <HAL_TIM_MspPostInit+0x88>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d12f      	bne.n	8004824 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004830 <HAL_TIM_MspPostInit+0x8c>)
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	4a19      	ldr	r2, [pc, #100]	@ (8004830 <HAL_TIM_MspPostInit+0x8c>)
 80047ca:	f043 0304 	orr.w	r3, r3, #4
 80047ce:	6193      	str	r3, [r2, #24]
 80047d0:	4b17      	ldr	r3, [pc, #92]	@ (8004830 <HAL_TIM_MspPostInit+0x8c>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047dc:	4b14      	ldr	r3, [pc, #80]	@ (8004830 <HAL_TIM_MspPostInit+0x8c>)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <HAL_TIM_MspPostInit+0x8c>)
 80047e2:	f043 0308 	orr.w	r3, r3, #8
 80047e6:	6193      	str	r3, [r2, #24]
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <HAL_TIM_MspPostInit+0x8c>)
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047f4:	23c0      	movs	r3, #192	@ 0xc0
 80047f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fc:	2302      	movs	r3, #2
 80047fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004800:	f107 0310 	add.w	r3, r7, #16
 8004804:	4619      	mov	r1, r3
 8004806:	480b      	ldr	r0, [pc, #44]	@ (8004834 <HAL_TIM_MspPostInit+0x90>)
 8004808:	f001 f9f8 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800480c:	2301      	movs	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2302      	movs	r3, #2
 8004816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	4619      	mov	r1, r3
 800481e:	4806      	ldr	r0, [pc, #24]	@ (8004838 <HAL_TIM_MspPostInit+0x94>)
 8004820:	f001 f9ec 	bl	8005bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40000400 	.word	0x40000400
 8004830:	40021000 	.word	0x40021000
 8004834:	40010800 	.word	0x40010800
 8004838:	40010c00 	.word	0x40010c00

0800483c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <MX_USART1_UART_Init+0x50>)
 8004844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800484c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004862:	220c      	movs	r2, #12
 8004864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004866:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004872:	4805      	ldr	r0, [pc, #20]	@ (8004888 <MX_USART1_UART_Init+0x4c>)
 8004874:	f005 fd7e 	bl	800a374 <HAL_UART_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800487e:	f7ff fcc5 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000878 	.word	0x20000878
 800488c:	40013800 	.word	0x40013800

08004890 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 8004896:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <MX_USART2_UART_Init+0x50>)
 8004898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 800489c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048b6:	220c      	movs	r2, #12
 80048b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ba:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048c6:	4805      	ldr	r0, [pc, #20]	@ (80048dc <MX_USART2_UART_Init+0x4c>)
 80048c8:	f005 fd54 	bl	800a374 <HAL_UART_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048d2:	f7ff fc9b 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200008c0 	.word	0x200008c0
 80048e0:	40004400 	.word	0x40004400

080048e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	@ (8004934 <MX_USART3_UART_Init+0x50>)
 80048ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 80048f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80048f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004908:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 800490a:	220c      	movs	r2, #12
 800490c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 8004910:	2200      	movs	r2, #0
 8004912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800491a:	4805      	ldr	r0, [pc, #20]	@ (8004930 <MX_USART3_UART_Init+0x4c>)
 800491c:	f005 fd2a 	bl	800a374 <HAL_UART_Init>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004926:	f7ff fc71 	bl	800420c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000908 	.word	0x20000908
 8004934:	40004800 	.word	0x40004800

08004938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	@ 0x38
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <HAL_UART_MspInit+0x1bc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d13a      	bne.n	80049ce <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004958:	4b67      	ldr	r3, [pc, #412]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	4a66      	ldr	r2, [pc, #408]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 800495e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004962:	6193      	str	r3, [r2, #24]
 8004964:	4b64      	ldr	r3, [pc, #400]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004970:	4b61      	ldr	r3, [pc, #388]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	4a60      	ldr	r2, [pc, #384]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6193      	str	r3, [r2, #24]
 800497c:	4b5e      	ldr	r3, [pc, #376]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498e:	2302      	movs	r3, #2
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004992:	2303      	movs	r3, #3
 8004994:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800499a:	4619      	mov	r1, r3
 800499c:	4857      	ldr	r0, [pc, #348]	@ (8004afc <HAL_UART_MspInit+0x1c4>)
 800499e:	f001 f92d 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049a8:	2300      	movs	r3, #0
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049b4:	4619      	mov	r1, r3
 80049b6:	4851      	ldr	r0, [pc, #324]	@ (8004afc <HAL_UART_MspInit+0x1c4>)
 80049b8:	f001 f920 	bl	8005bfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80049bc:	2200      	movs	r2, #0
 80049be:	2105      	movs	r1, #5
 80049c0:	2025      	movs	r0, #37	@ 0x25
 80049c2:	f000 ffae 	bl	8005922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049c6:	2025      	movs	r0, #37	@ 0x25
 80049c8:	f000 ffc7 	bl	800595a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80049cc:	e08e      	b.n	8004aec <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004b00 <HAL_UART_MspInit+0x1c8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d138      	bne.n	8004a4a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80049d8:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4a46      	ldr	r2, [pc, #280]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 80049de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e2:	61d3      	str	r3, [r2, #28]
 80049e4:	4b44      	ldr	r3, [pc, #272]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f0:	4b41      	ldr	r3, [pc, #260]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	4a40      	ldr	r2, [pc, #256]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	6193      	str	r3, [r2, #24]
 80049fc:	4b3e      	ldr	r3, [pc, #248]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a08:	2304      	movs	r3, #4
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a10:	2303      	movs	r3, #3
 8004a12:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4838      	ldr	r0, [pc, #224]	@ (8004afc <HAL_UART_MspInit+0x1c4>)
 8004a1c:	f001 f8ee 	bl	8005bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a20:	2308      	movs	r3, #8
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a24:	2300      	movs	r3, #0
 8004a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a30:	4619      	mov	r1, r3
 8004a32:	4832      	ldr	r0, [pc, #200]	@ (8004afc <HAL_UART_MspInit+0x1c4>)
 8004a34:	f001 f8e2 	bl	8005bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2105      	movs	r1, #5
 8004a3c:	2026      	movs	r0, #38	@ 0x26
 8004a3e:	f000 ff70 	bl	8005922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a42:	2026      	movs	r0, #38	@ 0x26
 8004a44:	f000 ff89 	bl	800595a <HAL_NVIC_EnableIRQ>
}
 8004a48:	e050      	b.n	8004aec <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b04 <HAL_UART_MspInit+0x1cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d14b      	bne.n	8004aec <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a54:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5e:	61d3      	str	r3, [r2, #28]
 8004a60:	4b25      	ldr	r3, [pc, #148]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a6c:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4a21      	ldr	r2, [pc, #132]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004a72:	f043 0320 	orr.w	r3, r3, #32
 8004a76:	6193      	str	r3, [r2, #24]
 8004a78:	4b1f      	ldr	r3, [pc, #124]	@ (8004af8 <HAL_UART_MspInit+0x1c0>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a96:	4619      	mov	r1, r3
 8004a98:	481b      	ldr	r0, [pc, #108]	@ (8004b08 <HAL_UART_MspInit+0x1d0>)
 8004a9a:	f001 f8af 	bl	8005bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4815      	ldr	r0, [pc, #84]	@ (8004b08 <HAL_UART_MspInit+0x1d0>)
 8004ab4:	f001 f8a2 	bl	8005bfc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8004ab8:	4b14      	ldr	r3, [pc, #80]	@ (8004b0c <HAL_UART_MspInit+0x1d4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <HAL_UART_MspInit+0x1d4>)
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ada:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004adc:	2200      	movs	r2, #0
 8004ade:	2105      	movs	r1, #5
 8004ae0:	2027      	movs	r0, #39	@ 0x27
 8004ae2:	f000 ff1e 	bl	8005922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004ae6:	2027      	movs	r0, #39	@ 0x27
 8004ae8:	f000 ff37 	bl	800595a <HAL_NVIC_EnableIRQ>
}
 8004aec:	bf00      	nop
 8004aee:	3738      	adds	r7, #56	@ 0x38
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40013800 	.word	0x40013800
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40010800 	.word	0x40010800
 8004b00:	40004400 	.word	0x40004400
 8004b04:	40004800 	.word	0x40004800
 8004b08:	40011400 	.word	0x40011400
 8004b0c:	40010000 	.word	0x40010000

08004b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b10:	f7ff fd3e 	bl	8004590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b14:	480b      	ldr	r0, [pc, #44]	@ (8004b44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004b16:	490c      	ldr	r1, [pc, #48]	@ (8004b48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004b18:	4a0c      	ldr	r2, [pc, #48]	@ (8004b4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8004b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b1c:	e002      	b.n	8004b24 <LoopCopyDataInit>

08004b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b22:	3304      	adds	r3, #4

08004b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b28:	d3f9      	bcc.n	8004b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004b2c:	4c09      	ldr	r4, [pc, #36]	@ (8004b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b30:	e001      	b.n	8004b36 <LoopFillZerobss>

08004b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b34:	3204      	adds	r2, #4

08004b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b38:	d3fb      	bcc.n	8004b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b3a:	f00d fa8f 	bl	801205c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b3e:	f7ff fadf 	bl	8004100 <main>
  bx lr
 8004b42:	4770      	bx	lr
  ldr r0, =_sdata
 8004b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b48:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004b4c:	08012b50 	.word	0x08012b50
  ldr r2, =_sbss
 8004b50:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004b54:	20002974 	.word	0x20002974

08004b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b58:	e7fe      	b.n	8004b58 <ADC1_2_IRQHandler>
	...

08004b5c <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	791b      	ldrb	r3, [r3, #4]
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d820      	bhi.n	8004bae <AT24Cxx_get_max_addr+0x52>
 8004b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <AT24Cxx_get_max_addr+0x18>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004b8d 	.word	0x08004b8d
 8004b78:	08004b91 	.word	0x08004b91
 8004b7c:	08004b97 	.word	0x08004b97
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	08004ba3 	.word	0x08004ba3
 8004b88:	08004ba9 	.word	0x08004ba9
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8004b8c:	237f      	movs	r3, #127	@ 0x7f
 8004b8e:	e00f      	b.n	8004bb0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8004b90:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004b94:	e00c      	b.n	8004bb0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8004b96:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004b9a:	e009      	b.n	8004bb0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8004b9c:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8004ba0:	e006      	b.n	8004bb0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8004ba2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004ba6:	e003      	b.n	8004bb0 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8004ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bac:	e000      	b.n	8004bb0 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8004bae:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	791b      	ldrb	r3, [r3, #4]
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d81b      	bhi.n	8004c04 <AT24Cxx_get_pg_size+0x48>
 8004bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <AT24Cxx_get_pg_size+0x18>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004bed 	.word	0x08004bed
 8004bd8:	08004bf1 	.word	0x08004bf1
 8004bdc:	08004bf5 	.word	0x08004bf5
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004bfd 	.word	0x08004bfd
 8004be8:	08004c01 	.word	0x08004c01
	case AT24C01:
		return AT24C01_PG_SIZE;
 8004bec:	2308      	movs	r3, #8
 8004bee:	e00a      	b.n	8004c06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	e008      	b.n	8004c06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	e006      	b.n	8004c06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8004bf8:	2340      	movs	r3, #64	@ 0x40
 8004bfa:	e004      	b.n	8004c06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8004bfc:	2340      	movs	r3, #64	@ 0x40
 8004bfe:	e002      	b.n	8004c06 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8004c00:	2380      	movs	r3, #128	@ 0x80
 8004c02:	e000      	b.n	8004c06 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8004c04:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8004c1e:	2114      	movs	r1, #20
 8004c20:	2001      	movs	r0, #1
 8004c22:	f00d f933 	bl	8011e8c <calloc>
 8004c26:	4603      	mov	r3, r0
 8004c28:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <AT24Cxx_init+0x26>
		return at_init_err;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e028      	b.n	8004c88 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	75fb      	strb	r3, [r7, #23]
 8004c3a:	e007      	b.n	8004c4c <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8004c3c:	7dfa      	ldrb	r2, [r7, #23]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2100      	movs	r1, #0
 8004c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	d9f4      	bls.n	8004c3c <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2205      	movs	r2, #5
 8004c6a:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2201      	movs	r2, #1
 8004c76:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	601a      	str	r2, [r3, #0]

	return at_ok;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <AT24Cxx_add_dev+0x22>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d902      	bls.n	8004cb8 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8004cb2:	f06f 0301 	mvn.w	r3, #1
 8004cb6:	e03e      	b.n	8004d36 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8004cb8:	2114      	movs	r1, #20
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f00d f8e6 	bl	8011e8c <calloc>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d102      	bne.n	8004cd0 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 8004cca:	f06f 0301 	mvn.w	r3, #1
 8004cce:	e032      	b.n	8004d36 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8004cd0:	7afb      	ldrb	r3, [r7, #11]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d18:	1e5a      	subs	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6979      	ldr	r1, [r7, #20]
 8004d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d28:	1e9a      	subs	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	60da      	str	r2, [r3, #12]
	return at_ok;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8004d3e:	b5b0      	push	{r4, r5, r7, lr}
 8004d40:	b08a      	sub	sp, #40	@ 0x28
 8004d42:	af04      	add	r7, sp, #16
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	80fb      	strh	r3, [r7, #6]
 8004d50:	4613      	mov	r3, r2
 8004d52:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff ff31 	bl	8004bbc <AT24Cxx_get_pg_size>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	7dba      	ldrb	r2, [r7, #22]
 8004d62:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d66:	fb01 f202 	mul.w	r2, r1, r2
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	7dba      	ldrb	r2, [r7, #22]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8004d74:	88ba      	ldrh	r2, [r7, #4]
 8004d76:	7d7b      	ldrb	r3, [r7, #21]
 8004d78:	1ad2      	subs	r2, r2, r3
 8004d7a:	7dbb      	ldrb	r3, [r7, #22]
 8004d7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d80:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8004d82:	88ba      	ldrh	r2, [r7, #4]
 8004d84:	7d7b      	ldrb	r3, [r7, #21]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	7dba      	ldrb	r2, [r7, #22]
 8004d8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d8e:	fb01 f202 	mul.w	r2, r1, r2
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	7d7b      	ldrb	r3, [r7, #21]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dd23      	ble.n	8004de8 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	7d7b      	ldrb	r3, [r7, #21]
 8004da4:	18d4      	adds	r4, r2, r3
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fed8 	bl	8004b5c <AT24Cxx_get_max_addr>
 8004dac:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8004dae:	429c      	cmp	r4, r3
 8004db0:	da1a      	bge.n	8004de8 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8004db2:	bf00      	nop
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88db      	ldrh	r3, [r3, #6]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	b21b      	sxth	r3, r3
 8004dc0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004dc4:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8004dc6:	b299      	uxth	r1, r3
 8004dc8:	7d7b      	ldrb	r3, [r7, #21]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8004dd2:	9402      	str	r4, [sp, #8]
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2310      	movs	r3, #16
 8004ddc:	f001 fd98 	bl	8006910 <HAL_I2C_Mem_Write>
 8004de0:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e6      	bne.n	8004db4 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8004de6:	e002      	b.n	8004dee <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8004de8:	f06f 0304 	mvn.w	r3, #4
 8004dec:	e0a5      	b.n	8004f3a <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
 8004df2:	e04e      	b.n	8004e92 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004df4:	88fa      	ldrh	r2, [r7, #6]
 8004df6:	7d7b      	ldrb	r3, [r7, #21]
 8004df8:	441a      	add	r2, r3
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	7db9      	ldrb	r1, [r7, #22]
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dd3e      	ble.n	8004e86 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	7d7b      	ldrb	r3, [r7, #21]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	7db9      	ldrb	r1, [r7, #22]
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	18d4      	adds	r4, r2, r3
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fe9f 	bl	8004b5c <AT24Cxx_get_max_addr>
 8004e1e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004e20:	429c      	cmp	r4, r3
 8004e22:	da30      	bge.n	8004e86 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004e24:	bf00      	nop
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88db      	ldrh	r3, [r3, #6]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	b21b      	sxth	r3, r3
 8004e32:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004e36:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004e38:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 8004e3a:	7d7b      	ldrb	r3, [r7, #21]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	4413      	add	r3, r2
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	7db9      	ldrb	r1, [r7, #22]
 8004e4a:	b289      	uxth	r1, r1
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004e52:	4413      	add	r3, r2
 8004e54:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8004e56:	7d7b      	ldrb	r3, [r7, #21]
 8004e58:	7dfa      	ldrb	r2, [r7, #23]
 8004e5a:	7db9      	ldrb	r1, [r7, #22]
 8004e5c:	fb01 f202 	mul.w	r2, r1, r2
 8004e60:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	4413      	add	r3, r2
 8004e66:	7dba      	ldrb	r2, [r7, #22]
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004e6e:	9102      	str	r1, [sp, #8]
 8004e70:	9201      	str	r2, [sp, #4]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2310      	movs	r3, #16
 8004e76:	462a      	mov	r2, r5
 8004e78:	4621      	mov	r1, r4
 8004e7a:	f001 fd49 	bl	8006910 <HAL_I2C_Mem_Write>
 8004e7e:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1d0      	bne.n	8004e26 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004e84:	e002      	b.n	8004e8c <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 8004e86:	f06f 0304 	mvn.w	r3, #4
 8004e8a:	e056      	b.n	8004f3a <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
 8004e92:	7dfa      	ldrb	r2, [r7, #23]
 8004e94:	7d3b      	ldrb	r3, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d3ac      	bcc.n	8004df4 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d04b      	beq.n	8004f38 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	7d7b      	ldrb	r3, [r7, #21]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	7d3b      	ldrb	r3, [r7, #20]
 8004ea8:	7db9      	ldrb	r1, [r7, #22]
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dd3e      	ble.n	8004f32 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	7d7b      	ldrb	r3, [r7, #21]
 8004eb8:	441a      	add	r2, r3
 8004eba:	7d3b      	ldrb	r3, [r7, #20]
 8004ebc:	7db9      	ldrb	r1, [r7, #22]
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	18d4      	adds	r4, r2, r3
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff fe49 	bl	8004b5c <AT24Cxx_get_max_addr>
 8004eca:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	da30      	bge.n	8004f32 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004ed0:	bf00      	nop
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88db      	ldrh	r3, [r3, #6]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004ee2:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004ee4:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8004ee6:	7d7b      	ldrb	r3, [r7, #21]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	4413      	add	r3, r2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	7d3b      	ldrb	r3, [r7, #20]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	7db9      	ldrb	r1, [r7, #22]
 8004ef6:	b289      	uxth	r1, r1
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004efe:	4413      	add	r3, r2
 8004f00:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8004f02:	7d7b      	ldrb	r3, [r7, #21]
 8004f04:	7d3a      	ldrb	r2, [r7, #20]
 8004f06:	7db9      	ldrb	r1, [r7, #22]
 8004f08:	fb01 f202 	mul.w	r2, r1, r2
 8004f0c:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	7cfa      	ldrb	r2, [r7, #19]
 8004f14:	b292      	uxth	r2, r2
 8004f16:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004f1a:	9102      	str	r1, [sp, #8]
 8004f1c:	9201      	str	r2, [sp, #4]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2310      	movs	r3, #16
 8004f22:	462a      	mov	r2, r5
 8004f24:	4621      	mov	r1, r4
 8004f26:	f001 fcf3 	bl	8006910 <HAL_I2C_Mem_Write>
 8004f2a:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1d0      	bne.n	8004ed2 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004f30:	e002      	b.n	8004f38 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8004f32:	f06f 0304 	mvn.w	r3, #4
 8004f36:	e000      	b.n	8004f3a <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bdb0      	pop	{r4, r5, r7, pc}

08004f42 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b088      	sub	sp, #32
 8004f46:	af04      	add	r7, sp, #16
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	460b      	mov	r3, r1
 8004f52:	80fb      	strh	r3, [r7, #6]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d022      	beq.n	8004fa4 <AT24Cxx_read_byte_buffer+0x62>
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fdfc 	bl	8004b5c <AT24Cxx_get_max_addr>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d21a      	bcs.n	8004fa4 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8004f6e:	bf00      	nop
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88db      	ldrh	r3, [r3, #6]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8004f80:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8004f82:	b299      	uxth	r1, r3
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f8a:	9302      	str	r3, [sp, #8]
 8004f8c:	88bb      	ldrh	r3, [r7, #4]
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2310      	movs	r3, #16
 8004f96:	f001 fdb5 	bl	8006b04 <HAL_I2C_Mem_Read>
 8004f9a:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e7      	bne.n	8004f70 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	e001      	b.n	8004fa8 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8004fa4:	f06f 0306 	mvn.w	r3, #6
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	da01      	bge.n	8004fc8 <constrain+0x18>
        return low;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	e006      	b.n	8004fd6 <constrain+0x26>
    else if (amt > high)
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	dd01      	ble.n	8004fd4 <constrain+0x24>
        return high;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	e000      	b.n	8004fd6 <constrain+0x26>
    else
        return amt;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7fc f85e 	bl	80010b0 <__aeabi_fcmplt>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <constrainf+0x1e>
        return low;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	e009      	b.n	8005012 <constrainf+0x32>
    else if (amt > high)
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7fc f873 	bl	80010ec <__aeabi_fcmpgt>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <constrainf+0x30>
        return high;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	e000      	b.n	8005012 <constrainf+0x32>
    else
        return amt;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 8005026:	490d      	ldr	r1, [pc, #52]	@ (800505c <pt1FilterGain+0x40>)
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fb fea3 	bl	8000d74 <__aeabi_fmul>
 800502e:	4603      	mov	r3, r0
 8005030:	4619      	mov	r1, r3
 8005032:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005036:	f7fb ff51 	bl	8000edc <__aeabi_fdiv>
 800503a:	4603      	mov	r3, r0
 800503c:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7fb fd8f 	bl	8000b64 <__addsf3>
 8005046:	4603      	mov	r3, r0
 8005048:	4619      	mov	r1, r3
 800504a:	6838      	ldr	r0, [r7, #0]
 800504c:	f7fb ff46 	bl	8000edc <__aeabi_fdiv>
 8005050:	4603      	mov	r3, r0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40c90fdb 	.word	0x40c90fdb

08005060 <attitude_ctrl_init>:
float pitch_pid_rc_gain;
float pitch_trim;

float ab_speed_filted;

void attitude_ctrl_init(){
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <attitude_ctrl_init+0x80>)
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <attitude_ctrl_init+0x84>)
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid,6,0,0,F_CUT_OFF,100);
 8005074:	4b1c      	ldr	r3, [pc, #112]	@ (80050e8 <attitude_ctrl_init+0x88>)
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	4919      	ldr	r1, [pc, #100]	@ (80050ec <attitude_ctrl_init+0x8c>)
 8005088:	4819      	ldr	r0, [pc, #100]	@ (80050f0 <attitude_ctrl_init+0x90>)
 800508a:	f7fe f974 	bl	8003376 <pid_init>
   pid_init(&roll_rate_pid,5,2.5,0,F_CUT_OFF,300);
 800508e:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <attitude_ctrl_init+0x94>)
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	4a16      	ldr	r2, [pc, #88]	@ (80050f8 <attitude_ctrl_init+0x98>)
 800509e:	4917      	ldr	r1, [pc, #92]	@ (80050fc <attitude_ctrl_init+0x9c>)
 80050a0:	4817      	ldr	r0, [pc, #92]	@ (8005100 <attitude_ctrl_init+0xa0>)
 80050a2:	f7fe f968 	bl	8003376 <pid_init>

   pid_init(&pitch_angle_pid,4,0,0,F_CUT_OFF,100);
 80050a6:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <attitude_ctrl_init+0x88>)
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80050bc:	4811      	ldr	r0, [pc, #68]	@ (8005104 <attitude_ctrl_init+0xa4>)
 80050be:	f7fe f95a 	bl	8003376 <pid_init>
   pid_init(&pitch_rate_pid,5,2.5,0,F_CUT_OFF,300);
 80050c2:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <attitude_ctrl_init+0x94>)
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <attitude_ctrl_init+0x98>)
 80050d2:	490a      	ldr	r1, [pc, #40]	@ (80050fc <attitude_ctrl_init+0x9c>)
 80050d4:	480c      	ldr	r0, [pc, #48]	@ (8005108 <attitude_ctrl_init+0xa8>)
 80050d6:	f7fe f94e 	bl	8003376 <pid_init>

}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000958 	.word	0x20000958
 80050e4:	20000a04 	.word	0x20000a04
 80050e8:	42c80000 	.word	0x42c80000
 80050ec:	40c00000 	.word	0x40c00000
 80050f0:	200009a4 	.word	0x200009a4
 80050f4:	43960000 	.word	0x43960000
 80050f8:	40200000 	.word	0x40200000
 80050fc:	40a00000 	.word	0x40a00000
 8005100:	2000095c 	.word	0x2000095c
 8005104:	200009c8 	.word	0x200009c8
 8005108:	20000980 	.word	0x20000980
 800510c:	00000000 	.word	0x00000000

08005110 <attitude_ctrl>:

void attitude_ctrl(float dt){ 
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b096      	sub	sp, #88	@ 0x58
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fb ffc7 	bl	80010b0 <__aeabi_fcmplt>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 82de 	bne.w	80056e6 <attitude_ctrl+0x5d6>
 800512a:	4989      	ldr	r1, [pc, #548]	@ (8005350 <attitude_ctrl+0x240>)
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fb ffdd 	bl	80010ec <__aeabi_fcmpgt>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 82d6 	bne.w	80056e6 <attitude_ctrl+0x5d6>
        return;
    }

    float roll_rate_measurement = AHRS.roll_rate;
 800513a:	4b86      	ldr	r3, [pc, #536]	@ (8005354 <attitude_ctrl+0x244>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	653b      	str	r3, [r7, #80]	@ 0x50
    float pitch_rate_measurement = AHRS.pitch_rate;
 8005140:	4b84      	ldr	r3, [pc, #528]	@ (8005354 <attitude_ctrl+0x244>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	64fb      	str	r3, [r7, #76]	@ 0x4c

    float roll_measurement = AHRS.roll;
 8005146:	4b83      	ldr	r3, [pc, #524]	@ (8005354 <attitude_ctrl+0x244>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	64bb      	str	r3, [r7, #72]	@ 0x48
    float pitch_measurement = AHRS.pitch;
 800514c:	4b81      	ldr	r3, [pc, #516]	@ (8005354 <attitude_ctrl+0x244>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	647b      	str	r3, [r7, #68]	@ 0x44


    roll_desired = ((int)ibusChannelData[0] - 1500)*0.15f;
 8005152:	4b81      	ldr	r3, [pc, #516]	@ (8005358 <attitude_ctrl+0x248>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb fdb6 	bl	8000ccc <__aeabi_i2f>
 8005160:	4603      	mov	r3, r0
 8005162:	497e      	ldr	r1, [pc, #504]	@ (800535c <attitude_ctrl+0x24c>)
 8005164:	4618      	mov	r0, r3
 8005166:	f7fb fe05 	bl	8000d74 <__aeabi_fmul>
 800516a:	4603      	mov	r3, r0
 800516c:	461a      	mov	r2, r3
 800516e:	4b7c      	ldr	r3, [pc, #496]	@ (8005360 <attitude_ctrl+0x250>)
 8005170:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f;
 8005172:	4b79      	ldr	r3, [pc, #484]	@ (8005358 <attitude_ctrl+0x248>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb fda6 	bl	8000ccc <__aeabi_i2f>
 8005180:	4603      	mov	r3, r0
 8005182:	4978      	ldr	r1, [pc, #480]	@ (8005364 <attitude_ctrl+0x254>)
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb fdf5 	bl	8000d74 <__aeabi_fmul>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	4b76      	ldr	r3, [pc, #472]	@ (8005368 <attitude_ctrl+0x258>)
 8005190:	601a      	str	r2, [r3, #0]

    // pid scale with velocity
	float pid_velo_scale;

    if(_gps.fix > 1){
 8005192:	4b76      	ldr	r3, [pc, #472]	@ (800536c <attitude_ctrl+0x25c>)
 8005194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005198:	2b01      	cmp	r3, #1
 800519a:	f240 808d 	bls.w	80052b8 <attitude_ctrl+0x1a8>
        float vn = (float)_gps.velocity[0]/100;  // m
 800519e:	4b73      	ldr	r3, [pc, #460]	@ (800536c <attitude_ctrl+0x25c>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb fd92 	bl	8000ccc <__aeabi_i2f>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4971      	ldr	r1, [pc, #452]	@ (8005370 <attitude_ctrl+0x260>)
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb fe95 	bl	8000edc <__aeabi_fdiv>
 80051b2:	4603      	mov	r3, r0
 80051b4:	643b      	str	r3, [r7, #64]	@ 0x40
        float ve = (float)_gps.velocity[1]/100;  // m
 80051b6:	4b6d      	ldr	r3, [pc, #436]	@ (800536c <attitude_ctrl+0x25c>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb fd86 	bl	8000ccc <__aeabi_i2f>
 80051c0:	4603      	mov	r3, r0
 80051c2:	496b      	ldr	r1, [pc, #428]	@ (8005370 <attitude_ctrl+0x260>)
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb fe89 	bl	8000edc <__aeabi_fdiv>
 80051ca:	4603      	mov	r3, r0
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        float vd = (float)_gps.velocity[2]/100;  // m
 80051ce:	4b67      	ldr	r3, [pc, #412]	@ (800536c <attitude_ctrl+0x25c>)
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fb fd7a 	bl	8000ccc <__aeabi_i2f>
 80051d8:	4603      	mov	r3, r0
 80051da:	4965      	ldr	r1, [pc, #404]	@ (8005370 <attitude_ctrl+0x260>)
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb fe7d 	bl	8000edc <__aeabi_fdiv>
 80051e2:	4603      	mov	r3, r0
 80051e4:	63bb      	str	r3, [r7, #56]	@ 0x38

        float absolute_velocity = sqrtf(sq(vn) + sq(ve) + sq(vd));
 80051e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80051ea:	f7fb fdc3 	bl	8000d74 <__aeabi_fmul>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461c      	mov	r4, r3
 80051f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80051f6:	f7fb fdbd 	bl	8000d74 <__aeabi_fmul>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4619      	mov	r1, r3
 80051fe:	4620      	mov	r0, r4
 8005200:	f7fb fcb0 	bl	8000b64 <__addsf3>
 8005204:	4603      	mov	r3, r0
 8005206:	461c      	mov	r4, r3
 8005208:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800520a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800520c:	f7fb fdb2 	bl	8000d74 <__aeabi_fmul>
 8005210:	4603      	mov	r3, r0
 8005212:	4619      	mov	r1, r3
 8005214:	4620      	mov	r0, r4
 8005216:	f7fb fca5 	bl	8000b64 <__addsf3>
 800521a:	4603      	mov	r3, r0
 800521c:	4618      	mov	r0, r3
 800521e:	f00c ff75 	bl	801210c <sqrtf>
 8005222:	6378      	str	r0, [r7, #52]	@ 0x34
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 8005224:	4a53      	ldr	r2, [pc, #332]	@ (8005374 <attitude_ctrl+0x264>)
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800522c:	f7ff fed8 	bl	8004fe0 <constrainf>
 8005230:	6378      	str	r0, [r7, #52]	@ 0x34
        if(speed_filter_reset){
 8005232:	4b51      	ldr	r3, [pc, #324]	@ (8005378 <attitude_ctrl+0x268>)
 8005234:	f993 3000 	ldrsb.w	r3, [r3]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <attitude_ctrl+0x138>
            ab_speed_filted = absolute_velocity;
 800523c:	4a4f      	ldr	r2, [pc, #316]	@ (800537c <attitude_ctrl+0x26c>)
 800523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005240:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 8005242:	4b4d      	ldr	r3, [pc, #308]	@ (8005378 <attitude_ctrl+0x268>)
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	484d      	ldr	r0, [pc, #308]	@ (8005380 <attitude_ctrl+0x270>)
 800524c:	f7ff fee6 	bl	800501c <pt1FilterGain>
 8005250:	4604      	mov	r4, r0
 8005252:	4b4a      	ldr	r3, [pc, #296]	@ (800537c <attitude_ctrl+0x26c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800525a:	f7fb fc81 	bl	8000b60 <__aeabi_fsub>
 800525e:	4603      	mov	r3, r0
 8005260:	4619      	mov	r1, r3
 8005262:	4620      	mov	r0, r4
 8005264:	f7fb fd86 	bl	8000d74 <__aeabi_fmul>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	4b43      	ldr	r3, [pc, #268]	@ (800537c <attitude_ctrl+0x26c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fb fc76 	bl	8000b64 <__addsf3>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	4b3f      	ldr	r3, [pc, #252]	@ (800537c <attitude_ctrl+0x26c>)
 800527e:	601a      	str	r2, [r3, #0]
        pid_velo_scale = 1.0/(1 + sq(ab_speed_filted)*0.0035f);
 8005280:	4b3e      	ldr	r3, [pc, #248]	@ (800537c <attitude_ctrl+0x26c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a3d      	ldr	r2, [pc, #244]	@ (800537c <attitude_ctrl+0x26c>)
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb fd72 	bl	8000d74 <__aeabi_fmul>
 8005290:	4603      	mov	r3, r0
 8005292:	493c      	ldr	r1, [pc, #240]	@ (8005384 <attitude_ctrl+0x274>)
 8005294:	4618      	mov	r0, r3
 8005296:	f7fb fd6d 	bl	8000d74 <__aeabi_fmul>
 800529a:	4603      	mov	r3, r0
 800529c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fb fc5f 	bl	8000b64 <__addsf3>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4619      	mov	r1, r3
 80052aa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80052ae:	f7fb fe15 	bl	8000edc <__aeabi_fdiv>
 80052b2:	4603      	mov	r3, r0
 80052b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80052b6:	e00e      	b.n	80052d6 <attitude_ctrl+0x1c6>
    }
    else{
        speed_filter_reset = TRUE;
 80052b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005378 <attitude_ctrl+0x268>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]

    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 80052be:	4b26      	ldr	r3, [pc, #152]	@ (8005358 <attitude_ctrl+0x248>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d903      	bls.n	80052d2 <attitude_ctrl+0x1c2>
    		pid_velo_scale = 1;
 80052ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80052ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d0:	e001      	b.n	80052d6 <attitude_ctrl+0x1c6>
    	}else{
    		pid_velo_scale = 0.3f;
 80052d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005388 <attitude_ctrl+0x278>)
 80052d4:	657b      	str	r3, [r7, #84]	@ 0x54
    	}
    }

    float pid_roll_vel_scale = constrainf(pid_velo_scale,0.3f,1.0f);
 80052d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052da:	492b      	ldr	r1, [pc, #172]	@ (8005388 <attitude_ctrl+0x278>)
 80052dc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80052de:	f7ff fe7f 	bl	8004fe0 <constrainf>
 80052e2:	6338      	str	r0, [r7, #48]	@ 0x30
    float pid_pitch_vel_scale = constrainf(pid_velo_scale,0.3f,1.0f);
 80052e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052e8:	4927      	ldr	r1, [pc, #156]	@ (8005388 <attitude_ctrl+0x278>)
 80052ea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80052ec:	f7ff fe78 	bl	8004fe0 <constrainf>
 80052f0:	62f8      	str	r0, [r7, #44]	@ 0x2c

    // stablize mode
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 80052f2:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <attitude_ctrl+0x248>)
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f240 8158 	bls.w	80055b0 <attitude_ctrl+0x4a0>

		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8005300:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <attitude_ctrl+0x248>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005308:	4293      	cmp	r3, r2
 800530a:	d947      	bls.n	800539c <attitude_ctrl+0x28c>
			roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 800530c:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <attitude_ctrl+0x248>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb fcd9 	bl	8000ccc <__aeabi_i2f>
 800531a:	4603      	mov	r3, r0
 800531c:	491b      	ldr	r1, [pc, #108]	@ (800538c <attitude_ctrl+0x27c>)
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb fd28 	bl	8000d74 <__aeabi_fmul>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	4b19      	ldr	r3, [pc, #100]	@ (8005390 <attitude_ctrl+0x280>)
 800532a:	601a      	str	r2, [r3, #0]
			roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <attitude_ctrl+0x248>)
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005334:	4618      	mov	r0, r3
 8005336:	f7fb fcc9 	bl	8000ccc <__aeabi_i2f>
 800533a:	4603      	mov	r3, r0
 800533c:	4915      	ldr	r1, [pc, #84]	@ (8005394 <attitude_ctrl+0x284>)
 800533e:	4618      	mov	r0, r3
 8005340:	f7fb fd18 	bl	8000d74 <__aeabi_fmul>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <attitude_ctrl+0x288>)
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e046      	b.n	80053dc <attitude_ctrl+0x2cc>
 800534e:	bf00      	nop
 8005350:	3dcccccd 	.word	0x3dcccccd
 8005354:	20000370 	.word	0x20000370
 8005358:	200000c0 	.word	0x200000c0
 800535c:	3e19999a 	.word	0x3e19999a
 8005360:	20000950 	.word	0x20000950
 8005364:	be19999a 	.word	0xbe19999a
 8005368:	20000954 	.word	0x20000954
 800536c:	20000248 	.word	0x20000248
 8005370:	42c80000 	.word	0x42c80000
 8005374:	41f00000 	.word	0x41f00000
 8005378:	20000958 	.word	0x20000958
 800537c:	20000a04 	.word	0x20000a04
 8005380:	41200000 	.word	0x41200000
 8005384:	3b656042 	.word	0x3b656042
 8005388:	3e99999a 	.word	0x3e99999a
 800538c:	3b03126f 	.word	0x3b03126f
 8005390:	200009f4 	.word	0x200009f4
 8005394:	bdcccccd 	.word	0xbdcccccd
 8005398:	200009f8 	.word	0x200009f8
		}else{
			pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 800539c:	4b74      	ldr	r3, [pc, #464]	@ (8005570 <attitude_ctrl+0x460>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb fc91 	bl	8000ccc <__aeabi_i2f>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4971      	ldr	r1, [pc, #452]	@ (8005574 <attitude_ctrl+0x464>)
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fb fce0 	bl	8000d74 <__aeabi_fmul>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005578 <attitude_ctrl+0x468>)
 80053ba:	601a      	str	r2, [r3, #0]
			pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 80053bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005570 <attitude_ctrl+0x460>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fb fc81 	bl	8000ccc <__aeabi_i2f>
 80053ca:	4603      	mov	r3, r0
 80053cc:	496b      	ldr	r1, [pc, #428]	@ (800557c <attitude_ctrl+0x46c>)
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fb fcd0 	bl	8000d74 <__aeabi_fmul>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	4b69      	ldr	r3, [pc, #420]	@ (8005580 <attitude_ctrl+0x470>)
 80053da:	601a      	str	r2, [r3, #0]
		}
        
        // roll axis
        float r_angle_pid =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired + roll_trim,dt);
 80053dc:	4b69      	ldr	r3, [pc, #420]	@ (8005584 <attitude_ctrl+0x474>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a69      	ldr	r2, [pc, #420]	@ (8005588 <attitude_ctrl+0x478>)
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fb fbbc 	bl	8000b64 <__addsf3>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80053f4:	4865      	ldr	r0, [pc, #404]	@ (800558c <attitude_ctrl+0x47c>)
 80053f6:	f7fd ffe9 	bl	80033cc <pid_calculate>
 80053fa:	6238      	str	r0, [r7, #32]
        float r_rate_pid  = -pid_calculate(&roll_rate_pid,-roll_rate_measurement,r_angle_pid,dt);
 80053fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fe:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	4862      	ldr	r0, [pc, #392]	@ (8005590 <attitude_ctrl+0x480>)
 8005408:	f7fd ffe0 	bl	80033cc <pid_calculate>
 800540c:	4603      	mov	r3, r0
 800540e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005412:	61fb      	str	r3, [r7, #28]
        //float FF_roll = r_angle_pid*ff_roll_gain;
        //r_rate_pid = r_rate_pid - FF_roll;
        //pitch axis
        float p_angle_pid =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired + pitch_trim,dt);
 8005414:	4b5f      	ldr	r3, [pc, #380]	@ (8005594 <attitude_ctrl+0x484>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a59      	ldr	r2, [pc, #356]	@ (8005580 <attitude_ctrl+0x470>)
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7fb fba0 	bl	8000b64 <__addsf3>
 8005424:	4603      	mov	r3, r0
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800542c:	485a      	ldr	r0, [pc, #360]	@ (8005598 <attitude_ctrl+0x488>)
 800542e:	f7fd ffcd 	bl	80033cc <pid_calculate>
 8005432:	61b8      	str	r0, [r7, #24]
        float p_rate_pid  = -pid_calculate(&pitch_rate_pid,-pitch_rate_measurement,p_angle_pid,dt);
 8005434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005436:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4857      	ldr	r0, [pc, #348]	@ (800559c <attitude_ctrl+0x48c>)
 8005440:	f7fd ffc4 	bl	80033cc <pid_calculate>
 8005444:	4603      	mov	r3, r0
 8005446:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800544a:	617b      	str	r3, [r7, #20]
        //float FF_pitch = p_angle_pid*ff_pitch_gain;
        //p_rate_pid = p_rate_pid - FF_pitch;
        r_rate_pid = r_rate_pid * pid_roll_vel_scale  * roll_pid_rc_gain;
 800544c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800544e:	69f8      	ldr	r0, [r7, #28]
 8005450:	f7fb fc90 	bl	8000d74 <__aeabi_fmul>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	4b51      	ldr	r3, [pc, #324]	@ (80055a0 <attitude_ctrl+0x490>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fb fc88 	bl	8000d74 <__aeabi_fmul>
 8005464:	4603      	mov	r3, r0
 8005466:	61fb      	str	r3, [r7, #28]
        p_rate_pid = p_rate_pid * pid_pitch_vel_scale * pitch_pid_rc_gain;
 8005468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7fb fc82 	bl	8000d74 <__aeabi_fmul>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	4b40      	ldr	r3, [pc, #256]	@ (8005578 <attitude_ctrl+0x468>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f7fb fc7a 	bl	8000d74 <__aeabi_fmul>
 8005480:	4603      	mov	r3, r0
 8005482:	617b      	str	r3, [r7, #20]

		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8005484:	4b3a      	ldr	r3, [pc, #232]	@ (8005570 <attitude_ctrl+0x460>)
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800548c:	4293      	cmp	r3, r2
 800548e:	d932      	bls.n	80054f6 <attitude_ctrl+0x3e6>
				int s1 = 1500 - ibusChannelData[CH2];
 8005490:	4b37      	ldr	r3, [pc, #220]	@ (8005570 <attitude_ctrl+0x460>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005498:	3304      	adds	r3, #4
 800549a:	60fb      	str	r3, [r7, #12]

				servoL = 1500 + r_rate_pid + s1;// - pitch_pid_filted;
 800549c:	4941      	ldr	r1, [pc, #260]	@ (80055a4 <attitude_ctrl+0x494>)
 800549e:	69f8      	ldr	r0, [r7, #28]
 80054a0:	f7fb fb60 	bl	8000b64 <__addsf3>
 80054a4:	4603      	mov	r3, r0
 80054a6:	461c      	mov	r4, r3
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7fb fc0f 	bl	8000ccc <__aeabi_i2f>
 80054ae:	4603      	mov	r3, r0
 80054b0:	4619      	mov	r1, r3
 80054b2:	4620      	mov	r0, r4
 80054b4:	f7fb fb56 	bl	8000b64 <__addsf3>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fb fe5c 	bl	8001178 <__aeabi_f2uiz>
 80054c0:	4603      	mov	r3, r0
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	4b38      	ldr	r3, [pc, #224]	@ (80055a8 <attitude_ctrl+0x498>)
 80054c6:	801a      	strh	r2, [r3, #0]
				servoR = 1500 - r_rate_pid + s1;// - pitch_pid_filted;
 80054c8:	69f9      	ldr	r1, [r7, #28]
 80054ca:	4836      	ldr	r0, [pc, #216]	@ (80055a4 <attitude_ctrl+0x494>)
 80054cc:	f7fb fb48 	bl	8000b60 <__aeabi_fsub>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461c      	mov	r4, r3
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7fb fbf9 	bl	8000ccc <__aeabi_i2f>
 80054da:	4603      	mov	r3, r0
 80054dc:	4619      	mov	r1, r3
 80054de:	4620      	mov	r0, r4
 80054e0:	f7fb fb40 	bl	8000b64 <__addsf3>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fb fe46 	bl	8001178 <__aeabi_f2uiz>
 80054ec:	4603      	mov	r3, r0
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	4b2e      	ldr	r3, [pc, #184]	@ (80055ac <attitude_ctrl+0x49c>)
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e02c      	b.n	8005550 <attitude_ctrl+0x440>
		}else{
				int s1 = 1500 - ibusChannelData[CH1];
 80054f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005570 <attitude_ctrl+0x460>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80054fe:	3304      	adds	r3, #4
 8005500:	613b      	str	r3, [r7, #16]

				servoL = 1500 +  s1 - p_rate_pid;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005508:	4618      	mov	r0, r3
 800550a:	f7fb fbdf 	bl	8000ccc <__aeabi_i2f>
 800550e:	4603      	mov	r3, r0
 8005510:	6979      	ldr	r1, [r7, #20]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fb fb24 	bl	8000b60 <__aeabi_fsub>
 8005518:	4603      	mov	r3, r0
 800551a:	4618      	mov	r0, r3
 800551c:	f7fb fe2c 	bl	8001178 <__aeabi_f2uiz>
 8005520:	4603      	mov	r3, r0
 8005522:	b29a      	uxth	r2, r3
 8005524:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <attitude_ctrl+0x498>)
 8005526:	801a      	strh	r2, [r3, #0]
				servoR = 1500 -  s1 - p_rate_pid;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb fbcb 	bl	8000ccc <__aeabi_i2f>
 8005536:	4603      	mov	r3, r0
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb fb10 	bl	8000b60 <__aeabi_fsub>
 8005540:	4603      	mov	r3, r0
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb fe18 	bl	8001178 <__aeabi_f2uiz>
 8005548:	4603      	mov	r3, r0
 800554a:	b29a      	uxth	r2, r3
 800554c:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <attitude_ctrl+0x49c>)
 800554e:	801a      	strh	r2, [r3, #0]
		}

		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 8005550:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <attitude_ctrl+0x460>)
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8005558:	4293      	cmp	r3, r2
 800555a:	f240 809f 	bls.w	800569c <attitude_ctrl+0x58c>
			pitch_rate_pid.i_term = 0;
 800555e:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <attitude_ctrl+0x48c>)
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	60da      	str	r2, [r3, #12]
			roll_rate_pid.i_term = 0;
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <attitude_ctrl+0x480>)
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	e095      	b.n	800569c <attitude_ctrl+0x58c>
 8005570:	200000c0 	.word	0x200000c0
 8005574:	3b03126f 	.word	0x3b03126f
 8005578:	200009fc 	.word	0x200009fc
 800557c:	bdcccccd 	.word	0xbdcccccd
 8005580:	20000a00 	.word	0x20000a00
 8005584:	20000950 	.word	0x20000950
 8005588:	200009f8 	.word	0x200009f8
 800558c:	200009a4 	.word	0x200009a4
 8005590:	2000095c 	.word	0x2000095c
 8005594:	20000954 	.word	0x20000954
 8005598:	200009c8 	.word	0x200009c8
 800559c:	20000980 	.word	0x20000980
 80055a0:	200009f4 	.word	0x200009f4
 80055a4:	44bb8000 	.word	0x44bb8000
 80055a8:	200009ec 	.word	0x200009ec
 80055ac:	200009ee 	.word	0x200009ee
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 80055b0:	4b51      	ldr	r3, [pc, #324]	@ (80056f8 <attitude_ctrl+0x5e8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80055b8:	3304      	adds	r3, #4
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        int s2 = 1500 - ibusChannelData[CH2];
 80055bc:	4b4e      	ldr	r3, [pc, #312]	@ (80056f8 <attitude_ctrl+0x5e8>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80055c4:	3304      	adds	r3, #4
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24

        smooth_ch1 += 0.8*(s1 - smooth_ch1);
 80055c8:	4b4c      	ldr	r3, [pc, #304]	@ (80056fc <attitude_ctrl+0x5ec>)
 80055ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fa ff80 	bl	80004d4 <__aeabi_i2d>
 80055d4:	4604      	mov	r4, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	4b48      	ldr	r3, [pc, #288]	@ (80056fc <attitude_ctrl+0x5ec>)
 80055da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055de:	461a      	mov	r2, r3
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fa ff75 	bl	80004d4 <__aeabi_i2d>
 80055ea:	a341      	add	r3, pc, #260	@ (adr r3, 80056f0 <attitude_ctrl+0x5e0>)
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f7fa ffda 	bl	80005a8 <__aeabi_dmul>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4620      	mov	r0, r4
 80055fa:	4629      	mov	r1, r5
 80055fc:	f7fa fe1e 	bl	800023c <__adddf3>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	f7fb fa7e 	bl	8000b08 <__aeabi_d2iz>
 800560c:	4603      	mov	r3, r0
 800560e:	b21a      	sxth	r2, r3
 8005610:	4b3a      	ldr	r3, [pc, #232]	@ (80056fc <attitude_ctrl+0x5ec>)
 8005612:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8005614:	4b3a      	ldr	r3, [pc, #232]	@ (8005700 <attitude_ctrl+0x5f0>)
 8005616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff5a 	bl	80004d4 <__aeabi_i2d>
 8005620:	4604      	mov	r4, r0
 8005622:	460d      	mov	r5, r1
 8005624:	4b36      	ldr	r3, [pc, #216]	@ (8005700 <attitude_ctrl+0x5f0>)
 8005626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800562a:	461a      	mov	r2, r3
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f7fa ff4f 	bl	80004d4 <__aeabi_i2d>
 8005636:	a32e      	add	r3, pc, #184	@ (adr r3, 80056f0 <attitude_ctrl+0x5e0>)
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fa ffb4 	bl	80005a8 <__aeabi_dmul>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fa fdf8 	bl	800023c <__adddf3>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	f7fb fa58 	bl	8000b08 <__aeabi_d2iz>
 8005658:	4603      	mov	r3, r0
 800565a:	b21a      	sxth	r2, r3
 800565c:	4b28      	ldr	r3, [pc, #160]	@ (8005700 <attitude_ctrl+0x5f0>)
 800565e:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 + smooth_ch2;
 8005660:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <attitude_ctrl+0x5ec>)
 8005662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005666:	b29a      	uxth	r2, r3
 8005668:	4b25      	ldr	r3, [pc, #148]	@ (8005700 <attitude_ctrl+0x5f0>)
 800566a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800566e:	b29b      	uxth	r3, r3
 8005670:	4413      	add	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005678:	b29a      	uxth	r2, r3
 800567a:	4b22      	ldr	r3, [pc, #136]	@ (8005704 <attitude_ctrl+0x5f4>)
 800567c:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 + smooth_ch2;
 800567e:	4b20      	ldr	r3, [pc, #128]	@ (8005700 <attitude_ctrl+0x5f0>)
 8005680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005684:	b29a      	uxth	r2, r3
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <attitude_ctrl+0x5ec>)
 8005688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800568c:	b29b      	uxth	r3, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	b29b      	uxth	r3, r3
 8005692:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005696:	b29a      	uxth	r2, r3
 8005698:	4b1b      	ldr	r3, [pc, #108]	@ (8005708 <attitude_ctrl+0x5f8>)
 800569a:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 800569c:	4b19      	ldr	r3, [pc, #100]	@ (8005704 <attitude_ctrl+0x5f4>)
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80056a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fc81 	bl	8004fb0 <constrain>
 80056ae:	4603      	mov	r3, r0
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	4b14      	ldr	r3, [pc, #80]	@ (8005704 <attitude_ctrl+0x5f4>)
 80056b4:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80056b6:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <attitude_ctrl+0x5f8>)
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80056be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fc74 	bl	8004fb0 <constrain>
 80056c8:	4603      	mov	r3, r0
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <attitude_ctrl+0x5f8>)
 80056ce:	801a      	strh	r2, [r3, #0]

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 80056d0:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <attitude_ctrl+0x5e8>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4a0b      	ldr	r2, [pc, #44]	@ (8005704 <attitude_ctrl+0x5f4>)
 80056d8:	8811      	ldrh	r1, [r2, #0]
 80056da:	4a0b      	ldr	r2, [pc, #44]	@ (8005708 <attitude_ctrl+0x5f8>)
 80056dc:	8812      	ldrh	r2, [r2, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fd ffda 	bl	8003698 <write_pwm_ctrl>
 80056e4:	e000      	b.n	80056e8 <attitude_ctrl+0x5d8>
        return;
 80056e6:	bf00      	nop

}
 80056e8:	3758      	adds	r7, #88	@ 0x58
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bdb0      	pop	{r4, r5, r7, pc}
 80056ee:	bf00      	nop
 80056f0:	9999999a 	.word	0x9999999a
 80056f4:	3fe99999 	.word	0x3fe99999
 80056f8:	200000c0 	.word	0x200000c0
 80056fc:	200009f0 	.word	0x200009f0
 8005700:	200009f2 	.word	0x200009f2
 8005704:	200009ec 	.word	0x200009ec
 8005708:	200009ee 	.word	0x200009ee

0800570c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005710:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <HAL_Init+0x28>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a07      	ldr	r2, [pc, #28]	@ (8005734 <HAL_Init+0x28>)
 8005716:	f043 0310 	orr.w	r3, r3, #16
 800571a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800571c:	2003      	movs	r0, #3
 800571e:	f000 f8f5 	bl	800590c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005722:	200f      	movs	r0, #15
 8005724:	f7fe fe2c 	bl	8004380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005728:	f7fe fdf2 	bl	8004310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40022000 	.word	0x40022000

08005738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HAL_IncTick+0x1c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_IncTick+0x20>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4413      	add	r3, r2
 8005748:	4a03      	ldr	r2, [pc, #12]	@ (8005758 <HAL_IncTick+0x20>)
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000030 	.word	0x20000030
 8005758:	20000a08 	.word	0x20000a08

0800575c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return uwTick;
 8005760:	4b02      	ldr	r3, [pc, #8]	@ (800576c <HAL_GetTick+0x10>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	20000a08 	.word	0x20000a08

08005770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005778:	f7ff fff0 	bl	800575c <HAL_GetTick>
 800577c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d005      	beq.n	8005796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800578a:	4b0a      	ldr	r3, [pc, #40]	@ (80057b4 <HAL_Delay+0x44>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005796:	bf00      	nop
 8005798:	f7ff ffe0 	bl	800575c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d8f7      	bhi.n	8005798 <HAL_Delay+0x28>
  {
  }
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000030 	.word	0x20000030

080057b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c8:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <__NVIC_SetPriorityGrouping+0x44>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057d4:	4013      	ands	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057ea:	4a04      	ldr	r2, [pc, #16]	@ (80057fc <__NVIC_SetPriorityGrouping+0x44>)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	60d3      	str	r3, [r2, #12]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005804:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <__NVIC_GetPriorityGrouping+0x18>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	0a1b      	lsrs	r3, r3, #8
 800580a:	f003 0307 	and.w	r3, r3, #7
}
 800580e:	4618      	mov	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	e000ed00 	.word	0xe000ed00

0800581c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582a:	2b00      	cmp	r3, #0
 800582c:	db0b      	blt.n	8005846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	f003 021f 	and.w	r2, r3, #31
 8005834:	4906      	ldr	r1, [pc, #24]	@ (8005850 <__NVIC_EnableIRQ+0x34>)
 8005836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2001      	movs	r0, #1
 800583e:	fa00 f202 	lsl.w	r2, r0, r2
 8005842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005864:	2b00      	cmp	r3, #0
 8005866:	db0a      	blt.n	800587e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	490c      	ldr	r1, [pc, #48]	@ (80058a0 <__NVIC_SetPriority+0x4c>)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	440b      	add	r3, r1
 8005878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800587c:	e00a      	b.n	8005894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4908      	ldr	r1, [pc, #32]	@ (80058a4 <__NVIC_SetPriority+0x50>)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3b04      	subs	r3, #4
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	440b      	add	r3, r1
 8005892:	761a      	strb	r2, [r3, #24]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000e100 	.word	0xe000e100
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	@ 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0307 	rsb	r3, r3, #7
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf28      	it	cs
 80058c6:	2304      	movcs	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d902      	bls.n	80058d8 <NVIC_EncodePriority+0x30>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b03      	subs	r3, #3
 80058d6:	e000      	b.n	80058da <NVIC_EncodePriority+0x32>
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	401a      	ands	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	4313      	orrs	r3, r2
         );
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	@ 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff4f 	bl	80057b8 <__NVIC_SetPriorityGrouping>
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	4603      	mov	r3, r0
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005934:	f7ff ff64 	bl	8005800 <__NVIC_GetPriorityGrouping>
 8005938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff ffb2 	bl	80058a8 <NVIC_EncodePriority>
 8005944:	4602      	mov	r2, r0
 8005946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff81 	bl	8005854 <__NVIC_SetPriority>
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	4603      	mov	r3, r0
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff ff57 	bl	800581c <__NVIC_EnableIRQ>
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d008      	beq.n	80059a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2204      	movs	r2, #4
 8005992:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e020      	b.n	80059e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 020e 	bic.w	r2, r2, #14
 80059ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f202 	lsl.w	r2, r1, r2
 80059ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d005      	beq.n	8005a10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
 8005a0e:	e0d6      	b.n	8005bbe <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 020e 	bic.w	r2, r2, #14
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	4b64      	ldr	r3, [pc, #400]	@ (8005bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d958      	bls.n	8005aee <HAL_DMA_Abort_IT+0x102>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a62      	ldr	r2, [pc, #392]	@ (8005bcc <HAL_DMA_Abort_IT+0x1e0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d04f      	beq.n	8005ae6 <HAL_DMA_Abort_IT+0xfa>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a61      	ldr	r2, [pc, #388]	@ (8005bd0 <HAL_DMA_Abort_IT+0x1e4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d048      	beq.n	8005ae2 <HAL_DMA_Abort_IT+0xf6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a5f      	ldr	r2, [pc, #380]	@ (8005bd4 <HAL_DMA_Abort_IT+0x1e8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d040      	beq.n	8005adc <HAL_DMA_Abort_IT+0xf0>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd8 <HAL_DMA_Abort_IT+0x1ec>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d038      	beq.n	8005ad6 <HAL_DMA_Abort_IT+0xea>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5c      	ldr	r2, [pc, #368]	@ (8005bdc <HAL_DMA_Abort_IT+0x1f0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d030      	beq.n	8005ad0 <HAL_DMA_Abort_IT+0xe4>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a5b      	ldr	r2, [pc, #364]	@ (8005be0 <HAL_DMA_Abort_IT+0x1f4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d028      	beq.n	8005aca <HAL_DMA_Abort_IT+0xde>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a52      	ldr	r2, [pc, #328]	@ (8005bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d020      	beq.n	8005ac4 <HAL_DMA_Abort_IT+0xd8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a57      	ldr	r2, [pc, #348]	@ (8005be4 <HAL_DMA_Abort_IT+0x1f8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d019      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0xd4>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a55      	ldr	r2, [pc, #340]	@ (8005be8 <HAL_DMA_Abort_IT+0x1fc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d012      	beq.n	8005abc <HAL_DMA_Abort_IT+0xd0>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a54      	ldr	r2, [pc, #336]	@ (8005bec <HAL_DMA_Abort_IT+0x200>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_DMA_Abort_IT+0xca>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a52      	ldr	r2, [pc, #328]	@ (8005bf0 <HAL_DMA_Abort_IT+0x204>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d102      	bne.n	8005ab0 <HAL_DMA_Abort_IT+0xc4>
 8005aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005aae:	e01b      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ab4:	e018      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aba:	e015      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005abc:	2310      	movs	r3, #16
 8005abe:	e013      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e011      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ac8:	e00e      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005aca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005ace:	e00b      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ad0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ad4:	e008      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ada:	e005      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005adc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ae0:	e002      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ae2:	2310      	movs	r3, #16
 8005ae4:	e000      	b.n	8005ae8 <HAL_DMA_Abort_IT+0xfc>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4a42      	ldr	r2, [pc, #264]	@ (8005bf4 <HAL_DMA_Abort_IT+0x208>)
 8005aea:	6053      	str	r3, [r2, #4]
 8005aec:	e057      	b.n	8005b9e <HAL_DMA_Abort_IT+0x1b2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a36      	ldr	r2, [pc, #216]	@ (8005bcc <HAL_DMA_Abort_IT+0x1e0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d04f      	beq.n	8005b98 <HAL_DMA_Abort_IT+0x1ac>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a34      	ldr	r2, [pc, #208]	@ (8005bd0 <HAL_DMA_Abort_IT+0x1e4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d048      	beq.n	8005b94 <HAL_DMA_Abort_IT+0x1a8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a33      	ldr	r2, [pc, #204]	@ (8005bd4 <HAL_DMA_Abort_IT+0x1e8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d040      	beq.n	8005b8e <HAL_DMA_Abort_IT+0x1a2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a31      	ldr	r2, [pc, #196]	@ (8005bd8 <HAL_DMA_Abort_IT+0x1ec>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d038      	beq.n	8005b88 <HAL_DMA_Abort_IT+0x19c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a30      	ldr	r2, [pc, #192]	@ (8005bdc <HAL_DMA_Abort_IT+0x1f0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d030      	beq.n	8005b82 <HAL_DMA_Abort_IT+0x196>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2e      	ldr	r2, [pc, #184]	@ (8005be0 <HAL_DMA_Abort_IT+0x1f4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d028      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x190>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a26      	ldr	r2, [pc, #152]	@ (8005bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d020      	beq.n	8005b76 <HAL_DMA_Abort_IT+0x18a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2a      	ldr	r2, [pc, #168]	@ (8005be4 <HAL_DMA_Abort_IT+0x1f8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d019      	beq.n	8005b72 <HAL_DMA_Abort_IT+0x186>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a29      	ldr	r2, [pc, #164]	@ (8005be8 <HAL_DMA_Abort_IT+0x1fc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d012      	beq.n	8005b6e <HAL_DMA_Abort_IT+0x182>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a27      	ldr	r2, [pc, #156]	@ (8005bec <HAL_DMA_Abort_IT+0x200>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00a      	beq.n	8005b68 <HAL_DMA_Abort_IT+0x17c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a26      	ldr	r2, [pc, #152]	@ (8005bf0 <HAL_DMA_Abort_IT+0x204>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d102      	bne.n	8005b62 <HAL_DMA_Abort_IT+0x176>
 8005b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b60:	e01b      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b66:	e018      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b6c:	e015      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b6e:	2310      	movs	r3, #16
 8005b70:	e013      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e011      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b7a:	e00e      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005b80:	e00b      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b86:	e008      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b8c:	e005      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b92:	e002      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b94:	2310      	movs	r3, #16
 8005b96:	e000      	b.n	8005b9a <HAL_DMA_Abort_IT+0x1ae>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <HAL_DMA_Abort_IT+0x20c>)
 8005b9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
    } 
  }
  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40020080 	.word	0x40020080
 8005bcc:	40020008 	.word	0x40020008
 8005bd0:	4002001c 	.word	0x4002001c
 8005bd4:	40020030 	.word	0x40020030
 8005bd8:	40020044 	.word	0x40020044
 8005bdc:	40020058 	.word	0x40020058
 8005be0:	4002006c 	.word	0x4002006c
 8005be4:	40020408 	.word	0x40020408
 8005be8:	4002041c 	.word	0x4002041c
 8005bec:	40020430 	.word	0x40020430
 8005bf0:	40020444 	.word	0x40020444
 8005bf4:	40020400 	.word	0x40020400
 8005bf8:	40020000 	.word	0x40020000

08005bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b08b      	sub	sp, #44	@ 0x2c
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c0e:	e179      	b.n	8005f04 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005c10:	2201      	movs	r2, #1
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	4013      	ands	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	f040 8168 	bne.w	8005efe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4a96      	ldr	r2, [pc, #600]	@ (8005e8c <HAL_GPIO_Init+0x290>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d05e      	beq.n	8005cf6 <HAL_GPIO_Init+0xfa>
 8005c38:	4a94      	ldr	r2, [pc, #592]	@ (8005e8c <HAL_GPIO_Init+0x290>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d875      	bhi.n	8005d2a <HAL_GPIO_Init+0x12e>
 8005c3e:	4a94      	ldr	r2, [pc, #592]	@ (8005e90 <HAL_GPIO_Init+0x294>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d058      	beq.n	8005cf6 <HAL_GPIO_Init+0xfa>
 8005c44:	4a92      	ldr	r2, [pc, #584]	@ (8005e90 <HAL_GPIO_Init+0x294>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d86f      	bhi.n	8005d2a <HAL_GPIO_Init+0x12e>
 8005c4a:	4a92      	ldr	r2, [pc, #584]	@ (8005e94 <HAL_GPIO_Init+0x298>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d052      	beq.n	8005cf6 <HAL_GPIO_Init+0xfa>
 8005c50:	4a90      	ldr	r2, [pc, #576]	@ (8005e94 <HAL_GPIO_Init+0x298>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d869      	bhi.n	8005d2a <HAL_GPIO_Init+0x12e>
 8005c56:	4a90      	ldr	r2, [pc, #576]	@ (8005e98 <HAL_GPIO_Init+0x29c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d04c      	beq.n	8005cf6 <HAL_GPIO_Init+0xfa>
 8005c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8005e98 <HAL_GPIO_Init+0x29c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d863      	bhi.n	8005d2a <HAL_GPIO_Init+0x12e>
 8005c62:	4a8e      	ldr	r2, [pc, #568]	@ (8005e9c <HAL_GPIO_Init+0x2a0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d046      	beq.n	8005cf6 <HAL_GPIO_Init+0xfa>
 8005c68:	4a8c      	ldr	r2, [pc, #560]	@ (8005e9c <HAL_GPIO_Init+0x2a0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d85d      	bhi.n	8005d2a <HAL_GPIO_Init+0x12e>
 8005c6e:	2b12      	cmp	r3, #18
 8005c70:	d82a      	bhi.n	8005cc8 <HAL_GPIO_Init+0xcc>
 8005c72:	2b12      	cmp	r3, #18
 8005c74:	d859      	bhi.n	8005d2a <HAL_GPIO_Init+0x12e>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <HAL_GPIO_Init+0x80>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005cf7 	.word	0x08005cf7
 8005c80:	08005cd1 	.word	0x08005cd1
 8005c84:	08005ce3 	.word	0x08005ce3
 8005c88:	08005d25 	.word	0x08005d25
 8005c8c:	08005d2b 	.word	0x08005d2b
 8005c90:	08005d2b 	.word	0x08005d2b
 8005c94:	08005d2b 	.word	0x08005d2b
 8005c98:	08005d2b 	.word	0x08005d2b
 8005c9c:	08005d2b 	.word	0x08005d2b
 8005ca0:	08005d2b 	.word	0x08005d2b
 8005ca4:	08005d2b 	.word	0x08005d2b
 8005ca8:	08005d2b 	.word	0x08005d2b
 8005cac:	08005d2b 	.word	0x08005d2b
 8005cb0:	08005d2b 	.word	0x08005d2b
 8005cb4:	08005d2b 	.word	0x08005d2b
 8005cb8:	08005d2b 	.word	0x08005d2b
 8005cbc:	08005d2b 	.word	0x08005d2b
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	4a75      	ldr	r2, [pc, #468]	@ (8005ea0 <HAL_GPIO_Init+0x2a4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005cce:	e02c      	b.n	8005d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	623b      	str	r3, [r7, #32]
          break;
 8005cd6:	e029      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	623b      	str	r3, [r7, #32]
          break;
 8005ce0:	e024      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	623b      	str	r3, [r7, #32]
          break;
 8005cea:	e01f      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	623b      	str	r3, [r7, #32]
          break;
 8005cf4:	e01a      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005cfe:	2304      	movs	r3, #4
 8005d00:	623b      	str	r3, [r7, #32]
          break;
 8005d02:	e013      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	611a      	str	r2, [r3, #16]
          break;
 8005d16:	e009      	b.n	8005d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d18:	2308      	movs	r3, #8
 8005d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	615a      	str	r2, [r3, #20]
          break;
 8005d22:	e003      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005d24:	2300      	movs	r3, #0
 8005d26:	623b      	str	r3, [r7, #32]
          break;
 8005d28:	e000      	b.n	8005d2c <HAL_GPIO_Init+0x130>
          break;
 8005d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2bff      	cmp	r3, #255	@ 0xff
 8005d30:	d801      	bhi.n	8005d36 <HAL_GPIO_Init+0x13a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	e001      	b.n	8005d3a <HAL_GPIO_Init+0x13e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2bff      	cmp	r3, #255	@ 0xff
 8005d40:	d802      	bhi.n	8005d48 <HAL_GPIO_Init+0x14c>
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	e002      	b.n	8005d4e <HAL_GPIO_Init+0x152>
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	3b08      	subs	r3, #8
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	210f      	movs	r1, #15
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	401a      	ands	r2, r3
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80c1 	beq.w	8005efe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d7c:	4b49      	ldr	r3, [pc, #292]	@ (8005ea4 <HAL_GPIO_Init+0x2a8>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	4a48      	ldr	r2, [pc, #288]	@ (8005ea4 <HAL_GPIO_Init+0x2a8>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	6193      	str	r3, [r2, #24]
 8005d88:	4b46      	ldr	r3, [pc, #280]	@ (8005ea4 <HAL_GPIO_Init+0x2a8>)
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005d94:	4a44      	ldr	r2, [pc, #272]	@ (8005ea8 <HAL_GPIO_Init+0x2ac>)
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	089b      	lsrs	r3, r3, #2
 8005d9a:	3302      	adds	r3, #2
 8005d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	220f      	movs	r2, #15
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3c      	ldr	r2, [pc, #240]	@ (8005eac <HAL_GPIO_Init+0x2b0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01f      	beq.n	8005e00 <HAL_GPIO_Init+0x204>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3b      	ldr	r2, [pc, #236]	@ (8005eb0 <HAL_GPIO_Init+0x2b4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d019      	beq.n	8005dfc <HAL_GPIO_Init+0x200>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3a      	ldr	r2, [pc, #232]	@ (8005eb4 <HAL_GPIO_Init+0x2b8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <HAL_GPIO_Init+0x1fc>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a39      	ldr	r2, [pc, #228]	@ (8005eb8 <HAL_GPIO_Init+0x2bc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00d      	beq.n	8005df4 <HAL_GPIO_Init+0x1f8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a38      	ldr	r2, [pc, #224]	@ (8005ebc <HAL_GPIO_Init+0x2c0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <HAL_GPIO_Init+0x1f4>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a37      	ldr	r2, [pc, #220]	@ (8005ec0 <HAL_GPIO_Init+0x2c4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d101      	bne.n	8005dec <HAL_GPIO_Init+0x1f0>
 8005de8:	2305      	movs	r3, #5
 8005dea:	e00a      	b.n	8005e02 <HAL_GPIO_Init+0x206>
 8005dec:	2306      	movs	r3, #6
 8005dee:	e008      	b.n	8005e02 <HAL_GPIO_Init+0x206>
 8005df0:	2304      	movs	r3, #4
 8005df2:	e006      	b.n	8005e02 <HAL_GPIO_Init+0x206>
 8005df4:	2303      	movs	r3, #3
 8005df6:	e004      	b.n	8005e02 <HAL_GPIO_Init+0x206>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e002      	b.n	8005e02 <HAL_GPIO_Init+0x206>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_GPIO_Init+0x206>
 8005e00:	2300      	movs	r3, #0
 8005e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e04:	f002 0203 	and.w	r2, r2, #3
 8005e08:	0092      	lsls	r2, r2, #2
 8005e0a:	4093      	lsls	r3, r2
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005e12:	4925      	ldr	r1, [pc, #148]	@ (8005ea8 <HAL_GPIO_Init+0x2ac>)
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	089b      	lsrs	r3, r3, #2
 8005e18:	3302      	adds	r3, #2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d006      	beq.n	8005e3a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	4924      	ldr	r1, [pc, #144]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]
 8005e38:	e006      	b.n	8005e48 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e3a:	4b22      	ldr	r3, [pc, #136]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	4920      	ldr	r1, [pc, #128]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e54:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	491a      	ldr	r1, [pc, #104]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60cb      	str	r3, [r1, #12]
 8005e60:	e006      	b.n	8005e70 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e62:	4b18      	ldr	r3, [pc, #96]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	4916      	ldr	r1, [pc, #88]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d025      	beq.n	8005ec8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005e7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	4910      	ldr	r1, [pc, #64]	@ (8005ec4 <HAL_GPIO_Init+0x2c8>)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	604b      	str	r3, [r1, #4]
 8005e88:	e025      	b.n	8005ed6 <HAL_GPIO_Init+0x2da>
 8005e8a:	bf00      	nop
 8005e8c:	10320000 	.word	0x10320000
 8005e90:	10310000 	.word	0x10310000
 8005e94:	10220000 	.word	0x10220000
 8005e98:	10210000 	.word	0x10210000
 8005e9c:	10120000 	.word	0x10120000
 8005ea0:	10110000 	.word	0x10110000
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010800 	.word	0x40010800
 8005eb0:	40010c00 	.word	0x40010c00
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40011400 	.word	0x40011400
 8005ebc:	40011800 	.word	0x40011800
 8005ec0:	40011c00 	.word	0x40011c00
 8005ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005ec8:	4b15      	ldr	r3, [pc, #84]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	4913      	ldr	r1, [pc, #76]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	490e      	ldr	r1, [pc, #56]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	600b      	str	r3, [r1, #0]
 8005eee:	e006      	b.n	8005efe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	4909      	ldr	r1, [pc, #36]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	3301      	adds	r3, #1
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f47f ae7e 	bne.w	8005c10 <HAL_GPIO_Init+0x14>
  }
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	372c      	adds	r7, #44	@ 0x2c
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	40010400 	.word	0x40010400

08005f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	887b      	ldrh	r3, [r7, #2]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
 8005f40:	e001      	b.n	8005f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	807b      	strh	r3, [r7, #2]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f62:	787b      	ldrb	r3, [r7, #1]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f68:	887a      	ldrh	r2, [r7, #2]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f6e:	e003      	b.n	8005f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f70:	887b      	ldrh	r3, [r7, #2]
 8005f72:	041a      	lsls	r2, r3, #16
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	611a      	str	r2, [r3, #16]
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	041a      	lsls	r2, r3, #16
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	43d9      	mvns	r1, r3
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e12b      	b.n	800621e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fe f824 	bl	8004028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	@ 0x24
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006018:	f002 f9d8 	bl	80083cc <HAL_RCC_GetPCLK1Freq>
 800601c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4a81      	ldr	r2, [pc, #516]	@ (8006228 <HAL_I2C_Init+0x274>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d807      	bhi.n	8006038 <HAL_I2C_Init+0x84>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a80      	ldr	r2, [pc, #512]	@ (800622c <HAL_I2C_Init+0x278>)
 800602c:	4293      	cmp	r3, r2
 800602e:	bf94      	ite	ls
 8006030:	2301      	movls	r3, #1
 8006032:	2300      	movhi	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	e006      	b.n	8006046 <HAL_I2C_Init+0x92>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a7d      	ldr	r2, [pc, #500]	@ (8006230 <HAL_I2C_Init+0x27c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	bf94      	ite	ls
 8006040:	2301      	movls	r3, #1
 8006042:	2300      	movhi	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0e7      	b.n	800621e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a78      	ldr	r2, [pc, #480]	@ (8006234 <HAL_I2C_Init+0x280>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	0c9b      	lsrs	r3, r3, #18
 8006058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4a6a      	ldr	r2, [pc, #424]	@ (8006228 <HAL_I2C_Init+0x274>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d802      	bhi.n	8006088 <HAL_I2C_Init+0xd4>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3301      	adds	r3, #1
 8006086:	e009      	b.n	800609c <HAL_I2C_Init+0xe8>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	4a69      	ldr	r2, [pc, #420]	@ (8006238 <HAL_I2C_Init+0x284>)
 8006094:	fba2 2303 	umull	r2, r3, r2, r3
 8006098:	099b      	lsrs	r3, r3, #6
 800609a:	3301      	adds	r3, #1
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80060ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	495c      	ldr	r1, [pc, #368]	@ (8006228 <HAL_I2C_Init+0x274>)
 80060b8:	428b      	cmp	r3, r1
 80060ba:	d819      	bhi.n	80060f0 <HAL_I2C_Init+0x13c>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	1e59      	subs	r1, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80060d0:	400b      	ands	r3, r1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_I2C_Init+0x138>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1e59      	subs	r1, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80060e4:	3301      	adds	r3, #1
 80060e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ea:	e051      	b.n	8006190 <HAL_I2C_Init+0x1dc>
 80060ec:	2304      	movs	r3, #4
 80060ee:	e04f      	b.n	8006190 <HAL_I2C_Init+0x1dc>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d111      	bne.n	800611c <HAL_I2C_Init+0x168>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1e58      	subs	r0, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	440b      	add	r3, r1
 8006106:	fbb0 f3f3 	udiv	r3, r0, r3
 800610a:	3301      	adds	r3, #1
 800610c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e012      	b.n	8006142 <HAL_I2C_Init+0x18e>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1e58      	subs	r0, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6859      	ldr	r1, [r3, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	0099      	lsls	r1, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006132:	3301      	adds	r3, #1
 8006134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_I2C_Init+0x196>
 8006146:	2301      	movs	r3, #1
 8006148:	e022      	b.n	8006190 <HAL_I2C_Init+0x1dc>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10e      	bne.n	8006170 <HAL_I2C_Init+0x1bc>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1e58      	subs	r0, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6859      	ldr	r1, [r3, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	440b      	add	r3, r1
 8006160:	fbb0 f3f3 	udiv	r3, r0, r3
 8006164:	3301      	adds	r3, #1
 8006166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616e:	e00f      	b.n	8006190 <HAL_I2C_Init+0x1dc>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1e58      	subs	r0, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	0099      	lsls	r1, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	fbb0 f3f3 	udiv	r3, r0, r3
 8006186:	3301      	adds	r3, #1
 8006188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	6809      	ldr	r1, [r1, #0]
 8006194:	4313      	orrs	r3, r2
 8006196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69da      	ldr	r2, [r3, #28]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6911      	ldr	r1, [r2, #16]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68d2      	ldr	r2, [r2, #12]
 80061ca:	4311      	orrs	r1, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	000186a0 	.word	0x000186a0
 800622c:	001e847f 	.word	0x001e847f
 8006230:	003d08ff 	.word	0x003d08ff
 8006234:	431bde83 	.word	0x431bde83
 8006238:	10624dd3 	.word	0x10624dd3

0800623c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	461a      	mov	r2, r3
 8006248:	460b      	mov	r3, r1
 800624a:	817b      	strh	r3, [r7, #10]
 800624c:	4613      	mov	r3, r2
 800624e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006250:	f7ff fa84 	bl	800575c <HAL_GetTick>
 8006254:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b20      	cmp	r3, #32
 8006260:	f040 80e0 	bne.w	8006424 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	2319      	movs	r3, #25
 800626a:	2201      	movs	r2, #1
 800626c:	4970      	ldr	r1, [pc, #448]	@ (8006430 <HAL_I2C_Master_Transmit+0x1f4>)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f001 faac 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
 800627c:	e0d3      	b.n	8006426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_I2C_Master_Transmit+0x50>
 8006288:	2302      	movs	r3, #2
 800628a:	e0cc      	b.n	8006426 <HAL_I2C_Master_Transmit+0x1ea>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d007      	beq.n	80062b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2221      	movs	r2, #33	@ 0x21
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2210      	movs	r2, #16
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	893a      	ldrh	r2, [r7, #8]
 80062e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a50      	ldr	r2, [pc, #320]	@ (8006434 <HAL_I2C_Master_Transmit+0x1f8>)
 80062f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062f4:	8979      	ldrh	r1, [r7, #10]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 ff98 	bl	8007230 <I2C_MasterRequestWrite>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e08d      	b.n	8006426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006320:	e066      	b.n	80063f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	6a39      	ldr	r1, [r7, #32]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f001 fb6a 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	2b04      	cmp	r3, #4
 8006338:	d107      	bne.n	800634a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06b      	b.n	8006426 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b04      	cmp	r3, #4
 800638a:	d11b      	bne.n	80063c4 <HAL_I2C_Master_Transmit+0x188>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	781a      	ldrb	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	6a39      	ldr	r1, [r7, #32]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f001 fb61 	bl	8007a90 <I2C_WaitOnBTFFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d107      	bne.n	80063ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e01a      	b.n	8006426 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d194      	bne.n	8006322 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	00100002 	.word	0x00100002
 8006434:	ffff0000 	.word	0xffff0000

08006438 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08c      	sub	sp, #48	@ 0x30
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	461a      	mov	r2, r3
 8006444:	460b      	mov	r3, r1
 8006446:	817b      	strh	r3, [r7, #10]
 8006448:	4613      	mov	r3, r2
 800644a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006450:	f7ff f984 	bl	800575c <HAL_GetTick>
 8006454:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b20      	cmp	r3, #32
 8006460:	f040 824b 	bne.w	80068fa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2319      	movs	r3, #25
 800646a:	2201      	movs	r2, #1
 800646c:	497f      	ldr	r1, [pc, #508]	@ (800666c <HAL_I2C_Master_Receive+0x234>)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f001 f9ac 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800647a:	2302      	movs	r3, #2
 800647c:	e23e      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_I2C_Master_Receive+0x54>
 8006488:	2302      	movs	r3, #2
 800648a:	e237      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d007      	beq.n	80064b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0201 	orr.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2222      	movs	r2, #34	@ 0x22
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2210      	movs	r2, #16
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	893a      	ldrh	r2, [r7, #8]
 80064e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a5f      	ldr	r2, [pc, #380]	@ (8006670 <HAL_I2C_Master_Receive+0x238>)
 80064f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064f4:	8979      	ldrh	r1, [r7, #10]
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 ff1a 	bl	8007334 <I2C_MasterRequestRead>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e1f8      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	d113      	bne.n	800653a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	61fb      	str	r3, [r7, #28]
 8006526:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e1cc      	b.n	80068d4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653e:	2b01      	cmp	r3, #1
 8006540:	d11e      	bne.n	8006580 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006550:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006552:	b672      	cpsid	i
}
 8006554:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800657c:	b662      	cpsie	i
}
 800657e:	e035      	b.n	80065ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006584:	2b02      	cmp	r3, #2
 8006586:	d11e      	bne.n	80065c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006598:	b672      	cpsid	i
}
 800659a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80065c2:	b662      	cpsie	i
}
 80065c4:	e012      	b.n	80065ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80065ec:	e172      	b.n	80068d4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	f200 811f 	bhi.w	8006836 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d123      	bne.n	8006648 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006602:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f001 fa8b 	bl	8007b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e173      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006646:	e145      	b.n	80068d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664c:	2b02      	cmp	r3, #2
 800664e:	d152      	bne.n	80066f6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	4906      	ldr	r1, [pc, #24]	@ (8006674 <HAL_I2C_Master_Receive+0x23c>)
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 f8b6 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e148      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
 800666a:	bf00      	nop
 800666c:	00100002 	.word	0x00100002
 8006670:	ffff0000 	.word	0xffff0000
 8006674:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006678:	b672      	cpsid	i
}
 800667a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80066be:	b662      	cpsie	i
}
 80066c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066f4:	e0ee      	b.n	80068d4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	2200      	movs	r2, #0
 80066fe:	4981      	ldr	r1, [pc, #516]	@ (8006904 <HAL_I2C_Master_Receive+0x4cc>)
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f001 f863 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0f5      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006720:	b672      	cpsid	i
}
 8006722:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006756:	4b6c      	ldr	r3, [pc, #432]	@ (8006908 <HAL_I2C_Master_Receive+0x4d0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	08db      	lsrs	r3, r3, #3
 800675c:	4a6b      	ldr	r2, [pc, #428]	@ (800690c <HAL_I2C_Master_Receive+0x4d4>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0a1a      	lsrs	r2, r3, #8
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	00da      	lsls	r2, r3, #3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3b01      	subs	r3, #1
 8006774:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d118      	bne.n	80067ae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	f043 0220 	orr.w	r2, r3, #32
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800679e:	b662      	cpsie	i
}
 80067a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e0a6      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d1d9      	bne.n	8006770 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80067fe:	b662      	cpsie	i
}
 8006800:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006834:	e04e      	b.n	80068d4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006838:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f001 f970 	bl	8007b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e058      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b04      	cmp	r3, #4
 8006888:	d124      	bne.n	80068d4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688e:	2b03      	cmp	r3, #3
 8006890:	d107      	bne.n	80068a2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f47f ae88 	bne.w	80065ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e000      	b.n	80068fc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3728      	adds	r7, #40	@ 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	00010004 	.word	0x00010004
 8006908:	20000028 	.word	0x20000028
 800690c:	14f8b589 	.word	0x14f8b589

08006910 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4603      	mov	r3, r0
 8006920:	817b      	strh	r3, [r7, #10]
 8006922:	460b      	mov	r3, r1
 8006924:	813b      	strh	r3, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800692a:	f7fe ff17 	bl	800575c <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b20      	cmp	r3, #32
 800693a:	f040 80d9 	bne.w	8006af0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	2319      	movs	r3, #25
 8006944:	2201      	movs	r2, #1
 8006946:	496d      	ldr	r1, [pc, #436]	@ (8006afc <HAL_I2C_Mem_Write+0x1ec>)
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 ff3f 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006954:	2302      	movs	r3, #2
 8006956:	e0cc      	b.n	8006af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_I2C_Mem_Write+0x56>
 8006962:	2302      	movs	r3, #2
 8006964:	e0c5      	b.n	8006af2 <HAL_I2C_Mem_Write+0x1e2>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d007      	beq.n	800698c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800699a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2221      	movs	r2, #33	@ 0x21
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2240      	movs	r2, #64	@ 0x40
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a3a      	ldr	r2, [r7, #32]
 80069b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a4d      	ldr	r2, [pc, #308]	@ (8006b00 <HAL_I2C_Mem_Write+0x1f0>)
 80069cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069ce:	88f8      	ldrh	r0, [r7, #6]
 80069d0:	893a      	ldrh	r2, [r7, #8]
 80069d2:	8979      	ldrh	r1, [r7, #10]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4603      	mov	r3, r0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fd76 	bl	80074d0 <I2C_RequestMemoryWrite>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d052      	beq.n	8006a90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e081      	b.n	8006af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 f804 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00d      	beq.n	8006a1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d107      	bne.n	8006a16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e06b      	b.n	8006af2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d11b      	bne.n	8006a90 <HAL_I2C_Mem_Write+0x180>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d017      	beq.n	8006a90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1aa      	bne.n	80069ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fff7 	bl	8007a90 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00d      	beq.n	8006ac4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d107      	bne.n	8006ac0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006abe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e016      	b.n	8006af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e000      	b.n	8006af2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
  }
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	00100002 	.word	0x00100002
 8006b00:	ffff0000 	.word	0xffff0000

08006b04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	@ 0x30
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	817b      	strh	r3, [r7, #10]
 8006b16:	460b      	mov	r3, r1
 8006b18:	813b      	strh	r3, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b22:	f7fe fe1b 	bl	800575c <HAL_GetTick>
 8006b26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	f040 8244 	bne.w	8006fbe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	2319      	movs	r3, #25
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4982      	ldr	r1, [pc, #520]	@ (8006d48 <HAL_I2C_Mem_Read+0x244>)
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fe43 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e237      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_I2C_Mem_Read+0x5a>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e230      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d007      	beq.n	8006b84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2222      	movs	r2, #34	@ 0x22
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2240      	movs	r2, #64	@ 0x40
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a62      	ldr	r2, [pc, #392]	@ (8006d4c <HAL_I2C_Mem_Read+0x248>)
 8006bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bc6:	88f8      	ldrh	r0, [r7, #6]
 8006bc8:	893a      	ldrh	r2, [r7, #8]
 8006bca:	8979      	ldrh	r1, [r7, #10]
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fd10 	bl	80075fc <I2C_RequestMemoryRead>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e1ec      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d113      	bne.n	8006c16 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e1c0      	b.n	8006f98 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d11e      	bne.n	8006c5c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c2e:	b672      	cpsid	i
}
 8006c30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c58:	b662      	cpsie	i
}
 8006c5a:	e035      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d11e      	bne.n	8006ca2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c74:	b672      	cpsid	i
}
 8006c76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c9e:	b662      	cpsie	i
}
 8006ca0:	e012      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cb0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006cc8:	e166      	b.n	8006f98 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	f200 811f 	bhi.w	8006f12 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d123      	bne.n	8006d24 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 ff1d 	bl	8007b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e167      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d22:	e139      	b.n	8006f98 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d152      	bne.n	8006dd2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	2200      	movs	r2, #0
 8006d34:	4906      	ldr	r1, [pc, #24]	@ (8006d50 <HAL_I2C_Mem_Read+0x24c>)
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fd48 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e13c      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
 8006d46:	bf00      	nop
 8006d48:	00100002 	.word	0x00100002
 8006d4c:	ffff0000 	.word	0xffff0000
 8006d50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006d54:	b672      	cpsid	i
}
 8006d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d9a:	b662      	cpsie	i
}
 8006d9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dd0:	e0e2      	b.n	8006f98 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	2200      	movs	r2, #0
 8006dda:	497b      	ldr	r1, [pc, #492]	@ (8006fc8 <HAL_I2C_Mem_Read+0x4c4>)
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fcf5 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0e9      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dfc:	b672      	cpsid	i
}
 8006dfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e32:	4b66      	ldr	r3, [pc, #408]	@ (8006fcc <HAL_I2C_Mem_Read+0x4c8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	08db      	lsrs	r3, r3, #3
 8006e38:	4a65      	ldr	r2, [pc, #404]	@ (8006fd0 <HAL_I2C_Mem_Read+0x4cc>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0a1a      	lsrs	r2, r3, #8
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	00da      	lsls	r2, r3, #3
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d118      	bne.n	8006e8a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e72:	f043 0220 	orr.w	r2, r3, #32
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006e7a:	b662      	cpsie	i
}
 8006e7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e09a      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d1d9      	bne.n	8006e4c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006eda:	b662      	cpsie	i
}
 8006edc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f10:	e042      	b.n	8006f98 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fe02 	bl	8007b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e04c      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d118      	bne.n	8006f98 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f47f ae94 	bne.w	8006cca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e000      	b.n	8006fc0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
  }
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3728      	adds	r7, #40	@ 0x28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	00010004 	.word	0x00010004
 8006fcc:	20000028 	.word	0x20000028
 8006fd0:	14f8b589 	.word	0x14f8b589

08006fd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006fe4:	f7fe fbba 	bl	800575c <HAL_GetTick>
 8006fe8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	f040 8111 	bne.w	800721e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2319      	movs	r3, #25
 8007002:	2201      	movs	r2, #1
 8007004:	4988      	ldr	r1, [pc, #544]	@ (8007228 <HAL_I2C_IsDeviceReady+0x254>)
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fbe0 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007012:	2302      	movs	r3, #2
 8007014:	e104      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d101      	bne.n	8007024 <HAL_I2C_IsDeviceReady+0x50>
 8007020:	2302      	movs	r3, #2
 8007022:	e0fd      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b01      	cmp	r3, #1
 8007038:	d007      	beq.n	800704a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2224      	movs	r2, #36	@ 0x24
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4a70      	ldr	r2, [pc, #448]	@ (800722c <HAL_I2C_IsDeviceReady+0x258>)
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800707c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fb9e 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00d      	beq.n	80070b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a4:	d103      	bne.n	80070ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e0b6      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070b2:	897b      	ldrh	r3, [r7, #10]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80070c2:	f7fe fb4b 	bl	800575c <HAL_GetTick>
 80070c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	bf0c      	ite	eq
 80070d6:	2301      	moveq	r3, #1
 80070d8:	2300      	movne	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80070f6:	e025      	b.n	8007144 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070f8:	f7fe fb30 	bl	800575c <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d302      	bcc.n	800710e <HAL_I2C_IsDeviceReady+0x13a>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	22a0      	movs	r2, #160	@ 0xa0
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b02      	cmp	r3, #2
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800713a:	bf0c      	ite	eq
 800713c:	2301      	moveq	r3, #1
 800713e:	2300      	movne	r3, #0
 8007140:	b2db      	uxtb	r3, r3
 8007142:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2ba0      	cmp	r3, #160	@ 0xa0
 800714e:	d005      	beq.n	800715c <HAL_I2C_IsDeviceReady+0x188>
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d102      	bne.n	800715c <HAL_I2C_IsDeviceReady+0x188>
 8007156:	7dbb      	ldrb	r3, [r7, #22]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0cd      	beq.n	80070f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d129      	bne.n	80071c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007180:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	2319      	movs	r3, #25
 800719e:	2201      	movs	r2, #1
 80071a0:	4921      	ldr	r1, [pc, #132]	@ (8007228 <HAL_I2C_IsDeviceReady+0x254>)
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fb12 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e036      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e02c      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	2319      	movs	r3, #25
 80071e6:	2201      	movs	r2, #1
 80071e8:	490f      	ldr	r1, [pc, #60]	@ (8007228 <HAL_I2C_IsDeviceReady+0x254>)
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 faee 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e012      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3301      	adds	r3, #1
 80071fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	f4ff af32 	bcc.w	800706e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800721e:	2302      	movs	r3, #2
  }
}
 8007220:	4618      	mov	r0, r3
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	00100002 	.word	0x00100002
 800722c:	ffff0000 	.word	0xffff0000

08007230 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	460b      	mov	r3, r1
 800723e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b08      	cmp	r3, #8
 800724a:	d006      	beq.n	800725a <I2C_MasterRequestWrite+0x2a>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d003      	beq.n	800725a <I2C_MasterRequestWrite+0x2a>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007258:	d108      	bne.n	800726c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e00b      	b.n	8007284 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	2b12      	cmp	r3, #18
 8007272:	d107      	bne.n	8007284 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007282:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fa9b 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072aa:	d103      	bne.n	80072b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e035      	b.n	8007324 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072c0:	d108      	bne.n	80072d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072d0:	611a      	str	r2, [r3, #16]
 80072d2:	e01b      	b.n	800730c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072d4:	897b      	ldrh	r3, [r7, #10]
 80072d6:	11db      	asrs	r3, r3, #7
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0306 	and.w	r3, r3, #6
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f063 030f 	orn	r3, r3, #15
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	490e      	ldr	r1, [pc, #56]	@ (800732c <I2C_MasterRequestWrite+0xfc>)
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fae4 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e010      	b.n	8007324 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007302:	897b      	ldrh	r3, [r7, #10]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	4907      	ldr	r1, [pc, #28]	@ (8007330 <I2C_MasterRequestWrite+0x100>)
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fad4 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	00010008 	.word	0x00010008
 8007330:	00010002 	.word	0x00010002

08007334 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	460b      	mov	r3, r1
 8007342:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007358:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d006      	beq.n	800736e <I2C_MasterRequestRead+0x3a>
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d003      	beq.n	800736e <I2C_MasterRequestRead+0x3a>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800736c:	d108      	bne.n	8007380 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e00b      	b.n	8007398 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007384:	2b11      	cmp	r3, #17
 8007386:	d107      	bne.n	8007398 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa11 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073be:	d103      	bne.n	80073c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e079      	b.n	80074c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d4:	d108      	bne.n	80073e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073d6:	897b      	ldrh	r3, [r7, #10]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f043 0301 	orr.w	r3, r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	611a      	str	r2, [r3, #16]
 80073e6:	e05f      	b.n	80074a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80073e8:	897b      	ldrh	r3, [r7, #10]
 80073ea:	11db      	asrs	r3, r3, #7
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 0306 	and.w	r3, r3, #6
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f063 030f 	orn	r3, r3, #15
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4930      	ldr	r1, [pc, #192]	@ (80074c8 <I2C_MasterRequestRead+0x194>)
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fa5a 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e054      	b.n	80074c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007416:	897b      	ldrh	r3, [r7, #10]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4929      	ldr	r1, [pc, #164]	@ (80074cc <I2C_MasterRequestRead+0x198>)
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fa4a 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e044      	b.n	80074c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800745a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f9af 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800747e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007482:	d103      	bne.n	800748c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800748a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e017      	b.n	80074c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007490:	897b      	ldrh	r3, [r7, #10]
 8007492:	11db      	asrs	r3, r3, #7
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 0306 	and.w	r3, r3, #6
 800749a:	b2db      	uxtb	r3, r3
 800749c:	f063 030e 	orn	r3, r3, #14
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4907      	ldr	r1, [pc, #28]	@ (80074cc <I2C_MasterRequestRead+0x198>)
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fa06 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	00010008 	.word	0x00010008
 80074cc:	00010002 	.word	0x00010002

080074d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	4608      	mov	r0, r1
 80074da:	4611      	mov	r1, r2
 80074dc:	461a      	mov	r2, r3
 80074de:	4603      	mov	r3, r0
 80074e0:	817b      	strh	r3, [r7, #10]
 80074e2:	460b      	mov	r3, r1
 80074e4:	813b      	strh	r3, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	2200      	movs	r2, #0
 8007502:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f960 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007520:	d103      	bne.n	800752a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007528:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e05f      	b.n	80075ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800752e:	897b      	ldrh	r3, [r7, #10]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800753c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	492d      	ldr	r1, [pc, #180]	@ (80075f8 <I2C_RequestMemoryWrite+0x128>)
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f9bb 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e04c      	b.n	80075ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800756a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756c:	6a39      	ldr	r1, [r7, #32]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fa46 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00d      	beq.n	8007596 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	2b04      	cmp	r3, #4
 8007580:	d107      	bne.n	8007592 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007590:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e02b      	b.n	80075ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d105      	bne.n	80075a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800759c:	893b      	ldrh	r3, [r7, #8]
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	611a      	str	r2, [r3, #16]
 80075a6:	e021      	b.n	80075ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075a8:	893b      	ldrh	r3, [r7, #8]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b8:	6a39      	ldr	r1, [r7, #32]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa20 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00d      	beq.n	80075e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d107      	bne.n	80075de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e005      	b.n	80075ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075e2:	893b      	ldrh	r3, [r7, #8]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	00010002 	.word	0x00010002

080075fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4603      	mov	r3, r0
 800760c:	817b      	strh	r3, [r7, #10]
 800760e:	460b      	mov	r3, r1
 8007610:	813b      	strh	r3, [r7, #8]
 8007612:	4613      	mov	r3, r2
 8007614:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007624:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	2200      	movs	r2, #0
 800763e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f8c2 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765c:	d103      	bne.n	8007666 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007664:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e0aa      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800766a:	897b      	ldrh	r3, [r7, #10]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	6a3a      	ldr	r2, [r7, #32]
 800767e:	4952      	ldr	r1, [pc, #328]	@ (80077c8 <I2C_RequestMemoryRead+0x1cc>)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f91d 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e097      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a8:	6a39      	ldr	r1, [r7, #32]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f9a8 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d107      	bne.n	80076ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e076      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d105      	bne.n	80076e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	611a      	str	r2, [r3, #16]
 80076e2:	e021      	b.n	8007728 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f4:	6a39      	ldr	r1, [r7, #32]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f982 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	2b04      	cmp	r3, #4
 8007708:	d107      	bne.n	800771a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e050      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800771e:	893b      	ldrh	r3, [r7, #8]
 8007720:	b2da      	uxtb	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772a:	6a39      	ldr	r1, [r7, #32]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f967 	bl	8007a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00d      	beq.n	8007754 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773c:	2b04      	cmp	r3, #4
 800773e:	d107      	bne.n	8007750 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800774e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e035      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007762:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	2200      	movs	r2, #0
 800776c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f82b 	bl	80077cc <I2C_WaitOnFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00d      	beq.n	8007798 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800778a:	d103      	bne.n	8007794 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e013      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007798:	897b      	ldrh	r3, [r7, #10]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	6a3a      	ldr	r2, [r7, #32]
 80077ac:	4906      	ldr	r1, [pc, #24]	@ (80077c8 <I2C_RequestMemoryRead+0x1cc>)
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f886 	bl	80078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	00010002 	.word	0x00010002

080077cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077dc:	e048      	b.n	8007870 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d044      	beq.n	8007870 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fd ffb9 	bl	800575c <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d139      	bne.n	8007870 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d10d      	bne.n	8007822 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	43da      	mvns	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4013      	ands	r3, r2
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	bf0c      	ite	eq
 8007818:	2301      	moveq	r3, #1
 800781a:	2300      	movne	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	e00c      	b.n	800783c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	43da      	mvns	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	429a      	cmp	r2, r3
 8007840:	d116      	bne.n	8007870 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e023      	b.n	80078b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	0c1b      	lsrs	r3, r3, #16
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d10d      	bne.n	8007896 <I2C_WaitOnFlagUntilTimeout+0xca>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	43da      	mvns	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	4013      	ands	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf0c      	ite	eq
 800788c:	2301      	moveq	r3, #1
 800788e:	2300      	movne	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	e00c      	b.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	43da      	mvns	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4013      	ands	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf0c      	ite	eq
 80078a8:	2301      	moveq	r3, #1
 80078aa:	2300      	movne	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d093      	beq.n	80077de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078ce:	e071      	b.n	80079b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078de:	d123      	bne.n	8007928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007914:	f043 0204 	orr.w	r2, r3, #4
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e067      	b.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d041      	beq.n	80079b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007930:	f7fd ff14 	bl	800575c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d302      	bcc.n	8007946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d136      	bne.n	80079b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	0c1b      	lsrs	r3, r3, #16
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10c      	bne.n	800796a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	43da      	mvns	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4013      	ands	r3, r2
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	bf14      	ite	ne
 8007962:	2301      	movne	r3, #1
 8007964:	2300      	moveq	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	e00b      	b.n	8007982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	43da      	mvns	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4013      	ands	r3, r2
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf14      	ite	ne
 800797c:	2301      	movne	r3, #1
 800797e:	2300      	moveq	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d016      	beq.n	80079b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	f043 0220 	orr.w	r2, r3, #32
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e021      	b.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	0c1b      	lsrs	r3, r3, #16
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d10c      	bne.n	80079d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	43da      	mvns	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bf14      	ite	ne
 80079d0:	2301      	movne	r3, #1
 80079d2:	2300      	moveq	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	e00b      	b.n	80079f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	43da      	mvns	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf14      	ite	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	2300      	moveq	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f47f af6d 	bne.w	80078d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a0c:	e034      	b.n	8007a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f8e3 	bl	8007bda <I2C_IsAcknowledgeFailed>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e034      	b.n	8007a88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d028      	beq.n	8007a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a26:	f7fd fe99 	bl	800575c <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11d      	bne.n	8007a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a46:	2b80      	cmp	r3, #128	@ 0x80
 8007a48:	d016      	beq.n	8007a78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	f043 0220 	orr.w	r2, r3, #32
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e007      	b.n	8007a88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a82:	2b80      	cmp	r3, #128	@ 0x80
 8007a84:	d1c3      	bne.n	8007a0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a9c:	e034      	b.n	8007b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 f89b 	bl	8007bda <I2C_IsAcknowledgeFailed>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e034      	b.n	8007b18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d028      	beq.n	8007b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab6:	f7fd fe51 	bl	800575c <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d11d      	bne.n	8007b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d016      	beq.n	8007b08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af4:	f043 0220 	orr.w	r2, r3, #32
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e007      	b.n	8007b18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d1c3      	bne.n	8007a9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b2c:	e049      	b.n	8007bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d119      	bne.n	8007b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0210 	mvn.w	r2, #16
 8007b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e030      	b.n	8007bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b70:	f7fd fdf4 	bl	800575c <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d302      	bcc.n	8007b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d11d      	bne.n	8007bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b90:	2b40      	cmp	r3, #64	@ 0x40
 8007b92:	d016      	beq.n	8007bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	f043 0220 	orr.w	r2, r3, #32
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e007      	b.n	8007bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d1ae      	bne.n	8007b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf0:	d11b      	bne.n	8007c2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	f043 0204 	orr.w	r2, r3, #4
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e000      	b.n	8007c2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
	...

08007c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e272      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 8087 	beq.w	8007d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c58:	4b92      	ldr	r3, [pc, #584]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f003 030c 	and.w	r3, r3, #12
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d00c      	beq.n	8007c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c64:	4b8f      	ldr	r3, [pc, #572]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f003 030c 	and.w	r3, r3, #12
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d112      	bne.n	8007c96 <HAL_RCC_OscConfig+0x5e>
 8007c70:	4b8c      	ldr	r3, [pc, #560]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7c:	d10b      	bne.n	8007c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c7e:	4b89      	ldr	r3, [pc, #548]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d06c      	beq.n	8007d64 <HAL_RCC_OscConfig+0x12c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d168      	bne.n	8007d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e24c      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c9e:	d106      	bne.n	8007cae <HAL_RCC_OscConfig+0x76>
 8007ca0:	4b80      	ldr	r3, [pc, #512]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a7f      	ldr	r2, [pc, #508]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e02e      	b.n	8007d0c <HAL_RCC_OscConfig+0xd4>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x98>
 8007cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a7a      	ldr	r2, [pc, #488]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b78      	ldr	r3, [pc, #480]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a77      	ldr	r2, [pc, #476]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e01d      	b.n	8007d0c <HAL_RCC_OscConfig+0xd4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_RCC_OscConfig+0xbc>
 8007cda:	4b72      	ldr	r3, [pc, #456]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a71      	ldr	r2, [pc, #452]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a6e      	ldr	r2, [pc, #440]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e00b      	b.n	8007d0c <HAL_RCC_OscConfig+0xd4>
 8007cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a6a      	ldr	r2, [pc, #424]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	4b68      	ldr	r3, [pc, #416]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a67      	ldr	r2, [pc, #412]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d013      	beq.n	8007d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d14:	f7fd fd22 	bl	800575c <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d1c:	f7fd fd1e 	bl	800575c <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b64      	cmp	r3, #100	@ 0x64
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e200      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <HAL_RCC_OscConfig+0xe4>
 8007d3a:	e014      	b.n	8007d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3c:	f7fd fd0e 	bl	800575c <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d44:	f7fd fd0a 	bl	800575c <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b64      	cmp	r3, #100	@ 0x64
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e1ec      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d56:	4b53      	ldr	r3, [pc, #332]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x10c>
 8007d62:	e000      	b.n	8007d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d063      	beq.n	8007e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d72:	4b4c      	ldr	r3, [pc, #304]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f003 030c 	and.w	r3, r3, #12
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007d7e:	4b49      	ldr	r3, [pc, #292]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f003 030c 	and.w	r3, r3, #12
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d11c      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x18c>
 8007d8a:	4b46      	ldr	r3, [pc, #280]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d116      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d96:	4b43      	ldr	r3, [pc, #268]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d005      	beq.n	8007dae <HAL_RCC_OscConfig+0x176>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d001      	beq.n	8007dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e1c0      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dae:	4b3d      	ldr	r3, [pc, #244]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	4939      	ldr	r1, [pc, #228]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dc2:	e03a      	b.n	8007e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d020      	beq.n	8007e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dcc:	4b36      	ldr	r3, [pc, #216]	@ (8007ea8 <HAL_RCC_OscConfig+0x270>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd2:	f7fd fcc3 	bl	800575c <HAL_GetTick>
 8007dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dda:	f7fd fcbf 	bl	800575c <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e1a1      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dec:	4b2d      	ldr	r3, [pc, #180]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0f0      	beq.n	8007dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df8:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	4927      	ldr	r1, [pc, #156]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	600b      	str	r3, [r1, #0]
 8007e0c:	e015      	b.n	8007e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ea8 <HAL_RCC_OscConfig+0x270>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e14:	f7fd fca2 	bl	800575c <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e1c:	f7fd fc9e 	bl	800575c <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e180      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f0      	bne.n	8007e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0308 	and.w	r3, r3, #8
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d03a      	beq.n	8007ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d019      	beq.n	8007e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e4e:	4b17      	ldr	r3, [pc, #92]	@ (8007eac <HAL_RCC_OscConfig+0x274>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e54:	f7fd fc82 	bl	800575c <HAL_GetTick>
 8007e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e5c:	f7fd fc7e 	bl	800575c <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e160      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <HAL_RCC_OscConfig+0x26c>)
 8007e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0f0      	beq.n	8007e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	f000 fafe 	bl	800847c <RCC_Delay>
 8007e80:	e01c      	b.n	8007ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e82:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <HAL_RCC_OscConfig+0x274>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e88:	f7fd fc68 	bl	800575c <HAL_GetTick>
 8007e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e8e:	e00f      	b.n	8007eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e90:	f7fd fc64 	bl	800575c <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d908      	bls.n	8007eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e146      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
 8007ea2:	bf00      	nop
 8007ea4:	40021000 	.word	0x40021000
 8007ea8:	42420000 	.word	0x42420000
 8007eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eb0:	4b92      	ldr	r3, [pc, #584]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e9      	bne.n	8007e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80a6 	beq.w	8008016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ece:	4b8b      	ldr	r3, [pc, #556]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eda:	4b88      	ldr	r3, [pc, #544]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	4a87      	ldr	r2, [pc, #540]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ee4:	61d3      	str	r3, [r2, #28]
 8007ee6:	4b85      	ldr	r3, [pc, #532]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef6:	4b82      	ldr	r3, [pc, #520]	@ (8008100 <HAL_RCC_OscConfig+0x4c8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d118      	bne.n	8007f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f02:	4b7f      	ldr	r3, [pc, #508]	@ (8008100 <HAL_RCC_OscConfig+0x4c8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a7e      	ldr	r2, [pc, #504]	@ (8008100 <HAL_RCC_OscConfig+0x4c8>)
 8007f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f0e:	f7fd fc25 	bl	800575c <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f14:	e008      	b.n	8007f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f16:	f7fd fc21 	bl	800575c <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b64      	cmp	r3, #100	@ 0x64
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e103      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f28:	4b75      	ldr	r3, [pc, #468]	@ (8008100 <HAL_RCC_OscConfig+0x4c8>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0f0      	beq.n	8007f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d106      	bne.n	8007f4a <HAL_RCC_OscConfig+0x312>
 8007f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	4a6e      	ldr	r2, [pc, #440]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	6213      	str	r3, [r2, #32]
 8007f48:	e02d      	b.n	8007fa6 <HAL_RCC_OscConfig+0x36e>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10c      	bne.n	8007f6c <HAL_RCC_OscConfig+0x334>
 8007f52:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	4a69      	ldr	r2, [pc, #420]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	6213      	str	r3, [r2, #32]
 8007f5e:	4b67      	ldr	r3, [pc, #412]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	4a66      	ldr	r2, [pc, #408]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f64:	f023 0304 	bic.w	r3, r3, #4
 8007f68:	6213      	str	r3, [r2, #32]
 8007f6a:	e01c      	b.n	8007fa6 <HAL_RCC_OscConfig+0x36e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d10c      	bne.n	8007f8e <HAL_RCC_OscConfig+0x356>
 8007f74:	4b61      	ldr	r3, [pc, #388]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	4a60      	ldr	r2, [pc, #384]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f7a:	f043 0304 	orr.w	r3, r3, #4
 8007f7e:	6213      	str	r3, [r2, #32]
 8007f80:	4b5e      	ldr	r3, [pc, #376]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	4a5d      	ldr	r2, [pc, #372]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	6213      	str	r3, [r2, #32]
 8007f8c:	e00b      	b.n	8007fa6 <HAL_RCC_OscConfig+0x36e>
 8007f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	4a5a      	ldr	r2, [pc, #360]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	6213      	str	r3, [r2, #32]
 8007f9a:	4b58      	ldr	r3, [pc, #352]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	4a57      	ldr	r2, [pc, #348]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007fa0:	f023 0304 	bic.w	r3, r3, #4
 8007fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d015      	beq.n	8007fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fae:	f7fd fbd5 	bl	800575c <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb4:	e00a      	b.n	8007fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb6:	f7fd fbd1 	bl	800575c <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e0b1      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0ee      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x37e>
 8007fd8:	e014      	b.n	8008004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fda:	f7fd fbbf 	bl	800575c <HAL_GetTick>
 8007fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe2:	f7fd fbbb 	bl	800575c <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e09b      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff8:	4b40      	ldr	r3, [pc, #256]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1ee      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d105      	bne.n	8008016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800800a:	4b3c      	ldr	r3, [pc, #240]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	4a3b      	ldr	r2, [pc, #236]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8008010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 8087 	beq.w	800812e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008020:	4b36      	ldr	r3, [pc, #216]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f003 030c 	and.w	r3, r3, #12
 8008028:	2b08      	cmp	r3, #8
 800802a:	d061      	beq.n	80080f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d146      	bne.n	80080c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008034:	4b33      	ldr	r3, [pc, #204]	@ (8008104 <HAL_RCC_OscConfig+0x4cc>)
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800803a:	f7fd fb8f 	bl	800575c <HAL_GetTick>
 800803e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008040:	e008      	b.n	8008054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008042:	f7fd fb8b 	bl	800575c <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b02      	cmp	r3, #2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e06d      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008054:	4b29      	ldr	r3, [pc, #164]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1f0      	bne.n	8008042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008068:	d108      	bne.n	800807c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800806a:	4b24      	ldr	r3, [pc, #144]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	4921      	ldr	r1, [pc, #132]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8008078:	4313      	orrs	r3, r2
 800807a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800807c:	4b1f      	ldr	r3, [pc, #124]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a19      	ldr	r1, [r3, #32]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	430b      	orrs	r3, r1
 800808e:	491b      	ldr	r1, [pc, #108]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 8008090:	4313      	orrs	r3, r2
 8008092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008094:	4b1b      	ldr	r3, [pc, #108]	@ (8008104 <HAL_RCC_OscConfig+0x4cc>)
 8008096:	2201      	movs	r2, #1
 8008098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800809a:	f7fd fb5f 	bl	800575c <HAL_GetTick>
 800809e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080a0:	e008      	b.n	80080b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080a2:	f7fd fb5b 	bl	800575c <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e03d      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080b4:	4b11      	ldr	r3, [pc, #68]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0f0      	beq.n	80080a2 <HAL_RCC_OscConfig+0x46a>
 80080c0:	e035      	b.n	800812e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <HAL_RCC_OscConfig+0x4cc>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c8:	f7fd fb48 	bl	800575c <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d0:	f7fd fb44 	bl	800575c <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e026      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <HAL_RCC_OscConfig+0x4c4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_OscConfig+0x498>
 80080ee:	e01e      	b.n	800812e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d107      	bne.n	8008108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e019      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
 80080fc:	40021000 	.word	0x40021000
 8008100:	40007000 	.word	0x40007000
 8008104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008108:	4b0b      	ldr	r3, [pc, #44]	@ (8008138 <HAL_RCC_OscConfig+0x500>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	429a      	cmp	r2, r3
 800811a:	d106      	bne.n	800812a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d001      	beq.n	800812e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40021000 	.word	0x40021000

0800813c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e0d0      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008150:	4b6a      	ldr	r3, [pc, #424]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d910      	bls.n	8008180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815e:	4b67      	ldr	r3, [pc, #412]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f023 0207 	bic.w	r2, r3, #7
 8008166:	4965      	ldr	r1, [pc, #404]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	4313      	orrs	r3, r2
 800816c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	4b63      	ldr	r3, [pc, #396]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e0b8      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d020      	beq.n	80081ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008198:	4b59      	ldr	r3, [pc, #356]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4a58      	ldr	r2, [pc, #352]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 800819e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80081a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081b0:	4b53      	ldr	r3, [pc, #332]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	4a52      	ldr	r2, [pc, #328]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80081b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80081ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081bc:	4b50      	ldr	r3, [pc, #320]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	494d      	ldr	r1, [pc, #308]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d040      	beq.n	800825c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d107      	bne.n	80081f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e2:	4b47      	ldr	r3, [pc, #284]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d115      	bne.n	800821a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e07f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d107      	bne.n	800820a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081fa:	4b41      	ldr	r3, [pc, #260]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e073      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800820a:	4b3d      	ldr	r3, [pc, #244]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e06b      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800821a:	4b39      	ldr	r3, [pc, #228]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f023 0203 	bic.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	4936      	ldr	r1, [pc, #216]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 8008228:	4313      	orrs	r3, r2
 800822a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800822c:	f7fd fa96 	bl	800575c <HAL_GetTick>
 8008230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008232:	e00a      	b.n	800824a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008234:	f7fd fa92 	bl	800575c <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e053      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800824a:	4b2d      	ldr	r3, [pc, #180]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f003 020c 	and.w	r2, r3, #12
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	429a      	cmp	r2, r3
 800825a:	d1eb      	bne.n	8008234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800825c:	4b27      	ldr	r3, [pc, #156]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d210      	bcs.n	800828c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826a:	4b24      	ldr	r3, [pc, #144]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 0207 	bic.w	r2, r3, #7
 8008272:	4922      	ldr	r1, [pc, #136]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	4313      	orrs	r3, r2
 8008278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800827a:	4b20      	ldr	r3, [pc, #128]	@ (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d001      	beq.n	800828c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e032      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008298:	4b19      	ldr	r3, [pc, #100]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4916      	ldr	r1, [pc, #88]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082b6:	4b12      	ldr	r3, [pc, #72]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	490e      	ldr	r1, [pc, #56]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082ca:	f000 f821 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	091b      	lsrs	r3, r3, #4
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	490a      	ldr	r1, [pc, #40]	@ (8008304 <HAL_RCC_ClockConfig+0x1c8>)
 80082dc:	5ccb      	ldrb	r3, [r1, r3]
 80082de:	fa22 f303 	lsr.w	r3, r2, r3
 80082e2:	4a09      	ldr	r2, [pc, #36]	@ (8008308 <HAL_RCC_ClockConfig+0x1cc>)
 80082e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80082e6:	4b09      	ldr	r3, [pc, #36]	@ (800830c <HAL_RCC_ClockConfig+0x1d0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fc f848 	bl	8004380 <HAL_InitTick>

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40022000 	.word	0x40022000
 8008300:	40021000 	.word	0x40021000
 8008304:	080125b8 	.word	0x080125b8
 8008308:	20000028 	.word	0x20000028
 800830c:	2000002c 	.word	0x2000002c

08008310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	2300      	movs	r3, #0
 800831c:	60bb      	str	r3, [r7, #8]
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	2300      	movs	r3, #0
 8008324:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800832a:	4b1e      	ldr	r3, [pc, #120]	@ (80083a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f003 030c 	and.w	r3, r3, #12
 8008336:	2b04      	cmp	r3, #4
 8008338:	d002      	beq.n	8008340 <HAL_RCC_GetSysClockFreq+0x30>
 800833a:	2b08      	cmp	r3, #8
 800833c:	d003      	beq.n	8008346 <HAL_RCC_GetSysClockFreq+0x36>
 800833e:	e027      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008340:	4b19      	ldr	r3, [pc, #100]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008342:	613b      	str	r3, [r7, #16]
      break;
 8008344:	e027      	b.n	8008396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	0c9b      	lsrs	r3, r3, #18
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	4a17      	ldr	r2, [pc, #92]	@ (80083ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8008350:	5cd3      	ldrb	r3, [r2, r3]
 8008352:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d010      	beq.n	8008380 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800835e:	4b11      	ldr	r3, [pc, #68]	@ (80083a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	0c5b      	lsrs	r3, r3, #17
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	4a11      	ldr	r2, [pc, #68]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800836a:	5cd3      	ldrb	r3, [r2, r3]
 800836c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a0d      	ldr	r2, [pc, #52]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008372:	fb03 f202 	mul.w	r2, r3, r2
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	fbb2 f3f3 	udiv	r3, r2, r3
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e004      	b.n	800838a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a0c      	ldr	r2, [pc, #48]	@ (80083b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008384:	fb02 f303 	mul.w	r3, r2, r3
 8008388:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	613b      	str	r3, [r7, #16]
      break;
 800838e:	e002      	b.n	8008396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008390:	4b05      	ldr	r3, [pc, #20]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008392:	613b      	str	r3, [r7, #16]
      break;
 8008394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008396:	693b      	ldr	r3, [r7, #16]
}
 8008398:	4618      	mov	r0, r3
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	bc80      	pop	{r7}
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40021000 	.word	0x40021000
 80083a8:	007a1200 	.word	0x007a1200
 80083ac:	080125d0 	.word	0x080125d0
 80083b0:	080125e0 	.word	0x080125e0
 80083b4:	003d0900 	.word	0x003d0900

080083b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083bc:	4b02      	ldr	r3, [pc, #8]	@ (80083c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80083be:	681b      	ldr	r3, [r3, #0]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr
 80083c8:	20000028 	.word	0x20000028

080083cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083d0:	f7ff fff2 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 80083d4:	4602      	mov	r2, r0
 80083d6:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	0a1b      	lsrs	r3, r3, #8
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	4903      	ldr	r1, [pc, #12]	@ (80083f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083e2:	5ccb      	ldrb	r3, [r1, r3]
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40021000 	.word	0x40021000
 80083f0:	080125c8 	.word	0x080125c8

080083f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083f8:	f7ff ffde 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 80083fc:	4602      	mov	r2, r0
 80083fe:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	0adb      	lsrs	r3, r3, #11
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	4903      	ldr	r1, [pc, #12]	@ (8008418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800840a:	5ccb      	ldrb	r3, [r1, r3]
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008410:	4618      	mov	r0, r3
 8008412:	bd80      	pop	{r7, pc}
 8008414:	40021000 	.word	0x40021000
 8008418:	080125c8 	.word	0x080125c8

0800841c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220f      	movs	r2, #15
 800842a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800842c:	4b11      	ldr	r3, [pc, #68]	@ (8008474 <HAL_RCC_GetClockConfig+0x58>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f003 0203 	and.w	r2, r3, #3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008438:	4b0e      	ldr	r3, [pc, #56]	@ (8008474 <HAL_RCC_GetClockConfig+0x58>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008444:	4b0b      	ldr	r3, [pc, #44]	@ (8008474 <HAL_RCC_GetClockConfig+0x58>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008450:	4b08      	ldr	r3, [pc, #32]	@ (8008474 <HAL_RCC_GetClockConfig+0x58>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	08db      	lsrs	r3, r3, #3
 8008456:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800845e:	4b06      	ldr	r3, [pc, #24]	@ (8008478 <HAL_RCC_GetClockConfig+0x5c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0207 	and.w	r2, r3, #7
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr
 8008474:	40021000 	.word	0x40021000
 8008478:	40022000 	.word	0x40022000

0800847c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <RCC_Delay+0x34>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a0a      	ldr	r2, [pc, #40]	@ (80084b4 <RCC_Delay+0x38>)
 800848a:	fba2 2303 	umull	r2, r3, r2, r3
 800848e:	0a5b      	lsrs	r3, r3, #9
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	fb02 f303 	mul.w	r3, r2, r3
 8008496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008498:	bf00      	nop
  }
  while (Delay --);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1e5a      	subs	r2, r3, #1
 800849e:	60fa      	str	r2, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f9      	bne.n	8008498 <RCC_Delay+0x1c>
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr
 80084b0:	20000028 	.word	0x20000028
 80084b4:	10624dd3 	.word	0x10624dd3

080084b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e022      	b.n	8008510 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7fb febd 	bl	800425c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2203      	movs	r2, #3
 80084e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f814 	bl	8008518 <HAL_SD_InitCard>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e00a      	b.n	8008510 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008518:	b5b0      	push	{r4, r5, r7, lr}
 800851a:	b08e      	sub	sp, #56	@ 0x38
 800851c:	af04      	add	r7, sp, #16
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008520:	2300      	movs	r3, #0
 8008522:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008528:	2300      	movs	r3, #0
 800852a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008534:	2376      	movs	r3, #118	@ 0x76
 8008536:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681d      	ldr	r5, [r3, #0]
 800853c:	466c      	mov	r4, sp
 800853e:	f107 0314 	add.w	r3, r7, #20
 8008542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008550:	4628      	mov	r0, r5
 8008552:	f002 fd7d 	bl	800b050 <SDIO_Init>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800855c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e04f      	b.n	8008608 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008568:	4b29      	ldr	r3, [pc, #164]	@ (8008610 <HAL_SD_InitCard+0xf8>)
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f002 fdb2 	bl	800b0dc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008578:	4b25      	ldr	r3, [pc, #148]	@ (8008610 <HAL_SD_InitCard+0xf8>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800857e:	2002      	movs	r0, #2
 8008580:	f7fd f8f6 	bl	8005770 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fe69 	bl	800925c <SD_PowerON>
 800858a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00b      	beq.n	80085aa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e02e      	b.n	8008608 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fd87 	bl	80090be <SD_InitCard>
 80085b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e01b      	b.n	8008608 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085d8:	4618      	mov	r0, r3
 80085da:	f002 fe0b 	bl	800b1f4 <SDMMC_CmdBlockLength>
 80085de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00f      	beq.n	8008606 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008614 <HAL_SD_InitCard+0xfc>)
 80085ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3728      	adds	r7, #40	@ 0x28
 800860c:	46bd      	mov	sp, r7
 800860e:	bdb0      	pop	{r4, r5, r7, pc}
 8008610:	423000a0 	.word	0x423000a0
 8008614:	004005ff 	.word	0x004005ff

08008618 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b092      	sub	sp, #72	@ 0x48
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008626:	f7fd f899 	bl	800575c <HAL_GetTick>
 800862a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e1bd      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	f040 81b0 	bne.w	80089b8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800865e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	441a      	add	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008668:	429a      	cmp	r2, r3
 800866a:	d907      	bls.n	800867c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008670:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e1a4      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2203      	movs	r2, #3
 8008680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2200      	movs	r2, #0
 800868a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008690:	2b01      	cmp	r3, #1
 8008692:	d002      	beq.n	800869a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	025b      	lsls	r3, r3, #9
 8008698:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800869a:	f04f 33ff 	mov.w	r3, #4294967295
 800869e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	025b      	lsls	r3, r3, #9
 80086a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80086a6:	2390      	movs	r3, #144	@ 0x90
 80086a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80086aa:	2302      	movs	r3, #2
 80086ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80086b2:	2301      	movs	r3, #1
 80086b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f107 0214 	add.w	r2, r7, #20
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f002 fd6c 	bl	800b19e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d90a      	bls.n	80086e2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2202      	movs	r2, #2
 80086d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086d8:	4618      	mov	r0, r3
 80086da:	f002 fdcf 	bl	800b27c <SDMMC_CmdReadMultiBlock>
 80086de:	6478      	str	r0, [r7, #68]	@ 0x44
 80086e0:	e009      	b.n	80086f6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086ee:	4618      	mov	r0, r3
 80086f0:	f002 fda2 	bl	800b238 <SDMMC_CmdReadSingleBlock>
 80086f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d012      	beq.n	8008722 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a7a      	ldr	r2, [pc, #488]	@ (80088ec <HAL_SD_ReadBlocks+0x2d4>)
 8008702:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800870a:	431a      	orrs	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e151      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008726:	e061      	b.n	80087ec <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d03c      	beq.n	80087b0 <HAL_SD_ReadBlocks+0x198>
 8008736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d039      	beq.n	80087b0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800873c:	2300      	movs	r3, #0
 800873e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008740:	e033      	b.n	80087aa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f002 fcac 	bl	800b0a4 <SDIO_ReadFIFO>
 800874c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	b2da      	uxtb	r2, r3
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008758:	3301      	adds	r3, #1
 800875a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800875c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875e:	3b01      	subs	r3, #1
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008764:	0a1b      	lsrs	r3, r3, #8
 8008766:	b2da      	uxtb	r2, r3
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800876c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876e:	3301      	adds	r3, #1
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008774:	3b01      	subs	r3, #1
 8008776:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	b2da      	uxtb	r2, r3
 800877e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008780:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008784:	3301      	adds	r3, #1
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800878a:	3b01      	subs	r3, #1
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800878e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008790:	0e1b      	lsrs	r3, r3, #24
 8008792:	b2da      	uxtb	r2, r3
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008796:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879a:	3301      	adds	r3, #1
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800879e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a0:	3b01      	subs	r3, #1
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80087a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a6:	3301      	adds	r3, #1
 80087a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ac:	2b07      	cmp	r3, #7
 80087ae:	d9c8      	bls.n	8008742 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80087b0:	f7fc ffd4 	bl	800575c <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80087bc:	429a      	cmp	r2, r3
 80087be:	d902      	bls.n	80087c6 <HAL_SD_ReadBlocks+0x1ae>
 80087c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d112      	bne.n	80087ec <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a48      	ldr	r2, [pc, #288]	@ (80088ec <HAL_SD_ReadBlocks+0x2d4>)
 80087cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e0ec      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087f2:	f240 332a 	movw	r3, #810	@ 0x32a
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d095      	beq.n	8008728 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008806:	2b00      	cmp	r3, #0
 8008808:	d022      	beq.n	8008850 <HAL_SD_ReadBlocks+0x238>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d91f      	bls.n	8008850 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008814:	2b03      	cmp	r3, #3
 8008816:	d01b      	beq.n	8008850 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f002 fd93 	bl	800b348 <SDMMC_CmdStopTransfer>
 8008822:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008826:	2b00      	cmp	r3, #0
 8008828:	d012      	beq.n	8008850 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a2f      	ldr	r2, [pc, #188]	@ (80088ec <HAL_SD_ReadBlocks+0x2d4>)
 8008830:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0ba      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d012      	beq.n	8008884 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a22      	ldr	r2, [pc, #136]	@ (80088ec <HAL_SD_ReadBlocks+0x2d4>)
 8008864:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0a0      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d012      	beq.n	80088b8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a15      	ldr	r2, [pc, #84]	@ (80088ec <HAL_SD_ReadBlocks+0x2d4>)
 8008898:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	f043 0202 	orr.w	r2, r3, #2
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e086      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d063      	beq.n	800898e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a08      	ldr	r2, [pc, #32]	@ (80088ec <HAL_SD_ReadBlocks+0x2d4>)
 80088cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d2:	f043 0220 	orr.w	r2, r3, #32
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e06c      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
 80088ec:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 fbd5 	bl	800b0a4 <SDIO_ReadFIFO>
 80088fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008902:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008906:	3301      	adds	r3, #1
 8008908:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800890a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890c:	3b01      	subs	r3, #1
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	0a1b      	lsrs	r3, r3, #8
 8008914:	b2da      	uxtb	r2, r3
 8008916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008918:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800891a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891c:	3301      	adds	r3, #1
 800891e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008922:	3b01      	subs	r3, #1
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008928:	0c1b      	lsrs	r3, r3, #16
 800892a:	b2da      	uxtb	r2, r3
 800892c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008932:	3301      	adds	r3, #1
 8008934:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008938:	3b01      	subs	r3, #1
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	0e1b      	lsrs	r3, r3, #24
 8008940:	b2da      	uxtb	r2, r3
 8008942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008944:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008948:	3301      	adds	r3, #1
 800894a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800894c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894e:	3b01      	subs	r3, #1
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008952:	f7fc ff03 	bl	800575c <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800895e:	429a      	cmp	r2, r3
 8008960:	d902      	bls.n	8008968 <HAL_SD_ReadBlocks+0x350>
 8008962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008964:	2b00      	cmp	r3, #0
 8008966:	d112      	bne.n	800898e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <HAL_SD_ReadBlocks+0x3b8>)
 800896e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008974:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e01b      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_SD_ReadBlocks+0x38a>
 800899c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1a6      	bne.n	80088f0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80089aa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	e006      	b.n	80089c6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3748      	adds	r7, #72	@ 0x48
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	004005ff 	.word	0x004005ff

080089d4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b092      	sub	sp, #72	@ 0x48
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089e2:	f7fc febb 	bl	800575c <HAL_GetTick>
 80089e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d107      	bne.n	8008a06 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e166      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	f040 8159 	bne.w	8008cc6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	441a      	add	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d907      	bls.n	8008a38 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e14d      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2200      	movs	r2, #0
 8008a46:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d002      	beq.n	8008a56 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	025b      	lsls	r3, r3, #9
 8008a54:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	025b      	lsls	r3, r3, #9
 8008a60:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008a62:	2390      	movs	r3, #144	@ 0x90
 8008a64:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008a66:	2300      	movs	r3, #0
 8008a68:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f107 0218 	add.w	r2, r7, #24
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fb8e 	bl	800b19e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d90a      	bls.n	8008a9e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 fc35 	bl	800b304 <SDMMC_CmdWriteMultiBlock>
 8008a9a:	6478      	str	r0, [r7, #68]	@ 0x44
 8008a9c:	e009      	b.n	8008ab2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2210      	movs	r2, #16
 8008aa2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f002 fc08 	bl	800b2c0 <SDMMC_CmdWriteSingleBlock>
 8008ab0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d012      	beq.n	8008ade <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a87      	ldr	r2, [pc, #540]	@ (8008cdc <HAL_SD_WriteBlocks+0x308>)
 8008abe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e0fa      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008ae2:	e065      	b.n	8008bb0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d040      	beq.n	8008b74 <HAL_SD_WriteBlocks+0x1a0>
 8008af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d03d      	beq.n	8008b74 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008af8:	2300      	movs	r3, #0
 8008afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008afc:	e037      	b.n	8008b6e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	3301      	adds	r3, #1
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	021a      	lsls	r2, r3, #8
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1e:	3301      	adds	r3, #1
 8008b20:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b24:	3b01      	subs	r3, #1
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	041a      	lsls	r2, r3, #16
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b36:	3301      	adds	r3, #1
 8008b38:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	061a      	lsls	r2, r3, #24
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4e:	3301      	adds	r3, #1
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b54:	3b01      	subs	r3, #1
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f107 0214 	add.w	r2, r7, #20
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f002 faaa 	bl	800b0bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d9c4      	bls.n	8008afe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008b74:	f7fc fdf2 	bl	800575c <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d902      	bls.n	8008b8a <HAL_SD_WriteBlocks+0x1b6>
 8008b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d112      	bne.n	8008bb0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a53      	ldr	r2, [pc, #332]	@ (8008cdc <HAL_SD_WriteBlocks+0x308>)
 8008b90:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e091      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb6:	f240 331a 	movw	r3, #794	@ 0x31a
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d091      	beq.n	8008ae4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d022      	beq.n	8008c14 <HAL_SD_WriteBlocks+0x240>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d91f      	bls.n	8008c14 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d01b      	beq.n	8008c14 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f002 fbb1 	bl	800b348 <SDMMC_CmdStopTransfer>
 8008be6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d012      	beq.n	8008c14 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8008cdc <HAL_SD_WriteBlocks+0x308>)
 8008bf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e05f      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d012      	beq.n	8008c48 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a2d      	ldr	r2, [pc, #180]	@ (8008cdc <HAL_SD_WriteBlocks+0x308>)
 8008c28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	f043 0208 	orr.w	r2, r3, #8
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e045      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d012      	beq.n	8008c7c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a20      	ldr	r2, [pc, #128]	@ (8008cdc <HAL_SD_WriteBlocks+0x308>)
 8008c5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c62:	f043 0202 	orr.w	r2, r3, #2
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e02b      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d012      	beq.n	8008cb0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a13      	ldr	r2, [pc, #76]	@ (8008cdc <HAL_SD_WriteBlocks+0x308>)
 8008c90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c96:	f043 0210 	orr.w	r2, r3, #16
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e011      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e006      	b.n	8008cd4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
  }
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3748      	adds	r7, #72	@ 0x48
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	004005ff 	.word	0x004005ff

08008ce0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cee:	0f9b      	lsrs	r3, r3, #30
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfa:	0e9b      	lsrs	r3, r3, #26
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d0c:	0e1b      	lsrs	r3, r3, #24
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d1e:	0c1b      	lsrs	r3, r3, #16
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2a:	0a1b      	lsrs	r3, r3, #8
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d40:	0d1b      	lsrs	r3, r3, #20
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d5e:	0bdb      	lsrs	r3, r3, #15
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d70:	0b9b      	lsrs	r3, r3, #14
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d82:	0b5b      	lsrs	r3, r3, #13
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d94:	0b1b      	lsrs	r3, r3, #12
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2200      	movs	r2, #0
 8008da6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d163      	bne.n	8008e78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008db4:	009a      	lsls	r2, r3, #2
 8008db6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008dba:	4013      	ands	r3, r2
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008dc0:	0f92      	lsrs	r2, r2, #30
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dcc:	0edb      	lsrs	r3, r3, #27
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dde:	0e1b      	lsrs	r3, r3, #24
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008df0:	0d5b      	lsrs	r3, r3, #21
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0307 	and.w	r3, r3, #7
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e02:	0c9b      	lsrs	r3, r3, #18
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e14:	0bdb      	lsrs	r3, r3, #15
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	7e1b      	ldrb	r3, [r3, #24]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	3302      	adds	r3, #2
 8008e38:	2201      	movs	r2, #1
 8008e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008e42:	fb03 f202 	mul.w	r2, r3, r2
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	7a1b      	ldrb	r3, [r3, #8]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f003 030f 	and.w	r3, r3, #15
 8008e54:	2201      	movs	r2, #1
 8008e56:	409a      	lsls	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008e64:	0a52      	lsrs	r2, r2, #9
 8008e66:	fb03 f202 	mul.w	r2, r3, r2
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e74:	661a      	str	r2, [r3, #96]	@ 0x60
 8008e76:	e031      	b.n	8008edc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d11d      	bne.n	8008ebc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e84:	041b      	lsls	r3, r3, #16
 8008e86:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e8e:	0c1b      	lsrs	r3, r3, #16
 8008e90:	431a      	orrs	r2, r3
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	029a      	lsls	r2, r3, #10
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	661a      	str	r2, [r3, #96]	@ 0x60
 8008eba:	e00f      	b.n	8008edc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a58      	ldr	r2, [pc, #352]	@ (8009024 <HAL_SD_GetCardCSD+0x344>)
 8008ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e09d      	b.n	8009018 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee0:	0b9b      	lsrs	r3, r3, #14
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef2:	09db      	lsrs	r3, r3, #7
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f14:	0fdb      	lsrs	r3, r3, #31
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f20:	0f5b      	lsrs	r3, r3, #29
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f32:	0e9b      	lsrs	r3, r3, #26
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f44:	0d9b      	lsrs	r3, r3, #22
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	0d5b      	lsrs	r3, r3, #21
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f72:	0c1b      	lsrs	r3, r3, #16
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f86:	0bdb      	lsrs	r3, r3, #15
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f9a:	0b9b      	lsrs	r3, r3, #14
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fae:	0b5b      	lsrs	r3, r3, #13
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc2:	0b1b      	lsrs	r3, r3, #12
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd6:	0a9b      	lsrs	r3, r3, #10
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	b2db      	uxtb	r3, r3
 8009002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009006:	b2da      	uxtb	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	004005ff 	.word	0x004005ff

08009028 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr

0800907e <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800908a:	f107 030c 	add.w	r3, r7, #12
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f971 	bl	8009378 <SD_SendStatus>
 8009096:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	0a5b      	lsrs	r3, r3, #9
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80090b4:	693b      	ldr	r3, [r7, #16]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80090be:	b5b0      	push	{r4, r5, r7, lr}
 80090c0:	b094      	sub	sp, #80	@ 0x50
 80090c2:	af04      	add	r7, sp, #16
 80090c4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80090c6:	2301      	movs	r3, #1
 80090c8:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 f811 	bl	800b0f6 <SDIO_GetPowerState>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d102      	bne.n	80090e0 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80090de:	e0b8      	b.n	8009252 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d02f      	beq.n	8009148 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f002 f9f2 	bl	800b4d6 <SDMMC_CmdSendCID>
 80090f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <SD_InitCard+0x40>
    {
      return errorstate;
 80090fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fc:	e0a9      	b.n	8009252 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f002 f838 	bl	800b17a <SDIO_GetResponse>
 800910a:	4602      	mov	r2, r0
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2104      	movs	r1, #4
 8009116:	4618      	mov	r0, r3
 8009118:	f002 f82f 	bl	800b17a <SDIO_GetResponse>
 800911c:	4602      	mov	r2, r0
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2108      	movs	r1, #8
 8009128:	4618      	mov	r0, r3
 800912a:	f002 f826 	bl	800b17a <SDIO_GetResponse>
 800912e:	4602      	mov	r2, r0
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	210c      	movs	r1, #12
 800913a:	4618      	mov	r0, r3
 800913c:	f002 f81d 	bl	800b17a <SDIO_GetResponse>
 8009140:	4602      	mov	r2, r0
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914c:	2b03      	cmp	r3, #3
 800914e:	d00d      	beq.n	800916c <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f107 020e 	add.w	r2, r7, #14
 8009158:	4611      	mov	r1, r2
 800915a:	4618      	mov	r0, r3
 800915c:	f002 f9f8 	bl	800b550 <SDMMC_CmdSetRelAdd>
 8009160:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <SD_InitCard+0xae>
    {
      return errorstate;
 8009168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916a:	e072      	b.n	8009252 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009170:	2b03      	cmp	r3, #3
 8009172:	d036      	beq.n	80091e2 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009184:	041b      	lsls	r3, r3, #16
 8009186:	4619      	mov	r1, r3
 8009188:	4610      	mov	r0, r2
 800918a:	f002 f9c2 	bl	800b512 <SDMMC_CmdSendCSD>
 800918e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <SD_InitCard+0xdc>
    {
      return errorstate;
 8009196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009198:	e05b      	b.n	8009252 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 ffea 	bl	800b17a <SDIO_GetResponse>
 80091a6:	4602      	mov	r2, r0
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2104      	movs	r1, #4
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 ffe1 	bl	800b17a <SDIO_GetResponse>
 80091b8:	4602      	mov	r2, r0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2108      	movs	r1, #8
 80091c4:	4618      	mov	r0, r3
 80091c6:	f001 ffd8 	bl	800b17a <SDIO_GetResponse>
 80091ca:	4602      	mov	r2, r0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	210c      	movs	r1, #12
 80091d6:	4618      	mov	r0, r3
 80091d8:	f001 ffcf 	bl	800b17a <SDIO_GetResponse>
 80091dc:	4602      	mov	r2, r0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2104      	movs	r1, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 ffc6 	bl	800b17a <SDIO_GetResponse>
 80091ee:	4603      	mov	r3, r0
 80091f0:	0d1a      	lsrs	r2, r3, #20
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80091f6:	f107 0310 	add.w	r3, r7, #16
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff fd6f 	bl	8008ce0 <HAL_SD_GetCardCSD>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800920c:	e021      	b.n	8009252 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6819      	ldr	r1, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009216:	041b      	lsls	r3, r3, #16
 8009218:	2200      	movs	r2, #0
 800921a:	461c      	mov	r4, r3
 800921c:	4615      	mov	r5, r2
 800921e:	4622      	mov	r2, r4
 8009220:	462b      	mov	r3, r5
 8009222:	4608      	mov	r0, r1
 8009224:	f002 f8b2 	bl	800b38c <SDMMC_CmdSelDesel>
 8009228:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800922a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <SD_InitCard+0x176>
  {
    return errorstate;
 8009230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009232:	e00e      	b.n	8009252 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681d      	ldr	r5, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	466c      	mov	r4, sp
 800923c:	f103 0210 	add.w	r2, r3, #16
 8009240:	ca07      	ldmia	r2, {r0, r1, r2}
 8009242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009246:	3304      	adds	r3, #4
 8009248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800924a:	4628      	mov	r0, r5
 800924c:	f001 ff00 	bl	800b050 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3740      	adds	r7, #64	@ 0x40
 8009256:	46bd      	mov	sp, r7
 8009258:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800925c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f8ac 	bl	800b3d2 <SDMMC_CmdGoIdleState>
 800927a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	e072      	b.n	800936c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	f002 f8bf 	bl	800b40e <SDMMC_CmdOperCond>
 8009290:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00d      	beq.n	80092b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f895 	bl	800b3d2 <SDMMC_CmdGoIdleState>
 80092a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d004      	beq.n	80092ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	e05b      	b.n	800936c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d137      	bne.n	8009332 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 f8bf 	bl	800b44c <SDMMC_CmdAppCommand>
 80092ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d02d      	beq.n	8009332 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80092da:	e047      	b.n	800936c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f002 f8b2 	bl	800b44c <SDMMC_CmdAppCommand>
 80092e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	e03b      	b.n	800936c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	491e      	ldr	r1, [pc, #120]	@ (8009374 <SD_PowerON+0x118>)
 80092fa:	4618      	mov	r0, r3
 80092fc:	f002 f8c8 	bl	800b490 <SDMMC_CmdAppOperCommand>
 8009300:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009308:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800930c:	e02e      	b.n	800936c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f001 ff30 	bl	800b17a <SDIO_GetResponse>
 800931a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	0fdb      	lsrs	r3, r3, #31
 8009320:	2b01      	cmp	r3, #1
 8009322:	d101      	bne.n	8009328 <SD_PowerON+0xcc>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <SD_PowerON+0xce>
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]

    count++;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3301      	adds	r3, #1
 8009330:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009338:	4293      	cmp	r3, r2
 800933a:	d802      	bhi.n	8009342 <SD_PowerON+0xe6>
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0cc      	beq.n	80092dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009348:	4293      	cmp	r3, r2
 800934a:	d902      	bls.n	8009352 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800934c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009350:	e00c      	b.n	800936c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	645a      	str	r2, [r3, #68]	@ 0x44
 8009362:	e002      	b.n	800936a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	c1100000 	.word	0xc1100000

08009378 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009388:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800938c:	e018      	b.n	80093c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009396:	041b      	lsls	r3, r3, #16
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f002 f8f9 	bl	800b592 <SDMMC_CmdSendStatus>
 80093a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	e009      	b.n	80093c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 fee1 	bl	800b17a <SDIO_GetResponse>
 80093b8:	4602      	mov	r2, r0
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e041      	b.n	800945e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fb f996 	bl	8004720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3304      	adds	r3, #4
 8009404:	4619      	mov	r1, r3
 8009406:	4610      	mov	r0, r2
 8009408:	f000 fc56 	bl	8009cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b01      	cmp	r3, #1
 800947a:	d001      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e044      	b.n	800950a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1d      	ldr	r2, [pc, #116]	@ (8009514 <HAL_TIM_Base_Start_IT+0xac>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d018      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x6c>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009518 <HAL_TIM_Base_Start_IT+0xb0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d013      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x6c>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b4:	d00e      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x6c>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a18      	ldr	r2, [pc, #96]	@ (800951c <HAL_TIM_Base_Start_IT+0xb4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d009      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x6c>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a16      	ldr	r2, [pc, #88]	@ (8009520 <HAL_TIM_Base_Start_IT+0xb8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_TIM_Base_Start_IT+0x6c>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <HAL_TIM_Base_Start_IT+0xbc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d111      	bne.n	80094f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b06      	cmp	r3, #6
 80094e4:	d010      	beq.n	8009508 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0201 	orr.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f6:	e007      	b.n	8009508 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40013400 	.word	0x40013400
 800951c:	40000400 	.word	0x40000400
 8009520:	40000800 	.word	0x40000800
 8009524:	40000c00 	.word	0x40000c00

08009528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e041      	b.n	80095be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f839 	bl	80095c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f000 fba6 	bl	8009cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bc80      	pop	{r7}
 80095d6:	4770      	bx	lr

080095d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <HAL_TIM_PWM_Start+0x24>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	bf14      	ite	ne
 80095f4:	2301      	movne	r3, #1
 80095f6:	2300      	moveq	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	e022      	b.n	8009642 <HAL_TIM_PWM_Start+0x6a>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d109      	bne.n	8009616 <HAL_TIM_PWM_Start+0x3e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	bf14      	ite	ne
 800960e:	2301      	movne	r3, #1
 8009610:	2300      	moveq	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	e015      	b.n	8009642 <HAL_TIM_PWM_Start+0x6a>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b08      	cmp	r3, #8
 800961a:	d109      	bne.n	8009630 <HAL_TIM_PWM_Start+0x58>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	bf14      	ite	ne
 8009628:	2301      	movne	r3, #1
 800962a:	2300      	moveq	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	e008      	b.n	8009642 <HAL_TIM_PWM_Start+0x6a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b01      	cmp	r3, #1
 800963a:	bf14      	ite	ne
 800963c:	2301      	movne	r3, #1
 800963e:	2300      	moveq	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e072      	b.n	8009730 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <HAL_TIM_PWM_Start+0x82>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009658:	e013      	b.n	8009682 <HAL_TIM_PWM_Start+0xaa>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b04      	cmp	r3, #4
 800965e:	d104      	bne.n	800966a <HAL_TIM_PWM_Start+0x92>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009668:	e00b      	b.n	8009682 <HAL_TIM_PWM_Start+0xaa>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b08      	cmp	r3, #8
 800966e:	d104      	bne.n	800967a <HAL_TIM_PWM_Start+0xa2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009678:	e003      	b.n	8009682 <HAL_TIM_PWM_Start+0xaa>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2202      	movs	r2, #2
 800967e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2201      	movs	r2, #1
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fdd0 	bl	800a230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a28      	ldr	r2, [pc, #160]	@ (8009738 <HAL_TIM_PWM_Start+0x160>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d004      	beq.n	80096a4 <HAL_TIM_PWM_Start+0xcc>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a27      	ldr	r2, [pc, #156]	@ (800973c <HAL_TIM_PWM_Start+0x164>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d101      	bne.n	80096a8 <HAL_TIM_PWM_Start+0xd0>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e000      	b.n	80096aa <HAL_TIM_PWM_Start+0xd2>
 80096a8:	2300      	movs	r3, #0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009738 <HAL_TIM_PWM_Start+0x160>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d018      	beq.n	80096fa <HAL_TIM_PWM_Start+0x122>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a1b      	ldr	r2, [pc, #108]	@ (800973c <HAL_TIM_PWM_Start+0x164>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d013      	beq.n	80096fa <HAL_TIM_PWM_Start+0x122>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096da:	d00e      	beq.n	80096fa <HAL_TIM_PWM_Start+0x122>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a17      	ldr	r2, [pc, #92]	@ (8009740 <HAL_TIM_PWM_Start+0x168>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d009      	beq.n	80096fa <HAL_TIM_PWM_Start+0x122>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a16      	ldr	r2, [pc, #88]	@ (8009744 <HAL_TIM_PWM_Start+0x16c>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d004      	beq.n	80096fa <HAL_TIM_PWM_Start+0x122>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a14      	ldr	r2, [pc, #80]	@ (8009748 <HAL_TIM_PWM_Start+0x170>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d111      	bne.n	800971e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b06      	cmp	r3, #6
 800970a:	d010      	beq.n	800972e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971c:	e007      	b.n	800972e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f042 0201 	orr.w	r2, r2, #1
 800972c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	40012c00 	.word	0x40012c00
 800973c:	40013400 	.word	0x40013400
 8009740:	40000400 	.word	0x40000400
 8009744:	40000800 	.word	0x40000800
 8009748:	40000c00 	.word	0x40000c00

0800974c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b02      	cmp	r3, #2
 8009760:	d122      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b02      	cmp	r3, #2
 800976e:	d11b      	bne.n	80097a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0202 	mvn.w	r2, #2
 8009778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fa76 	bl	8009c80 <HAL_TIM_IC_CaptureCallback>
 8009794:	e005      	b.n	80097a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa69 	bl	8009c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fa78 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d122      	bne.n	80097fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d11b      	bne.n	80097fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f06f 0204 	mvn.w	r2, #4
 80097cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fa4c 	bl	8009c80 <HAL_TIM_IC_CaptureCallback>
 80097e8:	e005      	b.n	80097f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa3f 	bl	8009c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fa4e 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0308 	and.w	r3, r3, #8
 8009806:	2b08      	cmp	r3, #8
 8009808:	d122      	bne.n	8009850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0308 	and.w	r3, r3, #8
 8009814:	2b08      	cmp	r3, #8
 8009816:	d11b      	bne.n	8009850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0208 	mvn.w	r2, #8
 8009820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa22 	bl	8009c80 <HAL_TIM_IC_CaptureCallback>
 800983c:	e005      	b.n	800984a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa15 	bl	8009c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fa24 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	2b10      	cmp	r3, #16
 800985c:	d122      	bne.n	80098a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b10      	cmp	r3, #16
 800986a:	d11b      	bne.n	80098a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f06f 0210 	mvn.w	r2, #16
 8009874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2208      	movs	r2, #8
 800987a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f9f8 	bl	8009c80 <HAL_TIM_IC_CaptureCallback>
 8009890:	e005      	b.n	800989e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f9eb 	bl	8009c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f9fa 	bl	8009c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d10e      	bne.n	80098d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d107      	bne.n	80098d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f06f 0201 	mvn.w	r2, #1
 80098c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7fa fc7e 	bl	80041cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098da:	2b80      	cmp	r3, #128	@ 0x80
 80098dc:	d10e      	bne.n	80098fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e8:	2b80      	cmp	r3, #128	@ 0x80
 80098ea:	d107      	bne.n	80098fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80098f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fd33 	bl	800a362 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009906:	2b40      	cmp	r3, #64	@ 0x40
 8009908:	d10e      	bne.n	8009928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	d107      	bne.n	8009928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f9be 	bl	8009ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b20      	cmp	r3, #32
 8009934:	d10e      	bne.n	8009954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f003 0320 	and.w	r3, r3, #32
 8009940:	2b20      	cmp	r3, #32
 8009942:	d107      	bne.n	8009954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f06f 0220 	mvn.w	r2, #32
 800994c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fcfe 	bl	800a350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009972:	2b01      	cmp	r3, #1
 8009974:	d101      	bne.n	800997a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009976:	2302      	movs	r3, #2
 8009978:	e0ae      	b.n	8009ad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b0c      	cmp	r3, #12
 8009986:	f200 809f 	bhi.w	8009ac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800998a:	a201      	add	r2, pc, #4	@ (adr r2, 8009990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009990:	080099c5 	.word	0x080099c5
 8009994:	08009ac9 	.word	0x08009ac9
 8009998:	08009ac9 	.word	0x08009ac9
 800999c:	08009ac9 	.word	0x08009ac9
 80099a0:	08009a05 	.word	0x08009a05
 80099a4:	08009ac9 	.word	0x08009ac9
 80099a8:	08009ac9 	.word	0x08009ac9
 80099ac:	08009ac9 	.word	0x08009ac9
 80099b0:	08009a47 	.word	0x08009a47
 80099b4:	08009ac9 	.word	0x08009ac9
 80099b8:	08009ac9 	.word	0x08009ac9
 80099bc:	08009ac9 	.word	0x08009ac9
 80099c0:	08009a87 	.word	0x08009a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f9ee 	bl	8009dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0208 	orr.w	r2, r2, #8
 80099de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f022 0204 	bic.w	r2, r2, #4
 80099ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6999      	ldr	r1, [r3, #24]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691a      	ldr	r2, [r3, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	619a      	str	r2, [r3, #24]
      break;
 8009a02:	e064      	b.n	8009ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fa3e 	bl	8009e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6999      	ldr	r1, [r3, #24]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	021a      	lsls	r2, r3, #8
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	619a      	str	r2, [r3, #24]
      break;
 8009a44:	e043      	b.n	8009ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fa91 	bl	8009f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0208 	orr.w	r2, r2, #8
 8009a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0204 	bic.w	r2, r2, #4
 8009a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69d9      	ldr	r1, [r3, #28]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	61da      	str	r2, [r3, #28]
      break;
 8009a84:	e023      	b.n	8009ace <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fae5 	bl	800a05c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69d9      	ldr	r1, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	021a      	lsls	r2, r3, #8
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	61da      	str	r2, [r3, #28]
      break;
 8009ac6:	e002      	b.n	8009ace <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	75fb      	strb	r3, [r7, #23]
      break;
 8009acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_TIM_ConfigClockSource+0x1c>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e0b4      	b.n	8009c66 <HAL_TIM_ConfigClockSource+0x186>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b34:	d03e      	beq.n	8009bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8009b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b3a:	f200 8087 	bhi.w	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b42:	f000 8086 	beq.w	8009c52 <HAL_TIM_ConfigClockSource+0x172>
 8009b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b4a:	d87f      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b4c:	2b70      	cmp	r3, #112	@ 0x70
 8009b4e:	d01a      	beq.n	8009b86 <HAL_TIM_ConfigClockSource+0xa6>
 8009b50:	2b70      	cmp	r3, #112	@ 0x70
 8009b52:	d87b      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b54:	2b60      	cmp	r3, #96	@ 0x60
 8009b56:	d050      	beq.n	8009bfa <HAL_TIM_ConfigClockSource+0x11a>
 8009b58:	2b60      	cmp	r3, #96	@ 0x60
 8009b5a:	d877      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b5c:	2b50      	cmp	r3, #80	@ 0x50
 8009b5e:	d03c      	beq.n	8009bda <HAL_TIM_ConfigClockSource+0xfa>
 8009b60:	2b50      	cmp	r3, #80	@ 0x50
 8009b62:	d873      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b64:	2b40      	cmp	r3, #64	@ 0x40
 8009b66:	d058      	beq.n	8009c1a <HAL_TIM_ConfigClockSource+0x13a>
 8009b68:	2b40      	cmp	r3, #64	@ 0x40
 8009b6a:	d86f      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b6c:	2b30      	cmp	r3, #48	@ 0x30
 8009b6e:	d064      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x15a>
 8009b70:	2b30      	cmp	r3, #48	@ 0x30
 8009b72:	d86b      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d060      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x15a>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d867      	bhi.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d05c      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x15a>
 8009b80:	2b10      	cmp	r3, #16
 8009b82:	d05a      	beq.n	8009c3a <HAL_TIM_ConfigClockSource+0x15a>
 8009b84:	e062      	b.n	8009c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b96:	f000 fb2c 	bl	800a1f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	609a      	str	r2, [r3, #8]
      break;
 8009bb2:	e04f      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bc4:	f000 fb15 	bl	800a1f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bd6:	609a      	str	r2, [r3, #8]
      break;
 8009bd8:	e03c      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009be6:	461a      	mov	r2, r3
 8009be8:	f000 fa8c 	bl	800a104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2150      	movs	r1, #80	@ 0x50
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fae3 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009bf8:	e02c      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c06:	461a      	mov	r2, r3
 8009c08:	f000 faaa 	bl	800a160 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2160      	movs	r1, #96	@ 0x60
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fad3 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009c18:	e01c      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c26:	461a      	mov	r2, r3
 8009c28:	f000 fa6c 	bl	800a104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2140      	movs	r1, #64	@ 0x40
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fac3 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009c38:	e00c      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f000 faba 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009c4a:	e003      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c50:	e000      	b.n	8009c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bc80      	pop	{r7}
 8009c7e:	4770      	bx	lr

08009c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr

08009c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bc80      	pop	{r7}
 8009cb4:	4770      	bx	lr
	...

08009cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a33      	ldr	r2, [pc, #204]	@ (8009d98 <TIM_Base_SetConfig+0xe0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d013      	beq.n	8009cf8 <TIM_Base_SetConfig+0x40>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a32      	ldr	r2, [pc, #200]	@ (8009d9c <TIM_Base_SetConfig+0xe4>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00f      	beq.n	8009cf8 <TIM_Base_SetConfig+0x40>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cde:	d00b      	beq.n	8009cf8 <TIM_Base_SetConfig+0x40>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8009da0 <TIM_Base_SetConfig+0xe8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d007      	beq.n	8009cf8 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a2e      	ldr	r2, [pc, #184]	@ (8009da4 <TIM_Base_SetConfig+0xec>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_Base_SetConfig+0x40>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8009da8 <TIM_Base_SetConfig+0xf0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d108      	bne.n	8009d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a22      	ldr	r2, [pc, #136]	@ (8009d98 <TIM_Base_SetConfig+0xe0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <TIM_Base_SetConfig+0x82>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a21      	ldr	r2, [pc, #132]	@ (8009d9c <TIM_Base_SetConfig+0xe4>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00f      	beq.n	8009d3a <TIM_Base_SetConfig+0x82>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d20:	d00b      	beq.n	8009d3a <TIM_Base_SetConfig+0x82>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a1e      	ldr	r2, [pc, #120]	@ (8009da0 <TIM_Base_SetConfig+0xe8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d007      	beq.n	8009d3a <TIM_Base_SetConfig+0x82>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009da4 <TIM_Base_SetConfig+0xec>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d003      	beq.n	8009d3a <TIM_Base_SetConfig+0x82>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a1c      	ldr	r2, [pc, #112]	@ (8009da8 <TIM_Base_SetConfig+0xf0>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d108      	bne.n	8009d4c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a09      	ldr	r2, [pc, #36]	@ (8009d98 <TIM_Base_SetConfig+0xe0>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_Base_SetConfig+0xc8>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a08      	ldr	r2, [pc, #32]	@ (8009d9c <TIM_Base_SetConfig+0xe4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d103      	bne.n	8009d88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691a      	ldr	r2, [r3, #16]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	615a      	str	r2, [r3, #20]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr
 8009d98:	40012c00 	.word	0x40012c00
 8009d9c:	40013400 	.word	0x40013400
 8009da0:	40000400 	.word	0x40000400
 8009da4:	40000800 	.word	0x40000800
 8009da8:	40000c00 	.word	0x40000c00

08009dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	f023 0201 	bic.w	r2, r3, #1
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0303 	bic.w	r3, r3, #3
 8009de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0302 	bic.w	r3, r3, #2
 8009df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a20      	ldr	r2, [pc, #128]	@ (8009e84 <TIM_OC1_SetConfig+0xd8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d003      	beq.n	8009e10 <TIM_OC1_SetConfig+0x64>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8009e88 <TIM_OC1_SetConfig+0xdc>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d10c      	bne.n	8009e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f023 0308 	bic.w	r3, r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f023 0304 	bic.w	r3, r3, #4
 8009e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a15      	ldr	r2, [pc, #84]	@ (8009e84 <TIM_OC1_SetConfig+0xd8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d003      	beq.n	8009e3a <TIM_OC1_SetConfig+0x8e>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a14      	ldr	r2, [pc, #80]	@ (8009e88 <TIM_OC1_SetConfig+0xdc>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d111      	bne.n	8009e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	621a      	str	r2, [r3, #32]
}
 8009e78:	bf00      	nop
 8009e7a:	371c      	adds	r7, #28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	40012c00 	.word	0x40012c00
 8009e88:	40013400 	.word	0x40013400

08009e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	f023 0210 	bic.w	r2, r3, #16
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	021b      	lsls	r3, r3, #8
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f023 0320 	bic.w	r3, r3, #32
 8009ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a21      	ldr	r2, [pc, #132]	@ (8009f6c <TIM_OC2_SetConfig+0xe0>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d003      	beq.n	8009ef4 <TIM_OC2_SetConfig+0x68>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a20      	ldr	r2, [pc, #128]	@ (8009f70 <TIM_OC2_SetConfig+0xe4>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d10d      	bne.n	8009f10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	011b      	lsls	r3, r3, #4
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a16      	ldr	r2, [pc, #88]	@ (8009f6c <TIM_OC2_SetConfig+0xe0>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d003      	beq.n	8009f20 <TIM_OC2_SetConfig+0x94>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a15      	ldr	r2, [pc, #84]	@ (8009f70 <TIM_OC2_SetConfig+0xe4>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d113      	bne.n	8009f48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	621a      	str	r2, [r3, #32]
}
 8009f62:	bf00      	nop
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr
 8009f6c:	40012c00 	.word	0x40012c00
 8009f70:	40013400 	.word	0x40013400

08009f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0303 	bic.w	r3, r3, #3
 8009faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a21      	ldr	r2, [pc, #132]	@ (800a054 <TIM_OC3_SetConfig+0xe0>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d003      	beq.n	8009fda <TIM_OC3_SetConfig+0x66>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a20      	ldr	r2, [pc, #128]	@ (800a058 <TIM_OC3_SetConfig+0xe4>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d10d      	bne.n	8009ff6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a16      	ldr	r2, [pc, #88]	@ (800a054 <TIM_OC3_SetConfig+0xe0>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d003      	beq.n	800a006 <TIM_OC3_SetConfig+0x92>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a15      	ldr	r2, [pc, #84]	@ (800a058 <TIM_OC3_SetConfig+0xe4>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d113      	bne.n	800a02e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	011b      	lsls	r3, r3, #4
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	621a      	str	r2, [r3, #32]
}
 800a048:	bf00      	nop
 800a04a:	371c      	adds	r7, #28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bc80      	pop	{r7}
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40012c00 	.word	0x40012c00
 800a058:	40013400 	.word	0x40013400

0800a05c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	021b      	lsls	r3, r3, #8
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	031b      	lsls	r3, r3, #12
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a11      	ldr	r2, [pc, #68]	@ (800a0fc <TIM_OC4_SetConfig+0xa0>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <TIM_OC4_SetConfig+0x68>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a10      	ldr	r2, [pc, #64]	@ (800a100 <TIM_OC4_SetConfig+0xa4>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d109      	bne.n	800a0d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	019b      	lsls	r3, r3, #6
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bc80      	pop	{r7}
 800a0fa:	4770      	bx	lr
 800a0fc:	40012c00 	.word	0x40012c00
 800a100:	40013400 	.word	0x40013400

0800a104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a12e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f023 030a 	bic.w	r3, r3, #10
 800a140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bc80      	pop	{r7}
 800a15e:	4770      	bx	lr

0800a160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	f023 0210 	bic.w	r2, r3, #16
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a18a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	031b      	lsls	r3, r3, #12
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	4313      	orrs	r3, r2
 800a194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a19c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	011b      	lsls	r3, r3, #4
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	621a      	str	r2, [r3, #32]
}
 800a1b4:	bf00      	nop
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bc80      	pop	{r7}
 800a1bc:	4770      	bx	lr

0800a1be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b085      	sub	sp, #20
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	f043 0307 	orr.w	r3, r3, #7
 800a1e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr

0800a1f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b087      	sub	sp, #28
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a20c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	021a      	lsls	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	431a      	orrs	r2, r3
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4313      	orrs	r3, r2
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	609a      	str	r2, [r3, #8]
}
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bc80      	pop	{r7}
 800a22e:	4770      	bx	lr

0800a230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f003 031f 	and.w	r3, r3, #31
 800a242:	2201      	movs	r2, #1
 800a244:	fa02 f303 	lsl.w	r3, r2, r3
 800a248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6a1a      	ldr	r2, [r3, #32]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	43db      	mvns	r3, r3
 800a252:	401a      	ands	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 031f 	and.w	r3, r3, #31
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	fa01 f303 	lsl.w	r3, r1, r3
 800a268:	431a      	orrs	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	621a      	str	r2, [r3, #32]
}
 800a26e:	bf00      	nop
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr

0800a278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e050      	b.n	800a332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a33c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d018      	beq.n	800a306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a19      	ldr	r2, [pc, #100]	@ (800a340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d013      	beq.n	800a306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2e6:	d00e      	beq.n	800a306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a15      	ldr	r2, [pc, #84]	@ (800a344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d009      	beq.n	800a306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a14      	ldr	r2, [pc, #80]	@ (800a348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d004      	beq.n	800a306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a12      	ldr	r2, [pc, #72]	@ (800a34c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d10c      	bne.n	800a320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a30c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	4313      	orrs	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr
 800a33c:	40012c00 	.word	0x40012c00
 800a340:	40013400 	.word	0x40013400
 800a344:	40000400 	.word	0x40000400
 800a348:	40000800 	.word	0x40000800
 800a34c:	40000c00 	.word	0x40000c00

0800a350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr

0800a362 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	bc80      	pop	{r7}
 800a372:	4770      	bx	lr

0800a374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e042      	b.n	800a40c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7fa facc 	bl	8004938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2224      	movs	r2, #36	@ 0x24
 800a3a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fdbb 	bl	800af34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695a      	ldr	r2, [r3, #20]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a3dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68da      	ldr	r2, [r3, #12]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a3ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	@ 0x28
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	4613      	mov	r3, r2
 800a422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b20      	cmp	r3, #32
 800a432:	d16d      	bne.n	800a510 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <HAL_UART_Transmit+0x2c>
 800a43a:	88fb      	ldrh	r3, [r7, #6]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e066      	b.n	800a512 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2221      	movs	r2, #33	@ 0x21
 800a44e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a452:	f7fb f983 	bl	800575c <HAL_GetTick>
 800a456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	88fa      	ldrh	r2, [r7, #6]
 800a462:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a46c:	d108      	bne.n	800a480 <HAL_UART_Transmit+0x6c>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d104      	bne.n	800a480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a476:	2300      	movs	r3, #0
 800a478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	e003      	b.n	800a488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a488:	e02a      	b.n	800a4e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2200      	movs	r2, #0
 800a492:	2180      	movs	r1, #128	@ 0x80
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fb0b 	bl	800aab0 <UART_WaitOnFlagUntilTimeout>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e036      	b.n	800a512 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10b      	bne.n	800a4c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	3302      	adds	r3, #2
 800a4be:	61bb      	str	r3, [r7, #24]
 800a4c0:	e007      	b.n	800a4d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1cf      	bne.n	800a48a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2140      	movs	r1, #64	@ 0x40
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fadb 	bl	800aab0 <UART_WaitOnFlagUntilTimeout>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e006      	b.n	800a512 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2220      	movs	r2, #32
 800a508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e000      	b.n	800a512 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a510:	2302      	movs	r3, #2
  }
}
 800a512:	4618      	mov	r0, r3
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	4613      	mov	r3, r2
 800a526:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b20      	cmp	r3, #32
 800a532:	d112      	bne.n	800a55a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <HAL_UART_Receive_IT+0x26>
 800a53a:	88fb      	ldrh	r3, [r7, #6]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e00b      	b.n	800a55c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a54a:	88fb      	ldrh	r3, [r7, #6]
 800a54c:	461a      	mov	r2, r3
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fb1b 	bl	800ab8c <UART_Start_Receive_IT>
 800a556:	4603      	mov	r3, r0
 800a558:	e000      	b.n	800a55c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a55a:	2302      	movs	r3, #2
  }
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b0ba      	sub	sp, #232	@ 0xe8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a590:	2300      	movs	r3, #0
 800a592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a59a:	f003 030f 	and.w	r3, r3, #15
 800a59e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a5a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10f      	bne.n	800a5ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d009      	beq.n	800a5ca <HAL_UART_IRQHandler+0x66>
 800a5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fbf8 	bl	800adb8 <UART_Receive_IT>
      return;
 800a5c8:	e25b      	b.n	800aa82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 80de 	beq.w	800a790 <HAL_UART_IRQHandler+0x22c>
 800a5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d106      	bne.n	800a5ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 80d1 	beq.w	800a790 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00b      	beq.n	800a612 <HAL_UART_IRQHandler+0xae>
 800a5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a60a:	f043 0201 	orr.w	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00b      	beq.n	800a636 <HAL_UART_IRQHandler+0xd2>
 800a61e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a62e:	f043 0202 	orr.w	r2, r3, #2
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <HAL_UART_IRQHandler+0xf6>
 800a642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a652:	f043 0204 	orr.w	r2, r3, #4
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	2b00      	cmp	r3, #0
 800a664:	d011      	beq.n	800a68a <HAL_UART_IRQHandler+0x126>
 800a666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a66a:	f003 0320 	and.w	r3, r3, #32
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a682:	f043 0208 	orr.w	r2, r3, #8
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 81f2 	beq.w	800aa78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x14e>
 800a6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fb83 	bl	800adb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bf14      	ite	ne
 800a6c0:	2301      	movne	r3, #1
 800a6c2:	2300      	moveq	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ce:	f003 0308 	and.w	r3, r3, #8
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d103      	bne.n	800a6de <HAL_UART_IRQHandler+0x17a>
 800a6d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d04f      	beq.n	800a77e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa8d 	bl	800abfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d041      	beq.n	800a776 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3314      	adds	r3, #20
 800a6f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a700:	e853 3f00 	ldrex	r3, [r3]
 800a704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a70c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3314      	adds	r3, #20
 800a71a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a71e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a72a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1d9      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d013      	beq.n	800a76e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74a:	4a7e      	ldr	r2, [pc, #504]	@ (800a944 <HAL_UART_IRQHandler+0x3e0>)
 800a74c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a752:	4618      	mov	r0, r3
 800a754:	f7fb f94a 	bl	80059ec <HAL_DMA_Abort_IT>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d016      	beq.n	800a78c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a768:	4610      	mov	r0, r2
 800a76a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a76c:	e00e      	b.n	800a78c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f98a 	bl	800aa88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a774:	e00a      	b.n	800a78c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f986 	bl	800aa88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a77c:	e006      	b.n	800a78c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f982 	bl	800aa88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a78a:	e175      	b.n	800aa78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78c:	bf00      	nop
    return;
 800a78e:	e173      	b.n	800aa78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a794:	2b01      	cmp	r3, #1
 800a796:	f040 814f 	bne.w	800aa38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79e:	f003 0310 	and.w	r3, r3, #16
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 8148 	beq.w	800aa38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8141 	beq.w	800aa38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60bb      	str	r3, [r7, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	60bb      	str	r3, [r7, #8]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	60bb      	str	r3, [r7, #8]
 800a7ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 80b6 	beq.w	800a948 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8145 	beq.w	800aa7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	f080 813e 	bcs.w	800aa7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a806:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	2b20      	cmp	r3, #32
 800a810:	f000 8088 	beq.w	800a924 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	330c      	adds	r3, #12
 800a81a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a82a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a82e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a832:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	330c      	adds	r3, #12
 800a83c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a840:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a844:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a84c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1d9      	bne.n	800a814 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3314      	adds	r3, #20
 800a866:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a872:	f023 0301 	bic.w	r3, r3, #1
 800a876:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3314      	adds	r3, #20
 800a880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a884:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a888:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a88c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e1      	bne.n	800a860 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3314      	adds	r3, #20
 800a8bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e3      	bne.n	800a89c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8f4:	f023 0310 	bic.w	r3, r3, #16
 800a8f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	330c      	adds	r3, #12
 800a902:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a906:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a908:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a90c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e3      	bne.n	800a8e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fb f829 	bl	8005976 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a932:	b29b      	uxth	r3, r3
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	b29b      	uxth	r3, r3
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f8ad 	bl	800aa9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a940:	e09c      	b.n	800aa7c <HAL_UART_IRQHandler+0x518>
 800a942:	bf00      	nop
 800a944:	0800acc3 	.word	0x0800acc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a950:	b29b      	uxth	r3, r3
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 808e 	beq.w	800aa80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 8089 	beq.w	800aa80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	330c      	adds	r3, #12
 800a974:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a984:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a992:	647a      	str	r2, [r7, #68]	@ 0x44
 800a994:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e3      	bne.n	800a96e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3314      	adds	r3, #20
 800a9ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	f023 0301 	bic.w	r3, r3, #1
 800a9bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3314      	adds	r3, #20
 800a9c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a9ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e3      	bne.n	800a9a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	330c      	adds	r3, #12
 800a9f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	e853 3f00 	ldrex	r3, [r3]
 800a9fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f023 0310 	bic.w	r3, r3, #16
 800aa02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800aa10:	61fa      	str	r2, [r7, #28]
 800aa12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	69b9      	ldr	r1, [r7, #24]
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e3      	bne.n	800a9ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f832 	bl	800aa9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa36:	e023      	b.n	800aa80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d009      	beq.n	800aa58 <HAL_UART_IRQHandler+0x4f4>
 800aa44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f94a 	bl	800acea <UART_Transmit_IT>
    return;
 800aa56:	e014      	b.n	800aa82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00e      	beq.n	800aa82 <HAL_UART_IRQHandler+0x51e>
 800aa64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d008      	beq.n	800aa82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 f989 	bl	800ad88 <UART_EndTransmit_IT>
    return;
 800aa76:	e004      	b.n	800aa82 <HAL_UART_IRQHandler+0x51e>
    return;
 800aa78:	bf00      	nop
 800aa7a:	e002      	b.n	800aa82 <HAL_UART_IRQHandler+0x51e>
      return;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <HAL_UART_IRQHandler+0x51e>
      return;
 800aa80:	bf00      	nop
  }
}
 800aa82:	37e8      	adds	r7, #232	@ 0xe8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bc80      	pop	{r7}
 800aa98:	4770      	bx	lr

0800aa9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b083      	sub	sp, #12
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aaa6:	bf00      	nop
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr

0800aab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b090      	sub	sp, #64	@ 0x40
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	4613      	mov	r3, r2
 800aabe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aac0:	e050      	b.n	800ab64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d04c      	beq.n	800ab64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aaca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d007      	beq.n	800aae0 <UART_WaitOnFlagUntilTimeout+0x30>
 800aad0:	f7fa fe44 	bl	800575c <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aadc:	429a      	cmp	r2, r3
 800aade:	d241      	bcs.n	800ab64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	330c      	adds	r3, #12
 800aae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaea:	e853 3f00 	ldrex	r3, [r3]
 800aaee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800aaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	330c      	adds	r3, #12
 800aafe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab00:	637a      	str	r2, [r7, #52]	@ 0x34
 800ab02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ab0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e5      	bne.n	800aae0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3314      	adds	r3, #20
 800ab1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	613b      	str	r3, [r7, #16]
   return(result);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f023 0301 	bic.w	r3, r3, #1
 800ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3314      	adds	r3, #20
 800ab32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab34:	623a      	str	r2, [r7, #32]
 800ab36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	69f9      	ldr	r1, [r7, #28]
 800ab3a:	6a3a      	ldr	r2, [r7, #32]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e5      	bne.n	800ab14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e00f      	b.n	800ab84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	bf0c      	ite	eq
 800ab74:	2301      	moveq	r3, #1
 800ab76:	2300      	movne	r3, #0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d09f      	beq.n	800aac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3740      	adds	r7, #64	@ 0x40
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	88fa      	ldrh	r2, [r7, #6]
 800aba4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	88fa      	ldrh	r2, [r7, #6]
 800abaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2222      	movs	r2, #34	@ 0x22
 800abb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695a      	ldr	r2, [r3, #20]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0201 	orr.w	r2, r2, #1
 800abe0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f042 0220 	orr.w	r2, r2, #32
 800abf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc80      	pop	{r7}
 800abfc:	4770      	bx	lr

0800abfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b095      	sub	sp, #84	@ 0x54
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	330c      	adds	r3, #12
 800ac0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	330c      	adds	r3, #12
 800ac24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac26:	643a      	str	r2, [r7, #64]	@ 0x40
 800ac28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e5      	bne.n	800ac06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3314      	adds	r3, #20
 800ac58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e5      	bne.n	800ac3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d119      	bne.n	800acaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	330c      	adds	r3, #12
 800ac7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f023 0310 	bic.w	r3, r3, #16
 800ac8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	330c      	adds	r3, #12
 800ac94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac96:	61ba      	str	r2, [r7, #24]
 800ac98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9a:	6979      	ldr	r1, [r7, #20]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	e841 2300 	strex	r3, r2, [r1]
 800aca2:	613b      	str	r3, [r7, #16]
   return(result);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e5      	bne.n	800ac76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2220      	movs	r2, #32
 800acae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800acb8:	bf00      	nop
 800acba:	3754      	adds	r7, #84	@ 0x54
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bc80      	pop	{r7}
 800acc0:	4770      	bx	lr

0800acc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff fed3 	bl	800aa88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b21      	cmp	r3, #33	@ 0x21
 800acfc:	d13e      	bne.n	800ad7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad06:	d114      	bne.n	800ad32 <UART_Transmit_IT+0x48>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d110      	bne.n	800ad32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	1c9a      	adds	r2, r3, #2
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	621a      	str	r2, [r3, #32]
 800ad30:	e008      	b.n	800ad44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	1c59      	adds	r1, r3, #1
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6211      	str	r1, [r2, #32]
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	4619      	mov	r1, r3
 800ad52:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10f      	bne.n	800ad78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68da      	ldr	r2, [r3, #12]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e000      	b.n	800ad7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad7c:	2302      	movs	r3, #2
  }
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bc80      	pop	{r7}
 800ad86:	4770      	bx	lr

0800ad88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2220      	movs	r2, #32
 800ada4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7f8 fcde 	bl	800376a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	@ 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b22      	cmp	r3, #34	@ 0x22
 800adca:	f040 80ae 	bne.w	800af2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800add6:	d117      	bne.n	800ae08 <UART_Receive_IT+0x50>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d113      	bne.n	800ae08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ade0:	2300      	movs	r3, #0
 800ade2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae00:	1c9a      	adds	r2, r3, #2
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae06:	e026      	b.n	800ae56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae1a:	d007      	beq.n	800ae2c <UART_Receive_IT+0x74>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <UART_Receive_IT+0x82>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d106      	bne.n	800ae3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	e008      	b.n	800ae4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae50:	1c5a      	adds	r2, r3, #1
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	4619      	mov	r1, r3
 800ae64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d15d      	bne.n	800af26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68da      	ldr	r2, [r3, #12]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0220 	bic.w	r2, r2, #32
 800ae78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68da      	ldr	r2, [r3, #12]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	695a      	ldr	r2, [r3, #20]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0201 	bic.w	r2, r2, #1
 800ae98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d135      	bne.n	800af1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	330c      	adds	r3, #12
 800aebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	e853 3f00 	ldrex	r3, [r3]
 800aec4:	613b      	str	r3, [r7, #16]
   return(result);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f023 0310 	bic.w	r3, r3, #16
 800aecc:	627b      	str	r3, [r7, #36]	@ 0x24
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	330c      	adds	r3, #12
 800aed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aed6:	623a      	str	r2, [r7, #32]
 800aed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeda:	69f9      	ldr	r1, [r7, #28]
 800aedc:	6a3a      	ldr	r2, [r7, #32]
 800aede:	e841 2300 	strex	r3, r2, [r1]
 800aee2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1e5      	bne.n	800aeb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0310 	and.w	r3, r3, #16
 800aef4:	2b10      	cmp	r3, #16
 800aef6:	d10a      	bne.n	800af0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fdc0 	bl	800aa9a <HAL_UARTEx_RxEventCallback>
 800af1a:	e002      	b.n	800af22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7f8 fc0b 	bl	8003738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	e002      	b.n	800af2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	e000      	b.n	800af2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800af2a:	2302      	movs	r3, #2
  }
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3730      	adds	r7, #48	@ 0x30
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	4313      	orrs	r3, r2
 800af62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800af6e:	f023 030c 	bic.w	r3, r3, #12
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	6812      	ldr	r2, [r2, #0]
 800af76:	68b9      	ldr	r1, [r7, #8]
 800af78:	430b      	orrs	r3, r1
 800af7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a2c      	ldr	r2, [pc, #176]	@ (800b048 <UART_SetConfig+0x114>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d103      	bne.n	800afa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800af9c:	f7fd fa2a 	bl	80083f4 <HAL_RCC_GetPCLK2Freq>
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	e002      	b.n	800afaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800afa4:	f7fd fa12 	bl	80083cc <HAL_RCC_GetPCLK1Freq>
 800afa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	009a      	lsls	r2, r3, #2
 800afb4:	441a      	add	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc0:	4a22      	ldr	r2, [pc, #136]	@ (800b04c <UART_SetConfig+0x118>)
 800afc2:	fba2 2303 	umull	r2, r3, r2, r3
 800afc6:	095b      	lsrs	r3, r3, #5
 800afc8:	0119      	lsls	r1, r3, #4
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4613      	mov	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	009a      	lsls	r2, r3, #2
 800afd4:	441a      	add	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	fbb2 f2f3 	udiv	r2, r2, r3
 800afe0:	4b1a      	ldr	r3, [pc, #104]	@ (800b04c <UART_SetConfig+0x118>)
 800afe2:	fba3 0302 	umull	r0, r3, r3, r2
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	2064      	movs	r0, #100	@ 0x64
 800afea:	fb00 f303 	mul.w	r3, r0, r3
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	011b      	lsls	r3, r3, #4
 800aff2:	3332      	adds	r3, #50	@ 0x32
 800aff4:	4a15      	ldr	r2, [pc, #84]	@ (800b04c <UART_SetConfig+0x118>)
 800aff6:	fba2 2303 	umull	r2, r3, r2, r3
 800affa:	095b      	lsrs	r3, r3, #5
 800affc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b000:	4419      	add	r1, r3
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009a      	lsls	r2, r3, #2
 800b00c:	441a      	add	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	fbb2 f2f3 	udiv	r2, r2, r3
 800b018:	4b0c      	ldr	r3, [pc, #48]	@ (800b04c <UART_SetConfig+0x118>)
 800b01a:	fba3 0302 	umull	r0, r3, r3, r2
 800b01e:	095b      	lsrs	r3, r3, #5
 800b020:	2064      	movs	r0, #100	@ 0x64
 800b022:	fb00 f303 	mul.w	r3, r0, r3
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	3332      	adds	r3, #50	@ 0x32
 800b02c:	4a07      	ldr	r2, [pc, #28]	@ (800b04c <UART_SetConfig+0x118>)
 800b02e:	fba2 2303 	umull	r2, r3, r2, r3
 800b032:	095b      	lsrs	r3, r3, #5
 800b034:	f003 020f 	and.w	r2, r3, #15
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	440a      	add	r2, r1
 800b03e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b040:	bf00      	nop
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	40013800 	.word	0x40013800
 800b04c:	51eb851f 	.word	0x51eb851f

0800b050 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b050:	b084      	sub	sp, #16
 800b052:	b480      	push	{r7}
 800b054:	b085      	sub	sp, #20
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	f107 001c 	add.w	r0, r7, #28
 800b05e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b066:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b068:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b06a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b06e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b072:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b076:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b07a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	4313      	orrs	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800b08a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	431a      	orrs	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bc80      	pop	{r7}
 800b0a0:	b004      	add	sp, #16
 800b0a2:	4770      	bx	lr

0800b0a4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bc80      	pop	{r7}
 800b0ba:	4770      	bx	lr

0800b0bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bc80      	pop	{r7}
 800b0da:	4770      	bx	lr

0800b0dc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2203      	movs	r2, #3
 800b0e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bc80      	pop	{r7}
 800b0f4:	4770      	bx	lr

0800b0f6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0303 	and.w	r3, r3, #3
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bc80      	pop	{r7}
 800b10e:	4770      	bx	lr

0800b110 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b12e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b134:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b13a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b14a:	f023 030f 	bic.w	r3, r3, #15
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	431a      	orrs	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bc80      	pop	{r7}
 800b160:	4770      	bx	lr

0800b162 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	b2db      	uxtb	r3, r3
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	bc80      	pop	{r7}
 800b178:	4770      	bx	lr

0800b17a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3314      	adds	r3, #20
 800b188:	461a      	mov	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	4413      	add	r3, r2
 800b18e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
}  
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	bc80      	pop	{r7}
 800b19c:	4770      	bx	lr

0800b19e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1c4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b1ca:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b1d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0

}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bc80      	pop	{r7}
 800b1f2:	4770      	bx	lr

0800b1f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b202:	2310      	movs	r3, #16
 800b204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b206:	2340      	movs	r3, #64	@ 0x40
 800b208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b20e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b214:	f107 0308 	add.w	r3, r7, #8
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff ff78 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b220:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b224:	2110      	movs	r1, #16
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f9d6 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b22c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b22e:	69fb      	ldr	r3, [r7, #28]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b246:	2311      	movs	r3, #17
 800b248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b24a:	2340      	movs	r3, #64	@ 0x40
 800b24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b24e:	2300      	movs	r3, #0
 800b250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b258:	f107 0308 	add.w	r3, r7, #8
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff ff56 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b264:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b268:	2111      	movs	r1, #17
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f9b4 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b272:	69fb      	ldr	r3, [r7, #28]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b28a:	2312      	movs	r3, #18
 800b28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b28e:	2340      	movs	r3, #64	@ 0x40
 800b290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b292:	2300      	movs	r3, #0
 800b294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b29a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b29c:	f107 0308 	add.w	r3, r7, #8
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff ff34 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b2a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2ac:	2112      	movs	r1, #18
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f992 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b2b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2b6:	69fb      	ldr	r3, [r7, #28]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b2ce:	2318      	movs	r3, #24
 800b2d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2d2:	2340      	movs	r3, #64	@ 0x40
 800b2d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2e0:	f107 0308 	add.w	r3, r7, #8
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ff12 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b2ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2f0:	2118      	movs	r1, #24
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f970 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3720      	adds	r7, #32
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b312:	2319      	movs	r3, #25
 800b314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b316:	2340      	movs	r3, #64	@ 0x40
 800b318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b31a:	2300      	movs	r3, #0
 800b31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b31e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b322:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b324:	f107 0308 	add.w	r3, r7, #8
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fef0 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b330:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b334:	2119      	movs	r1, #25
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f94e 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b33e:	69fb      	ldr	r3, [r7, #28]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3720      	adds	r7, #32
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b350:	2300      	movs	r3, #0
 800b352:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b354:	230c      	movs	r3, #12
 800b356:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b358:	2340      	movs	r3, #64	@ 0x40
 800b35a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b35c:	2300      	movs	r3, #0
 800b35e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b364:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b366:	f107 0308 	add.w	r3, r7, #8
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff fecf 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b372:	4a05      	ldr	r2, [pc, #20]	@ (800b388 <SDMMC_CmdStopTransfer+0x40>)
 800b374:	210c      	movs	r1, #12
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f92e 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b37e:	69fb      	ldr	r3, [r7, #28]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	05f5e100 	.word	0x05f5e100

0800b38c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08a      	sub	sp, #40	@ 0x28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b39c:	2307      	movs	r3, #7
 800b39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3a0:	2340      	movs	r3, #64	@ 0x40
 800b3a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3ac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3ae:	f107 0310 	add.w	r3, r7, #16
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7ff feab 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b3ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3be:	2107      	movs	r1, #7
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 f909 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b3c6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3728      	adds	r7, #40	@ 0x28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b088      	sub	sp, #32
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3f0:	f107 0308 	add.w	r3, r7, #8
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff fe8a 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fb21 	bl	800ba44 <SDMMC_GetCmdError>
 800b402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b404:	69fb      	ldr	r3, [r7, #28]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b088      	sub	sp, #32
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b416:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b41a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b41c:	2308      	movs	r3, #8
 800b41e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b420:	2340      	movs	r3, #64	@ 0x40
 800b422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b42c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fe6b 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fab4 	bl	800b9a8 <SDMMC_GetCmdResp7>
 800b440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b442:	69fb      	ldr	r3, [r7, #28]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b45a:	2337      	movs	r3, #55	@ 0x37
 800b45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b45e:	2340      	movs	r3, #64	@ 0x40
 800b460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b46a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b46c:	f107 0308 	add.w	r3, r7, #8
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fe4c 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b47c:	2137      	movs	r1, #55	@ 0x37
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f8aa 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b486:	69fb      	ldr	r3, [r7, #28]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3720      	adds	r7, #32
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b4a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b4a6:	2329      	movs	r3, #41	@ 0x29
 800b4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4aa:	2340      	movs	r3, #64	@ 0x40
 800b4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4b8:	f107 0308 	add.w	r3, r7, #8
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fe26 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f9bd 	bl	800b844 <SDMMC_GetCmdResp3>
 800b4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b088      	sub	sp, #32
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b4e6:	23c0      	movs	r3, #192	@ 0xc0
 800b4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f4:	f107 0308 	add.w	r3, r7, #8
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff fe08 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f957 	bl	800b7b4 <SDMMC_GetCmdResp2>
 800b506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b508:	69fb      	ldr	r3, [r7, #28]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3720      	adds	r7, #32
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b088      	sub	sp, #32
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b520:	2309      	movs	r3, #9
 800b522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b524:	23c0      	movs	r3, #192	@ 0xc0
 800b526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b528:	2300      	movs	r3, #0
 800b52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b52c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b532:	f107 0308 	add.w	r3, r7, #8
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fde9 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f938 	bl	800b7b4 <SDMMC_GetCmdResp2>
 800b544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b546:	69fb      	ldr	r3, [r7, #28]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3720      	adds	r7, #32
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b55e:	2303      	movs	r3, #3
 800b560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b562:	2340      	movs	r3, #64	@ 0x40
 800b564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b56e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b570:	f107 0308 	add.w	r3, r7, #8
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7ff fdca 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	2103      	movs	r1, #3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f99b 	bl	800b8bc <SDMMC_GetCmdResp6>
 800b586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b588:	69fb      	ldr	r3, [r7, #28]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3720      	adds	r7, #32
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b088      	sub	sp, #32
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5a0:	230d      	movs	r3, #13
 800b5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5a4:	2340      	movs	r3, #64	@ 0x40
 800b5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fda9 	bl	800b110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b5be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5c2:	210d      	movs	r1, #13
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f807 	bl	800b5d8 <SDMMC_GetCmdResp1>
 800b5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3720      	adds	r7, #32
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5e6:	4b70      	ldr	r3, [pc, #448]	@ (800b7a8 <SDMMC_GetCmdResp1+0x1d0>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a70      	ldr	r2, [pc, #448]	@ (800b7ac <SDMMC_GetCmdResp1+0x1d4>)
 800b5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f0:	0a5a      	lsrs	r2, r3, #9
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	fb02 f303 	mul.w	r3, r2, r3
 800b5f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	61fa      	str	r2, [r7, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b604:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b608:	e0c9      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b60e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0ef      	beq.n	800b5fa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1ea      	bne.n	800b5fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b628:	f003 0304 	and.w	r3, r3, #4
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d004      	beq.n	800b63a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2204      	movs	r2, #4
 800b634:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b636:	2304      	movs	r3, #4
 800b638:	e0b1      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	d004      	beq.n	800b650 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e0a6      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	22c5      	movs	r2, #197	@ 0xc5
 800b654:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff fd83 	bl	800b162 <SDIO_GetCommandResponse>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	7afb      	ldrb	r3, [r7, #11]
 800b662:	4293      	cmp	r3, r2
 800b664:	d001      	beq.n	800b66a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b666:	2301      	movs	r3, #1
 800b668:	e099      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b66a:	2100      	movs	r1, #0
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7ff fd84 	bl	800b17a <SDIO_GetResponse>
 800b672:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	4b4e      	ldr	r3, [pc, #312]	@ (800b7b0 <SDMMC_GetCmdResp1+0x1d8>)
 800b678:	4013      	ands	r3, r2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b67e:	2300      	movs	r3, #0
 800b680:	e08d      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	da02      	bge.n	800b68e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b68c:	e087      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b698:	2340      	movs	r3, #64	@ 0x40
 800b69a:	e080      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6a6:	2380      	movs	r3, #128	@ 0x80
 800b6a8:	e079      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6b8:	e071      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b6c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6c8:	e069      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b6d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6d8:	e061      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b6e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b6e8:	e059      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6f8:	e051      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b708:	e049      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b714:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b718:	e041      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b728:	e039      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b738:	e031      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b744:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b748:	e029      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b754:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b758:	e021      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b764:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b768:	e019      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b774:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b778:	e011      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b784:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b788:	e009      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b794:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b798:	e001      	b.n	800b79e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b79a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000028 	.word	0x20000028
 800b7ac:	10624dd3 	.word	0x10624dd3
 800b7b0:	fdffe008 	.word	0xfdffe008

0800b7b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7bc:	4b1f      	ldr	r3, [pc, #124]	@ (800b83c <SDMMC_GetCmdResp2+0x88>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a1f      	ldr	r2, [pc, #124]	@ (800b840 <SDMMC_GetCmdResp2+0x8c>)
 800b7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c6:	0a5b      	lsrs	r3, r3, #9
 800b7c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
 800b7d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1e5a      	subs	r2, r3, #1
 800b7d6:	60fa      	str	r2, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7e0:	e026      	b.n	800b830 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0ef      	beq.n	800b7d2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1ea      	bne.n	800b7d2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2204      	movs	r2, #4
 800b80c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b80e:	2304      	movs	r3, #4
 800b810:	e00e      	b.n	800b830 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b824:	2301      	movs	r3, #1
 800b826:	e003      	b.n	800b830 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	22c5      	movs	r2, #197	@ 0xc5
 800b82c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	20000028 	.word	0x20000028
 800b840:	10624dd3 	.word	0x10624dd3

0800b844 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b84c:	4b19      	ldr	r3, [pc, #100]	@ (800b8b4 <SDMMC_GetCmdResp3+0x70>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a19      	ldr	r2, [pc, #100]	@ (800b8b8 <SDMMC_GetCmdResp3+0x74>)
 800b852:	fba2 2303 	umull	r2, r3, r2, r3
 800b856:	0a5b      	lsrs	r3, r3, #9
 800b858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	1e5a      	subs	r2, r3, #1
 800b866:	60fa      	str	r2, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d102      	bne.n	800b872 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b86c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b870:	e01b      	b.n	800b8aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b876:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0ef      	beq.n	800b862 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1ea      	bne.n	800b862 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2204      	movs	r2, #4
 800b89c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b89e:	2304      	movs	r3, #4
 800b8a0:	e003      	b.n	800b8aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	22c5      	movs	r2, #197	@ 0xc5
 800b8a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3714      	adds	r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr
 800b8b4:	20000028 	.word	0x20000028
 800b8b8:	10624dd3 	.word	0x10624dd3

0800b8bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8ca:	4b35      	ldr	r3, [pc, #212]	@ (800b9a0 <SDMMC_GetCmdResp6+0xe4>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a35      	ldr	r2, [pc, #212]	@ (800b9a4 <SDMMC_GetCmdResp6+0xe8>)
 800b8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d4:	0a5b      	lsrs	r3, r3, #9
 800b8d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8da:	fb02 f303 	mul.w	r3, r2, r3
 800b8de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	1e5a      	subs	r2, r3, #1
 800b8e4:	61fa      	str	r2, [r7, #28]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d102      	bne.n	800b8f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8ee:	e052      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0ef      	beq.n	800b8e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1ea      	bne.n	800b8e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2204      	movs	r2, #4
 800b91a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b91c:	2304      	movs	r3, #4
 800b91e:	e03a      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b932:	2301      	movs	r3, #1
 800b934:	e02f      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff fc13 	bl	800b162 <SDIO_GetCommandResponse>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	7afb      	ldrb	r3, [r7, #11]
 800b942:	4293      	cmp	r3, r2
 800b944:	d001      	beq.n	800b94a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b946:	2301      	movs	r3, #1
 800b948:	e025      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	22c5      	movs	r2, #197	@ 0xc5
 800b94e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b950:	2100      	movs	r1, #0
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f7ff fc11 	bl	800b17a <SDIO_GetResponse>
 800b958:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d106      	bne.n	800b972 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	0c1b      	lsrs	r3, r3, #16
 800b968:	b29a      	uxth	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b96e:	2300      	movs	r3, #0
 800b970:	e011      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b97c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b980:	e009      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b98c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b990:	e001      	b.n	800b996 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b996:	4618      	mov	r0, r3
 800b998:	3720      	adds	r7, #32
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20000028 	.word	0x20000028
 800b9a4:	10624dd3 	.word	0x10624dd3

0800b9a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9b0:	4b22      	ldr	r3, [pc, #136]	@ (800ba3c <SDMMC_GetCmdResp7+0x94>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a22      	ldr	r2, [pc, #136]	@ (800ba40 <SDMMC_GetCmdResp7+0x98>)
 800b9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ba:	0a5b      	lsrs	r3, r3, #9
 800b9bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9c0:	fb02 f303 	mul.w	r3, r2, r3
 800b9c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	1e5a      	subs	r2, r3, #1
 800b9ca:	60fa      	str	r2, [r7, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9d4:	e02c      	b.n	800ba30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0ef      	beq.n	800b9c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1ea      	bne.n	800b9c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f4:	f003 0304 	and.w	r3, r3, #4
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d004      	beq.n	800ba06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2204      	movs	r2, #4
 800ba00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba02:	2304      	movs	r3, #4
 800ba04:	e014      	b.n	800ba30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d004      	beq.n	800ba1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e009      	b.n	800ba30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2240      	movs	r2, #64	@ 0x40
 800ba2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba2e:	2300      	movs	r3, #0
  
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20000028 	.word	0x20000028
 800ba40:	10624dd3 	.word	0x10624dd3

0800ba44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba4c:	4b10      	ldr	r3, [pc, #64]	@ (800ba90 <SDMMC_GetCmdError+0x4c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a10      	ldr	r2, [pc, #64]	@ (800ba94 <SDMMC_GetCmdError+0x50>)
 800ba52:	fba2 2303 	umull	r2, r3, r2, r3
 800ba56:	0a5b      	lsrs	r3, r3, #9
 800ba58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba5c:	fb02 f303 	mul.w	r3, r2, r3
 800ba60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	1e5a      	subs	r2, r3, #1
 800ba66:	60fa      	str	r2, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba70:	e009      	b.n	800ba86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0f1      	beq.n	800ba62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	22c5      	movs	r2, #197	@ 0xc5
 800ba82:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc80      	pop	{r7}
 800ba8e:	4770      	bx	lr
 800ba90:	20000028 	.word	0x20000028
 800ba94:	10624dd3 	.word	0x10624dd3

0800ba98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ba9c:	4904      	ldr	r1, [pc, #16]	@ (800bab0 <MX_FATFS_Init+0x18>)
 800ba9e:	4805      	ldr	r0, [pc, #20]	@ (800bab4 <MX_FATFS_Init+0x1c>)
 800baa0:	f003 fa74 	bl	800ef8c <FATFS_LinkDriver>
 800baa4:	4603      	mov	r3, r0
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b03      	ldr	r3, [pc, #12]	@ (800bab8 <MX_FATFS_Init+0x20>)
 800baaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800baac:	bf00      	nop
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20000a10 	.word	0x20000a10
 800bab4:	08012674 	.word	0x08012674
 800bab8:	20000a0c 	.word	0x20000a0c

0800babc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bac0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bc80      	pop	{r7}
 800bac8:	4770      	bx	lr
	...

0800bacc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bad6:	f000 f86b 	bl	800bbb0 <BSP_SD_IsDetected>
 800bada:	4603      	mov	r3, r0
 800badc:	2b01      	cmp	r3, #1
 800bade:	d001      	beq.n	800bae4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e005      	b.n	800baf0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bae4:	4804      	ldr	r0, [pc, #16]	@ (800baf8 <BSP_SD_Init+0x2c>)
 800bae6:	f7fc fce7 	bl	80084b8 <HAL_SD_Init>
 800baea:	4603      	mov	r3, r0
 800baec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800baee:	79fb      	ldrb	r3, [r7, #7]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20000718 	.word	0x20000718

0800bafc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	68f9      	ldr	r1, [r7, #12]
 800bb18:	4806      	ldr	r0, [pc, #24]	@ (800bb34 <BSP_SD_ReadBlocks+0x38>)
 800bb1a:	f7fc fd7d 	bl	8008618 <HAL_SD_ReadBlocks>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000718 	.word	0x20000718

0800bb38 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	68f9      	ldr	r1, [r7, #12]
 800bb54:	4806      	ldr	r0, [pc, #24]	@ (800bb70 <BSP_SD_WriteBlocks+0x38>)
 800bb56:	f7fc ff3d 	bl	80089d4 <HAL_SD_WriteBlocks>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000718 	.word	0x20000718

0800bb74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb78:	4805      	ldr	r0, [pc, #20]	@ (800bb90 <BSP_SD_GetCardState+0x1c>)
 800bb7a:	f7fd fa80 	bl	800907e <HAL_SD_GetCardState>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b04      	cmp	r3, #4
 800bb82:	bf14      	ite	ne
 800bb84:	2301      	movne	r3, #1
 800bb86:	2300      	moveq	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000718 	.word	0x20000718

0800bb94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	4803      	ldr	r0, [pc, #12]	@ (800bbac <BSP_SD_GetCardInfo+0x18>)
 800bba0:	f7fd fa42 	bl	8009028 <HAL_SD_GetCardInfo>
}
 800bba4:	bf00      	nop
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20000718 	.word	0x20000718

0800bbb0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	b2db      	uxtb	r3, r3
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bc80      	pop	{r7}
 800bbc6:	4770      	bx	lr

0800bbc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	4a08      	ldr	r2, [pc, #32]	@ (800bbf8 <disk_status+0x30>)
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	79fa      	ldrb	r2, [r7, #7]
 800bbe0:	4905      	ldr	r1, [pc, #20]	@ (800bbf8 <disk_status+0x30>)
 800bbe2:	440a      	add	r2, r1
 800bbe4:	7a12      	ldrb	r2, [r2, #8]
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	4798      	blx	r3
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20001a94 	.word	0x20001a94

0800bbfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	4a0d      	ldr	r2, [pc, #52]	@ (800bc44 <disk_initialize+0x48>)
 800bc0e:	5cd3      	ldrb	r3, [r2, r3]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d111      	bne.n	800bc38 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800bc14:	79fb      	ldrb	r3, [r7, #7]
 800bc16:	4a0b      	ldr	r2, [pc, #44]	@ (800bc44 <disk_initialize+0x48>)
 800bc18:	2101      	movs	r1, #1
 800bc1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	4a09      	ldr	r2, [pc, #36]	@ (800bc44 <disk_initialize+0x48>)
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	79fa      	ldrb	r2, [r7, #7]
 800bc2a:	4906      	ldr	r1, [pc, #24]	@ (800bc44 <disk_initialize+0x48>)
 800bc2c:	440a      	add	r2, r1
 800bc2e:	7a12      	ldrb	r2, [r2, #8]
 800bc30:	4610      	mov	r0, r2
 800bc32:	4798      	blx	r3
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20001a94 	.word	0x20001a94

0800bc48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bc48:	b590      	push	{r4, r7, lr}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60b9      	str	r1, [r7, #8]
 800bc50:	607a      	str	r2, [r7, #4]
 800bc52:	603b      	str	r3, [r7, #0]
 800bc54:	4603      	mov	r3, r0
 800bc56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	4a0a      	ldr	r2, [pc, #40]	@ (800bc84 <disk_read+0x3c>)
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	689c      	ldr	r4, [r3, #8]
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	4a07      	ldr	r2, [pc, #28]	@ (800bc84 <disk_read+0x3c>)
 800bc68:	4413      	add	r3, r2
 800bc6a:	7a18      	ldrb	r0, [r3, #8]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	68b9      	ldr	r1, [r7, #8]
 800bc72:	47a0      	blx	r4
 800bc74:	4603      	mov	r3, r0
 800bc76:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	371c      	adds	r7, #28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd90      	pop	{r4, r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20001a94 	.word	0x20001a94

0800bc88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc88:	b590      	push	{r4, r7, lr}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	4a0a      	ldr	r2, [pc, #40]	@ (800bcc4 <disk_write+0x3c>)
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	68dc      	ldr	r4, [r3, #12]
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	4a07      	ldr	r2, [pc, #28]	@ (800bcc4 <disk_write+0x3c>)
 800bca8:	4413      	add	r3, r2
 800bcaa:	7a18      	ldrb	r0, [r3, #8]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	47a0      	blx	r4
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	371c      	adds	r7, #28
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd90      	pop	{r4, r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20001a94 	.word	0x20001a94

0800bcc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	603a      	str	r2, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bcd8:	79fb      	ldrb	r3, [r7, #7]
 800bcda:	4a09      	ldr	r2, [pc, #36]	@ (800bd00 <disk_ioctl+0x38>)
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	79fa      	ldrb	r2, [r7, #7]
 800bce6:	4906      	ldr	r1, [pc, #24]	@ (800bd00 <disk_ioctl+0x38>)
 800bce8:	440a      	add	r2, r1
 800bcea:	7a10      	ldrb	r0, [r2, #8]
 800bcec:	79b9      	ldrb	r1, [r7, #6]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	4798      	blx	r3
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73fb      	strb	r3, [r7, #15]
  return res;
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20001a94 	.word	0x20001a94

0800bd04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800bd18:	e007      	b.n	800bd2a <mem_cpy+0x26>
		*d++ = *s++;
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	1c53      	adds	r3, r2, #1
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	1c59      	adds	r1, r3, #1
 800bd24:	6179      	str	r1, [r7, #20]
 800bd26:	7812      	ldrb	r2, [r2, #0]
 800bd28:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	1e5a      	subs	r2, r3, #1
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1f2      	bne.n	800bd1a <mem_cpy+0x16>
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop
 800bd38:	371c      	adds	r7, #28
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bc80      	pop	{r7}
 800bd3e:	4770      	bx	lr

0800bd40 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd40:	b480      	push	{r7}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800bd50:	e005      	b.n	800bd5e <mem_set+0x1e>
		*d++ = (BYTE)val;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	617a      	str	r2, [r7, #20]
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	1e5a      	subs	r2, r3, #1
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1f4      	bne.n	800bd52 <mem_set+0x12>
}
 800bd68:	bf00      	nop
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bc80      	pop	{r7}
 800bd72:	4770      	bx	lr

0800bd74 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800bd74:	b480      	push	{r7}
 800bd76:	b089      	sub	sp, #36	@ 0x24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	61fb      	str	r3, [r7, #28]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800bd8c:	bf00      	nop
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	1e5a      	subs	r2, r3, #1
 800bd92:	607a      	str	r2, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00d      	beq.n	800bdb4 <mem_cmp+0x40>
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	61fa      	str	r2, [r7, #28]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	4619      	mov	r1, r3
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	61ba      	str	r2, [r7, #24]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	1acb      	subs	r3, r1, r3
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0ec      	beq.n	800bd8e <mem_cmp+0x1a>
	return r;
 800bdb4:	697b      	ldr	r3, [r7, #20]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3724      	adds	r7, #36	@ 0x24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bc80      	pop	{r7}
 800bdbe:	4770      	bx	lr

0800bdc0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bdca:	e002      	b.n	800bdd2 <chk_chr+0x12>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	607b      	str	r3, [r7, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d005      	beq.n	800bde6 <chk_chr+0x26>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d1f2      	bne.n	800bdcc <chk_chr+0xc>
	return *str;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	781b      	ldrb	r3, [r3, #0]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bc80      	pop	{r7}
 800bdf2:	4770      	bx	lr

0800bdf4 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be02:	4618      	mov	r0, r3
 800be04:	f003 fa54 	bl	800f2b0 <ff_req_grant>
 800be08:	4603      	mov	r3, r0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	460b      	mov	r3, r1
 800be1c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d011      	beq.n	800be48 <unlock_fs+0x36>
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	2b0c      	cmp	r3, #12
 800be28:	d00e      	beq.n	800be48 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	2b0b      	cmp	r3, #11
 800be2e:	d00b      	beq.n	800be48 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800be30:	78fb      	ldrb	r3, [r7, #3]
 800be32:	2b09      	cmp	r3, #9
 800be34:	d008      	beq.n	800be48 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800be36:	78fb      	ldrb	r3, [r7, #3]
 800be38:	2b0f      	cmp	r3, #15
 800be3a:	d005      	beq.n	800be48 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be42:	4618      	mov	r0, r3
 800be44:	f003 fa49 	bl	800f2da <ff_rel_grant>
	}
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be5a:	2300      	movs	r3, #0
 800be5c:	60bb      	str	r3, [r7, #8]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e038      	b.n	800bed6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800be64:	492f      	ldr	r1, [pc, #188]	@ (800bf24 <chk_lock+0xd4>)
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	4613      	mov	r3, r2
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	440b      	add	r3, r1
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d029      	beq.n	800becc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800be78:	492a      	ldr	r1, [pc, #168]	@ (800bf24 <chk_lock+0xd4>)
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	4613      	mov	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	440b      	add	r3, r1
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800be8e:	429a      	cmp	r2, r3
 800be90:	d11e      	bne.n	800bed0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800be92:	4924      	ldr	r1, [pc, #144]	@ (800bf24 <chk_lock+0xd4>)
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4613      	mov	r3, r2
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	4413      	add	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	440b      	add	r3, r1
 800bea0:	3304      	adds	r3, #4
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800beaa:	429a      	cmp	r2, r3
 800beac:	d110      	bne.n	800bed0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800beae:	491d      	ldr	r1, [pc, #116]	@ (800bf24 <chk_lock+0xd4>)
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	4613      	mov	r3, r2
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	4413      	add	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	3308      	adds	r3, #8
 800bebe:	881a      	ldrh	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
				Files[i].clu == dp->sclust &&
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d102      	bne.n	800bed0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800beca:	e007      	b.n	800bedc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800becc:	2301      	movs	r3, #1
 800bece:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3301      	adds	r3, #1
 800bed4:	60fb      	str	r3, [r7, #12]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d9c3      	bls.n	800be64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d109      	bne.n	800bef6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <chk_lock+0x9e>
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d101      	bne.n	800bef2 <chk_lock+0xa2>
 800beee:	2300      	movs	r3, #0
 800bef0:	e013      	b.n	800bf1a <chk_lock+0xca>
 800bef2:	2312      	movs	r3, #18
 800bef4:	e011      	b.n	800bf1a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10b      	bne.n	800bf14 <chk_lock+0xc4>
 800befc:	4909      	ldr	r1, [pc, #36]	@ (800bf24 <chk_lock+0xd4>)
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	4613      	mov	r3, r2
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	330a      	adds	r3, #10
 800bf0c:	881b      	ldrh	r3, [r3, #0]
 800bf0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf12:	d101      	bne.n	800bf18 <chk_lock+0xc8>
 800bf14:	2310      	movs	r3, #16
 800bf16:	e000      	b.n	800bf1a <chk_lock+0xca>
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr
 800bf24:	20001a7c 	.word	0x20001a7c

0800bf28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	607b      	str	r3, [r7, #4]
 800bf32:	e002      	b.n	800bf3a <enq_lock+0x12>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3301      	adds	r3, #1
 800bf38:	607b      	str	r3, [r7, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d809      	bhi.n	800bf54 <enq_lock+0x2c>
 800bf40:	490a      	ldr	r1, [pc, #40]	@ (800bf6c <enq_lock+0x44>)
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1ef      	bne.n	800bf34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	bf14      	ite	ne
 800bf5a:	2301      	movne	r3, #1
 800bf5c:	2300      	moveq	r3, #0
 800bf5e:	b2db      	uxtb	r3, r3
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bc80      	pop	{r7}
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20001a7c 	.word	0x20001a7c

0800bf70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e02b      	b.n	800bfd8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800bf80:	4955      	ldr	r1, [pc, #340]	@ (800c0d8 <inc_lock+0x168>)
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4613      	mov	r3, r2
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	440b      	add	r3, r1
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d11b      	bne.n	800bfd2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800bf9a:	494f      	ldr	r1, [pc, #316]	@ (800c0d8 <inc_lock+0x168>)
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
		if (Files[i].fs == dp->fs &&
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d10d      	bne.n	800bfd2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800bfb6:	4948      	ldr	r1, [pc, #288]	@ (800c0d8 <inc_lock+0x168>)
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	4413      	add	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	440b      	add	r3, r1
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	881a      	ldrh	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
			Files[i].clu == dp->sclust &&
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d006      	beq.n	800bfe0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d9d0      	bls.n	800bf80 <inc_lock+0x10>
 800bfde:	e000      	b.n	800bfe2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800bfe0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d145      	bne.n	800c074 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	60fb      	str	r3, [r7, #12]
 800bfec:	e002      	b.n	800bff4 <inc_lock+0x84>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3301      	adds	r3, #1
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d809      	bhi.n	800c00e <inc_lock+0x9e>
 800bffa:	4937      	ldr	r1, [pc, #220]	@ (800c0d8 <inc_lock+0x168>)
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4613      	mov	r3, r2
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	440b      	add	r3, r1
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1ef      	bne.n	800bfee <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b02      	cmp	r3, #2
 800c012:	d101      	bne.n	800c018 <inc_lock+0xa8>
 800c014:	2300      	movs	r3, #0
 800c016:	e05a      	b.n	800c0ce <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 800c01e:	482e      	ldr	r0, [pc, #184]	@ (800c0d8 <inc_lock+0x168>)
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	4613      	mov	r3, r2
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	4413      	add	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4403      	add	r3, r0
 800c02c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 800c034:	4828      	ldr	r0, [pc, #160]	@ (800c0d8 <inc_lock+0x168>)
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	4613      	mov	r3, r2
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4403      	add	r3, r0
 800c042:	3304      	adds	r3, #4
 800c044:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8b3 0806 	ldrh.w	r0, [r3, #2054]	@ 0x806
 800c04c:	4922      	ldr	r1, [pc, #136]	@ (800c0d8 <inc_lock+0x168>)
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	4613      	mov	r3, r2
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	3308      	adds	r3, #8
 800c05c:	4602      	mov	r2, r0
 800c05e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800c060:	491d      	ldr	r1, [pc, #116]	@ (800c0d8 <inc_lock+0x168>)
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	330a      	adds	r3, #10
 800c070:	2200      	movs	r2, #0
 800c072:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00c      	beq.n	800c094 <inc_lock+0x124>
 800c07a:	4917      	ldr	r1, [pc, #92]	@ (800c0d8 <inc_lock+0x168>)
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	440b      	add	r3, r1
 800c088:	330a      	adds	r3, #10
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <inc_lock+0x124>
 800c090:	2300      	movs	r3, #0
 800c092:	e01c      	b.n	800c0ce <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10b      	bne.n	800c0b2 <inc_lock+0x142>
 800c09a:	490f      	ldr	r1, [pc, #60]	@ (800c0d8 <inc_lock+0x168>)
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	330a      	adds	r3, #10
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	b299      	uxth	r1, r3
 800c0b0:	e001      	b.n	800c0b6 <inc_lock+0x146>
 800c0b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c0b6:	4808      	ldr	r0, [pc, #32]	@ (800c0d8 <inc_lock+0x168>)
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4403      	add	r3, r0
 800c0c4:	330a      	adds	r3, #10
 800c0c6:	460a      	mov	r2, r1
 800c0c8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3301      	adds	r3, #1
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bc80      	pop	{r7}
 800c0d6:	4770      	bx	lr
 800c0d8:	20001a7c 	.word	0x20001a7c

0800c0dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e016      	b.n	800c118 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0ea:	4910      	ldr	r1, [pc, #64]	@ (800c12c <clear_lock+0x50>)
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	4413      	add	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	440b      	add	r3, r1
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d108      	bne.n	800c112 <clear_lock+0x36>
 800c100:	490a      	ldr	r1, [pc, #40]	@ (800c12c <clear_lock+0x50>)
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4613      	mov	r3, r2
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	4413      	add	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	440b      	add	r3, r1
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3301      	adds	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d9e5      	bls.n	800c0ea <clear_lock+0xe>
	}
}
 800c11e:	bf00      	nop
 800c120:	bf00      	nop
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	bc80      	pop	{r7}
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	20001a7c 	.word	0x20001a7c

0800c130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800c142:	2b00      	cmp	r3, #0
 800c144:	d038      	beq.n	800c1b8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
 800c14c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	2301      	movs	r3, #1
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	f7ff fd95 	bl	800bc88 <disk_write>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <sync_window+0x3a>
			res = FR_DISK_ERR;
 800c164:	2301      	movs	r3, #1
 800c166:	73fb      	strb	r3, [r7, #15]
 800c168:	e026      	b.n	800c1b8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	1ad2      	subs	r2, r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 800c182:	429a      	cmp	r2, r3
 800c184:	d218      	bcs.n	800c1b8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3803 	ldrb.w	r3, [r3, #2051]	@ 0x803
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	e010      	b.n	800c1b2 <sync_window+0x82>
					wsect += fs->fsize;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	4413      	add	r3, r2
 800c19a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	f7ff fd6e 	bl	800bc88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d8eb      	bhi.n	800c190 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d01b      	beq.n	800c214 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff ffa7 	bl	800c130 <sync_window>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d113      	bne.n	800c214 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	f7ff fd26 	bl	800bc48 <disk_read>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d004      	beq.n	800c20c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c202:	f04f 33ff 	mov.w	r3, #4294967295
 800c206:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c208:	2301      	movs	r3, #1
 800c20a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
		}
	}
	return res;
 800c214:	7bfb      	ldrb	r3, [r7, #15]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff ff82 	bl	800c130 <sync_window>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	2b00      	cmp	r3, #0
 800c234:	f040 809c 	bne.w	800c370 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800c23e:	2b03      	cmp	r3, #3
 800c240:	f040 8089 	bne.w	800c356 <sync_fs+0x138>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3805 	ldrb.w	r3, [r3, #2053]	@ 0x805
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	f040 8083 	bne.w	800c356 <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c258:	461a      	mov	r2, r3
 800c25a:	2100      	movs	r1, #0
 800c25c:	f7ff fd70 	bl	800bd40 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2255      	movs	r2, #85	@ 0x55
 800c264:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	22aa      	movs	r2, #170	@ 0xaa
 800c26c:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2252      	movs	r2, #82	@ 0x52
 800c274:	701a      	strb	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2252      	movs	r2, #82	@ 0x52
 800c27a:	705a      	strb	r2, [r3, #1]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2261      	movs	r2, #97	@ 0x61
 800c280:	709a      	strb	r2, [r3, #2]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2241      	movs	r2, #65	@ 0x41
 800c286:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2272      	movs	r2, #114	@ 0x72
 800c28c:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2272      	movs	r2, #114	@ 0x72
 800c294:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2241      	movs	r2, #65	@ 0x41
 800c29c:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2261      	movs	r2, #97	@ 0x61
 800c2a4:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	0a1b      	lsrs	r3, r3, #8
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c2d0:	0c1b      	lsrs	r3, r3, #16
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c2e0:	0e1b      	lsrs	r3, r3, #24
 800c2e2:	b2da      	uxtb	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	0a1b      	lsrs	r3, r3, #8
 800c302:	b29b      	uxth	r3, r3
 800c304:	b2da      	uxtb	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800c312:	0c1b      	lsrs	r3, r3, #16
 800c314:	b2da      	uxtb	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800c322:	0e1b      	lsrs	r3, r3, #24
 800c324:	b2da      	uxtb	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 800c348:	2301      	movs	r3, #1
 800c34a:	f7ff fc9d 	bl	800bc88 <disk_write>
			fs->fsi_flag = 0;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 800c35c:	2200      	movs	r2, #0
 800c35e:	2100      	movs	r1, #0
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fcb1 	bl	800bcc8 <disk_ioctl>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <sync_fs+0x152>
			res = FR_DISK_ERR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c370:	7bfb      	ldrb	r3, [r7, #15]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3b02      	subs	r3, #2
 800c388:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c390:	3b02      	subs	r3, #2
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d301      	bcc.n	800c39c <clust2sect+0x22>
 800c398:	2300      	movs	r3, #0
 800c39a:	e00a      	b.n	800c3b2 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	fb03 f202 	mul.w	r2, r3, r2
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
 800c3b0:	4413      	add	r3, r2
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bc80      	pop	{r7}
 800c3ba:	4770      	bx	lr

0800c3bc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d905      	bls.n	800c3d8 <get_fat+0x1c>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d302      	bcc.n	800c3de <get_fat+0x22>
		val = 1;	/* Internal error */
 800c3d8:	2301      	movs	r3, #1
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e0d6      	b.n	800c58c <get_fat+0x1d0>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c3de:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	f000 808e 	beq.w	800c50c <get_fat+0x150>
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	f300 80c1 	bgt.w	800c578 <get_fat+0x1bc>
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d002      	beq.n	800c400 <get_fat+0x44>
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d058      	beq.n	800c4b0 <get_fat+0xf4>
 800c3fe:	e0bb      	b.n	800c578 <get_fat+0x1bc>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	085b      	lsrs	r3, r3, #1
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	4413      	add	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c41a:	4619      	mov	r1, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c422:	4413      	add	r3, r2
 800c424:	4619      	mov	r1, r3
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f7ff fecb 	bl	800c1c2 <move_window>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f040 80a5 	bne.w	800c57e <get_fat+0x1c2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	60fa      	str	r2, [r7, #12]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800c440:	fbb3 f1f2 	udiv	r1, r3, r2
 800c444:	fb01 f202 	mul.w	r2, r1, r2
 800c448:	1a9b      	subs	r3, r3, r2
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	5cd3      	ldrb	r3, [r2, r3]
 800c44e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c45c:	4619      	mov	r1, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	fbb3 f3f1 	udiv	r3, r3, r1
 800c464:	4413      	add	r3, r2
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff feaa 	bl	800c1c2 <move_window>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	f040 8086 	bne.w	800c582 <get_fat+0x1c6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c47c:	461a      	mov	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	fbb3 f1f2 	udiv	r1, r3, r2
 800c484:	fb01 f202 	mul.w	r2, r1, r2
 800c488:	1a9b      	subs	r3, r3, r2
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	5cd3      	ldrb	r3, [r2, r3]
 800c48e:	021b      	lsls	r3, r3, #8
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	4313      	orrs	r3, r2
 800c494:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <get_fat+0xea>
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	091b      	lsrs	r3, r3, #4
 800c4a4:	e002      	b.n	800c4ac <get_fat+0xf0>
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4ac:	617b      	str	r3, [r7, #20]
			break;
 800c4ae:	e06d      	b.n	800c58c <get_fat+0x1d0>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c4bc:	085b      	lsrs	r3, r3, #1
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4c8:	4413      	add	r3, r2
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff fe78 	bl	800c1c2 <move_window>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d156      	bne.n	800c586 <get_fat+0x1ca>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800c4e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4e6:	fb01 f202 	mul.w	r2, r1, r2
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	021b      	lsls	r3, r3, #8
 800c4fa:	b21a      	sxth	r2, r3
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	b21b      	sxth	r3, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	b21b      	sxth	r3, r3
 800c506:	b29b      	uxth	r3, r3
 800c508:	617b      	str	r3, [r7, #20]
			break;
 800c50a:	e03f      	b.n	800c58c <get_fat+0x1d0>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c518:	089b      	lsrs	r3, r3, #2
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4619      	mov	r1, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	fbb3 f3f1 	udiv	r3, r3, r1
 800c524:	4413      	add	r3, r2
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff fe4a 	bl	800c1c2 <move_window>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d12a      	bne.n	800c58a <get_fat+0x1ce>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800c53e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c542:	fb01 f202 	mul.w	r2, r1, r2
 800c546:	1a9b      	subs	r3, r3, r2
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	4413      	add	r3, r2
 800c54c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3303      	adds	r3, #3
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	061a      	lsls	r2, r3, #24
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	3302      	adds	r3, #2
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	041b      	lsls	r3, r3, #16
 800c55e:	431a      	orrs	r2, r3
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	3301      	adds	r3, #1
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	021b      	lsls	r3, r3, #8
 800c568:	4313      	orrs	r3, r2
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	7812      	ldrb	r2, [r2, #0]
 800c56e:	4313      	orrs	r3, r2
 800c570:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c574:	617b      	str	r3, [r7, #20]
			break;
 800c576:	e009      	b.n	800c58c <get_fat+0x1d0>

		default:
			val = 1;	/* Internal error */
 800c578:	2301      	movs	r3, #1
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	e006      	b.n	800c58c <get_fat+0x1d0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c57e:	bf00      	nop
 800c580:	e004      	b.n	800c58c <get_fat+0x1d0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c582:	bf00      	nop
 800c584:	e002      	b.n	800c58c <get_fat+0x1d0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c586:	bf00      	nop
 800c588:	e000      	b.n	800c58c <get_fat+0x1d0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c58a:	bf00      	nop
		}
	}

	return val;
 800c58c:	697b      	ldr	r3, [r7, #20]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b088      	sub	sp, #32
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d905      	bls.n	800c5b4 <put_fat+0x1e>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d302      	bcc.n	800c5ba <put_fat+0x24>
		res = FR_INT_ERR;
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	77fb      	strb	r3, [r7, #31]
 800c5b8:	e128      	b.n	800c80c <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	f000 80c3 	beq.w	800c74c <put_fat+0x1b6>
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	f300 8116 	bgt.w	800c7f8 <put_fat+0x262>
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d003      	beq.n	800c5d8 <put_fat+0x42>
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	f000 8087 	beq.w	800c6e4 <put_fat+0x14e>
 800c5d6:	e10f      	b.n	800c7f8 <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	617b      	str	r3, [r7, #20]
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	085b      	lsrs	r3, r3, #1
 800c5e0:	697a      	ldr	r2, [r7, #20]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5fa:	4413      	add	r3, r2
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff fddf 	bl	800c1c2 <move_window>
 800c604:	4603      	mov	r3, r0
 800c606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c608:	7ffb      	ldrb	r3, [r7, #31]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 80f7 	bne.w	800c7fe <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	1c5a      	adds	r2, r3, #1
 800c614:	617a      	str	r2, [r7, #20]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800c61c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c620:	fb01 f202 	mul.w	r2, r1, r2
 800c624:	1a9b      	subs	r3, r3, r2
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	4413      	add	r3, r2
 800c62a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f003 0301 	and.w	r3, r3, #1
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00d      	beq.n	800c652 <put_fat+0xbc>
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	b25b      	sxtb	r3, r3
 800c63c:	f003 030f 	and.w	r3, r3, #15
 800c640:	b25a      	sxtb	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	011b      	lsls	r3, r3, #4
 800c648:	b25b      	sxtb	r3, r3
 800c64a:	4313      	orrs	r3, r2
 800c64c:	b25b      	sxtb	r3, r3
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	e001      	b.n	800c656 <put_fat+0xc0>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	b2db      	uxtb	r3, r3
 800c656:	69ba      	ldr	r2, [r7, #24]
 800c658:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c66e:	4619      	mov	r1, r3
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	fbb3 f3f1 	udiv	r3, r3, r1
 800c676:	4413      	add	r3, r2
 800c678:	4619      	mov	r1, r3
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f7ff fda1 	bl	800c1c2 <move_window>
 800c680:	4603      	mov	r3, r0
 800c682:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c684:	7ffb      	ldrb	r3, [r7, #31]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f040 80bb 	bne.w	800c802 <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c692:	461a      	mov	r2, r3
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	fbb3 f1f2 	udiv	r1, r3, r2
 800c69a:	fb01 f202 	mul.w	r2, r1, r2
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d003      	beq.n	800c6b8 <put_fat+0x122>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	091b      	lsrs	r3, r3, #4
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	e00e      	b.n	800c6d6 <put_fat+0x140>
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	b25b      	sxtb	r3, r3
 800c6be:	f023 030f 	bic.w	r3, r3, #15
 800c6c2:	b25a      	sxtb	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0a1b      	lsrs	r3, r3, #8
 800c6c8:	b25b      	sxtb	r3, r3
 800c6ca:	f003 030f 	and.w	r3, r3, #15
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	b25b      	sxtb	r3, r3
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			break;
 800c6e2:	e093      	b.n	800c80c <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c6f0:	085b      	lsrs	r3, r3, #1
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	4619      	mov	r1, r3
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f7ff fd5e 	bl	800c1c2 <move_window>
 800c706:	4603      	mov	r3, r0
 800c708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c70a:	7ffb      	ldrb	r3, [r7, #31]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d17a      	bne.n	800c806 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800c71a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c71e:	fb01 f202 	mul.w	r2, r1, r2
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	4413      	add	r3, r2
 800c728:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	b29b      	uxth	r3, r3
 800c736:	0a1b      	lsrs	r3, r3, #8
 800c738:	b29a      	uxth	r2, r3
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	3301      	adds	r3, #1
 800c73e:	b2d2      	uxtb	r2, r2
 800c740:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			break;
 800c74a:	e05f      	b.n	800c80c <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800c758:	089b      	lsrs	r3, r3, #2
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	4619      	mov	r1, r3
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	fbb3 f3f1 	udiv	r3, r3, r1
 800c764:	4413      	add	r3, r2
 800c766:	4619      	mov	r1, r3
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7ff fd2a 	bl	800c1c2 <move_window>
 800c76e:	4603      	mov	r3, r0
 800c770:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c772:	7ffb      	ldrb	r3, [r7, #31]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d148      	bne.n	800c80a <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800c782:	fbb3 f1f2 	udiv	r1, r3, r2
 800c786:	fb01 f202 	mul.w	r2, r1, r2
 800c78a:	1a9b      	subs	r3, r3, r2
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	3303      	adds	r3, #3
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	061a      	lsls	r2, r3, #24
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	3302      	adds	r3, #2
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	041b      	lsls	r3, r3, #16
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	69ba      	ldr	r2, [r7, #24]
 800c7b0:	7812      	ldrb	r2, [r2, #0]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	0a1b      	lsrs	r3, r3, #8
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	b2d2      	uxtb	r2, r2
 800c7d4:	701a      	strb	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	0c1a      	lsrs	r2, r3, #16
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	3302      	adds	r3, #2
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	0e1a      	lsrs	r2, r3, #24
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	3303      	adds	r3, #3
 800c7ea:	b2d2      	uxtb	r2, r2
 800c7ec:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			break;
 800c7f6:	e009      	b.n	800c80c <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	77fb      	strb	r3, [r7, #31]
 800c7fc:	e006      	b.n	800c80c <put_fat+0x276>
			if (res != FR_OK) break;
 800c7fe:	bf00      	nop
 800c800:	e004      	b.n	800c80c <put_fat+0x276>
			if (res != FR_OK) break;
 800c802:	bf00      	nop
 800c804:	e002      	b.n	800c80c <put_fat+0x276>
			if (res != FR_OK) break;
 800c806:	bf00      	nop
 800c808:	e000      	b.n	800c80c <put_fat+0x276>
			if (res != FR_OK) break;
 800c80a:	bf00      	nop
		}
	}

	return res;
 800c80c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d905      	bls.n	800c832 <remove_chain+0x1c>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d302      	bcc.n	800c838 <remove_chain+0x22>
		res = FR_INT_ERR;
 800c832:	2302      	movs	r3, #2
 800c834:	73fb      	strb	r3, [r7, #15]
 800c836:	e043      	b.n	800c8c0 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800c83c:	e036      	b.n	800c8ac <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7ff fdbb 	bl	800c3bc <get_fat>
 800c846:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d035      	beq.n	800c8ba <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d102      	bne.n	800c85a <remove_chain+0x44>
 800c854:	2302      	movs	r3, #2
 800c856:	73fb      	strb	r3, [r7, #15]
 800c858:	e032      	b.n	800c8c0 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c860:	d102      	bne.n	800c868 <remove_chain+0x52>
 800c862:	2301      	movs	r3, #1
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	e02b      	b.n	800c8c0 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800c868:	2200      	movs	r2, #0
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff fe92 	bl	800c596 <put_fat>
 800c872:	4603      	mov	r3, r0
 800c874:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d120      	bne.n	800c8be <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c886:	d00f      	beq.n	800c8a8 <remove_chain+0x92>
				fs->free_clust++;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
				fs->fsi_flag |= 1;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 3805 	ldrb.w	r3, [r3, #2053]	@ 0x805
 800c89c:	f043 0301 	orr.w	r3, r3, #1
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d3c2      	bcc.n	800c83e <remove_chain+0x28>
 800c8b8:	e002      	b.n	800c8c0 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800c8ba:	bf00      	nop
 800c8bc:	e000      	b.n	800c8c0 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800c8be:	bf00      	nop
		}
	}

	return res;
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10f      	bne.n	800c8fa <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800c8e0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <create_chain+0x2a>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d31c      	bcc.n	800c92e <create_chain+0x64>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	613b      	str	r3, [r7, #16]
 800c8f8:	e019      	b.n	800c92e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff fd5d 	bl	800c3bc <get_fat>
 800c902:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d801      	bhi.n	800c90e <create_chain+0x44>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e076      	b.n	800c9fc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c914:	d101      	bne.n	800c91a <create_chain+0x50>
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	e070      	b.n	800c9fc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	429a      	cmp	r2, r3
 800c924:	d201      	bcs.n	800c92a <create_chain+0x60>
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	e068      	b.n	800c9fc <create_chain+0x132>
		scl = clst;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	3301      	adds	r3, #1
 800c936:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	429a      	cmp	r2, r3
 800c942:	d307      	bcc.n	800c954 <create_chain+0x8a>
			ncl = 2;
 800c944:	2302      	movs	r3, #2
 800c946:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d901      	bls.n	800c954 <create_chain+0x8a>
 800c950:	2300      	movs	r3, #0
 800c952:	e053      	b.n	800c9fc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800c954:	6979      	ldr	r1, [r7, #20]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff fd30 	bl	800c3bc <get_fat>
 800c95c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00e      	beq.n	800c982 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96a:	d002      	beq.n	800c972 <create_chain+0xa8>
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <create_chain+0xac>
			return cs;
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	e042      	b.n	800c9fc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d1d9      	bne.n	800c932 <create_chain+0x68>
 800c97e:	2300      	movs	r3, #0
 800c980:	e03c      	b.n	800c9fc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800c982:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800c984:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800c988:	6979      	ldr	r1, [r7, #20]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff fe03 	bl	800c596 <put_fat>
 800c990:	4603      	mov	r3, r0
 800c992:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d109      	bne.n	800c9ae <create_chain+0xe4>
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d006      	beq.n	800c9ae <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800c9a0:	697a      	ldr	r2, [r7, #20]
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7ff fdf6 	bl	800c596 <put_fat>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d11a      	bne.n	800c9ea <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
		if (fs->free_clust != 0xFFFFFFFF) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d018      	beq.n	800c9fa <create_chain+0x130>
			fs->free_clust--;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c9ce:	1e5a      	subs	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
			fs->fsi_flag |= 1;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 3805 	ldrb.w	r3, [r3, #2053]	@ 0x805
 800c9dc:	f043 0301 	orr.w	r3, r3, #1
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
 800c9e8:	e007      	b.n	800c9fa <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d102      	bne.n	800c9f6 <create_chain+0x12c>
 800c9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f4:	e000      	b.n	800c9f8 <create_chain+0x12e>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800c9fa:	697b      	ldr	r3, [r7, #20]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 800ca14:	3304      	adds	r3, #4
 800ca16:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ca1e:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800ca22:	461a      	mov	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800ca30:	f892 2802 	ldrb.w	r2, [r2, #2050]	@ 0x802
 800ca34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	1d1a      	adds	r2, r3, #4
 800ca3e:	613a      	str	r2, [r7, #16]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <clmt_clust+0x4a>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e010      	b.n	800ca70 <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d307      	bcc.n	800ca66 <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	3304      	adds	r3, #4
 800ca62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca64:	e7e9      	b.n	800ca3a <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 800ca66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	4413      	add	r3, r2
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	371c      	adds	r7, #28
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bc80      	pop	{r7}
 800ca78:	4770      	bx	lr

0800ca7a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b086      	sub	sp, #24
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ca94:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d007      	beq.n	800caac <dir_sdi+0x32>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800caa2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d301      	bcc.n	800cab0 <dir_sdi+0x36>
		return FR_INT_ERR;
 800caac:	2302      	movs	r3, #2
 800caae:	e091      	b.n	800cbd4 <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10c      	bne.n	800cad0 <dir_sdi+0x56>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cabc:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d105      	bne.n	800cad0 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800caca:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 800cace:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d111      	bne.n	800cafa <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cadc:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800cae0:	461a      	mov	r2, r3
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d301      	bcc.n	800caec <dir_sdi+0x72>
			return FR_INT_ERR;
 800cae8:	2302      	movs	r3, #2
 800caea:	e073      	b.n	800cbd4 <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800caf2:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 800caf6:	613b      	str	r3, [r7, #16]
 800caf8:	e03b      	b.n	800cb72 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cb00:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cb04:	095b      	lsrs	r3, r3, #5
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	461a      	mov	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cb10:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800cb14:	fb02 f303 	mul.w	r3, r2, r3
 800cb18:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800cb1a:	e01e      	b.n	800cb5a <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cb22:	6979      	ldr	r1, [r7, #20]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7ff fc49 	bl	800c3bc <get_fat>
 800cb2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb32:	d101      	bne.n	800cb38 <dir_sdi+0xbe>
 800cb34:	2301      	movs	r3, #1
 800cb36:	e04d      	b.n	800cbd4 <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d907      	bls.n	800cb4e <dir_sdi+0xd4>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cb44:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d301      	bcc.n	800cb52 <dir_sdi+0xd8>
				return FR_INT_ERR;
 800cb4e:	2302      	movs	r3, #2
 800cb50:	e040      	b.n	800cbd4 <dir_sdi+0x15a>
			idx -= ic;
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d2dc      	bcs.n	800cb1c <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cb68:	6979      	ldr	r1, [r7, #20]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fc05 	bl	800c37a <clust2sect>
 800cb70:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	697a      	ldr	r2, [r7, #20]
 800cb76:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	if (!sect) return FR_INT_ERR;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <dir_sdi+0x10a>
 800cb80:	2302      	movs	r3, #2
 800cb82:	e027      	b.n	800cbd4 <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cb8a:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	461a      	mov	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	441a      	add	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cbaa:	4618      	mov	r0, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cbb2:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	461a      	mov	r2, r3
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbc2:	fb01 f202 	mul.w	r2, r1, r2
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	015b      	lsls	r3, r3, #5
 800cbca:	18c2      	adds	r2, r0, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814

	return FR_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbdc:	b590      	push	{r4, r7, lr}
 800cbde:	b087      	sub	sp, #28
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 800cbec:	3301      	adds	r3, #1
 800cbee:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d004      	beq.n	800cc02 <dir_next+0x26>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <dir_next+0x2a>
		return FR_NO_FILE;
 800cc02:	2304      	movs	r3, #4
 800cc04:	e100      	b.n	800ce08 <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cc0c:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cc10:	095b      	lsrs	r3, r3, #5
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc1c:	fb01 f202 	mul.w	r2, r1, r2
 800cc20:	1a9b      	subs	r3, r3, r2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f040 80d3 	bne.w	800cdce <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800cc2e:	1c5a      	adds	r2, r3, #1
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810

		if (!dp->clust) {		/* Static table */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10b      	bne.n	800cc58 <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cc46:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	f0c0 80bd 	bcc.w	800cdce <dir_next+0x1f2>
				return FR_NO_FILE;
 800cc54:	2304      	movs	r3, #4
 800cc56:	e0d7      	b.n	800ce08 <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cc5e:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cc62:	095b      	lsrs	r3, r3, #5
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	461a      	mov	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800cc74:	f892 2802 	ldrb.w	r2, [r2, #2050]	@ 0x802
 800cc78:	3a01      	subs	r2, #1
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f040 80a6 	bne.w	800cdce <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7ff fb93 	bl	800c3bc <get_fat>
 800cc96:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d801      	bhi.n	800cca2 <dir_next+0xc6>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e0b2      	b.n	800ce08 <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca8:	d101      	bne.n	800ccae <dir_next+0xd2>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e0ac      	b.n	800ce08 <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ccb4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d378      	bcc.n	800cdb0 <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <dir_next+0xec>
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	e09f      	b.n	800ce08 <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	f7ff fdf7 	bl	800c8ca <create_chain>
 800ccdc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <dir_next+0x10c>
 800cce4:	2307      	movs	r3, #7
 800cce6:	e08f      	b.n	800ce08 <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d101      	bne.n	800ccf2 <dir_next+0x116>
 800ccee:	2302      	movs	r3, #2
 800ccf0:	e08a      	b.n	800ce08 <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d101      	bne.n	800ccfe <dir_next+0x122>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e084      	b.n	800ce08 <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff fa13 	bl	800c130 <sync_window>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <dir_next+0x138>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e079      	b.n	800ce08 <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd22:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cd26:	461a      	mov	r2, r3
 800cd28:	2100      	movs	r1, #0
 800cd2a:	f7ff f809 	bl	800bd40 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 4800 	ldr.w	r4, [r3, #2048]	@ 0x800
 800cd3a:	6979      	ldr	r1, [r7, #20]
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f7ff fb1c 	bl	800c37a <clust2sect>
 800cd42:	4603      	mov	r3, r0
 800cd44:	f8c4 3830 	str.w	r3, [r4, #2096]	@ 0x830
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800cd48:	2300      	movs	r3, #0
 800cd4a:	613b      	str	r3, [r7, #16]
 800cd4c:	e01b      	b.n	800cd86 <dir_next+0x1aa>
						dp->fs->wflag = 1;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff f9e5 	bl	800c130 <sync_window>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <dir_next+0x194>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e04b      	b.n	800ce08 <dir_next+0x22c>
						dp->fs->winsect++;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd76:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	3301      	adds	r3, #1
 800cd84:	613b      	str	r3, [r7, #16]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd8c:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800cd90:	461a      	mov	r2, r3
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d3da      	bcc.n	800cd4e <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cd9e:	f8d3 1830 	ldr.w	r1, [r3, #2096]	@ 0x830
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	1a8a      	subs	r2, r1, r2
 800cdac:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
				dp->sect = clust2sect(dp->fs, clst);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cdbe:	6979      	ldr	r1, [r7, #20]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fada 	bl	800c37a <clust2sect>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cdde:	4618      	mov	r0, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800cde6:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800cdea:	095b      	lsrs	r3, r3, #5
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	461a      	mov	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdf6:	fb01 f202 	mul.w	r2, r1, r2
 800cdfa:	1a9b      	subs	r3, r3, r2
 800cdfc:	015b      	lsls	r3, r3, #5
 800cdfe:	18c2      	adds	r2, r0, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814

	return FR_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	371c      	adds	r7, #28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}

0800ce10 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7ff fe2c 	bl	800ca7a <dir_sdi>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d131      	bne.n	800ce90 <dir_alloc+0x80>
		n = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	f7ff f9bf 	bl	800c1c2 <move_window>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d11f      	bne.n	800ce8e <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2be5      	cmp	r3, #229	@ 0xe5
 800ce58:	d005      	beq.n	800ce66 <dir_alloc+0x56>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d107      	bne.n	800ce76 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	60bb      	str	r3, [r7, #8]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d102      	bne.n	800ce7a <dir_alloc+0x6a>
 800ce74:	e00c      	b.n	800ce90 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ce76:	2300      	movs	r3, #0
 800ce78:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fead 	bl	800cbdc <dir_next>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d0d1      	beq.n	800ce30 <dir_alloc+0x20>
 800ce8c:	e000      	b.n	800ce90 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800ce8e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	d101      	bne.n	800ce9a <dir_alloc+0x8a>
 800ce96:	2307      	movs	r3, #7
 800ce98:	73fb      	strb	r3, [r7, #15]
	return res;
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	331b      	adds	r3, #27
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	021b      	lsls	r3, r3, #8
 800ceb6:	b21a      	sxth	r2, r3
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	331a      	adds	r3, #26
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	b21b      	sxth	r3, r3
 800cec0:	4313      	orrs	r3, r2
 800cec2:	b21b      	sxth	r3, r3
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d10f      	bne.n	800cef2 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	3315      	adds	r3, #21
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	021b      	lsls	r3, r3, #8
 800ceda:	b21a      	sxth	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	3314      	adds	r3, #20
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	b21b      	sxth	r3, r3
 800cee4:	4313      	orrs	r3, r2
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	041b      	lsls	r3, r3, #16
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	60fb      	str	r3, [r7, #12]

	return cl;
 800cef2:	68fb      	ldr	r3, [r7, #12]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bc80      	pop	{r7}
 800cefc:	4770      	bx	lr

0800cefe <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	331a      	adds	r3, #26
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	b2d2      	uxtb	r2, r2
 800cf10:	701a      	strb	r2, [r3, #0]
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	331b      	adds	r3, #27
 800cf1e:	b2d2      	uxtb	r2, r2
 800cf20:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	0c1a      	lsrs	r2, r3, #16
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	3314      	adds	r3, #20
 800cf2a:	b2d2      	uxtb	r2, r2
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	0c1b      	lsrs	r3, r3, #16
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	0a1b      	lsrs	r3, r3, #8
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	3315      	adds	r3, #21
 800cf3c:	b2d2      	uxtb	r2, r2
 800cf3e:	701a      	strb	r2, [r3, #0]
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bc80      	pop	{r7}
 800cf48:	4770      	bx	lr
	...

0800cf4c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf5e:	1e5a      	subs	r2, r3, #1
 800cf60:	4613      	mov	r3, r2
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	4413      	add	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	613b      	str	r3, [r7, #16]
 800cf70:	2301      	movs	r3, #1
 800cf72:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800cf74:	4a2b      	ldr	r2, [pc, #172]	@ (800d024 <cmp_lfn+0xd8>)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	4413      	add	r3, r2
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	4413      	add	r3, r2
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	021b      	lsls	r3, r3, #8
 800cf86:	b21a      	sxth	r2, r3
 800cf88:	4926      	ldr	r1, [pc, #152]	@ (800d024 <cmp_lfn+0xd8>)
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	440b      	add	r3, r1
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	4619      	mov	r1, r3
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	440b      	add	r3, r1
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	b21b      	sxth	r3, r3
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	b21b      	sxth	r3, r3
 800cf9e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800cfa0:	89fb      	ldrh	r3, [r7, #14]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d019      	beq.n	800cfda <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800cfa6:	89bb      	ldrh	r3, [r7, #12]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f002 f927 	bl	800f1fc <ff_wtoupper>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2bfe      	cmp	r3, #254	@ 0xfe
 800cfb6:	d80e      	bhi.n	800cfd6 <cmp_lfn+0x8a>
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	1c5a      	adds	r2, r3, #1
 800cfbc:	617a      	str	r2, [r7, #20]
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f002 f918 	bl	800f1fc <ff_wtoupper>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	461a      	mov	r2, r3
 800cfd0:	89fb      	ldrh	r3, [r7, #14]
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d008      	beq.n	800cfe8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	e01f      	b.n	800d01a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800cfda:	89bb      	ldrh	r3, [r7, #12]
 800cfdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d001      	beq.n	800cfe8 <cmp_lfn+0x9c>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e018      	b.n	800d01a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	3301      	adds	r3, #1
 800cfec:	613b      	str	r3, [r7, #16]
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	2b0c      	cmp	r3, #12
 800cff2:	d9bf      	bls.n	800cf74 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <cmp_lfn+0xcc>
 800d000:	89fb      	ldrh	r3, [r7, #14]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d008      	beq.n	800d018 <cmp_lfn+0xcc>
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <cmp_lfn+0xcc>
		return 0;
 800d014:	2300      	movs	r3, #0
 800d016:	e000      	b.n	800d01a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800d018:	2301      	movs	r3, #1
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	08012664 	.word	0x08012664

0800d028 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800d028:	b480      	push	{r7}
 800d02a:	b089      	sub	sp, #36	@ 0x24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	4611      	mov	r1, r2
 800d034:	461a      	mov	r2, r3
 800d036:	460b      	mov	r3, r1
 800d038:	71fb      	strb	r3, [r7, #7]
 800d03a:	4613      	mov	r3, r2
 800d03c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	330d      	adds	r3, #13
 800d042:	79ba      	ldrb	r2, [r7, #6]
 800d044:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	330b      	adds	r3, #11
 800d04a:	220f      	movs	r2, #15
 800d04c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	330c      	adds	r3, #12
 800d052:	2200      	movs	r2, #0
 800d054:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	331a      	adds	r3, #26
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	331b      	adds	r3, #27
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	1e5a      	subs	r2, r3, #1
 800d06a:	4613      	mov	r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	4413      	add	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	82fb      	strh	r3, [r7, #22]
 800d07a:	2300      	movs	r3, #0
 800d07c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800d07e:	8afb      	ldrh	r3, [r7, #22]
 800d080:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d084:	4293      	cmp	r3, r2
 800d086:	d007      	beq.n	800d098 <fit_lfn+0x70>
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	61fa      	str	r2, [r7, #28]
 800d08e:	005b      	lsls	r3, r3, #1
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	4413      	add	r3, r2
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800d098:	4a1c      	ldr	r2, [pc, #112]	@ (800d10c <fit_lfn+0xe4>)
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	4413      	add	r3, r2
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	8afa      	ldrh	r2, [r7, #22]
 800d0a8:	b2d2      	uxtb	r2, r2
 800d0aa:	701a      	strb	r2, [r3, #0]
 800d0ac:	8afb      	ldrh	r3, [r7, #22]
 800d0ae:	0a1b      	lsrs	r3, r3, #8
 800d0b0:	b299      	uxth	r1, r3
 800d0b2:	4a16      	ldr	r2, [pc, #88]	@ (800d10c <fit_lfn+0xe4>)
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	4413      	add	r3, r2
 800d0c0:	b2ca      	uxtb	r2, r1
 800d0c2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800d0c4:	8afb      	ldrh	r3, [r7, #22]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <fit_lfn+0xa8>
 800d0ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	61bb      	str	r3, [r7, #24]
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b0c      	cmp	r3, #12
 800d0da:	d9d0      	bls.n	800d07e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800d0dc:	8afb      	ldrh	r3, [r7, #22]
 800d0de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d006      	beq.n	800d0f4 <fit_lfn+0xcc>
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d103      	bne.n	800d0fc <fit_lfn+0xd4>
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	79fa      	ldrb	r2, [r7, #7]
 800d100:	701a      	strb	r2, [r3, #0]
}
 800d102:	bf00      	nop
 800d104:	3724      	adds	r7, #36	@ 0x24
 800d106:	46bd      	mov	sp, r7
 800d108:	bc80      	pop	{r7}
 800d10a:	4770      	bx	lr
 800d10c:	08012664 	.word	0x08012664

0800d110 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08c      	sub	sp, #48	@ 0x30
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d11e:	220b      	movs	r2, #11
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f7fe fdee 	bl	800bd04 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b05      	cmp	r3, #5
 800d12c:	d92b      	bls.n	800d186 <gen_numname+0x76>
		sr = seq;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d132:	e022      	b.n	800d17a <gen_numname+0x6a>
			wc = *lfn++;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	1c9a      	adds	r2, r3, #2
 800d138:	607a      	str	r2, [r7, #4]
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d13e:	2300      	movs	r3, #0
 800d140:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d142:	e017      	b.n	800d174 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	005a      	lsls	r2, r3, #1
 800d148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d152:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d154:	085b      	lsrs	r3, r3, #1
 800d156:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d005      	beq.n	800d16e <gen_numname+0x5e>
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800d168:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800d16c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d170:	3301      	adds	r3, #1
 800d172:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d176:	2b0f      	cmp	r3, #15
 800d178:	d9e4      	bls.n	800d144 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1d8      	bne.n	800d134 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d186:	2307      	movs	r3, #7
 800d188:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	b2db      	uxtb	r3, r3
 800d194:	3330      	adds	r3, #48	@ 0x30
 800d196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d19a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d19e:	2b39      	cmp	r3, #57	@ 0x39
 800d1a0:	d904      	bls.n	800d1ac <gen_numname+0x9c>
 800d1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d1a6:	3307      	adds	r3, #7
 800d1a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ae:	1e5a      	subs	r2, r3, #1
 800d1b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d1b2:	3330      	adds	r3, #48	@ 0x30
 800d1b4:	443b      	add	r3, r7
 800d1b6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d1ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	091b      	lsrs	r3, r3, #4
 800d1c2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1df      	bne.n	800d18a <gen_numname+0x7a>
	ns[i] = '~';
 800d1ca:	f107 0214 	add.w	r2, r7, #20
 800d1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d0:	4413      	add	r3, r2
 800d1d2:	227e      	movs	r2, #126	@ 0x7e
 800d1d4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1da:	e002      	b.n	800d1e2 <gen_numname+0xd2>
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1de:	3301      	adds	r3, #1
 800d1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d205      	bcs.n	800d1f6 <gen_numname+0xe6>
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	4413      	add	r3, r2
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	d1f2      	bne.n	800d1dc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f8:	2b07      	cmp	r3, #7
 800d1fa:	d807      	bhi.n	800d20c <gen_numname+0xfc>
 800d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d202:	3330      	adds	r3, #48	@ 0x30
 800d204:	443b      	add	r3, r7
 800d206:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d20a:	e000      	b.n	800d20e <gen_numname+0xfe>
 800d20c:	2120      	movs	r1, #32
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	1c5a      	adds	r2, r3, #1
 800d212:	627a      	str	r2, [r7, #36]	@ 0x24
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	4413      	add	r3, r2
 800d218:	460a      	mov	r2, r1
 800d21a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21e:	2b07      	cmp	r3, #7
 800d220:	d9e9      	bls.n	800d1f6 <gen_numname+0xe6>
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	3730      	adds	r7, #48	@ 0x30
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d238:	230b      	movs	r3, #11
 800d23a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	0852      	lsrs	r2, r2, #1
 800d242:	01db      	lsls	r3, r3, #7
 800d244:	4313      	orrs	r3, r2
 800d246:	b2da      	uxtb	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	1c59      	adds	r1, r3, #1
 800d24c:	6079      	str	r1, [r7, #4]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	4413      	add	r3, r2
 800d252:	73fb      	strb	r3, [r7, #15]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	3b01      	subs	r3, #1
 800d258:	60bb      	str	r3, [r7, #8]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1ed      	bne.n	800d23c <sum_sfn+0x10>
	return sum;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	bc80      	pop	{r7}
 800d26a:	4770      	bx	lr

0800d26c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d274:	2100      	movs	r1, #0
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff fbff 	bl	800ca7a <dir_sdi>
 800d27c:	4603      	mov	r3, r0
 800d27e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <dir_find+0x1e>
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	e0ac      	b.n	800d3e4 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d28a:	23ff      	movs	r3, #255	@ 0xff
 800d28c:	753b      	strb	r3, [r7, #20]
 800d28e:	7d3b      	ldrb	r3, [r7, #20]
 800d290:	757b      	strb	r3, [r7, #21]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d298:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe ff89 	bl	800c1c2 <move_window>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2b4:	7dfb      	ldrb	r3, [r7, #23]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f040 808e 	bne.w	800d3d8 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800d2c2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2ca:	7dbb      	ldrb	r3, [r7, #22]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <dir_find+0x6a>
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	75fb      	strb	r3, [r7, #23]
 800d2d4:	e085      	b.n	800d3e2 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	330b      	adds	r3, #11
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2e0:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d2e2:	7dbb      	ldrb	r3, [r7, #22]
 800d2e4:	2be5      	cmp	r3, #229	@ 0xe5
 800d2e6:	d007      	beq.n	800d2f8 <dir_find+0x8c>
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	f003 0308 	and.w	r3, r3, #8
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00a      	beq.n	800d308 <dir_find+0x9c>
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
 800d2f4:	2b0f      	cmp	r3, #15
 800d2f6:	d007      	beq.n	800d308 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d2f8:	23ff      	movs	r3, #255	@ 0xff
 800d2fa:	757b      	strb	r3, [r7, #21]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d302:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
 800d306:	e05c      	b.n	800d3c2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	2b0f      	cmp	r3, #15
 800d30c:	d133      	bne.n	800d376 <dir_find+0x10a>
				if (dp->lfn) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800d314:	2b00      	cmp	r3, #0
 800d316:	d054      	beq.n	800d3c2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d318:	7dbb      	ldrb	r3, [r7, #22]
 800d31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00e      	beq.n	800d340 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	7b5b      	ldrb	r3, [r3, #13]
 800d326:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800d328:	7dbb      	ldrb	r3, [r7, #22]
 800d32a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d32e:	75bb      	strb	r3, [r7, #22]
 800d330:	7dbb      	ldrb	r3, [r7, #22]
 800d332:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800d340:	7dba      	ldrb	r2, [r7, #22]
 800d342:	7d7b      	ldrb	r3, [r7, #21]
 800d344:	429a      	cmp	r2, r3
 800d346:	d113      	bne.n	800d370 <dir_find+0x104>
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	330d      	adds	r3, #13
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	7d3a      	ldrb	r2, [r7, #20]
 800d350:	429a      	cmp	r2, r3
 800d352:	d10d      	bne.n	800d370 <dir_find+0x104>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800d35a:	6939      	ldr	r1, [r7, #16]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff fdf5 	bl	800cf4c <cmp_lfn>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <dir_find+0x104>
 800d368:	7d7b      	ldrb	r3, [r7, #21]
 800d36a:	3b01      	subs	r3, #1
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	e000      	b.n	800d372 <dir_find+0x106>
 800d370:	23ff      	movs	r3, #255	@ 0xff
 800d372:	757b      	strb	r3, [r7, #21]
 800d374:	e025      	b.n	800d3c2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800d376:	7d7b      	ldrb	r3, [r7, #21]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d107      	bne.n	800d38c <dir_find+0x120>
 800d37c:	6938      	ldr	r0, [r7, #16]
 800d37e:	f7ff ff55 	bl	800d22c <sum_sfn>
 800d382:	4603      	mov	r3, r0
 800d384:	461a      	mov	r2, r3
 800d386:	7d3b      	ldrb	r3, [r7, #20]
 800d388:	4293      	cmp	r3, r2
 800d38a:	d027      	beq.n	800d3dc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d392:	330b      	adds	r3, #11
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <dir_find+0x148>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d3a4:	220b      	movs	r2, #11
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6938      	ldr	r0, [r7, #16]
 800d3aa:	f7fe fce3 	bl	800bd74 <mem_cmp>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d015      	beq.n	800d3e0 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800d3b4:	23ff      	movs	r3, #255	@ 0xff
 800d3b6:	757b      	strb	r3, [r7, #21]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3be:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff fc09 	bl	800cbdc <dir_next>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f43f af63 	beq.w	800d29c <dir_find+0x30>
 800d3d6:	e004      	b.n	800d3e2 <dir_find+0x176>
		if (res != FR_OK) break;
 800d3d8:	bf00      	nop
 800d3da:	e002      	b.n	800d3e2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800d3dc:	bf00      	nop
 800d3de:	e000      	b.n	800d3e2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3e0:	bf00      	nop

	return res;
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08c      	sub	sp, #48	@ 0x30
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d3fa:	623b      	str	r3, [r7, #32]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800d402:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800d404:	f107 030c 	add.w	r3, r7, #12
 800d408:	220c      	movs	r2, #12
 800d40a:	6a39      	ldr	r1, [r7, #32]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe fc79 	bl	800bd04 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	f003 0301 	and.w	r3, r3, #1
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d037      	beq.n	800d48c <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800d41c:	6a3b      	ldr	r3, [r7, #32]
 800d41e:	330b      	adds	r3, #11
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
		for (n = 1; n < 100; n++) {
 800d42c:	2301      	movs	r3, #1
 800d42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d430:	e013      	b.n	800d45a <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800d432:	f107 010c 	add.w	r1, r7, #12
 800d436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d438:	69fa      	ldr	r2, [r7, #28]
 800d43a:	6a38      	ldr	r0, [r7, #32]
 800d43c:	f7ff fe68 	bl	800d110 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff ff13 	bl	800d26c <dir_find>
 800d446:	4603      	mov	r3, r0
 800d448:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800d44c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d450:	2b00      	cmp	r3, #0
 800d452:	d106      	bne.n	800d462 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800d454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d456:	3301      	adds	r3, #1
 800d458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45c:	2b63      	cmp	r3, #99	@ 0x63
 800d45e:	d9e8      	bls.n	800d432 <dir_register+0x46>
 800d460:	e000      	b.n	800d464 <dir_register+0x78>
			if (res != FR_OK) break;
 800d462:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d466:	2b64      	cmp	r3, #100	@ 0x64
 800d468:	d101      	bne.n	800d46e <dir_register+0x82>
 800d46a:	2307      	movs	r3, #7
 800d46c:	e0c5      	b.n	800d5fa <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d46e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d472:	2b04      	cmp	r3, #4
 800d474:	d002      	beq.n	800d47c <dir_register+0x90>
 800d476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d47a:	e0be      	b.n	800d5fa <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800d47c:	6a3b      	ldr	r3, [r7, #32]
 800d47e:	330b      	adds	r3, #11
 800d480:	7dfa      	ldrb	r2, [r7, #23]
 800d482:	701a      	strb	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	69fa      	ldr	r2, [r7, #28]
 800d488:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	f003 0302 	and.w	r3, r3, #2
 800d492:	2b00      	cmp	r3, #0
 800d494:	d014      	beq.n	800d4c0 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800d496:	2300      	movs	r3, #0
 800d498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d49a:	e002      	b.n	800d4a2 <dir_register+0xb6>
 800d49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d49e:	3301      	adds	r3, #1
 800d4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	69fa      	ldr	r2, [r7, #28]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1f5      	bne.n	800d49c <dir_register+0xb0>
		nent = (n + 25) / 13;
 800d4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b2:	3319      	adds	r3, #25
 800d4b4:	4a53      	ldr	r2, [pc, #332]	@ (800d604 <dir_register+0x218>)
 800d4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ba:	089b      	lsrs	r3, r3, #2
 800d4bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4be:	e001      	b.n	800d4c4 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d4c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fca2 	bl	800ce10 <dir_alloc>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d4d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d153      	bne.n	800d582 <dir_register+0x196>
 800d4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d04d      	beq.n	800d582 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	@ 0x806
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff fac0 	bl	800ca7a <dir_sdi>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d504:	2b00      	cmp	r3, #0
 800d506:	d13c      	bne.n	800d582 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fe8c 	bl	800d22c <sum_sfn>
 800d514:	4603      	mov	r3, r0
 800d516:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800d524:	4619      	mov	r1, r3
 800d526:	4610      	mov	r0, r2
 800d528:	f7fe fe4b 	bl	800c1c2 <move_window>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800d532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d536:	2b00      	cmp	r3, #0
 800d538:	d122      	bne.n	800d580 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 0820 	ldr.w	r0, [r3, #2080]	@ 0x820
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	7efb      	ldrb	r3, [r7, #27]
 800d54c:	f7ff fd6c 	bl	800d028 <fit_lfn>
				dp->fs->wflag = 1;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
				res = dir_next(dp, 0);	/* Next entry */
 800d55c:	2100      	movs	r1, #0
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff fb3c 	bl	800cbdc <dir_next>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800d56a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d107      	bne.n	800d582 <dir_register+0x196>
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	3b01      	subs	r3, #1
 800d576:	627b      	str	r3, [r7, #36]	@ 0x24
 800d578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1cc      	bne.n	800d518 <dir_register+0x12c>
 800d57e:	e000      	b.n	800d582 <dir_register+0x196>
				if (res != FR_OK) break;
 800d580:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800d582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d586:	2b00      	cmp	r3, #0
 800d588:	d135      	bne.n	800d5f6 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800d596:	4619      	mov	r1, r3
 800d598:	4610      	mov	r0, r2
 800d59a:	f7fe fe12 	bl	800c1c2 <move_window>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800d5a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d124      	bne.n	800d5f6 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fbc2 	bl	800bd40 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 0814 	ldr.w	r0, [r3, #2068]	@ 0x814
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d5c8:	220b      	movs	r2, #11
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	f7fe fb9a 	bl	800bd04 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d5d6:	330b      	adds	r3, #11
 800d5d8:	781a      	ldrb	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800d5e0:	330c      	adds	r3, #12
 800d5e2:	f002 0218 	and.w	r2, r2, #24
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
		}
	}

	return res;
 800d5f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3730      	adds	r7, #48	@ 0x30
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	4ec4ec4f 	.word	0x4ec4ec4f

0800d608 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08a      	sub	sp, #40	@ 0x28
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	613b      	str	r3, [r7, #16]
 800d618:	e002      	b.n	800d620 <create_name+0x18>
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	3301      	adds	r3, #1
 800d61e:	613b      	str	r3, [r7, #16]
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2b2f      	cmp	r3, #47	@ 0x2f
 800d626:	d0f8      	beq.n	800d61a <create_name+0x12>
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d62e:	d0f4      	beq.n	800d61a <create_name+0x12>
	lfn = dp->lfn;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800d636:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	61ba      	str	r2, [r7, #24]
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	4413      	add	r3, r2
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800d64e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d650:	2b1f      	cmp	r3, #31
 800d652:	d92f      	bls.n	800d6b4 <create_name+0xac>
 800d654:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d656:	2b2f      	cmp	r3, #47	@ 0x2f
 800d658:	d02c      	beq.n	800d6b4 <create_name+0xac>
 800d65a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d65c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d65e:	d029      	beq.n	800d6b4 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2bfe      	cmp	r3, #254	@ 0xfe
 800d664:	d901      	bls.n	800d66a <create_name+0x62>
			return FR_INVALID_NAME;
 800d666:	2306      	movs	r3, #6
 800d668:	e182      	b.n	800d970 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d66a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d672:	2101      	movs	r1, #1
 800d674:	4618      	mov	r0, r3
 800d676:	f001 fd87 	bl	800f188 <ff_convert>
 800d67a:	4603      	mov	r3, r0
 800d67c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d67e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <create_name+0x80>
 800d684:	2306      	movs	r3, #6
 800d686:	e173      	b.n	800d970 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800d688:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d68a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d68c:	d809      	bhi.n	800d6a2 <create_name+0x9a>
 800d68e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d690:	4619      	mov	r1, r3
 800d692:	488e      	ldr	r0, [pc, #568]	@ (800d8cc <create_name+0x2c4>)
 800d694:	f7fe fb94 	bl	800bdc0 <chk_chr>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <create_name+0x9a>
			return FR_INVALID_NAME;
 800d69e:	2306      	movs	r3, #6
 800d6a0:	e166      	b.n	800d970 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	617a      	str	r2, [r7, #20]
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d6b0:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d6b2:	e7c5      	b.n	800d640 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	441a      	add	r2, r3
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800d6be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6c0:	2b1f      	cmp	r3, #31
 800d6c2:	d801      	bhi.n	800d6c8 <create_name+0xc0>
 800d6c4:	2304      	movs	r3, #4
 800d6c6:	e000      	b.n	800d6ca <create_name+0xc2>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800d6ce:	e011      	b.n	800d6f4 <create_name+0xec>
		w = lfn[di - 1];
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	4413      	add	r3, r2
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d6e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6e4:	2b20      	cmp	r3, #32
 800d6e6:	d002      	beq.n	800d6ee <create_name+0xe6>
 800d6e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d6ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6ec:	d106      	bne.n	800d6fc <create_name+0xf4>
		di--;
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1ea      	bne.n	800d6d0 <create_name+0xc8>
 800d6fa:	e000      	b.n	800d6fe <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800d6fc:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <create_name+0x100>
 800d704:	2306      	movs	r3, #6
 800d706:	e133      	b.n	800d970 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	4413      	add	r3, r2
 800d710:	2200      	movs	r2, #0
 800d712:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d71a:	220b      	movs	r2, #11
 800d71c:	2120      	movs	r1, #32
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fb0e 	bl	800bd40 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d724:	2300      	movs	r3, #0
 800d726:	61bb      	str	r3, [r7, #24]
 800d728:	e002      	b.n	800d730 <create_name+0x128>
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	3301      	adds	r3, #1
 800d72e:	61bb      	str	r3, [r7, #24]
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	2b20      	cmp	r3, #32
 800d73c:	d0f5      	beq.n	800d72a <create_name+0x122>
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	2b2e      	cmp	r3, #46	@ 0x2e
 800d74a:	d0ee      	beq.n	800d72a <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d009      	beq.n	800d766 <create_name+0x15e>
 800d752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d756:	f043 0303 	orr.w	r3, r3, #3
 800d75a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d75e:	e002      	b.n	800d766 <create_name+0x15e>
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	3b01      	subs	r3, #1
 800d764:	617b      	str	r3, [r7, #20]
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d009      	beq.n	800d780 <create_name+0x178>
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d772:	3b01      	subs	r3, #1
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d77e:	d1ef      	bne.n	800d760 <create_name+0x158>

	b = i = 0; ni = 8;
 800d780:	2300      	movs	r3, #0
 800d782:	623b      	str	r3, [r7, #32]
 800d784:	2300      	movs	r3, #0
 800d786:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d78a:	2308      	movs	r3, #8
 800d78c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	61ba      	str	r2, [r7, #24]
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	4413      	add	r3, r2
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d79e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 8090 	beq.w	800d8c6 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d7a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7a8:	2b20      	cmp	r3, #32
 800d7aa:	d006      	beq.n	800d7ba <create_name+0x1b2>
 800d7ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7b0:	d10a      	bne.n	800d7c8 <create_name+0x1c0>
 800d7b2:	69ba      	ldr	r2, [r7, #24]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d006      	beq.n	800d7c8 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800d7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7be:	f043 0303 	orr.w	r3, r3, #3
 800d7c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7c6:	e07d      	b.n	800d8c4 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d7c8:	6a3a      	ldr	r2, [r7, #32]
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d203      	bcs.n	800d7d8 <create_name+0x1d0>
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d123      	bne.n	800d820 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2b0b      	cmp	r3, #11
 800d7dc:	d106      	bne.n	800d7ec <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800d7de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7e2:	f043 0303 	orr.w	r3, r3, #3
 800d7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d7ea:	e076      	b.n	800d8da <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d005      	beq.n	800d800 <create_name+0x1f8>
 800d7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7f8:	f043 0303 	orr.w	r3, r3, #3
 800d7fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d800:	69ba      	ldr	r2, [r7, #24]
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	429a      	cmp	r2, r3
 800d806:	d867      	bhi.n	800d8d8 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	61bb      	str	r3, [r7, #24]
 800d80c:	2308      	movs	r3, #8
 800d80e:	623b      	str	r3, [r7, #32]
 800d810:	230b      	movs	r3, #11
 800d812:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d81e:	e051      	b.n	800d8c4 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d820:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d822:	2b7f      	cmp	r3, #127	@ 0x7f
 800d824:	d914      	bls.n	800d850 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d828:	2100      	movs	r1, #0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f001 fcac 	bl	800f188 <ff_convert>
 800d830:	4603      	mov	r3, r0
 800d832:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d836:	2b00      	cmp	r3, #0
 800d838:	d004      	beq.n	800d844 <create_name+0x23c>
 800d83a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d83c:	3b80      	subs	r3, #128	@ 0x80
 800d83e:	4a24      	ldr	r2, [pc, #144]	@ (800d8d0 <create_name+0x2c8>)
 800d840:	5cd3      	ldrb	r3, [r2, r3]
 800d842:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d848:	f043 0302 	orr.w	r3, r3, #2
 800d84c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <create_name+0x25e>
 800d856:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d858:	4619      	mov	r1, r3
 800d85a:	481e      	ldr	r0, [pc, #120]	@ (800d8d4 <create_name+0x2cc>)
 800d85c:	f7fe fab0 	bl	800bdc0 <chk_chr>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d008      	beq.n	800d878 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d866:	235f      	movs	r3, #95	@ 0x5f
 800d868:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d86a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d86e:	f043 0303 	orr.w	r3, r3, #3
 800d872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d876:	e01b      	b.n	800d8b0 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d87a:	2b40      	cmp	r3, #64	@ 0x40
 800d87c:	d909      	bls.n	800d892 <create_name+0x28a>
 800d87e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d880:	2b5a      	cmp	r3, #90	@ 0x5a
 800d882:	d806      	bhi.n	800d892 <create_name+0x28a>
					b |= 2;
 800d884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d888:	f043 0302 	orr.w	r3, r3, #2
 800d88c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d890:	e00e      	b.n	800d8b0 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d894:	2b60      	cmp	r3, #96	@ 0x60
 800d896:	d90b      	bls.n	800d8b0 <create_name+0x2a8>
 800d898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d89a:	2b7a      	cmp	r3, #122	@ 0x7a
 800d89c:	d808      	bhi.n	800d8b0 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800d89e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d8aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8ac:	3b20      	subs	r3, #32
 800d8ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d8b6:	6a3b      	ldr	r3, [r7, #32]
 800d8b8:	1c59      	adds	r1, r3, #1
 800d8ba:	6239      	str	r1, [r7, #32]
 800d8bc:	4413      	add	r3, r2
 800d8be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d8c0:	b2d2      	uxtb	r2, r2
 800d8c2:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800d8c4:	e763      	b.n	800d78e <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800d8c6:	bf00      	nop
 800d8c8:	e007      	b.n	800d8da <create_name+0x2d2>
 800d8ca:	bf00      	nop
 800d8cc:	080124a4 	.word	0x080124a4
 800d8d0:	080125e4 	.word	0x080125e4
 800d8d4:	080124b0 	.word	0x080124b0
			if (si > di) break;			/* No extension */
 800d8d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2be5      	cmp	r3, #229	@ 0xe5
 800d8e4:	d104      	bne.n	800d8f0 <create_name+0x2e8>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d8ec:	2205      	movs	r2, #5
 800d8ee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	2b08      	cmp	r3, #8
 800d8f4:	d104      	bne.n	800d900 <create_name+0x2f8>
 800d8f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800d900:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d904:	f003 030c 	and.w	r3, r3, #12
 800d908:	2b0c      	cmp	r3, #12
 800d90a:	d005      	beq.n	800d918 <create_name+0x310>
 800d90c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d910:	f003 0303 	and.w	r3, r3, #3
 800d914:	2b03      	cmp	r3, #3
 800d916:	d105      	bne.n	800d924 <create_name+0x31c>
		cf |= NS_LFN;
 800d918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d91c:	f043 0302 	orr.w	r3, r3, #2
 800d920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d928:	f003 0302 	and.w	r3, r3, #2
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d117      	bne.n	800d960 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d934:	f003 0303 	and.w	r3, r3, #3
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d105      	bne.n	800d948 <create_name+0x340>
 800d93c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d940:	f043 0310 	orr.w	r3, r3, #16
 800d944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d94c:	f003 030c 	and.w	r3, r3, #12
 800d950:	2b04      	cmp	r3, #4
 800d952:	d105      	bne.n	800d960 <create_name+0x358>
 800d954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d958:	f043 0308 	orr.w	r3, r3, #8
 800d95c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d966:	330b      	adds	r3, #11
 800d968:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d96c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d96e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800d970:	4618      	mov	r0, r3
 800d972:	3728      	adds	r7, #40	@ 0x28
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b2f      	cmp	r3, #47	@ 0x2f
 800d988:	d003      	beq.n	800d992 <follow_path+0x1a>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b5c      	cmp	r3, #92	@ 0x5c
 800d990:	d102      	bne.n	800d998 <follow_path+0x20>
		path++;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	3301      	adds	r3, #1
 800d996:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b1f      	cmp	r3, #31
 800d9a6:	d80a      	bhi.n	800d9be <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff f865 	bl	800ca7a <dir_sdi>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
 800d9bc:	e045      	b.n	800da4a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9be:	463b      	mov	r3, r7
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fe20 	bl	800d608 <create_name>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d136      	bne.n	800da40 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fc4a 	bl	800d26c <dir_find>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800d9e2:	7adb      	ldrb	r3, [r3, #11]
 800d9e4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	2b04      	cmp	r3, #4
 800d9f0:	d128      	bne.n	800da44 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	f003 0304 	and.w	r3, r3, #4
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d123      	bne.n	800da44 <follow_path+0xcc>
 800d9fc:	2305      	movs	r3, #5
 800d9fe:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800da00:	e020      	b.n	800da44 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da02:	7bbb      	ldrb	r3, [r7, #14]
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d11d      	bne.n	800da48 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800da12:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	330b      	adds	r3, #11
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	f003 0310 	and.w	r3, r3, #16
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d102      	bne.n	800da28 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800da22:	2305      	movs	r3, #5
 800da24:	73fb      	strb	r3, [r7, #15]
 800da26:	e010      	b.n	800da4a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fa37 	bl	800cea4 <ld_clust>
 800da36:	4602      	mov	r2, r0
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da3e:	e7be      	b.n	800d9be <follow_path+0x46>
			if (res != FR_OK) break;
 800da40:	bf00      	nop
 800da42:	e002      	b.n	800da4a <follow_path+0xd2>
				break;
 800da44:	bf00      	nop
 800da46:	e000      	b.n	800da4a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da48:	bf00      	nop
		}
	}

	return res;
 800da4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da54:	b480      	push	{r7}
 800da56:	b087      	sub	sp, #28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da5c:	f04f 33ff 	mov.w	r3, #4294967295
 800da60:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d031      	beq.n	800dace <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	617b      	str	r3, [r7, #20]
 800da70:	e002      	b.n	800da78 <get_ldnumber+0x24>
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	3301      	adds	r3, #1
 800da76:	617b      	str	r3, [r7, #20]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b1f      	cmp	r3, #31
 800da7e:	d903      	bls.n	800da88 <get_ldnumber+0x34>
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	2b3a      	cmp	r3, #58	@ 0x3a
 800da86:	d1f4      	bne.n	800da72 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b3a      	cmp	r3, #58	@ 0x3a
 800da8e:	d11c      	bne.n	800daca <get_ldnumber+0x76>
			tp = *path;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	1c5a      	adds	r2, r3, #1
 800da9a:	60fa      	str	r2, [r7, #12]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	3b30      	subs	r3, #48	@ 0x30
 800daa0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2b09      	cmp	r3, #9
 800daa6:	d80e      	bhi.n	800dac6 <get_ldnumber+0x72>
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	429a      	cmp	r2, r3
 800daae:	d10a      	bne.n	800dac6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d107      	bne.n	800dac6 <get_ldnumber+0x72>
					vol = (int)i;
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	3301      	adds	r3, #1
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	e002      	b.n	800dad0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800daca:	2300      	movs	r3, #0
 800dacc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dace:	693b      	ldr	r3, [r7, #16]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	371c      	adds	r7, #28
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bc80      	pop	{r7}
 800dad8:	4770      	bx	lr
	...

0800dadc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f04f 32ff 	mov.w	r2, #4294967295
 800daf4:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800daf8:	6839      	ldr	r1, [r7, #0]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7fe fb61 	bl	800c1c2 <move_window>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <check_fs+0x2e>
		return 3;
 800db06:	2303      	movs	r3, #3
 800db08:	e04a      	b.n	800dba0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800db10:	3301      	adds	r3, #1
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	021b      	lsls	r3, r3, #8
 800db16:	b21a      	sxth	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800db1e:	b21b      	sxth	r3, r3
 800db20:	4313      	orrs	r3, r2
 800db22:	b21b      	sxth	r3, r3
 800db24:	4a20      	ldr	r2, [pc, #128]	@ (800dba8 <check_fs+0xcc>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d001      	beq.n	800db2e <check_fs+0x52>
		return 2;
 800db2a:	2302      	movs	r3, #2
 800db2c:	e038      	b.n	800dba0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	3336      	adds	r3, #54	@ 0x36
 800db32:	3303      	adds	r3, #3
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	061a      	lsls	r2, r3, #24
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3336      	adds	r3, #54	@ 0x36
 800db3c:	3302      	adds	r3, #2
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	041b      	lsls	r3, r3, #16
 800db42:	431a      	orrs	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	3336      	adds	r3, #54	@ 0x36
 800db48:	3301      	adds	r3, #1
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	4313      	orrs	r3, r2
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800db56:	4313      	orrs	r3, r2
 800db58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db5c:	4a13      	ldr	r2, [pc, #76]	@ (800dbac <check_fs+0xd0>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d101      	bne.n	800db66 <check_fs+0x8a>
		return 0;
 800db62:	2300      	movs	r3, #0
 800db64:	e01c      	b.n	800dba0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	3352      	adds	r3, #82	@ 0x52
 800db6a:	3303      	adds	r3, #3
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	061a      	lsls	r2, r3, #24
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3352      	adds	r3, #82	@ 0x52
 800db74:	3302      	adds	r3, #2
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	041b      	lsls	r3, r3, #16
 800db7a:	431a      	orrs	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3352      	adds	r3, #82	@ 0x52
 800db80:	3301      	adds	r3, #1
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	021b      	lsls	r3, r3, #8
 800db86:	4313      	orrs	r3, r2
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800db8e:	4313      	orrs	r3, r2
 800db90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db94:	4a05      	ldr	r2, [pc, #20]	@ (800dbac <check_fs+0xd0>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d101      	bne.n	800db9e <check_fs+0xc2>
		return 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	e000      	b.n	800dba0 <check_fs+0xc4>

	return 1;
 800db9e:	2301      	movs	r3, #1
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	ffffaa55 	.word	0xffffaa55
 800dbac:	00544146 	.word	0x00544146

0800dbb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b096      	sub	sp, #88	@ 0x58
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dbc4:	68b8      	ldr	r0, [r7, #8]
 800dbc6:	f7ff ff45 	bl	800da54 <get_ldnumber>
 800dbca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dbcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	da01      	bge.n	800dbd6 <find_volume+0x26>
 800dbd2:	230b      	movs	r3, #11
 800dbd4:	e2e3      	b.n	800e19e <find_volume+0x5ee>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dbd6:	4aa4      	ldr	r2, [pc, #656]	@ (800de68 <find_volume+0x2b8>)
 800dbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbde:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <find_volume+0x3a>
 800dbe6:	230c      	movs	r3, #12
 800dbe8:	e2d9      	b.n	800e19e <find_volume+0x5ee>

	ENTER_FF(fs);						/* Lock the volume */
 800dbea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbec:	f7fe f902 	bl	800bdf4 <lock_fs>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <find_volume+0x4a>
 800dbf6:	230f      	movs	r3, #15
 800dbf8:	e2d1      	b.n	800e19e <find_volume+0x5ee>
	*rfs = fs;							/* Return pointer to the file system object */
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbfe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800dc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc02:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d01b      	beq.n	800dc42 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800dc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0c:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fd ffd9 	bl	800bbc8 <disk_status>
 800dc16:	4603      	mov	r3, r0
 800dc18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dc1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10c      	bne.n	800dc42 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800dc28:	79fb      	ldrb	r3, [r7, #7]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d007      	beq.n	800dc3e <find_volume+0x8e>
 800dc2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc32:	f003 0304 	and.w	r3, r3, #4
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800dc3a:	230a      	movs	r3, #10
 800dc3c:	e2af      	b.n	800e19e <find_volume+0x5ee>
			return FR_OK;				/* The file system object is valid */
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e2ad      	b.n	800e19e <find_volume+0x5ee>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc50:	f883 2801 	strb.w	r2, [r3, #2049]	@ 0x801
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc56:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fd ffce 	bl	800bbfc <disk_initialize>
 800dc60:	4603      	mov	r3, r0
 800dc62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800dc66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc72:	2303      	movs	r3, #3
 800dc74:	e293      	b.n	800e19e <find_volume+0x5ee>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d007      	beq.n	800dc8c <find_volume+0xdc>
 800dc7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc80:	f003 0304 	and.w	r3, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800dc88:	230a      	movs	r3, #10
 800dc8a:	e288      	b.n	800e19e <find_volume+0x5ee>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc8e:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800dc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc94:	f603 030a 	addw	r3, r3, #2058	@ 0x80a
 800dc98:	461a      	mov	r2, r3
 800dc9a:	2102      	movs	r1, #2
 800dc9c:	f7fe f814 	bl	800bcc8 <disk_ioctl>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10b      	bne.n	800dcbe <find_volume+0x10e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800dca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca8:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800dcac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcb0:	d305      	bcc.n	800dcbe <find_volume+0x10e>
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb4:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800dcb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcbc:	d901      	bls.n	800dcc2 <find_volume+0x112>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e26d      	b.n	800e19e <find_volume+0x5ee>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800dcc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dcc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dcca:	f7ff ff07 	bl	800dadc <check_fs>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800dcd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d153      	bne.n	800dd84 <find_volume+0x1d4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800dcdc:	2300      	movs	r3, #0
 800dcde:	643b      	str	r3, [r7, #64]	@ 0x40
 800dce0:	e028      	b.n	800dd34 <find_volume+0x184>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800dce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce6:	011b      	lsls	r3, r3, #4
 800dce8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dcec:	4413      	add	r3, r2
 800dcee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d012      	beq.n	800dd20 <find_volume+0x170>
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfc:	330b      	adds	r3, #11
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	061a      	lsls	r2, r3, #24
 800dd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd04:	330a      	adds	r3, #10
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	041b      	lsls	r3, r3, #16
 800dd0a:	431a      	orrs	r2, r3
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0e:	3309      	adds	r3, #9
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	4313      	orrs	r3, r2
 800dd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd18:	3208      	adds	r2, #8
 800dd1a:	7812      	ldrb	r2, [r2, #0]
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	e000      	b.n	800dd22 <find_volume+0x172>
 800dd20:	2200      	movs	r2, #0
 800dd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	3358      	adds	r3, #88	@ 0x58
 800dd28:	443b      	add	r3, r7
 800dd2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800dd2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd30:	3301      	adds	r3, #1
 800dd32:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d9d3      	bls.n	800dce2 <find_volume+0x132>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dd3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <find_volume+0x19a>
 800dd44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd46:	3b01      	subs	r3, #1
 800dd48:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800dd4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	3358      	adds	r3, #88	@ 0x58
 800dd50:	443b      	add	r3, r7
 800dd52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd56:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800dd58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <find_volume+0x1ba>
 800dd5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd62:	f7ff febb 	bl	800dadc <check_fs>
 800dd66:	4603      	mov	r3, r0
 800dd68:	e000      	b.n	800dd6c <find_volume+0x1bc>
 800dd6a:	2302      	movs	r3, #2
 800dd6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800dd70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d005      	beq.n	800dd84 <find_volume+0x1d4>
 800dd78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d9e2      	bls.n	800dd4a <find_volume+0x19a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dd84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd88:	2b03      	cmp	r3, #3
 800dd8a:	d101      	bne.n	800dd90 <find_volume+0x1e0>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e206      	b.n	800e19e <find_volume+0x5ee>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800dd90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <find_volume+0x1ec>
 800dd98:	230d      	movs	r3, #13
 800dd9a:	e200      	b.n	800e19e <find_volume+0x5ee>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9e:	7b1b      	ldrb	r3, [r3, #12]
 800dda0:	021b      	lsls	r3, r3, #8
 800dda2:	b21a      	sxth	r2, r3
 800dda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda6:	7adb      	ldrb	r3, [r3, #11]
 800dda8:	b21b      	sxth	r3, r3
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	b21a      	sxth	r2, r3
 800ddae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb0:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800ddb4:	b21b      	sxth	r3, r3
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d001      	beq.n	800ddbe <find_volume+0x20e>
		return FR_NO_FILESYSTEM;
 800ddba:	230d      	movs	r3, #13
 800ddbc:	e1ef      	b.n	800e19e <find_volume+0x5ee>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc0:	7ddb      	ldrb	r3, [r3, #23]
 800ddc2:	021b      	lsls	r3, r3, #8
 800ddc4:	b21a      	sxth	r2, r3
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc8:	7d9b      	ldrb	r3, [r3, #22]
 800ddca:	b21b      	sxth	r3, r3
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	b21b      	sxth	r3, r3
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ddd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d112      	bne.n	800de00 <find_volume+0x250>
 800ddda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dddc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800dde0:	061a      	lsls	r2, r3, #24
 800dde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800dde8:	041b      	lsls	r3, r3, #16
 800ddea:	431a      	orrs	r2, r3
 800ddec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ddf2:	021b      	lsls	r3, r3, #8
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddf8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800de00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de04:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800de08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0a:	7c1a      	ldrb	r2, [r3, #16]
 800de0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0e:	f883 2803 	strb.w	r2, [r3, #2051]	@ 0x803
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800de12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de14:	f893 3803 	ldrb.w	r3, [r3, #2051]	@ 0x803
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d006      	beq.n	800de2a <find_volume+0x27a>
 800de1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1e:	f893 3803 	ldrb.w	r3, [r3, #2051]	@ 0x803
 800de22:	2b02      	cmp	r3, #2
 800de24:	d001      	beq.n	800de2a <find_volume+0x27a>
		return FR_NO_FILESYSTEM;
 800de26:	230d      	movs	r3, #13
 800de28:	e1b9      	b.n	800e19e <find_volume+0x5ee>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800de2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2c:	f893 3803 	ldrb.w	r3, [r3, #2051]	@ 0x803
 800de30:	461a      	mov	r2, r3
 800de32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de34:	fb02 f303 	mul.w	r3, r2, r3
 800de38:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800de3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3c:	7b5a      	ldrb	r2, [r3, #13]
 800de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de40:	f883 2802 	strb.w	r2, [r3, #2050]	@ 0x802
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800de44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de46:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00a      	beq.n	800de64 <find_volume+0x2b4>
 800de4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de50:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800de54:	461a      	mov	r2, r3
 800de56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de58:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800de5c:	3b01      	subs	r3, #1
 800de5e:	4013      	ands	r3, r2
 800de60:	2b00      	cmp	r3, #0
 800de62:	d003      	beq.n	800de6c <find_volume+0x2bc>
		return FR_NO_FILESYSTEM;
 800de64:	230d      	movs	r3, #13
 800de66:	e19a      	b.n	800e19e <find_volume+0x5ee>
 800de68:	20001a74 	.word	0x20001a74

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800de6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6e:	7c9b      	ldrb	r3, [r3, #18]
 800de70:	021b      	lsls	r3, r3, #8
 800de72:	b21a      	sxth	r2, r3
 800de74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de76:	7c5b      	ldrb	r3, [r3, #17]
 800de78:	b21b      	sxth	r3, r3
 800de7a:	4313      	orrs	r3, r2
 800de7c:	b21b      	sxth	r3, r3
 800de7e:	b29a      	uxth	r2, r3
 800de80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de82:	f8a3 2808 	strh.w	r2, [r3, #2056]	@ 0x808
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800de86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de88:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800de8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de8e:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800de92:	0952      	lsrs	r2, r2, #5
 800de94:	b292      	uxth	r2, r2
 800de96:	fbb3 f1f2 	udiv	r1, r3, r2
 800de9a:	fb01 f202 	mul.w	r2, r1, r2
 800de9e:	1a9b      	subs	r3, r3, r2
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <find_volume+0x2fa>
		return FR_NO_FILESYSTEM;
 800dea6:	230d      	movs	r3, #13
 800dea8:	e179      	b.n	800e19e <find_volume+0x5ee>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800deaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deac:	7d1b      	ldrb	r3, [r3, #20]
 800deae:	021b      	lsls	r3, r3, #8
 800deb0:	b21a      	sxth	r2, r3
 800deb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deb4:	7cdb      	ldrb	r3, [r3, #19]
 800deb6:	b21b      	sxth	r3, r3
 800deb8:	4313      	orrs	r3, r2
 800deba:	b21b      	sxth	r3, r3
 800debc:	b29b      	uxth	r3, r3
 800debe:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800dec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d112      	bne.n	800deec <find_volume+0x33c>
 800dec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800decc:	061a      	lsls	r2, r3, #24
 800dece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ded4:	041b      	lsls	r3, r3, #16
 800ded6:	431a      	orrs	r2, r3
 800ded8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800dede:	021b      	lsls	r3, r3, #8
 800dee0:	4313      	orrs	r3, r2
 800dee2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dee4:	f892 2020 	ldrb.w	r2, [r2, #32]
 800dee8:	4313      	orrs	r3, r2
 800deea:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800deec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deee:	7bdb      	ldrb	r3, [r3, #15]
 800def0:	021b      	lsls	r3, r3, #8
 800def2:	b21a      	sxth	r2, r3
 800def4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def6:	7b9b      	ldrb	r3, [r3, #14]
 800def8:	b21b      	sxth	r3, r3
 800defa:	4313      	orrs	r3, r2
 800defc:	b21b      	sxth	r3, r3
 800defe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800df00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <find_volume+0x35a>
 800df06:	230d      	movs	r3, #13
 800df08:	e149      	b.n	800e19e <find_volume+0x5ee>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800df0a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800df0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df0e:	4413      	add	r3, r2
 800df10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df12:	f8b2 1808 	ldrh.w	r1, [r2, #2056]	@ 0x808
 800df16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df18:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800df1c:	0952      	lsrs	r2, r2, #5
 800df1e:	b292      	uxth	r2, r2
 800df20:	fbb1 f2f2 	udiv	r2, r1, r2
 800df24:	b292      	uxth	r2, r2
 800df26:	4413      	add	r3, r2
 800df28:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800df2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2e:	429a      	cmp	r2, r3
 800df30:	d201      	bcs.n	800df36 <find_volume+0x386>
 800df32:	230d      	movs	r3, #13
 800df34:	e133      	b.n	800e19e <find_volume+0x5ee>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800df36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df3e:	f892 2802 	ldrb.w	r2, [r2, #2050]	@ 0x802
 800df42:	fbb3 f3f2 	udiv	r3, r3, r2
 800df46:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800df48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <find_volume+0x3a2>
 800df4e:	230d      	movs	r3, #13
 800df50:	e125      	b.n	800e19e <find_volume+0x5ee>
	fmt = FS_FAT12;
 800df52:	2301      	movs	r3, #1
 800df54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800df58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800df5e:	4293      	cmp	r3, r2
 800df60:	d902      	bls.n	800df68 <find_volume+0x3b8>
 800df62:	2302      	movs	r3, #2
 800df64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800df68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800df6e:	4293      	cmp	r3, r2
 800df70:	d902      	bls.n	800df78 <find_volume+0x3c8>
 800df72:	2303      	movs	r3, #3
 800df74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800df78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7a:	1c9a      	adds	r2, r3, #2
 800df7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7e:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
	fs->volbase = bsect;								/* Volume start sector */
 800df82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df86:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800df8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800df8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df8e:	441a      	add	r2, r3
 800df90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df92:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
	fs->database = bsect + sysect;						/* Data start sector */
 800df96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	441a      	add	r2, r3
 800df9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9e:	f8c3 282c 	str.w	r2, [r3, #2092]	@ 0x82c
	if (fmt == FS_FAT32) {
 800dfa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	d121      	bne.n	800dfee <find_volume+0x43e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfac:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <find_volume+0x408>
 800dfb4:	230d      	movs	r3, #13
 800dfb6:	e0f2      	b.n	800e19e <find_volume+0x5ee>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dfbe:	061a      	lsls	r2, r3, #24
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800dfc6:	041b      	lsls	r3, r3, #16
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dfd0:	021b      	lsls	r3, r3, #8
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfd6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800dfda:	431a      	orrs	r2, r3
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfde:	f8c3 2828 	str.w	r2, [r3, #2088]	@ 0x828
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfec:	e025      	b.n	800e03a <find_volume+0x48a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800dfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	@ 0x808
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <find_volume+0x44c>
 800dff8:	230d      	movs	r3, #13
 800dffa:	e0d0      	b.n	800e19e <find_volume+0x5ee>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800dffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffe:	f8d3 2824 	ldr.w	r2, [r3, #2084]	@ 0x824
 800e002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e004:	441a      	add	r2, r3
 800e006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e008:	f8c3 2828 	str.w	r2, [r3, #2088]	@ 0x828
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e00c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e010:	2b02      	cmp	r3, #2
 800e012:	d104      	bne.n	800e01e <find_volume+0x46e>
 800e014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e016:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	e00c      	b.n	800e038 <find_volume+0x488>
 800e01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e020:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e024:	4613      	mov	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	4413      	add	r3, r2
 800e02a:	085a      	lsrs	r2, r3, #1
 800e02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800e032:	f003 0301 	and.w	r3, r3, #1
 800e036:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800e038:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800e03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e03c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 800e040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e042:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800e046:	4619      	mov	r1, r3
 800e048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e04a:	440b      	add	r3, r1
 800e04c:	3b01      	subs	r3, #1
 800e04e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e050:	f8b1 180a 	ldrh.w	r1, [r1, #2058]	@ 0x80a
 800e054:	fbb3 f3f1 	udiv	r3, r3, r1
 800e058:	429a      	cmp	r2, r3
 800e05a:	d201      	bcs.n	800e060 <find_volume+0x4b0>
		return FR_NO_FILESYSTEM;
 800e05c:	230d      	movs	r3, #13
 800e05e:	e09e      	b.n	800e19e <find_volume+0x5ee>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800e060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e062:	f04f 32ff 	mov.w	r2, #4294967295
 800e066:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
 800e06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e072:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800e076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e078:	2280      	movs	r2, #128	@ 0x80
 800e07a:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800e07e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e082:	2b03      	cmp	r3, #3
 800e084:	d177      	bne.n	800e176 <find_volume+0x5c6>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800e086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e088:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	b21a      	sxth	r2, r3
 800e090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e092:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e096:	b21b      	sxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b21b      	sxth	r3, r3
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d16a      	bne.n	800e176 <find_volume+0x5c6>
		&& move_window(fs, bsect + 1) == FR_OK)
 800e0a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e0a8:	f7fe f88b 	bl	800c1c2 <move_window>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d161      	bne.n	800e176 <find_volume+0x5c6>
	{
		fs->fsi_flag = 0;
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0bc:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800e0c0:	021b      	lsls	r3, r3, #8
 800e0c2:	b21a      	sxth	r2, r3
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c6:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800e0ca:	b21b      	sxth	r3, r3
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	b21b      	sxth	r3, r3
 800e0d0:	4a35      	ldr	r2, [pc, #212]	@ (800e1a8 <find_volume+0x5f8>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d14f      	bne.n	800e176 <find_volume+0x5c6>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d8:	78db      	ldrb	r3, [r3, #3]
 800e0da:	061a      	lsls	r2, r3, #24
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	789b      	ldrb	r3, [r3, #2]
 800e0e0:	041b      	lsls	r3, r3, #16
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e6:	785b      	ldrb	r3, [r3, #1]
 800e0e8:	021b      	lsls	r3, r3, #8
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0ee:	7812      	ldrb	r2, [r2, #0]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	4a2e      	ldr	r2, [pc, #184]	@ (800e1ac <find_volume+0x5fc>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d13e      	bne.n	800e176 <find_volume+0x5c6>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800e0fe:	061a      	lsls	r2, r3, #24
 800e100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e102:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800e106:	041b      	lsls	r3, r3, #16
 800e108:	431a      	orrs	r2, r3
 800e10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e10c:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800e110:	021b      	lsls	r3, r3, #8
 800e112:	4313      	orrs	r3, r2
 800e114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e116:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800e11a:	4313      	orrs	r3, r2
 800e11c:	4a24      	ldr	r2, [pc, #144]	@ (800e1b0 <find_volume+0x600>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d129      	bne.n	800e176 <find_volume+0x5c6>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800e122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e124:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800e128:	061a      	lsls	r2, r3, #24
 800e12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12c:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800e130:	041b      	lsls	r3, r3, #16
 800e132:	431a      	orrs	r2, r3
 800e134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e136:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800e13a:	021b      	lsls	r3, r3, #8
 800e13c:	4313      	orrs	r3, r2
 800e13e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e140:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800e144:	431a      	orrs	r2, r3
 800e146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e148:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800e14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14e:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800e152:	061a      	lsls	r2, r3, #24
 800e154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e156:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800e15a:	041b      	lsls	r3, r3, #16
 800e15c:	431a      	orrs	r2, r3
 800e15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e160:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800e164:	021b      	lsls	r3, r3, #8
 800e166:	4313      	orrs	r3, r2
 800e168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e16a:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800e16e:	431a      	orrs	r2, r3
 800e170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e172:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800e176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e178:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e17c:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
	fs->id = ++Fsid;	/* File system mount ID */
 800e180:	4b0c      	ldr	r3, [pc, #48]	@ (800e1b4 <find_volume+0x604>)
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	3301      	adds	r3, #1
 800e186:	b29a      	uxth	r2, r3
 800e188:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b4 <find_volume+0x604>)
 800e18a:	801a      	strh	r2, [r3, #0]
 800e18c:	4b09      	ldr	r3, [pc, #36]	@ (800e1b4 <find_volume+0x604>)
 800e18e:	881a      	ldrh	r2, [r3, #0]
 800e190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e192:	f8a3 2806 	strh.w	r2, [r3, #2054]	@ 0x806
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800e196:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e198:	f7fd ffa0 	bl	800c0dc <clear_lock>
#endif

	return FR_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3758      	adds	r7, #88	@ 0x58
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	ffffaa55 	.word	0xffffaa55
 800e1ac:	41615252 	.word	0x41615252
 800e1b0:	61417272 	.word	0x61417272
 800e1b4:	20001a78 	.word	0x20001a78

0800e1b8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d022      	beq.n	800e210 <validate+0x58>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d01d      	beq.n	800e210 <validate+0x58>
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e1da:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d016      	beq.n	800e210 <validate+0x58>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e1e8:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	@ 0x804
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d10c      	bne.n	800e210 <validate+0x58>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e1fc:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 800e200:	4618      	mov	r0, r3
 800e202:	f7fd fce1 	bl	800bbc8 <disk_status>
 800e206:	4603      	mov	r3, r0
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800e210:	2309      	movs	r3, #9
 800e212:	e00b      	b.n	800e22c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fd fdea 	bl	800bdf4 <lock_fs>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <validate+0x72>
 800e226:	230f      	movs	r3, #15
 800e228:	e000      	b.n	800e22c <validate+0x74>

	return FR_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	4613      	mov	r3, r2
 800e240:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800e246:	f107 0310 	add.w	r3, r7, #16
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff fc02 	bl	800da54 <get_ldnumber>
 800e250:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	2b00      	cmp	r3, #0
 800e256:	da01      	bge.n	800e25c <f_mount+0x28>
 800e258:	230b      	movs	r3, #11
 800e25a:	e04c      	b.n	800e2f6 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e25c:	4a28      	ldr	r2, [pc, #160]	@ (800e300 <f_mount+0xcc>)
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e264:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d011      	beq.n	800e290 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800e26c:	69b8      	ldr	r0, [r7, #24]
 800e26e:	f7fd ff35 	bl	800c0dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e278:	4618      	mov	r0, r3
 800e27a:	f001 f80d 	bl	800f298 <ff_del_syncobj>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <f_mount+0x54>
 800e284:	2302      	movs	r3, #2
 800e286:	e036      	b.n	800e2f6 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
	}

	if (fs) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d011      	beq.n	800e2ba <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	f000 ffd4 	bl	800f258 <ff_cre_syncobj>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <f_mount+0x86>
 800e2b6:	2302      	movs	r3, #2
 800e2b8:	e01d      	b.n	800e2f6 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	4910      	ldr	r1, [pc, #64]	@ (800e300 <f_mount+0xcc>)
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <f_mount+0x9c>
 800e2ca:	79fb      	ldrb	r3, [r7, #7]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d001      	beq.n	800e2d4 <f_mount+0xa0>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	e010      	b.n	800e2f6 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800e2d4:	f107 0108 	add.w	r1, r7, #8
 800e2d8:	f107 030c 	add.w	r3, r7, #12
 800e2dc:	2200      	movs	r2, #0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fc66 	bl	800dbb0 <find_volume>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	7dfa      	ldrb	r2, [r7, #23]
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fd fd8f 	bl	800be12 <unlock_fs>
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3720      	adds	r7, #32
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20001a74 	.word	0x20001a74

0800e304 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	f6ad 2d58 	subw	sp, sp, #2648	@ 0xa58
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e310:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e314:	6018      	str	r0, [r3, #0]
 800e316:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e31a:	f5a3 6325 	sub.w	r3, r3, #2640	@ 0xa50
 800e31e:	6019      	str	r1, [r3, #0]
 800e320:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e324:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e328:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800e32a:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e32e:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <f_open+0x38>
 800e338:	2309      	movs	r3, #9
 800e33a:	e267      	b.n	800e80c <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 800e33c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e340:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2200      	movs	r2, #0
 800e348:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800e34c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e350:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e354:	f607 2258 	addw	r2, r7, #2648	@ 0xa58
 800e358:	f6a2 2251 	subw	r2, r2, #2641	@ 0xa51
 800e35c:	7812      	ldrb	r2, [r2, #0]
 800e35e:	f002 021f 	and.w	r2, r2, #31
 800e362:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800e364:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e368:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	f023 0301 	bic.w	r3, r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	f107 0108 	add.w	r1, r7, #8
 800e378:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800e37c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff fc15 	bl	800dbb0 <find_volume>
 800e386:	4603      	mov	r3, r0
 800e388:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800e38c:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e390:	2b00      	cmp	r3, #0
 800e392:	f040 822d 	bne.w	800e7f0 <f_open+0x4ec>
		INIT_BUF(dj);
 800e396:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e39a:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e39e:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 800e3a2:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
 800e3a6:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e3aa:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e3ae:	f107 0214 	add.w	r2, r7, #20
 800e3b2:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
		res = follow_path(&dj, path);	/* Follow the file path */
 800e3b6:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e3ba:	f5a3 6325 	sub.w	r3, r3, #2640	@ 0xa50
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff fad6 	bl	800d978 <follow_path>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
		dir = dj.dir;
 800e3d2:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e3d6:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e3da:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800e3de:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e3e2:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d11b      	bne.n	800e422 <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 800e3ea:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d103      	bne.n	800e3fa <f_open+0xf6>
				res = FR_INVALID_NAME;
 800e3f2:	2306      	movs	r3, #6
 800e3f4:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
 800e3f8:	e013      	b.n	800e422 <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3fa:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e3fe:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	2b01      	cmp	r3, #1
 800e406:	bf8c      	ite	hi
 800e408:	2301      	movhi	r3, #1
 800e40a:	2300      	movls	r3, #0
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	461a      	mov	r2, r3
 800e410:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f7fd fd1a 	bl	800be50 <chk_lock>
 800e41c:	4603      	mov	r3, r0
 800e41e:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e422:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e426:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f003 031c 	and.w	r3, r3, #28
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 80e6 	beq.w	800e602 <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 800e436:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d027      	beq.n	800e48e <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800e43e:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e442:	2b04      	cmp	r3, #4
 800e444:	d10e      	bne.n	800e464 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e446:	f7fd fd6f 	bl	800bf28 <enq_lock>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d006      	beq.n	800e45e <f_open+0x15a>
 800e450:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe ffc9 	bl	800d3ec <dir_register>
 800e45a:	4603      	mov	r3, r0
 800e45c:	e000      	b.n	800e460 <f_open+0x15c>
 800e45e:	2312      	movs	r3, #18
 800e460:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e464:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e468:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e46c:	f607 2258 	addw	r2, r7, #2648	@ 0xa58
 800e470:	f6a2 2251 	subw	r2, r2, #2641	@ 0xa51
 800e474:	7812      	ldrb	r2, [r2, #0]
 800e476:	f042 0208 	orr.w	r2, r2, #8
 800e47a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800e47c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e480:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e484:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800e488:	f8c7 3a50 	str.w	r3, [r7, #2640]	@ 0xa50
 800e48c:	e017      	b.n	800e4be <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e48e:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e492:	330b      	adds	r3, #11
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	f003 0311 	and.w	r3, r3, #17
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <f_open+0x1a2>
					res = FR_DENIED;
 800e49e:	2307      	movs	r3, #7
 800e4a0:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
 800e4a4:	e00b      	b.n	800e4be <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800e4a6:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e4aa:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <f_open+0x1ba>
						res = FR_EXIST;
 800e4b8:	2308      	movs	r3, #8
 800e4ba:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e4be:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f040 80c1 	bne.w	800e64a <f_open+0x346>
 800e4c8:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e4cc:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	f003 0308 	and.w	r3, r3, #8
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f000 80b7 	beq.w	800e64a <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 800e4dc:	f7fd faee 	bl	800babc <get_fattime>
 800e4e0:	f8c7 0a4c 	str.w	r0, [r7, #2636]	@ 0xa4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800e4e4:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e4e8:	330e      	adds	r3, #14
 800e4ea:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	@ 0xa4c
 800e4ee:	b2d2      	uxtb	r2, r2
 800e4f0:	701a      	strb	r2, [r3, #0]
 800e4f2:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	0a1b      	lsrs	r3, r3, #8
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e500:	330f      	adds	r3, #15
 800e502:	b2d2      	uxtb	r2, r2
 800e504:	701a      	strb	r2, [r3, #0]
 800e506:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800e50a:	0c1a      	lsrs	r2, r3, #16
 800e50c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e510:	3310      	adds	r3, #16
 800e512:	b2d2      	uxtb	r2, r2
 800e514:	701a      	strb	r2, [r3, #0]
 800e516:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 800e51a:	0e1a      	lsrs	r2, r3, #24
 800e51c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e520:	3311      	adds	r3, #17
 800e522:	b2d2      	uxtb	r2, r2
 800e524:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800e526:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e52a:	330b      	adds	r3, #11
 800e52c:	2200      	movs	r2, #0
 800e52e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800e530:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e534:	331c      	adds	r3, #28
 800e536:	2200      	movs	r2, #0
 800e538:	701a      	strb	r2, [r3, #0]
 800e53a:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e53e:	331d      	adds	r3, #29
 800e540:	2200      	movs	r2, #0
 800e542:	701a      	strb	r2, [r3, #0]
 800e544:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e548:	331e      	adds	r3, #30
 800e54a:	2200      	movs	r2, #0
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e552:	331f      	adds	r3, #31
 800e554:	2200      	movs	r2, #0
 800e556:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800e558:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e55c:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e560:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e564:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	@ 0xa50
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fc9b 	bl	800cea4 <ld_clust>
 800e56e:	f8c7 0a48 	str.w	r0, [r7, #2632]	@ 0xa48
				st_clust(dir, 0);				/* cluster = 0 */
 800e572:	2100      	movs	r1, #0
 800e574:	f8d7 0a50 	ldr.w	r0, [r7, #2640]	@ 0xa50
 800e578:	f7fe fcc1 	bl	800cefe <st_clust>
				dj.fs->wflag = 1;
 800e57c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e580:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e584:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e588:	2201      	movs	r2, #1
 800e58a:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
				if (cl) {						/* Remove the cluster chain if exist */
 800e58e:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800e592:	2b00      	cmp	r3, #0
 800e594:	d059      	beq.n	800e64a <f_open+0x346>
					dw = dj.fs->winsect;
 800e596:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e59a:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e59e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e5a2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
 800e5a6:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
					res = remove_chain(dj.fs, cl);
 800e5aa:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e5ae:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e5b2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e5b6:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	@ 0xa48
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe f92b 	bl	800c816 <remove_chain>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
					if (res == FR_OK) {
 800e5c6:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d13d      	bne.n	800e64a <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800e5ce:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e5d2:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e5d6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e5da:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	@ 0xa48
 800e5de:	3a01      	subs	r2, #1
 800e5e0:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
						res = move_window(dj.fs, dw);
 800e5e4:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e5e8:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e5ec:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e5f0:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	@ 0xa4c
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fd fde4 	bl	800c1c2 <move_window>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
 800e600:	e023      	b.n	800e64a <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800e602:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e606:	2b00      	cmp	r3, #0
 800e608:	d11f      	bne.n	800e64a <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800e60a:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e60e:	330b      	adds	r3, #11
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	f003 0310 	and.w	r3, r3, #16
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <f_open+0x31e>
					res = FR_NO_FILE;
 800e61a:	2304      	movs	r3, #4
 800e61c:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
 800e620:	e013      	b.n	800e64a <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800e622:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e626:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f003 0302 	and.w	r3, r3, #2
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00a      	beq.n	800e64a <f_open+0x346>
 800e634:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e638:	330b      	adds	r3, #11
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f003 0301 	and.w	r3, r3, #1
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <f_open+0x346>
						res = FR_DENIED;
 800e644:	2307      	movs	r3, #7
 800e646:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
				}
			}
		}
		if (res == FR_OK) {
 800e64a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d151      	bne.n	800e6f6 <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e652:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e656:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	f003 0308 	and.w	r3, r3, #8
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <f_open+0x378>
				mode |= FA__WRITTEN;
 800e664:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e668:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e66c:	f607 2258 	addw	r2, r7, #2648	@ 0xa58
 800e670:	f6a2 2251 	subw	r2, r2, #2641	@ 0xa51
 800e674:	7812      	ldrb	r2, [r2, #0]
 800e676:	f042 0220 	orr.w	r2, r2, #32
 800e67a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800e67c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e680:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e684:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e688:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 800e68c:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e690:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
			fp->dir_ptr = dir;
 800e69a:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e69e:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	@ 0xa50
 800e6a8:	f8c3 2820 	str.w	r2, [r3, #2080]	@ 0x820
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6ac:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e6b0:	f6a3 2351 	subw	r3, r3, #2641	@ 0xa51
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	bf8c      	ite	hi
 800e6ba:	2301      	movhi	r3, #1
 800e6bc:	2300      	movls	r3, #0
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fd fc51 	bl	800bf70 <inc_lock>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e6d4:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f8c3 2828 	str.w	r2, [r3, #2088]	@ 0x828
			if (!fp->lockid) res = FR_INT_ERR;
 800e6de:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e6e2:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d102      	bne.n	800e6f6 <f_open+0x3f2>
 800e6f0:	2302      	movs	r3, #2
 800e6f2:	f887 3a57 	strb.w	r3, [r7, #2647]	@ 0xa57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800e6f6:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d178      	bne.n	800e7f0 <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 800e6fe:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e702:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f607 2258 	addw	r2, r7, #2648	@ 0xa58
 800e70c:	f6a2 2251 	subw	r2, r2, #2641	@ 0xa51
 800e710:	7812      	ldrb	r2, [r2, #0]
 800e712:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
			fp->err = 0;						/* Clear error flag */
 800e716:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e71a:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800e726:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e72a:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e72e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e732:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	@ 0xa50
 800e736:	4618      	mov	r0, r3
 800e738:	f7fe fbb4 	bl	800cea4 <ld_clust>
 800e73c:	4602      	mov	r2, r0
 800e73e:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e742:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800e74c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e750:	331f      	adds	r3, #31
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	061a      	lsls	r2, r3, #24
 800e756:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e75a:	331e      	adds	r3, #30
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	041b      	lsls	r3, r3, #16
 800e760:	431a      	orrs	r2, r3
 800e762:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	@ 0xa50
 800e766:	331d      	adds	r3, #29
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	021b      	lsls	r3, r3, #8
 800e76c:	4313      	orrs	r3, r2
 800e76e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	@ 0xa50
 800e772:	321c      	adds	r2, #28
 800e774:	7812      	ldrb	r2, [r2, #0]
 800e776:	431a      	orrs	r2, r3
 800e778:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e77c:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
			fp->fptr = 0;						/* File pointer */
 800e786:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e78a:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2200      	movs	r2, #0
 800e792:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			fp->dsect = 0;
 800e796:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e79a:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800e7a6:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e7aa:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f8c3 2824 	str.w	r2, [r3, #2084]	@ 0x824
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800e7b6:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e7ba:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e7be:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800e7c2:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e7c6:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			fp->id = fp->fs->id;
 800e7d0:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e7d4:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e7de:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	@ 0x806
 800e7e2:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e7e6:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f8a3 2804 	strh.w	r2, [r3, #2052]	@ 0x804
		}
	}

	LEAVE_FF(dj.fs, res);
 800e7f0:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 800e7f4:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800e7f8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e7fc:	f897 2a57 	ldrb.w	r2, [r7, #2647]	@ 0xa57
 800e800:	4611      	mov	r1, r2
 800e802:	4618      	mov	r0, r3
 800e804:	f7fd fb05 	bl	800be12 <unlock_fs>
 800e808:	f897 3a57 	ldrb.w	r3, [r7, #2647]	@ 0xa57
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	f607 2758 	addw	r7, r7, #2648	@ 0xa58
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b08a      	sub	sp, #40	@ 0x28
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	60f8      	str	r0, [r7, #12]
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7ff fcc2 	bl	800e1b8 <validate>
 800e834:	4603      	mov	r3, r0
 800e836:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800e838:	7dfb      	ldrb	r3, [r7, #23]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d009      	beq.n	800e852 <f_write+0x3c>
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e844:	7dfa      	ldrb	r2, [r7, #23]
 800e846:	4611      	mov	r1, r2
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fd fae2 	bl	800be12 <unlock_fs>
 800e84e:	7dfb      	ldrb	r3, [r7, #23]
 800e850:	e20e      	b.n	800ec70 <f_write+0x45a>
	if (fp->err)							/* Check error */
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00d      	beq.n	800e878 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 800e868:	4619      	mov	r1, r3
 800e86a:	4610      	mov	r0, r2
 800e86c:	f7fd fad1 	bl	800be12 <unlock_fs>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f893 3807 	ldrb.w	r3, [r3, #2055]	@ 0x807
 800e876:	e1fb      	b.n	800ec70 <f_write+0x45a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800e87e:	f003 0302 	and.w	r3, r3, #2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d108      	bne.n	800e898 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e88c:	2107      	movs	r1, #7
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fd fabf 	bl	800be12 <unlock_fs>
 800e894:	2307      	movs	r3, #7
 800e896:	e1eb      	b.n	800ec70 <f_write+0x45a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	441a      	add	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	f080 81bc 	bcs.w	800ec26 <f_write+0x410>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800e8b2:	e1b8      	b.n	800ec26 <f_write+0x410>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800e8c0:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800e8c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8c8:	fb01 f202 	mul.w	r2, r1, r2
 800e8cc:	1a9b      	subs	r3, r3, r2
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f040 815b 	bne.w	800eb8a <f_write+0x374>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800e8e0:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800e8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e8f0:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	4013      	ands	r3, r2
 800e8fa:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800e8fc:	7dbb      	ldrb	r3, [r7, #22]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d15f      	bne.n	800e9c2 <f_write+0x1ac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d10f      	bne.n	800e92c <f_write+0x116>
					clst = fp->sclust;		/* Follow from the origin */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800e912:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800e914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e916:	2b00      	cmp	r3, #0
 800e918:	d121      	bne.n	800e95e <f_write+0x148>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e920:	2100      	movs	r1, #0
 800e922:	4618      	mov	r0, r3
 800e924:	f7fd ffd1 	bl	800c8ca <create_chain>
 800e928:	6278      	str	r0, [r7, #36]	@ 0x24
 800e92a:	e018      	b.n	800e95e <f_write+0x148>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
 800e932:	2b00      	cmp	r3, #0
 800e934:	d008      	beq.n	800e948 <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800e93c:	4619      	mov	r1, r3
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f7fe f860 	bl	800ca04 <clmt_clust>
 800e944:	6278      	str	r0, [r7, #36]	@ 0x24
 800e946:	e00a      	b.n	800e95e <f_write+0x148>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800e954:	4619      	mov	r1, r3
 800e956:	4610      	mov	r0, r2
 800e958:	f7fd ffb7 	bl	800c8ca <create_chain>
 800e95c:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 8165 	beq.w	800ec30 <f_write+0x41a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800e966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d10c      	bne.n	800e986 <f_write+0x170>
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2202      	movs	r2, #2
 800e970:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e97a:	2102      	movs	r1, #2
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fd fa48 	bl	800be12 <unlock_fs>
 800e982:	2302      	movs	r3, #2
 800e984:	e174      	b.n	800ec70 <f_write+0x45a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d10c      	bne.n	800e9a8 <f_write+0x192>
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2201      	movs	r2, #1
 800e992:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e99c:	2101      	movs	r1, #1
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fd fa37 	bl	800be12 <unlock_fs>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e163      	b.n	800ec70 <f_write+0x45a>
				fp->clust = clst;			/* Update current cluster */
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9ac:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d103      	bne.n	800e9c2 <f_write+0x1ac>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9be:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800e9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d024      	beq.n	800ea1a <f_write+0x204>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e9d6:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800e9da:	68f9      	ldr	r1, [r7, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	f7fd f950 	bl	800bc88 <disk_write>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00c      	beq.n	800ea08 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fd fa07 	bl	800be12 <unlock_fs>
 800ea04:	2301      	movs	r3, #1
 800ea06:	e133      	b.n	800ec70 <f_write+0x45a>
				fp->flag &= ~FA__DIRTY;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800ea0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ea26:	4619      	mov	r1, r3
 800ea28:	4610      	mov	r0, r2
 800ea2a:	f7fd fca6 	bl	800c37a <clust2sect>
 800ea2e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10c      	bne.n	800ea50 <f_write+0x23a>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2202      	movs	r2, #2
 800ea3a:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ea44:	2102      	movs	r1, #2
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fd f9e3 	bl	800be12 <unlock_fs>
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	e10f      	b.n	800ec70 <f_write+0x45a>
			sect += csect;
 800ea50:	7dbb      	ldrb	r3, [r7, #22]
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	4413      	add	r3, r2
 800ea56:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ea5e:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800ea62:	461a      	mov	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea6a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d05f      	beq.n	800eb32 <f_write+0x31c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ea72:	7dba      	ldrb	r2, [r7, #22]
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	4413      	add	r3, r2
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800ea7e:	f892 2802 	ldrb.w	r2, [r2, #2050]	@ 0x802
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d908      	bls.n	800ea98 <f_write+0x282>
					cc = fp->fs->csize - csect;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ea8c:	f893 3802 	ldrb.w	r3, [r3, #2050]	@ 0x802
 800ea90:	461a      	mov	r2, r3
 800ea92:	7dbb      	ldrb	r3, [r7, #22]
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ea9e:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	69b9      	ldr	r1, [r7, #24]
 800eaa8:	f7fd f8ee 	bl	800bc88 <disk_write>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00c      	beq.n	800eacc <f_write+0x2b6>
					ABORT(fp->fs, FR_DISK_ERR);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800eac0:	2101      	movs	r1, #1
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fd f9a5 	bl	800be12 <unlock_fs>
 800eac8:	2301      	movs	r3, #1
 800eaca:	e0d1      	b.n	800ec70 <f_write+0x45a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	69fa      	ldr	r2, [r7, #28]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d91f      	bls.n	800eb1c <f_write+0x306>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800eaee:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800eaf2:	fb02 f303 	mul.w	r3, r2, r3
 800eaf6:	69ba      	ldr	r2, [r7, #24]
 800eaf8:	18d1      	adds	r1, r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800eb00:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800eb04:	461a      	mov	r2, r3
 800eb06:	f7fd f8fd 	bl	800bd04 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800eb10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800eb22:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800eb26:	461a      	mov	r2, r3
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	fb02 f303 	mul.w	r3, r2, r3
 800eb2e:	623b      	str	r3, [r7, #32]
				continue;
 800eb30:	e063      	b.n	800ebfa <f_write+0x3e4>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 800eb38:	693a      	ldr	r2, [r7, #16]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d021      	beq.n	800eb82 <f_write+0x36c>
				if (fp->fptr < fp->fsize &&
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d219      	bcs.n	800eb82 <f_write+0x36c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800eb54:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800eb58:	68f9      	ldr	r1, [r7, #12]
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	693a      	ldr	r2, [r7, #16]
 800eb5e:	f7fd f873 	bl	800bc48 <disk_read>
 800eb62:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00c      	beq.n	800eb82 <f_write+0x36c>
						ABORT(fp->fs, FR_DISK_ERR);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2807 	strb.w	r2, [r3, #2055]	@ 0x807
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800eb76:	2101      	movs	r1, #1
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fd f94a 	bl	800be12 <unlock_fs>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e076      	b.n	800ec70 <f_write+0x45a>
			}
#endif
			fp->dsect = sect;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	693a      	ldr	r2, [r7, #16]
 800eb86:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800eb90:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	@ 0x80a
 800eb94:	4618      	mov	r0, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800eba2:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800eba6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebaa:	fb01 f202 	mul.w	r2, r1, r2
 800ebae:	1a9b      	subs	r3, r3, r2
 800ebb0:	1ac3      	subs	r3, r0, r3
 800ebb2:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800ebb4:	6a3a      	ldr	r2, [r7, #32]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d901      	bls.n	800ebc0 <f_write+0x3aa>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	f8d2 2800 	ldr.w	r2, [r2, #2048]	@ 0x800
 800ebcc:	f8b2 280a 	ldrh.w	r2, [r2, #2058]	@ 0x80a
 800ebd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebd4:	fb01 f202 	mul.w	r2, r1, r2
 800ebd8:	1a9b      	subs	r3, r3, r2
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	4413      	add	r3, r2
 800ebde:	6a3a      	ldr	r2, [r7, #32]
 800ebe0:	69b9      	ldr	r1, [r7, #24]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fd f88e 	bl	800bd04 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800ebee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	6a3b      	ldr	r3, [r7, #32]
 800ebfe:	4413      	add	r3, r2
 800ec00:	61bb      	str	r3, [r7, #24]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	441a      	add	r2, r3
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	441a      	add	r2, r3
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f47f ae43 	bne.w	800e8b4 <f_write+0x9e>
 800ec2e:	e000      	b.n	800ec32 <f_write+0x41c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec30:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d905      	bls.n	800ec4e <f_write+0x438>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800ec54:	f043 0320 	orr.w	r3, r3, #32
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806

	LEAVE_FF(fp->fs, FR_OK);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ec66:	2100      	movs	r1, #0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7fd f8d2 	bl	800be12 <unlock_fs>
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3728      	adds	r7, #40	@ 0x28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff fa99 	bl	800e1b8 <validate>
 800ec86:	4603      	mov	r3, r0
 800ec88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f040 80af 	bne.w	800edf0 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800ec98:	f003 0320 	and.w	r3, r3, #32
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 80a7 	beq.w	800edf0 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800eca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d020      	beq.n	800ecf2 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ecb6:	f893 0801 	ldrb.w	r0, [r3, #2049]	@ 0x801
 800ecba:	6879      	ldr	r1, [r7, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	f7fc ffe0 	bl	800bc88 <disk_write>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d008      	beq.n	800ece0 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ecd4:	2101      	movs	r1, #1
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fd f89b 	bl	800be12 <unlock_fs>
 800ecdc:	2301      	movs	r3, #1
 800ecde:	e090      	b.n	800ee02 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800ece6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f7fd fa5e 	bl	800c1c2 <move_window>
 800ed06:	4603      	mov	r3, r0
 800ed08:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d16f      	bne.n	800edf0 <f_sync+0x178>
				dir = fp->dir_ptr;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
 800ed16:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	330b      	adds	r3, #11
 800ed1c:	781a      	ldrb	r2, [r3, #0]
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	330b      	adds	r3, #11
 800ed22:	f042 0220 	orr.w	r2, r2, #32
 800ed26:	b2d2      	uxtb	r2, r2
 800ed28:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	331c      	adds	r3, #28
 800ed34:	b2d2      	uxtb	r2, r2
 800ed36:	701a      	strb	r2, [r3, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	0a1b      	lsrs	r3, r3, #8
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	331d      	adds	r3, #29
 800ed48:	b2d2      	uxtb	r2, r2
 800ed4a:	701a      	strb	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ed52:	0c1a      	lsrs	r2, r3, #16
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	331e      	adds	r3, #30
 800ed58:	b2d2      	uxtb	r2, r2
 800ed5a:	701a      	strb	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ed62:	0e1a      	lsrs	r2, r3, #24
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	331f      	adds	r3, #31
 800ed68:	b2d2      	uxtb	r2, r2
 800ed6a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800ed72:	4619      	mov	r1, r3
 800ed74:	6938      	ldr	r0, [r7, #16]
 800ed76:	f7fe f8c2 	bl	800cefe <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800ed7a:	f7fc fe9f 	bl	800babc <get_fattime>
 800ed7e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	3316      	adds	r3, #22
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	b2d2      	uxtb	r2, r2
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	0a1b      	lsrs	r3, r3, #8
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	3317      	adds	r3, #23
 800ed96:	b2d2      	uxtb	r2, r2
 800ed98:	701a      	strb	r2, [r3, #0]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	0c1a      	lsrs	r2, r3, #16
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	3318      	adds	r3, #24
 800eda2:	b2d2      	uxtb	r2, r2
 800eda4:	701a      	strb	r2, [r3, #0]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	0e1a      	lsrs	r2, r3, #24
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	3319      	adds	r3, #25
 800edae:	b2d2      	uxtb	r2, r2
 800edb0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	3312      	adds	r3, #18
 800edb6:	2200      	movs	r2, #0
 800edb8:	701a      	strb	r2, [r3, #0]
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	3313      	adds	r3, #19
 800edbe:	2200      	movs	r2, #0
 800edc0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 3806 	ldrb.w	r3, [r3, #2054]	@ 0x806
 800edc8:	f023 0320 	bic.w	r3, r3, #32
 800edcc:	b2da      	uxtb	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f883 2806 	strb.w	r2, [r3, #2054]	@ 0x806
				fp->fs->wflag = 1;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
				res = sync_fs(fp->fs);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fd fa19 	bl	800c21e <sync_fs>
 800edec:	4603      	mov	r3, r0
 800edee:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800edf6:	7dfa      	ldrb	r2, [r7, #23]
 800edf8:	4611      	mov	r1, r2
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fd f809 	bl	800be12 <unlock_fs>
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	460b      	mov	r3, r1
 800ee14:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800ee16:	78fb      	ldrb	r3, [r7, #3]
 800ee18:	2b0a      	cmp	r3, #10
 800ee1a:	d103      	bne.n	800ee24 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ee1c:	210d      	movs	r1, #13
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff fff3 	bl	800ee0a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	db25      	blt.n	800ee7c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	1c5a      	adds	r2, r3, #1
 800ee34:	60fa      	str	r2, [r7, #12]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	4413      	add	r3, r2
 800ee3a:	78fa      	ldrb	r2, [r7, #3]
 800ee3c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2b3c      	cmp	r3, #60	@ 0x3c
 800ee42:	dd12      	ble.n	800ee6a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6818      	ldr	r0, [r3, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f103 010c 	add.w	r1, r3, #12
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	f107 0308 	add.w	r3, r7, #8
 800ee54:	f7ff fcdf 	bl	800e816 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d101      	bne.n	800ee64 <putc_bfd+0x5a>
 800ee60:	2300      	movs	r3, #0
 800ee62:	e001      	b.n	800ee68 <putc_bfd+0x5e>
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295
 800ee68:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	1c5a      	adds	r2, r3, #1
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	609a      	str	r2, [r3, #8]
 800ee7a:	e000      	b.n	800ee7e <putc_bfd+0x74>
	if (i < 0) return;
 800ee7c:	bf00      	nop
}
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ee84:	b590      	push	{r4, r7, lr}
 800ee86:	b097      	sub	sp, #92	@ 0x5c
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	613b      	str	r3, [r7, #16]
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800ee9a:	e009      	b.n	800eeb0 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	1c5a      	adds	r2, r3, #1
 800eea0:	607a      	str	r2, [r7, #4]
 800eea2:	781a      	ldrb	r2, [r3, #0]
 800eea4:	f107 030c 	add.w	r3, r7, #12
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7ff ffad 	bl	800ee0a <putc_bfd>
	while (*str)			/* Put the string */
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1f1      	bne.n	800ee9c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	db15      	blt.n	800eeea <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	461c      	mov	r4, r3
 800eec4:	f107 0208 	add.w	r2, r7, #8
 800eec8:	f107 030c 	add.w	r3, r7, #12
 800eecc:	f103 010c 	add.w	r1, r3, #12
 800eed0:	4613      	mov	r3, r2
 800eed2:	4622      	mov	r2, r4
 800eed4:	f7ff fc9f 	bl	800e816 <f_write>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d105      	bne.n	800eeea <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d101      	bne.n	800eeea <f_puts+0x66>
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	e001      	b.n	800eeee <f_puts+0x6a>
	return EOF;
 800eeea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	375c      	adds	r7, #92	@ 0x5c
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd90      	pop	{r4, r7, pc}
	...

0800eef8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	4613      	mov	r3, r2
 800ef04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef06:	2301      	movs	r3, #1
 800ef08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ef0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef10:	7a5b      	ldrb	r3, [r3, #9]
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d831      	bhi.n	800ef7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef18:	4b1b      	ldr	r3, [pc, #108]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef1a:	7a5b      	ldrb	r3, [r3, #9]
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	461a      	mov	r2, r3
 800ef20:	4b19      	ldr	r3, [pc, #100]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef22:	2100      	movs	r1, #0
 800ef24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ef26:	4b18      	ldr	r3, [pc, #96]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef28:	7a5b      	ldrb	r3, [r3, #9]
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	4a16      	ldr	r2, [pc, #88]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4413      	add	r3, r2
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ef36:	4b14      	ldr	r3, [pc, #80]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef38:	7a5b      	ldrb	r3, [r3, #9]
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	4b12      	ldr	r3, [pc, #72]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef40:	4413      	add	r3, r2
 800ef42:	79fa      	ldrb	r2, [r7, #7]
 800ef44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef46:	4b10      	ldr	r3, [pc, #64]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef48:	7a5b      	ldrb	r3, [r3, #9]
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	1c5a      	adds	r2, r3, #1
 800ef4e:	b2d1      	uxtb	r1, r2
 800ef50:	4a0d      	ldr	r2, [pc, #52]	@ (800ef88 <FATFS_LinkDriverEx+0x90>)
 800ef52:	7251      	strb	r1, [r2, #9]
 800ef54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ef56:	7dbb      	ldrb	r3, [r7, #22]
 800ef58:	3330      	adds	r3, #48	@ 0x30
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	3301      	adds	r3, #1
 800ef64:	223a      	movs	r2, #58	@ 0x3a
 800ef66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	3302      	adds	r3, #2
 800ef6c:	222f      	movs	r2, #47	@ 0x2f
 800ef6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	3303      	adds	r3, #3
 800ef74:	2200      	movs	r2, #0
 800ef76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800ef7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	371c      	adds	r7, #28
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bc80      	pop	{r7}
 800ef86:	4770      	bx	lr
 800ef88:	20001a94 	.word	0x20001a94

0800ef8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ef96:	2200      	movs	r2, #0
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7ff ffac 	bl	800eef8 <FATFS_LinkDriverEx>
 800efa0:	4603      	mov	r3, r0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
	...

0800efac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	4603      	mov	r3, r0
 800efb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800efb6:	4b0b      	ldr	r3, [pc, #44]	@ (800efe4 <SD_initialize+0x38>)
 800efb8:	2201      	movs	r2, #1
 800efba:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800efbc:	f7fc fd86 	bl	800bacc <BSP_SD_Init>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d107      	bne.n	800efd6 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800efc6:	4b07      	ldr	r3, [pc, #28]	@ (800efe4 <SD_initialize+0x38>)
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	f023 0301 	bic.w	r3, r3, #1
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	4b04      	ldr	r3, [pc, #16]	@ (800efe4 <SD_initialize+0x38>)
 800efd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800efd6:	4b03      	ldr	r3, [pc, #12]	@ (800efe4 <SD_initialize+0x38>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	b2db      	uxtb	r3, r3
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	20000031 	.word	0x20000031

0800efe8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eff2:	4b0b      	ldr	r3, [pc, #44]	@ (800f020 <SD_status+0x38>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800eff8:	f7fc fdbc 	bl	800bb74 <BSP_SD_GetCardState>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d107      	bne.n	800f012 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f002:	4b07      	ldr	r3, [pc, #28]	@ (800f020 <SD_status+0x38>)
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	b2db      	uxtb	r3, r3
 800f008:	f023 0301 	bic.w	r3, r3, #1
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	4b04      	ldr	r3, [pc, #16]	@ (800f020 <SD_status+0x38>)
 800f010:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800f012:	4b03      	ldr	r3, [pc, #12]	@ (800f020 <SD_status+0x38>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	b2db      	uxtb	r3, r3
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20000031 	.word	0x20000031

0800f024 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60b9      	str	r1, [r7, #8]
 800f02c:	607a      	str	r2, [r7, #4]
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	4603      	mov	r3, r0
 800f032:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f034:	2301      	movs	r3, #1
 800f036:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800f038:	4b0f      	ldr	r3, [pc, #60]	@ (800f078 <SD_read+0x54>)
 800f03a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800f03c:	4b0f      	ldr	r3, [pc, #60]	@ (800f07c <SD_read+0x58>)
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	68b8      	ldr	r0, [r7, #8]
 800f044:	f7fc fd5a 	bl	800bafc <BSP_SD_ReadBlocks>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10e      	bne.n	800f06c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f04e:	e006      	b.n	800f05e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	1e5a      	subs	r2, r3, #1
 800f054:	613a      	str	r2, [r7, #16]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <SD_read+0x3a>
      {
        return RES_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e007      	b.n	800f06e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f05e:	f7fc fd89 	bl	800bb74 <BSP_SD_GetCardState>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1f3      	bne.n	800f050 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800f068:	2300      	movs	r3, #0
 800f06a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3718      	adds	r7, #24
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	000186a0 	.word	0x000186a0
 800f07c:	05f5e100 	.word	0x05f5e100

0800f080 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
 800f08a:	603b      	str	r3, [r7, #0]
 800f08c:	4603      	mov	r3, r0
 800f08e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800f094:	4b0f      	ldr	r3, [pc, #60]	@ (800f0d4 <SD_write+0x54>)
 800f096:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800f098:	4b0f      	ldr	r3, [pc, #60]	@ (800f0d8 <SD_write+0x58>)
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	68b8      	ldr	r0, [r7, #8]
 800f0a0:	f7fc fd4a 	bl	800bb38 <BSP_SD_WriteBlocks>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d10e      	bne.n	800f0c8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f0aa:	e006      	b.n	800f0ba <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	1e5a      	subs	r2, r3, #1
 800f0b0:	613a      	str	r2, [r7, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d101      	bne.n	800f0ba <SD_write+0x3a>
      {
        return RES_ERROR;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e007      	b.n	800f0ca <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f0ba:	f7fc fd5b 	bl	800bb74 <BSP_SD_GetCardState>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1f3      	bne.n	800f0ac <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	000186a0 	.word	0x000186a0
 800f0d8:	05f5e100 	.word	0x05f5e100

0800f0dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08c      	sub	sp, #48	@ 0x30
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	603a      	str	r2, [r7, #0]
 800f0e6:	71fb      	strb	r3, [r7, #7]
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f0f2:	4b24      	ldr	r3, [pc, #144]	@ (800f184 <SD_ioctl+0xa8>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	f003 0301 	and.w	r3, r3, #1
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <SD_ioctl+0x28>
 800f100:	2303      	movs	r3, #3
 800f102:	e03b      	b.n	800f17c <SD_ioctl+0xa0>
  
  switch (cmd)
 800f104:	79bb      	ldrb	r3, [r7, #6]
 800f106:	2b03      	cmp	r3, #3
 800f108:	d833      	bhi.n	800f172 <SD_ioctl+0x96>
 800f10a:	a201      	add	r2, pc, #4	@ (adr r2, 800f110 <SD_ioctl+0x34>)
 800f10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f110:	0800f121 	.word	0x0800f121
 800f114:	0800f129 	.word	0x0800f129
 800f118:	0800f141 	.word	0x0800f141
 800f11c:	0800f15b 	.word	0x0800f15b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f126:	e027      	b.n	800f178 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f128:	f107 030c 	add.w	r3, r7, #12
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fc fd31 	bl	800bb94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f13e:	e01b      	b.n	800f178 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f140:	f107 030c 	add.w	r3, r7, #12
 800f144:	4618      	mov	r0, r3
 800f146:	f7fc fd25 	bl	800bb94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f158:	e00e      	b.n	800f178 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f15a:	f107 030c 	add.w	r3, r7, #12
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fc fd18 	bl	800bb94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800f164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f170:	e002      	b.n	800f178 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800f172:	2304      	movs	r3, #4
 800f174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800f178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3730      	adds	r7, #48	@ 0x30
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20000031 	.word	0x20000031

0800f188 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	6039      	str	r1, [r7, #0]
 800f192:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f194:	88fb      	ldrh	r3, [r7, #6]
 800f196:	2b7f      	cmp	r3, #127	@ 0x7f
 800f198:	d802      	bhi.n	800f1a0 <ff_convert+0x18>
		c = chr;
 800f19a:	88fb      	ldrh	r3, [r7, #6]
 800f19c:	81fb      	strh	r3, [r7, #14]
 800f19e:	e025      	b.n	800f1ec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00b      	beq.n	800f1be <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f1a6:	88fb      	ldrh	r3, [r7, #6]
 800f1a8:	2bff      	cmp	r3, #255	@ 0xff
 800f1aa:	d805      	bhi.n	800f1b8 <ff_convert+0x30>
 800f1ac:	88fb      	ldrh	r3, [r7, #6]
 800f1ae:	3b80      	subs	r3, #128	@ 0x80
 800f1b0:	4a11      	ldr	r2, [pc, #68]	@ (800f1f8 <ff_convert+0x70>)
 800f1b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1b6:	e000      	b.n	800f1ba <ff_convert+0x32>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	81fb      	strh	r3, [r7, #14]
 800f1bc:	e016      	b.n	800f1ec <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800f1be:	2300      	movs	r3, #0
 800f1c0:	81fb      	strh	r3, [r7, #14]
 800f1c2:	e009      	b.n	800f1d8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f1c4:	89fb      	ldrh	r3, [r7, #14]
 800f1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800f1f8 <ff_convert+0x70>)
 800f1c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1cc:	88fa      	ldrh	r2, [r7, #6]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d006      	beq.n	800f1e0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f1d2:	89fb      	ldrh	r3, [r7, #14]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	81fb      	strh	r3, [r7, #14]
 800f1d8:	89fb      	ldrh	r3, [r7, #14]
 800f1da:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1dc:	d9f2      	bls.n	800f1c4 <ff_convert+0x3c>
 800f1de:	e000      	b.n	800f1e2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f1e0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f1e2:	89fb      	ldrh	r3, [r7, #14]
 800f1e4:	3380      	adds	r3, #128	@ 0x80
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f1ec:	89fb      	ldrh	r3, [r7, #14]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bc80      	pop	{r7}
 800f1f6:	4770      	bx	lr
 800f1f8:	08012688 	.word	0x08012688

0800f1fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	4603      	mov	r3, r0
 800f204:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800f206:	2300      	movs	r3, #0
 800f208:	60fb      	str	r3, [r7, #12]
 800f20a:	e002      	b.n	800f212 <ff_wtoupper+0x16>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	3301      	adds	r3, #1
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	4a0f      	ldr	r2, [pc, #60]	@ (800f250 <ff_wtoupper+0x54>)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d006      	beq.n	800f22c <ff_wtoupper+0x30>
 800f21e:	4a0c      	ldr	r2, [pc, #48]	@ (800f250 <ff_wtoupper+0x54>)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f226:	88fa      	ldrh	r2, [r7, #6]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d1ef      	bne.n	800f20c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800f22c:	4a08      	ldr	r2, [pc, #32]	@ (800f250 <ff_wtoupper+0x54>)
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d004      	beq.n	800f242 <ff_wtoupper+0x46>
 800f238:	4a06      	ldr	r2, [pc, #24]	@ (800f254 <ff_wtoupper+0x58>)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f240:	e000      	b.n	800f244 <ff_wtoupper+0x48>
 800f242:	88fb      	ldrh	r3, [r7, #6]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	bc80      	pop	{r7}
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	08012788 	.word	0x08012788
 800f254:	08012968 	.word	0x08012968

0800f258 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b086      	sub	sp, #24
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	4603      	mov	r3, r0
 800f260:	6039      	str	r1, [r7, #0]
 800f262:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800f264:	2300      	movs	r3, #0
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	2300      	movs	r3, #0
 800f26a:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800f26c:	f107 030c 	add.w	r3, r7, #12
 800f270:	2101      	movs	r1, #1
 800f272:	4618      	mov	r0, r3
 800f274:	f000 f8cb 	bl	800f40e <osSemaphoreCreate>
 800f278:	4602      	mov	r2, r0
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	bf14      	ite	ne
 800f286:	2301      	movne	r3, #1
 800f288:	2300      	moveq	r3, #0
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	617b      	str	r3, [r7, #20]
  
  return ret;
 800f28e:	697b      	ldr	r3, [r7, #20]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 f96b 	bl	800f57c <osSemaphoreDelete>
  return 1;
 800f2a6:	2301      	movs	r3, #1
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f2bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 f8d7 	bl	800f474 <osSemaphoreWait>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <ff_req_grant+0x20>
  {
    ret = 1;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	b082      	sub	sp, #8
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f914 	bl	800f510 <osSemaphoreRelease>
}
 800f2e8:	bf00      	nop
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f2fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f302:	2b84      	cmp	r3, #132	@ 0x84
 800f304:	d005      	beq.n	800f312 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f306:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	4413      	add	r3, r2
 800f30e:	3303      	adds	r3, #3
 800f310:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f312:	68fb      	ldr	r3, [r7, #12]
}
 800f314:	4618      	mov	r0, r3
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	bc80      	pop	{r7}
 800f31c:	4770      	bx	lr

0800f31e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f31e:	b480      	push	{r7}
 800f320:	b083      	sub	sp, #12
 800f322:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f324:	f3ef 8305 	mrs	r3, IPSR
 800f328:	607b      	str	r3, [r7, #4]
  return(result);
 800f32a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bf14      	ite	ne
 800f330:	2301      	movne	r3, #1
 800f332:	2300      	moveq	r3, #0
 800f334:	b2db      	uxtb	r3, r3
}
 800f336:	4618      	mov	r0, r3
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bc80      	pop	{r7}
 800f33e:	4770      	bx	lr

0800f340 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f344:	f001 fb34 	bl	80109b0 <vTaskStartScheduler>
  
  return osOK;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f34e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f350:	b089      	sub	sp, #36	@ 0x24
 800f352:	af04      	add	r7, sp, #16
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	695b      	ldr	r3, [r3, #20]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d020      	beq.n	800f3a2 <osThreadCreate+0x54>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d01c      	beq.n	800f3a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	685c      	ldr	r4, [r3, #4]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	691e      	ldr	r6, [r3, #16]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff ffb8 	bl	800f2f0 <makeFreeRtosPriority>
 800f380:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	695b      	ldr	r3, [r3, #20]
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f38a:	9202      	str	r2, [sp, #8]
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	9100      	str	r1, [sp, #0]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	4632      	mov	r2, r6
 800f394:	4629      	mov	r1, r5
 800f396:	4620      	mov	r0, r4
 800f398:	f000 ff90 	bl	80102bc <xTaskCreateStatic>
 800f39c:	4603      	mov	r3, r0
 800f39e:	60fb      	str	r3, [r7, #12]
 800f3a0:	e01c      	b.n	800f3dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	685c      	ldr	r4, [r3, #4]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f3ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7ff ff9a 	bl	800f2f0 <makeFreeRtosPriority>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	f107 030c 	add.w	r3, r7, #12
 800f3c2:	9301      	str	r3, [sp, #4]
 800f3c4:	9200      	str	r2, [sp, #0]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	4632      	mov	r2, r6
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 ffd4 	bl	801037a <xTaskCreate>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d001      	beq.n	800f3dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e000      	b.n	800f3de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <osDelay+0x16>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	e000      	b.n	800f3fe <osDelay+0x18>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	4618      	mov	r0, r3
 800f400:	f001 f972 	bl	80106e8 <vTaskDelay>
  
  return osOK;
 800f404:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f40e:	b580      	push	{r7, lr}
 800f410:	b086      	sub	sp, #24
 800f412:	af02      	add	r7, sp, #8
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d00f      	beq.n	800f440 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d10a      	bne.n	800f43c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	2203      	movs	r2, #3
 800f42c:	9200      	str	r2, [sp, #0]
 800f42e:	2200      	movs	r2, #0
 800f430:	2100      	movs	r1, #0
 800f432:	2001      	movs	r0, #1
 800f434:	f000 f9ce 	bl	800f7d4 <xQueueGenericCreateStatic>
 800f438:	4603      	mov	r3, r0
 800f43a:	e016      	b.n	800f46a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f43c:	2300      	movs	r3, #0
 800f43e:	e014      	b.n	800f46a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d110      	bne.n	800f468 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f446:	2203      	movs	r2, #3
 800f448:	2100      	movs	r1, #0
 800f44a:	2001      	movs	r0, #1
 800f44c:	f000 fa3e 	bl	800f8cc <xQueueGenericCreate>
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d005      	beq.n	800f464 <osSemaphoreCreate+0x56>
 800f458:	2300      	movs	r3, #0
 800f45a:	2200      	movs	r2, #0
 800f45c:	2100      	movs	r1, #0
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f000 fa92 	bl	800f988 <xQueueGenericSend>
      return sema;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	e000      	b.n	800f46a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f468:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
	...

0800f474 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f47e:	2300      	movs	r3, #0
 800f480:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f488:	2380      	movs	r3, #128	@ 0x80
 800f48a:	e03a      	b.n	800f502 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f496:	d103      	bne.n	800f4a0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	60fb      	str	r3, [r7, #12]
 800f49e:	e009      	b.n	800f4b4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d006      	beq.n	800f4b4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <osSemaphoreWait+0x40>
      ticks = 1;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f4b4:	f7ff ff33 	bl	800f31e <inHandlerMode>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d017      	beq.n	800f4ee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f4be:	f107 0308 	add.w	r3, r7, #8
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 fd00 	bl	800fecc <xQueueReceiveFromISR>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d001      	beq.n	800f4d6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f4d2:	23ff      	movs	r3, #255	@ 0xff
 800f4d4:	e015      	b.n	800f502 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d011      	beq.n	800f500 <osSemaphoreWait+0x8c>
 800f4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800f50c <osSemaphoreWait+0x98>)
 800f4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	f3bf 8f4f 	dsb	sy
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	e008      	b.n	800f500 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f4ee:	68f9      	ldr	r1, [r7, #12]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fbdb 	bl	800fcac <xQueueSemaphoreTake>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d001      	beq.n	800f500 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f4fc:	23ff      	movs	r3, #255	@ 0xff
 800f4fe:	e000      	b.n	800f502 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	e000ed04 	.word	0xe000ed04

0800f510 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f518:	2300      	movs	r3, #0
 800f51a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f51c:	2300      	movs	r3, #0
 800f51e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f520:	f7ff fefd 	bl	800f31e <inHandlerMode>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d016      	beq.n	800f558 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f52a:	f107 0308 	add.w	r3, r7, #8
 800f52e:	4619      	mov	r1, r3
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fb2b 	bl	800fb8c <xQueueGiveFromISR>
 800f536:	4603      	mov	r3, r0
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d001      	beq.n	800f540 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f53c:	23ff      	movs	r3, #255	@ 0xff
 800f53e:	e017      	b.n	800f570 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d013      	beq.n	800f56e <osSemaphoreRelease+0x5e>
 800f546:	4b0c      	ldr	r3, [pc, #48]	@ (800f578 <osSemaphoreRelease+0x68>)
 800f548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	e00a      	b.n	800f56e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f558:	2300      	movs	r3, #0
 800f55a:	2200      	movs	r2, #0
 800f55c:	2100      	movs	r1, #0
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 fa12 	bl	800f988 <xQueueGenericSend>
 800f564:	4603      	mov	r3, r0
 800f566:	2b01      	cmp	r3, #1
 800f568:	d001      	beq.n	800f56e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f56a:	23ff      	movs	r3, #255	@ 0xff
 800f56c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f56e:	68fb      	ldr	r3, [r7, #12]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	e000ed04 	.word	0xe000ed04

0800f57c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f584:	f7ff fecb 	bl	800f31e <inHandlerMode>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f58e:	2382      	movs	r3, #130	@ 0x82
 800f590:	e003      	b.n	800f59a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fd1c 	bl	800ffd0 <vQueueDelete>

  return osOK; 
 800f598:	2300      	movs	r3, #0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f103 0208 	add.w	r2, r3, #8
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f103 0208 	add.w	r2, r3, #8
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f103 0208 	add.w	r2, r3, #8
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f5d6:	bf00      	nop
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bc80      	pop	{r7}
 800f5de:	4770      	bx	lr

0800f5e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f5ee:	bf00      	nop
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bc80      	pop	{r7}
 800f5f6:	4770      	bx	lr

0800f5f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	689a      	ldr	r2, [r3, #8]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	683a      	ldr	r2, [r7, #0]
 800f61c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	1c5a      	adds	r2, r3, #1
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	601a      	str	r2, [r3, #0]
}
 800f634:	bf00      	nop
 800f636:	3714      	adds	r7, #20
 800f638:	46bd      	mov	sp, r7
 800f63a:	bc80      	pop	{r7}
 800f63c:	4770      	bx	lr

0800f63e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f63e:	b480      	push	{r7}
 800f640:	b085      	sub	sp, #20
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f654:	d103      	bne.n	800f65e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	691b      	ldr	r3, [r3, #16]
 800f65a:	60fb      	str	r3, [r7, #12]
 800f65c:	e00c      	b.n	800f678 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3308      	adds	r3, #8
 800f662:	60fb      	str	r3, [r7, #12]
 800f664:	e002      	b.n	800f66c <vListInsert+0x2e>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	60fb      	str	r3, [r7, #12]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	429a      	cmp	r2, r3
 800f676:	d2f6      	bcs.n	800f666 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	1c5a      	adds	r2, r3, #1
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	601a      	str	r2, [r3, #0]
}
 800f6a4:	bf00      	nop
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bc80      	pop	{r7}
 800f6ac:	4770      	bx	lr

0800f6ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f6ae:	b480      	push	{r7}
 800f6b0:	b085      	sub	sp, #20
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	691b      	ldr	r3, [r3, #16]
 800f6ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	6892      	ldr	r2, [r2, #8]
 800f6c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	6852      	ldr	r2, [r2, #4]
 800f6ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d103      	bne.n	800f6e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689a      	ldr	r2, [r3, #8]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	1e5a      	subs	r2, r3, #1
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3714      	adds	r7, #20
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bc80      	pop	{r7}
 800f6fe:	4770      	bx	lr

0800f700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10b      	bne.n	800f72c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f718:	f383 8811 	msr	BASEPRI, r3
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f3bf 8f4f 	dsb	sy
 800f724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f726:	bf00      	nop
 800f728:	bf00      	nop
 800f72a:	e7fd      	b.n	800f728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f72c:	f002 f8ce 	bl	80118cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f738:	68f9      	ldr	r1, [r7, #12]
 800f73a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f73c:	fb01 f303 	mul.w	r3, r1, r3
 800f740:	441a      	add	r2, r3
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2200      	movs	r2, #0
 800f74a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f75c:	3b01      	subs	r3, #1
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f762:	fb01 f303 	mul.w	r3, r1, r3
 800f766:	441a      	add	r2, r3
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	22ff      	movs	r2, #255	@ 0xff
 800f770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	22ff      	movs	r2, #255	@ 0xff
 800f778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d114      	bne.n	800f7ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d01a      	beq.n	800f7c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	3310      	adds	r3, #16
 800f78e:	4618      	mov	r0, r3
 800f790:	f001 fb6a 	bl	8010e68 <xTaskRemoveFromEventList>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d012      	beq.n	800f7c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f79a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7d0 <xQueueGenericReset+0xd0>)
 800f79c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7a0:	601a      	str	r2, [r3, #0]
 800f7a2:	f3bf 8f4f 	dsb	sy
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	e009      	b.n	800f7c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3310      	adds	r3, #16
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7ff fef6 	bl	800f5a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	3324      	adds	r3, #36	@ 0x24
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7ff fef1 	bl	800f5a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f7c0:	f002 f8b4 	bl	801192c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f7c4:	2301      	movs	r3, #1
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	e000ed04 	.word	0xe000ed04

0800f7d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08e      	sub	sp, #56	@ 0x38
 800f7d8:	af02      	add	r7, sp, #8
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10b      	bne.n	800f800 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ec:	f383 8811 	msr	BASEPRI, r3
 800f7f0:	f3bf 8f6f 	isb	sy
 800f7f4:	f3bf 8f4f 	dsb	sy
 800f7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f7fa:	bf00      	nop
 800f7fc:	bf00      	nop
 800f7fe:	e7fd      	b.n	800f7fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10b      	bne.n	800f81e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f818:	bf00      	nop
 800f81a:	bf00      	nop
 800f81c:	e7fd      	b.n	800f81a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d002      	beq.n	800f82a <xQueueGenericCreateStatic+0x56>
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <xQueueGenericCreateStatic+0x5a>
 800f82a:	2301      	movs	r3, #1
 800f82c:	e000      	b.n	800f830 <xQueueGenericCreateStatic+0x5c>
 800f82e:	2300      	movs	r3, #0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10b      	bne.n	800f84c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	623b      	str	r3, [r7, #32]
}
 800f846:	bf00      	nop
 800f848:	bf00      	nop
 800f84a:	e7fd      	b.n	800f848 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d102      	bne.n	800f858 <xQueueGenericCreateStatic+0x84>
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d101      	bne.n	800f85c <xQueueGenericCreateStatic+0x88>
 800f858:	2301      	movs	r3, #1
 800f85a:	e000      	b.n	800f85e <xQueueGenericCreateStatic+0x8a>
 800f85c:	2300      	movs	r3, #0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10b      	bne.n	800f87a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	61fb      	str	r3, [r7, #28]
}
 800f874:	bf00      	nop
 800f876:	bf00      	nop
 800f878:	e7fd      	b.n	800f876 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f87a:	2348      	movs	r3, #72	@ 0x48
 800f87c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2b48      	cmp	r3, #72	@ 0x48
 800f882:	d00b      	beq.n	800f89c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	61bb      	str	r3, [r7, #24]
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	e7fd      	b.n	800f898 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00d      	beq.n	800f8c2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f8ae:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b4:	9300      	str	r3, [sp, #0]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	68b9      	ldr	r1, [r7, #8]
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f000 f844 	bl	800f94a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3730      	adds	r7, #48	@ 0x30
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08a      	sub	sp, #40	@ 0x28
 800f8d0:	af02      	add	r7, sp, #8
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d10b      	bne.n	800f8f8 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	613b      	str	r3, [r7, #16]
}
 800f8f2:	bf00      	nop
 800f8f4:	bf00      	nop
 800f8f6:	e7fd      	b.n	800f8f4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d102      	bne.n	800f904 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	61fb      	str	r3, [r7, #28]
 800f902:	e004      	b.n	800f90e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	fb02 f303 	mul.w	r3, r2, r3
 800f90c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	3348      	adds	r3, #72	@ 0x48
 800f912:	4618      	mov	r0, r3
 800f914:	f002 f8dc 	bl	8011ad0 <pvPortMalloc>
 800f918:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00f      	beq.n	800f940 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	3348      	adds	r3, #72	@ 0x48
 800f924:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f92e:	79fa      	ldrb	r2, [r7, #7]
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	9300      	str	r3, [sp, #0]
 800f934:	4613      	mov	r3, r2
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	68b9      	ldr	r1, [r7, #8]
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f000 f805 	bl	800f94a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f940:	69bb      	ldr	r3, [r7, #24]
	}
 800f942:	4618      	mov	r0, r3
 800f944:	3720      	adds	r7, #32
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b084      	sub	sp, #16
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
 800f956:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d103      	bne.n	800f966 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f95e:	69bb      	ldr	r3, [r7, #24]
 800f960:	69ba      	ldr	r2, [r7, #24]
 800f962:	601a      	str	r2, [r3, #0]
 800f964:	e002      	b.n	800f96c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f96c:	69bb      	ldr	r3, [r7, #24]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f978:	2101      	movs	r1, #1
 800f97a:	69b8      	ldr	r0, [r7, #24]
 800f97c:	f7ff fec0 	bl	800f700 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08e      	sub	sp, #56	@ 0x38
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f996:	2300      	movs	r3, #0
 800f998:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d10b      	bne.n	800f9bc <xQueueGenericSend+0x34>
	__asm volatile
 800f9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a8:	f383 8811 	msr	BASEPRI, r3
 800f9ac:	f3bf 8f6f 	isb	sy
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f9b6:	bf00      	nop
 800f9b8:	bf00      	nop
 800f9ba:	e7fd      	b.n	800f9b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d103      	bne.n	800f9ca <xQueueGenericSend+0x42>
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <xQueueGenericSend+0x46>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e000      	b.n	800f9d0 <xQueueGenericSend+0x48>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d10b      	bne.n	800f9ec <xQueueGenericSend+0x64>
	__asm volatile
 800f9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f9e6:	bf00      	nop
 800f9e8:	bf00      	nop
 800f9ea:	e7fd      	b.n	800f9e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2b02      	cmp	r3, #2
 800f9f0:	d103      	bne.n	800f9fa <xQueueGenericSend+0x72>
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d101      	bne.n	800f9fe <xQueueGenericSend+0x76>
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e000      	b.n	800fa00 <xQueueGenericSend+0x78>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d10b      	bne.n	800fa1c <xQueueGenericSend+0x94>
	__asm volatile
 800fa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	623b      	str	r3, [r7, #32]
}
 800fa16:	bf00      	nop
 800fa18:	bf00      	nop
 800fa1a:	e7fd      	b.n	800fa18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa1c:	f001 fc20 	bl	8011260 <xTaskGetSchedulerState>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d102      	bne.n	800fa2c <xQueueGenericSend+0xa4>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d101      	bne.n	800fa30 <xQueueGenericSend+0xa8>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e000      	b.n	800fa32 <xQueueGenericSend+0xaa>
 800fa30:	2300      	movs	r3, #0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d10b      	bne.n	800fa4e <xQueueGenericSend+0xc6>
	__asm volatile
 800fa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	61fb      	str	r3, [r7, #28]
}
 800fa48:	bf00      	nop
 800fa4a:	bf00      	nop
 800fa4c:	e7fd      	b.n	800fa4a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa4e:	f001 ff3d 	bl	80118cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d302      	bcc.n	800fa64 <xQueueGenericSend+0xdc>
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d129      	bne.n	800fab8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	68b9      	ldr	r1, [r7, #8]
 800fa68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa6a:	f000 faec 	bl	8010046 <prvCopyDataToQueue>
 800fa6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d010      	beq.n	800fa9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7a:	3324      	adds	r3, #36	@ 0x24
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f001 f9f3 	bl	8010e68 <xTaskRemoveFromEventList>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d013      	beq.n	800fab0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fa88:	4b3f      	ldr	r3, [pc, #252]	@ (800fb88 <xQueueGenericSend+0x200>)
 800fa8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	e00a      	b.n	800fab0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fa9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800faa0:	4b39      	ldr	r3, [pc, #228]	@ (800fb88 <xQueueGenericSend+0x200>)
 800faa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fab0:	f001 ff3c 	bl	801192c <vPortExitCritical>
				return pdPASS;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e063      	b.n	800fb80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d103      	bne.n	800fac6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fabe:	f001 ff35 	bl	801192c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	e05c      	b.n	800fb80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d106      	bne.n	800fada <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800facc:	f107 0314 	add.w	r3, r7, #20
 800fad0:	4618      	mov	r0, r3
 800fad2:	f001 fa2d 	bl	8010f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fad6:	2301      	movs	r3, #1
 800fad8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fada:	f001 ff27 	bl	801192c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fade:	f000 ffc9 	bl	8010a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fae2:	f001 fef3 	bl	80118cc <vPortEnterCritical>
 800fae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800faec:	b25b      	sxtb	r3, r3
 800faee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf2:	d103      	bne.n	800fafc <xQueueGenericSend+0x174>
 800faf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fafe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb02:	b25b      	sxtb	r3, r3
 800fb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb08:	d103      	bne.n	800fb12 <xQueueGenericSend+0x18a>
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb12:	f001 ff0b 	bl	801192c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb16:	1d3a      	adds	r2, r7, #4
 800fb18:	f107 0314 	add.w	r3, r7, #20
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f001 fa1c 	bl	8010f5c <xTaskCheckForTimeOut>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d124      	bne.n	800fb74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fb2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb2c:	f000 fb83 	bl	8010236 <prvIsQueueFull>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d018      	beq.n	800fb68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb38:	3310      	adds	r3, #16
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f001 f96c 	bl	8010e1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fb44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb46:	f000 fb0e 	bl	8010166 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fb4a:	f000 ffa1 	bl	8010a90 <xTaskResumeAll>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f47f af7c 	bne.w	800fa4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fb56:	4b0c      	ldr	r3, [pc, #48]	@ (800fb88 <xQueueGenericSend+0x200>)
 800fb58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	e772      	b.n	800fa4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fb68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb6a:	f000 fafc 	bl	8010166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb6e:	f000 ff8f 	bl	8010a90 <xTaskResumeAll>
 800fb72:	e76c      	b.n	800fa4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fb74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb76:	f000 faf6 	bl	8010166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb7a:	f000 ff89 	bl	8010a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fb7e:	2300      	movs	r3, #0
		}
	}
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3738      	adds	r7, #56	@ 0x38
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	e000ed04 	.word	0xe000ed04

0800fb8c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08e      	sub	sp, #56	@ 0x38
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10b      	bne.n	800fbb8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	623b      	str	r3, [r7, #32]
}
 800fbb2:	bf00      	nop
 800fbb4:	bf00      	nop
 800fbb6:	e7fd      	b.n	800fbb4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00b      	beq.n	800fbd8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc4:	f383 8811 	msr	BASEPRI, r3
 800fbc8:	f3bf 8f6f 	isb	sy
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	61fb      	str	r3, [r7, #28]
}
 800fbd2:	bf00      	nop
 800fbd4:	bf00      	nop
 800fbd6:	e7fd      	b.n	800fbd4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800fbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d103      	bne.n	800fbe8 <xQueueGiveFromISR+0x5c>
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <xQueueGiveFromISR+0x60>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e000      	b.n	800fbee <xQueueGiveFromISR+0x62>
 800fbec:	2300      	movs	r3, #0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10b      	bne.n	800fc0a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	61bb      	str	r3, [r7, #24]
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop
 800fc08:	e7fd      	b.n	800fc06 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc0a:	f001 ff21 	bl	8011a50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fc0e:	f3ef 8211 	mrs	r2, BASEPRI
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	617a      	str	r2, [r7, #20]
 800fc24:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fc26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc2e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d22b      	bcs.n	800fc92 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc46:	1c5a      	adds	r2, r3, #1
 800fc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc54:	d112      	bne.n	800fc7c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d016      	beq.n	800fc8c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc60:	3324      	adds	r3, #36	@ 0x24
 800fc62:	4618      	mov	r0, r3
 800fc64:	f001 f900 	bl	8010e68 <xTaskRemoveFromEventList>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00e      	beq.n	800fc8c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00b      	beq.n	800fc8c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	2201      	movs	r2, #1
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	e007      	b.n	800fc8c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc80:	3301      	adds	r3, #1
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	b25a      	sxtb	r2, r3
 800fc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc90:	e001      	b.n	800fc96 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc92:	2300      	movs	r3, #0
 800fc94:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc98:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fca0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3738      	adds	r7, #56	@ 0x38
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b08e      	sub	sp, #56	@ 0x38
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d10b      	bne.n	800fce0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fcc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fccc:	f383 8811 	msr	BASEPRI, r3
 800fcd0:	f3bf 8f6f 	isb	sy
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	623b      	str	r3, [r7, #32]
}
 800fcda:	bf00      	nop
 800fcdc:	bf00      	nop
 800fcde:	e7fd      	b.n	800fcdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00b      	beq.n	800fd00 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	61fb      	str	r3, [r7, #28]
}
 800fcfa:	bf00      	nop
 800fcfc:	bf00      	nop
 800fcfe:	e7fd      	b.n	800fcfc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd00:	f001 faae 	bl	8011260 <xTaskGetSchedulerState>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d102      	bne.n	800fd10 <xQueueSemaphoreTake+0x64>
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <xQueueSemaphoreTake+0x68>
 800fd10:	2301      	movs	r3, #1
 800fd12:	e000      	b.n	800fd16 <xQueueSemaphoreTake+0x6a>
 800fd14:	2300      	movs	r3, #0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10b      	bne.n	800fd32 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	61bb      	str	r3, [r7, #24]
}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	e7fd      	b.n	800fd2e <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd32:	f001 fdcb 	bl	80118cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd3a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d024      	beq.n	800fd8c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd44:	1e5a      	subs	r2, r3, #1
 800fd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd48:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d104      	bne.n	800fd5c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fd52:	f001 fc53 	bl	80115fc <pvTaskIncrementMutexHeldCount>
 800fd56:	4602      	mov	r2, r0
 800fd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00f      	beq.n	800fd84 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd66:	3310      	adds	r3, #16
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f001 f87d 	bl	8010e68 <xTaskRemoveFromEventList>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d007      	beq.n	800fd84 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd74:	4b54      	ldr	r3, [pc, #336]	@ (800fec8 <xQueueSemaphoreTake+0x21c>)
 800fd76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd7a:	601a      	str	r2, [r3, #0]
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd84:	f001 fdd2 	bl	801192c <vPortExitCritical>
				return pdPASS;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e098      	b.n	800febe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d112      	bne.n	800fdb8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00b      	beq.n	800fdb0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9c:	f383 8811 	msr	BASEPRI, r3
 800fda0:	f3bf 8f6f 	isb	sy
 800fda4:	f3bf 8f4f 	dsb	sy
 800fda8:	617b      	str	r3, [r7, #20]
}
 800fdaa:	bf00      	nop
 800fdac:	bf00      	nop
 800fdae:	e7fd      	b.n	800fdac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fdb0:	f001 fdbc 	bl	801192c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	e082      	b.n	800febe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d106      	bne.n	800fdcc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fdbe:	f107 030c 	add.w	r3, r7, #12
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f001 f8b4 	bl	8010f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fdcc:	f001 fdae 	bl	801192c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fdd0:	f000 fe50 	bl	8010a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdd4:	f001 fd7a 	bl	80118cc <vPortEnterCritical>
 800fdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fdde:	b25b      	sxtb	r3, r3
 800fde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde4:	d103      	bne.n	800fdee <xQueueSemaphoreTake+0x142>
 800fde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdf4:	b25b      	sxtb	r3, r3
 800fdf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdfa:	d103      	bne.n	800fe04 <xQueueSemaphoreTake+0x158>
 800fdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fe04:	f001 fd92 	bl	801192c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe08:	463a      	mov	r2, r7
 800fe0a:	f107 030c 	add.w	r3, r7, #12
 800fe0e:	4611      	mov	r1, r2
 800fe10:	4618      	mov	r0, r3
 800fe12:	f001 f8a3 	bl	8010f5c <xTaskCheckForTimeOut>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d132      	bne.n	800fe82 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe1e:	f000 f9f4 	bl	801020a <prvIsQueueEmpty>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d026      	beq.n	800fe76 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d109      	bne.n	800fe44 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fe30:	f001 fd4c 	bl	80118cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800fe34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f001 fa2f 	bl	801129c <xTaskPriorityInherit>
 800fe3e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fe40:	f001 fd74 	bl	801192c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe46:	3324      	adds	r3, #36	@ 0x24
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 ffe5 	bl	8010e1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe54:	f000 f987 	bl	8010166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe58:	f000 fe1a 	bl	8010a90 <xTaskResumeAll>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f47f af67 	bne.w	800fd32 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fe64:	4b18      	ldr	r3, [pc, #96]	@ (800fec8 <xQueueSemaphoreTake+0x21c>)
 800fe66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	e75d      	b.n	800fd32 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fe76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe78:	f000 f975 	bl	8010166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe7c:	f000 fe08 	bl	8010a90 <xTaskResumeAll>
 800fe80:	e757      	b.n	800fd32 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fe82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe84:	f000 f96f 	bl	8010166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe88:	f000 fe02 	bl	8010a90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe8e:	f000 f9bc 	bl	801020a <prvIsQueueEmpty>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f43f af4c 	beq.w	800fd32 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00d      	beq.n	800febc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fea0:	f001 fd14 	bl	80118cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fea4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fea6:	f000 f8b7 	bl	8010018 <prvGetDisinheritPriorityAfterTimeout>
 800feaa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800feac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800feb2:	4618      	mov	r0, r3
 800feb4:	f001 fb00 	bl	80114b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800feb8:	f001 fd38 	bl	801192c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800febc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3738      	adds	r7, #56	@ 0x38
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	e000ed04 	.word	0xe000ed04

0800fecc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b08e      	sub	sp, #56	@ 0x38
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10b      	bne.n	800fefa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	623b      	str	r3, [r7, #32]
}
 800fef4:	bf00      	nop
 800fef6:	bf00      	nop
 800fef8:	e7fd      	b.n	800fef6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d103      	bne.n	800ff08 <xQueueReceiveFromISR+0x3c>
 800ff00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <xQueueReceiveFromISR+0x40>
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e000      	b.n	800ff0e <xQueueReceiveFromISR+0x42>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10b      	bne.n	800ff2a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ff12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff16:	f383 8811 	msr	BASEPRI, r3
 800ff1a:	f3bf 8f6f 	isb	sy
 800ff1e:	f3bf 8f4f 	dsb	sy
 800ff22:	61fb      	str	r3, [r7, #28]
}
 800ff24:	bf00      	nop
 800ff26:	bf00      	nop
 800ff28:	e7fd      	b.n	800ff26 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff2a:	f001 fd91 	bl	8011a50 <vPortValidateInterruptPriority>
	__asm volatile
 800ff2e:	f3ef 8211 	mrs	r2, BASEPRI
 800ff32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	61ba      	str	r2, [r7, #24]
 800ff44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ff46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d02f      	beq.n	800ffb6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ff56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff60:	68b9      	ldr	r1, [r7, #8]
 800ff62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff64:	f000 f8d9 	bl	801011a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6a:	1e5a      	subs	r2, r3, #1
 800ff6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff6e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ff70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ff74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff78:	d112      	bne.n	800ffa0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d016      	beq.n	800ffb0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff84:	3310      	adds	r3, #16
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 ff6e 	bl	8010e68 <xTaskRemoveFromEventList>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00e      	beq.n	800ffb0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d00b      	beq.n	800ffb0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	e007      	b.n	800ffb0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ffa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	b25a      	sxtb	r2, r3
 800ffaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffb4:	e001      	b.n	800ffba <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	f383 8811 	msr	BASEPRI, r3
}
 800ffc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ffc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3738      	adds	r7, #56	@ 0x38
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d10b      	bne.n	800fffa <vQueueDelete+0x2a>
	__asm volatile
 800ffe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffe6:	f383 8811 	msr	BASEPRI, r3
 800ffea:	f3bf 8f6f 	isb	sy
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	60bb      	str	r3, [r7, #8]
}
 800fff4:	bf00      	nop
 800fff6:	bf00      	nop
 800fff8:	e7fd      	b.n	800fff6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f000 f934 	bl	8010268 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010006:	2b00      	cmp	r3, #0
 8010008:	d102      	bne.n	8010010 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f001 fe28 	bl	8011c60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010010:	bf00      	nop
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010024:	2b00      	cmp	r3, #0
 8010026:	d006      	beq.n	8010036 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f1c3 0307 	rsb	r3, r3, #7
 8010032:	60fb      	str	r3, [r7, #12]
 8010034:	e001      	b.n	801003a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010036:	2300      	movs	r3, #0
 8010038:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801003a:	68fb      	ldr	r3, [r7, #12]
	}
 801003c:	4618      	mov	r0, r3
 801003e:	3714      	adds	r7, #20
 8010040:	46bd      	mov	sp, r7
 8010042:	bc80      	pop	{r7}
 8010044:	4770      	bx	lr

08010046 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b086      	sub	sp, #24
 801004a:	af00      	add	r7, sp, #0
 801004c:	60f8      	str	r0, [r7, #12]
 801004e:	60b9      	str	r1, [r7, #8]
 8010050:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010052:	2300      	movs	r3, #0
 8010054:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801005a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10d      	bne.n	8010080 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d14d      	bne.n	8010108 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	f001 f999 	bl	80113a8 <xTaskPriorityDisinherit>
 8010076:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	605a      	str	r2, [r3, #4]
 801007e:	e043      	b.n	8010108 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d119      	bne.n	80100ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6898      	ldr	r0, [r3, #8]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801008e:	461a      	mov	r2, r3
 8010090:	68b9      	ldr	r1, [r7, #8]
 8010092:	f002 f809 	bl	80120a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	689a      	ldr	r2, [r3, #8]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009e:	441a      	add	r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	689a      	ldr	r2, [r3, #8]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d32b      	bcc.n	8010108 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	609a      	str	r2, [r3, #8]
 80100b8:	e026      	b.n	8010108 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	68d8      	ldr	r0, [r3, #12]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100c2:	461a      	mov	r2, r3
 80100c4:	68b9      	ldr	r1, [r7, #8]
 80100c6:	f001 ffef 	bl	80120a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	68da      	ldr	r2, [r3, #12]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100d2:	425b      	negs	r3, r3
 80100d4:	441a      	add	r2, r3
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	68da      	ldr	r2, [r3, #12]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d207      	bcs.n	80100f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	685a      	ldr	r2, [r3, #4]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ee:	425b      	negs	r3, r3
 80100f0:	441a      	add	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d105      	bne.n	8010108 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d002      	beq.n	8010108 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	3b01      	subs	r3, #1
 8010106:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010110:	697b      	ldr	r3, [r7, #20]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b082      	sub	sp, #8
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010128:	2b00      	cmp	r3, #0
 801012a:	d018      	beq.n	801015e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	68da      	ldr	r2, [r3, #12]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010134:	441a      	add	r2, r3
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	68da      	ldr	r2, [r3, #12]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d303      	bcc.n	801014e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68d9      	ldr	r1, [r3, #12]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010156:	461a      	mov	r2, r3
 8010158:	6838      	ldr	r0, [r7, #0]
 801015a:	f001 ffa5 	bl	80120a8 <memcpy>
	}
}
 801015e:	bf00      	nop
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b084      	sub	sp, #16
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801016e:	f001 fbad 	bl	80118cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010178:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801017a:	e011      	b.n	80101a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010180:	2b00      	cmp	r3, #0
 8010182:	d012      	beq.n	80101aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	3324      	adds	r3, #36	@ 0x24
 8010188:	4618      	mov	r0, r3
 801018a:	f000 fe6d 	bl	8010e68 <xTaskRemoveFromEventList>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d001      	beq.n	8010198 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010194:	f000 ff46 	bl	8011024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010198:	7bfb      	ldrb	r3, [r7, #15]
 801019a:	3b01      	subs	r3, #1
 801019c:	b2db      	uxtb	r3, r3
 801019e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80101a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	dce9      	bgt.n	801017c <prvUnlockQueue+0x16>
 80101a8:	e000      	b.n	80101ac <prvUnlockQueue+0x46>
					break;
 80101aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	22ff      	movs	r2, #255	@ 0xff
 80101b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80101b4:	f001 fbba 	bl	801192c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80101b8:	f001 fb88 	bl	80118cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80101c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80101c4:	e011      	b.n	80101ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	691b      	ldr	r3, [r3, #16]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d012      	beq.n	80101f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	3310      	adds	r3, #16
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 fe48 	bl	8010e68 <xTaskRemoveFromEventList>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d001      	beq.n	80101e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80101de:	f000 ff21 	bl	8011024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80101e2:	7bbb      	ldrb	r3, [r7, #14]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80101ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	dce9      	bgt.n	80101c6 <prvUnlockQueue+0x60>
 80101f2:	e000      	b.n	80101f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80101f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	22ff      	movs	r2, #255	@ 0xff
 80101fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80101fe:	f001 fb95 	bl	801192c <vPortExitCritical>
}
 8010202:	bf00      	nop
 8010204:	3710      	adds	r7, #16
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010212:	f001 fb5b 	bl	80118cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801021a:	2b00      	cmp	r3, #0
 801021c:	d102      	bne.n	8010224 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801021e:	2301      	movs	r3, #1
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	e001      	b.n	8010228 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010224:	2300      	movs	r3, #0
 8010226:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010228:	f001 fb80 	bl	801192c <vPortExitCritical>

	return xReturn;
 801022c:	68fb      	ldr	r3, [r7, #12]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b084      	sub	sp, #16
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801023e:	f001 fb45 	bl	80118cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801024a:	429a      	cmp	r2, r3
 801024c:	d102      	bne.n	8010254 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801024e:	2301      	movs	r3, #1
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	e001      	b.n	8010258 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010254:	2300      	movs	r3, #0
 8010256:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010258:	f001 fb68 	bl	801192c <vPortExitCritical>

	return xReturn;
 801025c:	68fb      	ldr	r3, [r7, #12]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
	...

08010268 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010270:	2300      	movs	r3, #0
 8010272:	60fb      	str	r3, [r7, #12]
 8010274:	e016      	b.n	80102a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010276:	4a10      	ldr	r2, [pc, #64]	@ (80102b8 <vQueueUnregisterQueue+0x50>)
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	00db      	lsls	r3, r3, #3
 801027c:	4413      	add	r3, r2
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	429a      	cmp	r2, r3
 8010284:	d10b      	bne.n	801029e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010286:	4a0c      	ldr	r2, [pc, #48]	@ (80102b8 <vQueueUnregisterQueue+0x50>)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2100      	movs	r1, #0
 801028c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010290:	4a09      	ldr	r2, [pc, #36]	@ (80102b8 <vQueueUnregisterQueue+0x50>)
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	00db      	lsls	r3, r3, #3
 8010296:	4413      	add	r3, r2
 8010298:	2200      	movs	r2, #0
 801029a:	605a      	str	r2, [r3, #4]
				break;
 801029c:	e006      	b.n	80102ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3301      	adds	r3, #1
 80102a2:	60fb      	str	r3, [r7, #12]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b07      	cmp	r3, #7
 80102a8:	d9e5      	bls.n	8010276 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80102aa:	bf00      	nop
 80102ac:	bf00      	nop
 80102ae:	3714      	adds	r7, #20
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bc80      	pop	{r7}
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	20001aa0 	.word	0x20001aa0

080102bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b08e      	sub	sp, #56	@ 0x38
 80102c0:	af04      	add	r7, sp, #16
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
 80102c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80102ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d10b      	bne.n	80102e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	623b      	str	r3, [r7, #32]
}
 80102e2:	bf00      	nop
 80102e4:	bf00      	nop
 80102e6:	e7fd      	b.n	80102e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80102e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10b      	bne.n	8010306 <xTaskCreateStatic+0x4a>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	61fb      	str	r3, [r7, #28]
}
 8010300:	bf00      	nop
 8010302:	bf00      	nop
 8010304:	e7fd      	b.n	8010302 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010306:	2354      	movs	r3, #84	@ 0x54
 8010308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	2b54      	cmp	r3, #84	@ 0x54
 801030e:	d00b      	beq.n	8010328 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010314:	f383 8811 	msr	BASEPRI, r3
 8010318:	f3bf 8f6f 	isb	sy
 801031c:	f3bf 8f4f 	dsb	sy
 8010320:	61bb      	str	r3, [r7, #24]
}
 8010322:	bf00      	nop
 8010324:	bf00      	nop
 8010326:	e7fd      	b.n	8010324 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032a:	2b00      	cmp	r3, #0
 801032c:	d01e      	beq.n	801036c <xTaskCreateStatic+0xb0>
 801032e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010330:	2b00      	cmp	r3, #0
 8010332:	d01b      	beq.n	801036c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010336:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801033a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801033c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801033e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010340:	2202      	movs	r2, #2
 8010342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010346:	2300      	movs	r3, #0
 8010348:	9303      	str	r3, [sp, #12]
 801034a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034c:	9302      	str	r3, [sp, #8]
 801034e:	f107 0314 	add.w	r3, r7, #20
 8010352:	9301      	str	r3, [sp, #4]
 8010354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010356:	9300      	str	r3, [sp, #0]
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	68b9      	ldr	r1, [r7, #8]
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f000 f850 	bl	8010404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010364:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010366:	f000 f8d5 	bl	8010514 <prvAddNewTaskToReadyList>
 801036a:	e001      	b.n	8010370 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 801036c:	2300      	movs	r3, #0
 801036e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010370:	697b      	ldr	r3, [r7, #20]
	}
 8010372:	4618      	mov	r0, r3
 8010374:	3728      	adds	r7, #40	@ 0x28
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801037a:	b580      	push	{r7, lr}
 801037c:	b08c      	sub	sp, #48	@ 0x30
 801037e:	af04      	add	r7, sp, #16
 8010380:	60f8      	str	r0, [r7, #12]
 8010382:	60b9      	str	r1, [r7, #8]
 8010384:	603b      	str	r3, [r7, #0]
 8010386:	4613      	mov	r3, r2
 8010388:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801038a:	88fb      	ldrh	r3, [r7, #6]
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4618      	mov	r0, r3
 8010390:	f001 fb9e 	bl	8011ad0 <pvPortMalloc>
 8010394:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00e      	beq.n	80103ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801039c:	2054      	movs	r0, #84	@ 0x54
 801039e:	f001 fb97 	bl	8011ad0 <pvPortMalloc>
 80103a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d003      	beq.n	80103b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	697a      	ldr	r2, [r7, #20]
 80103ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80103b0:	e005      	b.n	80103be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80103b2:	6978      	ldr	r0, [r7, #20]
 80103b4:	f001 fc54 	bl	8011c60 <vPortFree>
 80103b8:	e001      	b.n	80103be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80103ba:	2300      	movs	r3, #0
 80103bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d017      	beq.n	80103f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103cc:	88fa      	ldrh	r2, [r7, #6]
 80103ce:	2300      	movs	r3, #0
 80103d0:	9303      	str	r3, [sp, #12]
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	9302      	str	r3, [sp, #8]
 80103d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d8:	9301      	str	r3, [sp, #4]
 80103da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103dc:	9300      	str	r3, [sp, #0]
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	68b9      	ldr	r1, [r7, #8]
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f000 f80e 	bl	8010404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80103e8:	69f8      	ldr	r0, [r7, #28]
 80103ea:	f000 f893 	bl	8010514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80103ee:	2301      	movs	r3, #1
 80103f0:	61bb      	str	r3, [r7, #24]
 80103f2:	e002      	b.n	80103fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80103f4:	f04f 33ff 	mov.w	r3, #4294967295
 80103f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80103fa:	69bb      	ldr	r3, [r7, #24]
	}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3720      	adds	r7, #32
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010414:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	461a      	mov	r2, r3
 801041c:	21a5      	movs	r1, #165	@ 0xa5
 801041e:	f001 fdff 	bl	8012020 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801042c:	3b01      	subs	r3, #1
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4413      	add	r3, r2
 8010432:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	f023 0307 	bic.w	r3, r3, #7
 801043a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	f003 0307 	and.w	r3, r3, #7
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00b      	beq.n	801045e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801044a:	f383 8811 	msr	BASEPRI, r3
 801044e:	f3bf 8f6f 	isb	sy
 8010452:	f3bf 8f4f 	dsb	sy
 8010456:	617b      	str	r3, [r7, #20]
}
 8010458:	bf00      	nop
 801045a:	bf00      	nop
 801045c:	e7fd      	b.n	801045a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801045e:	2300      	movs	r3, #0
 8010460:	61fb      	str	r3, [r7, #28]
 8010462:	e012      	b.n	801048a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	4413      	add	r3, r2
 801046a:	7819      	ldrb	r1, [r3, #0]
 801046c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	4413      	add	r3, r2
 8010472:	3334      	adds	r3, #52	@ 0x34
 8010474:	460a      	mov	r2, r1
 8010476:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	4413      	add	r3, r2
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d006      	beq.n	8010492 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	3301      	adds	r3, #1
 8010488:	61fb      	str	r3, [r7, #28]
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	2b0f      	cmp	r3, #15
 801048e:	d9e9      	bls.n	8010464 <prvInitialiseNewTask+0x60>
 8010490:	e000      	b.n	8010494 <prvInitialiseNewTask+0x90>
		{
			break;
 8010492:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010496:	2200      	movs	r2, #0
 8010498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801049c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049e:	2b06      	cmp	r3, #6
 80104a0:	d901      	bls.n	80104a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80104a2:	2306      	movs	r3, #6
 80104a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80104a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80104ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80104b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b4:	2200      	movs	r2, #0
 80104b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80104b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ba:	3304      	adds	r3, #4
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff f88f 	bl	800f5e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80104c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104c4:	3318      	adds	r3, #24
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff f88a 	bl	800f5e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80104cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d4:	f1c3 0207 	rsb	r2, r3, #7
 80104d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80104dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80104e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e4:	2200      	movs	r2, #0
 80104e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80104e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	68f9      	ldr	r1, [r7, #12]
 80104f4:	69b8      	ldr	r0, [r7, #24]
 80104f6:	f001 f8fb 	bl	80116f0 <pxPortInitialiseStack>
 80104fa:	4602      	mov	r2, r0
 80104fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010502:	2b00      	cmp	r3, #0
 8010504:	d002      	beq.n	801050c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801050a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801050c:	bf00      	nop
 801050e:	3720      	adds	r7, #32
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801051c:	f001 f9d6 	bl	80118cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010520:	4b2a      	ldr	r3, [pc, #168]	@ (80105cc <prvAddNewTaskToReadyList+0xb8>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3301      	adds	r3, #1
 8010526:	4a29      	ldr	r2, [pc, #164]	@ (80105cc <prvAddNewTaskToReadyList+0xb8>)
 8010528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801052a:	4b29      	ldr	r3, [pc, #164]	@ (80105d0 <prvAddNewTaskToReadyList+0xbc>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d109      	bne.n	8010546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010532:	4a27      	ldr	r2, [pc, #156]	@ (80105d0 <prvAddNewTaskToReadyList+0xbc>)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010538:	4b24      	ldr	r3, [pc, #144]	@ (80105cc <prvAddNewTaskToReadyList+0xb8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d110      	bne.n	8010562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010540:	f000 fd94 	bl	801106c <prvInitialiseTaskLists>
 8010544:	e00d      	b.n	8010562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010546:	4b23      	ldr	r3, [pc, #140]	@ (80105d4 <prvAddNewTaskToReadyList+0xc0>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d109      	bne.n	8010562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801054e:	4b20      	ldr	r3, [pc, #128]	@ (80105d0 <prvAddNewTaskToReadyList+0xbc>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010558:	429a      	cmp	r2, r3
 801055a:	d802      	bhi.n	8010562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801055c:	4a1c      	ldr	r2, [pc, #112]	@ (80105d0 <prvAddNewTaskToReadyList+0xbc>)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010562:	4b1d      	ldr	r3, [pc, #116]	@ (80105d8 <prvAddNewTaskToReadyList+0xc4>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3301      	adds	r3, #1
 8010568:	4a1b      	ldr	r2, [pc, #108]	@ (80105d8 <prvAddNewTaskToReadyList+0xc4>)
 801056a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010570:	2201      	movs	r2, #1
 8010572:	409a      	lsls	r2, r3
 8010574:	4b19      	ldr	r3, [pc, #100]	@ (80105dc <prvAddNewTaskToReadyList+0xc8>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4313      	orrs	r3, r2
 801057a:	4a18      	ldr	r2, [pc, #96]	@ (80105dc <prvAddNewTaskToReadyList+0xc8>)
 801057c:	6013      	str	r3, [r2, #0]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010582:	4613      	mov	r3, r2
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	4413      	add	r3, r2
 8010588:	009b      	lsls	r3, r3, #2
 801058a:	4a15      	ldr	r2, [pc, #84]	@ (80105e0 <prvAddNewTaskToReadyList+0xcc>)
 801058c:	441a      	add	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	3304      	adds	r3, #4
 8010592:	4619      	mov	r1, r3
 8010594:	4610      	mov	r0, r2
 8010596:	f7ff f82f 	bl	800f5f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801059a:	f001 f9c7 	bl	801192c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801059e:	4b0d      	ldr	r3, [pc, #52]	@ (80105d4 <prvAddNewTaskToReadyList+0xc0>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00e      	beq.n	80105c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80105a6:	4b0a      	ldr	r3, [pc, #40]	@ (80105d0 <prvAddNewTaskToReadyList+0xbc>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d207      	bcs.n	80105c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80105b4:	4b0b      	ldr	r3, [pc, #44]	@ (80105e4 <prvAddNewTaskToReadyList+0xd0>)
 80105b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105ba:	601a      	str	r2, [r3, #0]
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105c4:	bf00      	nop
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	20001be0 	.word	0x20001be0
 80105d0:	20001ae0 	.word	0x20001ae0
 80105d4:	20001bec 	.word	0x20001bec
 80105d8:	20001bfc 	.word	0x20001bfc
 80105dc:	20001be8 	.word	0x20001be8
 80105e0:	20001ae4 	.word	0x20001ae4
 80105e4:	e000ed04 	.word	0xe000ed04

080105e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08a      	sub	sp, #40	@ 0x28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80105f2:	2300      	movs	r3, #0
 80105f4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10b      	bne.n	8010614 <vTaskDelayUntil+0x2c>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	617b      	str	r3, [r7, #20]
}
 801060e:	bf00      	nop
 8010610:	bf00      	nop
 8010612:	e7fd      	b.n	8010610 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10b      	bne.n	8010632 <vTaskDelayUntil+0x4a>
	__asm volatile
 801061a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801061e:	f383 8811 	msr	BASEPRI, r3
 8010622:	f3bf 8f6f 	isb	sy
 8010626:	f3bf 8f4f 	dsb	sy
 801062a:	613b      	str	r3, [r7, #16]
}
 801062c:	bf00      	nop
 801062e:	bf00      	nop
 8010630:	e7fd      	b.n	801062e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8010632:	4b2a      	ldr	r3, [pc, #168]	@ (80106dc <vTaskDelayUntil+0xf4>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00b      	beq.n	8010652 <vTaskDelayUntil+0x6a>
	__asm volatile
 801063a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	60fb      	str	r3, [r7, #12]
}
 801064c:	bf00      	nop
 801064e:	bf00      	nop
 8010650:	e7fd      	b.n	801064e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8010652:	f000 fa0f 	bl	8010a74 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010656:	4b22      	ldr	r3, [pc, #136]	@ (80106e0 <vTaskDelayUntil+0xf8>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	683a      	ldr	r2, [r7, #0]
 8010662:	4413      	add	r3, r2
 8010664:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	6a3a      	ldr	r2, [r7, #32]
 801066c:	429a      	cmp	r2, r3
 801066e:	d20b      	bcs.n	8010688 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	69fa      	ldr	r2, [r7, #28]
 8010676:	429a      	cmp	r2, r3
 8010678:	d211      	bcs.n	801069e <vTaskDelayUntil+0xb6>
 801067a:	69fa      	ldr	r2, [r7, #28]
 801067c:	6a3b      	ldr	r3, [r7, #32]
 801067e:	429a      	cmp	r2, r3
 8010680:	d90d      	bls.n	801069e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010682:	2301      	movs	r3, #1
 8010684:	627b      	str	r3, [r7, #36]	@ 0x24
 8010686:	e00a      	b.n	801069e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	69fa      	ldr	r2, [r7, #28]
 801068e:	429a      	cmp	r2, r3
 8010690:	d303      	bcc.n	801069a <vTaskDelayUntil+0xb2>
 8010692:	69fa      	ldr	r2, [r7, #28]
 8010694:	6a3b      	ldr	r3, [r7, #32]
 8010696:	429a      	cmp	r2, r3
 8010698:	d901      	bls.n	801069e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801069a:	2301      	movs	r3, #1
 801069c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69fa      	ldr	r2, [r7, #28]
 80106a2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80106a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d006      	beq.n	80106b8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80106aa:	69fa      	ldr	r2, [r7, #28]
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	2100      	movs	r1, #0
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 ffb6 	bl	8011624 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80106b8:	f000 f9ea 	bl	8010a90 <xTaskResumeAll>
 80106bc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d107      	bne.n	80106d4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80106c4:	4b07      	ldr	r3, [pc, #28]	@ (80106e4 <vTaskDelayUntil+0xfc>)
 80106c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106ca:	601a      	str	r2, [r3, #0]
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80106d4:	bf00      	nop
 80106d6:	3728      	adds	r7, #40	@ 0x28
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	20001c08 	.word	0x20001c08
 80106e0:	20001be4 	.word	0x20001be4
 80106e4:	e000ed04 	.word	0xe000ed04

080106e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80106f0:	2300      	movs	r3, #0
 80106f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d018      	beq.n	801072c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80106fa:	4b14      	ldr	r3, [pc, #80]	@ (801074c <vTaskDelay+0x64>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00b      	beq.n	801071a <vTaskDelay+0x32>
	__asm volatile
 8010702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010706:	f383 8811 	msr	BASEPRI, r3
 801070a:	f3bf 8f6f 	isb	sy
 801070e:	f3bf 8f4f 	dsb	sy
 8010712:	60bb      	str	r3, [r7, #8]
}
 8010714:	bf00      	nop
 8010716:	bf00      	nop
 8010718:	e7fd      	b.n	8010716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801071a:	f000 f9ab 	bl	8010a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801071e:	2100      	movs	r1, #0
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 ff7f 	bl	8011624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010726:	f000 f9b3 	bl	8010a90 <xTaskResumeAll>
 801072a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d107      	bne.n	8010742 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010732:	4b07      	ldr	r3, [pc, #28]	@ (8010750 <vTaskDelay+0x68>)
 8010734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010738:	601a      	str	r2, [r3, #0]
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010742:	bf00      	nop
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20001c08 	.word	0x20001c08
 8010750:	e000ed04 	.word	0xe000ed04

08010754 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801075c:	f001 f8b6 	bl	80118cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d102      	bne.n	801076c <vTaskSuspend+0x18>
 8010766:	4b3d      	ldr	r3, [pc, #244]	@ (801085c <vTaskSuspend+0x108>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	e000      	b.n	801076e <vTaskSuspend+0x1a>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3304      	adds	r3, #4
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe ff9a 	bl	800f6ae <uxListRemove>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d115      	bne.n	80107ac <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010784:	4936      	ldr	r1, [pc, #216]	@ (8010860 <vTaskSuspend+0x10c>)
 8010786:	4613      	mov	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	4413      	add	r3, r2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	440b      	add	r3, r1
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10a      	bne.n	80107ac <vTaskSuspend+0x58>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801079a:	2201      	movs	r2, #1
 801079c:	fa02 f303 	lsl.w	r3, r2, r3
 80107a0:	43da      	mvns	r2, r3
 80107a2:	4b30      	ldr	r3, [pc, #192]	@ (8010864 <vTaskSuspend+0x110>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4013      	ands	r3, r2
 80107a8:	4a2e      	ldr	r2, [pc, #184]	@ (8010864 <vTaskSuspend+0x110>)
 80107aa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d004      	beq.n	80107be <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	3318      	adds	r3, #24
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fe ff78 	bl	800f6ae <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3304      	adds	r3, #4
 80107c2:	4619      	mov	r1, r3
 80107c4:	4828      	ldr	r0, [pc, #160]	@ (8010868 <vTaskSuspend+0x114>)
 80107c6:	f7fe ff17 	bl	800f5f8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d103      	bne.n	80107de <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80107de:	f001 f8a5 	bl	801192c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80107e2:	4b22      	ldr	r3, [pc, #136]	@ (801086c <vTaskSuspend+0x118>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d005      	beq.n	80107f6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80107ea:	f001 f86f 	bl	80118cc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80107ee:	f000 fd13 	bl	8011218 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80107f2:	f001 f89b 	bl	801192c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80107f6:	4b19      	ldr	r3, [pc, #100]	@ (801085c <vTaskSuspend+0x108>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68fa      	ldr	r2, [r7, #12]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d128      	bne.n	8010852 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8010800:	4b1a      	ldr	r3, [pc, #104]	@ (801086c <vTaskSuspend+0x118>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d018      	beq.n	801083a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8010808:	4b19      	ldr	r3, [pc, #100]	@ (8010870 <vTaskSuspend+0x11c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d00b      	beq.n	8010828 <vTaskSuspend+0xd4>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	60bb      	str	r3, [r7, #8]
}
 8010822:	bf00      	nop
 8010824:	bf00      	nop
 8010826:	e7fd      	b.n	8010824 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8010828:	4b12      	ldr	r3, [pc, #72]	@ (8010874 <vTaskSuspend+0x120>)
 801082a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010838:	e00b      	b.n	8010852 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 801083a:	4b0b      	ldr	r3, [pc, #44]	@ (8010868 <vTaskSuspend+0x114>)
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	4b0e      	ldr	r3, [pc, #56]	@ (8010878 <vTaskSuspend+0x124>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	429a      	cmp	r2, r3
 8010844:	d103      	bne.n	801084e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8010846:	4b05      	ldr	r3, [pc, #20]	@ (801085c <vTaskSuspend+0x108>)
 8010848:	2200      	movs	r2, #0
 801084a:	601a      	str	r2, [r3, #0]
	}
 801084c:	e001      	b.n	8010852 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 801084e:	f000 fa89 	bl	8010d64 <vTaskSwitchContext>
	}
 8010852:	bf00      	nop
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	20001ae0 	.word	0x20001ae0
 8010860:	20001ae4 	.word	0x20001ae4
 8010864:	20001be8 	.word	0x20001be8
 8010868:	20001bcc 	.word	0x20001bcc
 801086c:	20001bec 	.word	0x20001bec
 8010870:	20001c08 	.word	0x20001c08
 8010874:	e000ed04 	.word	0xe000ed04
 8010878:	20001be0 	.word	0x20001be0

0801087c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801087c:	b480      	push	{r7}
 801087e:	b087      	sub	sp, #28
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010884:	2300      	movs	r3, #0
 8010886:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d10b      	bne.n	80108aa <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8010892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	60fb      	str	r3, [r7, #12]
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop
 80108a8:	e7fd      	b.n	80108a6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	695b      	ldr	r3, [r3, #20]
 80108ae:	4a0f      	ldr	r2, [pc, #60]	@ (80108ec <prvTaskIsTaskSuspended+0x70>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d101      	bne.n	80108b8 <prvTaskIsTaskSuspended+0x3c>
 80108b4:	2301      	movs	r3, #1
 80108b6:	e000      	b.n	80108ba <prvTaskIsTaskSuspended+0x3e>
 80108b8:	2300      	movs	r3, #0
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00f      	beq.n	80108de <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108c2:	4a0b      	ldr	r2, [pc, #44]	@ (80108f0 <prvTaskIsTaskSuspended+0x74>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d00a      	beq.n	80108de <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d101      	bne.n	80108d4 <prvTaskIsTaskSuspended+0x58>
 80108d0:	2301      	movs	r3, #1
 80108d2:	e000      	b.n	80108d6 <prvTaskIsTaskSuspended+0x5a>
 80108d4:	2300      	movs	r3, #0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d001      	beq.n	80108de <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 80108da:	2301      	movs	r3, #1
 80108dc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108de:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80108e0:	4618      	mov	r0, r3
 80108e2:	371c      	adds	r7, #28
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bc80      	pop	{r7}
 80108e8:	4770      	bx	lr
 80108ea:	bf00      	nop
 80108ec:	20001bcc 	.word	0x20001bcc
 80108f0:	20001ba0 	.word	0x20001ba0

080108f4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d10b      	bne.n	801091e <vTaskResume+0x2a>
	__asm volatile
 8010906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	60bb      	str	r3, [r7, #8]
}
 8010918:	bf00      	nop
 801091a:	bf00      	nop
 801091c:	e7fd      	b.n	801091a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d039      	beq.n	8010998 <vTaskResume+0xa4>
 8010924:	4b1e      	ldr	r3, [pc, #120]	@ (80109a0 <vTaskResume+0xac>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	429a      	cmp	r2, r3
 801092c:	d034      	beq.n	8010998 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801092e:	f000 ffcd 	bl	80118cc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	f7ff ffa2 	bl	801087c <prvTaskIsTaskSuspended>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d02a      	beq.n	8010994 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3304      	adds	r3, #4
 8010942:	4618      	mov	r0, r3
 8010944:	f7fe feb3 	bl	800f6ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801094c:	2201      	movs	r2, #1
 801094e:	409a      	lsls	r2, r3
 8010950:	4b14      	ldr	r3, [pc, #80]	@ (80109a4 <vTaskResume+0xb0>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4313      	orrs	r3, r2
 8010956:	4a13      	ldr	r2, [pc, #76]	@ (80109a4 <vTaskResume+0xb0>)
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801095e:	4613      	mov	r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	4413      	add	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4a10      	ldr	r2, [pc, #64]	@ (80109a8 <vTaskResume+0xb4>)
 8010968:	441a      	add	r2, r3
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	3304      	adds	r3, #4
 801096e:	4619      	mov	r1, r3
 8010970:	4610      	mov	r0, r2
 8010972:	f7fe fe41 	bl	800f5f8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801097a:	4b09      	ldr	r3, [pc, #36]	@ (80109a0 <vTaskResume+0xac>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010980:	429a      	cmp	r2, r3
 8010982:	d307      	bcc.n	8010994 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010984:	4b09      	ldr	r3, [pc, #36]	@ (80109ac <vTaskResume+0xb8>)
 8010986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010994:	f000 ffca 	bl	801192c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010998:	bf00      	nop
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	20001ae0 	.word	0x20001ae0
 80109a4:	20001be8 	.word	0x20001be8
 80109a8:	20001ae4 	.word	0x20001ae4
 80109ac:	e000ed04 	.word	0xe000ed04

080109b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b08a      	sub	sp, #40	@ 0x28
 80109b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80109b6:	2300      	movs	r3, #0
 80109b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80109ba:	2300      	movs	r3, #0
 80109bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80109be:	463a      	mov	r2, r7
 80109c0:	1d39      	adds	r1, r7, #4
 80109c2:	f107 0308 	add.w	r3, r7, #8
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7f2 fed8 	bl	800377c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80109cc:	6839      	ldr	r1, [r7, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	9202      	str	r2, [sp, #8]
 80109d4:	9301      	str	r3, [sp, #4]
 80109d6:	2300      	movs	r3, #0
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	2300      	movs	r3, #0
 80109dc:	460a      	mov	r2, r1
 80109de:	491f      	ldr	r1, [pc, #124]	@ (8010a5c <vTaskStartScheduler+0xac>)
 80109e0:	481f      	ldr	r0, [pc, #124]	@ (8010a60 <vTaskStartScheduler+0xb0>)
 80109e2:	f7ff fc6b 	bl	80102bc <xTaskCreateStatic>
 80109e6:	4603      	mov	r3, r0
 80109e8:	4a1e      	ldr	r2, [pc, #120]	@ (8010a64 <vTaskStartScheduler+0xb4>)
 80109ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80109ec:	4b1d      	ldr	r3, [pc, #116]	@ (8010a64 <vTaskStartScheduler+0xb4>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d002      	beq.n	80109fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80109f4:	2301      	movs	r3, #1
 80109f6:	617b      	str	r3, [r7, #20]
 80109f8:	e001      	b.n	80109fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d116      	bne.n	8010a32 <vTaskStartScheduler+0x82>
	__asm volatile
 8010a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a08:	f383 8811 	msr	BASEPRI, r3
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	613b      	str	r3, [r7, #16]
}
 8010a16:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010a18:	4b13      	ldr	r3, [pc, #76]	@ (8010a68 <vTaskStartScheduler+0xb8>)
 8010a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010a20:	4b12      	ldr	r3, [pc, #72]	@ (8010a6c <vTaskStartScheduler+0xbc>)
 8010a22:	2201      	movs	r2, #1
 8010a24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010a26:	4b12      	ldr	r3, [pc, #72]	@ (8010a70 <vTaskStartScheduler+0xc0>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010a2c:	f000 fedc 	bl	80117e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010a30:	e00f      	b.n	8010a52 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a38:	d10b      	bne.n	8010a52 <vTaskStartScheduler+0xa2>
	__asm volatile
 8010a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a3e:	f383 8811 	msr	BASEPRI, r3
 8010a42:	f3bf 8f6f 	isb	sy
 8010a46:	f3bf 8f4f 	dsb	sy
 8010a4a:	60fb      	str	r3, [r7, #12]
}
 8010a4c:	bf00      	nop
 8010a4e:	bf00      	nop
 8010a50:	e7fd      	b.n	8010a4e <vTaskStartScheduler+0x9e>
}
 8010a52:	bf00      	nop
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	080124ec 	.word	0x080124ec
 8010a60:	0801103d 	.word	0x0801103d
 8010a64:	20001c04 	.word	0x20001c04
 8010a68:	20001c00 	.word	0x20001c00
 8010a6c:	20001bec 	.word	0x20001bec
 8010a70:	20001be4 	.word	0x20001be4

08010a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a74:	b480      	push	{r7}
 8010a76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010a78:	4b04      	ldr	r3, [pc, #16]	@ (8010a8c <vTaskSuspendAll+0x18>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	4a03      	ldr	r2, [pc, #12]	@ (8010a8c <vTaskSuspendAll+0x18>)
 8010a80:	6013      	str	r3, [r2, #0]
}
 8010a82:	bf00      	nop
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bc80      	pop	{r7}
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	20001c08 	.word	0x20001c08

08010a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a96:	2300      	movs	r3, #0
 8010a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a9e:	4b42      	ldr	r3, [pc, #264]	@ (8010ba8 <xTaskResumeAll+0x118>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d10b      	bne.n	8010abe <xTaskResumeAll+0x2e>
	__asm volatile
 8010aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	603b      	str	r3, [r7, #0]
}
 8010ab8:	bf00      	nop
 8010aba:	bf00      	nop
 8010abc:	e7fd      	b.n	8010aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010abe:	f000 ff05 	bl	80118cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010ac2:	4b39      	ldr	r3, [pc, #228]	@ (8010ba8 <xTaskResumeAll+0x118>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	4a37      	ldr	r2, [pc, #220]	@ (8010ba8 <xTaskResumeAll+0x118>)
 8010aca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010acc:	4b36      	ldr	r3, [pc, #216]	@ (8010ba8 <xTaskResumeAll+0x118>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d161      	bne.n	8010b98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ad4:	4b35      	ldr	r3, [pc, #212]	@ (8010bac <xTaskResumeAll+0x11c>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d05d      	beq.n	8010b98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010adc:	e02e      	b.n	8010b3c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010ade:	4b34      	ldr	r3, [pc, #208]	@ (8010bb0 <xTaskResumeAll+0x120>)
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3318      	adds	r3, #24
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fe fddf 	bl	800f6ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	3304      	adds	r3, #4
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fe fdda 	bl	800f6ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010afe:	2201      	movs	r2, #1
 8010b00:	409a      	lsls	r2, r3
 8010b02:	4b2c      	ldr	r3, [pc, #176]	@ (8010bb4 <xTaskResumeAll+0x124>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4313      	orrs	r3, r2
 8010b08:	4a2a      	ldr	r2, [pc, #168]	@ (8010bb4 <xTaskResumeAll+0x124>)
 8010b0a:	6013      	str	r3, [r2, #0]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b10:	4613      	mov	r3, r2
 8010b12:	009b      	lsls	r3, r3, #2
 8010b14:	4413      	add	r3, r2
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	4a27      	ldr	r2, [pc, #156]	@ (8010bb8 <xTaskResumeAll+0x128>)
 8010b1a:	441a      	add	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3304      	adds	r3, #4
 8010b20:	4619      	mov	r1, r3
 8010b22:	4610      	mov	r0, r2
 8010b24:	f7fe fd68 	bl	800f5f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b2c:	4b23      	ldr	r3, [pc, #140]	@ (8010bbc <xTaskResumeAll+0x12c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d302      	bcc.n	8010b3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010b36:	4b22      	ldr	r3, [pc, #136]	@ (8010bc0 <xTaskResumeAll+0x130>)
 8010b38:	2201      	movs	r2, #1
 8010b3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8010bb0 <xTaskResumeAll+0x120>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1cc      	bne.n	8010ade <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010b4a:	f000 fb65 	bl	8011218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8010bc4 <xTaskResumeAll+0x134>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d010      	beq.n	8010b7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010b5a:	f000 f845 	bl	8010be8 <xTaskIncrementTick>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010b64:	4b16      	ldr	r3, [pc, #88]	@ (8010bc0 <xTaskResumeAll+0x130>)
 8010b66:	2201      	movs	r2, #1
 8010b68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1f1      	bne.n	8010b5a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8010b76:	4b13      	ldr	r3, [pc, #76]	@ (8010bc4 <xTaskResumeAll+0x134>)
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b7c:	4b10      	ldr	r3, [pc, #64]	@ (8010bc0 <xTaskResumeAll+0x130>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d009      	beq.n	8010b98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b84:	2301      	movs	r3, #1
 8010b86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b88:	4b0f      	ldr	r3, [pc, #60]	@ (8010bc8 <xTaskResumeAll+0x138>)
 8010b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b8e:	601a      	str	r2, [r3, #0]
 8010b90:	f3bf 8f4f 	dsb	sy
 8010b94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b98:	f000 fec8 	bl	801192c <vPortExitCritical>

	return xAlreadyYielded;
 8010b9c:	68bb      	ldr	r3, [r7, #8]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20001c08 	.word	0x20001c08
 8010bac:	20001be0 	.word	0x20001be0
 8010bb0:	20001ba0 	.word	0x20001ba0
 8010bb4:	20001be8 	.word	0x20001be8
 8010bb8:	20001ae4 	.word	0x20001ae4
 8010bbc:	20001ae0 	.word	0x20001ae0
 8010bc0:	20001bf4 	.word	0x20001bf4
 8010bc4:	20001bf0 	.word	0x20001bf0
 8010bc8:	e000ed04 	.word	0xe000ed04

08010bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010bd2:	4b04      	ldr	r3, [pc, #16]	@ (8010be4 <xTaskGetTickCount+0x18>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010bd8:	687b      	ldr	r3, [r7, #4]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	370c      	adds	r7, #12
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bc80      	pop	{r7}
 8010be2:	4770      	bx	lr
 8010be4:	20001be4 	.word	0x20001be4

08010be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b086      	sub	sp, #24
 8010bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bf2:	4b51      	ldr	r3, [pc, #324]	@ (8010d38 <xTaskIncrementTick+0x150>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f040 808e 	bne.w	8010d18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8010d3c <xTaskIncrementTick+0x154>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	3301      	adds	r3, #1
 8010c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010c04:	4a4d      	ldr	r2, [pc, #308]	@ (8010d3c <xTaskIncrementTick+0x154>)
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d121      	bne.n	8010c54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010c10:	4b4b      	ldr	r3, [pc, #300]	@ (8010d40 <xTaskIncrementTick+0x158>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00b      	beq.n	8010c32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c1e:	f383 8811 	msr	BASEPRI, r3
 8010c22:	f3bf 8f6f 	isb	sy
 8010c26:	f3bf 8f4f 	dsb	sy
 8010c2a:	603b      	str	r3, [r7, #0]
}
 8010c2c:	bf00      	nop
 8010c2e:	bf00      	nop
 8010c30:	e7fd      	b.n	8010c2e <xTaskIncrementTick+0x46>
 8010c32:	4b43      	ldr	r3, [pc, #268]	@ (8010d40 <xTaskIncrementTick+0x158>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	4b42      	ldr	r3, [pc, #264]	@ (8010d44 <xTaskIncrementTick+0x15c>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4a40      	ldr	r2, [pc, #256]	@ (8010d40 <xTaskIncrementTick+0x158>)
 8010c3e:	6013      	str	r3, [r2, #0]
 8010c40:	4a40      	ldr	r2, [pc, #256]	@ (8010d44 <xTaskIncrementTick+0x15c>)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	6013      	str	r3, [r2, #0]
 8010c46:	4b40      	ldr	r3, [pc, #256]	@ (8010d48 <xTaskIncrementTick+0x160>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8010d48 <xTaskIncrementTick+0x160>)
 8010c4e:	6013      	str	r3, [r2, #0]
 8010c50:	f000 fae2 	bl	8011218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010c54:	4b3d      	ldr	r3, [pc, #244]	@ (8010d4c <xTaskIncrementTick+0x164>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	693a      	ldr	r2, [r7, #16]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d34d      	bcc.n	8010cfa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c5e:	4b38      	ldr	r3, [pc, #224]	@ (8010d40 <xTaskIncrementTick+0x158>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d101      	bne.n	8010c6c <xTaskIncrementTick+0x84>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e000      	b.n	8010c6e <xTaskIncrementTick+0x86>
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d004      	beq.n	8010c7c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c72:	4b36      	ldr	r3, [pc, #216]	@ (8010d4c <xTaskIncrementTick+0x164>)
 8010c74:	f04f 32ff 	mov.w	r2, #4294967295
 8010c78:	601a      	str	r2, [r3, #0]
					break;
 8010c7a:	e03e      	b.n	8010cfa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010c7c:	4b30      	ldr	r3, [pc, #192]	@ (8010d40 <xTaskIncrementTick+0x158>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c8c:	693a      	ldr	r2, [r7, #16]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d203      	bcs.n	8010c9c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c94:	4a2d      	ldr	r2, [pc, #180]	@ (8010d4c <xTaskIncrementTick+0x164>)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6013      	str	r3, [r2, #0]
						break;
 8010c9a:	e02e      	b.n	8010cfa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe fd04 	bl	800f6ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d004      	beq.n	8010cb8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	3318      	adds	r3, #24
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fe fcfb 	bl	800f6ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	409a      	lsls	r2, r3
 8010cc0:	4b23      	ldr	r3, [pc, #140]	@ (8010d50 <xTaskIncrementTick+0x168>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	4a22      	ldr	r2, [pc, #136]	@ (8010d50 <xTaskIncrementTick+0x168>)
 8010cc8:	6013      	str	r3, [r2, #0]
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cce:	4613      	mov	r3, r2
 8010cd0:	009b      	lsls	r3, r3, #2
 8010cd2:	4413      	add	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8010d54 <xTaskIncrementTick+0x16c>)
 8010cd8:	441a      	add	r2, r3
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	3304      	adds	r3, #4
 8010cde:	4619      	mov	r1, r3
 8010ce0:	4610      	mov	r0, r2
 8010ce2:	f7fe fc89 	bl	800f5f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cea:	4b1b      	ldr	r3, [pc, #108]	@ (8010d58 <xTaskIncrementTick+0x170>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d3b4      	bcc.n	8010c5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cf8:	e7b1      	b.n	8010c5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010cfa:	4b17      	ldr	r3, [pc, #92]	@ (8010d58 <xTaskIncrementTick+0x170>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d00:	4914      	ldr	r1, [pc, #80]	@ (8010d54 <xTaskIncrementTick+0x16c>)
 8010d02:	4613      	mov	r3, r2
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	440b      	add	r3, r1
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d907      	bls.n	8010d22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010d12:	2301      	movs	r3, #1
 8010d14:	617b      	str	r3, [r7, #20]
 8010d16:	e004      	b.n	8010d22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010d18:	4b10      	ldr	r3, [pc, #64]	@ (8010d5c <xTaskIncrementTick+0x174>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8010d5c <xTaskIncrementTick+0x174>)
 8010d20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010d22:	4b0f      	ldr	r3, [pc, #60]	@ (8010d60 <xTaskIncrementTick+0x178>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d001      	beq.n	8010d2e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010d2e:	697b      	ldr	r3, [r7, #20]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3718      	adds	r7, #24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	20001c08 	.word	0x20001c08
 8010d3c:	20001be4 	.word	0x20001be4
 8010d40:	20001b98 	.word	0x20001b98
 8010d44:	20001b9c 	.word	0x20001b9c
 8010d48:	20001bf8 	.word	0x20001bf8
 8010d4c:	20001c00 	.word	0x20001c00
 8010d50:	20001be8 	.word	0x20001be8
 8010d54:	20001ae4 	.word	0x20001ae4
 8010d58:	20001ae0 	.word	0x20001ae0
 8010d5c:	20001bf0 	.word	0x20001bf0
 8010d60:	20001bf4 	.word	0x20001bf4

08010d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d64:	b480      	push	{r7}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d6a:	4b27      	ldr	r3, [pc, #156]	@ (8010e08 <vTaskSwitchContext+0xa4>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d72:	4b26      	ldr	r3, [pc, #152]	@ (8010e0c <vTaskSwitchContext+0xa8>)
 8010d74:	2201      	movs	r2, #1
 8010d76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d78:	e040      	b.n	8010dfc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010d7a:	4b24      	ldr	r3, [pc, #144]	@ (8010e0c <vTaskSwitchContext+0xa8>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010d80:	4b23      	ldr	r3, [pc, #140]	@ (8010e10 <vTaskSwitchContext+0xac>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	fab3 f383 	clz	r3, r3
 8010d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010d8e:	7afb      	ldrb	r3, [r7, #11]
 8010d90:	f1c3 031f 	rsb	r3, r3, #31
 8010d94:	617b      	str	r3, [r7, #20]
 8010d96:	491f      	ldr	r1, [pc, #124]	@ (8010e14 <vTaskSwitchContext+0xb0>)
 8010d98:	697a      	ldr	r2, [r7, #20]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	4413      	add	r3, r2
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	440b      	add	r3, r1
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d10b      	bne.n	8010dc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8010daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	607b      	str	r3, [r7, #4]
}
 8010dbc:	bf00      	nop
 8010dbe:	bf00      	nop
 8010dc0:	e7fd      	b.n	8010dbe <vTaskSwitchContext+0x5a>
 8010dc2:	697a      	ldr	r2, [r7, #20]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	4413      	add	r3, r2
 8010dca:	009b      	lsls	r3, r3, #2
 8010dcc:	4a11      	ldr	r2, [pc, #68]	@ (8010e14 <vTaskSwitchContext+0xb0>)
 8010dce:	4413      	add	r3, r2
 8010dd0:	613b      	str	r3, [r7, #16]
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	685a      	ldr	r2, [r3, #4]
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	605a      	str	r2, [r3, #4]
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	685a      	ldr	r2, [r3, #4]
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	3308      	adds	r3, #8
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d104      	bne.n	8010df2 <vTaskSwitchContext+0x8e>
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	605a      	str	r2, [r3, #4]
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	4a07      	ldr	r2, [pc, #28]	@ (8010e18 <vTaskSwitchContext+0xb4>)
 8010dfa:	6013      	str	r3, [r2, #0]
}
 8010dfc:	bf00      	nop
 8010dfe:	371c      	adds	r7, #28
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bc80      	pop	{r7}
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	20001c08 	.word	0x20001c08
 8010e0c:	20001bf4 	.word	0x20001bf4
 8010e10:	20001be8 	.word	0x20001be8
 8010e14:	20001ae4 	.word	0x20001ae4
 8010e18:	20001ae0 	.word	0x20001ae0

08010e1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d10b      	bne.n	8010e44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e30:	f383 8811 	msr	BASEPRI, r3
 8010e34:	f3bf 8f6f 	isb	sy
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	60fb      	str	r3, [r7, #12]
}
 8010e3e:	bf00      	nop
 8010e40:	bf00      	nop
 8010e42:	e7fd      	b.n	8010e40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e44:	4b07      	ldr	r3, [pc, #28]	@ (8010e64 <vTaskPlaceOnEventList+0x48>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	3318      	adds	r3, #24
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f7fe fbf6 	bl	800f63e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e52:	2101      	movs	r1, #1
 8010e54:	6838      	ldr	r0, [r7, #0]
 8010e56:	f000 fbe5 	bl	8011624 <prvAddCurrentTaskToDelayedList>
}
 8010e5a:	bf00      	nop
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20001ae0 	.word	0x20001ae0

08010e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10b      	bne.n	8010e96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	60fb      	str	r3, [r7, #12]
}
 8010e90:	bf00      	nop
 8010e92:	bf00      	nop
 8010e94:	e7fd      	b.n	8010e92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	3318      	adds	r3, #24
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fe fc07 	bl	800f6ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8010f18 <xTaskRemoveFromEventList+0xb0>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d11c      	bne.n	8010ee2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ea8:	693b      	ldr	r3, [r7, #16]
 8010eaa:	3304      	adds	r3, #4
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fe fbfe 	bl	800f6ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	409a      	lsls	r2, r3
 8010eba:	4b18      	ldr	r3, [pc, #96]	@ (8010f1c <xTaskRemoveFromEventList+0xb4>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	4a16      	ldr	r2, [pc, #88]	@ (8010f1c <xTaskRemoveFromEventList+0xb4>)
 8010ec2:	6013      	str	r3, [r2, #0]
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ec8:	4613      	mov	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4a13      	ldr	r2, [pc, #76]	@ (8010f20 <xTaskRemoveFromEventList+0xb8>)
 8010ed2:	441a      	add	r2, r3
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	3304      	adds	r3, #4
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4610      	mov	r0, r2
 8010edc:	f7fe fb8c 	bl	800f5f8 <vListInsertEnd>
 8010ee0:	e005      	b.n	8010eee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	3318      	adds	r3, #24
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	480e      	ldr	r0, [pc, #56]	@ (8010f24 <xTaskRemoveFromEventList+0xbc>)
 8010eea:	f7fe fb85 	bl	800f5f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8010f28 <xTaskRemoveFromEventList+0xc0>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d905      	bls.n	8010f08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010efc:	2301      	movs	r3, #1
 8010efe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f00:	4b0a      	ldr	r3, [pc, #40]	@ (8010f2c <xTaskRemoveFromEventList+0xc4>)
 8010f02:	2201      	movs	r2, #1
 8010f04:	601a      	str	r2, [r3, #0]
 8010f06:	e001      	b.n	8010f0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010f0c:	697b      	ldr	r3, [r7, #20]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3718      	adds	r7, #24
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	20001c08 	.word	0x20001c08
 8010f1c:	20001be8 	.word	0x20001be8
 8010f20:	20001ae4 	.word	0x20001ae4
 8010f24:	20001ba0 	.word	0x20001ba0
 8010f28:	20001ae0 	.word	0x20001ae0
 8010f2c:	20001bf4 	.word	0x20001bf4

08010f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f38:	4b06      	ldr	r3, [pc, #24]	@ (8010f54 <vTaskInternalSetTimeOutState+0x24>)
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f40:	4b05      	ldr	r3, [pc, #20]	@ (8010f58 <vTaskInternalSetTimeOutState+0x28>)
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	605a      	str	r2, [r3, #4]
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bc80      	pop	{r7}
 8010f50:	4770      	bx	lr
 8010f52:	bf00      	nop
 8010f54:	20001bf8 	.word	0x20001bf8
 8010f58:	20001be4 	.word	0x20001be4

08010f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b088      	sub	sp, #32
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d10b      	bne.n	8010f84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f70:	f383 8811 	msr	BASEPRI, r3
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	613b      	str	r3, [r7, #16]
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	e7fd      	b.n	8010f80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10b      	bne.n	8010fa2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	60fb      	str	r3, [r7, #12]
}
 8010f9c:	bf00      	nop
 8010f9e:	bf00      	nop
 8010fa0:	e7fd      	b.n	8010f9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010fa2:	f000 fc93 	bl	80118cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010fa6:	4b1d      	ldr	r3, [pc, #116]	@ (801101c <xTaskCheckForTimeOut+0xc0>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	69ba      	ldr	r2, [r7, #24]
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fbe:	d102      	bne.n	8010fc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	61fb      	str	r3, [r7, #28]
 8010fc4:	e023      	b.n	801100e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	4b15      	ldr	r3, [pc, #84]	@ (8011020 <xTaskCheckForTimeOut+0xc4>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d007      	beq.n	8010fe2 <xTaskCheckForTimeOut+0x86>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	69ba      	ldr	r2, [r7, #24]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d302      	bcc.n	8010fe2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	61fb      	str	r3, [r7, #28]
 8010fe0:	e015      	b.n	801100e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	697a      	ldr	r2, [r7, #20]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d20b      	bcs.n	8011004 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	1ad2      	subs	r2, r2, r3
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff ff99 	bl	8010f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ffe:	2300      	movs	r3, #0
 8011000:	61fb      	str	r3, [r7, #28]
 8011002:	e004      	b.n	801100e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	2200      	movs	r2, #0
 8011008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801100a:	2301      	movs	r3, #1
 801100c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801100e:	f000 fc8d 	bl	801192c <vPortExitCritical>

	return xReturn;
 8011012:	69fb      	ldr	r3, [r7, #28]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3720      	adds	r7, #32
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	20001be4 	.word	0x20001be4
 8011020:	20001bf8 	.word	0x20001bf8

08011024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011024:	b480      	push	{r7}
 8011026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011028:	4b03      	ldr	r3, [pc, #12]	@ (8011038 <vTaskMissedYield+0x14>)
 801102a:	2201      	movs	r2, #1
 801102c:	601a      	str	r2, [r3, #0]
}
 801102e:	bf00      	nop
 8011030:	46bd      	mov	sp, r7
 8011032:	bc80      	pop	{r7}
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	20001bf4 	.word	0x20001bf4

0801103c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011044:	f000 f852 	bl	80110ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011048:	4b06      	ldr	r3, [pc, #24]	@ (8011064 <prvIdleTask+0x28>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d9f9      	bls.n	8011044 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011050:	4b05      	ldr	r3, [pc, #20]	@ (8011068 <prvIdleTask+0x2c>)
 8011052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011060:	e7f0      	b.n	8011044 <prvIdleTask+0x8>
 8011062:	bf00      	nop
 8011064:	20001ae4 	.word	0x20001ae4
 8011068:	e000ed04 	.word	0xe000ed04

0801106c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011072:	2300      	movs	r3, #0
 8011074:	607b      	str	r3, [r7, #4]
 8011076:	e00c      	b.n	8011092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	4613      	mov	r3, r2
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	4413      	add	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	4a12      	ldr	r2, [pc, #72]	@ (80110cc <prvInitialiseTaskLists+0x60>)
 8011084:	4413      	add	r3, r2
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fa8b 	bl	800f5a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3301      	adds	r3, #1
 8011090:	607b      	str	r3, [r7, #4]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b06      	cmp	r3, #6
 8011096:	d9ef      	bls.n	8011078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011098:	480d      	ldr	r0, [pc, #52]	@ (80110d0 <prvInitialiseTaskLists+0x64>)
 801109a:	f7fe fa82 	bl	800f5a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801109e:	480d      	ldr	r0, [pc, #52]	@ (80110d4 <prvInitialiseTaskLists+0x68>)
 80110a0:	f7fe fa7f 	bl	800f5a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80110a4:	480c      	ldr	r0, [pc, #48]	@ (80110d8 <prvInitialiseTaskLists+0x6c>)
 80110a6:	f7fe fa7c 	bl	800f5a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80110aa:	480c      	ldr	r0, [pc, #48]	@ (80110dc <prvInitialiseTaskLists+0x70>)
 80110ac:	f7fe fa79 	bl	800f5a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80110b0:	480b      	ldr	r0, [pc, #44]	@ (80110e0 <prvInitialiseTaskLists+0x74>)
 80110b2:	f7fe fa76 	bl	800f5a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80110b6:	4b0b      	ldr	r3, [pc, #44]	@ (80110e4 <prvInitialiseTaskLists+0x78>)
 80110b8:	4a05      	ldr	r2, [pc, #20]	@ (80110d0 <prvInitialiseTaskLists+0x64>)
 80110ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80110bc:	4b0a      	ldr	r3, [pc, #40]	@ (80110e8 <prvInitialiseTaskLists+0x7c>)
 80110be:	4a05      	ldr	r2, [pc, #20]	@ (80110d4 <prvInitialiseTaskLists+0x68>)
 80110c0:	601a      	str	r2, [r3, #0]
}
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	20001ae4 	.word	0x20001ae4
 80110d0:	20001b70 	.word	0x20001b70
 80110d4:	20001b84 	.word	0x20001b84
 80110d8:	20001ba0 	.word	0x20001ba0
 80110dc:	20001bb4 	.word	0x20001bb4
 80110e0:	20001bcc 	.word	0x20001bcc
 80110e4:	20001b98 	.word	0x20001b98
 80110e8:	20001b9c 	.word	0x20001b9c

080110ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80110f2:	e019      	b.n	8011128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80110f4:	f000 fbea 	bl	80118cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80110f8:	4b10      	ldr	r3, [pc, #64]	@ (801113c <prvCheckTasksWaitingTermination+0x50>)
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	3304      	adds	r3, #4
 8011104:	4618      	mov	r0, r3
 8011106:	f7fe fad2 	bl	800f6ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 801110a:	4b0d      	ldr	r3, [pc, #52]	@ (8011140 <prvCheckTasksWaitingTermination+0x54>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	3b01      	subs	r3, #1
 8011110:	4a0b      	ldr	r2, [pc, #44]	@ (8011140 <prvCheckTasksWaitingTermination+0x54>)
 8011112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011114:	4b0b      	ldr	r3, [pc, #44]	@ (8011144 <prvCheckTasksWaitingTermination+0x58>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	3b01      	subs	r3, #1
 801111a:	4a0a      	ldr	r2, [pc, #40]	@ (8011144 <prvCheckTasksWaitingTermination+0x58>)
 801111c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801111e:	f000 fc05 	bl	801192c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 f848 	bl	80111b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011128:	4b06      	ldr	r3, [pc, #24]	@ (8011144 <prvCheckTasksWaitingTermination+0x58>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1e1      	bne.n	80110f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011130:	bf00      	nop
 8011132:	bf00      	nop
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	20001bb4 	.word	0x20001bb4
 8011140:	20001be0 	.word	0x20001be0
 8011144:	20001bc8 	.word	0x20001bc8

08011148 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011148:	b480      	push	{r7}
 801114a:	b085      	sub	sp, #20
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8011150:	2300      	movs	r3, #0
 8011152:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011154:	e005      	b.n	8011162 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	3301      	adds	r3, #1
 801115a:	607b      	str	r3, [r7, #4]
			ulCount++;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	3301      	adds	r3, #1
 8011160:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	2ba5      	cmp	r3, #165	@ 0xa5
 8011168:	d0f5      	beq.n	8011156 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	089b      	lsrs	r3, r3, #2
 801116e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	b29b      	uxth	r3, r3
	}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	bc80      	pop	{r7}
 801117c:	4770      	bx	lr
	...

08011180 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8011180:	b580      	push	{r7, lr}
 8011182:	b086      	sub	sp, #24
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d102      	bne.n	8011194 <uxTaskGetStackHighWaterMark+0x14>
 801118e:	4b09      	ldr	r3, [pc, #36]	@ (80111b4 <uxTaskGetStackHighWaterMark+0x34>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	e000      	b.n	8011196 <uxTaskGetStackHighWaterMark+0x16>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801119c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801119e:	6938      	ldr	r0, [r7, #16]
 80111a0:	f7ff ffd2 	bl	8011148 <prvTaskCheckFreeStackSpace>
 80111a4:	4603      	mov	r3, r0
 80111a6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80111a8:	68fb      	ldr	r3, [r7, #12]
	}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3718      	adds	r7, #24
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20001ae0 	.word	0x20001ae0

080111b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d108      	bne.n	80111dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111ce:	4618      	mov	r0, r3
 80111d0:	f000 fd46 	bl	8011c60 <vPortFree>
				vPortFree( pxTCB );
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fd43 	bl	8011c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80111da:	e019      	b.n	8011210 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80111e2:	2b01      	cmp	r3, #1
 80111e4:	d103      	bne.n	80111ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fd3a 	bl	8011c60 <vPortFree>
	}
 80111ec:	e010      	b.n	8011210 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d00b      	beq.n	8011210 <prvDeleteTCB+0x58>
	__asm volatile
 80111f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	60fb      	str	r3, [r7, #12]
}
 801120a:	bf00      	nop
 801120c:	bf00      	nop
 801120e:	e7fd      	b.n	801120c <prvDeleteTCB+0x54>
	}
 8011210:	bf00      	nop
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801121e:	4b0e      	ldr	r3, [pc, #56]	@ (8011258 <prvResetNextTaskUnblockTime+0x40>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d101      	bne.n	801122c <prvResetNextTaskUnblockTime+0x14>
 8011228:	2301      	movs	r3, #1
 801122a:	e000      	b.n	801122e <prvResetNextTaskUnblockTime+0x16>
 801122c:	2300      	movs	r3, #0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d004      	beq.n	801123c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011232:	4b0a      	ldr	r3, [pc, #40]	@ (801125c <prvResetNextTaskUnblockTime+0x44>)
 8011234:	f04f 32ff 	mov.w	r2, #4294967295
 8011238:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801123a:	e008      	b.n	801124e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801123c:	4b06      	ldr	r3, [pc, #24]	@ (8011258 <prvResetNextTaskUnblockTime+0x40>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	4a04      	ldr	r2, [pc, #16]	@ (801125c <prvResetNextTaskUnblockTime+0x44>)
 801124c:	6013      	str	r3, [r2, #0]
}
 801124e:	bf00      	nop
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	bc80      	pop	{r7}
 8011256:	4770      	bx	lr
 8011258:	20001b98 	.word	0x20001b98
 801125c:	20001c00 	.word	0x20001c00

08011260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011266:	4b0b      	ldr	r3, [pc, #44]	@ (8011294 <xTaskGetSchedulerState+0x34>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d102      	bne.n	8011274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801126e:	2301      	movs	r3, #1
 8011270:	607b      	str	r3, [r7, #4]
 8011272:	e008      	b.n	8011286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011274:	4b08      	ldr	r3, [pc, #32]	@ (8011298 <xTaskGetSchedulerState+0x38>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801127c:	2302      	movs	r3, #2
 801127e:	607b      	str	r3, [r7, #4]
 8011280:	e001      	b.n	8011286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011282:	2300      	movs	r3, #0
 8011284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011286:	687b      	ldr	r3, [r7, #4]
	}
 8011288:	4618      	mov	r0, r3
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	bc80      	pop	{r7}
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	20001bec 	.word	0x20001bec
 8011298:	20001c08 	.word	0x20001c08

0801129c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80112a8:	2300      	movs	r3, #0
 80112aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d06e      	beq.n	8011390 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112b6:	4b39      	ldr	r3, [pc, #228]	@ (801139c <xTaskPriorityInherit+0x100>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112bc:	429a      	cmp	r2, r3
 80112be:	d25e      	bcs.n	801137e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	699b      	ldr	r3, [r3, #24]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	db06      	blt.n	80112d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112c8:	4b34      	ldr	r3, [pc, #208]	@ (801139c <xTaskPriorityInherit+0x100>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ce:	f1c3 0207 	rsb	r2, r3, #7
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	6959      	ldr	r1, [r3, #20]
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112de:	4613      	mov	r3, r2
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	4413      	add	r3, r2
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	4a2e      	ldr	r2, [pc, #184]	@ (80113a0 <xTaskPriorityInherit+0x104>)
 80112e8:	4413      	add	r3, r2
 80112ea:	4299      	cmp	r1, r3
 80112ec:	d101      	bne.n	80112f2 <xTaskPriorityInherit+0x56>
 80112ee:	2301      	movs	r3, #1
 80112f0:	e000      	b.n	80112f4 <xTaskPriorityInherit+0x58>
 80112f2:	2300      	movs	r3, #0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d03a      	beq.n	801136e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	3304      	adds	r3, #4
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7fe f9d6 	bl	800f6ae <uxListRemove>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d115      	bne.n	8011334 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801130c:	4924      	ldr	r1, [pc, #144]	@ (80113a0 <xTaskPriorityInherit+0x104>)
 801130e:	4613      	mov	r3, r2
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	4413      	add	r3, r2
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	440b      	add	r3, r1
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d10a      	bne.n	8011334 <xTaskPriorityInherit+0x98>
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011322:	2201      	movs	r2, #1
 8011324:	fa02 f303 	lsl.w	r3, r2, r3
 8011328:	43da      	mvns	r2, r3
 801132a:	4b1e      	ldr	r3, [pc, #120]	@ (80113a4 <xTaskPriorityInherit+0x108>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4013      	ands	r3, r2
 8011330:	4a1c      	ldr	r2, [pc, #112]	@ (80113a4 <xTaskPriorityInherit+0x108>)
 8011332:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011334:	4b19      	ldr	r3, [pc, #100]	@ (801139c <xTaskPriorityInherit+0x100>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011342:	2201      	movs	r2, #1
 8011344:	409a      	lsls	r2, r3
 8011346:	4b17      	ldr	r3, [pc, #92]	@ (80113a4 <xTaskPriorityInherit+0x108>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4313      	orrs	r3, r2
 801134c:	4a15      	ldr	r2, [pc, #84]	@ (80113a4 <xTaskPriorityInherit+0x108>)
 801134e:	6013      	str	r3, [r2, #0]
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011354:	4613      	mov	r3, r2
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	4413      	add	r3, r2
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	4a10      	ldr	r2, [pc, #64]	@ (80113a0 <xTaskPriorityInherit+0x104>)
 801135e:	441a      	add	r2, r3
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	3304      	adds	r3, #4
 8011364:	4619      	mov	r1, r3
 8011366:	4610      	mov	r0, r2
 8011368:	f7fe f946 	bl	800f5f8 <vListInsertEnd>
 801136c:	e004      	b.n	8011378 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801136e:	4b0b      	ldr	r3, [pc, #44]	@ (801139c <xTaskPriorityInherit+0x100>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011378:	2301      	movs	r3, #1
 801137a:	60fb      	str	r3, [r7, #12]
 801137c:	e008      	b.n	8011390 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011382:	4b06      	ldr	r3, [pc, #24]	@ (801139c <xTaskPriorityInherit+0x100>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011388:	429a      	cmp	r2, r3
 801138a:	d201      	bcs.n	8011390 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801138c:	2301      	movs	r3, #1
 801138e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011390:	68fb      	ldr	r3, [r7, #12]
	}
 8011392:	4618      	mov	r0, r3
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	20001ae0 	.word	0x20001ae0
 80113a0:	20001ae4 	.word	0x20001ae4
 80113a4:	20001be8 	.word	0x20001be8

080113a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80113b4:	2300      	movs	r3, #0
 80113b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d070      	beq.n	80114a0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80113be:	4b3b      	ldr	r3, [pc, #236]	@ (80114ac <xTaskPriorityDisinherit+0x104>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	693a      	ldr	r2, [r7, #16]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d00b      	beq.n	80113e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80113c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113cc:	f383 8811 	msr	BASEPRI, r3
 80113d0:	f3bf 8f6f 	isb	sy
 80113d4:	f3bf 8f4f 	dsb	sy
 80113d8:	60fb      	str	r3, [r7, #12]
}
 80113da:	bf00      	nop
 80113dc:	bf00      	nop
 80113de:	e7fd      	b.n	80113dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10b      	bne.n	8011400 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80113e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ec:	f383 8811 	msr	BASEPRI, r3
 80113f0:	f3bf 8f6f 	isb	sy
 80113f4:	f3bf 8f4f 	dsb	sy
 80113f8:	60bb      	str	r3, [r7, #8]
}
 80113fa:	bf00      	nop
 80113fc:	bf00      	nop
 80113fe:	e7fd      	b.n	80113fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011404:	1e5a      	subs	r2, r3, #1
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011412:	429a      	cmp	r2, r3
 8011414:	d044      	beq.n	80114a0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801141a:	2b00      	cmp	r3, #0
 801141c:	d140      	bne.n	80114a0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	3304      	adds	r3, #4
 8011422:	4618      	mov	r0, r3
 8011424:	f7fe f943 	bl	800f6ae <uxListRemove>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d115      	bne.n	801145a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011432:	491f      	ldr	r1, [pc, #124]	@ (80114b0 <xTaskPriorityDisinherit+0x108>)
 8011434:	4613      	mov	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	440b      	add	r3, r1
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d10a      	bne.n	801145a <xTaskPriorityDisinherit+0xb2>
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011448:	2201      	movs	r2, #1
 801144a:	fa02 f303 	lsl.w	r3, r2, r3
 801144e:	43da      	mvns	r2, r3
 8011450:	4b18      	ldr	r3, [pc, #96]	@ (80114b4 <xTaskPriorityDisinherit+0x10c>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4013      	ands	r3, r2
 8011456:	4a17      	ldr	r2, [pc, #92]	@ (80114b4 <xTaskPriorityDisinherit+0x10c>)
 8011458:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011466:	f1c3 0207 	rsb	r2, r3, #7
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011472:	2201      	movs	r2, #1
 8011474:	409a      	lsls	r2, r3
 8011476:	4b0f      	ldr	r3, [pc, #60]	@ (80114b4 <xTaskPriorityDisinherit+0x10c>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4313      	orrs	r3, r2
 801147c:	4a0d      	ldr	r2, [pc, #52]	@ (80114b4 <xTaskPriorityDisinherit+0x10c>)
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011484:	4613      	mov	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	4413      	add	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4a08      	ldr	r2, [pc, #32]	@ (80114b0 <xTaskPriorityDisinherit+0x108>)
 801148e:	441a      	add	r2, r3
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	3304      	adds	r3, #4
 8011494:	4619      	mov	r1, r3
 8011496:	4610      	mov	r0, r2
 8011498:	f7fe f8ae 	bl	800f5f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801149c:	2301      	movs	r3, #1
 801149e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80114a0:	697b      	ldr	r3, [r7, #20]
	}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3718      	adds	r7, #24
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	20001ae0 	.word	0x20001ae0
 80114b0:	20001ae4 	.word	0x20001ae4
 80114b4:	20001be8 	.word	0x20001be8

080114b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b088      	sub	sp, #32
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80114c6:	2301      	movs	r3, #1
 80114c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	f000 808a 	beq.w	80115e6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80114d2:	69bb      	ldr	r3, [r7, #24]
 80114d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10b      	bne.n	80114f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80114da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114de:	f383 8811 	msr	BASEPRI, r3
 80114e2:	f3bf 8f6f 	isb	sy
 80114e6:	f3bf 8f4f 	dsb	sy
 80114ea:	60fb      	str	r3, [r7, #12]
}
 80114ec:	bf00      	nop
 80114ee:	bf00      	nop
 80114f0:	e7fd      	b.n	80114ee <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114f6:	683a      	ldr	r2, [r7, #0]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d902      	bls.n	8011502 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	61fb      	str	r3, [r7, #28]
 8011500:	e002      	b.n	8011508 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011506:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801150c:	69fa      	ldr	r2, [r7, #28]
 801150e:	429a      	cmp	r2, r3
 8011510:	d069      	beq.n	80115e6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011516:	697a      	ldr	r2, [r7, #20]
 8011518:	429a      	cmp	r2, r3
 801151a:	d164      	bne.n	80115e6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801151c:	4b34      	ldr	r3, [pc, #208]	@ (80115f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	69ba      	ldr	r2, [r7, #24]
 8011522:	429a      	cmp	r2, r3
 8011524:	d10b      	bne.n	801153e <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8011526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801152a:	f383 8811 	msr	BASEPRI, r3
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f3bf 8f4f 	dsb	sy
 8011536:	60bb      	str	r3, [r7, #8]
}
 8011538:	bf00      	nop
 801153a:	bf00      	nop
 801153c:	e7fd      	b.n	801153a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011542:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	69fa      	ldr	r2, [r7, #28]
 8011548:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	699b      	ldr	r3, [r3, #24]
 801154e:	2b00      	cmp	r3, #0
 8011550:	db04      	blt.n	801155c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011552:	69fb      	ldr	r3, [r7, #28]
 8011554:	f1c3 0207 	rsb	r2, r3, #7
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	6959      	ldr	r1, [r3, #20]
 8011560:	693a      	ldr	r2, [r7, #16]
 8011562:	4613      	mov	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4a22      	ldr	r2, [pc, #136]	@ (80115f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801156c:	4413      	add	r3, r2
 801156e:	4299      	cmp	r1, r3
 8011570:	d101      	bne.n	8011576 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8011572:	2301      	movs	r3, #1
 8011574:	e000      	b.n	8011578 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8011576:	2300      	movs	r3, #0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d034      	beq.n	80115e6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	3304      	adds	r3, #4
 8011580:	4618      	mov	r0, r3
 8011582:	f7fe f894 	bl	800f6ae <uxListRemove>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	d115      	bne.n	80115b8 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011590:	4918      	ldr	r1, [pc, #96]	@ (80115f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011592:	4613      	mov	r3, r2
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	4413      	add	r3, r2
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	440b      	add	r3, r1
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d10a      	bne.n	80115b8 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115a6:	2201      	movs	r2, #1
 80115a8:	fa02 f303 	lsl.w	r3, r2, r3
 80115ac:	43da      	mvns	r2, r3
 80115ae:	4b12      	ldr	r3, [pc, #72]	@ (80115f8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	4013      	ands	r3, r2
 80115b4:	4a10      	ldr	r2, [pc, #64]	@ (80115f8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80115b6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115bc:	2201      	movs	r2, #1
 80115be:	409a      	lsls	r2, r3
 80115c0:	4b0d      	ldr	r3, [pc, #52]	@ (80115f8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	4a0c      	ldr	r2, [pc, #48]	@ (80115f8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80115c8:	6013      	str	r3, [r2, #0]
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115ce:	4613      	mov	r3, r2
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	4413      	add	r3, r2
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	4a07      	ldr	r2, [pc, #28]	@ (80115f4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80115d8:	441a      	add	r2, r3
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	3304      	adds	r3, #4
 80115de:	4619      	mov	r1, r3
 80115e0:	4610      	mov	r0, r2
 80115e2:	f7fe f809 	bl	800f5f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115e6:	bf00      	nop
 80115e8:	3720      	adds	r7, #32
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	20001ae0 	.word	0x20001ae0
 80115f4:	20001ae4 	.word	0x20001ae4
 80115f8:	20001be8 	.word	0x20001be8

080115fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80115fc:	b480      	push	{r7}
 80115fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011600:	4b07      	ldr	r3, [pc, #28]	@ (8011620 <pvTaskIncrementMutexHeldCount+0x24>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d004      	beq.n	8011612 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011608:	4b05      	ldr	r3, [pc, #20]	@ (8011620 <pvTaskIncrementMutexHeldCount+0x24>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801160e:	3201      	adds	r2, #1
 8011610:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8011612:	4b03      	ldr	r3, [pc, #12]	@ (8011620 <pvTaskIncrementMutexHeldCount+0x24>)
 8011614:	681b      	ldr	r3, [r3, #0]
	}
 8011616:	4618      	mov	r0, r3
 8011618:	46bd      	mov	sp, r7
 801161a:	bc80      	pop	{r7}
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	20001ae0 	.word	0x20001ae0

08011624 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801162e:	4b29      	ldr	r3, [pc, #164]	@ (80116d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011634:	4b28      	ldr	r3, [pc, #160]	@ (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	3304      	adds	r3, #4
 801163a:	4618      	mov	r0, r3
 801163c:	f7fe f837 	bl	800f6ae <uxListRemove>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10b      	bne.n	801165e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011646:	4b24      	ldr	r3, [pc, #144]	@ (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801164c:	2201      	movs	r2, #1
 801164e:	fa02 f303 	lsl.w	r3, r2, r3
 8011652:	43da      	mvns	r2, r3
 8011654:	4b21      	ldr	r3, [pc, #132]	@ (80116dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4013      	ands	r3, r2
 801165a:	4a20      	ldr	r2, [pc, #128]	@ (80116dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801165c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011664:	d10a      	bne.n	801167c <prvAddCurrentTaskToDelayedList+0x58>
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d007      	beq.n	801167c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801166c:	4b1a      	ldr	r3, [pc, #104]	@ (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3304      	adds	r3, #4
 8011672:	4619      	mov	r1, r3
 8011674:	481a      	ldr	r0, [pc, #104]	@ (80116e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011676:	f7fd ffbf 	bl	800f5f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801167a:	e026      	b.n	80116ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801167c:	68fa      	ldr	r2, [r7, #12]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4413      	add	r3, r2
 8011682:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011684:	4b14      	ldr	r3, [pc, #80]	@ (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	68ba      	ldr	r2, [r7, #8]
 801168a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	429a      	cmp	r2, r3
 8011692:	d209      	bcs.n	80116a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011694:	4b13      	ldr	r3, [pc, #76]	@ (80116e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	4b0f      	ldr	r3, [pc, #60]	@ (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3304      	adds	r3, #4
 801169e:	4619      	mov	r1, r3
 80116a0:	4610      	mov	r0, r2
 80116a2:	f7fd ffcc 	bl	800f63e <vListInsert>
}
 80116a6:	e010      	b.n	80116ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116a8:	4b0f      	ldr	r3, [pc, #60]	@ (80116e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	4b0a      	ldr	r3, [pc, #40]	@ (80116d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	3304      	adds	r3, #4
 80116b2:	4619      	mov	r1, r3
 80116b4:	4610      	mov	r0, r2
 80116b6:	f7fd ffc2 	bl	800f63e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80116ba:	4b0c      	ldr	r3, [pc, #48]	@ (80116ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d202      	bcs.n	80116ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80116c4:	4a09      	ldr	r2, [pc, #36]	@ (80116ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	6013      	str	r3, [r2, #0]
}
 80116ca:	bf00      	nop
 80116cc:	3710      	adds	r7, #16
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	20001be4 	.word	0x20001be4
 80116d8:	20001ae0 	.word	0x20001ae0
 80116dc:	20001be8 	.word	0x20001be8
 80116e0:	20001bcc 	.word	0x20001bcc
 80116e4:	20001b9c 	.word	0x20001b9c
 80116e8:	20001b98 	.word	0x20001b98
 80116ec:	20001c00 	.word	0x20001c00

080116f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	3b04      	subs	r3, #4
 8011700:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	3b04      	subs	r3, #4
 801170e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	f023 0201 	bic.w	r2, r3, #1
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	3b04      	subs	r3, #4
 801171e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011720:	4a08      	ldr	r2, [pc, #32]	@ (8011744 <pxPortInitialiseStack+0x54>)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	3b14      	subs	r3, #20
 801172a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	3b20      	subs	r3, #32
 8011736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011738:	68fb      	ldr	r3, [r7, #12]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3714      	adds	r7, #20
 801173e:	46bd      	mov	sp, r7
 8011740:	bc80      	pop	{r7}
 8011742:	4770      	bx	lr
 8011744:	08011749 	.word	0x08011749

08011748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011748:	b480      	push	{r7}
 801174a:	b085      	sub	sp, #20
 801174c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801174e:	2300      	movs	r3, #0
 8011750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011752:	4b12      	ldr	r3, [pc, #72]	@ (801179c <prvTaskExitError+0x54>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801175a:	d00b      	beq.n	8011774 <prvTaskExitError+0x2c>
	__asm volatile
 801175c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011760:	f383 8811 	msr	BASEPRI, r3
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	60fb      	str	r3, [r7, #12]
}
 801176e:	bf00      	nop
 8011770:	bf00      	nop
 8011772:	e7fd      	b.n	8011770 <prvTaskExitError+0x28>
	__asm volatile
 8011774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011778:	f383 8811 	msr	BASEPRI, r3
 801177c:	f3bf 8f6f 	isb	sy
 8011780:	f3bf 8f4f 	dsb	sy
 8011784:	60bb      	str	r3, [r7, #8]
}
 8011786:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011788:	bf00      	nop
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d0fc      	beq.n	801178a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011790:	bf00      	nop
 8011792:	bf00      	nop
 8011794:	3714      	adds	r7, #20
 8011796:	46bd      	mov	sp, r7
 8011798:	bc80      	pop	{r7}
 801179a:	4770      	bx	lr
 801179c:	20000034 	.word	0x20000034

080117a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80117a0:	4b07      	ldr	r3, [pc, #28]	@ (80117c0 <pxCurrentTCBConst2>)
 80117a2:	6819      	ldr	r1, [r3, #0]
 80117a4:	6808      	ldr	r0, [r1, #0]
 80117a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80117aa:	f380 8809 	msr	PSP, r0
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f04f 0000 	mov.w	r0, #0
 80117b6:	f380 8811 	msr	BASEPRI, r0
 80117ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80117be:	4770      	bx	lr

080117c0 <pxCurrentTCBConst2>:
 80117c0:	20001ae0 	.word	0x20001ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop

080117c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80117c8:	4806      	ldr	r0, [pc, #24]	@ (80117e4 <prvPortStartFirstTask+0x1c>)
 80117ca:	6800      	ldr	r0, [r0, #0]
 80117cc:	6800      	ldr	r0, [r0, #0]
 80117ce:	f380 8808 	msr	MSP, r0
 80117d2:	b662      	cpsie	i
 80117d4:	b661      	cpsie	f
 80117d6:	f3bf 8f4f 	dsb	sy
 80117da:	f3bf 8f6f 	isb	sy
 80117de:	df00      	svc	0
 80117e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80117e2:	bf00      	nop
 80117e4:	e000ed08 	.word	0xe000ed08

080117e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80117ee:	4b32      	ldr	r3, [pc, #200]	@ (80118b8 <xPortStartScheduler+0xd0>)
 80117f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	22ff      	movs	r2, #255	@ 0xff
 80117fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	b2db      	uxtb	r3, r3
 8011806:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011808:	78fb      	ldrb	r3, [r7, #3]
 801180a:	b2db      	uxtb	r3, r3
 801180c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011810:	b2da      	uxtb	r2, r3
 8011812:	4b2a      	ldr	r3, [pc, #168]	@ (80118bc <xPortStartScheduler+0xd4>)
 8011814:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011816:	4b2a      	ldr	r3, [pc, #168]	@ (80118c0 <xPortStartScheduler+0xd8>)
 8011818:	2207      	movs	r2, #7
 801181a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801181c:	e009      	b.n	8011832 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801181e:	4b28      	ldr	r3, [pc, #160]	@ (80118c0 <xPortStartScheduler+0xd8>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3b01      	subs	r3, #1
 8011824:	4a26      	ldr	r2, [pc, #152]	@ (80118c0 <xPortStartScheduler+0xd8>)
 8011826:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011828:	78fb      	ldrb	r3, [r7, #3]
 801182a:	b2db      	uxtb	r3, r3
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	b2db      	uxtb	r3, r3
 8011830:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011832:	78fb      	ldrb	r3, [r7, #3]
 8011834:	b2db      	uxtb	r3, r3
 8011836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801183a:	2b80      	cmp	r3, #128	@ 0x80
 801183c:	d0ef      	beq.n	801181e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801183e:	4b20      	ldr	r3, [pc, #128]	@ (80118c0 <xPortStartScheduler+0xd8>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f1c3 0307 	rsb	r3, r3, #7
 8011846:	2b04      	cmp	r3, #4
 8011848:	d00b      	beq.n	8011862 <xPortStartScheduler+0x7a>
	__asm volatile
 801184a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	60bb      	str	r3, [r7, #8]
}
 801185c:	bf00      	nop
 801185e:	bf00      	nop
 8011860:	e7fd      	b.n	801185e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011862:	4b17      	ldr	r3, [pc, #92]	@ (80118c0 <xPortStartScheduler+0xd8>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	021b      	lsls	r3, r3, #8
 8011868:	4a15      	ldr	r2, [pc, #84]	@ (80118c0 <xPortStartScheduler+0xd8>)
 801186a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801186c:	4b14      	ldr	r3, [pc, #80]	@ (80118c0 <xPortStartScheduler+0xd8>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011874:	4a12      	ldr	r2, [pc, #72]	@ (80118c0 <xPortStartScheduler+0xd8>)
 8011876:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	b2da      	uxtb	r2, r3
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011880:	4b10      	ldr	r3, [pc, #64]	@ (80118c4 <xPortStartScheduler+0xdc>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a0f      	ldr	r2, [pc, #60]	@ (80118c4 <xPortStartScheduler+0xdc>)
 8011886:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801188a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801188c:	4b0d      	ldr	r3, [pc, #52]	@ (80118c4 <xPortStartScheduler+0xdc>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a0c      	ldr	r2, [pc, #48]	@ (80118c4 <xPortStartScheduler+0xdc>)
 8011892:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011896:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011898:	f000 f8b8 	bl	8011a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801189c:	4b0a      	ldr	r3, [pc, #40]	@ (80118c8 <xPortStartScheduler+0xe0>)
 801189e:	2200      	movs	r2, #0
 80118a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118a2:	f7ff ff91 	bl	80117c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118a6:	f7ff fa5d 	bl	8010d64 <vTaskSwitchContext>
	prvTaskExitError();
 80118aa:	f7ff ff4d 	bl	8011748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	e000e400 	.word	0xe000e400
 80118bc:	20001c0c 	.word	0x20001c0c
 80118c0:	20001c10 	.word	0x20001c10
 80118c4:	e000ed20 	.word	0xe000ed20
 80118c8:	20000034 	.word	0x20000034

080118cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
	__asm volatile
 80118d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	607b      	str	r3, [r7, #4]
}
 80118e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80118e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011924 <vPortEnterCritical+0x58>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3301      	adds	r3, #1
 80118ec:	4a0d      	ldr	r2, [pc, #52]	@ (8011924 <vPortEnterCritical+0x58>)
 80118ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80118f0:	4b0c      	ldr	r3, [pc, #48]	@ (8011924 <vPortEnterCritical+0x58>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d110      	bne.n	801191a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80118f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011928 <vPortEnterCritical+0x5c>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d00b      	beq.n	801191a <vPortEnterCritical+0x4e>
	__asm volatile
 8011902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011906:	f383 8811 	msr	BASEPRI, r3
 801190a:	f3bf 8f6f 	isb	sy
 801190e:	f3bf 8f4f 	dsb	sy
 8011912:	603b      	str	r3, [r7, #0]
}
 8011914:	bf00      	nop
 8011916:	bf00      	nop
 8011918:	e7fd      	b.n	8011916 <vPortEnterCritical+0x4a>
	}
}
 801191a:	bf00      	nop
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	bc80      	pop	{r7}
 8011922:	4770      	bx	lr
 8011924:	20000034 	.word	0x20000034
 8011928:	e000ed04 	.word	0xe000ed04

0801192c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011932:	4b12      	ldr	r3, [pc, #72]	@ (801197c <vPortExitCritical+0x50>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d10b      	bne.n	8011952 <vPortExitCritical+0x26>
	__asm volatile
 801193a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801193e:	f383 8811 	msr	BASEPRI, r3
 8011942:	f3bf 8f6f 	isb	sy
 8011946:	f3bf 8f4f 	dsb	sy
 801194a:	607b      	str	r3, [r7, #4]
}
 801194c:	bf00      	nop
 801194e:	bf00      	nop
 8011950:	e7fd      	b.n	801194e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011952:	4b0a      	ldr	r3, [pc, #40]	@ (801197c <vPortExitCritical+0x50>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	3b01      	subs	r3, #1
 8011958:	4a08      	ldr	r2, [pc, #32]	@ (801197c <vPortExitCritical+0x50>)
 801195a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801195c:	4b07      	ldr	r3, [pc, #28]	@ (801197c <vPortExitCritical+0x50>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d105      	bne.n	8011970 <vPortExitCritical+0x44>
 8011964:	2300      	movs	r3, #0
 8011966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	f383 8811 	msr	BASEPRI, r3
}
 801196e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011970:	bf00      	nop
 8011972:	370c      	adds	r7, #12
 8011974:	46bd      	mov	sp, r7
 8011976:	bc80      	pop	{r7}
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop
 801197c:	20000034 	.word	0x20000034

08011980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011980:	f3ef 8009 	mrs	r0, PSP
 8011984:	f3bf 8f6f 	isb	sy
 8011988:	4b0d      	ldr	r3, [pc, #52]	@ (80119c0 <pxCurrentTCBConst>)
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011990:	6010      	str	r0, [r2, #0]
 8011992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8011996:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801199a:	f380 8811 	msr	BASEPRI, r0
 801199e:	f7ff f9e1 	bl	8010d64 <vTaskSwitchContext>
 80119a2:	f04f 0000 	mov.w	r0, #0
 80119a6:	f380 8811 	msr	BASEPRI, r0
 80119aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80119ae:	6819      	ldr	r1, [r3, #0]
 80119b0:	6808      	ldr	r0, [r1, #0]
 80119b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80119b6:	f380 8809 	msr	PSP, r0
 80119ba:	f3bf 8f6f 	isb	sy
 80119be:	4770      	bx	lr

080119c0 <pxCurrentTCBConst>:
 80119c0:	20001ae0 	.word	0x20001ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80119c4:	bf00      	nop
 80119c6:	bf00      	nop

080119c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
	__asm volatile
 80119ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	607b      	str	r3, [r7, #4]
}
 80119e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80119e2:	f7ff f901 	bl	8010be8 <xTaskIncrementTick>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d003      	beq.n	80119f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80119ec:	4b06      	ldr	r3, [pc, #24]	@ (8011a08 <SysTick_Handler+0x40>)
 80119ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	2300      	movs	r3, #0
 80119f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	f383 8811 	msr	BASEPRI, r3
}
 80119fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a00:	bf00      	nop
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	e000ed04 	.word	0xe000ed04

08011a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a10:	4b0a      	ldr	r3, [pc, #40]	@ (8011a3c <vPortSetupTimerInterrupt+0x30>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a16:	4b0a      	ldr	r3, [pc, #40]	@ (8011a40 <vPortSetupTimerInterrupt+0x34>)
 8011a18:	2200      	movs	r2, #0
 8011a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a1c:	4b09      	ldr	r3, [pc, #36]	@ (8011a44 <vPortSetupTimerInterrupt+0x38>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4a09      	ldr	r2, [pc, #36]	@ (8011a48 <vPortSetupTimerInterrupt+0x3c>)
 8011a22:	fba2 2303 	umull	r2, r3, r2, r3
 8011a26:	099b      	lsrs	r3, r3, #6
 8011a28:	4a08      	ldr	r2, [pc, #32]	@ (8011a4c <vPortSetupTimerInterrupt+0x40>)
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a2e:	4b03      	ldr	r3, [pc, #12]	@ (8011a3c <vPortSetupTimerInterrupt+0x30>)
 8011a30:	2207      	movs	r2, #7
 8011a32:	601a      	str	r2, [r3, #0]
}
 8011a34:	bf00      	nop
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bc80      	pop	{r7}
 8011a3a:	4770      	bx	lr
 8011a3c:	e000e010 	.word	0xe000e010
 8011a40:	e000e018 	.word	0xe000e018
 8011a44:	20000028 	.word	0x20000028
 8011a48:	10624dd3 	.word	0x10624dd3
 8011a4c:	e000e014 	.word	0xe000e014

08011a50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011a50:	b480      	push	{r7}
 8011a52:	b085      	sub	sp, #20
 8011a54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011a56:	f3ef 8305 	mrs	r3, IPSR
 8011a5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2b0f      	cmp	r3, #15
 8011a60:	d915      	bls.n	8011a8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011a62:	4a17      	ldr	r2, [pc, #92]	@ (8011ac0 <vPortValidateInterruptPriority+0x70>)
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	4413      	add	r3, r2
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a6c:	4b15      	ldr	r3, [pc, #84]	@ (8011ac4 <vPortValidateInterruptPriority+0x74>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	7afa      	ldrb	r2, [r7, #11]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d20b      	bcs.n	8011a8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a7a:	f383 8811 	msr	BASEPRI, r3
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f3bf 8f4f 	dsb	sy
 8011a86:	607b      	str	r3, [r7, #4]
}
 8011a88:	bf00      	nop
 8011a8a:	bf00      	nop
 8011a8c:	e7fd      	b.n	8011a8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8011ac8 <vPortValidateInterruptPriority+0x78>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011a96:	4b0d      	ldr	r3, [pc, #52]	@ (8011acc <vPortValidateInterruptPriority+0x7c>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d90b      	bls.n	8011ab6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aa2:	f383 8811 	msr	BASEPRI, r3
 8011aa6:	f3bf 8f6f 	isb	sy
 8011aaa:	f3bf 8f4f 	dsb	sy
 8011aae:	603b      	str	r3, [r7, #0]
}
 8011ab0:	bf00      	nop
 8011ab2:	bf00      	nop
 8011ab4:	e7fd      	b.n	8011ab2 <vPortValidateInterruptPriority+0x62>
	}
 8011ab6:	bf00      	nop
 8011ab8:	3714      	adds	r7, #20
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bc80      	pop	{r7}
 8011abe:	4770      	bx	lr
 8011ac0:	e000e3f0 	.word	0xe000e3f0
 8011ac4:	20001c0c 	.word	0x20001c0c
 8011ac8:	e000ed0c 	.word	0xe000ed0c
 8011acc:	20001c10 	.word	0x20001c10

08011ad0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b08a      	sub	sp, #40	@ 0x28
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011adc:	f7fe ffca 	bl	8010a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8011c4c <pvPortMalloc+0x17c>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d101      	bne.n	8011aec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011ae8:	f000 f916 	bl	8011d18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011aec:	4b58      	ldr	r3, [pc, #352]	@ (8011c50 <pvPortMalloc+0x180>)
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	4013      	ands	r3, r2
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f040 8090 	bne.w	8011c1a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d01e      	beq.n	8011b3e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011b00:	2208      	movs	r2, #8
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4413      	add	r3, r2
 8011b06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f003 0307 	and.w	r3, r3, #7
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d015      	beq.n	8011b3e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f023 0307 	bic.w	r3, r3, #7
 8011b18:	3308      	adds	r3, #8
 8011b1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f003 0307 	and.w	r3, r3, #7
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00b      	beq.n	8011b3e <pvPortMalloc+0x6e>
	__asm volatile
 8011b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	617b      	str	r3, [r7, #20]
}
 8011b38:	bf00      	nop
 8011b3a:	bf00      	nop
 8011b3c:	e7fd      	b.n	8011b3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d06a      	beq.n	8011c1a <pvPortMalloc+0x14a>
 8011b44:	4b43      	ldr	r3, [pc, #268]	@ (8011c54 <pvPortMalloc+0x184>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d865      	bhi.n	8011c1a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011b4e:	4b42      	ldr	r3, [pc, #264]	@ (8011c58 <pvPortMalloc+0x188>)
 8011b50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011b52:	4b41      	ldr	r3, [pc, #260]	@ (8011c58 <pvPortMalloc+0x188>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b58:	e004      	b.n	8011b64 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d903      	bls.n	8011b76 <pvPortMalloc+0xa6>
 8011b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d1f1      	bne.n	8011b5a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b76:	4b35      	ldr	r3, [pc, #212]	@ (8011c4c <pvPortMalloc+0x17c>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d04c      	beq.n	8011c1a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2208      	movs	r2, #8
 8011b86:	4413      	add	r3, r2
 8011b88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	6a3b      	ldr	r3, [r7, #32]
 8011b90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	685a      	ldr	r2, [r3, #4]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	1ad2      	subs	r2, r2, r3
 8011b9a:	2308      	movs	r3, #8
 8011b9c:	005b      	lsls	r3, r3, #1
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d920      	bls.n	8011be4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	f003 0307 	and.w	r3, r3, #7
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00b      	beq.n	8011bcc <pvPortMalloc+0xfc>
	__asm volatile
 8011bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bb8:	f383 8811 	msr	BASEPRI, r3
 8011bbc:	f3bf 8f6f 	isb	sy
 8011bc0:	f3bf 8f4f 	dsb	sy
 8011bc4:	613b      	str	r3, [r7, #16]
}
 8011bc6:	bf00      	nop
 8011bc8:	bf00      	nop
 8011bca:	e7fd      	b.n	8011bc8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bce:	685a      	ldr	r2, [r3, #4]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	1ad2      	subs	r2, r2, r3
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011bde:	69b8      	ldr	r0, [r7, #24]
 8011be0:	f000 f8fc 	bl	8011ddc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011be4:	4b1b      	ldr	r3, [pc, #108]	@ (8011c54 <pvPortMalloc+0x184>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	4a19      	ldr	r2, [pc, #100]	@ (8011c54 <pvPortMalloc+0x184>)
 8011bf0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011bf2:	4b18      	ldr	r3, [pc, #96]	@ (8011c54 <pvPortMalloc+0x184>)
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	4b19      	ldr	r3, [pc, #100]	@ (8011c5c <pvPortMalloc+0x18c>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d203      	bcs.n	8011c06 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011bfe:	4b15      	ldr	r3, [pc, #84]	@ (8011c54 <pvPortMalloc+0x184>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a16      	ldr	r2, [pc, #88]	@ (8011c5c <pvPortMalloc+0x18c>)
 8011c04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c08:	685a      	ldr	r2, [r3, #4]
 8011c0a:	4b11      	ldr	r3, [pc, #68]	@ (8011c50 <pvPortMalloc+0x180>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	431a      	orrs	r2, r3
 8011c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c1a:	f7fe ff39 	bl	8010a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	f003 0307 	and.w	r3, r3, #7
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00b      	beq.n	8011c40 <pvPortMalloc+0x170>
	__asm volatile
 8011c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c2c:	f383 8811 	msr	BASEPRI, r3
 8011c30:	f3bf 8f6f 	isb	sy
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	60fb      	str	r3, [r7, #12]
}
 8011c3a:	bf00      	nop
 8011c3c:	bf00      	nop
 8011c3e:	e7fd      	b.n	8011c3c <pvPortMalloc+0x16c>
	return pvReturn;
 8011c40:	69fb      	ldr	r3, [r7, #28]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3728      	adds	r7, #40	@ 0x28
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	2000281c 	.word	0x2000281c
 8011c50:	20002828 	.word	0x20002828
 8011c54:	20002820 	.word	0x20002820
 8011c58:	20002814 	.word	0x20002814
 8011c5c:	20002824 	.word	0x20002824

08011c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b086      	sub	sp, #24
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d04a      	beq.n	8011d08 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011c72:	2308      	movs	r3, #8
 8011c74:	425b      	negs	r3, r3
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	4413      	add	r3, r2
 8011c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	4b22      	ldr	r3, [pc, #136]	@ (8011d10 <vPortFree+0xb0>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4013      	ands	r3, r2
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10b      	bne.n	8011ca6 <vPortFree+0x46>
	__asm volatile
 8011c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	60fb      	str	r3, [r7, #12]
}
 8011ca0:	bf00      	nop
 8011ca2:	bf00      	nop
 8011ca4:	e7fd      	b.n	8011ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00b      	beq.n	8011cc6 <vPortFree+0x66>
	__asm volatile
 8011cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cb2:	f383 8811 	msr	BASEPRI, r3
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	f3bf 8f4f 	dsb	sy
 8011cbe:	60bb      	str	r3, [r7, #8]
}
 8011cc0:	bf00      	nop
 8011cc2:	bf00      	nop
 8011cc4:	e7fd      	b.n	8011cc2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	685a      	ldr	r2, [r3, #4]
 8011cca:	4b11      	ldr	r3, [pc, #68]	@ (8011d10 <vPortFree+0xb0>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4013      	ands	r3, r2
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d019      	beq.n	8011d08 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d115      	bne.n	8011d08 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	685a      	ldr	r2, [r3, #4]
 8011ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8011d10 <vPortFree+0xb0>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	43db      	mvns	r3, r3
 8011ce6:	401a      	ands	r2, r3
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011cec:	f7fe fec2 	bl	8010a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	4b07      	ldr	r3, [pc, #28]	@ (8011d14 <vPortFree+0xb4>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	4a06      	ldr	r2, [pc, #24]	@ (8011d14 <vPortFree+0xb4>)
 8011cfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011cfe:	6938      	ldr	r0, [r7, #16]
 8011d00:	f000 f86c 	bl	8011ddc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011d04:	f7fe fec4 	bl	8010a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d08:	bf00      	nop
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	20002828 	.word	0x20002828
 8011d14:	20002820 	.word	0x20002820

08011d18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b085      	sub	sp, #20
 8011d1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8011d22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d24:	4b27      	ldr	r3, [pc, #156]	@ (8011dc4 <prvHeapInit+0xac>)
 8011d26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f003 0307 	and.w	r3, r3, #7
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d00c      	beq.n	8011d4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	3307      	adds	r3, #7
 8011d36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f023 0307 	bic.w	r3, r3, #7
 8011d3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	4a1f      	ldr	r2, [pc, #124]	@ (8011dc4 <prvHeapInit+0xac>)
 8011d48:	4413      	add	r3, r2
 8011d4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d50:	4a1d      	ldr	r2, [pc, #116]	@ (8011dc8 <prvHeapInit+0xb0>)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011d56:	4b1c      	ldr	r3, [pc, #112]	@ (8011dc8 <prvHeapInit+0xb0>)
 8011d58:	2200      	movs	r2, #0
 8011d5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	4413      	add	r3, r2
 8011d62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011d64:	2208      	movs	r2, #8
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	1a9b      	subs	r3, r3, r2
 8011d6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f023 0307 	bic.w	r3, r3, #7
 8011d72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	4a15      	ldr	r2, [pc, #84]	@ (8011dcc <prvHeapInit+0xb4>)
 8011d78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011d7a:	4b14      	ldr	r3, [pc, #80]	@ (8011dcc <prvHeapInit+0xb4>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011d82:	4b12      	ldr	r3, [pc, #72]	@ (8011dcc <prvHeapInit+0xb4>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	2200      	movs	r2, #0
 8011d88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	68fa      	ldr	r2, [r7, #12]
 8011d92:	1ad2      	subs	r2, r2, r3
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d98:	4b0c      	ldr	r3, [pc, #48]	@ (8011dcc <prvHeapInit+0xb4>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	4a0a      	ldr	r2, [pc, #40]	@ (8011dd0 <prvHeapInit+0xb8>)
 8011da6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	4a09      	ldr	r2, [pc, #36]	@ (8011dd4 <prvHeapInit+0xbc>)
 8011dae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011db0:	4b09      	ldr	r3, [pc, #36]	@ (8011dd8 <prvHeapInit+0xc0>)
 8011db2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011db6:	601a      	str	r2, [r3, #0]
}
 8011db8:	bf00      	nop
 8011dba:	3714      	adds	r7, #20
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bc80      	pop	{r7}
 8011dc0:	4770      	bx	lr
 8011dc2:	bf00      	nop
 8011dc4:	20001c14 	.word	0x20001c14
 8011dc8:	20002814 	.word	0x20002814
 8011dcc:	2000281c 	.word	0x2000281c
 8011dd0:	20002824 	.word	0x20002824
 8011dd4:	20002820 	.word	0x20002820
 8011dd8:	20002828 	.word	0x20002828

08011ddc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011de4:	4b27      	ldr	r3, [pc, #156]	@ (8011e84 <prvInsertBlockIntoFreeList+0xa8>)
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e002      	b.n	8011df0 <prvInsertBlockIntoFreeList+0x14>
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d8f7      	bhi.n	8011dea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	4413      	add	r3, r2
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d108      	bne.n	8011e1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	685a      	ldr	r2, [r3, #4]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	441a      	add	r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	441a      	add	r2, r3
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d118      	bne.n	8011e64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	4b14      	ldr	r3, [pc, #80]	@ (8011e88 <prvInsertBlockIntoFreeList+0xac>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d00d      	beq.n	8011e5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	685a      	ldr	r2, [r3, #4]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	441a      	add	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	601a      	str	r2, [r3, #0]
 8011e58:	e008      	b.n	8011e6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8011e88 <prvInsertBlockIntoFreeList+0xac>)
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	601a      	str	r2, [r3, #0]
 8011e62:	e003      	b.n	8011e6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d002      	beq.n	8011e7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e7a:	bf00      	nop
 8011e7c:	3714      	adds	r7, #20
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bc80      	pop	{r7}
 8011e82:	4770      	bx	lr
 8011e84:	20002814 	.word	0x20002814
 8011e88:	2000281c 	.word	0x2000281c

08011e8c <calloc>:
 8011e8c:	4b02      	ldr	r3, [pc, #8]	@ (8011e98 <calloc+0xc>)
 8011e8e:	460a      	mov	r2, r1
 8011e90:	4601      	mov	r1, r0
 8011e92:	6818      	ldr	r0, [r3, #0]
 8011e94:	f000 b802 	b.w	8011e9c <_calloc_r>
 8011e98:	20000038 	.word	0x20000038

08011e9c <_calloc_r>:
 8011e9c:	b570      	push	{r4, r5, r6, lr}
 8011e9e:	fba1 5402 	umull	r5, r4, r1, r2
 8011ea2:	b93c      	cbnz	r4, 8011eb4 <_calloc_r+0x18>
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	f000 f82f 	bl	8011f08 <_malloc_r>
 8011eaa:	4606      	mov	r6, r0
 8011eac:	b928      	cbnz	r0, 8011eba <_calloc_r+0x1e>
 8011eae:	2600      	movs	r6, #0
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	bd70      	pop	{r4, r5, r6, pc}
 8011eb4:	220c      	movs	r2, #12
 8011eb6:	6002      	str	r2, [r0, #0]
 8011eb8:	e7f9      	b.n	8011eae <_calloc_r+0x12>
 8011eba:	462a      	mov	r2, r5
 8011ebc:	4621      	mov	r1, r4
 8011ebe:	f000 f8af 	bl	8012020 <memset>
 8011ec2:	e7f5      	b.n	8011eb0 <_calloc_r+0x14>

08011ec4 <sbrk_aligned>:
 8011ec4:	b570      	push	{r4, r5, r6, lr}
 8011ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8011f04 <sbrk_aligned+0x40>)
 8011ec8:	460c      	mov	r4, r1
 8011eca:	6831      	ldr	r1, [r6, #0]
 8011ecc:	4605      	mov	r5, r0
 8011ece:	b911      	cbnz	r1, 8011ed6 <sbrk_aligned+0x12>
 8011ed0:	f000 f8ae 	bl	8012030 <_sbrk_r>
 8011ed4:	6030      	str	r0, [r6, #0]
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f000 f8a9 	bl	8012030 <_sbrk_r>
 8011ede:	1c43      	adds	r3, r0, #1
 8011ee0:	d103      	bne.n	8011eea <sbrk_aligned+0x26>
 8011ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	bd70      	pop	{r4, r5, r6, pc}
 8011eea:	1cc4      	adds	r4, r0, #3
 8011eec:	f024 0403 	bic.w	r4, r4, #3
 8011ef0:	42a0      	cmp	r0, r4
 8011ef2:	d0f8      	beq.n	8011ee6 <sbrk_aligned+0x22>
 8011ef4:	1a21      	subs	r1, r4, r0
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f000 f89a 	bl	8012030 <_sbrk_r>
 8011efc:	3001      	adds	r0, #1
 8011efe:	d1f2      	bne.n	8011ee6 <sbrk_aligned+0x22>
 8011f00:	e7ef      	b.n	8011ee2 <sbrk_aligned+0x1e>
 8011f02:	bf00      	nop
 8011f04:	2000282c 	.word	0x2000282c

08011f08 <_malloc_r>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	1ccd      	adds	r5, r1, #3
 8011f0e:	f025 0503 	bic.w	r5, r5, #3
 8011f12:	3508      	adds	r5, #8
 8011f14:	2d0c      	cmp	r5, #12
 8011f16:	bf38      	it	cc
 8011f18:	250c      	movcc	r5, #12
 8011f1a:	2d00      	cmp	r5, #0
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	db01      	blt.n	8011f24 <_malloc_r+0x1c>
 8011f20:	42a9      	cmp	r1, r5
 8011f22:	d904      	bls.n	8011f2e <_malloc_r+0x26>
 8011f24:	230c      	movs	r3, #12
 8011f26:	6033      	str	r3, [r6, #0]
 8011f28:	2000      	movs	r0, #0
 8011f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012004 <_malloc_r+0xfc>
 8011f32:	f000 f869 	bl	8012008 <__malloc_lock>
 8011f36:	f8d8 3000 	ldr.w	r3, [r8]
 8011f3a:	461c      	mov	r4, r3
 8011f3c:	bb44      	cbnz	r4, 8011f90 <_malloc_r+0x88>
 8011f3e:	4629      	mov	r1, r5
 8011f40:	4630      	mov	r0, r6
 8011f42:	f7ff ffbf 	bl	8011ec4 <sbrk_aligned>
 8011f46:	1c43      	adds	r3, r0, #1
 8011f48:	4604      	mov	r4, r0
 8011f4a:	d158      	bne.n	8011ffe <_malloc_r+0xf6>
 8011f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8011f50:	4627      	mov	r7, r4
 8011f52:	2f00      	cmp	r7, #0
 8011f54:	d143      	bne.n	8011fde <_malloc_r+0xd6>
 8011f56:	2c00      	cmp	r4, #0
 8011f58:	d04b      	beq.n	8011ff2 <_malloc_r+0xea>
 8011f5a:	6823      	ldr	r3, [r4, #0]
 8011f5c:	4639      	mov	r1, r7
 8011f5e:	4630      	mov	r0, r6
 8011f60:	eb04 0903 	add.w	r9, r4, r3
 8011f64:	f000 f864 	bl	8012030 <_sbrk_r>
 8011f68:	4581      	cmp	r9, r0
 8011f6a:	d142      	bne.n	8011ff2 <_malloc_r+0xea>
 8011f6c:	6821      	ldr	r1, [r4, #0]
 8011f6e:	4630      	mov	r0, r6
 8011f70:	1a6d      	subs	r5, r5, r1
 8011f72:	4629      	mov	r1, r5
 8011f74:	f7ff ffa6 	bl	8011ec4 <sbrk_aligned>
 8011f78:	3001      	adds	r0, #1
 8011f7a:	d03a      	beq.n	8011ff2 <_malloc_r+0xea>
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	442b      	add	r3, r5
 8011f80:	6023      	str	r3, [r4, #0]
 8011f82:	f8d8 3000 	ldr.w	r3, [r8]
 8011f86:	685a      	ldr	r2, [r3, #4]
 8011f88:	bb62      	cbnz	r2, 8011fe4 <_malloc_r+0xdc>
 8011f8a:	f8c8 7000 	str.w	r7, [r8]
 8011f8e:	e00f      	b.n	8011fb0 <_malloc_r+0xa8>
 8011f90:	6822      	ldr	r2, [r4, #0]
 8011f92:	1b52      	subs	r2, r2, r5
 8011f94:	d420      	bmi.n	8011fd8 <_malloc_r+0xd0>
 8011f96:	2a0b      	cmp	r2, #11
 8011f98:	d917      	bls.n	8011fca <_malloc_r+0xc2>
 8011f9a:	1961      	adds	r1, r4, r5
 8011f9c:	42a3      	cmp	r3, r4
 8011f9e:	6025      	str	r5, [r4, #0]
 8011fa0:	bf18      	it	ne
 8011fa2:	6059      	strne	r1, [r3, #4]
 8011fa4:	6863      	ldr	r3, [r4, #4]
 8011fa6:	bf08      	it	eq
 8011fa8:	f8c8 1000 	streq.w	r1, [r8]
 8011fac:	5162      	str	r2, [r4, r5]
 8011fae:	604b      	str	r3, [r1, #4]
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f000 f82f 	bl	8012014 <__malloc_unlock>
 8011fb6:	f104 000b 	add.w	r0, r4, #11
 8011fba:	1d23      	adds	r3, r4, #4
 8011fbc:	f020 0007 	bic.w	r0, r0, #7
 8011fc0:	1ac2      	subs	r2, r0, r3
 8011fc2:	bf1c      	itt	ne
 8011fc4:	1a1b      	subne	r3, r3, r0
 8011fc6:	50a3      	strne	r3, [r4, r2]
 8011fc8:	e7af      	b.n	8011f2a <_malloc_r+0x22>
 8011fca:	6862      	ldr	r2, [r4, #4]
 8011fcc:	42a3      	cmp	r3, r4
 8011fce:	bf0c      	ite	eq
 8011fd0:	f8c8 2000 	streq.w	r2, [r8]
 8011fd4:	605a      	strne	r2, [r3, #4]
 8011fd6:	e7eb      	b.n	8011fb0 <_malloc_r+0xa8>
 8011fd8:	4623      	mov	r3, r4
 8011fda:	6864      	ldr	r4, [r4, #4]
 8011fdc:	e7ae      	b.n	8011f3c <_malloc_r+0x34>
 8011fde:	463c      	mov	r4, r7
 8011fe0:	687f      	ldr	r7, [r7, #4]
 8011fe2:	e7b6      	b.n	8011f52 <_malloc_r+0x4a>
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	42a3      	cmp	r3, r4
 8011fea:	d1fb      	bne.n	8011fe4 <_malloc_r+0xdc>
 8011fec:	2300      	movs	r3, #0
 8011fee:	6053      	str	r3, [r2, #4]
 8011ff0:	e7de      	b.n	8011fb0 <_malloc_r+0xa8>
 8011ff2:	230c      	movs	r3, #12
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	6033      	str	r3, [r6, #0]
 8011ff8:	f000 f80c 	bl	8012014 <__malloc_unlock>
 8011ffc:	e794      	b.n	8011f28 <_malloc_r+0x20>
 8011ffe:	6005      	str	r5, [r0, #0]
 8012000:	e7d6      	b.n	8011fb0 <_malloc_r+0xa8>
 8012002:	bf00      	nop
 8012004:	20002830 	.word	0x20002830

08012008 <__malloc_lock>:
 8012008:	4801      	ldr	r0, [pc, #4]	@ (8012010 <__malloc_lock+0x8>)
 801200a:	f000 b84b 	b.w	80120a4 <__retarget_lock_acquire_recursive>
 801200e:	bf00      	nop
 8012010:	20002970 	.word	0x20002970

08012014 <__malloc_unlock>:
 8012014:	4801      	ldr	r0, [pc, #4]	@ (801201c <__malloc_unlock+0x8>)
 8012016:	f000 b846 	b.w	80120a6 <__retarget_lock_release_recursive>
 801201a:	bf00      	nop
 801201c:	20002970 	.word	0x20002970

08012020 <memset>:
 8012020:	4603      	mov	r3, r0
 8012022:	4402      	add	r2, r0
 8012024:	4293      	cmp	r3, r2
 8012026:	d100      	bne.n	801202a <memset+0xa>
 8012028:	4770      	bx	lr
 801202a:	f803 1b01 	strb.w	r1, [r3], #1
 801202e:	e7f9      	b.n	8012024 <memset+0x4>

08012030 <_sbrk_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	2300      	movs	r3, #0
 8012034:	4d05      	ldr	r5, [pc, #20]	@ (801204c <_sbrk_r+0x1c>)
 8012036:	4604      	mov	r4, r0
 8012038:	4608      	mov	r0, r1
 801203a:	602b      	str	r3, [r5, #0]
 801203c:	f7f2 fa72 	bl	8004524 <_sbrk>
 8012040:	1c43      	adds	r3, r0, #1
 8012042:	d102      	bne.n	801204a <_sbrk_r+0x1a>
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	b103      	cbz	r3, 801204a <_sbrk_r+0x1a>
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	2000296c 	.word	0x2000296c

08012050 <__errno>:
 8012050:	4b01      	ldr	r3, [pc, #4]	@ (8012058 <__errno+0x8>)
 8012052:	6818      	ldr	r0, [r3, #0]
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	20000038 	.word	0x20000038

0801205c <__libc_init_array>:
 801205c:	b570      	push	{r4, r5, r6, lr}
 801205e:	2600      	movs	r6, #0
 8012060:	4d0c      	ldr	r5, [pc, #48]	@ (8012094 <__libc_init_array+0x38>)
 8012062:	4c0d      	ldr	r4, [pc, #52]	@ (8012098 <__libc_init_array+0x3c>)
 8012064:	1b64      	subs	r4, r4, r5
 8012066:	10a4      	asrs	r4, r4, #2
 8012068:	42a6      	cmp	r6, r4
 801206a:	d109      	bne.n	8012080 <__libc_init_array+0x24>
 801206c:	f000 f9ae 	bl	80123cc <_init>
 8012070:	2600      	movs	r6, #0
 8012072:	4d0a      	ldr	r5, [pc, #40]	@ (801209c <__libc_init_array+0x40>)
 8012074:	4c0a      	ldr	r4, [pc, #40]	@ (80120a0 <__libc_init_array+0x44>)
 8012076:	1b64      	subs	r4, r4, r5
 8012078:	10a4      	asrs	r4, r4, #2
 801207a:	42a6      	cmp	r6, r4
 801207c:	d105      	bne.n	801208a <__libc_init_array+0x2e>
 801207e:	bd70      	pop	{r4, r5, r6, pc}
 8012080:	f855 3b04 	ldr.w	r3, [r5], #4
 8012084:	4798      	blx	r3
 8012086:	3601      	adds	r6, #1
 8012088:	e7ee      	b.n	8012068 <__libc_init_array+0xc>
 801208a:	f855 3b04 	ldr.w	r3, [r5], #4
 801208e:	4798      	blx	r3
 8012090:	3601      	adds	r6, #1
 8012092:	e7f2      	b.n	801207a <__libc_init_array+0x1e>
 8012094:	08012b48 	.word	0x08012b48
 8012098:	08012b48 	.word	0x08012b48
 801209c:	08012b48 	.word	0x08012b48
 80120a0:	08012b4c 	.word	0x08012b4c

080120a4 <__retarget_lock_acquire_recursive>:
 80120a4:	4770      	bx	lr

080120a6 <__retarget_lock_release_recursive>:
 80120a6:	4770      	bx	lr

080120a8 <memcpy>:
 80120a8:	440a      	add	r2, r1
 80120aa:	4291      	cmp	r1, r2
 80120ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80120b0:	d100      	bne.n	80120b4 <memcpy+0xc>
 80120b2:	4770      	bx	lr
 80120b4:	b510      	push	{r4, lr}
 80120b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120ba:	4291      	cmp	r1, r2
 80120bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120c0:	d1f9      	bne.n	80120b6 <memcpy+0xe>
 80120c2:	bd10      	pop	{r4, pc}

080120c4 <sqrt>:
 80120c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120c6:	4606      	mov	r6, r0
 80120c8:	460f      	mov	r7, r1
 80120ca:	f000 f839 	bl	8012140 <__ieee754_sqrt>
 80120ce:	4632      	mov	r2, r6
 80120d0:	4604      	mov	r4, r0
 80120d2:	460d      	mov	r5, r1
 80120d4:	463b      	mov	r3, r7
 80120d6:	4630      	mov	r0, r6
 80120d8:	4639      	mov	r1, r7
 80120da:	f7ee fcff 	bl	8000adc <__aeabi_dcmpun>
 80120de:	b990      	cbnz	r0, 8012106 <sqrt+0x42>
 80120e0:	2200      	movs	r2, #0
 80120e2:	2300      	movs	r3, #0
 80120e4:	4630      	mov	r0, r6
 80120e6:	4639      	mov	r1, r7
 80120e8:	f7ee fcd0 	bl	8000a8c <__aeabi_dcmplt>
 80120ec:	b158      	cbz	r0, 8012106 <sqrt+0x42>
 80120ee:	f7ff ffaf 	bl	8012050 <__errno>
 80120f2:	2321      	movs	r3, #33	@ 0x21
 80120f4:	2200      	movs	r2, #0
 80120f6:	6003      	str	r3, [r0, #0]
 80120f8:	2300      	movs	r3, #0
 80120fa:	4610      	mov	r0, r2
 80120fc:	4619      	mov	r1, r3
 80120fe:	f7ee fb7d 	bl	80007fc <__aeabi_ddiv>
 8012102:	4604      	mov	r4, r0
 8012104:	460d      	mov	r5, r1
 8012106:	4620      	mov	r0, r4
 8012108:	4629      	mov	r1, r5
 801210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801210c <sqrtf>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4605      	mov	r5, r0
 8012110:	f000 f8ec 	bl	80122ec <__ieee754_sqrtf>
 8012114:	4629      	mov	r1, r5
 8012116:	4604      	mov	r4, r0
 8012118:	4628      	mov	r0, r5
 801211a:	f7ee fff1 	bl	8001100 <__aeabi_fcmpun>
 801211e:	b968      	cbnz	r0, 801213c <sqrtf+0x30>
 8012120:	2100      	movs	r1, #0
 8012122:	4628      	mov	r0, r5
 8012124:	f7ee ffc4 	bl	80010b0 <__aeabi_fcmplt>
 8012128:	b140      	cbz	r0, 801213c <sqrtf+0x30>
 801212a:	f7ff ff91 	bl	8012050 <__errno>
 801212e:	2321      	movs	r3, #33	@ 0x21
 8012130:	2100      	movs	r1, #0
 8012132:	6003      	str	r3, [r0, #0]
 8012134:	4608      	mov	r0, r1
 8012136:	f7ee fed1 	bl	8000edc <__aeabi_fdiv>
 801213a:	4604      	mov	r4, r0
 801213c:	4620      	mov	r0, r4
 801213e:	bd38      	pop	{r3, r4, r5, pc}

08012140 <__ieee754_sqrt>:
 8012140:	4a67      	ldr	r2, [pc, #412]	@ (80122e0 <__ieee754_sqrt+0x1a0>)
 8012142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012146:	438a      	bics	r2, r1
 8012148:	4606      	mov	r6, r0
 801214a:	460f      	mov	r7, r1
 801214c:	460b      	mov	r3, r1
 801214e:	4604      	mov	r4, r0
 8012150:	d10e      	bne.n	8012170 <__ieee754_sqrt+0x30>
 8012152:	4602      	mov	r2, r0
 8012154:	f7ee fa28 	bl	80005a8 <__aeabi_dmul>
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	4630      	mov	r0, r6
 801215e:	4639      	mov	r1, r7
 8012160:	f7ee f86c 	bl	800023c <__adddf3>
 8012164:	4606      	mov	r6, r0
 8012166:	460f      	mov	r7, r1
 8012168:	4630      	mov	r0, r6
 801216a:	4639      	mov	r1, r7
 801216c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012170:	2900      	cmp	r1, #0
 8012172:	dc0c      	bgt.n	801218e <__ieee754_sqrt+0x4e>
 8012174:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8012178:	4302      	orrs	r2, r0
 801217a:	d0f5      	beq.n	8012168 <__ieee754_sqrt+0x28>
 801217c:	b189      	cbz	r1, 80121a2 <__ieee754_sqrt+0x62>
 801217e:	4602      	mov	r2, r0
 8012180:	f7ee f85a 	bl	8000238 <__aeabi_dsub>
 8012184:	4602      	mov	r2, r0
 8012186:	460b      	mov	r3, r1
 8012188:	f7ee fb38 	bl	80007fc <__aeabi_ddiv>
 801218c:	e7ea      	b.n	8012164 <__ieee754_sqrt+0x24>
 801218e:	150a      	asrs	r2, r1, #20
 8012190:	d115      	bne.n	80121be <__ieee754_sqrt+0x7e>
 8012192:	2100      	movs	r1, #0
 8012194:	e009      	b.n	80121aa <__ieee754_sqrt+0x6a>
 8012196:	0ae3      	lsrs	r3, r4, #11
 8012198:	3a15      	subs	r2, #21
 801219a:	0564      	lsls	r4, r4, #21
 801219c:	2b00      	cmp	r3, #0
 801219e:	d0fa      	beq.n	8012196 <__ieee754_sqrt+0x56>
 80121a0:	e7f7      	b.n	8012192 <__ieee754_sqrt+0x52>
 80121a2:	460a      	mov	r2, r1
 80121a4:	e7fa      	b.n	801219c <__ieee754_sqrt+0x5c>
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	3101      	adds	r1, #1
 80121aa:	02d8      	lsls	r0, r3, #11
 80121ac:	d5fb      	bpl.n	80121a6 <__ieee754_sqrt+0x66>
 80121ae:	1e48      	subs	r0, r1, #1
 80121b0:	1a12      	subs	r2, r2, r0
 80121b2:	f1c1 0020 	rsb	r0, r1, #32
 80121b6:	fa24 f000 	lsr.w	r0, r4, r0
 80121ba:	4303      	orrs	r3, r0
 80121bc:	408c      	lsls	r4, r1
 80121be:	2600      	movs	r6, #0
 80121c0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80121c4:	2116      	movs	r1, #22
 80121c6:	07d2      	lsls	r2, r2, #31
 80121c8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80121cc:	4632      	mov	r2, r6
 80121ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121d6:	bf5c      	itt	pl
 80121d8:	005b      	lslpl	r3, r3, #1
 80121da:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80121de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80121e2:	bf58      	it	pl
 80121e4:	0064      	lslpl	r4, r4, #1
 80121e6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80121ea:	107f      	asrs	r7, r7, #1
 80121ec:	0064      	lsls	r4, r4, #1
 80121ee:	1815      	adds	r5, r2, r0
 80121f0:	429d      	cmp	r5, r3
 80121f2:	bfde      	ittt	le
 80121f4:	182a      	addle	r2, r5, r0
 80121f6:	1b5b      	suble	r3, r3, r5
 80121f8:	1836      	addle	r6, r6, r0
 80121fa:	0fe5      	lsrs	r5, r4, #31
 80121fc:	3901      	subs	r1, #1
 80121fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012202:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012206:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801220a:	d1f0      	bne.n	80121ee <__ieee754_sqrt+0xae>
 801220c:	460d      	mov	r5, r1
 801220e:	f04f 0a20 	mov.w	sl, #32
 8012212:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8012216:	429a      	cmp	r2, r3
 8012218:	eb01 0c00 	add.w	ip, r1, r0
 801221c:	db02      	blt.n	8012224 <__ieee754_sqrt+0xe4>
 801221e:	d113      	bne.n	8012248 <__ieee754_sqrt+0x108>
 8012220:	45a4      	cmp	ip, r4
 8012222:	d811      	bhi.n	8012248 <__ieee754_sqrt+0x108>
 8012224:	f1bc 0f00 	cmp.w	ip, #0
 8012228:	eb0c 0100 	add.w	r1, ip, r0
 801222c:	da42      	bge.n	80122b4 <__ieee754_sqrt+0x174>
 801222e:	2900      	cmp	r1, #0
 8012230:	db40      	blt.n	80122b4 <__ieee754_sqrt+0x174>
 8012232:	f102 0e01 	add.w	lr, r2, #1
 8012236:	1a9b      	subs	r3, r3, r2
 8012238:	4672      	mov	r2, lr
 801223a:	45a4      	cmp	ip, r4
 801223c:	bf88      	it	hi
 801223e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012242:	eba4 040c 	sub.w	r4, r4, ip
 8012246:	4405      	add	r5, r0
 8012248:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 801224c:	f1ba 0a01 	subs.w	sl, sl, #1
 8012250:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8012254:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012258:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801225c:	d1db      	bne.n	8012216 <__ieee754_sqrt+0xd6>
 801225e:	431c      	orrs	r4, r3
 8012260:	d01a      	beq.n	8012298 <__ieee754_sqrt+0x158>
 8012262:	4c20      	ldr	r4, [pc, #128]	@ (80122e4 <__ieee754_sqrt+0x1a4>)
 8012264:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80122e8 <__ieee754_sqrt+0x1a8>
 8012268:	e9d4 0100 	ldrd	r0, r1, [r4]
 801226c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012270:	f7ed ffe2 	bl	8000238 <__aeabi_dsub>
 8012274:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012278:	4602      	mov	r2, r0
 801227a:	460b      	mov	r3, r1
 801227c:	4640      	mov	r0, r8
 801227e:	4649      	mov	r1, r9
 8012280:	f7ee fc0e 	bl	8000aa0 <__aeabi_dcmple>
 8012284:	b140      	cbz	r0, 8012298 <__ieee754_sqrt+0x158>
 8012286:	e9d4 0100 	ldrd	r0, r1, [r4]
 801228a:	e9db 2300 	ldrd	r2, r3, [fp]
 801228e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012292:	d111      	bne.n	80122b8 <__ieee754_sqrt+0x178>
 8012294:	4655      	mov	r5, sl
 8012296:	3601      	adds	r6, #1
 8012298:	1072      	asrs	r2, r6, #1
 801229a:	086b      	lsrs	r3, r5, #1
 801229c:	07f1      	lsls	r1, r6, #31
 801229e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80122a2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80122a6:	bf48      	it	mi
 80122a8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80122ac:	4618      	mov	r0, r3
 80122ae:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80122b2:	e757      	b.n	8012164 <__ieee754_sqrt+0x24>
 80122b4:	4696      	mov	lr, r2
 80122b6:	e7be      	b.n	8012236 <__ieee754_sqrt+0xf6>
 80122b8:	f7ed ffc0 	bl	800023c <__adddf3>
 80122bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	4640      	mov	r0, r8
 80122c6:	4649      	mov	r1, r9
 80122c8:	f7ee fbe0 	bl	8000a8c <__aeabi_dcmplt>
 80122cc:	b120      	cbz	r0, 80122d8 <__ieee754_sqrt+0x198>
 80122ce:	1ca8      	adds	r0, r5, #2
 80122d0:	bf08      	it	eq
 80122d2:	3601      	addeq	r6, #1
 80122d4:	3502      	adds	r5, #2
 80122d6:	e7df      	b.n	8012298 <__ieee754_sqrt+0x158>
 80122d8:	1c6b      	adds	r3, r5, #1
 80122da:	f023 0501 	bic.w	r5, r3, #1
 80122de:	e7db      	b.n	8012298 <__ieee754_sqrt+0x158>
 80122e0:	7ff00000 	.word	0x7ff00000
 80122e4:	20000090 	.word	0x20000090
 80122e8:	20000088 	.word	0x20000088

080122ec <__ieee754_sqrtf>:
 80122ec:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80122f0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80122f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	4603      	mov	r3, r0
 80122fa:	4604      	mov	r4, r0
 80122fc:	d30a      	bcc.n	8012314 <__ieee754_sqrtf+0x28>
 80122fe:	4601      	mov	r1, r0
 8012300:	f7ee fd38 	bl	8000d74 <__aeabi_fmul>
 8012304:	4601      	mov	r1, r0
 8012306:	4620      	mov	r0, r4
 8012308:	f7ee fc2c 	bl	8000b64 <__addsf3>
 801230c:	4604      	mov	r4, r0
 801230e:	4620      	mov	r0, r4
 8012310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012314:	2a00      	cmp	r2, #0
 8012316:	d0fa      	beq.n	801230e <__ieee754_sqrtf+0x22>
 8012318:	2800      	cmp	r0, #0
 801231a:	da06      	bge.n	801232a <__ieee754_sqrtf+0x3e>
 801231c:	4601      	mov	r1, r0
 801231e:	f7ee fc1f 	bl	8000b60 <__aeabi_fsub>
 8012322:	4601      	mov	r1, r0
 8012324:	f7ee fdda 	bl	8000edc <__aeabi_fdiv>
 8012328:	e7f0      	b.n	801230c <__ieee754_sqrtf+0x20>
 801232a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 801232e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8012332:	d03e      	beq.n	80123b2 <__ieee754_sqrtf+0xc6>
 8012334:	2400      	movs	r4, #0
 8012336:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 801233a:	07ca      	lsls	r2, r1, #31
 801233c:	f04f 0019 	mov.w	r0, #25
 8012340:	4626      	mov	r6, r4
 8012342:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8012346:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801234a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801234e:	bf58      	it	pl
 8012350:	005b      	lslpl	r3, r3, #1
 8012352:	106d      	asrs	r5, r5, #1
 8012354:	005b      	lsls	r3, r3, #1
 8012356:	1872      	adds	r2, r6, r1
 8012358:	429a      	cmp	r2, r3
 801235a:	bfcf      	iteee	gt
 801235c:	461a      	movgt	r2, r3
 801235e:	1856      	addle	r6, r2, r1
 8012360:	1864      	addle	r4, r4, r1
 8012362:	1a9a      	suble	r2, r3, r2
 8012364:	3801      	subs	r0, #1
 8012366:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801236a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801236e:	d1f2      	bne.n	8012356 <__ieee754_sqrtf+0x6a>
 8012370:	b1ba      	cbz	r2, 80123a2 <__ieee754_sqrtf+0xb6>
 8012372:	4e14      	ldr	r6, [pc, #80]	@ (80123c4 <__ieee754_sqrtf+0xd8>)
 8012374:	4f14      	ldr	r7, [pc, #80]	@ (80123c8 <__ieee754_sqrtf+0xdc>)
 8012376:	6830      	ldr	r0, [r6, #0]
 8012378:	6839      	ldr	r1, [r7, #0]
 801237a:	f7ee fbf1 	bl	8000b60 <__aeabi_fsub>
 801237e:	f8d6 8000 	ldr.w	r8, [r6]
 8012382:	4601      	mov	r1, r0
 8012384:	4640      	mov	r0, r8
 8012386:	f7ee fe9d 	bl	80010c4 <__aeabi_fcmple>
 801238a:	b150      	cbz	r0, 80123a2 <__ieee754_sqrtf+0xb6>
 801238c:	6830      	ldr	r0, [r6, #0]
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	f7ee fbe8 	bl	8000b64 <__addsf3>
 8012394:	6836      	ldr	r6, [r6, #0]
 8012396:	4601      	mov	r1, r0
 8012398:	4630      	mov	r0, r6
 801239a:	f7ee fe89 	bl	80010b0 <__aeabi_fcmplt>
 801239e:	b168      	cbz	r0, 80123bc <__ieee754_sqrtf+0xd0>
 80123a0:	3402      	adds	r4, #2
 80123a2:	1064      	asrs	r4, r4, #1
 80123a4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80123a8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80123ac:	e7af      	b.n	801230e <__ieee754_sqrtf+0x22>
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	3201      	adds	r2, #1
 80123b2:	0218      	lsls	r0, r3, #8
 80123b4:	d5fb      	bpl.n	80123ae <__ieee754_sqrtf+0xc2>
 80123b6:	3a01      	subs	r2, #1
 80123b8:	1a89      	subs	r1, r1, r2
 80123ba:	e7bb      	b.n	8012334 <__ieee754_sqrtf+0x48>
 80123bc:	3401      	adds	r4, #1
 80123be:	f024 0401 	bic.w	r4, r4, #1
 80123c2:	e7ee      	b.n	80123a2 <__ieee754_sqrtf+0xb6>
 80123c4:	2000009c 	.word	0x2000009c
 80123c8:	20000098 	.word	0x20000098

080123cc <_init>:
 80123cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ce:	bf00      	nop
 80123d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123d2:	bc08      	pop	{r3}
 80123d4:	469e      	mov	lr, r3
 80123d6:	4770      	bx	lr

080123d8 <_fini>:
 80123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123da:	bf00      	nop
 80123dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123de:	bc08      	pop	{r3}
 80123e0:	469e      	mov	lr, r3
 80123e2:	4770      	bx	lr
