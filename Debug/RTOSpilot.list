
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d518  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800d708  0800d708  0000e708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8b4  0800d8b4  0000f0a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8b4  0800d8b4  0000f0a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8b4  0800d8b4  0000f0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8b4  0800d8b4  0000e8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8b8  0800d8b8  0000e8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800d8bc  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200000a0  0800d95c  0000f0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200017e8  0800d95c  0000f7e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222b0  00000000  00000000  0000f0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005df0  00000000  00000000  00031379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00037170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001665  00000000  00000000  00038e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000073c4  00000000  00000000  0003a4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ea9  00000000  00000000  000418a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abf2d  00000000  00000000  0006a752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011667f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d40  00000000  00000000  001166c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0011e404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a0 	.word	0x200000a0
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d6f0 	.word	0x0800d6f0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a4 	.word	0x200000a4
 800022c:	0800d6f0 	.word	0x0800d6f0

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <__aeabi_f2uiz>:
 8001218:	0042      	lsls	r2, r0, #1
 800121a:	d20e      	bcs.n	800123a <__aeabi_f2uiz+0x22>
 800121c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001220:	d30b      	bcc.n	800123a <__aeabi_f2uiz+0x22>
 8001222:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800122a:	d409      	bmi.n	8001240 <__aeabi_f2uiz+0x28>
 800122c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001234:	fa23 f002 	lsr.w	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	4770      	bx	lr
 8001240:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001244:	d101      	bne.n	800124a <__aeabi_f2uiz+0x32>
 8001246:	0242      	lsls	r2, r0, #9
 8001248:	d102      	bne.n	8001250 <__aeabi_f2uiz+0x38>
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	4770      	bx	lr
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e008      	b.n	8001278 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 8001266:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <ibus_init+0x44>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b09      	cmp	r3, #9
 800127c:	ddf3      	ble.n	8001266 <ibus_init+0xe>
    }
	uart = uartt;
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <ibus_init+0x48>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <ibus_init+0x48>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <ibus_init+0x4c>)
 800128c:	4618      	mov	r0, r3
 800128e:	f008 ff20 	bl	800a0d2 <HAL_UART_Receive_IT>
#endif
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000c0 	.word	0x200000c0
 80012a0:	2000010c 	.word	0x2000010c
 80012a4:	20000108 	.word	0x20000108

080012a8 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
   return uart;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <ibus_uart_port+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000010c 	.word	0x2000010c

080012bc <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <ibus_calback+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f80d 	bl	80012e4 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <ibus_calback+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4902      	ldr	r1, [pc, #8]	@ (80012dc <ibus_calback+0x20>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f008 fefd 	bl	800a0d2 <HAL_UART_Receive_IT>
#endif

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000108 	.word	0x20000108
 80012e0:	2000010c 	.word	0x2000010c

080012e4 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <ibusDataReceive+0x78>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <ibusDataReceive+0x7c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <ibusDataReceive+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800130a:	4293      	cmp	r3, r2
 800130c:	d902      	bls.n	8001314 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <ibusDataReceive+0x84>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <ibusDataReceive+0x80>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <ibusDataReceive+0x84>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <ibusDataReceive+0x44>
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b20      	cmp	r3, #32
 8001326:	d114      	bne.n	8001352 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <ibusDataReceive+0x84>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <ibusDataReceive+0x88>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <ibusDataReceive+0x84>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b1f      	cmp	r3, #31
 800133a:	d103      	bne.n	8001344 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <ibusDataReceive+0x8c>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e007      	b.n	8001354 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <ibusDataReceive+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <ibusDataReceive+0x84>)
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e000      	b.n	8001354 <ibusDataReceive+0x70>
        return;
 8001352:	bf00      	nop
    }
}
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000300 	.word	0x20000300
 8001360:	20000304 	.word	0x20000304
 8001364:	20000110 	.word	0x20000110
 8001368:	20000114 	.word	0x20000114
 800136c:	200000e8 	.word	0x200000e8
 8001370:	200000bc 	.word	0x200000bc

08001374 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 800137a:	4b50      	ldr	r3, [pc, #320]	@ (80014bc <ibusFrameComplete+0x148>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8096 	beq.w	80014b0 <ibusFrameComplete+0x13c>
        ibusFrameDone = FALSE;
 8001384:	4b4d      	ldr	r3, [pc, #308]	@ (80014bc <ibusFrameComplete+0x148>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 800138a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138e:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e009      	b.n	80013aa <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4a49      	ldr	r2, [pc, #292]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	461a      	mov	r2, r3
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b1d      	cmp	r3, #29
 80013ae:	d9f2      	bls.n	8001396 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80013b0:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013b2:	7f9b      	ldrb	r3, [r3, #30]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013b8:	7fdb      	ldrb	r3, [r3, #31]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 80013c2:	89ba      	ldrh	r2, [r7, #12]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d172      	bne.n	80014b0 <ibusFrameComplete+0x13c>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 80013ca:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013cc:	78db      	ldrb	r3, [r3, #3]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	4a3b      	ldr	r2, [pc, #236]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013d2:	7892      	ldrb	r2, [r2, #2]
 80013d4:	4413      	add	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <ibusFrameComplete+0x150>)
 80013da:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 80013dc:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013de:	795b      	ldrb	r3, [r3, #5]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4a37      	ldr	r2, [pc, #220]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013e4:	7912      	ldrb	r2, [r2, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <ibusFrameComplete+0x150>)
 80013ec:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80013ee:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013f0:	79db      	ldrb	r3, [r3, #7]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	4a32      	ldr	r2, [pc, #200]	@ (80014c0 <ibusFrameComplete+0x14c>)
 80013f6:	7992      	ldrb	r2, [r2, #6]
 80013f8:	4413      	add	r3, r2
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <ibusFrameComplete+0x150>)
 80013fe:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001402:	7a5b      	ldrb	r3, [r3, #9]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001408:	7a12      	ldrb	r2, [r2, #8]
 800140a:	4413      	add	r3, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001410:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001414:	7adb      	ldrb	r3, [r3, #11]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800141a:	7a92      	ldrb	r2, [r2, #10]
 800141c:	4413      	add	r3, r2
 800141e:	461a      	mov	r2, r3
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001422:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001424:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001426:	7b5b      	ldrb	r3, [r3, #13]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800142c:	7b12      	ldrb	r2, [r2, #12]
 800142e:	4413      	add	r3, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001434:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001436:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001438:	7bdb      	ldrb	r3, [r3, #15]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	4a20      	ldr	r2, [pc, #128]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800143e:	7b92      	ldrb	r2, [r2, #14]
 8001440:	4413      	add	r3, r2
 8001442:	461a      	mov	r2, r3
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001446:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800144a:	7c5b      	ldrb	r3, [r3, #17]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001450:	7c12      	ldrb	r2, [r2, #16]
 8001452:	4413      	add	r3, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001458:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800145c:	7cdb      	ldrb	r3, [r3, #19]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001462:	7c92      	ldrb	r2, [r2, #18]
 8001464:	4413      	add	r3, r2
 8001466:	461a      	mov	r2, r3
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <ibusFrameComplete+0x150>)
 800146a:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <ibusFrameComplete+0x14c>)
 800146e:	7d5b      	ldrb	r3, [r3, #21]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <ibusFrameComplete+0x14c>)
 8001474:	7d12      	ldrb	r2, [r2, #20]
 8001476:	4413      	add	r3, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <ibusFrameComplete+0x150>)
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24
			
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	e010      	b.n	80014a6 <ibusFrameComplete+0x132>
			    if(ibusChannelData[i] > 2100){
 8001484:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	f640 0234 	movw	r2, #2100	@ 0x834
 8001490:	4293      	cmp	r3, r2
 8001492:	d905      	bls.n	80014a0 <ibusFrameComplete+0x12c>
				    ibusChannelData[i] = 1000;
 8001494:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <ibusFrameComplete+0x150>)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800149c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	ddeb      	ble.n	8001484 <ibusFrameComplete+0x110>
				}
			}
            return TRUE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <ibusFrameComplete+0x13e>
        }
    }
    return FALSE;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	200000bc 	.word	0x200000bc
 80014c0:	200000e8 	.word	0x200000e8
 80014c4:	200000c0 	.word	0x200000c0

080014c8 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <mpu6050Connection+0x24>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	2305      	movs	r3, #5
 80014d2:	2203      	movs	r2, #3
 80014d4:	21d0      	movs	r1, #208	@ 0xd0
 80014d6:	f005 fb59 	bl	8006b8c <HAL_I2C_IsDeviceReady>
 80014da:	4603      	mov	r3, r0
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <mpu6050Connection+0x28>)
 80014e0:	701a      	strb	r2, [r3, #0]
    return isConnected;
 80014e2:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <mpu6050Connection+0x28>)
 80014e4:	f993 3000 	ldrsb.w	r3, [r3]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000118 	.word	0x20000118
 80014f0:	2000011c 	.word	0x2000011c

080014f4 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 80014fc:	4a25      	ldr	r2, [pc, #148]	@ (8001594 <mpu6050_init+0xa0>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8001502:	f7ff ffe1 	bl	80014c8 <mpu6050Connection>
 8001506:	4603      	mov	r3, r0
 8001508:	73fb      	strb	r3, [r7, #15]
	if(!k){
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d13a      	bne.n	8001588 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 8001512:	236b      	movs	r3, #107	@ 0x6b
 8001514:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001516:	2300      	movs	r3, #0
 8001518:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <mpu6050_init+0xa0>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f107 0208 	add.w	r2, r7, #8
 8001522:	2301      	movs	r3, #1
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2302      	movs	r3, #2
 8001528:	21d0      	movs	r1, #208	@ 0xd0
 800152a:	f004 fc63 	bl	8005df4 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 800152e:	231b      	movs	r3, #27
 8001530:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 8001532:	2310      	movs	r3, #16
 8001534:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <mpu6050_init+0xa0>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	f107 0208 	add.w	r2, r7, #8
 800153e:	2301      	movs	r3, #1
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	21d0      	movs	r1, #208	@ 0xd0
 8001546:	f004 fc55 	bl	8005df4 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 800154a:	231c      	movs	r3, #28
 800154c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 800154e:	2318      	movs	r3, #24
 8001550:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <mpu6050_init+0xa0>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	f107 0208 	add.w	r2, r7, #8
 800155a:	2301      	movs	r3, #1
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2302      	movs	r3, #2
 8001560:	21d0      	movs	r1, #208	@ 0xd0
 8001562:	f004 fc47 	bl	8005df4 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8001566:	2337      	movs	r3, #55	@ 0x37
 8001568:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 800156a:	7a7b      	ldrb	r3, [r7, #9]
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001574:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <mpu6050_init+0xa0>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	2301      	movs	r3, #1
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2302      	movs	r3, #2
 8001582:	21d0      	movs	r1, #208	@ 0xd0
 8001584:	f004 fc36 	bl	8005df4 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001588:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000118 	.word	0x20000118

08001598 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 80015a0:	2343      	movs	r3, #67	@ 0x43
 80015a2:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <mpu6050_gyro_get_raw+0x74>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	f107 0208 	add.w	r2, r7, #8
 80015ac:	2301      	movs	r3, #1
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	21d0      	movs	r1, #208	@ 0xd0
 80015b4:	f004 fc1e 	bl	8005df4 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <mpu6050_gyro_get_raw+0x74>)
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	f107 0208 	add.w	r2, r7, #8
 80015c0:	2301      	movs	r3, #1
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2306      	movs	r3, #6
 80015c6:	21d0      	movs	r1, #208	@ 0xd0
 80015c8:	f004 fd12 	bl	8005ff0 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 80015cc:	7a3b      	ldrb	r3, [r7, #8]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	7a7b      	ldrb	r3, [r7, #9]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21a      	sxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 80015de:	7abb      	ldrb	r3, [r7, #10]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 80015f0:	7b3b      	ldrb	r3, [r7, #12]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7b7b      	ldrb	r3, [r7, #13]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	809a      	strh	r2, [r3, #4]
	}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000118 	.word	0x20000118

08001610 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	6810      	ldr	r0, [r2, #0]
 8001620:	6018      	str	r0, [r3, #0]
 8001622:	8892      	ldrh	r2, [r2, #4]
 8001624:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001626:	233b      	movs	r3, #59	@ 0x3b
 8001628:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <mpu6050_acc_get_raw+0x80>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	f107 0208 	add.w	r2, r7, #8
 8001632:	2301      	movs	r3, #1
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	21d0      	movs	r1, #208	@ 0xd0
 800163a:	f004 fbdb 	bl	8005df4 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <mpu6050_acc_get_raw+0x80>)
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	f107 0208 	add.w	r2, r7, #8
 8001646:	2301      	movs	r3, #1
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2306      	movs	r3, #6
 800164c:	21d0      	movs	r1, #208	@ 0xd0
 800164e:	f004 fccf 	bl	8005ff0 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8001652:	7a3b      	ldrb	r3, [r7, #8]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	7a7b      	ldrb	r3, [r7, #9]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21a      	sxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8001664:	7abb      	ldrb	r3, [r7, #10]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001676:	7b3b      	ldrb	r3, [r7, #12]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21a      	sxth	r2, r3
 800167c:	7b7b      	ldrb	r3, [r7, #13]
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	809a      	strh	r2, [r3, #4]
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000118 	.word	0x20000118

08001694 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <qmc5883_init+0x54>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 80016a2:	230b      	movs	r3, #11
 80016a4:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 80016a6:	2301      	movs	r3, #1
 80016a8:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <qmc5883_init+0x54>)
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	231a      	movs	r3, #26
 80016b0:	4619      	mov	r1, r3
 80016b2:	f107 020c 	add.w	r2, r7, #12
 80016b6:	2301      	movs	r3, #1
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2302      	movs	r3, #2
 80016bc:	f004 fb9a 	bl	8005df4 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 80016c0:	2309      	movs	r3, #9
 80016c2:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 80016c4:	231d      	movs	r3, #29
 80016c6:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <qmc5883_init+0x54>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	231a      	movs	r3, #26
 80016ce:	4619      	mov	r1, r3
 80016d0:	f107 020c 	add.w	r2, r7, #12
 80016d4:	2301      	movs	r3, #1
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2302      	movs	r3, #2
 80016da:	f004 fb8b 	bl	8005df4 <HAL_I2C_Master_Transmit>
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000120 	.word	0x20000120

080016ec <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	2300      	movs	r3, #0
 80016fa:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <qmc_get_raw+0x6c>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	231a      	movs	r3, #26
 8001702:	4619      	mov	r1, r3
 8001704:	2301      	movs	r3, #1
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2306      	movs	r3, #6
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	2200      	movs	r2, #0
 8001716:	f004 ffd1 	bl	80066bc <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 800171a:	7a7b      	ldrb	r3, [r7, #9]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	7a3b      	ldrb	r3, [r7, #8]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21a      	sxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 800173e:	7b7b      	ldrb	r3, [r7, #13]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	7b3b      	ldrb	r3, [r7, #12]
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21a      	sxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	809a      	strh	r2, [r3, #4]
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000120 	.word	0x20000120

0800175c <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <compassInit+0x64>)
 8001762:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001766:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <compassInit+0x64>)
 800176a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800176e:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <compassInit+0x64>)
 8001772:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001776:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <compassInit+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <compassInit+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <compassInit+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <compassInit+0x68>)
 800178c:	2100      	movs	r1, #0
 800178e:	480e      	ldr	r0, [pc, #56]	@ (80017c8 <compassInit+0x6c>)
 8001790:	f003 f8b4 	bl	80048fc <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001794:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <compassInit+0x68>)
 8001796:	2101      	movs	r1, #1
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <compassInit+0x6c>)
 800179a:	f003 f8ef 	bl	800497c <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 800179e:	480b      	ldr	r0, [pc, #44]	@ (80017cc <compassInit+0x70>)
 80017a0:	f7ff ff78 	bl	8001694 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 80017a4:	2120      	movs	r1, #32
 80017a6:	480a      	ldr	r0, [pc, #40]	@ (80017d0 <compassInit+0x74>)
 80017a8:	f004 f998 	bl	8005adc <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <compassInit+0x5c>
      compass_calibrate();
 80017b2:	f000 f8f3 	bl	800199c <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 80017b6:	e001      	b.n	80017bc <compassInit+0x60>
      read_calibrate_file();
 80017b8:	f000 f87c 	bl	80018b4 <read_calibrate_file>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000014c 	.word	0x2000014c
 80017c4:	200005e4 	.word	0x200005e4
 80017c8:	20000128 	.word	0x20000128
 80017cc:	20000590 	.word	0x20000590
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <compass_get>:

void compass_get(axis3_t *out){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff83 	bl	80016ec <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 80017e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <compass_get+0xdc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 80017fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <compass_get+0xdc>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	b29b      	uxth	r3, r3
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	b21a      	sxth	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <compass_get+0xdc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21a      	sxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fa9c 	bl	8000d6c <__aeabi_i2f>
 8001834:	4602      	mov	r2, r0
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <compass_get+0xdc>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff fae9 	bl	8000e14 <__aeabi_fmul>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fcc1 	bl	80011cc <__aeabi_f2iz>
 800184a:	4603      	mov	r3, r0
 800184c:	b21a      	sxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fa87 	bl	8000d6c <__aeabi_i2f>
 800185e:	4602      	mov	r2, r0
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <compass_get+0xdc>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f7ff fad4 	bl	8000e14 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fcac 	bl	80011cc <__aeabi_f2iz>
 8001874:	4603      	mov	r3, r0
 8001876:	b21a      	sxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa72 	bl	8000d6c <__aeabi_i2f>
 8001888:	4602      	mov	r2, r0
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <compass_get+0xdc>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff fabf 	bl	8000e14 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fc97 	bl	80011cc <__aeabi_f2iz>
 800189e:	4603      	mov	r3, r0
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	809a      	strh	r2, [r3, #4]
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000014c 	.word	0x2000014c

080018b4 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 80018be:	4b33      	ldr	r3, [pc, #204]	@ (800198c <read_calibrate_file+0xd8>)
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	231c      	movs	r3, #28
 80018c4:	2210      	movs	r2, #16
 80018c6:	4932      	ldr	r1, [pc, #200]	@ (8001990 <read_calibrate_file+0xdc>)
 80018c8:	f003 f9b1 	bl	8004c2e <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fa4d 	bl	8000d6c <__aeabi_i2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <read_calibrate_file+0xdc>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4619      	mov	r1, r3
 80018da:	4610      	mov	r0, r2
 80018dc:	f7ff f992 	bl	8000c04 <__addsf3>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc72 	bl	80011cc <__aeabi_f2iz>
 80018e8:	4603      	mov	r3, r0
 80018ea:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fa3d 	bl	8000d6c <__aeabi_i2f>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <read_calibrate_file+0xdc>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff f982 	bl	8000c04 <__addsf3>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fc62 	bl	80011cc <__aeabi_f2iz>
 8001908:	4603      	mov	r3, r0
 800190a:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fa2d 	bl	8000d6c <__aeabi_i2f>
 8001912:	4602      	mov	r2, r0
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <read_calibrate_file+0xdc>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f7ff f972 	bl	8000c04 <__addsf3>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fc52 	bl	80011cc <__aeabi_f2iz>
 8001928:	4603      	mov	r3, r0
 800192a:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <read_calibrate_file+0xdc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <read_calibrate_file+0xdc>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <read_calibrate_file+0xdc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <read_calibrate_file+0xdc>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	2b28      	cmp	r3, #40	@ 0x28
 800195e:	dd11      	ble.n	8001984 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001960:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <read_calibrate_file+0xe0>)
 8001966:	f004 f8e8 	bl	8005b3a <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800196a:	2120      	movs	r1, #32
 800196c:	480a      	ldr	r0, [pc, #40]	@ (8001998 <read_calibrate_file+0xe4>)
 800196e:	f004 f8e4 	bl	8005b3a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001972:	2110      	movs	r1, #16
 8001974:	4808      	ldr	r0, [pc, #32]	@ (8001998 <read_calibrate_file+0xe4>)
 8001976:	f004 f8e0 	bl	8005b3a <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 800197a:	2032      	movs	r0, #50	@ 0x32
 800197c:	f003 fcd4 	bl	8005328 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001980:	bf00      	nop
 8001982:	e7ed      	b.n	8001960 <read_calibrate_file+0xac>
      }
    }
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000128 	.word	0x20000128
 8001990:	2000014c 	.word	0x2000014c
 8001994:	40011000 	.word	0x40011000
 8001998:	40010800 	.word	0x40010800

0800199c <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b095      	sub	sp, #84	@ 0x54
 80019a0:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 80019a2:	4a9f      	ldr	r2, [pc, #636]	@ (8001c20 <compass_calibrate+0x284>)
 80019a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ac:	6018      	str	r0, [r3, #0]
 80019ae:	3304      	adds	r3, #4
 80019b0:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 80019b2:	4a9c      	ldr	r2, [pc, #624]	@ (8001c24 <compass_calibrate+0x288>)
 80019b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019bc:	6018      	str	r0, [r3, #0]
 80019be:	3304      	adds	r3, #4
 80019c0:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 80019c8:	4b97      	ldr	r3, [pc, #604]	@ (8001c28 <compass_calibrate+0x28c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 80019ce:	e0b5      	b.n	8001b3c <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fe8a 	bl	80016ec <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 80019d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 80019e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019e4:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 80019e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ea:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 80019ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019f0:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 80019f8:	e0a0      	b.n	8001b3c <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 80019fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001a22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001a36:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001a3a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001a3e:	fb03 f202 	mul.w	r2, r3, r2
 8001a42:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001a46:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	441a      	add	r2, r3
 8001a50:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001a54:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd38 	bl	80004d4 <__aeabi_i2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f00b fcbc 	bl	800d3e8 <sqrt>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f846 	bl	8000b08 <__aeabi_d2iz>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001a82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001a86:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	dd09      	ble.n	8001aa2 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001a94:	4b64      	ldr	r3, [pc, #400]	@ (8001c28 <compass_calibrate+0x28c>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <compass_calibrate+0x28c>)
 8001a9e:	801a      	strh	r2, [r3, #0]
            continue;
 8001aa0:	e04c      	b.n	8001b3c <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001aa2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aa6:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aac:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001aae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ab2:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001ab4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ab8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dd02      	ble.n	8001ac6 <compass_calibrate+0x12a>
 8001ac0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ac4:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001ac6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001aca:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dd02      	ble.n	8001ad8 <compass_calibrate+0x13c>
 8001ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001ad8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001adc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dd02      	ble.n	8001aea <compass_calibrate+0x14e>
 8001ae4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ae8:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001aea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001aee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001af2:	429a      	cmp	r2, r3
 8001af4:	da02      	bge.n	8001afc <compass_calibrate+0x160>
 8001af6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001afa:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001afc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b00:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001b04:	429a      	cmp	r2, r3
 8001b06:	da02      	bge.n	8001b0e <compass_calibrate+0x172>
 8001b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0c:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001b0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b12:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001b16:	429a      	cmp	r2, r3
 8001b18:	da02      	bge.n	8001b20 <compass_calibrate+0x184>
 8001b1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b1e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001b20:	2110      	movs	r1, #16
 8001b22:	4842      	ldr	r0, [pc, #264]	@ (8001c2c <compass_calibrate+0x290>)
 8001b24:	f004 f809 	bl	8005b3a <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001b28:	2014      	movs	r0, #20
 8001b2a:	f003 fbfd 	bl	8005328 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001b2e:	2120      	movs	r1, #32
 8001b30:	483f      	ldr	r0, [pc, #252]	@ (8001c30 <compass_calibrate+0x294>)
 8001b32:	f003 ffd3 	bl	8005adc <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <compass_calibrate+0x1ae>
	while(!file_open){
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <compass_calibrate+0x298>)
 8001b3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f43f af44 	beq.w	80019d0 <compass_calibrate+0x34>
 8001b48:	e000      	b.n	8001b4c <compass_calibrate+0x1b0>
              break;
 8001b4a:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001b4c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dc02      	bgt.n	8001b5a <compass_calibrate+0x1be>
 8001b54:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001b58:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001b5a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db02      	blt.n	8001b68 <compass_calibrate+0x1cc>
 8001b62:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001b66:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001b68:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001b72:	4413      	add	r3, r2
 8001b74:	0fda      	lsrs	r2, r3, #31
 8001b76:	4413      	add	r3, r2
 8001b78:	105b      	asrs	r3, r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001b7c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001b80:	461a      	mov	r2, r3
 8001b82:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001b86:	4413      	add	r3, r2
 8001b88:	0fda      	lsrs	r2, r3, #31
 8001b8a:	4413      	add	r3, r2
 8001b8c:	105b      	asrs	r3, r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001b90:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001b94:	461a      	mov	r2, r3
 8001b96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001b9a:	4413      	add	r3, r2
 8001b9c:	0fda      	lsrs	r2, r3, #31
 8001b9e:	4413      	add	r3, r2
 8001ba0:	105b      	asrs	r3, r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001ba4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bfb8      	it	lt
 8001bac:	425b      	neglt	r3, r3
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bfb8      	it	lt
 8001bb8:	425b      	neglt	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001bc4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bfb8      	it	lt
 8001bcc:	425b      	neglt	r3, r3
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bfb8      	it	lt
 8001bd8:	425b      	neglt	r3, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001be4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bfb8      	it	lt
 8001bec:	425b      	neglt	r3, r3
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfb8      	it	lt
 8001bf8:	425b      	neglt	r3, r3
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8001c08:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8001c0c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dd11      	ble.n	8001c38 <compass_calibrate+0x29c>
        max_value = x_;
 8001c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c18:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001c1c:	e010      	b.n	8001c40 <compass_calibrate+0x2a4>
 8001c1e:	bf00      	nop
 8001c20:	0800d708 	.word	0x0800d708
 8001c24:	0800d710 	.word	0x0800d710
 8001c28:	20000124 	.word	0x20000124
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	20000168 	.word	0x20000168
    else
        max_value = y_;
 8001c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001c3c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8001c40:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001c44:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	da02      	bge.n	8001c52 <compass_calibrate+0x2b6>
        max_value = z_;
 8001c4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8001c52:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f888 	bl	8000d6c <__aeabi_i2f>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f882 	bl	8000d6c <__aeabi_i2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff f985 	bl	8000f7c <__aeabi_fdiv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8001c76:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f876 	bl	8000d6c <__aeabi_i2f>
 8001c80:	4604      	mov	r4, r0
 8001c82:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f870 	bl	8000d6c <__aeabi_i2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff f973 	bl	8000f7c <__aeabi_fdiv>
 8001c96:	4603      	mov	r3, r0
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8001c9a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f864 	bl	8000d6c <__aeabi_i2f>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f85e 	bl	8000d6c <__aeabi_i2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff f961 	bl	8000f7c <__aeabi_fdiv>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8001cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f851 	bl	8000d6c <__aeabi_i2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f7fe ff97 	bl	8000c04 <__addsf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fa77 	bl	80011cc <__aeabi_f2iz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8001ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f841 	bl	8000d6c <__aeabi_i2f>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	f7fe ff87 	bl	8000c04 <__addsf3>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fa67 	bl	80011cc <__aeabi_f2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f831 	bl	8000d6c <__aeabi_i2f>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7fe ff77 	bl	8000c04 <__addsf3>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fa57 	bl	80011cc <__aeabi_f2iz>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8001d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4413      	add	r3, r2
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 8001d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	4413      	add	r3, r2
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8001d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <compass_calibrate+0x3c4>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f107 0114 	add.w	r1, r7, #20
 8001d42:	231c      	movs	r3, #28
 8001d44:	2210      	movs	r2, #16
 8001d46:	f002 fe70 	bl	8004a2a <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <compass_calibrate+0x3c8>)
 8001d4e:	f003 fef4 	bl	8005b3a <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8001d52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d56:	f003 fae7 	bl	8005328 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d5a:	bf00      	nop
 8001d5c:	e7f5      	b.n	8001d4a <compass_calibrate+0x3ae>
 8001d5e:	bf00      	nop
 8001d60:	20000128 	.word	0x20000128
 8001d64:	40010800 	.word	0x40010800

08001d68 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 8001d72:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <gps_init+0xa8>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8001d78:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <gps_init+0xac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <gps_init+0xb0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a25      	ldr	r2, [pc, #148]	@ (8001e1c <gps_init+0xb4>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	4a24      	ldr	r2, [pc, #144]	@ (8001e20 <gps_init+0xb8>)
 8001d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 8001d92:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <gps_init+0xbc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 8001d98:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <gps_init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <gps_init+0xc4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <gps_init+0xa8>)
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dac:	22a8      	movs	r2, #168	@ 0xa8
 8001dae:	4920      	ldr	r1, [pc, #128]	@ (8001e30 <gps_init+0xc8>)
 8001db0:	f008 f90c 	bl	8009fcc <HAL_UART_Transmit>
    HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f003 fab7 	bl	8005328 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <gps_init+0xa8>)
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	491b      	ldr	r1, [pc, #108]	@ (8001e34 <gps_init+0xcc>)
 8001dc6:	f008 f901 	bl	8009fcc <HAL_UART_Transmit>
    HAL_Delay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f003 faac 	bl	8005328 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <gps_init+0xa8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd8:	221c      	movs	r2, #28
 8001dda:	4917      	ldr	r1, [pc, #92]	@ (8001e38 <gps_init+0xd0>)
 8001ddc:	f008 f8f6 	bl	8009fcc <HAL_UART_Transmit>
    HAL_Delay(10);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f003 faa1 	bl	8005328 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <gps_init+0xa8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <gps_init+0xa8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f008 f89a 	bl	8009f2c <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <gps_init+0xa8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	490f      	ldr	r1, [pc, #60]	@ (8001e3c <gps_init+0xd4>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f008 f966 	bl	800a0d2 <HAL_UART_Receive_IT>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200001a4 	.word	0x200001a4
 8001e14:	20000300 	.word	0x20000300
 8001e18:	20000304 	.word	0x20000304
 8001e1c:	10624dd3 	.word	0x10624dd3
 8001e20:	2000016c 	.word	0x2000016c
 8001e24:	200001b2 	.word	0x200001b2
 8001e28:	200001b4 	.word	0x200001b4
 8001e2c:	200001b0 	.word	0x200001b0
 8001e30:	0800d7b0 	.word	0x0800d7b0
 8001e34:	20000000 	.word	0x20000000
 8001e38:	0800d858 	.word	0x0800d858
 8001e3c:	200001a8 	.word	0x200001a8

08001e40 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <gps_uart_port+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	200001a4 	.word	0x200001a4

08001e54 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <gps_callback+0x2c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a08      	ldr	r2, [pc, #32]	@ (8001e80 <gps_callback+0x2c>)
 8001e60:	6013      	str	r3, [r2, #0]
   newdata(_char);
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <gps_callback+0x30>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f8f6 	bl	8002058 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <gps_callback+0x34>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4904      	ldr	r1, [pc, #16]	@ (8001e84 <gps_callback+0x30>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f008 f92c 	bl	800a0d2 <HAL_UART_Receive_IT>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000280 	.word	0x20000280
 8001e84:	200001a8 	.word	0x200001a8
 8001e88:	200001a4 	.word	0x200001a4

08001e8c <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 8001e90:	4b67      	ldr	r3, [pc, #412]	@ (8002030 <parse_msg+0x1a4>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	dc2b      	bgt.n	8001ef0 <parse_msg+0x64>
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f2c0 80ad 	blt.w	8001ff8 <parse_msg+0x16c>
 8001e9e:	3b02      	subs	r3, #2
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	f200 80a9 	bhi.w	8001ff8 <parse_msg+0x16c>
 8001ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eac <parse_msg+0x20>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ef9 	.word	0x08001ef9
 8001eb0:	08001f6d 	.word	0x08001f6d
 8001eb4:	08001ff9 	.word	0x08001ff9
 8001eb8:	08001ff9 	.word	0x08001ff9
 8001ebc:	08001f99 	.word	0x08001f99
 8001ec0:	08001ff9 	.word	0x08001ff9
 8001ec4:	08001ff9 	.word	0x08001ff9
 8001ec8:	08001ff9 	.word	0x08001ff9
 8001ecc:	08001ff9 	.word	0x08001ff9
 8001ed0:	08001ff9 	.word	0x08001ff9
 8001ed4:	08001ff9 	.word	0x08001ff9
 8001ed8:	08001ff9 	.word	0x08001ff9
 8001edc:	08001ff9 	.word	0x08001ff9
 8001ee0:	08001ff9 	.word	0x08001ff9
 8001ee4:	08001ff9 	.word	0x08001ff9
 8001ee8:	08001ff9 	.word	0x08001ff9
 8001eec:	08001fb1 	.word	0x08001fb1
 8001ef0:	2b30      	cmp	r3, #48	@ 0x30
 8001ef2:	f000 8083 	beq.w	8001ffc <parse_msg+0x170>
 8001ef6:	e07f      	b.n	8001ff8 <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 8001ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8002034 <parse_msg+0x1a8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a4e      	ldr	r2, [pc, #312]	@ (8002038 <parse_msg+0x1ac>)
 8001efe:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8001f00:	4b4c      	ldr	r3, [pc, #304]	@ (8002034 <parse_msg+0x1a8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a4c      	ldr	r2, [pc, #304]	@ (8002038 <parse_msg+0x1ac>)
 8001f06:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 8001f08:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <parse_msg+0x1a8>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002038 <parse_msg+0x1ac>)
 8001f10:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8001f12:	4b48      	ldr	r3, [pc, #288]	@ (8002034 <parse_msg+0x1a8>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4a48      	ldr	r2, [pc, #288]	@ (8002038 <parse_msg+0x1ac>)
 8001f18:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 8001f1a:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <parse_msg+0x1a8>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	4a46      	ldr	r2, [pc, #280]	@ (8002038 <parse_msg+0x1ac>)
 8001f20:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8001f22:	4b46      	ldr	r3, [pc, #280]	@ (800203c <parse_msg+0x1b0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06a      	beq.n	8002000 <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 8001f2a:	4b45      	ldr	r3, [pc, #276]	@ (8002040 <parse_msg+0x1b4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f32:	4b44      	ldr	r3, [pc, #272]	@ (8002044 <parse_msg+0x1b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a43      	ldr	r2, [pc, #268]	@ (8002048 <parse_msg+0x1bc>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	099a      	lsrs	r2, r3, #6
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <parse_msg+0x1b0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	4a3c      	ldr	r2, [pc, #240]	@ (8002038 <parse_msg+0x1ac>)
 8001f48:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <parse_msg+0x1b4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <parse_msg+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a3b      	ldr	r2, [pc, #236]	@ (8002048 <parse_msg+0x1bc>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	099b      	lsrs	r3, r3, #6
 8001f60:	4a36      	ldr	r2, [pc, #216]	@ (800203c <parse_msg+0x1b0>)
 8001f62:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8001f64:	4b39      	ldr	r3, [pc, #228]	@ (800204c <parse_msg+0x1c0>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
            break;
 8001f6a:	e04a      	b.n	8002002 <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 8001f6c:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <parse_msg+0x1a8>)
 8001f6e:	795b      	ldrb	r3, [r3, #5]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <parse_msg+0xf8>
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <parse_msg+0x1a8>)
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d101      	bne.n	8001f84 <parse_msg+0xf8>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <parse_msg+0xfa>
 8001f84:	2300      	movs	r3, #0
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <parse_msg+0x1c4>)
 8001f8a:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8001f8c:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <parse_msg+0x1a8>)
 8001f8e:	791a      	ldrb	r2, [r3, #4]
 8001f90:	4b29      	ldr	r3, [pc, #164]	@ (8002038 <parse_msg+0x1ac>)
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 8001f96:	e034      	b.n	8002002 <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 8001f98:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <parse_msg+0x1a8>)
 8001f9a:	7a9a      	ldrb	r2, [r3, #10]
 8001f9c:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <parse_msg+0x1ac>)
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 8001fa2:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <parse_msg+0x1a8>)
 8001fa4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <parse_msg+0x1ac>)
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 8001fae:	e028      	b.n	8002002 <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <parse_msg+0x1a8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	@ (8002038 <parse_msg+0x1ac>)
 8001fb6:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <parse_msg+0x1a8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <parse_msg+0x1ac>)
 8001fbe:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <parse_msg+0x1a8>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <parse_msg+0x1ac>)
 8001fc6:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <parse_msg+0x1a8>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <parse_msg+0x1ac>)
 8001fd0:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <parse_msg+0x1a8>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <parse_msg+0x1ac>)
 8001fda:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <parse_msg+0x1a8>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <parse_msg+0x1ac>)
 8001fe4:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <parse_msg+0x1a8>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <parse_msg+0x1ac>)
 8001fee:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <parse_msg+0x1c8>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
            break;
 8001ff6:	e004      	b.n	8002002 <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e014      	b.n	8002026 <parse_msg+0x19a>
            break;
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <parse_msg+0x176>
                break;
 8002000:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <parse_msg+0x1c0>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <parse_msg+0x198>
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <parse_msg+0x1c8>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 8002012:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <parse_msg+0x1c0>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <parse_msg+0x1c0>)
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <parse_msg+0x1c8>)
 800201e:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <parse_msg+0x19a>
    }
    return FALSE;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200001b0 	.word	0x200001b0
 8002034:	200001b8 	.word	0x200001b8
 8002038:	2000016c 	.word	0x2000016c
 800203c:	20000284 	.word	0x20000284
 8002040:	20000300 	.word	0x20000300
 8002044:	20000304 	.word	0x20000304
 8002048:	10624dd3 	.word	0x10624dd3
 800204c:	20000288 	.word	0x20000288
 8002050:	20000289 	.word	0x20000289
 8002054:	2000028a 	.word	0x2000028a

08002058 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 8002066:	4b85      	ldr	r3, [pc, #532]	@ (800227c <newdata+0x224>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b08      	cmp	r3, #8
 800206c:	f200 8100 	bhi.w	8002270 <newdata+0x218>
 8002070:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <newdata+0x20>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	0800209d 	.word	0x0800209d
 800207c:	080020b3 	.word	0x080020b3
 8002080:	080020c7 	.word	0x080020c7
 8002084:	080020e3 	.word	0x080020e3
 8002088:	08002115 	.word	0x08002115
 800208c:	08002149 	.word	0x08002149
 8002090:	080021a3 	.word	0x080021a3
 8002094:	080021fb 	.word	0x080021fb
 8002098:	08002219 	.word	0x08002219
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2bb5      	cmp	r3, #181	@ 0xb5
 80020a0:	f040 80df 	bne.w	8002262 <newdata+0x20a>
                _step++;
 80020a4:	4b75      	ldr	r3, [pc, #468]	@ (800227c <newdata+0x224>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b73      	ldr	r3, [pc, #460]	@ (800227c <newdata+0x224>)
 80020ae:	701a      	strb	r2, [r3, #0]
            break;
 80020b0:	e0d7      	b.n	8002262 <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b62      	cmp	r3, #98	@ 0x62
 80020b6:	d106      	bne.n	80020c6 <newdata+0x6e>
                _step++;
 80020b8:	4b70      	ldr	r3, [pc, #448]	@ (800227c <newdata+0x224>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b6e      	ldr	r3, [pc, #440]	@ (800227c <newdata+0x224>)
 80020c2:	701a      	strb	r2, [r3, #0]
                break;
 80020c4:	e0d4      	b.n	8002270 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 80020c6:	4b6d      	ldr	r3, [pc, #436]	@ (800227c <newdata+0x224>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b6b      	ldr	r3, [pc, #428]	@ (800227c <newdata+0x224>)
 80020d0:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 80020d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002280 <newdata+0x228>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	7013      	strb	r3, [r2, #0]
 80020d8:	4b69      	ldr	r3, [pc, #420]	@ (8002280 <newdata+0x228>)
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	4b69      	ldr	r3, [pc, #420]	@ (8002284 <newdata+0x22c>)
 80020de:	701a      	strb	r2, [r3, #0]
            break;
 80020e0:	e0c6      	b.n	8002270 <newdata+0x218>
        case 3: // ID
            _step++;
 80020e2:	4b66      	ldr	r3, [pc, #408]	@ (800227c <newdata+0x224>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b64      	ldr	r3, [pc, #400]	@ (800227c <newdata+0x224>)
 80020ec:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80020ee:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <newdata+0x228>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4413      	add	r3, r2
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b61      	ldr	r3, [pc, #388]	@ (8002280 <newdata+0x228>)
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	4b60      	ldr	r3, [pc, #384]	@ (8002280 <newdata+0x228>)
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <newdata+0x22c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4413      	add	r3, r2
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b5e      	ldr	r3, [pc, #376]	@ (8002284 <newdata+0x22c>)
 800210a:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 800210c:	4a5e      	ldr	r2, [pc, #376]	@ (8002288 <newdata+0x230>)
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	7013      	strb	r3, [r2, #0]
            break;
 8002112:	e0ad      	b.n	8002270 <newdata+0x218>
        case 4: 
            _step++;
 8002114:	4b59      	ldr	r3, [pc, #356]	@ (800227c <newdata+0x224>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b57      	ldr	r3, [pc, #348]	@ (800227c <newdata+0x224>)
 800211e:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002120:	4b57      	ldr	r3, [pc, #348]	@ (8002280 <newdata+0x228>)
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	4413      	add	r3, r2
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b55      	ldr	r3, [pc, #340]	@ (8002280 <newdata+0x228>)
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	4b54      	ldr	r3, [pc, #336]	@ (8002280 <newdata+0x228>)
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	4b54      	ldr	r3, [pc, #336]	@ (8002284 <newdata+0x22c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b52      	ldr	r3, [pc, #328]	@ (8002284 <newdata+0x22c>)
 800213c:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b52      	ldr	r3, [pc, #328]	@ (800228c <newdata+0x234>)
 8002144:	801a      	strh	r2, [r3, #0]
            break;
 8002146:	e093      	b.n	8002270 <newdata+0x218>
        case 5: 
            _step++;
 8002148:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <newdata+0x224>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <newdata+0x224>)
 8002152:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <newdata+0x228>)
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4413      	add	r3, r2
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b48      	ldr	r3, [pc, #288]	@ (8002280 <newdata+0x228>)
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <newdata+0x228>)
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	4b47      	ldr	r3, [pc, #284]	@ (8002284 <newdata+0x22c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <newdata+0x22c>)
 8002170:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	b29b      	uxth	r3, r3
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b29a      	uxth	r2, r3
 800217a:	4b44      	ldr	r3, [pc, #272]	@ (800228c <newdata+0x234>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b42      	ldr	r3, [pc, #264]	@ (800228c <newdata+0x234>)
 8002184:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <newdata+0x234>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	2bc8      	cmp	r3, #200	@ 0xc8
 800218c:	d905      	bls.n	800219a <newdata+0x142>
                _payload_length = 0;
 800218e:	4b3f      	ldr	r3, [pc, #252]	@ (800228c <newdata+0x234>)
 8002190:	2200      	movs	r2, #0
 8002192:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <newdata+0x224>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 800219a:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <newdata+0x238>)
 800219c:	2200      	movs	r2, #0
 800219e:	801a      	strh	r2, [r3, #0]
            break;
 80021a0:	e066      	b.n	8002270 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 80021a2:	4b37      	ldr	r3, [pc, #220]	@ (8002280 <newdata+0x228>)
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <newdata+0x228>)
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <newdata+0x228>)
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <newdata+0x22c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <newdata+0x22c>)
 80021be:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 80021c0:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <newdata+0x238>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80021c6:	d805      	bhi.n	80021d4 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 80021c8:	4b31      	ldr	r3, [pc, #196]	@ (8002290 <newdata+0x238>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4a31      	ldr	r2, [pc, #196]	@ (8002294 <newdata+0x23c>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <newdata+0x238>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <newdata+0x238>)
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <newdata+0x238>)
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	4b29      	ldr	r3, [pc, #164]	@ (800228c <newdata+0x234>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d13c      	bne.n	8002266 <newdata+0x20e>
                _step++;
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <newdata+0x224>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b21      	ldr	r3, [pc, #132]	@ (800227c <newdata+0x224>)
 80021f6:	701a      	strb	r2, [r3, #0]
            break;
 80021f8:	e035      	b.n	8002266 <newdata+0x20e>
        case 7:
            _step++;
 80021fa:	4b20      	ldr	r3, [pc, #128]	@ (800227c <newdata+0x224>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <newdata+0x224>)
 8002204:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8002206:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <newdata+0x228>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	79fa      	ldrb	r2, [r7, #7]
 800220c:	429a      	cmp	r2, r3
 800220e:	d02c      	beq.n	800226a <newdata+0x212>
                _step = 0;         
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <newdata+0x224>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
            break;
 8002216:	e028      	b.n	800226a <newdata+0x212>
        case 8:
            _step = 0;
 8002218:	4b18      	ldr	r3, [pc, #96]	@ (800227c <newdata+0x224>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <newdata+0x22c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	429a      	cmp	r2, r3
 8002226:	d122      	bne.n	800226e <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <newdata+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <newdata+0x244>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	441a      	add	r2, r3
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <newdata+0x248>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <newdata+0x24c>)
 800223e:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <newdata+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <newdata+0x244>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4413      	add	r3, r2
 800224e:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <newdata+0x248>)
 8002250:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 8002252:	f7ff fe1b 	bl	8001e8c <parse_msg>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <newdata+0x218>
            {
                parsed = TRUE;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e006      	b.n	8002270 <newdata+0x218>
            break;
 8002262:	bf00      	nop
 8002264:	e004      	b.n	8002270 <newdata+0x218>
            break;
 8002266:	bf00      	nop
 8002268:	e002      	b.n	8002270 <newdata+0x218>
            break;
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <newdata+0x218>
                break;   
 800226e:	bf00      	nop
            }
    } 
    return parsed;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000028b 	.word	0x2000028b
 8002280:	2000028c 	.word	0x2000028c
 8002284:	2000028d 	.word	0x2000028d
 8002288:	200001b0 	.word	0x200001b0
 800228c:	200001b2 	.word	0x200001b2
 8002290:	200001b4 	.word	0x200001b4
 8002294:	200001b8 	.word	0x200001b8
 8002298:	20000300 	.word	0x20000300
 800229c:	20000304 	.word	0x20000304
 80022a0:	20000290 	.word	0x20000290
 80022a4:	200001ac 	.word	0x200001ac

080022a8 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 80022b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <imu_calibrate+0xbc>)
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 80022bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002368 <imu_calibrate+0xc0>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 80022c4:	4b29      	ldr	r3, [pc, #164]	@ (800236c <imu_calibrate+0xc4>)
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e01f      	b.n	8002312 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f95e 	bl	8001598 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <imu_calibrate+0xc8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a22      	ldr	r2, [pc, #136]	@ (8002370 <imu_calibrate+0xc8>)
 80022e8:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <imu_calibrate+0xc8>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002370 <imu_calibrate+0xc8>)
 80022f6:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <imu_calibrate+0xc8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002300:	4413      	add	r3, r2
 8002302:	4a1b      	ldr	r2, [pc, #108]	@ (8002370 <imu_calibrate+0xc8>)
 8002304:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 8002306:	2001      	movs	r0, #1
 8002308:	f003 f80e 	bl	8005328 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3301      	adds	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002318:	dbdb      	blt.n	80022d2 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <imu_calibrate+0xc8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a15      	ldr	r2, [pc, #84]	@ (8002374 <imu_calibrate+0xcc>)
 8002320:	fb82 1203 	smull	r1, r2, r2, r3
 8002324:	1192      	asrs	r2, r2, #6
 8002326:	17db      	asrs	r3, r3, #31
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	b21a      	sxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <imu_calibrate+0xc8>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <imu_calibrate+0xcc>)
 8002336:	fb82 1203 	smull	r1, r2, r2, r3
 800233a:	1192      	asrs	r2, r2, #6
 800233c:	17db      	asrs	r3, r3, #31
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	b21a      	sxth	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <imu_calibrate+0xc8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <imu_calibrate+0xcc>)
 800234c:	fb82 1203 	smull	r1, r2, r2, r3
 8002350:	1192      	asrs	r2, r2, #6
 8002352:	17db      	asrs	r3, r3, #31
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b21a      	sxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	801a      	strh	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200002ac 	.word	0x200002ac
 8002368:	200002b0 	.word	0x200002b0
 800236c:	200002b4 	.word	0x200002b4
 8002370:	200002e8 	.word	0x200002e8
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t first_loop = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b0a7      	sub	sp, #156	@ 0x9c
 800237c:	af00      	add	r7, sp, #0
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	80fb      	strh	r3, [r7, #6]
 800238a:	4603      	mov	r3, r0
 800238c:	80bb      	strh	r3, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
 8002392:	4613      	mov	r3, r2
 8002394:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emx,emy,emz,wx,wy,wz;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 8002396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fce6 	bl	8000d6c <__aeabi_i2f>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4baf      	ldr	r3, [pc, #700]	@ (8002660 <update_ahrs+0x2e8>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f7fe fde7 	bl	8000f7c <__aeabi_fdiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	49ac      	ldr	r1, [pc, #688]	@ (8002664 <update_ahrs+0x2ec>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd2e 	bl	8000e14 <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy = (gy_/config.gyr_lsb) * RAD;
 80023be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fcd2 	bl	8000d6c <__aeabi_i2f>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4ba5      	ldr	r3, [pc, #660]	@ (8002660 <update_ahrs+0x2e8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f7fe fdd3 	bl	8000f7c <__aeabi_fdiv>
 80023d6:	4603      	mov	r3, r0
 80023d8:	49a2      	ldr	r1, [pc, #648]	@ (8002664 <update_ahrs+0x2ec>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fd1a 	bl	8000e14 <__aeabi_fmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz = (gz_/config.gyr_lsb) * RAD;
 80023e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fcbe 	bl	8000d6c <__aeabi_i2f>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b9b      	ldr	r3, [pc, #620]	@ (8002660 <update_ahrs+0x2e8>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe fdbf 	bl	8000f7c <__aeabi_fdiv>
 80023fe:	4603      	mov	r3, r0
 8002400:	4998      	ldr	r1, [pc, #608]	@ (8002664 <update_ahrs+0x2ec>)
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fd06 	bl	8000e14 <__aeabi_fmul>
 8002408:	4603      	mov	r3, r0
 800240a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 800240e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <update_ahrs+0xb0>
 8002416:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d104      	bne.n	8002428 <update_ahrs+0xb0>
 800241e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 828d 	beq.w	8002942 <update_ahrs+0x5ca>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 8002428:	f9b7 3000 	ldrsh.w	r3, [r7]
 800242c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002430:	fb03 f202 	mul.w	r2, r3, r2
 8002434:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002438:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	@ 0xa8
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002446:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fc8b 	bl	8000d6c <__aeabi_i2f>
 8002456:	4603      	mov	r3, r0
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fe23 	bl	80030a4 <invSqrt_>
 800245e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		acc_x = (float)accx_ * norm;
 8002462:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fc80 	bl	8000d6c <__aeabi_i2f>
 800246c:	4603      	mov	r3, r0
 800246e:	4619      	mov	r1, r3
 8002470:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002474:	f7fe fcce 	bl	8000e14 <__aeabi_fmul>
 8002478:	4603      	mov	r3, r0
 800247a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_y = (float)accy_ * norm;
 800247e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fc72 	bl	8000d6c <__aeabi_i2f>
 8002488:	4603      	mov	r3, r0
 800248a:	4619      	mov	r1, r3
 800248c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002490:	f7fe fcc0 	bl	8000e14 <__aeabi_fmul>
 8002494:	4603      	mov	r3, r0
 8002496:	67fb      	str	r3, [r7, #124]	@ 0x7c
		acc_z = (float)accz_ * norm;
 8002498:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc65 	bl	8000d6c <__aeabi_i2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4619      	mov	r1, r3
 80024a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80024aa:	f7fe fcb3 	bl	8000e14 <__aeabi_fmul>
 80024ae:	4603      	mov	r3, r0
 80024b0:	67bb      	str	r3, [r7, #120]	@ 0x78

		if(first_loop){
 80024b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002668 <update_ahrs+0x2f0>)
 80024b4:	f993 3000 	ldrsb.w	r3, [r3]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <update_ahrs+0x15e>
			dcm[0][2] = acc_x;
 80024bc:	4a6b      	ldr	r2, [pc, #428]	@ (800266c <update_ahrs+0x2f4>)
 80024be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024c2:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 80024c4:	4a69      	ldr	r2, [pc, #420]	@ (800266c <update_ahrs+0x2f4>)
 80024c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024c8:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 80024ca:	4a68      	ldr	r2, [pc, #416]	@ (800266c <update_ahrs+0x2f4>)
 80024cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ce:	6213      	str	r3, [r2, #32]
			first_loop = 0;
 80024d0:	4b65      	ldr	r3, [pc, #404]	@ (8002668 <update_ahrs+0x2f0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 80024d6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80024da:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	@ 0xb0
 80024de:	fb03 f202 	mul.w	r2, r3, r2
 80024e2:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80024e6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	441a      	add	r2, r3
 80024f0:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80024f4:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	@ 0xb8
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fc34 	bl	8000d6c <__aeabi_i2f>
 8002504:	4603      	mov	r3, r0
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fdcc 	bl	80030a4 <invSqrt_>
 800250c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			mx = magx * norm;
 8002510:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fc29 	bl	8000d6c <__aeabi_i2f>
 800251a:	4603      	mov	r3, r0
 800251c:	4619      	mov	r1, r3
 800251e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002522:	f7fe fc77 	bl	8000e14 <__aeabi_fmul>
 8002526:	4603      	mov	r3, r0
 8002528:	677b      	str	r3, [r7, #116]	@ 0x74
			my = magy * norm;
 800252a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fc1c 	bl	8000d6c <__aeabi_i2f>
 8002534:	4603      	mov	r3, r0
 8002536:	4619      	mov	r1, r3
 8002538:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800253c:	f7fe fc6a 	bl	8000e14 <__aeabi_fmul>
 8002540:	4603      	mov	r3, r0
 8002542:	673b      	str	r3, [r7, #112]	@ 0x70
			mz = magz * norm;
 8002544:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fc0f 	bl	8000d6c <__aeabi_i2f>
 800254e:	4603      	mov	r3, r0
 8002550:	4619      	mov	r1, r3
 8002552:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002556:	f7fe fc5d 	bl	8000e14 <__aeabi_fmul>
 800255a:	4603      	mov	r3, r0
 800255c:	66fb      	str	r3, [r7, #108]	@ 0x6c

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 800255e:	4b43      	ldr	r3, [pc, #268]	@ (800266c <update_ahrs+0x2f4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fc55 	bl	8000e14 <__aeabi_fmul>
 800256a:	4603      	mov	r3, r0
 800256c:	461c      	mov	r4, r3
 800256e:	4b3f      	ldr	r3, [pc, #252]	@ (800266c <update_ahrs+0x2f4>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fc4d 	bl	8000e14 <__aeabi_fmul>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	4620      	mov	r0, r4
 8002580:	f7fe fb40 	bl	8000c04 <__addsf3>
 8002584:	4603      	mov	r3, r0
 8002586:	461c      	mov	r4, r3
 8002588:	4b38      	ldr	r3, [pc, #224]	@ (800266c <update_ahrs+0x2f4>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fc40 	bl	8000e14 <__aeabi_fmul>
 8002594:	4603      	mov	r3, r0
 8002596:	4619      	mov	r1, r3
 8002598:	4620      	mov	r0, r4
 800259a:	f7fe fb33 	bl	8000c04 <__addsf3>
 800259e:	4603      	mov	r3, r0
 80025a0:	66bb      	str	r3, [r7, #104]	@ 0x68
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 80025a2:	4b32      	ldr	r3, [pc, #200]	@ (800266c <update_ahrs+0x2f4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fc33 	bl	8000e14 <__aeabi_fmul>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461c      	mov	r4, r3
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <update_ahrs+0x2f4>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fc2b 	bl	8000e14 <__aeabi_fmul>
 80025be:	4603      	mov	r3, r0
 80025c0:	4619      	mov	r1, r3
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7fe fb1e 	bl	8000c04 <__addsf3>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461c      	mov	r4, r3
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <update_ahrs+0x2f4>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fc1e 	bl	8000e14 <__aeabi_fmul>
 80025d8:	4603      	mov	r3, r0
 80025da:	4619      	mov	r1, r3
 80025dc:	4620      	mov	r0, r4
 80025de:	f7fe fb11 	bl	8000c04 <__addsf3>
 80025e2:	4603      	mov	r3, r0
 80025e4:	667b      	str	r3, [r7, #100]	@ 0x64
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 80025e6:	4b21      	ldr	r3, [pc, #132]	@ (800266c <update_ahrs+0x2f4>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fc11 	bl	8000e14 <__aeabi_fmul>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461c      	mov	r4, r3
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <update_ahrs+0x2f4>)
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fc09 	bl	8000e14 <__aeabi_fmul>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	4620      	mov	r0, r4
 8002608:	f7fe fafc 	bl	8000c04 <__addsf3>
 800260c:	4603      	mov	r3, r0
 800260e:	461c      	mov	r4, r3
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <update_ahrs+0x2f4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fbfc 	bl	8000e14 <__aeabi_fmul>
 800261c:	4603      	mov	r3, r0
 800261e:	4619      	mov	r1, r3
 8002620:	4620      	mov	r0, r4
 8002622:	f7fe faef 	bl	8000c04 <__addsf3>
 8002626:	4603      	mov	r3, r0
 8002628:	663b      	str	r3, [r7, #96]	@ 0x60

			bx = sqrtf(hx * hx + hy * hy);
 800262a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800262c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800262e:	f7fe fbf1 	bl	8000e14 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	461c      	mov	r4, r3
 8002636:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002638:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800263a:	f7fe fbeb 	bl	8000e14 <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	4619      	mov	r1, r3
 8002642:	4620      	mov	r0, r4
 8002644:	f7fe fade 	bl	8000c04 <__addsf3>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f00a fef0 	bl	800d430 <sqrtf>
 8002650:	65f8      	str	r0, [r7, #92]	@ 0x5c

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <update_ahrs+0x2f4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fbdb 	bl	8000e14 <__aeabi_fmul>
 800265e:	e007      	b.n	8002670 <update_ahrs+0x2f8>
 8002660:	20000014 	.word	0x20000014
 8002664:	3c8efa35 	.word	0x3c8efa35
 8002668:	20000020 	.word	0x20000020
 800266c:	200002c4 	.word	0x200002c4
 8002670:	4603      	mov	r3, r0
 8002672:	461c      	mov	r4, r3
 8002674:	4b8c      	ldr	r3, [pc, #560]	@ (80028a8 <update_ahrs+0x530>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fbca 	bl	8000e14 <__aeabi_fmul>
 8002680:	4603      	mov	r3, r0
 8002682:	4619      	mov	r1, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f7fe fabd 	bl	8000c04 <__addsf3>
 800268a:	4603      	mov	r3, r0
 800268c:	65bb      	str	r3, [r7, #88]	@ 0x58
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 800268e:	4b86      	ldr	r3, [pc, #536]	@ (80028a8 <update_ahrs+0x530>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fbbd 	bl	8000e14 <__aeabi_fmul>
 800269a:	4603      	mov	r3, r0
 800269c:	461c      	mov	r4, r3
 800269e:	4b82      	ldr	r3, [pc, #520]	@ (80028a8 <update_ahrs+0x530>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fbb5 	bl	8000e14 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7fe faa8 	bl	8000c04 <__addsf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	657b      	str	r3, [r7, #84]	@ 0x54
			wz = bx * dcm[2][0] + bz * dcm[2][2];
 80026b8:	4b7b      	ldr	r3, [pc, #492]	@ (80028a8 <update_ahrs+0x530>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fba8 	bl	8000e14 <__aeabi_fmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461c      	mov	r4, r3
 80026c8:	4b77      	ldr	r3, [pc, #476]	@ (80028a8 <update_ahrs+0x530>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fba0 	bl	8000e14 <__aeabi_fmul>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4619      	mov	r1, r3
 80026d8:	4620      	mov	r0, r4
 80026da:	f7fe fa93 	bl	8000c04 <__addsf3>
 80026de:	4603      	mov	r3, r0
 80026e0:	653b      	str	r3, [r7, #80]	@ 0x50

			emx = my * wz - mz * wy;
 80026e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80026e4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80026e6:	f7fe fb95 	bl	8000e14 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461c      	mov	r4, r3
 80026ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80026f2:	f7fe fb8f 	bl	8000e14 <__aeabi_fmul>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4619      	mov	r1, r3
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7fe fa80 	bl	8000c00 <__aeabi_fsub>
 8002700:	4603      	mov	r3, r0
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
			emy = mz * wx - mx * wz;
 8002704:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002706:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002708:	f7fe fb84 	bl	8000e14 <__aeabi_fmul>
 800270c:	4603      	mov	r3, r0
 800270e:	461c      	mov	r4, r3
 8002710:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002712:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002714:	f7fe fb7e 	bl	8000e14 <__aeabi_fmul>
 8002718:	4603      	mov	r3, r0
 800271a:	4619      	mov	r1, r3
 800271c:	4620      	mov	r0, r4
 800271e:	f7fe fa6f 	bl	8000c00 <__aeabi_fsub>
 8002722:	4603      	mov	r3, r0
 8002724:	64bb      	str	r3, [r7, #72]	@ 0x48
			emz = mx * wy - my * wx;
 8002726:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002728:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800272a:	f7fe fb73 	bl	8000e14 <__aeabi_fmul>
 800272e:	4603      	mov	r3, r0
 8002730:	461c      	mov	r4, r3
 8002732:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002734:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002736:	f7fe fb6d 	bl	8000e14 <__aeabi_fmul>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	4620      	mov	r0, r4
 8002740:	f7fe fa5e 	bl	8000c00 <__aeabi_fsub>
 8002744:	4603      	mov	r3, r0
 8002746:	647b      	str	r3, [r7, #68]	@ 0x44
			emx = 0.0f;
			emy = 0.0f;
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002748:	4b57      	ldr	r3, [pc, #348]	@ (80028a8 <update_ahrs+0x530>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	643b      	str	r3, [r7, #64]	@ 0x40
		vy = dcm[1][2];
 800274e:	4b56      	ldr	r3, [pc, #344]	@ (80028a8 <update_ahrs+0x530>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
		vz = dcm[2][2];
 8002754:	4b54      	ldr	r3, [pc, #336]	@ (80028a8 <update_ahrs+0x530>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	63bb      	str	r3, [r7, #56]	@ 0x38

		ex = acc_y * vz - acc_z * vy;
 800275a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800275c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800275e:	f7fe fb59 	bl	8000e14 <__aeabi_fmul>
 8002762:	4603      	mov	r3, r0
 8002764:	461c      	mov	r4, r3
 8002766:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002768:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800276a:	f7fe fb53 	bl	8000e14 <__aeabi_fmul>
 800276e:	4603      	mov	r3, r0
 8002770:	4619      	mov	r1, r3
 8002772:	4620      	mov	r0, r4
 8002774:	f7fe fa44 	bl	8000c00 <__aeabi_fsub>
 8002778:	4603      	mov	r3, r0
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
		ey = acc_z * vx - acc_x * vz;
 800277c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800277e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002780:	f7fe fb48 	bl	8000e14 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	461c      	mov	r4, r3
 8002788:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800278a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800278e:	f7fe fb41 	bl	8000e14 <__aeabi_fmul>
 8002792:	4603      	mov	r3, r0
 8002794:	4619      	mov	r1, r3
 8002796:	4620      	mov	r0, r4
 8002798:	f7fe fa32 	bl	8000c00 <__aeabi_fsub>
 800279c:	4603      	mov	r3, r0
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30
		ez = acc_x * vy - acc_y * vx;
 80027a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027a2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80027a6:	f7fe fb35 	bl	8000e14 <__aeabi_fmul>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461c      	mov	r4, r3
 80027ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80027b0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80027b2:	f7fe fb2f 	bl	8000e14 <__aeabi_fmul>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4619      	mov	r1, r3
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7fe fa20 	bl	8000c00 <__aeabi_fsub>
 80027c0:	4603      	mov	r3, r0
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( Ki_imu  > 0.0f) {
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fcdd 	bl	800118c <__aeabi_fcmpgt>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d06f      	beq.n	80028b8 <update_ahrs+0x540>
			integralFBx +=  Ki_imu  * ex * dt;
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fb18 	bl	8000e14 <__aeabi_fmul>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fb12 	bl	8000e14 <__aeabi_fmul>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <update_ahrs+0x534>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f7fe fa02 	bl	8000c04 <__addsf3>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <update_ahrs+0x534>)
 8002806:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fb00 	bl	8000e14 <__aeabi_fmul>
 8002814:	4603      	mov	r3, r0
 8002816:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fafa 	bl	8000e14 <__aeabi_fmul>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <update_ahrs+0x538>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7fe f9ea 	bl	8000c04 <__addsf3>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <update_ahrs+0x538>)
 8002836:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fae8 	bl	8000e14 <__aeabi_fmul>
 8002844:	4603      	mov	r3, r0
 8002846:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fae2 	bl	8000e14 <__aeabi_fmul>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <update_ahrs+0x53c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f7fe f9d2 	bl	8000c04 <__addsf3>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <update_ahrs+0x53c>)
 8002866:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <update_ahrs+0x534>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002872:	f7fe f9c7 	bl	8000c04 <__addsf3>
 8002876:	4603      	mov	r3, r0
 8002878:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			gy += integralFBy;
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <update_ahrs+0x538>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002886:	f7fe f9bd 	bl	8000c04 <__addsf3>
 800288a:	4603      	mov	r3, r0
 800288c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			gz += integralFBz;
 8002890:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <update_ahrs+0x53c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800289a:	f7fe f9b3 	bl	8000c04 <__addsf3>
 800289e:	4603      	mov	r3, r0
 80028a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028a4:	e014      	b.n	80028d0 <update_ahrs+0x558>
 80028a6:	bf00      	nop
 80028a8:	200002c4 	.word	0x200002c4
 80028ac:	200002ac 	.word	0x200002ac
 80028b0:	200002b0 	.word	0x200002b0
 80028b4:	200002b4 	.word	0x200002b4
		} else {
			integralFBx = 0.0f;
 80028b8:	4ba5      	ldr	r3, [pc, #660]	@ (8002b50 <update_ahrs+0x7d8>)
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80028c0:	4ba4      	ldr	r3, [pc, #656]	@ (8002b54 <update_ahrs+0x7dc>)
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80028c8:	4ba3      	ldr	r3, [pc, #652]	@ (8002b58 <update_ahrs+0x7e0>)
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 80028d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fa9c 	bl	8000e14 <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80028e4:	f7fe f98e 	bl	8000c04 <__addsf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gy += Kp_imu * ey;
 80028ee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fa8d 	bl	8000e14 <__aeabi_fmul>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002902:	f7fe f97f 	bl	8000c04 <__addsf3>
 8002906:	4603      	mov	r3, r0
 8002908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gz += Kp_imu * ez + emz * Kp_mag;
 800290c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fa7e 	bl	8000e14 <__aeabi_fmul>
 8002918:	4603      	mov	r3, r0
 800291a:	461c      	mov	r4, r3
 800291c:	4b8f      	ldr	r3, [pc, #572]	@ (8002b5c <update_ahrs+0x7e4>)
 800291e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fa77 	bl	8000e14 <__aeabi_fmul>
 8002926:	4603      	mov	r3, r0
 8002928:	4619      	mov	r1, r3
 800292a:	4620      	mov	r0, r4
 800292c:	f7fe f96a 	bl	8000c04 <__addsf3>
 8002930:	4603      	mov	r3, r0
 8002932:	4619      	mov	r1, r3
 8002934:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002938:	f7fe f964 	bl	8000c04 <__addsf3>
 800293c:	4603      	mov	r3, r0
 800293e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	gx *= (0.5f * dt);
 8002942:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002946:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800294a:	f7fe fa63 	bl	8000e14 <__aeabi_fmul>
 800294e:	4603      	mov	r3, r0
 8002950:	4619      	mov	r1, r3
 8002952:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002956:	f7fe fa5d 	bl	8000e14 <__aeabi_fmul>
 800295a:	4603      	mov	r3, r0
 800295c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy *= (0.5f * dt);
 8002960:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002964:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002968:	f7fe fa54 	bl	8000e14 <__aeabi_fmul>
 800296c:	4603      	mov	r3, r0
 800296e:	4619      	mov	r1, r3
 8002970:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002974:	f7fe fa4e 	bl	8000e14 <__aeabi_fmul>
 8002978:	4603      	mov	r3, r0
 800297a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz *= (0.5f * dt);
 800297e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002982:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002986:	f7fe fa45 	bl	8000e14 <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002992:	f7fe fa3f 	bl	8000e14 <__aeabi_fmul>
 8002996:	4603      	mov	r3, r0
 8002998:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 800299c:	4b70      	ldr	r3, [pc, #448]	@ (8002b60 <update_ahrs+0x7e8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80029a4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fa33 	bl	8000e14 <__aeabi_fmul>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461c      	mov	r4, r3
 80029b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b64 <update_ahrs+0x7ec>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fa2a 	bl	8000e14 <__aeabi_fmul>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7fe f91b 	bl	8000c00 <__aeabi_fsub>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461c      	mov	r4, r3
 80029ce:	4b66      	ldr	r3, [pc, #408]	@ (8002b68 <update_ahrs+0x7f0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fa1c 	bl	8000e14 <__aeabi_fmul>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7fe f90d 	bl	8000c00 <__aeabi_fsub>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <update_ahrs+0x7f4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7fe f907 	bl	8000c04 <__addsf3>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b5c      	ldr	r3, [pc, #368]	@ (8002b6c <update_ahrs+0x7f4>)
 80029fc:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 80029fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002b6c <update_ahrs+0x7f4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fa04 	bl	8000e14 <__aeabi_fmul>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461c      	mov	r4, r3
 8002a10:	4b54      	ldr	r3, [pc, #336]	@ (8002b64 <update_ahrs+0x7ec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe f9fb 	bl	8000e14 <__aeabi_fmul>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7fe f8ee 	bl	8000c04 <__addsf3>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b68 <update_ahrs+0x7f0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f9ed 	bl	8000e14 <__aeabi_fmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe f8de 	bl	8000c00 <__aeabi_fsub>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b45      	ldr	r3, [pc, #276]	@ (8002b60 <update_ahrs+0x7e8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7fe f8d8 	bl	8000c04 <__addsf3>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <update_ahrs+0x7e8>)
 8002a5a:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002a5c:	4b43      	ldr	r3, [pc, #268]	@ (8002b6c <update_ahrs+0x7f4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f9d5 	bl	8000e14 <__aeabi_fmul>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b60 <update_ahrs+0x7e8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f9cc 	bl	8000e14 <__aeabi_fmul>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7fe f8bd 	bl	8000c00 <__aeabi_fsub>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461c      	mov	r4, r3
 8002a8a:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <update_ahrs+0x7f0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f9be 	bl	8000e14 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7fe f8b1 	bl	8000c04 <__addsf3>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b64 <update_ahrs+0x7ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f7fe f8a9 	bl	8000c04 <__addsf3>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <update_ahrs+0x7ec>)
 8002ab8:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002aba:	4b2c      	ldr	r3, [pc, #176]	@ (8002b6c <update_ahrs+0x7f4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe f9a6 	bl	8000e14 <__aeabi_fmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461c      	mov	r4, r3
 8002acc:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <update_ahrs+0x7e8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f99d 	bl	8000e14 <__aeabi_fmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7fe f890 	bl	8000c04 <__addsf3>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461c      	mov	r4, r3
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <update_ahrs+0x7ec>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe f98f 	bl	8000e14 <__aeabi_fmul>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4619      	mov	r1, r3
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7fe f880 	bl	8000c00 <__aeabi_fsub>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <update_ahrs+0x7f0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f7fe f87a 	bl	8000c04 <__addsf3>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <update_ahrs+0x7f0>)
 8002b16:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b18:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <update_ahrs+0x7f4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <update_ahrs+0x7f4>)
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f976 	bl	8000e14 <__aeabi_fmul>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461c      	mov	r4, r3
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <update_ahrs+0x7e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0b      	ldr	r2, [pc, #44]	@ (8002b60 <update_ahrs+0x7e8>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f96c 	bl	8000e14 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7fe f85f 	bl	8000c04 <__addsf3>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461c      	mov	r4, r3
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <update_ahrs+0x7ec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e00f      	b.n	8002b70 <update_ahrs+0x7f8>
 8002b50:	200002ac 	.word	0x200002ac
 8002b54:	200002b0 	.word	0x200002b0
 8002b58:	200002b4 	.word	0x200002b4
 8002b5c:	40a00000 	.word	0x40a00000
 8002b60:	200002b8 	.word	0x200002b8
 8002b64:	200002bc 	.word	0x200002bc
 8002b68:	200002c0 	.word	0x200002c0
 8002b6c:	20000010 	.word	0x20000010
 8002b70:	4a96      	ldr	r2, [pc, #600]	@ (8002dcc <update_ahrs+0xa54>)
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f94c 	bl	8000e14 <__aeabi_fmul>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7fe f83f 	bl	8000c04 <__addsf3>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461c      	mov	r4, r3
 8002b8a:	4b91      	ldr	r3, [pc, #580]	@ (8002dd0 <update_ahrs+0xa58>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a90      	ldr	r2, [pc, #576]	@ (8002dd0 <update_ahrs+0xa58>)
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f93d 	bl	8000e14 <__aeabi_fmul>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7fe f830 	bl	8000c04 <__addsf3>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fa7c 	bl	80030a4 <invSqrt_>
 8002bac:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	q0 *= norm;
 8002bb0:	4b88      	ldr	r3, [pc, #544]	@ (8002dd4 <update_ahrs+0xa5c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f92b 	bl	8000e14 <__aeabi_fmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b84      	ldr	r3, [pc, #528]	@ (8002dd4 <update_ahrs+0xa5c>)
 8002bc4:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002bc6:	4b84      	ldr	r3, [pc, #528]	@ (8002dd8 <update_ahrs+0xa60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe f920 	bl	8000e14 <__aeabi_fmul>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd8 <update_ahrs+0xa60>)
 8002bda:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002bdc:	4b7b      	ldr	r3, [pc, #492]	@ (8002dcc <update_ahrs+0xa54>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe f915 	bl	8000e14 <__aeabi_fmul>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b77      	ldr	r3, [pc, #476]	@ (8002dcc <update_ahrs+0xa54>)
 8002bf0:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002bf2:	4b77      	ldr	r3, [pc, #476]	@ (8002dd0 <update_ahrs+0xa58>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe f90a 	bl	8000e14 <__aeabi_fmul>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b72      	ldr	r3, [pc, #456]	@ (8002dd0 <update_ahrs+0xa58>)
 8002c06:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8002c08:	4b72      	ldr	r3, [pc, #456]	@ (8002dd4 <update_ahrs+0xa5c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a72      	ldr	r2, [pc, #456]	@ (8002dd8 <update_ahrs+0xa60>)
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f8fe 	bl	8000e14 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q0q2 = q0*q2;
 8002c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd4 <update_ahrs+0xa5c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6a      	ldr	r2, [pc, #424]	@ (8002dcc <update_ahrs+0xa54>)
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f8f4 	bl	8000e14 <__aeabi_fmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
	float q0q3 = q0*q3;
 8002c30:	4b68      	ldr	r3, [pc, #416]	@ (8002dd4 <update_ahrs+0xa5c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a66      	ldr	r2, [pc, #408]	@ (8002dd0 <update_ahrs+0xa58>)
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe f8ea 	bl	8000e14 <__aeabi_fmul>
 8002c40:	4603      	mov	r3, r0
 8002c42:	623b      	str	r3, [r7, #32]
	float q1q1 = q1*q1;
 8002c44:	4b64      	ldr	r3, [pc, #400]	@ (8002dd8 <update_ahrs+0xa60>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a63      	ldr	r2, [pc, #396]	@ (8002dd8 <update_ahrs+0xa60>)
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe f8e0 	bl	8000e14 <__aeabi_fmul>
 8002c54:	4603      	mov	r3, r0
 8002c56:	61fb      	str	r3, [r7, #28]
	float q1q2 = q1*q2;
 8002c58:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd8 <update_ahrs+0xa60>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5b      	ldr	r2, [pc, #364]	@ (8002dcc <update_ahrs+0xa54>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe f8d6 	bl	8000e14 <__aeabi_fmul>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	61bb      	str	r3, [r7, #24]
	float q1q3 = q1*q3;
 8002c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <update_ahrs+0xa60>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a57      	ldr	r2, [pc, #348]	@ (8002dd0 <update_ahrs+0xa58>)
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe f8cc 	bl	8000e14 <__aeabi_fmul>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	617b      	str	r3, [r7, #20]
	float q2q2 = q2*q2;
 8002c80:	4b52      	ldr	r3, [pc, #328]	@ (8002dcc <update_ahrs+0xa54>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a51      	ldr	r2, [pc, #324]	@ (8002dcc <update_ahrs+0xa54>)
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f8c2 	bl	8000e14 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	613b      	str	r3, [r7, #16]
	float q2q3 = q2*q3;
 8002c94:	4b4d      	ldr	r3, [pc, #308]	@ (8002dcc <update_ahrs+0xa54>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd0 <update_ahrs+0xa58>)
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f8b8 	bl	8000e14 <__aeabi_fmul>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
	float q3q3 = q3*q3;
 8002ca8:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <update_ahrs+0xa58>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a48      	ldr	r2, [pc, #288]	@ (8002dd0 <update_ahrs+0xa58>)
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe f8ae 	bl	8000e14 <__aeabi_fmul>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60bb      	str	r3, [r7, #8]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8002cbc:	6939      	ldr	r1, [r7, #16]
 8002cbe:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002cc2:	f7fd ff9d 	bl	8000c00 <__aeabi_fsub>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd ff98 	bl	8000c00 <__aeabi_fsub>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd ff95 	bl	8000c04 <__addsf3>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <update_ahrs+0xa64>)
 8002ce0:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8002ce2:	6a39      	ldr	r1, [r7, #32]
 8002ce4:	69b8      	ldr	r0, [r7, #24]
 8002ce6:	f7fd ff8b 	bl	8000c00 <__aeabi_fsub>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4619      	mov	r1, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd ff88 	bl	8000c04 <__addsf3>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b38      	ldr	r3, [pc, #224]	@ (8002ddc <update_ahrs+0xa64>)
 8002cfa:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8002cfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7fd ff80 	bl	8000c04 <__addsf3>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd ff7b 	bl	8000c04 <__addsf3>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <update_ahrs+0xa64>)
 8002d14:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	69b8      	ldr	r0, [r7, #24]
 8002d1a:	f7fd ff73 	bl	8000c04 <__addsf3>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ff6e 	bl	8000c04 <__addsf3>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <update_ahrs+0xa64>)
 8002d2e:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8002d30:	69f9      	ldr	r1, [r7, #28]
 8002d32:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002d36:	f7fd ff63 	bl	8000c00 <__aeabi_fsub>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd ff5e 	bl	8000c00 <__aeabi_fsub>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd ff5b 	bl	8000c04 <__addsf3>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <update_ahrs+0xa64>)
 8002d54:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8002d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7fd ff51 	bl	8000c00 <__aeabi_fsub>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4619      	mov	r1, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd ff4e 	bl	8000c04 <__addsf3>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <update_ahrs+0xa64>)
 8002d6e:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8002d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7fd ff44 	bl	8000c00 <__aeabi_fsub>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd ff41 	bl	8000c04 <__addsf3>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <update_ahrs+0xa64>)
 8002d88:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8002d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7fd ff39 	bl	8000c04 <__addsf3>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd ff34 	bl	8000c04 <__addsf3>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <update_ahrs+0xa64>)
 8002da2:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002daa:	f7fd ff29 	bl	8000c00 <__aeabi_fsub>
 8002dae:	4603      	mov	r3, r0
 8002db0:	6939      	ldr	r1, [r7, #16]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd ff24 	bl	8000c00 <__aeabi_fsub>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd ff21 	bl	8000c04 <__addsf3>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <update_ahrs+0xa64>)
 8002dc8:	621a      	str	r2, [r3, #32]
 8002dca:	e009      	b.n	8002de0 <update_ahrs+0xa68>
 8002dcc:	200002bc 	.word	0x200002bc
 8002dd0:	200002c0 	.word	0x200002c0
 8002dd4:	20000010 	.word	0x20000010
 8002dd8:	200002b8 	.word	0x200002b8
 8002ddc:	200002c4 	.word	0x200002c4
    AHRS.roll_rate  = (P + R*cosx*tany + Q*sinx*tany)*DEG;
    AHRS.pitch_rate = (Q*cosx - R*sinx)*DEG;
    AHRS.yaw_rate   = (R*cosx/cosy + Q*sinx/cosy)*DEG;
    */

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 8002de0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f10 <update_ahrs+0xb98>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002de8:	4b49      	ldr	r3, [pc, #292]	@ (8002f10 <update_ahrs+0xb98>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a48      	ldr	r2, [pc, #288]	@ (8002f10 <update_ahrs+0xb98>)
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f80e 	bl	8000e14 <__aeabi_fmul>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002e00:	f7fd fefe 	bl	8000c00 <__aeabi_fsub>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f00a fb12 	bl	800d430 <sqrtf>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4620      	mov	r0, r4
 8002e12:	f000 f887 	bl	8002f24 <atan2_approx>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e1c:	493d      	ldr	r1, [pc, #244]	@ (8002f14 <update_ahrs+0xb9c>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fff8 	bl	8000e14 <__aeabi_fmul>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <update_ahrs+0xba0>)
 8002e2a:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 8002e2c:	4b38      	ldr	r3, [pc, #224]	@ (8002f10 <update_ahrs+0xb98>)
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e34:	4a36      	ldr	r2, [pc, #216]	@ (8002f10 <update_ahrs+0xb98>)
 8002e36:	6a12      	ldr	r2, [r2, #32]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f872 	bl	8002f24 <atan2_approx>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e46:	4933      	ldr	r1, [pc, #204]	@ (8002f14 <update_ahrs+0xb9c>)
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd ffe3 	bl	8000e14 <__aeabi_fmul>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <update_ahrs+0xba0>)
 8002e54:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8002e56:	4b2e      	ldr	r3, [pc, #184]	@ (8002f10 <update_ahrs+0xb98>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f10 <update_ahrs+0xb98>)
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f85f 	bl	8002f24 <atan2_approx>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e6c:	4929      	ldr	r1, [pc, #164]	@ (8002f14 <update_ahrs+0xb9c>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd ffd0 	bl	8000e14 <__aeabi_fmul>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	if(yaw_ < 0){
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002e82:	f7fe f965 	bl	8001150 <__aeabi_fcmplt>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <update_ahrs+0xb24>
		 yaw_ = 360 + yaw_;
 8002e8c:	4923      	ldr	r1, [pc, #140]	@ (8002f1c <update_ahrs+0xba4>)
 8002e8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002e92:	f7fd feb7 	bl	8000c04 <__addsf3>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	AHRS.yaw =  yaw_;
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <update_ahrs+0xba0>)
 8002e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ea2:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 8002ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd ff5f 	bl	8000d6c <__aeabi_i2f>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <update_ahrs+0xba8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7fe f860 	bl	8000f7c <__aeabi_fdiv>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <update_ahrs+0xba0>)
 8002ec2:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 8002ec4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ec8:	425b      	negs	r3, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd ff4e 	bl	8000d6c <__aeabi_i2f>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <update_ahrs+0xba8>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fe f84f 	bl	8000f7c <__aeabi_fdiv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <update_ahrs+0xba0>)
 8002ee4:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8002ee6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002eea:	425b      	negs	r3, r3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd ff3d 	bl	8000d6c <__aeabi_i2f>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <update_ahrs+0xba8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7fe f83e 	bl	8000f7c <__aeabi_fdiv>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <update_ahrs+0xba0>)
 8002f06:	615a      	str	r2, [r3, #20]

}
 8002f08:	bf00      	nop
 8002f0a:	379c      	adds	r7, #156	@ 0x9c
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd90      	pop	{r4, r7, pc}
 8002f10:	200002c4 	.word	0x200002c4
 8002f14:	42652ee0 	.word	0x42652ee0
 8002f18:	20000294 	.word	0x20000294
 8002f1c:	43b40000 	.word	0x43b40000
 8002f20:	20000014 	.word	0x20000014

08002f24 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b08b      	sub	sp, #44	@ 0x2c
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f34:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f3c:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	69b8      	ldr	r0, [r7, #24]
 8002f4a:	f7fe f91f 	bl	800118c <__aeabi_fcmpgt>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <atan2_approx+0x34>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	e000      	b.n	8002f5a <atan2_approx+0x36>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f62:	f7fe f8eb 	bl	800113c <__aeabi_fcmpeq>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d114      	bne.n	8002f96 <atan2_approx+0x72>
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68f9      	ldr	r1, [r7, #12]
 8002f76:	6938      	ldr	r0, [r7, #16]
 8002f78:	f7fe f8ea 	bl	8001150 <__aeabi_fcmplt>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <atan2_approx+0x62>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	e000      	b.n	8002f88 <atan2_approx+0x64>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fff6 	bl	8000f7c <__aeabi_fdiv>
 8002f90:	4603      	mov	r3, r0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	e002      	b.n	8002f9c <atan2_approx+0x78>
    else res = 0.0f;
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8002f9c:	4938      	ldr	r1, [pc, #224]	@ (8003080 <atan2_approx+0x15c>)
 8002f9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fa0:	f7fd ff38 	bl	8000e14 <__aeabi_fmul>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4937      	ldr	r1, [pc, #220]	@ (8003084 <atan2_approx+0x160>)
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fe29 	bl	8000c00 <__aeabi_fsub>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd ff2e 	bl	8000e14 <__aeabi_fmul>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4933      	ldr	r1, [pc, #204]	@ (8003088 <atan2_approx+0x164>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fe1f 	bl	8000c00 <__aeabi_fsub>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd ff24 	bl	8000e14 <__aeabi_fmul>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	492f      	ldr	r1, [pc, #188]	@ (800308c <atan2_approx+0x168>)
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fe15 	bl	8000c00 <__aeabi_fsub>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd ff1a 	bl	8000e14 <__aeabi_fmul>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	492b      	ldr	r1, [pc, #172]	@ (8003090 <atan2_approx+0x16c>)
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fe0b 	bl	8000c00 <__aeabi_fsub>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002ff0:	4928      	ldr	r1, [pc, #160]	@ (8003094 <atan2_approx+0x170>)
 8002ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ff4:	f7fd ff0e 	bl	8000e14 <__aeabi_fmul>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4927      	ldr	r1, [pc, #156]	@ (8003098 <atan2_approx+0x174>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fe01 	bl	8000c04 <__addsf3>
 8003002:	4603      	mov	r3, r0
 8003004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd ff04 	bl	8000e14 <__aeabi_fmul>
 800300c:	4603      	mov	r3, r0
 800300e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fdf6 	bl	8000c04 <__addsf3>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	4620      	mov	r0, r4
 800301e:	f7fd ffad 	bl	8000f7c <__aeabi_fdiv>
 8003022:	4603      	mov	r3, r0
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003026:	6a39      	ldr	r1, [r7, #32]
 8003028:	69f8      	ldr	r0, [r7, #28]
 800302a:	f7fe f8af 	bl	800118c <__aeabi_fcmpgt>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <atan2_approx+0x11c>
 8003034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003036:	4819      	ldr	r0, [pc, #100]	@ (800309c <atan2_approx+0x178>)
 8003038:	f7fd fde2 	bl	8000c00 <__aeabi_fsub>
 800303c:	4603      	mov	r3, r0
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 8003040:	f04f 0100 	mov.w	r1, #0
 8003044:	6838      	ldr	r0, [r7, #0]
 8003046:	f7fe f883 	bl	8001150 <__aeabi_fcmplt>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <atan2_approx+0x138>
 8003050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003052:	4813      	ldr	r0, [pc, #76]	@ (80030a0 <atan2_approx+0x17c>)
 8003054:	f7fd fdd4 	bl	8000c00 <__aeabi_fsub>
 8003058:	4603      	mov	r3, r0
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fe f875 	bl	8001150 <__aeabi_fcmplt>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <atan2_approx+0x150>
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003076:	4618      	mov	r0, r3
 8003078:	372c      	adds	r7, #44	@ 0x2c
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	3d4e0939 	.word	0x3d4e0939
 8003084:	3e9eb5e3 	.word	0x3e9eb5e3
 8003088:	3e16fa88 	.word	0x3e16fa88
 800308c:	3f7ffe45 	.word	0x3f7ffe45
 8003090:	34a8dfa7 	.word	0x34a8dfa7
 8003094:	3f24fb99 	.word	0x3f24fb99
 8003098:	3e16a269 	.word	0x3e16a269
 800309c:	3fc90fdb 	.word	0x3fc90fdb
 80030a0:	40490fdb 	.word	0x40490fdb

080030a4 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80030ac:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd feaf 	bl	8000e14 <__aeabi_fmul>
 80030b6:	4603      	mov	r3, r0
 80030b8:	617b      	str	r3, [r7, #20]
	float y = x;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80030be:	f107 0310 	add.w	r3, r7, #16
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	105a      	asrs	r2, r3, #1
 80030ca:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <invSqrt_+0x74>)
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fe99 	bl	8000e14 <__aeabi_fmul>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fe92 	bl	8000e14 <__aeabi_fmul>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80030f8:	f7fd fd82 	bl	8000c00 <__aeabi_fsub>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7fd fe85 	bl	8000e14 <__aeabi_fmul>
 800310a:	4603      	mov	r3, r0
 800310c:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 800310e:	693b      	ldr	r3, [r7, #16]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	5f3759df 	.word	0x5f3759df

0800311c <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7fe f810 	bl	8001150 <__aeabi_fcmplt>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <constrainf+0x1e>
        return low;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	e009      	b.n	800314e <constrainf+0x32>
    else if (amt > high)
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fe f825 	bl	800118c <__aeabi_fcmpgt>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <constrainf+0x30>
        return high;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	e000      	b.n	800314e <constrainf+0x32>
    else
        return amt;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <pid_init>:
#include "string.h"

#define usTosec(x)    (x *(1e-06f))
#define MAX_WAIT_TIME 500000

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI,float dt){
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 8003164:	2228      	movs	r2, #40	@ 0x28
 8003166:	2100      	movs	r1, #0
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f00a f8f9 	bl	800d360 <memset>
  pid_in->kp = kp;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  pid_in->dt = dt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <pid_cal>:

float pid_cal(pid_t *pid_in,float input, float setpoint){
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b08b      	sub	sp, #44	@ 0x2c
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
   if(pid_in->init){
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <pid_cal+0x2a>
       pid_in->last_input = input;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
       return 0.0f;
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e0a7      	b.n	800332e <pid_cal+0x17a>
   }

   float error = input - setpoint;
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	68b8      	ldr	r0, [r7, #8]
 80031e2:	f7fd fd0d 	bl	8000c00 <__aeabi_fsub>
 80031e6:	4603      	mov	r3, r0
 80031e8:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	6a38      	ldr	r0, [r7, #32]
 80031f2:	f7fd fe0f 	bl	8000e14 <__aeabi_fmul>
 80031f6:	4603      	mov	r3, r0
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24

   if(pid_in->ki > 0){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd ffc2 	bl	800118c <__aeabi_fcmpgt>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02e      	beq.n	800326c <pid_cal+0xb8>
      pid_in->i_term += error *pid_in->ki *pid_in->dt;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68dc      	ldr	r4, [r3, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	6a39      	ldr	r1, [r7, #32]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd fdfb 	bl	8000e14 <__aeabi_fmul>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7fd fdf3 	bl	8000e14 <__aeabi_fmul>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	4620      	mov	r0, r4
 8003234:	f7fd fce6 	bl	8000c04 <__addsf3>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68d8      	ldr	r0, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	461a      	mov	r2, r3
 8003252:	f7ff ff63 	bl	800311c <constrainf>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4619      	mov	r1, r3
 8003262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003264:	f7fd fcce 	bl	8000c04 <__addsf3>
 8003268:	4603      	mov	r3, r0
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   if(pid_in->kd > 0){
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd ff89 	bl	800118c <__aeabi_fcmpgt>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d055      	beq.n	800332c <pid_cal+0x178>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	492c      	ldr	r1, [pc, #176]	@ (8003338 <pid_cal+0x184>)
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fdc4 	bl	8000e14 <__aeabi_fmul>
 800328c:	4603      	mov	r3, r0
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003294:	f7fd fe72 	bl	8000f7c <__aeabi_fdiv>
 8003298:	4603      	mov	r3, r0
 800329a:	61fb      	str	r3, [r7, #28]
        float gain_lpf = pid_in->dt/(RC + pid_in->dt);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1c      	ldr	r4, [r3, #32]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	69f9      	ldr	r1, [r7, #28]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd fcac 	bl	8000c04 <__addsf3>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4619      	mov	r1, r3
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7fd fe63 	bl	8000f7c <__aeabi_fdiv>
 80032b6:	4603      	mov	r3, r0
 80032b8:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	4619      	mov	r1, r3
 80032c0:	68b8      	ldr	r0, [r7, #8]
 80032c2:	f7fd fc9d 	bl	8000c00 <__aeabi_fsub>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f7fd fd9f 	bl	8000e14 <__aeabi_fmul>
 80032d6:	4603      	mov	r3, r0
 80032d8:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	611a      	str	r2, [r3, #16]
        delta /= pid_in->dt;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4619      	mov	r1, r3
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7fd fe48 	bl	8000f7c <__aeabi_fdiv>
 80032ec:	4603      	mov	r3, r0
 80032ee:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695c      	ldr	r4, [r3, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	4619      	mov	r1, r3
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f7fd fc80 	bl	8000c00 <__aeabi_fsub>
 8003300:	4603      	mov	r3, r0
 8003302:	69b9      	ldr	r1, [r7, #24]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fd85 	bl	8000e14 <__aeabi_fmul>
 800330a:	4603      	mov	r3, r0
 800330c:	4619      	mov	r1, r3
 800330e:	4620      	mov	r0, r4
 8003310:	f7fd fc78 	bl	8000c04 <__addsf3>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	615a      	str	r2, [r3, #20]
        output += pid_in->D_filted;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	4619      	mov	r1, r3
 8003322:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003324:	f7fd fc6e 	bl	8000c04 <__addsf3>
 8003328:	4603      	mov	r3, r0
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800332e:	4618      	mov	r0, r3
 8003330:	372c      	adds	r7, #44	@ 0x2c
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}
 8003336:	bf00      	nop
 8003338:	40c90fdb 	.word	0x40c90fdb

0800333c <constrain>:
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	da01      	bge.n	8003354 <constrain+0x18>
        return low;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	e006      	b.n	8003362 <constrain+0x26>
    else if (amt > high)
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	dd01      	ble.n	8003360 <constrain+0x24>
        return high;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	e000      	b.n	8003362 <constrain+0x26>
        return amt;
 8003360:	68fb      	ldr	r3, [r7, #12]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	htimm = htim;
 8003374:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <initPWM+0x7c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 800337a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <initPWM+0x80>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8003380:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <initPWM+0x84>)
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <initPWM+0x88>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 800338c:	2100      	movs	r1, #0
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f005 fefe 	bl	8009190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8003394:	2104      	movs	r1, #4
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f005 fefa 	bl	8009190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 800339c:	2108      	movs	r1, #8
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f005 fef6 	bl	8009190 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80033a4:	4b10      	ldr	r3, [pc, #64]	@ (80033e8 <initPWM+0x7c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033b0:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <initPWM+0x7c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80033b8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <initPWM+0x7c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <initPWM+0x7c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 80033d2:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <initPWM+0x7c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80033dc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200002f4 	.word	0x200002f4
 80033ec:	200002fc 	.word	0x200002fc
 80033f0:	200002fd 	.word	0x200002fd
 80033f4:	200002f8 	.word	0x200002f8

080033f8 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
 8003408:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <writePwm+0x2c>
	    dulty -= 1000;
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003416:	b29b      	uxth	r3, r3
 8003418:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8003420:	b29b      	uxth	r3, r3
 8003422:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8003424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003428:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800342c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff83 	bl	800333c <constrain>
 8003436:	4603      	mov	r3, r0
 8003438:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <writePwm+0x56>
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <writePwm+0x94>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800344a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800344c:	e019      	b.n	8003482 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d106      	bne.n	8003462 <writePwm+0x6a>
 8003454:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <writePwm+0x94>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800345e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003460:	e00f      	b.n	8003482 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d106      	bne.n	8003476 <writePwm+0x7e>
 8003468:	4b08      	ldr	r3, [pc, #32]	@ (800348c <writePwm+0x94>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003472:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003474:	e005      	b.n	8003482 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <writePwm+0x94>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200002f4 	.word	0x200002f4

08003490 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
 800349a:	460b      	mov	r3, r1
 800349c:	80bb      	strh	r3, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 80034a2:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <write_pwm_ctrl+0x70>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <write_pwm_ctrl+0x22>
 80034aa:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <write_pwm_ctrl+0x74>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 80034b2:	f001 ff2f 	bl	8005314 <HAL_GetTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4a13      	ldr	r2, [pc, #76]	@ (8003508 <write_pwm_ctrl+0x78>)
 80034ba:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 80034bc:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <write_pwm_ctrl+0x70>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
		   return;
 80034c2:	e019      	b.n	80034f8 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 80034c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4619      	mov	r1, r3
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff ff93 	bl	80033f8 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 80034d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4619      	mov	r1, r3
 80034da:	2004      	movs	r0, #4
 80034dc:	f7ff ff8c 	bl	80033f8 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 80034e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034e4:	2200      	movs	r2, #0
 80034e6:	4619      	mov	r1, r3
 80034e8:	2008      	movs	r0, #8
 80034ea:	f7ff ff85 	bl	80033f8 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 80034ee:	f001 ff11 	bl	8005314 <HAL_GetTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <write_pwm_ctrl+0x78>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200002fc 	.word	0x200002fc
 8003504:	200002fd 	.word	0x200002fd
 8003508:	200002f8 	.word	0x200002f8

0800350c <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8003514:	4a05      	ldr	r2, [pc, #20]	@ (800352c <timer_start+0x20>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 800351a:	4b04      	ldr	r3, [pc, #16]	@ (800352c <timer_start+0x20>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f005 fd7e 	bl	8009020 <HAL_TIM_Base_Start_IT>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000300 	.word	0x20000300

08003530 <HAL_UART_RxCpltCallback>:
#include "../Lib/gps.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8003538:	f7fd feb6 	bl	80012a8 <ibus_uart_port>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4293      	cmp	r3, r2
 8003542:	d102      	bne.n	800354a <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8003544:	f7fd feba 	bl	80012bc <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8003548:	e007      	b.n	800355a <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 800354a:	f7fe fc79 	bl	8001e40 <gps_uart_port>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8003556:	f7fe fc7d 	bl	8001e54 <gps_callback>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  //  if(huart == mavlink_uart_port())
//	{
//		mavlink_tx_cpl_callback();
 //   }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a06      	ldr	r2, [pc, #24]	@ (800359c <vApplicationGetIdleTaskMemory+0x28>)
 8003584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4a05      	ldr	r2, [pc, #20]	@ (80035a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800358a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2280      	movs	r2, #128	@ 0x80
 8003590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	20000318 	.word	0x20000318
 80035a0:	2000036c 	.word	0x2000036c

080035a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80035a4:	b5b0      	push	{r4, r5, r7, lr}
 80035a6:	b09c      	sub	sp, #112	@ 0x70
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 80035aa:	4828      	ldr	r0, [pc, #160]	@ (800364c <MX_FREERTOS_Init+0xa8>)
 80035ac:	f7ff ffae 	bl	800350c <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 80035b0:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <MX_FREERTOS_Init+0xac>)
 80035b2:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80035b6:	461d      	mov	r5, r3
 80035b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80035c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f008 fa36 	bl	800ba3c <osThreadCreate>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a20      	ldr	r2, [pc, #128]	@ (8003654 <MX_FREERTOS_Init+0xb0>)
 80035d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityHigh, 0, 200);
 80035d6:	4b20      	ldr	r3, [pc, #128]	@ (8003658 <MX_FREERTOS_Init+0xb4>)
 80035d8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80035dc:	461d      	mov	r5, r3
 80035de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80035ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f008 fa23 	bl	800ba3c <osThreadCreate>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4a18      	ldr	r2, [pc, #96]	@ (800365c <MX_FREERTOS_Init+0xb8>)
 80035fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 80035fc:	4b18      	ldr	r3, [pc, #96]	@ (8003660 <MX_FREERTOS_Init+0xbc>)
 80035fe:	f107 041c 	add.w	r4, r7, #28
 8003602:	461d      	mov	r5, r3
 8003604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800360c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f008 fa10 	bl	800ba3c <osThreadCreate>
 800361c:	4603      	mov	r3, r0
 800361e:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <MX_FREERTOS_Init+0xc0>)
 8003620:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <MX_FREERTOS_Init+0xc4>)
 8003624:	463c      	mov	r4, r7
 8003626:	461d      	mov	r5, r3
 8003628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8003634:	463b      	mov	r3, r7
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f008 f9ff 	bl	800ba3c <osThreadCreate>
 800363e:	4603      	mov	r3, r0
 8003640:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <MX_FREERTOS_Init+0xc8>)
 8003642:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003644:	bf00      	nop
 8003646:	3770      	adds	r7, #112	@ 0x70
 8003648:	46bd      	mov	sp, r7
 800364a:	bdb0      	pop	{r4, r5, r7, pc}
 800364c:	20000750 	.word	0x20000750
 8003650:	0800d720 	.word	0x0800d720
 8003654:	20000308 	.word	0x20000308
 8003658:	0800d744 	.word	0x0800d744
 800365c:	2000030c 	.word	0x2000030c
 8003660:	0800d768 	.word	0x0800d768
 8003664:	20000310 	.word	0x20000310
 8003668:	0800d78c 	.word	0x0800d78c
 800366c:	20000314 	.word	0x20000314

08003670 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	b08c      	sub	sp, #48	@ 0x30
 8003676:	af06      	add	r7, sp, #24
 8003678:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart1);
 800367a:	4843      	ldr	r0, [pc, #268]	@ (8003788 <ahrs_task+0x118>)
 800367c:	f7fd fdec 	bl	8001258 <ibus_init>
	gps_init(&huart3,57600);
 8003680:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8003684:	4841      	ldr	r0, [pc, #260]	@ (800378c <ahrs_task+0x11c>)
 8003686:	f7fe fb6f 	bl	8001d68 <gps_init>
	attitude_ctrl_init();
 800368a:	f001 fb3d 	bl	8004d08 <attitude_ctrl_init>
	initPWM(&htim3);
 800368e:	4840      	ldr	r0, [pc, #256]	@ (8003790 <ahrs_task+0x120>)
 8003690:	f7ff fe6c 	bl	800336c <initPWM>

	uint32_t last_call = micros();
 8003694:	4b3f      	ldr	r3, [pc, #252]	@ (8003794 <ahrs_task+0x124>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800369c:	4b3e      	ldr	r3, [pc, #248]	@ (8003798 <ahrs_task+0x128>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 80036a4:	230a      	movs	r3, #10
 80036a6:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 80036a8:	f008 ff60 	bl	800c56c <xTaskGetTickCount>
 80036ac:	4603      	mov	r3, r0
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
 80036b0:	2110      	movs	r1, #16
 80036b2:	483a      	ldr	r0, [pc, #232]	@ (800379c <ahrs_task+0x12c>)
 80036b4:	f002 fa41 	bl	8005b3a <HAL_GPIO_TogglePin>

    dt = (micros() - last_call)*(1e-6);
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <ahrs_task+0x124>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036c0:	4b35      	ldr	r3, [pc, #212]	@ (8003798 <ahrs_task+0x128>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	441a      	add	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc fef2 	bl	80004b4 <__aeabi_ui2d>
 80036d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8003780 <ahrs_task+0x110>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fc ff67 	bl	80005a8 <__aeabi_dmul>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7fd fa39 	bl	8000b58 <__aeabi_d2f>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a2d      	ldr	r2, [pc, #180]	@ (80037a0 <ahrs_task+0x130>)
 80036ea:	6013      	str	r3, [r2, #0]
    last_call = micros();
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <ahrs_task+0x124>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036f4:	4b28      	ldr	r3, [pc, #160]	@ (8003798 <ahrs_task+0x128>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

    ibusFrameComplete();
 80036fc:	f7fd fe3a 	bl	8001374 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 8003700:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <ahrs_task+0x134>)
 8003702:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003706:	4b27      	ldr	r3, [pc, #156]	@ (80037a4 <ahrs_task+0x134>)
 8003708:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 800370c:	4b25      	ldr	r3, [pc, #148]	@ (80037a4 <ahrs_task+0x134>)
 800370e:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8003712:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <ahrs_task+0x138>)
 8003714:	f9b3 8000 	ldrsh.w	r8, [r3]
 8003718:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <ahrs_task+0x138>)
 800371a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800371e:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <ahrs_task+0x138>)
 8003720:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003724:	4921      	ldr	r1, [pc, #132]	@ (80037ac <ahrs_task+0x13c>)
 8003726:	f9b1 1000 	ldrsh.w	r1, [r1]
 800372a:	4820      	ldr	r0, [pc, #128]	@ (80037ac <ahrs_task+0x13c>)
 800372c:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8003730:	4c1e      	ldr	r4, [pc, #120]	@ (80037ac <ahrs_task+0x13c>)
 8003732:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8003736:	4d1a      	ldr	r5, [pc, #104]	@ (80037a0 <ahrs_task+0x130>)
 8003738:	682d      	ldr	r5, [r5, #0]
 800373a:	9505      	str	r5, [sp, #20]
 800373c:	9404      	str	r4, [sp, #16]
 800373e:	9003      	str	r0, [sp, #12]
 8003740:	9102      	str	r1, [sp, #8]
 8003742:	9201      	str	r2, [sp, #4]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4643      	mov	r3, r8
 8003748:	4672      	mov	r2, lr
 800374a:	4661      	mov	r1, ip
 800374c:	4630      	mov	r0, r6
 800374e:	f7fe fe13 	bl	8002378 <update_ahrs>
    attitude_ctrl();
 8003752:	f001 fb31 	bl	8004db8 <attitude_ctrl>

    vTaskSuspend(NULL);
 8003756:	2000      	movs	r0, #0
 8003758:	f008 fccc 	bl	800c0f4 <vTaskSuspend>
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	6939      	ldr	r1, [r7, #16]
 8003762:	4618      	mov	r0, r3
 8003764:	f008 fc10 	bl	800bf88 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8003768:	2000      	movs	r0, #0
 800376a:	f009 f8c9 	bl	800c900 <uxTaskGetStackHighWaterMark>
 800376e:	4603      	mov	r3, r0
 8003770:	b29a      	uxth	r2, r3
 8003772:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <ahrs_task+0x140>)
 8003774:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
 8003776:	bf00      	nop
 8003778:	e79a      	b.n	80036b0 <ahrs_task+0x40>
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w
 8003780:	a0b5ed8d 	.word	0xa0b5ed8d
 8003784:	3eb0c6f7 	.word	0x3eb0c6f7
 8003788:	20000798 	.word	0x20000798
 800378c:	20000828 	.word	0x20000828
 8003790:	20000708 	.word	0x20000708
 8003794:	20000300 	.word	0x20000300
 8003798:	20000304 	.word	0x20000304
 800379c:	40010c00 	.word	0x40010c00
 80037a0:	2000056c 	.word	0x2000056c
 80037a4:	20000570 	.word	0x20000570
 80037a8:	20000578 	.word	0x20000578
 80037ac:	20000580 	.word	0x20000580
 80037b0:	20000586 	.word	0x20000586

080037b4 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */
	vTaskSuspend(NULL);
 80037bc:	2000      	movs	r0, #0
 80037be:	f008 fc99 	bl	800c0f4 <vTaskSuspend>
	//black_box_init();
	//black_box_create_file(&fdata,"fdata.txt");

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 200;
 80037c2:	23c8      	movs	r3, #200	@ 0xc8
 80037c4:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80037c6:	f008 fed1 	bl	800c56c <xTaskGetTickCount>
 80037ca:	4603      	mov	r3, r0
 80037cc:	60bb      	str	r3, [r7, #8]

		black_box_sync(&fdata);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);

*/
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 80037ce:	2140      	movs	r1, #64	@ 0x40
 80037d0:	4808      	ldr	r0, [pc, #32]	@ (80037f4 <blackbox+0x40>)
 80037d2:	f002 f9b2 	bl	8005b3a <HAL_GPIO_TogglePin>
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	4618      	mov	r0, r3
 80037de:	f008 fbd3 	bl	800bf88 <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 80037e2:	2000      	movs	r0, #0
 80037e4:	f009 f88c 	bl	800c900 <uxTaskGetStackHighWaterMark>
 80037e8:	4603      	mov	r3, r0
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	4b02      	ldr	r3, [pc, #8]	@ (80037f8 <blackbox+0x44>)
 80037ee:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 80037f0:	bf00      	nop
 80037f2:	e7ec      	b.n	80037ce <blackbox+0x1a>
 80037f4:	40011400 	.word	0x40011400
 80037f8:	20000588 	.word	0x20000588

080037fc <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_indicate */
  /* Infinite loop */
  for(;;)
  {
	static uint32_t delay;
	if(fdata.file.err != -1 && ibusChannelData[CH10] > 1700){
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <led_indicate+0x68>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800380c:	4293      	cmp	r3, r2
 800380e:	d911      	bls.n	8003834 <led_indicate+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003810:	2120      	movs	r1, #32
 8003812:	4815      	ldr	r0, [pc, #84]	@ (8003868 <led_indicate+0x6c>)
 8003814:	f002 f991 	bl	8005b3a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003818:	2200      	movs	r2, #0
 800381a:	2110      	movs	r1, #16
 800381c:	4812      	ldr	r0, [pc, #72]	@ (8003868 <led_indicate+0x6c>)
 800381e:	f002 f974 	bl	8005b0a <HAL_GPIO_WritePin>
		delay = 100;
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <led_indicate+0x70>)
 8003824:	2264      	movs	r2, #100	@ 0x64
 8003826:	601a      	str	r2, [r3, #0]
		vTaskResume(task2Handle);
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <led_indicate+0x74>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f008 fd31 	bl	800c294 <vTaskResume>
 8003832:	e011      	b.n	8003858 <led_indicate+0x5c>
	}
	else{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8003834:	2110      	movs	r1, #16
 8003836:	480c      	ldr	r0, [pc, #48]	@ (8003868 <led_indicate+0x6c>)
 8003838:	f002 f97f 	bl	8005b3a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800383c:	2200      	movs	r2, #0
 800383e:	2120      	movs	r1, #32
 8003840:	4809      	ldr	r0, [pc, #36]	@ (8003868 <led_indicate+0x6c>)
 8003842:	f002 f962 	bl	8005b0a <HAL_GPIO_WritePin>
		delay = 500;
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <led_indicate+0x70>)
 8003848:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800384c:	601a      	str	r2, [r3, #0]
		vTaskSuspend(task2Handle);
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <led_indicate+0x74>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f008 fc4e 	bl	800c0f4 <vTaskSuspend>
	}

    osDelay(delay);
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <led_indicate+0x70>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f008 f939 	bl	800bad4 <osDelay>
  {
 8003862:	e7cf      	b.n	8003804 <led_indicate+0x8>
 8003864:	200000c0 	.word	0x200000c0
 8003868:	40010800 	.word	0x40010800
 800386c:	2000058c 	.word	0x2000058c
 8003870:	2000030c 	.word	0x2000030c
 8003874:	00000000 	.word	0x00000000

08003878 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b08e      	sub	sp, #56	@ 0x38
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readIMU */
 int16_t gyso_offset[3] = {0,0,0};
 8003880:	2300      	movs	r3, #0
 8003882:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003884:	2300      	movs	r3, #0
 8003886:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003888:	2300      	movs	r3, #0
 800388a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 axis3_t raw;
 uint8_t sample_count = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 int32_t gyro_add[3] = {0,0,0};
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 uint8_t first_loop = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 compassInit();
 80038a4:	f7fd ff5a 	bl	800175c <compassInit>
 mpu6050_init(&hi2c2);
 80038a8:	4893      	ldr	r0, [pc, #588]	@ (8003af8 <read_sensor+0x280>)
 80038aa:	f7fd fe23 	bl	80014f4 <mpu6050_init>
 HAL_Delay(2000);
 80038ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80038b2:	f001 fd39 	bl	8005328 <HAL_Delay>
 imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 80038b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038c0:	1c99      	adds	r1, r3, #2
 80038c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fcee 	bl	80022a8 <imu_calibrate>

 TickType_t xLastWakeTime;
 const TickType_t xFrequency = 2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	633b      	str	r3, [r7, #48]	@ 0x30
 xLastWakeTime = xTaskGetTickCount();
 80038d0:	f008 fe4c 	bl	800c56c <xTaskGetTickCount>
 80038d4:	4603      	mov	r3, r0
 80038d6:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	mpu6050_gyro_get_raw(&raw);
 80038d8:	f107 0320 	add.w	r3, r7, #32
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fe5b 	bl	8001598 <mpu6050_gyro_get_raw>
	gyro_add[0] += (raw.x - gyso_offset[0]);
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80038e8:	4619      	mov	r1, r3
 80038ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80038ee:	1acb      	subs	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
	gyro_add[1] += (raw.y - gyso_offset[1]);
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80038fa:	4619      	mov	r1, r3
 80038fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003900:	1acb      	subs	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
	gyro_add[2] += (raw.z - gyso_offset[2]);
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800390c:	4619      	mov	r1, r3
 800390e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]
	sample_count ++;
 8003918:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800391c:	3301      	adds	r3, #1
 800391e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(sample_count >= 5){
 8003922:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003926:	2b04      	cmp	r3, #4
 8003928:	d93c      	bls.n	80039a4 <read_sensor+0x12c>
	   axis3_t mag;
	   compass_get(&mag);
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd ff50 	bl	80017d4 <compass_get>
	   mag_raw[0] = mag.x;
 8003934:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003938:	4b70      	ldr	r3, [pc, #448]	@ (8003afc <read_sensor+0x284>)
 800393a:	801a      	strh	r2, [r3, #0]
	   mag_raw[1] = mag.y;
 800393c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003940:	4b6e      	ldr	r3, [pc, #440]	@ (8003afc <read_sensor+0x284>)
 8003942:	805a      	strh	r2, [r3, #2]
	   mag_raw[2] = mag.z;
 8003944:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003948:	4b6c      	ldr	r3, [pc, #432]	@ (8003afc <read_sensor+0x284>)
 800394a:	809a      	strh	r2, [r3, #4]

	   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b00 <read_sensor+0x288>)
 8003950:	fb82 1203 	smull	r1, r2, r2, r3
 8003954:	1052      	asrs	r2, r2, #1
 8003956:	17db      	asrs	r3, r3, #31
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	b21a      	sxth	r2, r3
 800395c:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <read_sensor+0x28c>)
 800395e:	801a      	strh	r2, [r3, #0]
	   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	4a67      	ldr	r2, [pc, #412]	@ (8003b00 <read_sensor+0x288>)
 8003964:	fb82 1203 	smull	r1, r2, r2, r3
 8003968:	1052      	asrs	r2, r2, #1
 800396a:	17db      	asrs	r3, r3, #31
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	b21a      	sxth	r2, r3
 8003970:	4b64      	ldr	r3, [pc, #400]	@ (8003b04 <read_sensor+0x28c>)
 8003972:	805a      	strh	r2, [r3, #2]
	   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4a62      	ldr	r2, [pc, #392]	@ (8003b00 <read_sensor+0x288>)
 8003978:	fb82 1203 	smull	r1, r2, r2, r3
 800397c:	1052      	asrs	r2, r2, #1
 800397e:	17db      	asrs	r3, r3, #31
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b21a      	sxth	r2, r3
 8003984:	4b5f      	ldr	r3, [pc, #380]	@ (8003b04 <read_sensor+0x28c>)
 8003986:	809a      	strh	r2, [r3, #4]
	   gyro_add[0] = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
	   gyro_add[1] = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
	   gyro_add[2] = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
	   sample_count = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	   vTaskResume(task1Handle);
 800399a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b08 <read_sensor+0x290>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f008 fc78 	bl	800c294 <vTaskResume>
	}

	raw.x = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	843b      	strh	r3, [r7, #32]
	raw.y = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw.z = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	84bb      	strh	r3, [r7, #36]	@ 0x24

	mpu6050_acc_get_raw(&raw);
 80039b0:	f107 0320 	add.w	r3, r7, #32
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fe2b 	bl	8001610 <mpu6050_acc_get_raw>
	if(first_loop){
 80039ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00e      	beq.n	80039e0 <read_sensor+0x168>
		acc_imu[0] = raw.x;
 80039c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <read_sensor+0x294>)
 80039c8:	801a      	strh	r2, [r3, #0]
		acc_imu[1] = raw.y;
 80039ca:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80039ce:	4b4f      	ldr	r3, [pc, #316]	@ (8003b0c <read_sensor+0x294>)
 80039d0:	805a      	strh	r2, [r3, #2]
		acc_imu[2] = raw.z;
 80039d2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80039d6:	4b4d      	ldr	r3, [pc, #308]	@ (8003b0c <read_sensor+0x294>)
 80039d8:	809a      	strh	r2, [r3, #4]
		first_loop = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	}
	// low pass filter
	acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 80039e0:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <read_sensor+0x294>)
 80039e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fd74 	bl	80004d4 <__aeabi_i2d>
 80039ec:	4604      	mov	r4, r0
 80039ee:	460d      	mov	r5, r1
 80039f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b45      	ldr	r3, [pc, #276]	@ (8003b0c <read_sensor+0x294>)
 80039f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fd68 	bl	80004d4 <__aeabi_i2d>
 8003a04:	a33a      	add	r3, pc, #232	@ (adr r3, 8003af0 <read_sensor+0x278>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fdcd 	bl	80005a8 <__aeabi_dmul>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fc11 	bl	800023c <__adddf3>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4610      	mov	r0, r2
 8003a20:	4619      	mov	r1, r3
 8003a22:	f7fd f871 	bl	8000b08 <__aeabi_d2iz>
 8003a26:	4603      	mov	r3, r0
 8003a28:	b21a      	sxth	r2, r3
 8003a2a:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <read_sensor+0x294>)
 8003a2c:	801a      	strh	r2, [r3, #0]
	acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8003a2e:	4b37      	ldr	r3, [pc, #220]	@ (8003b0c <read_sensor+0x294>)
 8003a30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fc fd4d 	bl	80004d4 <__aeabi_i2d>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b31      	ldr	r3, [pc, #196]	@ (8003b0c <read_sensor+0x294>)
 8003a46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd41 	bl	80004d4 <__aeabi_i2d>
 8003a52:	a327      	add	r3, pc, #156	@ (adr r3, 8003af0 <read_sensor+0x278>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fda6 	bl	80005a8 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4620      	mov	r0, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	f7fc fbea 	bl	800023c <__adddf3>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f84a 	bl	8000b08 <__aeabi_d2iz>
 8003a74:	4603      	mov	r3, r0
 8003a76:	b21a      	sxth	r2, r3
 8003a78:	4b24      	ldr	r3, [pc, #144]	@ (8003b0c <read_sensor+0x294>)
 8003a7a:	805a      	strh	r2, [r3, #2]
	acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 8003a7c:	4b23      	ldr	r3, [pc, #140]	@ (8003b0c <read_sensor+0x294>)
 8003a7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fd26 	bl	80004d4 <__aeabi_i2d>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <read_sensor+0x294>)
 8003a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fc fd1a 	bl	80004d4 <__aeabi_i2d>
 8003aa0:	a313      	add	r3, pc, #76	@ (adr r3, 8003af0 <read_sensor+0x278>)
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f7fc fd7f 	bl	80005a8 <__aeabi_dmul>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4620      	mov	r0, r4
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	f7fc fbc3 	bl	800023c <__adddf3>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	f7fd f823 	bl	8000b08 <__aeabi_d2iz>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	b21a      	sxth	r2, r3
 8003ac6:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <read_sensor+0x294>)
 8003ac8:	809a      	strh	r2, [r3, #4]
    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8003aca:	2000      	movs	r0, #0
 8003acc:	f008 ff18 	bl	800c900 <uxTaskGetStackHighWaterMark>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b10 <read_sensor+0x298>)
 8003ad6:	801a      	strh	r2, [r3, #0]
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f008 fa52 	bl	800bf88 <vTaskDelayUntil>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // debug
 8003ae4:	2108      	movs	r1, #8
 8003ae6:	480b      	ldr	r0, [pc, #44]	@ (8003b14 <read_sensor+0x29c>)
 8003ae8:	f002 f827 	bl	8005b3a <HAL_GPIO_TogglePin>
	mpu6050_gyro_get_raw(&raw);
 8003aec:	e6f4      	b.n	80038d8 <read_sensor+0x60>
 8003aee:	bf00      	nop
 8003af0:	9999999a 	.word	0x9999999a
 8003af4:	3fb99999 	.word	0x3fb99999
 8003af8:	200005e4 	.word	0x200005e4
 8003afc:	20000580 	.word	0x20000580
 8003b00:	66666667 	.word	0x66666667
 8003b04:	20000570 	.word	0x20000570
 8003b08:	20000308 	.word	0x20000308
 8003b0c:	20000578 	.word	0x20000578
 8003b10:	2000058a 	.word	0x2000058a
 8003b14:	40010c00 	.word	0x40010c00

08003b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1e:	f107 0310 	add.w	r3, r7, #16
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2c:	4b46      	ldr	r3, [pc, #280]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	4a45      	ldr	r2, [pc, #276]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b32:	f043 0310 	orr.w	r3, r3, #16
 8003b36:	6193      	str	r3, [r2, #24]
 8003b38:	4b43      	ldr	r3, [pc, #268]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b44:	4b40      	ldr	r3, [pc, #256]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	4a3f      	ldr	r2, [pc, #252]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6193      	str	r3, [r2, #24]
 8003b50:	4b3d      	ldr	r3, [pc, #244]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4a39      	ldr	r2, [pc, #228]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b62:	f043 0308 	orr.w	r3, r3, #8
 8003b66:	6193      	str	r3, [r2, #24]
 8003b68:	4b37      	ldr	r3, [pc, #220]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b74:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	4a33      	ldr	r2, [pc, #204]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6193      	str	r3, [r2, #24]
 8003b80:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <MX_GPIO_Init+0x130>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b92:	482e      	ldr	r0, [pc, #184]	@ (8003c4c <MX_GPIO_Init+0x134>)
 8003b94:	f001 ffb9 	bl	8005b0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2130      	movs	r1, #48	@ 0x30
 8003b9c:	482c      	ldr	r0, [pc, #176]	@ (8003c50 <MX_GPIO_Init+0x138>)
 8003b9e:	f001 ffb4 	bl	8005b0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	21c0      	movs	r1, #192	@ 0xc0
 8003ba6:	482b      	ldr	r0, [pc, #172]	@ (8003c54 <MX_GPIO_Init+0x13c>)
 8003ba8:	f001 ffaf 	bl	8005b0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003bac:	2200      	movs	r2, #0
 8003bae:	2118      	movs	r1, #24
 8003bb0:	4829      	ldr	r0, [pc, #164]	@ (8003c58 <MX_GPIO_Init+0x140>)
 8003bb2:	f001 ffaa 	bl	8005b0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc8:	f107 0310 	add.w	r3, r7, #16
 8003bcc:	4619      	mov	r1, r3
 8003bce:	481f      	ldr	r0, [pc, #124]	@ (8003c4c <MX_GPIO_Init+0x134>)
 8003bd0:	f001 fdf0 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bd4:	2330      	movs	r3, #48	@ 0x30
 8003bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2302      	movs	r3, #2
 8003be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be4:	f107 0310 	add.w	r3, r7, #16
 8003be8:	4619      	mov	r1, r3
 8003bea:	4819      	ldr	r0, [pc, #100]	@ (8003c50 <MX_GPIO_Init+0x138>)
 8003bec:	f001 fde2 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bf0:	23c0      	movs	r3, #192	@ 0xc0
 8003bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4813      	ldr	r0, [pc, #76]	@ (8003c54 <MX_GPIO_Init+0x13c>)
 8003c08:	f001 fdd4 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003c0c:	2318      	movs	r3, #24
 8003c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1c:	f107 0310 	add.w	r3, r7, #16
 8003c20:	4619      	mov	r1, r3
 8003c22:	480d      	ldr	r0, [pc, #52]	@ (8003c58 <MX_GPIO_Init+0x140>)
 8003c24:	f001 fdc6 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c30:	2302      	movs	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f107 0310 	add.w	r3, r7, #16
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4807      	ldr	r0, [pc, #28]	@ (8003c58 <MX_GPIO_Init+0x140>)
 8003c3c:	f001 fdba 	bl	80057b4 <HAL_GPIO_Init>

}
 8003c40:	bf00      	nop
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40010800 	.word	0x40010800
 8003c54:	40011400 	.word	0x40011400
 8003c58:	40010c00 	.word	0x40010c00

08003c5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c60:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c62:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <MX_I2C1_Init+0x54>)
 8003c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c66:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c68:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <MX_I2C1_Init+0x58>)
 8003c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c80:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c86:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c98:	4804      	ldr	r0, [pc, #16]	@ (8003cac <MX_I2C1_Init+0x50>)
 8003c9a:	f001 ff67 	bl	8005b6c <HAL_I2C_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ca4:	f000 f928 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000590 	.word	0x20000590
 8003cb0:	40005400 	.word	0x40005400
 8003cb4:	00061a80 	.word	0x00061a80

08003cb8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cbc:	4b12      	ldr	r3, [pc, #72]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cbe:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <MX_I2C2_Init+0x54>)
 8003cc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003cc2:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cc4:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <MX_I2C2_Init+0x58>)
 8003cc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ce8:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003cf4:	4804      	ldr	r0, [pc, #16]	@ (8003d08 <MX_I2C2_Init+0x50>)
 8003cf6:	f001 ff39 	bl	8005b6c <HAL_I2C_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003d00:	f000 f8fa 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200005e4 	.word	0x200005e4
 8003d0c:	40005800 	.word	0x40005800
 8003d10:	00061a80 	.word	0x00061a80

08003d14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1c:	f107 0318 	add.w	r3, r7, #24
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ddc <HAL_I2C_MspInit+0xc8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d124      	bne.n	8003d7e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d34:	4b2a      	ldr	r3, [pc, #168]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	4a29      	ldr	r2, [pc, #164]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	6193      	str	r3, [r2, #24]
 8003d40:	4b27      	ldr	r3, [pc, #156]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d4c:	23c0      	movs	r3, #192	@ 0xc0
 8003d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d50:	2312      	movs	r3, #18
 8003d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d54:	2303      	movs	r3, #3
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d58:	f107 0318 	add.w	r3, r7, #24
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4821      	ldr	r0, [pc, #132]	@ (8003de4 <HAL_I2C_MspInit+0xd0>)
 8003d60:	f001 fd28 	bl	80057b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d64:	4b1e      	ldr	r3, [pc, #120]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d6e:	61d3      	str	r3, [r2, #28]
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003d7c:	e029      	b.n	8003dd2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a19      	ldr	r2, [pc, #100]	@ (8003de8 <HAL_I2C_MspInit+0xd4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d124      	bne.n	8003dd2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d88:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d8e:	f043 0308 	orr.w	r3, r3, #8
 8003d92:	6193      	str	r3, [r2, #24]
 8003d94:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003da0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003da6:	2312      	movs	r3, #18
 8003da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003daa:	2303      	movs	r3, #3
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dae:	f107 0318 	add.w	r3, r7, #24
 8003db2:	4619      	mov	r1, r3
 8003db4:	480b      	ldr	r0, [pc, #44]	@ (8003de4 <HAL_I2C_MspInit+0xd0>)
 8003db6:	f001 fcfd 	bl	80057b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dba:	4b09      	ldr	r3, [pc, #36]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003dc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003dc4:	61d3      	str	r3, [r2, #28]
 8003dc6:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <HAL_I2C_MspInit+0xcc>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	3728      	adds	r7, #40	@ 0x28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40005400 	.word	0x40005400
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010c00 	.word	0x40010c00
 8003de8:	40005800 	.word	0x40005800

08003dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003df0:	f001 fa68 	bl	80052c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003df4:	f000 f81a 	bl	8003e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003df8:	f7ff fe8e 	bl	8003b18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003dfc:	f7ff ff2e 	bl	8003c5c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003e00:	f7ff ff5a 	bl	8003cb8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003e04:	f000 f87e 	bl	8003f04 <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8003e08:	f000 faca 	bl	80043a0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003e0c:	f000 fb8c 	bl	8004528 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003e10:	f000 fbb4 	bl	800457c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003e14:	f000 fbdc 	bl	80045d0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003e18:	f007 fc1a 	bl	800b650 <MX_FATFS_Init>
  MX_TIM3_Init();
 8003e1c:	f000 fa34 	bl	8004288 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003e20:	f7ff fbc0 	bl	80035a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003e24:	f007 fe03 	bl	800ba2e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <main+0x3c>

08003e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b090      	sub	sp, #64	@ 0x40
 8003e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e32:	f107 0318 	add.w	r3, r7, #24
 8003e36:	2228      	movs	r2, #40	@ 0x28
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f009 fa90 	bl	800d360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e60:	2302      	movs	r3, #2
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e70:	f107 0318 	add.w	r3, r7, #24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fcbb 	bl	80077f0 <HAL_RCC_OscConfig>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003e80:	f000 f83a 	bl	8003ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e84:	230f      	movs	r3, #15
 8003e86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 ff28 	bl	8007cf4 <HAL_RCC_ClockConfig>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003eaa:	f000 f825 	bl	8003ef8 <Error_Handler>
  }
}
 8003eae:	bf00      	nop
 8003eb0:	3740      	adds	r7, #64	@ 0x40
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec8:	d102      	bne.n	8003ed0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003eca:	f001 fa11 	bl	80052f0 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 8003ece:	e00b      	b.n	8003ee8 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a06      	ldr	r2, [pc, #24]	@ (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003ee2:	33ff      	adds	r3, #255	@ 0xff
 8003ee4:	4a03      	ldr	r2, [pc, #12]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40001400 	.word	0x40001400
 8003ef4:	20000304 	.word	0x20000304

08003ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003efc:	b672      	cpsid	i
}
 8003efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <Error_Handler+0x8>

08003f04 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f08:	4b0d      	ldr	r3, [pc, #52]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f44 <MX_SDIO_SD_Init+0x40>)
 8003f0c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f1a:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f20:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f26:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f2e:	22ff      	movs	r2, #255	@ 0xff
 8003f30:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 8003f32:	4b03      	ldr	r3, [pc, #12]	@ (8003f40 <MX_SDIO_SD_Init+0x3c>)
 8003f34:	22ff      	movs	r2, #255	@ 0xff
 8003f36:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	20000638 	.word	0x20000638
 8003f44:	40018000 	.word	0x40018000

08003f48 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0318 	add.w	r3, r7, #24
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a22      	ldr	r2, [pc, #136]	@ (8003fec <HAL_SD_MspInit+0xa4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d13c      	bne.n	8003fe2 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003f68:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	4a20      	ldr	r2, [pc, #128]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f72:	6153      	str	r3, [r2, #20]
 8003f74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	6193      	str	r3, [r2, #24]
 8003f8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f98:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a14      	ldr	r2, [pc, #80]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	6193      	str	r3, [r2, #24]
 8003fa4:	4b12      	ldr	r3, [pc, #72]	@ (8003ff0 <HAL_SD_MspInit+0xa8>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003fb0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fbe:	f107 0318 	add.w	r3, r7, #24
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	480b      	ldr	r0, [pc, #44]	@ (8003ff4 <HAL_SD_MspInit+0xac>)
 8003fc6:	f001 fbf5 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fca:	2304      	movs	r3, #4
 8003fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd6:	f107 0318 	add.w	r3, r7, #24
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4806      	ldr	r0, [pc, #24]	@ (8003ff8 <HAL_SD_MspInit+0xb0>)
 8003fde:	f001 fbe9 	bl	80057b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	3728      	adds	r7, #40	@ 0x28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40018000 	.word	0x40018000
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40011000 	.word	0x40011000
 8003ff8:	40011400 	.word	0x40011400

08003ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004002:	4b18      	ldr	r3, [pc, #96]	@ (8004064 <HAL_MspInit+0x68>)
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <HAL_MspInit+0x68>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6193      	str	r3, [r2, #24]
 800400e:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <HAL_MspInit+0x68>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <HAL_MspInit+0x68>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4a11      	ldr	r2, [pc, #68]	@ (8004064 <HAL_MspInit+0x68>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	61d3      	str	r3, [r2, #28]
 8004026:	4b0f      	ldr	r3, [pc, #60]	@ (8004064 <HAL_MspInit+0x68>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	210f      	movs	r1, #15
 8004036:	f06f 0001 	mvn.w	r0, #1
 800403a:	f001 fa4e 	bl	80054da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_MspInit+0x6c>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	4a04      	ldr	r2, [pc, #16]	@ (8004068 <HAL_MspInit+0x6c>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40010000 	.word	0x40010000

0800406c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	@ 0x38
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004082:	4b34      	ldr	r3, [pc, #208]	@ (8004154 <HAL_InitTick+0xe8>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	4a33      	ldr	r2, [pc, #204]	@ (8004154 <HAL_InitTick+0xe8>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	61d3      	str	r3, [r2, #28]
 800408e:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <HAL_InitTick+0xe8>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800409a:	f107 0210 	add.w	r2, r7, #16
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f003 ff95 	bl	8007fd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80040ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80040b4:	f003 ff66 	bl	8007f84 <HAL_RCC_GetPCLK1Freq>
 80040b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80040ba:	e004      	b.n	80040c6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80040bc:	f003 ff62 	bl	8007f84 <HAL_RCC_GetPCLK1Freq>
 80040c0:	4603      	mov	r3, r0
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	4a23      	ldr	r2, [pc, #140]	@ (8004158 <HAL_InitTick+0xec>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0c9b      	lsrs	r3, r3, #18
 80040d0:	3b01      	subs	r3, #1
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80040d4:	4b21      	ldr	r3, [pc, #132]	@ (800415c <HAL_InitTick+0xf0>)
 80040d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_InitTick+0xf0>)
 80040de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80040e2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80040e4:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <HAL_InitTick+0xf0>)
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <HAL_InitTick+0xf0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_InitTick+0xf0>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f6:	4b19      	ldr	r3, [pc, #100]	@ (800415c <HAL_InitTick+0xf0>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80040fc:	4817      	ldr	r0, [pc, #92]	@ (800415c <HAL_InitTick+0xf0>)
 80040fe:	f004 ff3f 	bl	8008f80 <HAL_TIM_Base_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004108:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11b      	bne.n	8004148 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004110:	4812      	ldr	r0, [pc, #72]	@ (800415c <HAL_InitTick+0xf0>)
 8004112:	f004 ff85 	bl	8009020 <HAL_TIM_Base_Start_IT>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800411c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004120:	2b00      	cmp	r3, #0
 8004122:	d111      	bne.n	8004148 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004124:	201c      	movs	r0, #28
 8004126:	f001 f9f4 	bl	8005512 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d808      	bhi.n	8004142 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004130:	2200      	movs	r2, #0
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	201c      	movs	r0, #28
 8004136:	f001 f9d0 	bl	80054da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800413a:	4a09      	ldr	r2, [pc, #36]	@ (8004160 <HAL_InitTick+0xf4>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e002      	b.n	8004148 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004148:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800414c:	4618      	mov	r0, r3
 800414e:	3738      	adds	r7, #56	@ 0x38
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	431bde83 	.word	0x431bde83
 800415c:	200006bc 	.word	0x200006bc
 8004160:	20000028 	.word	0x20000028

08004164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <NMI_Handler+0x4>

0800416c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <HardFault_Handler+0x4>

08004174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <MemManage_Handler+0x4>

0800417c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <BusFault_Handler+0x4>

08004184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <UsageFault_Handler+0x4>

0800418c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800419c:	4802      	ldr	r0, [pc, #8]	@ (80041a8 <TIM2_IRQHandler+0x10>)
 800419e:	f005 f8b1 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200006bc 	.word	0x200006bc

080041ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041b0:	4802      	ldr	r0, [pc, #8]	@ (80041bc <TIM3_IRQHandler+0x10>)
 80041b2:	f005 f8a7 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000708 	.word	0x20000708

080041c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041c4:	4802      	ldr	r0, [pc, #8]	@ (80041d0 <USART1_IRQHandler+0x10>)
 80041c6:	f005 ffa9 	bl	800a11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000798 	.word	0x20000798

080041d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041d8:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <USART2_IRQHandler+0x10>)
 80041da:	f005 ff9f 	bl	800a11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200007e0 	.word	0x200007e0

080041e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041ec:	4802      	ldr	r0, [pc, #8]	@ (80041f8 <USART3_IRQHandler+0x10>)
 80041ee:	f005 ff95 	bl	800a11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000828 	.word	0x20000828

080041fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004200:	4802      	ldr	r0, [pc, #8]	@ (800420c <TIM7_IRQHandler+0x10>)
 8004202:	f005 f87f 	bl	8009304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000750 	.word	0x20000750

08004210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004218:	4a14      	ldr	r2, [pc, #80]	@ (800426c <_sbrk+0x5c>)
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <_sbrk+0x60>)
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004224:	4b13      	ldr	r3, [pc, #76]	@ (8004274 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800422c:	4b11      	ldr	r3, [pc, #68]	@ (8004274 <_sbrk+0x64>)
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <_sbrk+0x68>)
 8004230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004232:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d207      	bcs.n	8004250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004240:	f009 f8a6 	bl	800d390 <__errno>
 8004244:	4603      	mov	r3, r0
 8004246:	220c      	movs	r2, #12
 8004248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
 800424e:	e009      	b.n	8004264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004250:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <_sbrk+0x64>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004256:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <_sbrk+0x64>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	4a05      	ldr	r2, [pc, #20]	@ (8004274 <_sbrk+0x64>)
 8004260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	2000c000 	.word	0x2000c000
 8004270:	00004000 	.word	0x00004000
 8004274:	20000704 	.word	0x20000704
 8004278:	200017e8 	.word	0x200017e8

0800427c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	@ 0x38
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429c:	f107 0320 	add.w	r3, r7, #32
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
 80042b4:	615a      	str	r2, [r3, #20]
 80042b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042b8:	4b37      	ldr	r3, [pc, #220]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042ba:	4a38      	ldr	r2, [pc, #224]	@ (800439c <MX_TIM3_Init+0x114>)
 80042bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80042be:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042c0:	2247      	movs	r2, #71	@ 0x47
 80042c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d2:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042da:	2280      	movs	r2, #128	@ 0x80
 80042dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042de:	482e      	ldr	r0, [pc, #184]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042e0:	f004 fe4e 	bl	8008f80 <HAL_TIM_Base_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80042ea:	f7ff fe05 	bl	8003ef8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042f8:	4619      	mov	r1, r3
 80042fa:	4827      	ldr	r0, [pc, #156]	@ (8004398 <MX_TIM3_Init+0x110>)
 80042fc:	f005 f9cc 	bl	8009698 <HAL_TIM_ConfigClockSource>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004306:	f7ff fdf7 	bl	8003ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800430a:	4823      	ldr	r0, [pc, #140]	@ (8004398 <MX_TIM3_Init+0x110>)
 800430c:	f004 fee8 	bl	80090e0 <HAL_TIM_PWM_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004316:	f7ff fdef 	bl	8003ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004322:	f107 0320 	add.w	r3, r7, #32
 8004326:	4619      	mov	r1, r3
 8004328:	481b      	ldr	r0, [pc, #108]	@ (8004398 <MX_TIM3_Init+0x110>)
 800432a:	f005 fd81 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004334:	f7ff fde0 	bl	8003ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004338:	2360      	movs	r3, #96	@ 0x60
 800433a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	2200      	movs	r2, #0
 800434c:	4619      	mov	r1, r3
 800434e:	4812      	ldr	r0, [pc, #72]	@ (8004398 <MX_TIM3_Init+0x110>)
 8004350:	f005 f8e0 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800435a:	f7ff fdcd 	bl	8003ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2204      	movs	r2, #4
 8004362:	4619      	mov	r1, r3
 8004364:	480c      	ldr	r0, [pc, #48]	@ (8004398 <MX_TIM3_Init+0x110>)
 8004366:	f005 f8d5 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004370:	f7ff fdc2 	bl	8003ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	2208      	movs	r2, #8
 8004378:	4619      	mov	r1, r3
 800437a:	4807      	ldr	r0, [pc, #28]	@ (8004398 <MX_TIM3_Init+0x110>)
 800437c:	f005 f8ca 	bl	8009514 <HAL_TIM_PWM_ConfigChannel>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004386:	f7ff fdb7 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800438a:	4803      	ldr	r0, [pc, #12]	@ (8004398 <MX_TIM3_Init+0x110>)
 800438c:	f000 f880 	bl	8004490 <HAL_TIM_MspPostInit>

}
 8004390:	bf00      	nop
 8004392:	3738      	adds	r7, #56	@ 0x38
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000708 	.word	0x20000708
 800439c:	40000400 	.word	0x40000400

080043a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a6:	463b      	mov	r3, r7
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043ae:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <MX_TIM7_Init+0x68>)
 80043b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80043b4:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043b6:	2247      	movs	r2, #71	@ 0x47
 80043b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ba:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043ca:	2280      	movs	r2, #128	@ 0x80
 80043cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043ce:	480d      	ldr	r0, [pc, #52]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043d0:	f004 fdd6 	bl	8008f80 <HAL_TIM_Base_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80043da:	f7ff fd8d 	bl	8003ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043e6:	463b      	mov	r3, r7
 80043e8:	4619      	mov	r1, r3
 80043ea:	4806      	ldr	r0, [pc, #24]	@ (8004404 <MX_TIM7_Init+0x64>)
 80043ec:	f005 fd20 	bl	8009e30 <HAL_TIMEx_MasterConfigSynchronization>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80043f6:	f7ff fd7f 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000750 	.word	0x20000750
 8004408:	40001400 	.word	0x40001400

0800440c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1a      	ldr	r2, [pc, #104]	@ (8004484 <HAL_TIM_Base_MspInit+0x78>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d114      	bne.n	8004448 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800441e:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <HAL_TIM_Base_MspInit+0x7c>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <HAL_TIM_Base_MspInit+0x7c>)
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	61d3      	str	r3, [r2, #28]
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <HAL_TIM_Base_MspInit+0x7c>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004436:	2200      	movs	r2, #0
 8004438:	2105      	movs	r1, #5
 800443a:	201d      	movs	r0, #29
 800443c:	f001 f84d 	bl	80054da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004440:	201d      	movs	r0, #29
 8004442:	f001 f866 	bl	8005512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004446:	e018      	b.n	800447a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0f      	ldr	r2, [pc, #60]	@ (800448c <HAL_TIM_Base_MspInit+0x80>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d113      	bne.n	800447a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004452:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <HAL_TIM_Base_MspInit+0x7c>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4a0c      	ldr	r2, [pc, #48]	@ (8004488 <HAL_TIM_Base_MspInit+0x7c>)
 8004458:	f043 0320 	orr.w	r3, r3, #32
 800445c:	61d3      	str	r3, [r2, #28]
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_TIM_Base_MspInit+0x7c>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800446a:	2200      	movs	r2, #0
 800446c:	2105      	movs	r1, #5
 800446e:	2037      	movs	r0, #55	@ 0x37
 8004470:	f001 f833 	bl	80054da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004474:	2037      	movs	r0, #55	@ 0x37
 8004476:	f001 f84c 	bl	8005512 <HAL_NVIC_EnableIRQ>
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40000400 	.word	0x40000400
 8004488:	40021000 	.word	0x40021000
 800448c:	40001400 	.word	0x40001400

08004490 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0310 	add.w	r3, r7, #16
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_TIM_MspPostInit+0x88>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d12f      	bne.n	8004510 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_TIM_MspPostInit+0x8c>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4a19      	ldr	r2, [pc, #100]	@ (800451c <HAL_TIM_MspPostInit+0x8c>)
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	6193      	str	r3, [r2, #24]
 80044bc:	4b17      	ldr	r3, [pc, #92]	@ (800451c <HAL_TIM_MspPostInit+0x8c>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c8:	4b14      	ldr	r3, [pc, #80]	@ (800451c <HAL_TIM_MspPostInit+0x8c>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	4a13      	ldr	r2, [pc, #76]	@ (800451c <HAL_TIM_MspPostInit+0x8c>)
 80044ce:	f043 0308 	orr.w	r3, r3, #8
 80044d2:	6193      	str	r3, [r2, #24]
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_TIM_MspPostInit+0x8c>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044e0:	23c0      	movs	r3, #192	@ 0xc0
 80044e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e8:	2302      	movs	r3, #2
 80044ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	4619      	mov	r1, r3
 80044f2:	480b      	ldr	r0, [pc, #44]	@ (8004520 <HAL_TIM_MspPostInit+0x90>)
 80044f4:	f001 f95e 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004500:	2302      	movs	r3, #2
 8004502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	4619      	mov	r1, r3
 800450a:	4806      	ldr	r0, [pc, #24]	@ (8004524 <HAL_TIM_MspPostInit+0x94>)
 800450c:	f001 f952 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40000400 	.word	0x40000400
 800451c:	40021000 	.word	0x40021000
 8004520:	40010800 	.word	0x40010800
 8004524:	40010c00 	.word	0x40010c00

08004528 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800452c:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 800452e:	4a12      	ldr	r2, [pc, #72]	@ (8004578 <MX_USART1_UART_Init+0x50>)
 8004530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 8004534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004540:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 8004542:	2200      	movs	r2, #0
 8004544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 8004548:	2200      	movs	r2, #0
 800454a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 800454e:	220c      	movs	r2, #12
 8004550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004552:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004558:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 800455a:	2200      	movs	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800455e:	4805      	ldr	r0, [pc, #20]	@ (8004574 <MX_USART1_UART_Init+0x4c>)
 8004560:	f005 fce4 	bl	8009f2c <HAL_UART_Init>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800456a:	f7ff fcc5 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000798 	.word	0x20000798
 8004578:	40013800 	.word	0x40013800

0800457c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004580:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 8004582:	4a12      	ldr	r2, [pc, #72]	@ (80045cc <MX_USART2_UART_Init+0x50>)
 8004584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004586:	4b10      	ldr	r3, [pc, #64]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 8004588:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800458c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800458e:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800459a:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 800459c:	2200      	movs	r2, #0
 800459e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 80045a2:	220c      	movs	r2, #12
 80045a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045a6:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045b2:	4805      	ldr	r0, [pc, #20]	@ (80045c8 <MX_USART2_UART_Init+0x4c>)
 80045b4:	f005 fcba 	bl	8009f2c <HAL_UART_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045be:	f7ff fc9b 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200007e0 	.word	0x200007e0
 80045cc:	40004400 	.word	0x40004400

080045d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <MX_USART3_UART_Init+0x50>)
 80045d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80045da:	4b10      	ldr	r3, [pc, #64]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80045e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045e2:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045e8:	4b0c      	ldr	r3, [pc, #48]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045f4:	4b09      	ldr	r3, [pc, #36]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045f6:	220c      	movs	r2, #12
 80045f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 8004602:	2200      	movs	r2, #0
 8004604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004606:	4805      	ldr	r0, [pc, #20]	@ (800461c <MX_USART3_UART_Init+0x4c>)
 8004608:	f005 fc90 	bl	8009f2c <HAL_UART_Init>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004612:	f7ff fc71 	bl	8003ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000828 	.word	0x20000828
 8004620:	40004800 	.word	0x40004800

08004624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	@ 0x38
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a68      	ldr	r2, [pc, #416]	@ (80047e0 <HAL_UART_MspInit+0x1bc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d13a      	bne.n	80046ba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004644:	4b67      	ldr	r3, [pc, #412]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	4a66      	ldr	r2, [pc, #408]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 800464a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800464e:	6193      	str	r3, [r2, #24]
 8004650:	4b64      	ldr	r3, [pc, #400]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465c:	4b61      	ldr	r3, [pc, #388]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	4a60      	ldr	r2, [pc, #384]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6193      	str	r3, [r2, #24]
 8004668:	4b5e      	ldr	r3, [pc, #376]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004686:	4619      	mov	r1, r3
 8004688:	4857      	ldr	r0, [pc, #348]	@ (80047e8 <HAL_UART_MspInit+0x1c4>)
 800468a:	f001 f893 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800468e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004694:	2300      	movs	r3, #0
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046a0:	4619      	mov	r1, r3
 80046a2:	4851      	ldr	r0, [pc, #324]	@ (80047e8 <HAL_UART_MspInit+0x1c4>)
 80046a4:	f001 f886 	bl	80057b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80046a8:	2200      	movs	r2, #0
 80046aa:	2105      	movs	r1, #5
 80046ac:	2025      	movs	r0, #37	@ 0x25
 80046ae:	f000 ff14 	bl	80054da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046b2:	2025      	movs	r0, #37	@ 0x25
 80046b4:	f000 ff2d 	bl	8005512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80046b8:	e08e      	b.n	80047d8 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4b      	ldr	r2, [pc, #300]	@ (80047ec <HAL_UART_MspInit+0x1c8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d138      	bne.n	8004736 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046c4:	4b47      	ldr	r3, [pc, #284]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4a46      	ldr	r2, [pc, #280]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ce:	61d3      	str	r3, [r2, #28]
 80046d0:	4b44      	ldr	r3, [pc, #272]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046dc:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4a40      	ldr	r2, [pc, #256]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 80046e2:	f043 0304 	orr.w	r3, r3, #4
 80046e6:	6193      	str	r3, [r2, #24]
 80046e8:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046f4:	2304      	movs	r3, #4
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f8:	2302      	movs	r3, #2
 80046fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046fc:	2303      	movs	r3, #3
 80046fe:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004704:	4619      	mov	r1, r3
 8004706:	4838      	ldr	r0, [pc, #224]	@ (80047e8 <HAL_UART_MspInit+0x1c4>)
 8004708:	f001 f854 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800470c:	2308      	movs	r3, #8
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004710:	2300      	movs	r3, #0
 8004712:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800471c:	4619      	mov	r1, r3
 800471e:	4832      	ldr	r0, [pc, #200]	@ (80047e8 <HAL_UART_MspInit+0x1c4>)
 8004720:	f001 f848 	bl	80057b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004724:	2200      	movs	r2, #0
 8004726:	2105      	movs	r1, #5
 8004728:	2026      	movs	r0, #38	@ 0x26
 800472a:	f000 fed6 	bl	80054da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800472e:	2026      	movs	r0, #38	@ 0x26
 8004730:	f000 feef 	bl	8005512 <HAL_NVIC_EnableIRQ>
}
 8004734:	e050      	b.n	80047d8 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART3)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2d      	ldr	r2, [pc, #180]	@ (80047f0 <HAL_UART_MspInit+0x1cc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d14b      	bne.n	80047d8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004740:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4a27      	ldr	r2, [pc, #156]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 8004746:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800474a:	61d3      	str	r3, [r2, #28]
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004758:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 800475e:	f043 0320 	orr.w	r3, r3, #32
 8004762:	6193      	str	r3, [r2, #24]
 8004764:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <HAL_UART_MspInit+0x1c0>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004776:	2302      	movs	r3, #2
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800477e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004782:	4619      	mov	r1, r3
 8004784:	481b      	ldr	r0, [pc, #108]	@ (80047f4 <HAL_UART_MspInit+0x1d0>)
 8004786:	f001 f815 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800478a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800479c:	4619      	mov	r1, r3
 800479e:	4815      	ldr	r0, [pc, #84]	@ (80047f4 <HAL_UART_MspInit+0x1d0>)
 80047a0:	f001 f808 	bl	80057b4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <HAL_UART_MspInit+0x1d4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80047b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80047c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c2:	4a0d      	ldr	r2, [pc, #52]	@ (80047f8 <HAL_UART_MspInit+0x1d4>)
 80047c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2105      	movs	r1, #5
 80047cc:	2027      	movs	r0, #39	@ 0x27
 80047ce:	f000 fe84 	bl	80054da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047d2:	2027      	movs	r0, #39	@ 0x27
 80047d4:	f000 fe9d 	bl	8005512 <HAL_NVIC_EnableIRQ>
}
 80047d8:	bf00      	nop
 80047da:	3738      	adds	r7, #56	@ 0x38
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40010800 	.word	0x40010800
 80047ec:	40004400 	.word	0x40004400
 80047f0:	40004800 	.word	0x40004800
 80047f4:	40011400 	.word	0x40011400
 80047f8:	40010000 	.word	0x40010000

080047fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047fc:	f7ff fd3e 	bl	800427c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004800:	480b      	ldr	r0, [pc, #44]	@ (8004830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004802:	490c      	ldr	r1, [pc, #48]	@ (8004834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004804:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004808:	e002      	b.n	8004810 <LoopCopyDataInit>

0800480a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800480a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800480c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800480e:	3304      	adds	r3, #4

08004810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004814:	d3f9      	bcc.n	800480a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004816:	4a09      	ldr	r2, [pc, #36]	@ (800483c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004818:	4c09      	ldr	r4, [pc, #36]	@ (8004840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800481a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800481c:	e001      	b.n	8004822 <LoopFillZerobss>

0800481e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800481e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004820:	3204      	adds	r2, #4

08004822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004824:	d3fb      	bcc.n	800481e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004826:	f008 fdb9 	bl	800d39c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800482a:	f7ff fadf 	bl	8003dec <main>
  bx lr
 800482e:	4770      	bx	lr
  ldr r0, =_sdata
 8004830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004834:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004838:	0800d8bc 	.word	0x0800d8bc
  ldr r2, =_sbss
 800483c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004840:	200017e8 	.word	0x200017e8

08004844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004844:	e7fe      	b.n	8004844 <ADC1_2_IRQHandler>
	...

08004848 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	791b      	ldrb	r3, [r3, #4]
 8004854:	2b05      	cmp	r3, #5
 8004856:	d820      	bhi.n	800489a <AT24Cxx_get_max_addr+0x52>
 8004858:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <AT24Cxx_get_max_addr+0x18>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004879 	.word	0x08004879
 8004864:	0800487d 	.word	0x0800487d
 8004868:	08004883 	.word	0x08004883
 800486c:	08004889 	.word	0x08004889
 8004870:	0800488f 	.word	0x0800488f
 8004874:	08004895 	.word	0x08004895
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8004878:	237f      	movs	r3, #127	@ 0x7f
 800487a:	e00f      	b.n	800489c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 800487c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004880:	e00c      	b.n	800489c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8004882:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004886:	e009      	b.n	800489c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8004888:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800488c:	e006      	b.n	800489c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 800488e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004892:	e003      	b.n	800489c <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8004894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004898:	e000      	b.n	800489c <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 800489a:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop

080048a8 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	791b      	ldrb	r3, [r3, #4]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d81b      	bhi.n	80048f0 <AT24Cxx_get_pg_size+0x48>
 80048b8:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <AT24Cxx_get_pg_size+0x18>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048e1 	.word	0x080048e1
 80048cc:	080048e5 	.word	0x080048e5
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048ed 	.word	0x080048ed
	case AT24C01:
		return AT24C01_PG_SIZE;
 80048d8:	2308      	movs	r3, #8
 80048da:	e00a      	b.n	80048f2 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 80048dc:	2320      	movs	r3, #32
 80048de:	e008      	b.n	80048f2 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e006      	b.n	80048f2 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 80048e4:	2340      	movs	r3, #64	@ 0x40
 80048e6:	e004      	b.n	80048f2 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 80048e8:	2340      	movs	r3, #64	@ 0x40
 80048ea:	e002      	b.n	80048f2 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	e000      	b.n	80048f2 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 80048f0:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	460b      	mov	r3, r1
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800490a:	2114      	movs	r1, #20
 800490c:	2001      	movs	r0, #1
 800490e:	f008 fc5d 	bl	800d1cc <calloc>
 8004912:	4603      	mov	r3, r0
 8004914:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <AT24Cxx_init+0x26>
		return at_init_err;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
 8004920:	e028      	b.n	8004974 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]
 8004926:	e007      	b.n	8004938 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8004928:	7dfa      	ldrb	r2, [r7, #23]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2100      	movs	r1, #0
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	3301      	adds	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b07      	cmp	r3, #7
 800493c:	d9f4      	bls.n	8004928 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	b29a      	uxth	r2, r3
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2205      	movs	r2, #5
 8004956:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2201      	movs	r2, #1
 8004962:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	601a      	str	r2, [r3, #0]

	return at_ok;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	460b      	mov	r3, r1
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <AT24Cxx_add_dev+0x22>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d902      	bls.n	80049a4 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 800499e:	f06f 0301 	mvn.w	r3, #1
 80049a2:	e03e      	b.n	8004a22 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80049a4:	2114      	movs	r1, #20
 80049a6:	2001      	movs	r0, #1
 80049a8:	f008 fc10 	bl	800d1cc <calloc>
 80049ac:	4603      	mov	r3, r0
 80049ae:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 80049b6:	f06f 0301 	mvn.w	r3, #1
 80049ba:	e032      	b.n	8004a22 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 80049bc:	7afb      	ldrb	r3, [r7, #11]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2205      	movs	r2, #5
 80049e0:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2201      	movs	r2, #1
 80049ec:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f4:	3301      	adds	r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a14:	1e9a      	subs	r2, r3, #2
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	60da      	str	r2, [r3, #12]
	return at_ok;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8004a2a:	b5b0      	push	{r4, r5, r7, lr}
 8004a2c:	b08a      	sub	sp, #40	@ 0x28
 8004a2e:	af04      	add	r7, sp, #16
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	4611      	mov	r1, r2
 8004a36:	461a      	mov	r2, r3
 8004a38:	460b      	mov	r3, r1
 8004a3a:	80fb      	strh	r3, [r7, #6]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff ff31 	bl	80048a8 <AT24Cxx_get_pg_size>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	7dba      	ldrb	r2, [r7, #22]
 8004a4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a52:	fb01 f202 	mul.w	r2, r1, r2
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	7dba      	ldrb	r2, [r7, #22]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8004a60:	88ba      	ldrh	r2, [r7, #4]
 8004a62:	7d7b      	ldrb	r3, [r7, #21]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	7dbb      	ldrb	r3, [r7, #22]
 8004a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a6c:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8004a6e:	88ba      	ldrh	r2, [r7, #4]
 8004a70:	7d7b      	ldrb	r3, [r7, #21]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	7dba      	ldrb	r2, [r7, #22]
 8004a76:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a7a:	fb01 f202 	mul.w	r2, r1, r2
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	7d7b      	ldrb	r3, [r7, #21]
 8004a86:	4413      	add	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dd23      	ble.n	8004ad4 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	7d7b      	ldrb	r3, [r7, #21]
 8004a90:	18d4      	adds	r4, r2, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff fed8 	bl	8004848 <AT24Cxx_get_max_addr>
 8004a98:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	da1a      	bge.n	8004ad4 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8004a9e:	bf00      	nop
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	88db      	ldrh	r3, [r3, #6]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	b21b      	sxth	r3, r3
 8004aac:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004ab0:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8004ab2:	b299      	uxth	r1, r3
 8004ab4:	7d7b      	ldrb	r3, [r7, #21]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8004abe:	9402      	str	r4, [sp, #8]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	f001 fcfe 	bl	80064c8 <HAL_I2C_Mem_Write>
 8004acc:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e6      	bne.n	8004aa0 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8004ad2:	e002      	b.n	8004ada <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8004ad4:	f06f 0304 	mvn.w	r3, #4
 8004ad8:	e0a5      	b.n	8004c26 <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]
 8004ade:	e04e      	b.n	8004b7e <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	7d7b      	ldrb	r3, [r7, #21]
 8004ae4:	441a      	add	r2, r3
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	7db9      	ldrb	r1, [r7, #22]
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	dd3e      	ble.n	8004b72 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	7d7b      	ldrb	r3, [r7, #21]
 8004af8:	441a      	add	r2, r3
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	7db9      	ldrb	r1, [r7, #22]
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	18d4      	adds	r4, r2, r3
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fe9f 	bl	8004848 <AT24Cxx_get_max_addr>
 8004b0a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	da30      	bge.n	8004b72 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b10:	bf00      	nop
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88db      	ldrh	r3, [r3, #6]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004b22:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b24:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 8004b26:	7d7b      	ldrb	r3, [r7, #21]
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	7db9      	ldrb	r1, [r7, #22]
 8004b36:	b289      	uxth	r1, r1
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b3e:	4413      	add	r3, r2
 8004b40:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8004b42:	7d7b      	ldrb	r3, [r7, #21]
 8004b44:	7dfa      	ldrb	r2, [r7, #23]
 8004b46:	7db9      	ldrb	r1, [r7, #22]
 8004b48:	fb01 f202 	mul.w	r2, r1, r2
 8004b4c:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	7dba      	ldrb	r2, [r7, #22]
 8004b54:	b292      	uxth	r2, r2
 8004b56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b5a:	9102      	str	r1, [sp, #8]
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2310      	movs	r3, #16
 8004b62:	462a      	mov	r2, r5
 8004b64:	4621      	mov	r1, r4
 8004b66:	f001 fcaf 	bl	80064c8 <HAL_I2C_Mem_Write>
 8004b6a:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1d0      	bne.n	8004b12 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004b70:	e002      	b.n	8004b78 <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 8004b72:	f06f 0304 	mvn.w	r3, #4
 8004b76:	e056      	b.n	8004c26 <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
 8004b7e:	7dfa      	ldrb	r2, [r7, #23]
 8004b80:	7d3b      	ldrb	r3, [r7, #20]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3ac      	bcc.n	8004ae0 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d04b      	beq.n	8004c24 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	7d7b      	ldrb	r3, [r7, #21]
 8004b90:	441a      	add	r2, r3
 8004b92:	7d3b      	ldrb	r3, [r7, #20]
 8004b94:	7db9      	ldrb	r1, [r7, #22]
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	dd3e      	ble.n	8004c1e <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	7d7b      	ldrb	r3, [r7, #21]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	7d3b      	ldrb	r3, [r7, #20]
 8004ba8:	7db9      	ldrb	r1, [r7, #22]
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	18d4      	adds	r4, r2, r3
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7ff fe49 	bl	8004848 <AT24Cxx_get_max_addr>
 8004bb6:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004bb8:	429c      	cmp	r4, r3
 8004bba:	da30      	bge.n	8004c1e <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004bbc:	bf00      	nop
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88db      	ldrh	r3, [r3, #6]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004bce:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004bd0:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8004bd2:	7d7b      	ldrb	r3, [r7, #21]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	4413      	add	r3, r2
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	7d3b      	ldrb	r3, [r7, #20]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	7db9      	ldrb	r1, [r7, #22]
 8004be2:	b289      	uxth	r1, r1
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004bea:	4413      	add	r3, r2
 8004bec:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8004bee:	7d7b      	ldrb	r3, [r7, #21]
 8004bf0:	7d3a      	ldrb	r2, [r7, #20]
 8004bf2:	7db9      	ldrb	r1, [r7, #22]
 8004bf4:	fb01 f202 	mul.w	r2, r1, r2
 8004bf8:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	7cfa      	ldrb	r2, [r7, #19]
 8004c00:	b292      	uxth	r2, r2
 8004c02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004c06:	9102      	str	r1, [sp, #8]
 8004c08:	9201      	str	r2, [sp, #4]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	462a      	mov	r2, r5
 8004c10:	4621      	mov	r1, r4
 8004c12:	f001 fc59 	bl	80064c8 <HAL_I2C_Mem_Write>
 8004c16:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1d0      	bne.n	8004bbe <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004c1c:	e002      	b.n	8004c24 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8004c1e:	f06f 0304 	mvn.w	r3, #4
 8004c22:	e000      	b.n	8004c26 <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bdb0      	pop	{r4, r5, r7, pc}

08004c2e <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af04      	add	r7, sp, #16
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	80fb      	strh	r3, [r7, #6]
 8004c40:	4613      	mov	r3, r2
 8004c42:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d022      	beq.n	8004c90 <AT24Cxx_read_byte_buffer+0x62>
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fdfc 	bl	8004848 <AT24Cxx_get_max_addr>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461a      	mov	r2, r3
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d21a      	bcs.n	8004c90 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8004c5a:	bf00      	nop
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88db      	ldrh	r3, [r3, #6]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	b21b      	sxth	r3, r3
 8004c68:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8004c6c:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8004c6e:	b299      	uxth	r1, r3
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	88bb      	ldrh	r3, [r7, #4]
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2310      	movs	r3, #16
 8004c82:	f001 fd1b 	bl	80066bc <HAL_I2C_Mem_Read>
 8004c86:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e7      	bne.n	8004c5c <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e001      	b.n	8004c94 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8004c90:	f06f 0306 	mvn.w	r3, #6
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	da01      	bge.n	8004cb4 <constrain+0x18>
        return low;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	e006      	b.n	8004cc2 <constrain+0x26>
    else if (amt > high)
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	dd01      	ble.n	8004cc0 <constrain+0x24>
        return high;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	e000      	b.n	8004cc2 <constrain+0x26>
    else
        return amt;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7fc fa38 	bl	8001150 <__aeabi_fcmplt>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <constrainf+0x1e>
        return low;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	e009      	b.n	8004cfe <constrainf+0x32>
    else if (amt > high)
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7fc fa4d 	bl	800118c <__aeabi_fcmpgt>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <constrainf+0x30>
        return high;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	e000      	b.n	8004cfe <constrainf+0x32>
    else
        return amt;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <attitude_ctrl_init>:
float roll_trim;

float pitch_pid_gain;
float pitch_trim;

void attitude_ctrl_init(){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af04      	add	r7, sp, #16
   gps_lost = 1;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	@ (8004d90 <attitude_ctrl_init+0x88>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]

   // init pid 
   pid_init(&roll_angle,6,0,0,100,100,LOOP_TIM);
 8004d14:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <attitude_ctrl_init+0x8c>)
 8004d16:	9302      	str	r3, [sp, #8]
 8004d18:	4b1f      	ldr	r3, [pc, #124]	@ (8004d98 <attitude_ctrl_init+0x90>)
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <attitude_ctrl_init+0x90>)
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	491c      	ldr	r1, [pc, #112]	@ (8004d9c <attitude_ctrl_init+0x94>)
 8004d2a:	481d      	ldr	r0, [pc, #116]	@ (8004da0 <attitude_ctrl_init+0x98>)
 8004d2c:	f7fe fa13 	bl	8003156 <pid_init>
   pid_init(&roll_rate,3,0,0.2,2,100,LOOP_TIM);
 8004d30:	4b18      	ldr	r3, [pc, #96]	@ (8004d94 <attitude_ctrl_init+0x8c>)
 8004d32:	9302      	str	r3, [sp, #8]
 8004d34:	4b18      	ldr	r3, [pc, #96]	@ (8004d98 <attitude_ctrl_init+0x90>)
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4b19      	ldr	r3, [pc, #100]	@ (8004da4 <attitude_ctrl_init+0x9c>)
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	4918      	ldr	r1, [pc, #96]	@ (8004da8 <attitude_ctrl_init+0xa0>)
 8004d46:	4819      	ldr	r0, [pc, #100]	@ (8004dac <attitude_ctrl_init+0xa4>)
 8004d48:	f7fe fa05 	bl	8003156 <pid_init>

   pid_init(&pitch_angle,4,0,0,100,100,LOOP_TIM);
 8004d4c:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <attitude_ctrl_init+0x8c>)
 8004d4e:	9302      	str	r3, [sp, #8]
 8004d50:	4b11      	ldr	r3, [pc, #68]	@ (8004d98 <attitude_ctrl_init+0x90>)
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <attitude_ctrl_init+0x90>)
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8004d64:	4812      	ldr	r0, [pc, #72]	@ (8004db0 <attitude_ctrl_init+0xa8>)
 8004d66:	f7fe f9f6 	bl	8003156 <pid_init>
   pid_init(&pitch_rate,3,0,0,2,100,LOOP_TIM);
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <attitude_ctrl_init+0x8c>)
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <attitude_ctrl_init+0x90>)
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	4909      	ldr	r1, [pc, #36]	@ (8004da8 <attitude_ctrl_init+0xa0>)
 8004d82:	480c      	ldr	r0, [pc, #48]	@ (8004db4 <attitude_ctrl_init+0xac>)
 8004d84:	f7fe f9e7 	bl	8003156 <pid_init>

}
 8004d88:	bf00      	nop
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000920 	.word	0x20000920
 8004d94:	3c23d70a 	.word	0x3c23d70a
 8004d98:	42c80000 	.word	0x42c80000
 8004d9c:	40c00000 	.word	0x40c00000
 8004da0:	200008c8 	.word	0x200008c8
 8004da4:	3e4ccccd 	.word	0x3e4ccccd
 8004da8:	40400000 	.word	0x40400000
 8004dac:	20000878 	.word	0x20000878
 8004db0:	200008f0 	.word	0x200008f0
 8004db4:	200008a0 	.word	0x200008a0

08004db8 <attitude_ctrl>:

void attitude_ctrl(){ 
 8004db8:	b5b0      	push	{r4, r5, r7, lr}
 8004dba:	b090      	sub	sp, #64	@ 0x40
 8004dbc:	af00      	add	r7, sp, #0

    float roll_r = AHRS.roll_rate;
 8004dbe:	4b49      	ldr	r3, [pc, #292]	@ (8004ee4 <attitude_ctrl+0x12c>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    float pitch_r = AHRS.pitch_rate;
 8004dc4:	4b47      	ldr	r3, [pc, #284]	@ (8004ee4 <attitude_ctrl+0x12c>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   // float yaw_r = AHRS.yaw_rate;
    float roll = AHRS.roll;
 8004dca:	4b46      	ldr	r3, [pc, #280]	@ (8004ee4 <attitude_ctrl+0x12c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	633b      	str	r3, [r7, #48]	@ 0x30
    float pitch = AHRS.pitch;
 8004dd0:	4b44      	ldr	r3, [pc, #272]	@ (8004ee4 <attitude_ctrl+0x12c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //float yaw = AHRS.yaw;
    roll_cmd = ((int)ibusChannelData[0] - 1500)*0.15f;
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <attitude_ctrl+0x130>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb ffc4 	bl	8000d6c <__aeabi_i2f>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4941      	ldr	r1, [pc, #260]	@ (8004eec <attitude_ctrl+0x134>)
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fc f813 	bl	8000e14 <__aeabi_fmul>
 8004dee:	4603      	mov	r3, r0
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef0 <attitude_ctrl+0x138>)
 8004df4:	601a      	str	r2, [r3, #0]
	pitch_cmd = ((int)ibusChannelData[1] - 1500)*-0.15f;
 8004df6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee8 <attitude_ctrl+0x130>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb ffb4 	bl	8000d6c <__aeabi_i2f>
 8004e04:	4603      	mov	r3, r0
 8004e06:	493b      	ldr	r1, [pc, #236]	@ (8004ef4 <attitude_ctrl+0x13c>)
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fc f803 	bl	8000e14 <__aeabi_fmul>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <attitude_ctrl+0x140>)
 8004e14:	601a      	str	r2, [r3, #0]

	float pid_velo_scale;

    // pid scale with gps velocity 
    if(_gps.fix > 1){
 8004e16:	4b39      	ldr	r3, [pc, #228]	@ (8004efc <attitude_ctrl+0x144>)
 8004e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d975      	bls.n	8004f0c <attitude_ctrl+0x154>
        float vn = (float)_gps.velocity[0]/100;  // m
 8004e20:	4b36      	ldr	r3, [pc, #216]	@ (8004efc <attitude_ctrl+0x144>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fb ffa1 	bl	8000d6c <__aeabi_i2f>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4934      	ldr	r1, [pc, #208]	@ (8004f00 <attitude_ctrl+0x148>)
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fc f8a4 	bl	8000f7c <__aeabi_fdiv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	62bb      	str	r3, [r7, #40]	@ 0x28
        float ve = (float)_gps.velocity[1]/100;  // m
 8004e38:	4b30      	ldr	r3, [pc, #192]	@ (8004efc <attitude_ctrl+0x144>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb ff95 	bl	8000d6c <__aeabi_i2f>
 8004e42:	4603      	mov	r3, r0
 8004e44:	492e      	ldr	r1, [pc, #184]	@ (8004f00 <attitude_ctrl+0x148>)
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fc f898 	bl	8000f7c <__aeabi_fdiv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        float vd = (float)_gps.velocity[2]/100;  // m
 8004e50:	4b2a      	ldr	r3, [pc, #168]	@ (8004efc <attitude_ctrl+0x144>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb ff89 	bl	8000d6c <__aeabi_i2f>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4928      	ldr	r1, [pc, #160]	@ (8004f00 <attitude_ctrl+0x148>)
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc f88c 	bl	8000f7c <__aeabi_fdiv>
 8004e64:	4603      	mov	r3, r0
 8004e66:	623b      	str	r3, [r7, #32]
        //float vd = (float)_gps.velocity[3]/100;

        float absolute_velocity = sqrtf(vn*vn + ve*ve + vd*vd);
 8004e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6c:	f7fb ffd2 	bl	8000e14 <__aeabi_fmul>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461c      	mov	r4, r3
 8004e74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e78:	f7fb ffcc 	bl	8000e14 <__aeabi_fmul>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7fb febf 	bl	8000c04 <__addsf3>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461c      	mov	r4, r3
 8004e8a:	6a39      	ldr	r1, [r7, #32]
 8004e8c:	6a38      	ldr	r0, [r7, #32]
 8004e8e:	f7fb ffc1 	bl	8000e14 <__aeabi_fmul>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4619      	mov	r1, r3
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7fb feb4 	bl	8000c04 <__addsf3>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f008 fac6 	bl	800d430 <sqrtf>
 8004ea4:	61f8      	str	r0, [r7, #28]
       // if(gps_lost){
        //    last_ab_velocity = absolute_velocity;
       //     gps_lost = 0;
        //}
        // max speed 120 km/h -> 33 m/s
        absolute_velocity = constrainf(absolute_velocity,0,33); 
 8004ea6:	4a17      	ldr	r2, [pc, #92]	@ (8004f04 <attitude_ctrl+0x14c>)
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	69f8      	ldr	r0, [r7, #28]
 8004eae:	f7ff ff0d 	bl	8004ccc <constrainf>
 8004eb2:	61f8      	str	r0, [r7, #28]
        //    absolute_velocity = last_ab_velocity + sign(acc_)*0.3f;
        //}
        // apply filter 
        //absolute_velocity_filter += 0.4f*(absolute_velocity - absolute_velocity_filter);
        //last_ab_velocity = absolute_velocity;
        pid_velo_scale = 1.0f/(1 + absolute_velocity*absolute_velocity*0.0026f);
 8004eb4:	69f9      	ldr	r1, [r7, #28]
 8004eb6:	69f8      	ldr	r0, [r7, #28]
 8004eb8:	f7fb ffac 	bl	8000e14 <__aeabi_fmul>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4912      	ldr	r1, [pc, #72]	@ (8004f08 <attitude_ctrl+0x150>)
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb ffa7 	bl	8000e14 <__aeabi_fmul>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb fe99 	bl	8000c04 <__addsf3>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004eda:	f7fc f84f 	bl	8000f7c <__aeabi_fdiv>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee2:	e016      	b.n	8004f12 <attitude_ctrl+0x15a>
 8004ee4:	20000294 	.word	0x20000294
 8004ee8:	200000c0 	.word	0x200000c0
 8004eec:	3e19999a 	.word	0x3e19999a
 8004ef0:	20000870 	.word	0x20000870
 8004ef4:	be19999a 	.word	0xbe19999a
 8004ef8:	20000874 	.word	0x20000874
 8004efc:	2000016c 	.word	0x2000016c
 8004f00:	42c80000 	.word	0x42c80000
 8004f04:	42040000 	.word	0x42040000
 8004f08:	3b2a64c3 	.word	0x3b2a64c3
        
    }
    else{
        pid_velo_scale = 1.0f;
 8004f0c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // stablize mode
    if(ibusChannelData[CH5] > 1600 ){
 8004f12:	4b83      	ldr	r3, [pc, #524]	@ (8005120 <attitude_ctrl+0x368>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f1a:	f240 8127 	bls.w	800516c <attitude_ctrl+0x3b4>


#ifdef ROLL_TEST
        roll_pid_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8004f1e:	4b80      	ldr	r3, [pc, #512]	@ (8005120 <attitude_ctrl+0x368>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb ff20 	bl	8000d6c <__aeabi_i2f>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	497d      	ldr	r1, [pc, #500]	@ (8005124 <attitude_ctrl+0x36c>)
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb ff6f 	bl	8000e14 <__aeabi_fmul>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005128 <attitude_ctrl+0x370>)
 8004f3c:	601a      	str	r2, [r3, #0]
        roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8004f3e:	4b78      	ldr	r3, [pc, #480]	@ (8005120 <attitude_ctrl+0x368>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb ff10 	bl	8000d6c <__aeabi_i2f>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4977      	ldr	r1, [pc, #476]	@ (800512c <attitude_ctrl+0x374>)
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fb ff5f 	bl	8000e14 <__aeabi_fmul>
 8004f56:	4603      	mov	r3, r0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b75      	ldr	r3, [pc, #468]	@ (8005130 <attitude_ctrl+0x378>)
 8004f5c:	601a      	str	r2, [r3, #0]
#endif

		//const float pitch_pid_gain = ((int)ibusChannelData[CH8] - 1000)*0.001f;
        
        // roll axis
        float r_angle_pid = pid_cal(&roll_angle,roll,roll_cmd + roll_trim);
 8004f5e:	4b75      	ldr	r3, [pc, #468]	@ (8005134 <attitude_ctrl+0x37c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a73      	ldr	r2, [pc, #460]	@ (8005130 <attitude_ctrl+0x378>)
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fb fe4b 	bl	8000c04 <__addsf3>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f74:	4870      	ldr	r0, [pc, #448]	@ (8005138 <attitude_ctrl+0x380>)
 8004f76:	f7fe f91d 	bl	80031b4 <pid_cal>
 8004f7a:	6138      	str	r0, [r7, #16]
        float r_rate_pid  = -pid_cal(&roll_rate,-roll_r,r_angle_pid);
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4619      	mov	r1, r3
 8004f86:	486d      	ldr	r0, [pc, #436]	@ (800513c <attitude_ctrl+0x384>)
 8004f88:	f7fe f914 	bl	80031b4 <pid_cal>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004f92:	60fb      	str	r3, [r7, #12]
        //pitch axis
        float p_angle_pid = pid_cal(&pitch_angle,pitch,pitch_cmd + pitch_trim);
 8004f94:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <attitude_ctrl+0x388>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6a      	ldr	r2, [pc, #424]	@ (8005144 <attitude_ctrl+0x38c>)
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb fe30 	bl	8000c04 <__addsf3>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004faa:	4867      	ldr	r0, [pc, #412]	@ (8005148 <attitude_ctrl+0x390>)
 8004fac:	f7fe f902 	bl	80031b4 <pid_cal>
 8004fb0:	60b8      	str	r0, [r7, #8]
        float p_rate_pid  = -pid_cal(&pitch_rate,-pitch_r,p_angle_pid);
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4863      	ldr	r0, [pc, #396]	@ (800514c <attitude_ctrl+0x394>)
 8004fbe:	f7fe f8f9 	bl	80031b4 <pid_cal>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004fc8:	607b      	str	r3, [r7, #4]

        pid_velo_scale = constrainf(pid_velo_scale,0.3f,1);
 8004fca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004fce:	4960      	ldr	r1, [pc, #384]	@ (8005150 <attitude_ctrl+0x398>)
 8004fd0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004fd2:	f7ff fe7b 	bl	8004ccc <constrainf>
 8004fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        r_rate_pid = r_rate_pid*pid_velo_scale*roll_pid_gain;
 8004fd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7fb ff1a 	bl	8000e14 <__aeabi_fmul>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b50      	ldr	r3, [pc, #320]	@ (8005128 <attitude_ctrl+0x370>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fb ff12 	bl	8000e14 <__aeabi_fmul>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]
        p_rate_pid = p_rate_pid*pid_velo_scale*pitch_pid_gain;
 8004ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fb ff0c 	bl	8000e14 <__aeabi_fmul>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b54      	ldr	r3, [pc, #336]	@ (8005154 <attitude_ctrl+0x39c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7fb ff04 	bl	8000e14 <__aeabi_fmul>
 800500c:	4603      	mov	r3, r0
 800500e:	607b      	str	r3, [r7, #4]
        
        roll_pid_filted  += 0.4*(r_rate_pid - roll_pid_filted);
 8005010:	4b51      	ldr	r3, [pc, #324]	@ (8005158 <attitude_ctrl+0x3a0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fa6f 	bl	80004f8 <__aeabi_f2d>
 800501a:	4604      	mov	r4, r0
 800501c:	460d      	mov	r5, r1
 800501e:	4b4e      	ldr	r3, [pc, #312]	@ (8005158 <attitude_ctrl+0x3a0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7fb fdeb 	bl	8000c00 <__aeabi_fsub>
 800502a:	4603      	mov	r3, r0
 800502c:	4618      	mov	r0, r3
 800502e:	f7fb fa63 	bl	80004f8 <__aeabi_f2d>
 8005032:	a339      	add	r3, pc, #228	@ (adr r3, 8005118 <attitude_ctrl+0x360>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb fab6 	bl	80005a8 <__aeabi_dmul>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4620      	mov	r0, r4
 8005042:	4629      	mov	r1, r5
 8005044:	f7fb f8fa 	bl	800023c <__adddf3>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	f7fb fd82 	bl	8000b58 <__aeabi_d2f>
 8005054:	4603      	mov	r3, r0
 8005056:	4a40      	ldr	r2, [pc, #256]	@ (8005158 <attitude_ctrl+0x3a0>)
 8005058:	6013      	str	r3, [r2, #0]
        pitch_pid_filted += 0.4*(p_rate_pid - pitch_pid_filted);
 800505a:	4b40      	ldr	r3, [pc, #256]	@ (800515c <attitude_ctrl+0x3a4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fb fa4a 	bl	80004f8 <__aeabi_f2d>
 8005064:	4604      	mov	r4, r0
 8005066:	460d      	mov	r5, r1
 8005068:	4b3c      	ldr	r3, [pc, #240]	@ (800515c <attitude_ctrl+0x3a4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fb fdc6 	bl	8000c00 <__aeabi_fsub>
 8005074:	4603      	mov	r3, r0
 8005076:	4618      	mov	r0, r3
 8005078:	f7fb fa3e 	bl	80004f8 <__aeabi_f2d>
 800507c:	a326      	add	r3, pc, #152	@ (adr r3, 8005118 <attitude_ctrl+0x360>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb fa91 	bl	80005a8 <__aeabi_dmul>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4620      	mov	r0, r4
 800508c:	4629      	mov	r1, r5
 800508e:	f7fb f8d5 	bl	800023c <__adddf3>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f7fb fd5d 	bl	8000b58 <__aeabi_d2f>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a2e      	ldr	r2, [pc, #184]	@ (800515c <attitude_ctrl+0x3a4>)
 80050a2:	6013      	str	r3, [r2, #0]
		

#ifdef ROLL_TEST
		int s1 = 1500 - ibusChannelData[CH2];
 80050a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005120 <attitude_ctrl+0x368>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 80050ac:	3304      	adds	r3, #4
 80050ae:	603b      	str	r3, [r7, #0]

        servoL = 1500 + roll_pid_filted + s1;// - pitch_pid_filted;
 80050b0:	4b29      	ldr	r3, [pc, #164]	@ (8005158 <attitude_ctrl+0x3a0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	492a      	ldr	r1, [pc, #168]	@ (8005160 <attitude_ctrl+0x3a8>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fb fda4 	bl	8000c04 <__addsf3>
 80050bc:	4603      	mov	r3, r0
 80050be:	461c      	mov	r4, r3
 80050c0:	6838      	ldr	r0, [r7, #0]
 80050c2:	f7fb fe53 	bl	8000d6c <__aeabi_i2f>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4619      	mov	r1, r3
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7fb fd9a 	bl	8000c04 <__addsf3>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc f8a0 	bl	8001218 <__aeabi_f2uiz>
 80050d8:	4603      	mov	r3, r0
 80050da:	b29a      	uxth	r2, r3
 80050dc:	4b21      	ldr	r3, [pc, #132]	@ (8005164 <attitude_ctrl+0x3ac>)
 80050de:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - roll_pid_filted + s1;// - pitch_pid_filted;
 80050e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <attitude_ctrl+0x3a0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	481e      	ldr	r0, [pc, #120]	@ (8005160 <attitude_ctrl+0x3a8>)
 80050e8:	f7fb fd8a 	bl	8000c00 <__aeabi_fsub>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461c      	mov	r4, r3
 80050f0:	6838      	ldr	r0, [r7, #0]
 80050f2:	f7fb fe3b 	bl	8000d6c <__aeabi_i2f>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4619      	mov	r1, r3
 80050fa:	4620      	mov	r0, r4
 80050fc:	f7fb fd82 	bl	8000c04 <__addsf3>
 8005100:	4603      	mov	r3, r0
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc f888 	bl	8001218 <__aeabi_f2uiz>
 8005108:	4603      	mov	r3, r0
 800510a:	b29a      	uxth	r2, r3
 800510c:	4b16      	ldr	r3, [pc, #88]	@ (8005168 <attitude_ctrl+0x3b0>)
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e0a2      	b.n	8005258 <attitude_ctrl+0x4a0>
 8005112:	bf00      	nop
 8005114:	f3af 8000 	nop.w
 8005118:	9999999a 	.word	0x9999999a
 800511c:	3fd99999 	.word	0x3fd99999
 8005120:	200000c0 	.word	0x200000c0
 8005124:	3b03126f 	.word	0x3b03126f
 8005128:	2000092c 	.word	0x2000092c
 800512c:	bdcccccd 	.word	0xbdcccccd
 8005130:	20000930 	.word	0x20000930
 8005134:	20000870 	.word	0x20000870
 8005138:	200008c8 	.word	0x200008c8
 800513c:	20000878 	.word	0x20000878
 8005140:	20000874 	.word	0x20000874
 8005144:	20000938 	.word	0x20000938
 8005148:	200008f0 	.word	0x200008f0
 800514c:	200008a0 	.word	0x200008a0
 8005150:	3e99999a 	.word	0x3e99999a
 8005154:	20000934 	.word	0x20000934
 8005158:	20000918 	.word	0x20000918
 800515c:	2000091c 	.word	0x2000091c
 8005160:	44bb8000 	.word	0x44bb8000
 8005164:	20000922 	.word	0x20000922
 8005168:	20000924 	.word	0x20000924
#endif
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 800516c:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <attitude_ctrl+0x4f8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005174:	3304      	adds	r3, #4
 8005176:	61bb      	str	r3, [r7, #24]
        int s2 = 1500 - ibusChannelData[CH2];
 8005178:	4b4d      	ldr	r3, [pc, #308]	@ (80052b0 <attitude_ctrl+0x4f8>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005180:	3304      	adds	r3, #4
 8005182:	617b      	str	r3, [r7, #20]

        smooth_ch1 += 0.8*(s1 - smooth_ch1);
 8005184:	4b4b      	ldr	r3, [pc, #300]	@ (80052b4 <attitude_ctrl+0x4fc>)
 8005186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb f9a2 	bl	80004d4 <__aeabi_i2d>
 8005190:	4604      	mov	r4, r0
 8005192:	460d      	mov	r5, r1
 8005194:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <attitude_ctrl+0x4fc>)
 8005196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800519a:	461a      	mov	r2, r3
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fb f997 	bl	80004d4 <__aeabi_i2d>
 80051a6:	a340      	add	r3, pc, #256	@ (adr r3, 80052a8 <attitude_ctrl+0x4f0>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fb f9fc 	bl	80005a8 <__aeabi_dmul>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4620      	mov	r0, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7fb f840 	bl	800023c <__adddf3>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	f7fb fca0 	bl	8000b08 <__aeabi_d2iz>
 80051c8:	4603      	mov	r3, r0
 80051ca:	b21a      	sxth	r2, r3
 80051cc:	4b39      	ldr	r3, [pc, #228]	@ (80052b4 <attitude_ctrl+0x4fc>)
 80051ce:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 80051d0:	4b39      	ldr	r3, [pc, #228]	@ (80052b8 <attitude_ctrl+0x500>)
 80051d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fb f97c 	bl	80004d4 <__aeabi_i2d>
 80051dc:	4604      	mov	r4, r0
 80051de:	460d      	mov	r5, r1
 80051e0:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <attitude_ctrl+0x500>)
 80051e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e6:	461a      	mov	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb f971 	bl	80004d4 <__aeabi_i2d>
 80051f2:	a32d      	add	r3, pc, #180	@ (adr r3, 80052a8 <attitude_ctrl+0x4f0>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb f9d6 	bl	80005a8 <__aeabi_dmul>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fb f81a 	bl	800023c <__adddf3>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	f7fb fc7a 	bl	8000b08 <__aeabi_d2iz>
 8005214:	4603      	mov	r3, r0
 8005216:	b21a      	sxth	r2, r3
 8005218:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <attitude_ctrl+0x500>)
 800521a:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 + smooth_ch2;
 800521c:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <attitude_ctrl+0x4fc>)
 800521e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005222:	b29a      	uxth	r2, r3
 8005224:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <attitude_ctrl+0x500>)
 8005226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800522a:	b29b      	uxth	r3, r3
 800522c:	4413      	add	r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005234:	b29a      	uxth	r2, r3
 8005236:	4b21      	ldr	r3, [pc, #132]	@ (80052bc <attitude_ctrl+0x504>)
 8005238:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 + smooth_ch2;
 800523a:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <attitude_ctrl+0x500>)
 800523c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005240:	b29a      	uxth	r2, r3
 8005242:	4b1c      	ldr	r3, [pc, #112]	@ (80052b4 <attitude_ctrl+0x4fc>)
 8005244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005248:	b29b      	uxth	r3, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	b29b      	uxth	r3, r3
 800524e:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8005252:	b29a      	uxth	r2, r3
 8005254:	4b1a      	ldr	r3, [pc, #104]	@ (80052c0 <attitude_ctrl+0x508>)
 8005256:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8005258:	4b18      	ldr	r3, [pc, #96]	@ (80052bc <attitude_ctrl+0x504>)
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8005260:	f240 414c 	movw	r1, #1100	@ 0x44c
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fd19 	bl	8004c9c <constrain>
 800526a:	4603      	mov	r3, r0
 800526c:	b29a      	uxth	r2, r3
 800526e:	4b13      	ldr	r3, [pc, #76]	@ (80052bc <attitude_ctrl+0x504>)
 8005270:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8005272:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <attitude_ctrl+0x508>)
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	f240 726c 	movw	r2, #1900	@ 0x76c
 800527a:	f240 414c 	movw	r1, #1100	@ 0x44c
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fd0c 	bl	8004c9c <constrain>
 8005284:	4603      	mov	r3, r0
 8005286:	b29a      	uxth	r2, r3
 8005288:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <attitude_ctrl+0x508>)
 800528a:	801a      	strh	r2, [r3, #0]

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 800528c:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <attitude_ctrl+0x4f8>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	b29b      	uxth	r3, r3
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <attitude_ctrl+0x504>)
 8005294:	8811      	ldrh	r1, [r2, #0]
 8005296:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <attitude_ctrl+0x508>)
 8005298:	8812      	ldrh	r2, [r2, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe f8f8 	bl	8003490 <write_pwm_ctrl>

}
 80052a0:	bf00      	nop
 80052a2:	3740      	adds	r7, #64	@ 0x40
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdb0      	pop	{r4, r5, r7, pc}
 80052a8:	9999999a 	.word	0x9999999a
 80052ac:	3fe99999 	.word	0x3fe99999
 80052b0:	200000c0 	.word	0x200000c0
 80052b4:	20000926 	.word	0x20000926
 80052b8:	20000928 	.word	0x20000928
 80052bc:	20000922 	.word	0x20000922
 80052c0:	20000924 	.word	0x20000924

080052c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052c8:	4b08      	ldr	r3, [pc, #32]	@ (80052ec <HAL_Init+0x28>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a07      	ldr	r2, [pc, #28]	@ (80052ec <HAL_Init+0x28>)
 80052ce:	f043 0310 	orr.w	r3, r3, #16
 80052d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052d4:	2003      	movs	r0, #3
 80052d6:	f000 f8f5 	bl	80054c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052da:	200f      	movs	r0, #15
 80052dc:	f7fe fec6 	bl	800406c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052e0:	f7fe fe8c 	bl	8003ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40022000 	.word	0x40022000

080052f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_IncTick+0x1c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <HAL_IncTick+0x20>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	4a03      	ldr	r2, [pc, #12]	@ (8005310 <HAL_IncTick+0x20>)
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr
 800530c:	2000002c 	.word	0x2000002c
 8005310:	2000093c 	.word	0x2000093c

08005314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return uwTick;
 8005318:	4b02      	ldr	r3, [pc, #8]	@ (8005324 <HAL_GetTick+0x10>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr
 8005324:	2000093c 	.word	0x2000093c

08005328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005330:	f7ff fff0 	bl	8005314 <HAL_GetTick>
 8005334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d005      	beq.n	800534e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005342:	4b0a      	ldr	r3, [pc, #40]	@ (800536c <HAL_Delay+0x44>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800534e:	bf00      	nop
 8005350:	f7ff ffe0 	bl	8005314 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d8f7      	bhi.n	8005350 <HAL_Delay+0x28>
  {
  }
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2000002c 	.word	0x2000002c

08005370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800538c:	4013      	ands	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800539c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a2:	4a04      	ldr	r2, [pc, #16]	@ (80053b4 <__NVIC_SetPriorityGrouping+0x44>)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	60d3      	str	r3, [r2, #12]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053bc:	4b04      	ldr	r3, [pc, #16]	@ (80053d0 <__NVIC_GetPriorityGrouping+0x18>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	f003 0307 	and.w	r3, r3, #7
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	db0b      	blt.n	80053fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	f003 021f 	and.w	r2, r3, #31
 80053ec:	4906      	ldr	r1, [pc, #24]	@ (8005408 <__NVIC_EnableIRQ+0x34>)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2001      	movs	r0, #1
 80053f6:	fa00 f202 	lsl.w	r2, r0, r2
 80053fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	e000e100 	.word	0xe000e100

0800540c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541c:	2b00      	cmp	r3, #0
 800541e:	db0a      	blt.n	8005436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	b2da      	uxtb	r2, r3
 8005424:	490c      	ldr	r1, [pc, #48]	@ (8005458 <__NVIC_SetPriority+0x4c>)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	440b      	add	r3, r1
 8005430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005434:	e00a      	b.n	800544c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	4908      	ldr	r1, [pc, #32]	@ (800545c <__NVIC_SetPriority+0x50>)
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	3b04      	subs	r3, #4
 8005444:	0112      	lsls	r2, r2, #4
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	440b      	add	r3, r1
 800544a:	761a      	strb	r2, [r3, #24]
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	e000e100 	.word	0xe000e100
 800545c:	e000ed00 	.word	0xe000ed00

08005460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	@ 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f1c3 0307 	rsb	r3, r3, #7
 800547a:	2b04      	cmp	r3, #4
 800547c:	bf28      	it	cs
 800547e:	2304      	movcs	r3, #4
 8005480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	3304      	adds	r3, #4
 8005486:	2b06      	cmp	r3, #6
 8005488:	d902      	bls.n	8005490 <NVIC_EncodePriority+0x30>
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3b03      	subs	r3, #3
 800548e:	e000      	b.n	8005492 <NVIC_EncodePriority+0x32>
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005494:	f04f 32ff 	mov.w	r2, #4294967295
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43da      	mvns	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	401a      	ands	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054a8:	f04f 31ff 	mov.w	r1, #4294967295
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	43d9      	mvns	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b8:	4313      	orrs	r3, r2
         );
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3724      	adds	r7, #36	@ 0x24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ff4f 	bl	8005370 <__NVIC_SetPriorityGrouping>
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054da:	b580      	push	{r7, lr}
 80054dc:	b086      	sub	sp, #24
 80054de:	af00      	add	r7, sp, #0
 80054e0:	4603      	mov	r3, r0
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054ec:	f7ff ff64 	bl	80053b8 <__NVIC_GetPriorityGrouping>
 80054f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	6978      	ldr	r0, [r7, #20]
 80054f8:	f7ff ffb2 	bl	8005460 <NVIC_EncodePriority>
 80054fc:	4602      	mov	r2, r0
 80054fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005502:	4611      	mov	r1, r2
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff ff81 	bl	800540c <__NVIC_SetPriority>
}
 800550a:	bf00      	nop
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	4603      	mov	r3, r0
 800551a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800551c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff57 	bl	80053d4 <__NVIC_EnableIRQ>
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d008      	beq.n	8005558 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2204      	movs	r2, #4
 800554a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e020      	b.n	800559a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 020e 	bic.w	r2, r2, #14
 8005566:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0201 	bic.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f202 	lsl.w	r2, r1, r2
 8005586:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d005      	beq.n	80055c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2204      	movs	r2, #4
 80055c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
 80055c6:	e0d6      	b.n	8005776 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 020e 	bic.w	r2, r2, #14
 80055d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b64      	ldr	r3, [pc, #400]	@ (8005780 <HAL_DMA_Abort_IT+0x1dc>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d958      	bls.n	80056a6 <HAL_DMA_Abort_IT+0x102>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a62      	ldr	r2, [pc, #392]	@ (8005784 <HAL_DMA_Abort_IT+0x1e0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d04f      	beq.n	800569e <HAL_DMA_Abort_IT+0xfa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a61      	ldr	r2, [pc, #388]	@ (8005788 <HAL_DMA_Abort_IT+0x1e4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d048      	beq.n	800569a <HAL_DMA_Abort_IT+0xf6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a5f      	ldr	r2, [pc, #380]	@ (800578c <HAL_DMA_Abort_IT+0x1e8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d040      	beq.n	8005694 <HAL_DMA_Abort_IT+0xf0>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a5e      	ldr	r2, [pc, #376]	@ (8005790 <HAL_DMA_Abort_IT+0x1ec>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d038      	beq.n	800568e <HAL_DMA_Abort_IT+0xea>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a5c      	ldr	r2, [pc, #368]	@ (8005794 <HAL_DMA_Abort_IT+0x1f0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d030      	beq.n	8005688 <HAL_DMA_Abort_IT+0xe4>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a5b      	ldr	r2, [pc, #364]	@ (8005798 <HAL_DMA_Abort_IT+0x1f4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d028      	beq.n	8005682 <HAL_DMA_Abort_IT+0xde>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a52      	ldr	r2, [pc, #328]	@ (8005780 <HAL_DMA_Abort_IT+0x1dc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d020      	beq.n	800567c <HAL_DMA_Abort_IT+0xd8>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a57      	ldr	r2, [pc, #348]	@ (800579c <HAL_DMA_Abort_IT+0x1f8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d019      	beq.n	8005678 <HAL_DMA_Abort_IT+0xd4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a55      	ldr	r2, [pc, #340]	@ (80057a0 <HAL_DMA_Abort_IT+0x1fc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d012      	beq.n	8005674 <HAL_DMA_Abort_IT+0xd0>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a54      	ldr	r2, [pc, #336]	@ (80057a4 <HAL_DMA_Abort_IT+0x200>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00a      	beq.n	800566e <HAL_DMA_Abort_IT+0xca>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a52      	ldr	r2, [pc, #328]	@ (80057a8 <HAL_DMA_Abort_IT+0x204>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d102      	bne.n	8005668 <HAL_DMA_Abort_IT+0xc4>
 8005662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005666:	e01b      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 8005668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800566c:	e018      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 800566e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005672:	e015      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 8005674:	2310      	movs	r3, #16
 8005676:	e013      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 8005678:	2301      	movs	r3, #1
 800567a:	e011      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 800567c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005680:	e00e      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 8005682:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005686:	e00b      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 8005688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800568c:	e008      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 800568e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005692:	e005      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 8005694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005698:	e002      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 800569a:	2310      	movs	r3, #16
 800569c:	e000      	b.n	80056a0 <HAL_DMA_Abort_IT+0xfc>
 800569e:	2301      	movs	r3, #1
 80056a0:	4a42      	ldr	r2, [pc, #264]	@ (80057ac <HAL_DMA_Abort_IT+0x208>)
 80056a2:	6053      	str	r3, [r2, #4]
 80056a4:	e057      	b.n	8005756 <HAL_DMA_Abort_IT+0x1b2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a36      	ldr	r2, [pc, #216]	@ (8005784 <HAL_DMA_Abort_IT+0x1e0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04f      	beq.n	8005750 <HAL_DMA_Abort_IT+0x1ac>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a34      	ldr	r2, [pc, #208]	@ (8005788 <HAL_DMA_Abort_IT+0x1e4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d048      	beq.n	800574c <HAL_DMA_Abort_IT+0x1a8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a33      	ldr	r2, [pc, #204]	@ (800578c <HAL_DMA_Abort_IT+0x1e8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d040      	beq.n	8005746 <HAL_DMA_Abort_IT+0x1a2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a31      	ldr	r2, [pc, #196]	@ (8005790 <HAL_DMA_Abort_IT+0x1ec>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d038      	beq.n	8005740 <HAL_DMA_Abort_IT+0x19c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a30      	ldr	r2, [pc, #192]	@ (8005794 <HAL_DMA_Abort_IT+0x1f0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d030      	beq.n	800573a <HAL_DMA_Abort_IT+0x196>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005798 <HAL_DMA_Abort_IT+0x1f4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d028      	beq.n	8005734 <HAL_DMA_Abort_IT+0x190>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a26      	ldr	r2, [pc, #152]	@ (8005780 <HAL_DMA_Abort_IT+0x1dc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d020      	beq.n	800572e <HAL_DMA_Abort_IT+0x18a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	@ (800579c <HAL_DMA_Abort_IT+0x1f8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d019      	beq.n	800572a <HAL_DMA_Abort_IT+0x186>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a29      	ldr	r2, [pc, #164]	@ (80057a0 <HAL_DMA_Abort_IT+0x1fc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d012      	beq.n	8005726 <HAL_DMA_Abort_IT+0x182>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a27      	ldr	r2, [pc, #156]	@ (80057a4 <HAL_DMA_Abort_IT+0x200>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00a      	beq.n	8005720 <HAL_DMA_Abort_IT+0x17c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a26      	ldr	r2, [pc, #152]	@ (80057a8 <HAL_DMA_Abort_IT+0x204>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d102      	bne.n	800571a <HAL_DMA_Abort_IT+0x176>
 8005714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005718:	e01b      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 800571a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800571e:	e018      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 8005720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005724:	e015      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 8005726:	2310      	movs	r3, #16
 8005728:	e013      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 800572a:	2301      	movs	r3, #1
 800572c:	e011      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 800572e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005732:	e00e      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 8005734:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005738:	e00b      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 800573a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800573e:	e008      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 8005740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005744:	e005      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 8005746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800574a:	e002      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 800574c:	2310      	movs	r3, #16
 800574e:	e000      	b.n	8005752 <HAL_DMA_Abort_IT+0x1ae>
 8005750:	2301      	movs	r3, #1
 8005752:	4a17      	ldr	r2, [pc, #92]	@ (80057b0 <HAL_DMA_Abort_IT+0x20c>)
 8005754:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
    } 
  }
  return status;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40020080 	.word	0x40020080
 8005784:	40020008 	.word	0x40020008
 8005788:	4002001c 	.word	0x4002001c
 800578c:	40020030 	.word	0x40020030
 8005790:	40020044 	.word	0x40020044
 8005794:	40020058 	.word	0x40020058
 8005798:	4002006c 	.word	0x4002006c
 800579c:	40020408 	.word	0x40020408
 80057a0:	4002041c 	.word	0x4002041c
 80057a4:	40020430 	.word	0x40020430
 80057a8:	40020444 	.word	0x40020444
 80057ac:	40020400 	.word	0x40020400
 80057b0:	40020000 	.word	0x40020000

080057b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b08b      	sub	sp, #44	@ 0x2c
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80057c2:	2300      	movs	r3, #0
 80057c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057c6:	e179      	b.n	8005abc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80057c8:	2201      	movs	r2, #1
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	4013      	ands	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f040 8168 	bne.w	8005ab6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4a96      	ldr	r2, [pc, #600]	@ (8005a44 <HAL_GPIO_Init+0x290>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d05e      	beq.n	80058ae <HAL_GPIO_Init+0xfa>
 80057f0:	4a94      	ldr	r2, [pc, #592]	@ (8005a44 <HAL_GPIO_Init+0x290>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d875      	bhi.n	80058e2 <HAL_GPIO_Init+0x12e>
 80057f6:	4a94      	ldr	r2, [pc, #592]	@ (8005a48 <HAL_GPIO_Init+0x294>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d058      	beq.n	80058ae <HAL_GPIO_Init+0xfa>
 80057fc:	4a92      	ldr	r2, [pc, #584]	@ (8005a48 <HAL_GPIO_Init+0x294>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d86f      	bhi.n	80058e2 <HAL_GPIO_Init+0x12e>
 8005802:	4a92      	ldr	r2, [pc, #584]	@ (8005a4c <HAL_GPIO_Init+0x298>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d052      	beq.n	80058ae <HAL_GPIO_Init+0xfa>
 8005808:	4a90      	ldr	r2, [pc, #576]	@ (8005a4c <HAL_GPIO_Init+0x298>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d869      	bhi.n	80058e2 <HAL_GPIO_Init+0x12e>
 800580e:	4a90      	ldr	r2, [pc, #576]	@ (8005a50 <HAL_GPIO_Init+0x29c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d04c      	beq.n	80058ae <HAL_GPIO_Init+0xfa>
 8005814:	4a8e      	ldr	r2, [pc, #568]	@ (8005a50 <HAL_GPIO_Init+0x29c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d863      	bhi.n	80058e2 <HAL_GPIO_Init+0x12e>
 800581a:	4a8e      	ldr	r2, [pc, #568]	@ (8005a54 <HAL_GPIO_Init+0x2a0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d046      	beq.n	80058ae <HAL_GPIO_Init+0xfa>
 8005820:	4a8c      	ldr	r2, [pc, #560]	@ (8005a54 <HAL_GPIO_Init+0x2a0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d85d      	bhi.n	80058e2 <HAL_GPIO_Init+0x12e>
 8005826:	2b12      	cmp	r3, #18
 8005828:	d82a      	bhi.n	8005880 <HAL_GPIO_Init+0xcc>
 800582a:	2b12      	cmp	r3, #18
 800582c:	d859      	bhi.n	80058e2 <HAL_GPIO_Init+0x12e>
 800582e:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <HAL_GPIO_Init+0x80>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	080058af 	.word	0x080058af
 8005838:	08005889 	.word	0x08005889
 800583c:	0800589b 	.word	0x0800589b
 8005840:	080058dd 	.word	0x080058dd
 8005844:	080058e3 	.word	0x080058e3
 8005848:	080058e3 	.word	0x080058e3
 800584c:	080058e3 	.word	0x080058e3
 8005850:	080058e3 	.word	0x080058e3
 8005854:	080058e3 	.word	0x080058e3
 8005858:	080058e3 	.word	0x080058e3
 800585c:	080058e3 	.word	0x080058e3
 8005860:	080058e3 	.word	0x080058e3
 8005864:	080058e3 	.word	0x080058e3
 8005868:	080058e3 	.word	0x080058e3
 800586c:	080058e3 	.word	0x080058e3
 8005870:	080058e3 	.word	0x080058e3
 8005874:	080058e3 	.word	0x080058e3
 8005878:	08005891 	.word	0x08005891
 800587c:	080058a5 	.word	0x080058a5
 8005880:	4a75      	ldr	r2, [pc, #468]	@ (8005a58 <HAL_GPIO_Init+0x2a4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005886:	e02c      	b.n	80058e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	623b      	str	r3, [r7, #32]
          break;
 800588e:	e029      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	623b      	str	r3, [r7, #32]
          break;
 8005898:	e024      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	3308      	adds	r3, #8
 80058a0:	623b      	str	r3, [r7, #32]
          break;
 80058a2:	e01f      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	330c      	adds	r3, #12
 80058aa:	623b      	str	r3, [r7, #32]
          break;
 80058ac:	e01a      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80058b6:	2304      	movs	r3, #4
 80058b8:	623b      	str	r3, [r7, #32]
          break;
 80058ba:	e013      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80058c4:	2308      	movs	r3, #8
 80058c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	611a      	str	r2, [r3, #16]
          break;
 80058ce:	e009      	b.n	80058e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80058d0:	2308      	movs	r3, #8
 80058d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	615a      	str	r2, [r3, #20]
          break;
 80058da:	e003      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80058dc:	2300      	movs	r3, #0
 80058de:	623b      	str	r3, [r7, #32]
          break;
 80058e0:	e000      	b.n	80058e4 <HAL_GPIO_Init+0x130>
          break;
 80058e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2bff      	cmp	r3, #255	@ 0xff
 80058e8:	d801      	bhi.n	80058ee <HAL_GPIO_Init+0x13a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	e001      	b.n	80058f2 <HAL_GPIO_Init+0x13e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2bff      	cmp	r3, #255	@ 0xff
 80058f8:	d802      	bhi.n	8005900 <HAL_GPIO_Init+0x14c>
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	e002      	b.n	8005906 <HAL_GPIO_Init+0x152>
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	3b08      	subs	r3, #8
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	210f      	movs	r1, #15
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	6a39      	ldr	r1, [r7, #32]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	fa01 f303 	lsl.w	r3, r1, r3
 8005920:	431a      	orrs	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80c1 	beq.w	8005ab6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005934:	4b49      	ldr	r3, [pc, #292]	@ (8005a5c <HAL_GPIO_Init+0x2a8>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	4a48      	ldr	r2, [pc, #288]	@ (8005a5c <HAL_GPIO_Init+0x2a8>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6193      	str	r3, [r2, #24]
 8005940:	4b46      	ldr	r3, [pc, #280]	@ (8005a5c <HAL_GPIO_Init+0x2a8>)
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800594c:	4a44      	ldr	r2, [pc, #272]	@ (8005a60 <HAL_GPIO_Init+0x2ac>)
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	3302      	adds	r3, #2
 8005954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005958:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	220f      	movs	r2, #15
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3c      	ldr	r2, [pc, #240]	@ (8005a64 <HAL_GPIO_Init+0x2b0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d01f      	beq.n	80059b8 <HAL_GPIO_Init+0x204>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a68 <HAL_GPIO_Init+0x2b4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d019      	beq.n	80059b4 <HAL_GPIO_Init+0x200>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3a      	ldr	r2, [pc, #232]	@ (8005a6c <HAL_GPIO_Init+0x2b8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_GPIO_Init+0x1fc>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a39      	ldr	r2, [pc, #228]	@ (8005a70 <HAL_GPIO_Init+0x2bc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00d      	beq.n	80059ac <HAL_GPIO_Init+0x1f8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a38      	ldr	r2, [pc, #224]	@ (8005a74 <HAL_GPIO_Init+0x2c0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <HAL_GPIO_Init+0x1f4>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a37      	ldr	r2, [pc, #220]	@ (8005a78 <HAL_GPIO_Init+0x2c4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_GPIO_Init+0x1f0>
 80059a0:	2305      	movs	r3, #5
 80059a2:	e00a      	b.n	80059ba <HAL_GPIO_Init+0x206>
 80059a4:	2306      	movs	r3, #6
 80059a6:	e008      	b.n	80059ba <HAL_GPIO_Init+0x206>
 80059a8:	2304      	movs	r3, #4
 80059aa:	e006      	b.n	80059ba <HAL_GPIO_Init+0x206>
 80059ac:	2303      	movs	r3, #3
 80059ae:	e004      	b.n	80059ba <HAL_GPIO_Init+0x206>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e002      	b.n	80059ba <HAL_GPIO_Init+0x206>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <HAL_GPIO_Init+0x206>
 80059b8:	2300      	movs	r3, #0
 80059ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059bc:	f002 0203 	and.w	r2, r2, #3
 80059c0:	0092      	lsls	r2, r2, #2
 80059c2:	4093      	lsls	r3, r2
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80059ca:	4925      	ldr	r1, [pc, #148]	@ (8005a60 <HAL_GPIO_Init+0x2ac>)
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	3302      	adds	r3, #2
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80059e4:	4b25      	ldr	r3, [pc, #148]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	4924      	ldr	r1, [pc, #144]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	608b      	str	r3, [r1, #8]
 80059f0:	e006      	b.n	8005a00 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80059f2:	4b22      	ldr	r3, [pc, #136]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	4920      	ldr	r1, [pc, #128]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	491a      	ldr	r1, [pc, #104]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60cb      	str	r3, [r1, #12]
 8005a18:	e006      	b.n	8005a28 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a1a:	4b18      	ldr	r3, [pc, #96]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	4916      	ldr	r1, [pc, #88]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d025      	beq.n	8005a80 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005a34:	4b11      	ldr	r3, [pc, #68]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4910      	ldr	r1, [pc, #64]	@ (8005a7c <HAL_GPIO_Init+0x2c8>)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]
 8005a40:	e025      	b.n	8005a8e <HAL_GPIO_Init+0x2da>
 8005a42:	bf00      	nop
 8005a44:	10320000 	.word	0x10320000
 8005a48:	10310000 	.word	0x10310000
 8005a4c:	10220000 	.word	0x10220000
 8005a50:	10210000 	.word	0x10210000
 8005a54:	10120000 	.word	0x10120000
 8005a58:	10110000 	.word	0x10110000
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40010800 	.word	0x40010800
 8005a68:	40010c00 	.word	0x40010c00
 8005a6c:	40011000 	.word	0x40011000
 8005a70:	40011400 	.word	0x40011400
 8005a74:	40011800 	.word	0x40011800
 8005a78:	40011c00 	.word	0x40011c00
 8005a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005a80:	4b15      	ldr	r3, [pc, #84]	@ (8005ad8 <HAL_GPIO_Init+0x324>)
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	4913      	ldr	r1, [pc, #76]	@ (8005ad8 <HAL_GPIO_Init+0x324>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <HAL_GPIO_Init+0x324>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	490e      	ldr	r1, [pc, #56]	@ (8005ad8 <HAL_GPIO_Init+0x324>)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]
 8005aa6:	e006      	b.n	8005ab6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <HAL_GPIO_Init+0x324>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	4909      	ldr	r1, [pc, #36]	@ (8005ad8 <HAL_GPIO_Init+0x324>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	3301      	adds	r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f47f ae7e 	bne.w	80057c8 <HAL_GPIO_Init+0x14>
  }
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	372c      	adds	r7, #44	@ 0x2c
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	40010400 	.word	0x40010400

08005adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
 8005af8:	e001      	b.n	8005afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	807b      	strh	r3, [r7, #2]
 8005b16:	4613      	mov	r3, r2
 8005b18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b1a:	787b      	ldrb	r3, [r7, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b20:	887a      	ldrh	r2, [r7, #2]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005b26:	e003      	b.n	8005b30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b28:	887b      	ldrh	r3, [r7, #2]
 8005b2a:	041a      	lsls	r2, r3, #16
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	611a      	str	r2, [r3, #16]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4013      	ands	r3, r2
 8005b52:	041a      	lsls	r2, r3, #16
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	611a      	str	r2, [r3, #16]
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e12b      	b.n	8005dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fe f8be 	bl	8003d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2224      	movs	r2, #36	@ 0x24
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f002 f9d8 	bl	8007f84 <HAL_RCC_GetPCLK1Freq>
 8005bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4a81      	ldr	r2, [pc, #516]	@ (8005de0 <HAL_I2C_Init+0x274>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d807      	bhi.n	8005bf0 <HAL_I2C_Init+0x84>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a80      	ldr	r2, [pc, #512]	@ (8005de4 <HAL_I2C_Init+0x278>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bf94      	ite	ls
 8005be8:	2301      	movls	r3, #1
 8005bea:	2300      	movhi	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e006      	b.n	8005bfe <HAL_I2C_Init+0x92>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a7d      	ldr	r2, [pc, #500]	@ (8005de8 <HAL_I2C_Init+0x27c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bf94      	ite	ls
 8005bf8:	2301      	movls	r3, #1
 8005bfa:	2300      	movhi	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0e7      	b.n	8005dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a78      	ldr	r2, [pc, #480]	@ (8005dec <HAL_I2C_Init+0x280>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0c9b      	lsrs	r3, r3, #18
 8005c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4a6a      	ldr	r2, [pc, #424]	@ (8005de0 <HAL_I2C_Init+0x274>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d802      	bhi.n	8005c40 <HAL_I2C_Init+0xd4>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	e009      	b.n	8005c54 <HAL_I2C_Init+0xe8>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	4a69      	ldr	r2, [pc, #420]	@ (8005df0 <HAL_I2C_Init+0x284>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	3301      	adds	r3, #1
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	495c      	ldr	r1, [pc, #368]	@ (8005de0 <HAL_I2C_Init+0x274>)
 8005c70:	428b      	cmp	r3, r1
 8005c72:	d819      	bhi.n	8005ca8 <HAL_I2C_Init+0x13c>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e59      	subs	r1, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c88:	400b      	ands	r3, r1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_I2C_Init+0x138>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1e59      	subs	r1, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca2:	e051      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	e04f      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d111      	bne.n	8005cd4 <HAL_I2C_Init+0x168>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1e58      	subs	r0, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	440b      	add	r3, r1
 8005cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e012      	b.n	8005cfa <HAL_I2C_Init+0x18e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1e58      	subs	r0, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	0099      	lsls	r1, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cea:	3301      	adds	r3, #1
 8005cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2301      	moveq	r3, #1
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Init+0x196>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e022      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10e      	bne.n	8005d28 <HAL_I2C_Init+0x1bc>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1e58      	subs	r0, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	440b      	add	r3, r1
 8005d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d26:	e00f      	b.n	8005d48 <HAL_I2C_Init+0x1dc>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1e58      	subs	r0, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	0099      	lsls	r1, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	6809      	ldr	r1, [r1, #0]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6911      	ldr	r1, [r2, #16]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	4311      	orrs	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	000186a0 	.word	0x000186a0
 8005de4:	001e847f 	.word	0x001e847f
 8005de8:	003d08ff 	.word	0x003d08ff
 8005dec:	431bde83 	.word	0x431bde83
 8005df0:	10624dd3 	.word	0x10624dd3

08005df4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	460b      	mov	r3, r1
 8005e02:	817b      	strh	r3, [r7, #10]
 8005e04:	4613      	mov	r3, r2
 8005e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e08:	f7ff fa84 	bl	8005314 <HAL_GetTick>
 8005e0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	f040 80e0 	bne.w	8005fdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2319      	movs	r3, #25
 8005e22:	2201      	movs	r2, #1
 8005e24:	4970      	ldr	r1, [pc, #448]	@ (8005fe8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f001 faac 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0d3      	b.n	8005fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_I2C_Master_Transmit+0x50>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e0cc      	b.n	8005fde <HAL_I2C_Master_Transmit+0x1ea>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d007      	beq.n	8005e6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2221      	movs	r2, #33	@ 0x21
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2210      	movs	r2, #16
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	893a      	ldrh	r2, [r7, #8]
 8005e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a50      	ldr	r2, [pc, #320]	@ (8005fec <HAL_I2C_Master_Transmit+0x1f8>)
 8005eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005eac:	8979      	ldrh	r1, [r7, #10]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 ff98 	bl	8006de8 <I2C_MasterRequestWrite>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e08d      	b.n	8005fde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ed8:	e066      	b.n	8005fa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	6a39      	ldr	r1, [r7, #32]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f001 fb6a 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d107      	bne.n	8005f02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e06b      	b.n	8005fde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d11b      	bne.n	8005f7c <HAL_I2C_Master_Transmit+0x188>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d017      	beq.n	8005f7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	6a39      	ldr	r1, [r7, #32]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f001 fb61 	bl	8007648 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d107      	bne.n	8005fa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e01a      	b.n	8005fde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d194      	bne.n	8005eda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	00100002 	.word	0x00100002
 8005fec:	ffff0000 	.word	0xffff0000

08005ff0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08c      	sub	sp, #48	@ 0x30
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	817b      	strh	r3, [r7, #10]
 8006000:	4613      	mov	r3, r2
 8006002:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006008:	f7ff f984 	bl	8005314 <HAL_GetTick>
 800600c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b20      	cmp	r3, #32
 8006018:	f040 824b 	bne.w	80064b2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2319      	movs	r3, #25
 8006022:	2201      	movs	r2, #1
 8006024:	497f      	ldr	r1, [pc, #508]	@ (8006224 <HAL_I2C_Master_Receive+0x234>)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f001 f9ac 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006032:	2302      	movs	r3, #2
 8006034:	e23e      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_I2C_Master_Receive+0x54>
 8006040:	2302      	movs	r3, #2
 8006042:	e237      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d007      	beq.n	800606a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006078:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2222      	movs	r2, #34	@ 0x22
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2210      	movs	r2, #16
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	893a      	ldrh	r2, [r7, #8]
 800609a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006228 <HAL_I2C_Master_Receive+0x238>)
 80060aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060ac:	8979      	ldrh	r1, [r7, #10]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 ff1a 	bl	8006eec <I2C_MasterRequestRead>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1f8      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d113      	bne.n	80060f2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	e1cc      	b.n	800648c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d11e      	bne.n	8006138 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006108:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800610a:	b672      	cpsid	i
}
 800610c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006132:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006134:	b662      	cpsie	i
}
 8006136:	e035      	b.n	80061a4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613c:	2b02      	cmp	r3, #2
 800613e:	d11e      	bne.n	800617e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006150:	b672      	cpsid	i
}
 8006152:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006178:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800617a:	b662      	cpsie	i
}
 800617c:	e012      	b.n	80061a4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800618c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80061a4:	e172      	b.n	800648c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	f200 811f 	bhi.w	80063ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d123      	bne.n	8006200 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f001 fa8b 	bl	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e173      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061fe:	e145      	b.n	800648c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b02      	cmp	r3, #2
 8006206:	d152      	bne.n	80062ae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	2200      	movs	r2, #0
 8006210:	4906      	ldr	r1, [pc, #24]	@ (800622c <HAL_I2C_Master_Receive+0x23c>)
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f001 f8b6 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e148      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
 8006222:	bf00      	nop
 8006224:	00100002 	.word	0x00100002
 8006228:	ffff0000 	.word	0xffff0000
 800622c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006230:	b672      	cpsid	i
}
 8006232:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006276:	b662      	cpsie	i
}
 8006278:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062ac:	e0ee      	b.n	800648c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2200      	movs	r2, #0
 80062b6:	4981      	ldr	r1, [pc, #516]	@ (80064bc <HAL_I2C_Master_Receive+0x4cc>)
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f001 f863 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0f5      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80062d8:	b672      	cpsid	i
}
 80062da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800630e:	4b6c      	ldr	r3, [pc, #432]	@ (80064c0 <HAL_I2C_Master_Receive+0x4d0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	4a6b      	ldr	r2, [pc, #428]	@ (80064c4 <HAL_I2C_Master_Receive+0x4d4>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	0a1a      	lsrs	r2, r3, #8
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	00da      	lsls	r2, r3, #3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	3b01      	subs	r3, #1
 800632c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d118      	bne.n	8006366 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006356:	b662      	cpsie	i
}
 8006358:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e0a6      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d1d9      	bne.n	8006328 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063b6:	b662      	cpsie	i
}
 80063b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063ec:	e04e      	b.n	800648c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f001 f970 	bl	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e058      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d124      	bne.n	800648c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006446:	2b03      	cmp	r3, #3
 8006448:	d107      	bne.n	800645a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006458:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	f47f ae88 	bne.w	80061a6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e000      	b.n	80064b4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80064b2:	2302      	movs	r3, #2
  }
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	@ 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	00010004 	.word	0x00010004
 80064c0:	20000024 	.word	0x20000024
 80064c4:	14f8b589 	.word	0x14f8b589

080064c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064e2:	f7fe ff17 	bl	8005314 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	f040 80d9 	bne.w	80066a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2319      	movs	r3, #25
 80064fc:	2201      	movs	r2, #1
 80064fe:	496d      	ldr	r1, [pc, #436]	@ (80066b4 <HAL_I2C_Mem_Write+0x1ec>)
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 ff3f 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
 800650e:	e0cc      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_I2C_Mem_Write+0x56>
 800651a:	2302      	movs	r3, #2
 800651c:	e0c5      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d007      	beq.n	8006544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2221      	movs	r2, #33	@ 0x21
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2240      	movs	r2, #64	@ 0x40
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a4d      	ldr	r2, [pc, #308]	@ (80066b8 <HAL_I2C_Mem_Write+0x1f0>)
 8006584:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006586:	88f8      	ldrh	r0, [r7, #6]
 8006588:	893a      	ldrh	r2, [r7, #8]
 800658a:	8979      	ldrh	r1, [r7, #10]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	4603      	mov	r3, r0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fd76 	bl	8007088 <I2C_RequestMemoryWrite>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d052      	beq.n	8006648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e081      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f001 f804 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d107      	bne.n	80065ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e06b      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b04      	cmp	r3, #4
 800660e:	d11b      	bne.n	8006648 <HAL_I2C_Mem_Write+0x180>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006614:	2b00      	cmp	r3, #0
 8006616:	d017      	beq.n	8006648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1aa      	bne.n	80065a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fff7 	bl	8007648 <I2C_WaitOnBTFFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006664:	2b04      	cmp	r3, #4
 8006666:	d107      	bne.n	8006678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e016      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	e000      	b.n	80066aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	00100002 	.word	0x00100002
 80066b8:	ffff0000 	.word	0xffff0000

080066bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08c      	sub	sp, #48	@ 0x30
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	817b      	strh	r3, [r7, #10]
 80066ce:	460b      	mov	r3, r1
 80066d0:	813b      	strh	r3, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066da:	f7fe fe1b 	bl	8005314 <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	f040 8244 	bne.w	8006b76 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	2319      	movs	r3, #25
 80066f4:	2201      	movs	r2, #1
 80066f6:	4982      	ldr	r1, [pc, #520]	@ (8006900 <HAL_I2C_Mem_Read+0x244>)
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fe43 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
 8006706:	e237      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_I2C_Mem_Read+0x5a>
 8006712:	2302      	movs	r3, #2
 8006714:	e230      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b01      	cmp	r3, #1
 800672a:	d007      	beq.n	800673c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800674a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2222      	movs	r2, #34	@ 0x22
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2240      	movs	r2, #64	@ 0x40
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800676c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a62      	ldr	r2, [pc, #392]	@ (8006904 <HAL_I2C_Mem_Read+0x248>)
 800677c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800677e:	88f8      	ldrh	r0, [r7, #6]
 8006780:	893a      	ldrh	r2, [r7, #8]
 8006782:	8979      	ldrh	r1, [r7, #10]
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	4603      	mov	r3, r0
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fd10 	bl	80071b4 <I2C_RequestMemoryRead>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e1ec      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d113      	bne.n	80067ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e1c0      	b.n	8006b50 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d11e      	bne.n	8006814 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80067e6:	b672      	cpsid	i
}
 80067e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800680e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006810:	b662      	cpsie	i
}
 8006812:	e035      	b.n	8006880 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006818:	2b02      	cmp	r3, #2
 800681a:	d11e      	bne.n	800685a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800682a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800682c:	b672      	cpsid	i
}
 800682e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006854:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006856:	b662      	cpsie	i
}
 8006858:	e012      	b.n	8006880 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006868:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006880:	e166      	b.n	8006b50 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006886:	2b03      	cmp	r3, #3
 8006888:	f200 811f 	bhi.w	8006aca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006890:	2b01      	cmp	r3, #1
 8006892:	d123      	bne.n	80068dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006896:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 ff1d 	bl	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e167      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068da:	e139      	b.n	8006b50 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d152      	bne.n	800698a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	2200      	movs	r2, #0
 80068ec:	4906      	ldr	r1, [pc, #24]	@ (8006908 <HAL_I2C_Mem_Read+0x24c>)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fd48 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e13c      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
 80068fe:	bf00      	nop
 8006900:	00100002 	.word	0x00100002
 8006904:	ffff0000 	.word	0xffff0000
 8006908:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800690c:	b672      	cpsid	i
}
 800690e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006952:	b662      	cpsie	i
}
 8006954:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006988:	e0e2      	b.n	8006b50 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	2200      	movs	r2, #0
 8006992:	497b      	ldr	r1, [pc, #492]	@ (8006b80 <HAL_I2C_Mem_Read+0x4c4>)
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 fcf5 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0e9      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80069b4:	b672      	cpsid	i
}
 80069b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069ea:	4b66      	ldr	r3, [pc, #408]	@ (8006b84 <HAL_I2C_Mem_Read+0x4c8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	4a65      	ldr	r2, [pc, #404]	@ (8006b88 <HAL_I2C_Mem_Read+0x4cc>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	0a1a      	lsrs	r2, r3, #8
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	00da      	lsls	r2, r3, #3
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d118      	bne.n	8006a42 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006a32:	b662      	cpsie	i
}
 8006a34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e09a      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d1d9      	bne.n	8006a04 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006a92:	b662      	cpsie	i
}
 8006a94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ac8:	e042      	b.n	8006b50 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006acc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fe02 	bl	80076d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e04c      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d118      	bne.n	8006b50 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f ae94 	bne.w	8006882 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	@ 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	00010004 	.word	0x00010004
 8006b84:	20000024 	.word	0x20000024
 8006b88:	14f8b589 	.word	0x14f8b589

08006b8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	@ 0x28
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006b9c:	f7fe fbba 	bl	8005314 <HAL_GetTick>
 8006ba0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	f040 8111 	bne.w	8006dd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2319      	movs	r3, #25
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4988      	ldr	r1, [pc, #544]	@ (8006de0 <HAL_I2C_IsDeviceReady+0x254>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fbe0 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e104      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_I2C_IsDeviceReady+0x50>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e0fd      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d007      	beq.n	8006c02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2224      	movs	r2, #36	@ 0x24
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a70      	ldr	r2, [pc, #448]	@ (8006de4 <HAL_I2C_IsDeviceReady+0x258>)
 8006c24:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fb9e 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5c:	d103      	bne.n	8006c66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c64:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e0b6      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c6a:	897b      	ldrh	r3, [r7, #10]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006c7a:	f7fe fb4b 	bl	8005314 <HAL_GetTick>
 8006c7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca4:	bf0c      	ite	eq
 8006ca6:	2301      	moveq	r3, #1
 8006ca8:	2300      	movne	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006cae:	e025      	b.n	8006cfc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cb0:	f7fe fb30 	bl	8005314 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <HAL_I2C_IsDeviceReady+0x13a>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	22a0      	movs	r2, #160	@ 0xa0
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	bf0c      	ite	eq
 8006cdc:	2301      	moveq	r3, #1
 8006cde:	2300      	movne	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf2:	bf0c      	ite	eq
 8006cf4:	2301      	moveq	r3, #1
 8006cf6:	2300      	movne	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d06:	d005      	beq.n	8006d14 <HAL_I2C_IsDeviceReady+0x188>
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <HAL_I2C_IsDeviceReady+0x188>
 8006d0e:	7dbb      	ldrb	r3, [r7, #22]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0cd      	beq.n	8006cb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d129      	bne.n	8006d7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2319      	movs	r3, #25
 8006d56:	2201      	movs	r2, #1
 8006d58:	4921      	ldr	r1, [pc, #132]	@ (8006de0 <HAL_I2C_IsDeviceReady+0x254>)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fb12 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e036      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e02c      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	2319      	movs	r3, #25
 8006d9e:	2201      	movs	r2, #1
 8006da0:	490f      	ldr	r1, [pc, #60]	@ (8006de0 <HAL_I2C_IsDeviceReady+0x254>)
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 faee 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e012      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	3301      	adds	r3, #1
 8006db6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	f4ff af32 	bcc.w	8006c26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3720      	adds	r7, #32
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	00100002 	.word	0x00100002
 8006de4:	ffff0000 	.word	0xffff0000

08006de8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	460b      	mov	r3, r1
 8006df6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d006      	beq.n	8006e12 <I2C_MasterRequestWrite+0x2a>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d003      	beq.n	8006e12 <I2C_MasterRequestWrite+0x2a>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e10:	d108      	bne.n	8006e24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e00b      	b.n	8006e3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e28:	2b12      	cmp	r3, #18
 8006e2a:	d107      	bne.n	8006e3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fa9b 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e62:	d103      	bne.n	8006e6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e035      	b.n	8006edc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e78:	d108      	bne.n	8006e8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e7a:	897b      	ldrh	r3, [r7, #10]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e88:	611a      	str	r2, [r3, #16]
 8006e8a:	e01b      	b.n	8006ec4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e8c:	897b      	ldrh	r3, [r7, #10]
 8006e8e:	11db      	asrs	r3, r3, #7
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f003 0306 	and.w	r3, r3, #6
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f063 030f 	orn	r3, r3, #15
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	490e      	ldr	r1, [pc, #56]	@ (8006ee4 <I2C_MasterRequestWrite+0xfc>)
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fae4 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e010      	b.n	8006edc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	4907      	ldr	r1, [pc, #28]	@ (8006ee8 <I2C_MasterRequestWrite+0x100>)
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fad4 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	00010008 	.word	0x00010008
 8006ee8:	00010002 	.word	0x00010002

08006eec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d006      	beq.n	8006f26 <I2C_MasterRequestRead+0x3a>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d003      	beq.n	8006f26 <I2C_MasterRequestRead+0x3a>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f24:	d108      	bne.n	8006f38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e00b      	b.n	8006f50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3c:	2b11      	cmp	r3, #17
 8006f3e:	d107      	bne.n	8006f50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 fa11 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00d      	beq.n	8006f84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f76:	d103      	bne.n	8006f80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e079      	b.n	8007078 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f8c:	d108      	bne.n	8006fa0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f8e:	897b      	ldrh	r3, [r7, #10]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	611a      	str	r2, [r3, #16]
 8006f9e:	e05f      	b.n	8007060 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fa0:	897b      	ldrh	r3, [r7, #10]
 8006fa2:	11db      	asrs	r3, r3, #7
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f003 0306 	and.w	r3, r3, #6
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f063 030f 	orn	r3, r3, #15
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4930      	ldr	r1, [pc, #192]	@ (8007080 <I2C_MasterRequestRead+0x194>)
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 fa5a 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e054      	b.n	8007078 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006fce:	897b      	ldrh	r3, [r7, #10]
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4929      	ldr	r1, [pc, #164]	@ (8007084 <I2C_MasterRequestRead+0x198>)
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fa4a 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e044      	b.n	8007078 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007012:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f9af 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00d      	beq.n	8007048 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800703a:	d103      	bne.n	8007044 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007042:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e017      	b.n	8007078 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007048:	897b      	ldrh	r3, [r7, #10]
 800704a:	11db      	asrs	r3, r3, #7
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f063 030e 	orn	r3, r3, #14
 8007058:	b2da      	uxtb	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4907      	ldr	r1, [pc, #28]	@ (8007084 <I2C_MasterRequestRead+0x198>)
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fa06 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	00010008 	.word	0x00010008
 8007084:	00010002 	.word	0x00010002

08007088 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	4608      	mov	r0, r1
 8007092:	4611      	mov	r1, r2
 8007094:	461a      	mov	r2, r3
 8007096:	4603      	mov	r3, r0
 8007098:	817b      	strh	r3, [r7, #10]
 800709a:	460b      	mov	r3, r1
 800709c:	813b      	strh	r3, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f960 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d8:	d103      	bne.n	80070e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e05f      	b.n	80071a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070e6:	897b      	ldrh	r3, [r7, #10]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	6a3a      	ldr	r2, [r7, #32]
 80070fa:	492d      	ldr	r1, [pc, #180]	@ (80071b0 <I2C_RequestMemoryWrite+0x128>)
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f9bb 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e04c      	b.n	80071a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007124:	6a39      	ldr	r1, [r7, #32]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fa46 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	2b04      	cmp	r3, #4
 8007138:	d107      	bne.n	800714a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e02b      	b.n	80071a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d105      	bne.n	8007160 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007154:	893b      	ldrh	r3, [r7, #8]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	611a      	str	r2, [r3, #16]
 800715e:	e021      	b.n	80071a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800716e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007170:	6a39      	ldr	r1, [r7, #32]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fa20 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	2b04      	cmp	r3, #4
 8007184:	d107      	bne.n	8007196 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e005      	b.n	80071a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	00010002 	.word	0x00010002

080071b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	817b      	strh	r3, [r7, #10]
 80071c6:	460b      	mov	r3, r1
 80071c8:	813b      	strh	r3, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f8c2 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007214:	d103      	bne.n	800721e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800721c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e0aa      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007222:	897b      	ldrh	r3, [r7, #10]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007230:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	4952      	ldr	r1, [pc, #328]	@ (8007380 <I2C_RequestMemoryRead+0x1cc>)
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f91d 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e097      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800725e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007260:	6a39      	ldr	r1, [r7, #32]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f9a8 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007272:	2b04      	cmp	r3, #4
 8007274:	d107      	bne.n	8007286 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007284:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e076      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d105      	bne.n	800729c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	611a      	str	r2, [r3, #16]
 800729a:	e021      	b.n	80072e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800729c:	893b      	ldrh	r3, [r7, #8]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ac:	6a39      	ldr	r1, [r7, #32]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f982 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00d      	beq.n	80072d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d107      	bne.n	80072d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e050      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072d6:	893b      	ldrh	r3, [r7, #8]
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e2:	6a39      	ldr	r1, [r7, #32]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f967 	bl	80075b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00d      	beq.n	800730c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d107      	bne.n	8007308 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007306:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e035      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800731a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2200      	movs	r2, #0
 8007324:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f82b 	bl	8007384 <I2C_WaitOnFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007342:	d103      	bne.n	800734c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800734a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e013      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007350:	897b      	ldrh	r3, [r7, #10]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	4906      	ldr	r1, [pc, #24]	@ (8007380 <I2C_RequestMemoryRead+0x1cc>)
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f886 	bl	8007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	00010002 	.word	0x00010002

08007384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	4613      	mov	r3, r2
 8007392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007394:	e048      	b.n	8007428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d044      	beq.n	8007428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fd ffb9 	bl	8005314 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d139      	bne.n	8007428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10d      	bne.n	80073da <I2C_WaitOnFlagUntilTimeout+0x56>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	43da      	mvns	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4013      	ands	r3, r2
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	e00c      	b.n	80073f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	43da      	mvns	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	4013      	ands	r3, r2
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf0c      	ite	eq
 80073ec:	2301      	moveq	r3, #1
 80073ee:	2300      	movne	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d116      	bne.n	8007428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e023      	b.n	8007470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b01      	cmp	r3, #1
 8007430:	d10d      	bne.n	800744e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	43da      	mvns	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	4013      	ands	r3, r2
 800743e:	b29b      	uxth	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	bf0c      	ite	eq
 8007444:	2301      	moveq	r3, #1
 8007446:	2300      	movne	r3, #0
 8007448:	b2db      	uxtb	r3, r3
 800744a:	461a      	mov	r2, r3
 800744c:	e00c      	b.n	8007468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	43da      	mvns	r2, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4013      	ands	r3, r2
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	bf0c      	ite	eq
 8007460:	2301      	moveq	r3, #1
 8007462:	2300      	movne	r3, #0
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	429a      	cmp	r2, r3
 800746c:	d093      	beq.n	8007396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007486:	e071      	b.n	800756c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007496:	d123      	bne.n	80074e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074cc:	f043 0204 	orr.w	r2, r3, #4
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e067      	b.n	80075b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d041      	beq.n	800756c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e8:	f7fd ff14 	bl	8005314 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d302      	bcc.n	80074fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d136      	bne.n	800756c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b01      	cmp	r3, #1
 8007506:	d10c      	bne.n	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	43da      	mvns	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4013      	ands	r3, r2
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	bf14      	ite	ne
 800751a:	2301      	movne	r3, #1
 800751c:	2300      	moveq	r3, #0
 800751e:	b2db      	uxtb	r3, r3
 8007520:	e00b      	b.n	800753a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	43da      	mvns	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4013      	ands	r3, r2
 800752e:	b29b      	uxth	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	bf14      	ite	ne
 8007534:	2301      	movne	r3, #1
 8007536:	2300      	moveq	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d016      	beq.n	800756c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007558:	f043 0220 	orr.w	r2, r3, #32
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e021      	b.n	80075b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	0c1b      	lsrs	r3, r3, #16
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b01      	cmp	r3, #1
 8007574:	d10c      	bne.n	8007590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	43da      	mvns	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	4013      	ands	r3, r2
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	e00b      	b.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	43da      	mvns	r2, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4013      	ands	r3, r2
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bf14      	ite	ne
 80075a2:	2301      	movne	r3, #1
 80075a4:	2300      	moveq	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f47f af6d 	bne.w	8007488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075c4:	e034      	b.n	8007630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f8e3 	bl	8007792 <I2C_IsAcknowledgeFailed>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e034      	b.n	8007640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d028      	beq.n	8007630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fd fe99 	bl	8005314 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11d      	bne.n	8007630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	2b80      	cmp	r3, #128	@ 0x80
 8007600:	d016      	beq.n	8007630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	f043 0220 	orr.w	r2, r3, #32
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e007      	b.n	8007640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763a:	2b80      	cmp	r3, #128	@ 0x80
 800763c:	d1c3      	bne.n	80075c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007654:	e034      	b.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f89b 	bl	8007792 <I2C_IsAcknowledgeFailed>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e034      	b.n	80076d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d028      	beq.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766e:	f7fd fe51 	bl	8005314 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	429a      	cmp	r2, r3
 800767c:	d302      	bcc.n	8007684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d11d      	bne.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b04      	cmp	r3, #4
 8007690:	d016      	beq.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ac:	f043 0220 	orr.w	r2, r3, #32
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e007      	b.n	80076d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d1c3      	bne.n	8007656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076e4:	e049      	b.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d119      	bne.n	8007728 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0210 	mvn.w	r2, #16
 80076fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e030      	b.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007728:	f7fd fdf4 	bl	8005314 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	d302      	bcc.n	800773e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d11d      	bne.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007748:	2b40      	cmp	r3, #64	@ 0x40
 800774a:	d016      	beq.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	f043 0220 	orr.w	r2, r3, #32
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e007      	b.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007784:	2b40      	cmp	r3, #64	@ 0x40
 8007786:	d1ae      	bne.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a8:	d11b      	bne.n	80077e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	f043 0204 	orr.w	r2, r3, #4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e272      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8087 	beq.w	800791e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007810:	4b92      	ldr	r3, [pc, #584]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	2b04      	cmp	r3, #4
 800781a:	d00c      	beq.n	8007836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800781c:	4b8f      	ldr	r3, [pc, #572]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f003 030c 	and.w	r3, r3, #12
 8007824:	2b08      	cmp	r3, #8
 8007826:	d112      	bne.n	800784e <HAL_RCC_OscConfig+0x5e>
 8007828:	4b8c      	ldr	r3, [pc, #560]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d10b      	bne.n	800784e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007836:	4b89      	ldr	r3, [pc, #548]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d06c      	beq.n	800791c <HAL_RCC_OscConfig+0x12c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d168      	bne.n	800791c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e24c      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007856:	d106      	bne.n	8007866 <HAL_RCC_OscConfig+0x76>
 8007858:	4b80      	ldr	r3, [pc, #512]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a7f      	ldr	r2, [pc, #508]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e02e      	b.n	80078c4 <HAL_RCC_OscConfig+0xd4>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10c      	bne.n	8007888 <HAL_RCC_OscConfig+0x98>
 800786e:	4b7b      	ldr	r3, [pc, #492]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a7a      	ldr	r2, [pc, #488]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4b78      	ldr	r3, [pc, #480]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a77      	ldr	r2, [pc, #476]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e01d      	b.n	80078c4 <HAL_RCC_OscConfig+0xd4>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007890:	d10c      	bne.n	80078ac <HAL_RCC_OscConfig+0xbc>
 8007892:	4b72      	ldr	r3, [pc, #456]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a71      	ldr	r2, [pc, #452]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6e      	ldr	r2, [pc, #440]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e00b      	b.n	80078c4 <HAL_RCC_OscConfig+0xd4>
 80078ac:	4b6b      	ldr	r3, [pc, #428]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a6a      	ldr	r2, [pc, #424]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	4b68      	ldr	r3, [pc, #416]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a67      	ldr	r2, [pc, #412]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d013      	beq.n	80078f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078cc:	f7fd fd22 	bl	8005314 <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d4:	f7fd fd1e 	bl	8005314 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	@ 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e200      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	4b5d      	ldr	r3, [pc, #372]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f0      	beq.n	80078d4 <HAL_RCC_OscConfig+0xe4>
 80078f2:	e014      	b.n	800791e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f4:	f7fd fd0e 	bl	8005314 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078fc:	f7fd fd0a 	bl	8005314 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b64      	cmp	r3, #100	@ 0x64
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e1ec      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800790e:	4b53      	ldr	r3, [pc, #332]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x10c>
 800791a:	e000      	b.n	800791e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800791c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d063      	beq.n	80079f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800792a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f003 030c 	and.w	r3, r3, #12
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007936:	4b49      	ldr	r3, [pc, #292]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b08      	cmp	r3, #8
 8007940:	d11c      	bne.n	800797c <HAL_RCC_OscConfig+0x18c>
 8007942:	4b46      	ldr	r3, [pc, #280]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d116      	bne.n	800797c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800794e:	4b43      	ldr	r3, [pc, #268]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_RCC_OscConfig+0x176>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d001      	beq.n	8007966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e1c0      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007966:	4b3d      	ldr	r3, [pc, #244]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4939      	ldr	r1, [pc, #228]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007976:	4313      	orrs	r3, r2
 8007978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800797a:	e03a      	b.n	80079f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d020      	beq.n	80079c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007984:	4b36      	ldr	r3, [pc, #216]	@ (8007a60 <HAL_RCC_OscConfig+0x270>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798a:	f7fd fcc3 	bl	8005314 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007992:	f7fd fcbf 	bl	8005314 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e1a1      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a4:	4b2d      	ldr	r3, [pc, #180]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079b0:	4b2a      	ldr	r3, [pc, #168]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4927      	ldr	r1, [pc, #156]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]
 80079c4:	e015      	b.n	80079f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079c6:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <HAL_RCC_OscConfig+0x270>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079cc:	f7fd fca2 	bl	8005314 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079d4:	f7fd fc9e 	bl	8005314 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e180      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079e6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d03a      	beq.n	8007a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d019      	beq.n	8007a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a0c:	f7fd fc82 	bl	8005314 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a14:	f7fd fc7e 	bl	8005314 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e160      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <HAL_RCC_OscConfig+0x26c>)
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0f0      	beq.n	8007a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007a32:	2001      	movs	r0, #1
 8007a34:	f000 fafe 	bl	8008034 <RCC_Delay>
 8007a38:	e01c      	b.n	8007a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a64 <HAL_RCC_OscConfig+0x274>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a40:	f7fd fc68 	bl	8005314 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a46:	e00f      	b.n	8007a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a48:	f7fd fc64 	bl	8005314 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d908      	bls.n	8007a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e146      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
 8007a5a:	bf00      	nop
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	42420000 	.word	0x42420000
 8007a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a68:	4b92      	ldr	r3, [pc, #584]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e9      	bne.n	8007a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a6 	beq.w	8007bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a86:	4b8b      	ldr	r3, [pc, #556]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a92:	4b88      	ldr	r3, [pc, #544]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	4a87      	ldr	r2, [pc, #540]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a9c:	61d3      	str	r3, [r2, #28]
 8007a9e:	4b85      	ldr	r3, [pc, #532]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aa6:	60bb      	str	r3, [r7, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aae:	4b82      	ldr	r3, [pc, #520]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d118      	bne.n	8007aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007aba:	4b7f      	ldr	r3, [pc, #508]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a7e      	ldr	r2, [pc, #504]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ac6:	f7fd fc25 	bl	8005314 <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007acc:	e008      	b.n	8007ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ace:	f7fd fc21 	bl	8005314 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b64      	cmp	r3, #100	@ 0x64
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e103      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae0:	4b75      	ldr	r3, [pc, #468]	@ (8007cb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d106      	bne.n	8007b02 <HAL_RCC_OscConfig+0x312>
 8007af4:	4b6f      	ldr	r3, [pc, #444]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	4a6e      	ldr	r2, [pc, #440]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	6213      	str	r3, [r2, #32]
 8007b00:	e02d      	b.n	8007b5e <HAL_RCC_OscConfig+0x36e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCC_OscConfig+0x334>
 8007b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	4a69      	ldr	r2, [pc, #420]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	6213      	str	r3, [r2, #32]
 8007b16:	4b67      	ldr	r3, [pc, #412]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	4a66      	ldr	r2, [pc, #408]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b1c:	f023 0304 	bic.w	r3, r3, #4
 8007b20:	6213      	str	r3, [r2, #32]
 8007b22:	e01c      	b.n	8007b5e <HAL_RCC_OscConfig+0x36e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b05      	cmp	r3, #5
 8007b2a:	d10c      	bne.n	8007b46 <HAL_RCC_OscConfig+0x356>
 8007b2c:	4b61      	ldr	r3, [pc, #388]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	4a60      	ldr	r2, [pc, #384]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b32:	f043 0304 	orr.w	r3, r3, #4
 8007b36:	6213      	str	r3, [r2, #32]
 8007b38:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	6213      	str	r3, [r2, #32]
 8007b44:	e00b      	b.n	8007b5e <HAL_RCC_OscConfig+0x36e>
 8007b46:	4b5b      	ldr	r3, [pc, #364]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	4a5a      	ldr	r2, [pc, #360]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	6213      	str	r3, [r2, #32]
 8007b52:	4b58      	ldr	r3, [pc, #352]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	4a57      	ldr	r2, [pc, #348]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b58:	f023 0304 	bic.w	r3, r3, #4
 8007b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d015      	beq.n	8007b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b66:	f7fd fbd5 	bl	8005314 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6c:	e00a      	b.n	8007b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b6e:	f7fd fbd1 	bl	8005314 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e0b1      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b84:	4b4b      	ldr	r3, [pc, #300]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0ee      	beq.n	8007b6e <HAL_RCC_OscConfig+0x37e>
 8007b90:	e014      	b.n	8007bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b92:	f7fd fbbf 	bl	8005314 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b9a:	f7fd fbbb 	bl	8005314 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e09b      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb0:	4b40      	ldr	r3, [pc, #256]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1ee      	bne.n	8007b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d105      	bne.n	8007bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	4a3b      	ldr	r2, [pc, #236]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8087 	beq.w	8007ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bd8:	4b36      	ldr	r3, [pc, #216]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 030c 	and.w	r3, r3, #12
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d061      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d146      	bne.n	8007c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bec:	4b33      	ldr	r3, [pc, #204]	@ (8007cbc <HAL_RCC_OscConfig+0x4cc>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf2:	f7fd fb8f 	bl	8005314 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bfa:	f7fd fb8b 	bl	8005314 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e06d      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c0c:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f0      	bne.n	8007bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c20:	d108      	bne.n	8007c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c22:	4b24      	ldr	r3, [pc, #144]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4921      	ldr	r1, [pc, #132]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c34:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a19      	ldr	r1, [r3, #32]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	430b      	orrs	r3, r1
 8007c46:	491b      	ldr	r1, [pc, #108]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <HAL_RCC_OscConfig+0x4cc>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c52:	f7fd fb5f 	bl	8005314 <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c58:	e008      	b.n	8007c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c5a:	f7fd fb5b 	bl	8005314 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e03d      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c6c:	4b11      	ldr	r3, [pc, #68]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f0      	beq.n	8007c5a <HAL_RCC_OscConfig+0x46a>
 8007c78:	e035      	b.n	8007ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c7a:	4b10      	ldr	r3, [pc, #64]	@ (8007cbc <HAL_RCC_OscConfig+0x4cc>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c80:	f7fd fb48 	bl	8005314 <HAL_GetTick>
 8007c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c86:	e008      	b.n	8007c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c88:	f7fd fb44 	bl	8005314 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e026      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c9a:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <HAL_RCC_OscConfig+0x498>
 8007ca6:	e01e      	b.n	8007ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d107      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e019      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
 8007cb4:	40021000 	.word	0x40021000
 8007cb8:	40007000 	.word	0x40007000
 8007cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <HAL_RCC_OscConfig+0x500>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d106      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d001      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40021000 	.word	0x40021000

08007cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0d0      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d08:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d910      	bls.n	8007d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d16:	4b67      	ldr	r3, [pc, #412]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 0207 	bic.w	r2, r3, #7
 8007d1e:	4965      	ldr	r1, [pc, #404]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d26:	4b63      	ldr	r3, [pc, #396]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0b8      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d020      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d50:	4b59      	ldr	r3, [pc, #356]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4a58      	ldr	r2, [pc, #352]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d68:	4b53      	ldr	r3, [pc, #332]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a52      	ldr	r2, [pc, #328]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d74:	4b50      	ldr	r3, [pc, #320]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	494d      	ldr	r1, [pc, #308]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d040      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d107      	bne.n	8007daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d9a:	4b47      	ldr	r3, [pc, #284]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d115      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e07f      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d107      	bne.n	8007dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007db2:	4b41      	ldr	r3, [pc, #260]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e073      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e06b      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dd2:	4b39      	ldr	r3, [pc, #228]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f023 0203 	bic.w	r2, r3, #3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4936      	ldr	r1, [pc, #216]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007de4:	f7fd fa96 	bl	8005314 <HAL_GetTick>
 8007de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dea:	e00a      	b.n	8007e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dec:	f7fd fa92 	bl	8005314 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e053      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e02:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f003 020c 	and.w	r2, r3, #12
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d1eb      	bne.n	8007dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e14:	4b27      	ldr	r3, [pc, #156]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d210      	bcs.n	8007e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e22:	4b24      	ldr	r3, [pc, #144]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f023 0207 	bic.w	r2, r3, #7
 8007e2a:	4922      	ldr	r1, [pc, #136]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e32:	4b20      	ldr	r3, [pc, #128]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d001      	beq.n	8007e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e032      	b.n	8007eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e50:	4b19      	ldr	r3, [pc, #100]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	4916      	ldr	r1, [pc, #88]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e6e:	4b12      	ldr	r3, [pc, #72]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	490e      	ldr	r1, [pc, #56]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e82:	f000 f821 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	490a      	ldr	r1, [pc, #40]	@ (8007ebc <HAL_RCC_ClockConfig+0x1c8>)
 8007e94:	5ccb      	ldrb	r3, [r1, r3]
 8007e96:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9a:	4a09      	ldr	r2, [pc, #36]	@ (8007ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8007e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fc f8e2 	bl	800406c <HAL_InitTick>

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40022000 	.word	0x40022000
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	0800d874 	.word	0x0800d874
 8007ec0:	20000024 	.word	0x20000024
 8007ec4:	20000028 	.word	0x20000028

08007ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8007f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 030c 	and.w	r3, r3, #12
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d002      	beq.n	8007ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d003      	beq.n	8007efe <HAL_RCC_GetSysClockFreq+0x36>
 8007ef6:	e027      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007ef8:	4b19      	ldr	r3, [pc, #100]	@ (8007f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8007efa:	613b      	str	r3, [r7, #16]
      break;
 8007efc:	e027      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	0c9b      	lsrs	r3, r3, #18
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	4a17      	ldr	r2, [pc, #92]	@ (8007f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007f08:	5cd3      	ldrb	r3, [r2, r3]
 8007f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d010      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007f16:	4b11      	ldr	r3, [pc, #68]	@ (8007f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	0c5b      	lsrs	r3, r3, #17
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	4a11      	ldr	r2, [pc, #68]	@ (8007f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007f22:	5cd3      	ldrb	r3, [r2, r3]
 8007f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a0d      	ldr	r2, [pc, #52]	@ (8007f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f2a:	fb03 f202 	mul.w	r2, r3, r2
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e004      	b.n	8007f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
 8007f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	613b      	str	r3, [r7, #16]
      break;
 8007f46:	e002      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f4a:	613b      	str	r3, [r7, #16]
      break;
 8007f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f4e:	693b      	ldr	r3, [r7, #16]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40021000 	.word	0x40021000
 8007f60:	007a1200 	.word	0x007a1200
 8007f64:	0800d88c 	.word	0x0800d88c
 8007f68:	0800d89c 	.word	0x0800d89c
 8007f6c:	003d0900 	.word	0x003d0900

08007f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f74:	4b02      	ldr	r3, [pc, #8]	@ (8007f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f76:	681b      	ldr	r3, [r3, #0]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr
 8007f80:	20000024 	.word	0x20000024

08007f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f88:	f7ff fff2 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	4903      	ldr	r1, [pc, #12]	@ (8007fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f9a:	5ccb      	ldrb	r3, [r1, r3]
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	0800d884 	.word	0x0800d884

08007fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fb0:	f7ff ffde 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	0adb      	lsrs	r3, r3, #11
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	4903      	ldr	r1, [pc, #12]	@ (8007fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fc2:	5ccb      	ldrb	r3, [r1, r3]
 8007fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	0800d884 	.word	0x0800d884

08007fd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	220f      	movs	r2, #15
 8007fe2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fe4:	4b11      	ldr	r3, [pc, #68]	@ (800802c <HAL_RCC_GetClockConfig+0x58>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f003 0203 	and.w	r2, r3, #3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800802c <HAL_RCC_GetClockConfig+0x58>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800802c <HAL_RCC_GetClockConfig+0x58>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008008:	4b08      	ldr	r3, [pc, #32]	@ (800802c <HAL_RCC_GetClockConfig+0x58>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	08db      	lsrs	r3, r3, #3
 800800e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008016:	4b06      	ldr	r3, [pc, #24]	@ (8008030 <HAL_RCC_GetClockConfig+0x5c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0207 	and.w	r2, r3, #7
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr
 800802c:	40021000 	.word	0x40021000
 8008030:	40022000 	.word	0x40022000

08008034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800803c:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <RCC_Delay+0x34>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0a      	ldr	r2, [pc, #40]	@ (800806c <RCC_Delay+0x38>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	0a5b      	lsrs	r3, r3, #9
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008050:	bf00      	nop
  }
  while (Delay --);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1e5a      	subs	r2, r3, #1
 8008056:	60fa      	str	r2, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f9      	bne.n	8008050 <RCC_Delay+0x1c>
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	20000024 	.word	0x20000024
 800806c:	10624dd3 	.word	0x10624dd3

08008070 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e022      	b.n	80080c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fb ff57 	bl	8003f48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2203      	movs	r2, #3
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f814 	bl	80080d0 <HAL_SD_InitCard>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e00a      	b.n	80080c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080d0:	b5b0      	push	{r4, r5, r7, lr}
 80080d2:	b08e      	sub	sp, #56	@ 0x38
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80080d8:	2300      	movs	r3, #0
 80080da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80080ec:	2376      	movs	r3, #118	@ 0x76
 80080ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681d      	ldr	r5, [r3, #0]
 80080f4:	466c      	mov	r4, sp
 80080f6:	f107 0314 	add.w	r3, r7, #20
 80080fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008102:	f107 0308 	add.w	r3, r7, #8
 8008106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008108:	4628      	mov	r0, r5
 800810a:	f002 fd7d 	bl	800ac08 <SDIO_Init>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e04f      	b.n	80081c0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008120:	4b29      	ldr	r3, [pc, #164]	@ (80081c8 <HAL_SD_InitCard+0xf8>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f002 fdb2 	bl	800ac94 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008130:	4b25      	ldr	r3, [pc, #148]	@ (80081c8 <HAL_SD_InitCard+0xf8>)
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008136:	2002      	movs	r0, #2
 8008138:	f7fd f8f6 	bl	8005328 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fe69 	bl	8008e14 <SD_PowerON>
 8008142:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e02e      	b.n	80081c0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fd87 	bl	8008c76 <SD_InitCard>
 8008168:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e01b      	b.n	80081c0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008190:	4618      	mov	r0, r3
 8008192:	f002 fe0b 	bl	800adac <SDMMC_CmdBlockLength>
 8008196:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00f      	beq.n	80081be <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a0a      	ldr	r2, [pc, #40]	@ (80081cc <HAL_SD_InitCard+0xfc>)
 80081a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3728      	adds	r7, #40	@ 0x28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bdb0      	pop	{r4, r5, r7, pc}
 80081c8:	423000a0 	.word	0x423000a0
 80081cc:	004005ff 	.word	0x004005ff

080081d0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b092      	sub	sp, #72	@ 0x48
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081de:	f7fd f899 	bl	8005314 <HAL_GetTick>
 80081e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d107      	bne.n	8008202 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e1bd      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b01      	cmp	r3, #1
 800820c:	f040 81b0 	bne.w	8008570 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008216:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008220:	429a      	cmp	r2, r3
 8008222:	d907      	bls.n	8008234 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e1a4      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2203      	movs	r2, #3
 8008238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2200      	movs	r2, #0
 8008242:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008248:	2b01      	cmp	r3, #1
 800824a:	d002      	beq.n	8008252 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800824c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824e:	025b      	lsls	r3, r3, #9
 8008250:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008252:	f04f 33ff 	mov.w	r3, #4294967295
 8008256:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	025b      	lsls	r3, r3, #9
 800825c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800825e:	2390      	movs	r3, #144	@ 0x90
 8008260:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008262:	2302      	movs	r3, #2
 8008264:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008266:	2300      	movs	r3, #0
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800826a:	2301      	movs	r3, #1
 800826c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f107 0214 	add.w	r2, r7, #20
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f002 fd6c 	bl	800ad56 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d90a      	bls.n	800829a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2202      	movs	r2, #2
 8008288:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008290:	4618      	mov	r0, r3
 8008292:	f002 fdcf 	bl	800ae34 <SDMMC_CmdReadMultiBlock>
 8008296:	6478      	str	r0, [r7, #68]	@ 0x44
 8008298:	e009      	b.n	80082ae <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2201      	movs	r2, #1
 800829e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082a6:	4618      	mov	r0, r3
 80082a8:	f002 fda2 	bl	800adf0 <SDMMC_CmdReadSingleBlock>
 80082ac:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80082ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d012      	beq.n	80082da <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a7a      	ldr	r2, [pc, #488]	@ (80084a4 <HAL_SD_ReadBlocks+0x2d4>)
 80082ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c2:	431a      	orrs	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e151      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80082de:	e061      	b.n	80083a4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d03c      	beq.n	8008368 <HAL_SD_ReadBlocks+0x198>
 80082ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d039      	beq.n	8008368 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80082f8:	e033      	b.n	8008362 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f002 fcac 	bl	800ac5c <SDIO_ReadFIFO>
 8008304:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008308:	b2da      	uxtb	r2, r3
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800830e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008310:	3301      	adds	r3, #1
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008316:	3b01      	subs	r3, #1
 8008318:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831c:	0a1b      	lsrs	r3, r3, #8
 800831e:	b2da      	uxtb	r2, r3
 8008320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008322:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008326:	3301      	adds	r3, #1
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800832a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832c:	3b01      	subs	r3, #1
 800832e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008332:	0c1b      	lsrs	r3, r3, #16
 8008334:	b2da      	uxtb	r2, r3
 8008336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008338:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800833a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833c:	3301      	adds	r3, #1
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008342:	3b01      	subs	r3, #1
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	b2da      	uxtb	r2, r3
 800834c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008352:	3301      	adds	r3, #1
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008358:	3b01      	subs	r3, #1
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800835c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800835e:	3301      	adds	r3, #1
 8008360:	643b      	str	r3, [r7, #64]	@ 0x40
 8008362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008364:	2b07      	cmp	r3, #7
 8008366:	d9c8      	bls.n	80082fa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008368:	f7fc ffd4 	bl	8005314 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008374:	429a      	cmp	r2, r3
 8008376:	d902      	bls.n	800837e <HAL_SD_ReadBlocks+0x1ae>
 8008378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800837a:	2b00      	cmp	r3, #0
 800837c:	d112      	bne.n	80083a4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a48      	ldr	r2, [pc, #288]	@ (80084a4 <HAL_SD_ReadBlocks+0x2d4>)
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e0ec      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083aa:	f240 332a 	movw	r3, #810	@ 0x32a
 80083ae:	4013      	ands	r3, r2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d095      	beq.n	80082e0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d022      	beq.n	8008408 <HAL_SD_ReadBlocks+0x238>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d91f      	bls.n	8008408 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d01b      	beq.n	8008408 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 fd93 	bl	800af00 <SDMMC_CmdStopTransfer>
 80083da:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80083dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d012      	beq.n	8008408 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2f      	ldr	r2, [pc, #188]	@ (80084a4 <HAL_SD_ReadBlocks+0x2d4>)
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f0:	431a      	orrs	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e0ba      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d012      	beq.n	800843c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a22      	ldr	r2, [pc, #136]	@ (80084a4 <HAL_SD_ReadBlocks+0x2d4>)
 800841c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	f043 0208 	orr.w	r2, r3, #8
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0a0      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d012      	beq.n	8008470 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a15      	ldr	r2, [pc, #84]	@ (80084a4 <HAL_SD_ReadBlocks+0x2d4>)
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f043 0202 	orr.w	r2, r3, #2
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e086      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d063      	beq.n	8008546 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a08      	ldr	r2, [pc, #32]	@ (80084a4 <HAL_SD_ReadBlocks+0x2d4>)
 8008484:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	f043 0220 	orr.w	r2, r3, #32
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e06c      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
 80084a4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 fbd5 	bl	800ac5c <SDIO_ReadFIFO>
 80084b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084be:	3301      	adds	r3, #1
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c4:	3b01      	subs	r3, #1
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	0a1b      	lsrs	r3, r3, #8
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d4:	3301      	adds	r3, #1
 80084d6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084da:	3b01      	subs	r3, #1
 80084dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	0c1b      	lsrs	r3, r3, #16
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	3301      	adds	r3, #1
 80084ec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f0:	3b01      	subs	r3, #1
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	0e1b      	lsrs	r3, r3, #24
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008500:	3301      	adds	r3, #1
 8008502:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008506:	3b01      	subs	r3, #1
 8008508:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800850a:	f7fc ff03 	bl	8005314 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008516:	429a      	cmp	r2, r3
 8008518:	d902      	bls.n	8008520 <HAL_SD_ReadBlocks+0x350>
 800851a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800851c:	2b00      	cmp	r3, #0
 800851e:	d112      	bne.n	8008546 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a18      	ldr	r2, [pc, #96]	@ (8008588 <HAL_SD_ReadBlocks+0x3b8>)
 8008526:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e01b      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800854c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_SD_ReadBlocks+0x38a>
 8008554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1a6      	bne.n	80084a8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008562:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	e006      	b.n	800857e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008574:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3748      	adds	r7, #72	@ 0x48
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	004005ff 	.word	0x004005ff

0800858c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b092      	sub	sp, #72	@ 0x48
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800859a:	f7fc febb 	bl	8005314 <HAL_GetTick>
 800859e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e166      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	f040 8159 	bne.w	800887e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	441a      	add	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085dc:	429a      	cmp	r2, r3
 80085de:	d907      	bls.n	80085f0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e14d      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2203      	movs	r2, #3
 80085f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2200      	movs	r2, #0
 80085fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008604:	2b01      	cmp	r3, #1
 8008606:	d002      	beq.n	800860e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860a:	025b      	lsls	r3, r3, #9
 800860c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800860e:	f04f 33ff 	mov.w	r3, #4294967295
 8008612:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	025b      	lsls	r3, r3, #9
 8008618:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800861a:	2390      	movs	r3, #144	@ 0x90
 800861c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800861e:	2300      	movs	r3, #0
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008622:	2300      	movs	r3, #0
 8008624:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008626:	2301      	movs	r3, #1
 8008628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f107 0218 	add.w	r2, r7, #24
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f002 fb8e 	bl	800ad56 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d90a      	bls.n	8008656 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800864c:	4618      	mov	r0, r3
 800864e:	f002 fc35 	bl	800aebc <SDMMC_CmdWriteMultiBlock>
 8008652:	6478      	str	r0, [r7, #68]	@ 0x44
 8008654:	e009      	b.n	800866a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2210      	movs	r2, #16
 800865a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fc08 	bl	800ae78 <SDMMC_CmdWriteSingleBlock>
 8008668:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800866a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800866c:	2b00      	cmp	r3, #0
 800866e:	d012      	beq.n	8008696 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a87      	ldr	r2, [pc, #540]	@ (8008894 <HAL_SD_WriteBlocks+0x308>)
 8008676:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800867c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800867e:	431a      	orrs	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e0fa      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800869a:	e065      	b.n	8008768 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d040      	beq.n	800872c <HAL_SD_WriteBlocks+0x1a0>
 80086aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d03d      	beq.n	800872c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80086b0:	2300      	movs	r3, #0
 80086b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086b4:	e037      	b.n	8008726 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80086b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	3301      	adds	r3, #1
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	3b01      	subs	r3, #1
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80086c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	021a      	lsls	r2, r3, #8
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	3301      	adds	r3, #1
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086dc:	3b01      	subs	r3, #1
 80086de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80086e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	041a      	lsls	r2, r3, #16
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	3301      	adds	r3, #1
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f4:	3b01      	subs	r3, #1
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80086f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	061a      	lsls	r2, r3, #24
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008706:	3301      	adds	r3, #1
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800870a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800870c:	3b01      	subs	r3, #1
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f107 0214 	add.w	r2, r7, #20
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f002 faaa 	bl	800ac74 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008722:	3301      	adds	r3, #1
 8008724:	643b      	str	r3, [r7, #64]	@ 0x40
 8008726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008728:	2b07      	cmp	r3, #7
 800872a:	d9c4      	bls.n	80086b6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800872c:	f7fc fdf2 	bl	8005314 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008738:	429a      	cmp	r2, r3
 800873a:	d902      	bls.n	8008742 <HAL_SD_WriteBlocks+0x1b6>
 800873c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800873e:	2b00      	cmp	r3, #0
 8008740:	d112      	bne.n	8008768 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a53      	ldr	r2, [pc, #332]	@ (8008894 <HAL_SD_WriteBlocks+0x308>)
 8008748:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e091      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800876e:	f240 331a 	movw	r3, #794	@ 0x31a
 8008772:	4013      	ands	r3, r2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d091      	beq.n	800869c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800877e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d022      	beq.n	80087cc <HAL_SD_WriteBlocks+0x240>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d91f      	bls.n	80087cc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008790:	2b03      	cmp	r3, #3
 8008792:	d01b      	beq.n	80087cc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4618      	mov	r0, r3
 800879a:	f002 fbb1 	bl	800af00 <SDMMC_CmdStopTransfer>
 800879e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d012      	beq.n	80087cc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a3a      	ldr	r2, [pc, #232]	@ (8008894 <HAL_SD_WriteBlocks+0x308>)
 80087ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b4:	431a      	orrs	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e05f      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a2d      	ldr	r2, [pc, #180]	@ (8008894 <HAL_SD_WriteBlocks+0x308>)
 80087e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e6:	f043 0208 	orr.w	r2, r3, #8
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e045      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d012      	beq.n	8008834 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a20      	ldr	r2, [pc, #128]	@ (8008894 <HAL_SD_WriteBlocks+0x308>)
 8008814:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881a:	f043 0202 	orr.w	r2, r3, #2
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e02b      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883a:	f003 0310 	and.w	r3, r3, #16
 800883e:	2b00      	cmp	r3, #0
 8008840:	d012      	beq.n	8008868 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a13      	ldr	r2, [pc, #76]	@ (8008894 <HAL_SD_WriteBlocks+0x308>)
 8008848:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	f043 0210 	orr.w	r2, r3, #16
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e011      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008870:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	e006      	b.n	800888c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008882:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
  }
}
 800888c:	4618      	mov	r0, r3
 800888e:	3748      	adds	r7, #72	@ 0x48
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	004005ff 	.word	0x004005ff

08008898 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088a6:	0f9b      	lsrs	r3, r3, #30
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b2:	0e9b      	lsrs	r3, r3, #26
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c4:	0e1b      	lsrs	r3, r3, #24
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d6:	0c1b      	lsrs	r3, r3, #16
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088f8:	0d1b      	lsrs	r3, r3, #20
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008904:	0c1b      	lsrs	r3, r3, #16
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	b2da      	uxtb	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008916:	0bdb      	lsrs	r3, r3, #15
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	b2da      	uxtb	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008928:	0b9b      	lsrs	r3, r3, #14
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800893a:	0b5b      	lsrs	r3, r3, #13
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	b2da      	uxtb	r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800894c:	0b1b      	lsrs	r3, r3, #12
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	b2da      	uxtb	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2200      	movs	r2, #0
 800895e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008964:	2b00      	cmp	r3, #0
 8008966:	d163      	bne.n	8008a30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896c:	009a      	lsls	r2, r3, #2
 800896e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008972:	4013      	ands	r3, r2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008978:	0f92      	lsrs	r2, r2, #30
 800897a:	431a      	orrs	r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008984:	0edb      	lsrs	r3, r3, #27
 8008986:	b2db      	uxtb	r3, r3
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	b2da      	uxtb	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008996:	0e1b      	lsrs	r3, r3, #24
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089a8:	0d5b      	lsrs	r3, r3, #21
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ba:	0c9b      	lsrs	r3, r3, #18
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089cc:	0bdb      	lsrs	r3, r3, #15
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	7e1b      	ldrb	r3, [r3, #24]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	3302      	adds	r3, #2
 80089f0:	2201      	movs	r2, #1
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80089fa:	fb03 f202 	mul.w	r2, r3, r2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	7a1b      	ldrb	r3, [r3, #8]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	409a      	lsls	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008a1c:	0a52      	lsrs	r2, r2, #9
 8008a1e:	fb03 f202 	mul.w	r2, r3, r2
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008a2e:	e031      	b.n	8008a94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d11d      	bne.n	8008a74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a3c:	041b      	lsls	r3, r3, #16
 8008a3e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a46:	0c1b      	lsrs	r3, r3, #16
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	3301      	adds	r3, #1
 8008a54:	029a      	lsls	r2, r3, #10
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a68:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	661a      	str	r2, [r3, #96]	@ 0x60
 8008a72:	e00f      	b.n	8008a94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a58      	ldr	r2, [pc, #352]	@ (8008bdc <HAL_SD_GetCardCSD+0x344>)
 8008a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e09d      	b.n	8008bd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a98:	0b9b      	lsrs	r3, r3, #14
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aaa:	09db      	lsrs	r3, r3, #7
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008acc:	0fdb      	lsrs	r3, r3, #31
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad8:	0f5b      	lsrs	r3, r3, #29
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aea:	0e9b      	lsrs	r3, r3, #26
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afc:	0d9b      	lsrs	r3, r3, #22
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b0e:	0d5b      	lsrs	r3, r3, #21
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b2a:	0c1b      	lsrs	r3, r3, #16
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b3e:	0bdb      	lsrs	r3, r3, #15
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b52:	0b9b      	lsrs	r3, r3, #14
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b66:	0b5b      	lsrs	r3, r3, #13
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b7a:	0b1b      	lsrs	r3, r3, #12
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b8e:	0a9b      	lsrs	r3, r3, #10
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba2:	0a1b      	lsrs	r3, r3, #8
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	004005ff 	.word	0x004005ff

08008be0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr

08008c36 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f971 	bl	8008f30 <SD_SendStatus>
 8008c4e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	0a5b      	lsrs	r3, r3, #9
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c6c:	693b      	ldr	r3, [r7, #16]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c76:	b5b0      	push	{r4, r5, r7, lr}
 8008c78:	b094      	sub	sp, #80	@ 0x50
 8008c7a:	af04      	add	r7, sp, #16
 8008c7c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 f811 	bl	800acae <SDIO_GetPowerState>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d102      	bne.n	8008c98 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008c96:	e0b8      	b.n	8008e0a <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d02f      	beq.n	8008d00 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 f9f2 	bl	800b08e <SDMMC_CmdSendCID>
 8008caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <SD_InitCard+0x40>
    {
      return errorstate;
 8008cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb4:	e0a9      	b.n	8008e0a <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f002 f838 	bl	800ad32 <SDIO_GetResponse>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2104      	movs	r1, #4
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 f82f 	bl	800ad32 <SDIO_GetResponse>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2108      	movs	r1, #8
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 f826 	bl	800ad32 <SDIO_GetResponse>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	210c      	movs	r1, #12
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f002 f81d 	bl	800ad32 <SDIO_GetResponse>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d00d      	beq.n	8008d24 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f107 020e 	add.w	r2, r7, #14
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 f9f8 	bl	800b108 <SDMMC_CmdSetRelAdd>
 8008d18:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <SD_InitCard+0xae>
    {
      return errorstate;
 8008d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d22:	e072      	b.n	8008e0a <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d036      	beq.n	8008d9a <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d2c:	89fb      	ldrh	r3, [r7, #14]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f002 f9c2 	bl	800b0ca <SDMMC_CmdSendCSD>
 8008d46:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d50:	e05b      	b.n	8008e0a <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2100      	movs	r1, #0
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 ffea 	bl	800ad32 <SDIO_GetResponse>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2104      	movs	r1, #4
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 ffe1 	bl	800ad32 <SDIO_GetResponse>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2108      	movs	r1, #8
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 ffd8 	bl	800ad32 <SDIO_GetResponse>
 8008d82:	4602      	mov	r2, r0
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	210c      	movs	r1, #12
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 ffcf 	bl	800ad32 <SDIO_GetResponse>
 8008d94:	4602      	mov	r2, r0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 ffc6 	bl	800ad32 <SDIO_GetResponse>
 8008da6:	4603      	mov	r3, r0
 8008da8:	0d1a      	lsrs	r2, r3, #20
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008dae:	f107 0310 	add.w	r3, r7, #16
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fd6f 	bl	8008898 <HAL_SD_GetCardCSD>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dc0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008dc4:	e021      	b.n	8008e0a <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6819      	ldr	r1, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dce:	041b      	lsls	r3, r3, #16
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	461c      	mov	r4, r3
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	462b      	mov	r3, r5
 8008dda:	4608      	mov	r0, r1
 8008ddc:	f002 f8b2 	bl	800af44 <SDMMC_CmdSelDesel>
 8008de0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <SD_InitCard+0x176>
  {
    return errorstate;
 8008de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dea:	e00e      	b.n	8008e0a <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681d      	ldr	r5, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	466c      	mov	r4, sp
 8008df4:	f103 0210 	add.w	r2, r3, #16
 8008df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8008dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dfe:	3304      	adds	r3, #4
 8008e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e02:	4628      	mov	r0, r5
 8008e04:	f001 ff00 	bl	800ac08 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3740      	adds	r7, #64	@ 0x40
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	2300      	movs	r3, #0
 8008e26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f002 f8ac 	bl	800af8a <SDMMC_CmdGoIdleState>
 8008e32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	e072      	b.n	8008f24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f002 f8bf 	bl	800afc6 <SDMMC_CmdOperCond>
 8008e48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00d      	beq.n	8008e6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 f895 	bl	800af8a <SDMMC_CmdGoIdleState>
 8008e60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	e05b      	b.n	8008f24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d137      	bne.n	8008eea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 f8bf 	bl	800b004 <SDMMC_CmdAppCommand>
 8008e86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d02d      	beq.n	8008eea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e92:	e047      	b.n	8008f24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 f8b2 	bl	800b004 <SDMMC_CmdAppCommand>
 8008ea0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <SD_PowerON+0x98>
    {
      return errorstate;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	e03b      	b.n	8008f24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	491e      	ldr	r1, [pc, #120]	@ (8008f2c <SD_PowerON+0x118>)
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 f8c8 	bl	800b048 <SDMMC_CmdAppOperCommand>
 8008eb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008ec4:	e02e      	b.n	8008f24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 ff30 	bl	800ad32 <SDIO_GetResponse>
 8008ed2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	0fdb      	lsrs	r3, r3, #31
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <SD_PowerON+0xcc>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <SD_PowerON+0xce>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]

    count++;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d802      	bhi.n	8008efa <SD_PowerON+0xe6>
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0cc      	beq.n	8008e94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d902      	bls.n	8008f0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f08:	e00c      	b.n	8008f24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	645a      	str	r2, [r3, #68]	@ 0x44
 8008f1a:	e002      	b.n	8008f22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	c1100000 	.word	0xc1100000

08008f30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008f40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f44:	e018      	b.n	8008f78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f002 f8f9 	bl	800b14a <SDMMC_CmdSendStatus>
 8008f58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	e009      	b.n	8008f78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 fee1 	bl	800ad32 <SDIO_GetResponse>
 8008f70:	4602      	mov	r2, r0
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e041      	b.n	8009016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fb fa30 	bl	800440c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f000 fc56 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b01      	cmp	r3, #1
 8009032:	d001      	beq.n	8009038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e044      	b.n	80090c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a1d      	ldr	r2, [pc, #116]	@ (80090cc <HAL_TIM_Base_Start_IT+0xac>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d018      	beq.n	800908c <HAL_TIM_Base_Start_IT+0x6c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1c      	ldr	r2, [pc, #112]	@ (80090d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d013      	beq.n	800908c <HAL_TIM_Base_Start_IT+0x6c>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800906c:	d00e      	beq.n	800908c <HAL_TIM_Base_Start_IT+0x6c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a18      	ldr	r2, [pc, #96]	@ (80090d4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d009      	beq.n	800908c <HAL_TIM_Base_Start_IT+0x6c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a16      	ldr	r2, [pc, #88]	@ (80090d8 <HAL_TIM_Base_Start_IT+0xb8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d004      	beq.n	800908c <HAL_TIM_Base_Start_IT+0x6c>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a15      	ldr	r2, [pc, #84]	@ (80090dc <HAL_TIM_Base_Start_IT+0xbc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d111      	bne.n	80090b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b06      	cmp	r3, #6
 800909c:	d010      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	e007      	b.n	80090c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr
 80090cc:	40012c00 	.word	0x40012c00
 80090d0:	40013400 	.word	0x40013400
 80090d4:	40000400 	.word	0x40000400
 80090d8:	40000800 	.word	0x40000800
 80090dc:	40000c00 	.word	0x40000c00

080090e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e041      	b.n	8009176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f839 	bl	800917e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f000 fba6 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	bc80      	pop	{r7}
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <HAL_TIM_PWM_Start+0x24>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	bf14      	ite	ne
 80091ac:	2301      	movne	r3, #1
 80091ae:	2300      	moveq	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	e022      	b.n	80091fa <HAL_TIM_PWM_Start+0x6a>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d109      	bne.n	80091ce <HAL_TIM_PWM_Start+0x3e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	e015      	b.n	80091fa <HAL_TIM_PWM_Start+0x6a>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d109      	bne.n	80091e8 <HAL_TIM_PWM_Start+0x58>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	e008      	b.n	80091fa <HAL_TIM_PWM_Start+0x6a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	bf14      	ite	ne
 80091f4:	2301      	movne	r3, #1
 80091f6:	2300      	moveq	r3, #0
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e072      	b.n	80092e8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <HAL_TIM_PWM_Start+0x82>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009210:	e013      	b.n	800923a <HAL_TIM_PWM_Start+0xaa>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b04      	cmp	r3, #4
 8009216:	d104      	bne.n	8009222 <HAL_TIM_PWM_Start+0x92>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009220:	e00b      	b.n	800923a <HAL_TIM_PWM_Start+0xaa>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b08      	cmp	r3, #8
 8009226:	d104      	bne.n	8009232 <HAL_TIM_PWM_Start+0xa2>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009230:	e003      	b.n	800923a <HAL_TIM_PWM_Start+0xaa>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2202      	movs	r2, #2
 8009236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2201      	movs	r2, #1
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 fdd0 	bl	8009de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a28      	ldr	r2, [pc, #160]	@ (80092f0 <HAL_TIM_PWM_Start+0x160>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d004      	beq.n	800925c <HAL_TIM_PWM_Start+0xcc>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a27      	ldr	r2, [pc, #156]	@ (80092f4 <HAL_TIM_PWM_Start+0x164>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d101      	bne.n	8009260 <HAL_TIM_PWM_Start+0xd0>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <HAL_TIM_PWM_Start+0xd2>
 8009260:	2300      	movs	r3, #0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d007      	beq.n	8009276 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a1d      	ldr	r2, [pc, #116]	@ (80092f0 <HAL_TIM_PWM_Start+0x160>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d018      	beq.n	80092b2 <HAL_TIM_PWM_Start+0x122>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a1b      	ldr	r2, [pc, #108]	@ (80092f4 <HAL_TIM_PWM_Start+0x164>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d013      	beq.n	80092b2 <HAL_TIM_PWM_Start+0x122>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009292:	d00e      	beq.n	80092b2 <HAL_TIM_PWM_Start+0x122>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a17      	ldr	r2, [pc, #92]	@ (80092f8 <HAL_TIM_PWM_Start+0x168>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d009      	beq.n	80092b2 <HAL_TIM_PWM_Start+0x122>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <HAL_TIM_PWM_Start+0x16c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d004      	beq.n	80092b2 <HAL_TIM_PWM_Start+0x122>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a14      	ldr	r2, [pc, #80]	@ (8009300 <HAL_TIM_PWM_Start+0x170>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d111      	bne.n	80092d6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b06      	cmp	r3, #6
 80092c2:	d010      	beq.n	80092e6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d4:	e007      	b.n	80092e6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0201 	orr.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	40013400 	.word	0x40013400
 80092f8:	40000400 	.word	0x40000400
 80092fc:	40000800 	.word	0x40000800
 8009300:	40000c00 	.word	0x40000c00

08009304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b02      	cmp	r3, #2
 8009318:	d122      	bne.n	8009360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b02      	cmp	r3, #2
 8009326:	d11b      	bne.n	8009360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f06f 0202 	mvn.w	r2, #2
 8009330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa76 	bl	8009838 <HAL_TIM_IC_CaptureCallback>
 800934c:	e005      	b.n	800935a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa69 	bl	8009826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa78 	bl	800984a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b04      	cmp	r3, #4
 800936c:	d122      	bne.n	80093b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b04      	cmp	r3, #4
 800937a:	d11b      	bne.n	80093b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0204 	mvn.w	r2, #4
 8009384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa4c 	bl	8009838 <HAL_TIM_IC_CaptureCallback>
 80093a0:	e005      	b.n	80093ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa3f 	bl	8009826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa4e 	bl	800984a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b08      	cmp	r3, #8
 80093c0:	d122      	bne.n	8009408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d11b      	bne.n	8009408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0208 	mvn.w	r2, #8
 80093d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2204      	movs	r2, #4
 80093de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa22 	bl	8009838 <HAL_TIM_IC_CaptureCallback>
 80093f4:	e005      	b.n	8009402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa15 	bl	8009826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fa24 	bl	800984a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2b10      	cmp	r3, #16
 8009414:	d122      	bne.n	800945c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f003 0310 	and.w	r3, r3, #16
 8009420:	2b10      	cmp	r3, #16
 8009422:	d11b      	bne.n	800945c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0210 	mvn.w	r2, #16
 800942c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2208      	movs	r2, #8
 8009432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9f8 	bl	8009838 <HAL_TIM_IC_CaptureCallback>
 8009448:	e005      	b.n	8009456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9eb 	bl	8009826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f9fa 	bl	800984a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10e      	bne.n	8009488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b01      	cmp	r3, #1
 8009476:	d107      	bne.n	8009488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0201 	mvn.w	r2, #1
 8009480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7fa fd18 	bl	8003eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009492:	2b80      	cmp	r3, #128	@ 0x80
 8009494:	d10e      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a0:	2b80      	cmp	r3, #128	@ 0x80
 80094a2:	d107      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80094ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fd33 	bl	8009f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094be:	2b40      	cmp	r3, #64	@ 0x40
 80094c0:	d10e      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094cc:	2b40      	cmp	r3, #64	@ 0x40
 80094ce:	d107      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f9be 	bl	800985c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d10e      	bne.n	800950c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d107      	bne.n	800950c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0220 	mvn.w	r2, #32
 8009504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fcfe 	bl	8009f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800952e:	2302      	movs	r3, #2
 8009530:	e0ae      	b.n	8009690 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b0c      	cmp	r3, #12
 800953e:	f200 809f 	bhi.w	8009680 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009542:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	0800957d 	.word	0x0800957d
 800954c:	08009681 	.word	0x08009681
 8009550:	08009681 	.word	0x08009681
 8009554:	08009681 	.word	0x08009681
 8009558:	080095bd 	.word	0x080095bd
 800955c:	08009681 	.word	0x08009681
 8009560:	08009681 	.word	0x08009681
 8009564:	08009681 	.word	0x08009681
 8009568:	080095ff 	.word	0x080095ff
 800956c:	08009681 	.word	0x08009681
 8009570:	08009681 	.word	0x08009681
 8009574:	08009681 	.word	0x08009681
 8009578:	0800963f 	.word	0x0800963f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f9ee 	bl	8009964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0208 	orr.w	r2, r2, #8
 8009596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0204 	bic.w	r2, r2, #4
 80095a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6999      	ldr	r1, [r3, #24]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	619a      	str	r2, [r3, #24]
      break;
 80095ba:	e064      	b.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68b9      	ldr	r1, [r7, #8]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fa3e 	bl	8009a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6999      	ldr	r1, [r3, #24]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	021a      	lsls	r2, r3, #8
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	619a      	str	r2, [r3, #24]
      break;
 80095fc:	e043      	b.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fa91 	bl	8009b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69da      	ldr	r2, [r3, #28]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0208 	orr.w	r2, r2, #8
 8009618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69da      	ldr	r2, [r3, #28]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f022 0204 	bic.w	r2, r2, #4
 8009628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69d9      	ldr	r1, [r3, #28]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	61da      	str	r2, [r3, #28]
      break;
 800963c:	e023      	b.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fae5 	bl	8009c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69da      	ldr	r2, [r3, #28]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69da      	ldr	r2, [r3, #28]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69d9      	ldr	r1, [r3, #28]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	021a      	lsls	r2, r3, #8
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	61da      	str	r2, [r3, #28]
      break;
 800967e:	e002      	b.n	8009686 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	75fb      	strb	r3, [r7, #23]
      break;
 8009684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800968e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_TIM_ConfigClockSource+0x1c>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e0b4      	b.n	800981e <HAL_TIM_ConfigClockSource+0x186>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80096d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ec:	d03e      	beq.n	800976c <HAL_TIM_ConfigClockSource+0xd4>
 80096ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f2:	f200 8087 	bhi.w	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 80096f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096fa:	f000 8086 	beq.w	800980a <HAL_TIM_ConfigClockSource+0x172>
 80096fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009702:	d87f      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 8009704:	2b70      	cmp	r3, #112	@ 0x70
 8009706:	d01a      	beq.n	800973e <HAL_TIM_ConfigClockSource+0xa6>
 8009708:	2b70      	cmp	r3, #112	@ 0x70
 800970a:	d87b      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 800970c:	2b60      	cmp	r3, #96	@ 0x60
 800970e:	d050      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009710:	2b60      	cmp	r3, #96	@ 0x60
 8009712:	d877      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 8009714:	2b50      	cmp	r3, #80	@ 0x50
 8009716:	d03c      	beq.n	8009792 <HAL_TIM_ConfigClockSource+0xfa>
 8009718:	2b50      	cmp	r3, #80	@ 0x50
 800971a:	d873      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 800971c:	2b40      	cmp	r3, #64	@ 0x40
 800971e:	d058      	beq.n	80097d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009720:	2b40      	cmp	r3, #64	@ 0x40
 8009722:	d86f      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 8009724:	2b30      	cmp	r3, #48	@ 0x30
 8009726:	d064      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009728:	2b30      	cmp	r3, #48	@ 0x30
 800972a:	d86b      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 800972c:	2b20      	cmp	r3, #32
 800972e:	d060      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009730:	2b20      	cmp	r3, #32
 8009732:	d867      	bhi.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d05c      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009738:	2b10      	cmp	r3, #16
 800973a:	d05a      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0x15a>
 800973c:	e062      	b.n	8009804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800974e:	f000 fb2c 	bl	8009daa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	609a      	str	r2, [r3, #8]
      break;
 800976a:	e04f      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800977c:	f000 fb15 	bl	8009daa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800978e:	609a      	str	r2, [r3, #8]
      break;
 8009790:	e03c      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800979e:	461a      	mov	r2, r3
 80097a0:	f000 fa8c 	bl	8009cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2150      	movs	r1, #80	@ 0x50
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fae3 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 80097b0:	e02c      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097be:	461a      	mov	r2, r3
 80097c0:	f000 faaa 	bl	8009d18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2160      	movs	r1, #96	@ 0x60
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fad3 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 80097d0:	e01c      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097de:	461a      	mov	r2, r3
 80097e0:	f000 fa6c 	bl	8009cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2140      	movs	r1, #64	@ 0x40
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fac3 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 80097f0:	e00c      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f000 faba 	bl	8009d76 <TIM_ITRx_SetConfig>
      break;
 8009802:	e003      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	73fb      	strb	r3, [r7, #15]
      break;
 8009808:	e000      	b.n	800980c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800980a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr

0800984a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009852:	bf00      	nop
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	bc80      	pop	{r7}
 800985a:	4770      	bx	lr

0800985c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	bc80      	pop	{r7}
 800986c:	4770      	bx	lr
	...

08009870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a33      	ldr	r2, [pc, #204]	@ (8009950 <TIM_Base_SetConfig+0xe0>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d013      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a32      	ldr	r2, [pc, #200]	@ (8009954 <TIM_Base_SetConfig+0xe4>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00f      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009896:	d00b      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a2f      	ldr	r2, [pc, #188]	@ (8009958 <TIM_Base_SetConfig+0xe8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d007      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a2e      	ldr	r2, [pc, #184]	@ (800995c <TIM_Base_SetConfig+0xec>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009960 <TIM_Base_SetConfig+0xf0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d108      	bne.n	80098c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a22      	ldr	r2, [pc, #136]	@ (8009950 <TIM_Base_SetConfig+0xe0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <TIM_Base_SetConfig+0x82>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a21      	ldr	r2, [pc, #132]	@ (8009954 <TIM_Base_SetConfig+0xe4>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_Base_SetConfig+0x82>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d8:	d00b      	beq.n	80098f2 <TIM_Base_SetConfig+0x82>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009958 <TIM_Base_SetConfig+0xe8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_Base_SetConfig+0x82>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a1d      	ldr	r2, [pc, #116]	@ (800995c <TIM_Base_SetConfig+0xec>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_Base_SetConfig+0x82>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009960 <TIM_Base_SetConfig+0xf0>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d108      	bne.n	8009904 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a09      	ldr	r2, [pc, #36]	@ (8009950 <TIM_Base_SetConfig+0xe0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d003      	beq.n	8009938 <TIM_Base_SetConfig+0xc8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a08      	ldr	r2, [pc, #32]	@ (8009954 <TIM_Base_SetConfig+0xe4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d103      	bne.n	8009940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	615a      	str	r2, [r3, #20]
}
 8009946:	bf00      	nop
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	bc80      	pop	{r7}
 800994e:	4770      	bx	lr
 8009950:	40012c00 	.word	0x40012c00
 8009954:	40013400 	.word	0x40013400
 8009958:	40000400 	.word	0x40000400
 800995c:	40000800 	.word	0x40000800
 8009960:	40000c00 	.word	0x40000c00

08009964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	f023 0201 	bic.w	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 0302 	bic.w	r3, r3, #2
 80099ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a20      	ldr	r2, [pc, #128]	@ (8009a3c <TIM_OC1_SetConfig+0xd8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_OC1_SetConfig+0x64>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a40 <TIM_OC1_SetConfig+0xdc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d10c      	bne.n	80099e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f023 0308 	bic.w	r3, r3, #8
 80099ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 0304 	bic.w	r3, r3, #4
 80099e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a15      	ldr	r2, [pc, #84]	@ (8009a3c <TIM_OC1_SetConfig+0xd8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d003      	beq.n	80099f2 <TIM_OC1_SetConfig+0x8e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a14      	ldr	r2, [pc, #80]	@ (8009a40 <TIM_OC1_SetConfig+0xdc>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d111      	bne.n	8009a16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	621a      	str	r2, [r3, #32]
}
 8009a30:	bf00      	nop
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40013400 	.word	0x40013400

08009a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	f023 0210 	bic.w	r2, r3, #16
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 0320 	bic.w	r3, r3, #32
 8009a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a21      	ldr	r2, [pc, #132]	@ (8009b24 <TIM_OC2_SetConfig+0xe0>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC2_SetConfig+0x68>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a20      	ldr	r2, [pc, #128]	@ (8009b28 <TIM_OC2_SetConfig+0xe4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d10d      	bne.n	8009ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a16      	ldr	r2, [pc, #88]	@ (8009b24 <TIM_OC2_SetConfig+0xe0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC2_SetConfig+0x94>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a15      	ldr	r2, [pc, #84]	@ (8009b28 <TIM_OC2_SetConfig+0xe4>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d113      	bne.n	8009b00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bc80      	pop	{r7}
 8009b22:	4770      	bx	lr
 8009b24:	40012c00 	.word	0x40012c00
 8009b28:	40013400 	.word	0x40013400

08009b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 0303 	bic.w	r3, r3, #3
 8009b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a21      	ldr	r2, [pc, #132]	@ (8009c0c <TIM_OC3_SetConfig+0xe0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d003      	beq.n	8009b92 <TIM_OC3_SetConfig+0x66>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a20      	ldr	r2, [pc, #128]	@ (8009c10 <TIM_OC3_SetConfig+0xe4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10d      	bne.n	8009bae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a16      	ldr	r2, [pc, #88]	@ (8009c0c <TIM_OC3_SetConfig+0xe0>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d003      	beq.n	8009bbe <TIM_OC3_SetConfig+0x92>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a15      	ldr	r2, [pc, #84]	@ (8009c10 <TIM_OC3_SetConfig+0xe4>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d113      	bne.n	8009be6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	621a      	str	r2, [r3, #32]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bc80      	pop	{r7}
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	40012c00 	.word	0x40012c00
 8009c10:	40013400 	.word	0x40013400

08009c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	031b      	lsls	r3, r3, #12
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a11      	ldr	r2, [pc, #68]	@ (8009cb4 <TIM_OC4_SetConfig+0xa0>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d003      	beq.n	8009c7c <TIM_OC4_SetConfig+0x68>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a10      	ldr	r2, [pc, #64]	@ (8009cb8 <TIM_OC4_SetConfig+0xa4>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d109      	bne.n	8009c90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	019b      	lsls	r3, r3, #6
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	621a      	str	r2, [r3, #32]
}
 8009caa:	bf00      	nop
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bc80      	pop	{r7}
 8009cb2:	4770      	bx	lr
 8009cb4:	40012c00 	.word	0x40012c00
 8009cb8:	40013400 	.word	0x40013400

08009cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f023 0201 	bic.w	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f023 030a 	bic.w	r3, r3, #10
 8009cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	621a      	str	r2, [r3, #32]
}
 8009d0e:	bf00      	nop
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bc80      	pop	{r7}
 8009d16:	4770      	bx	lr

08009d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f023 0210 	bic.w	r2, r3, #16
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	031b      	lsls	r3, r3, #12
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	621a      	str	r2, [r3, #32]
}
 8009d6c:	bf00      	nop
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr

08009d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f043 0307 	orr.w	r3, r3, #7
 8009d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	609a      	str	r2, [r3, #8]
}
 8009da0:	bf00      	nop
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr

08009daa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b087      	sub	sp, #28
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	021a      	lsls	r2, r3, #8
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	609a      	str	r2, [r3, #8]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bc80      	pop	{r7}
 8009de6:	4770      	bx	lr

08009de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	f003 031f 	and.w	r3, r3, #31
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a1a      	ldr	r2, [r3, #32]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	401a      	ands	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a1a      	ldr	r2, [r3, #32]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 031f 	and.w	r3, r3, #31
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e20:	431a      	orrs	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	621a      	str	r2, [r3, #32]
}
 8009e26:	bf00      	nop
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bc80      	pop	{r7}
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e050      	b.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a1b      	ldr	r2, [pc, #108]	@ (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d018      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a19      	ldr	r2, [pc, #100]	@ (8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d013      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9e:	d00e      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a15      	ldr	r2, [pc, #84]	@ (8009efc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d009      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a14      	ldr	r2, [pc, #80]	@ (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d004      	beq.n	8009ebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a12      	ldr	r2, [pc, #72]	@ (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d10c      	bne.n	8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bc80      	pop	{r7}
 8009ef2:	4770      	bx	lr
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40013400 	.word	0x40013400
 8009efc:	40000400 	.word	0x40000400
 8009f00:	40000800 	.word	0x40000800
 8009f04:	40000c00 	.word	0x40000c00

08009f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bc80      	pop	{r7}
 8009f18:	4770      	bx	lr

08009f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f22:	bf00      	nop
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e042      	b.n	8009fc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d106      	bne.n	8009f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7fa fb66 	bl	8004624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2224      	movs	r2, #36	@ 0x24
 8009f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fdbb 	bl	800aaec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	695a      	ldr	r2, [r3, #20]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	@ 0x28
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d16d      	bne.n	800a0c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <HAL_UART_Transmit+0x2c>
 8009ff2:	88fb      	ldrh	r3, [r7, #6]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e066      	b.n	800a0ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2221      	movs	r2, #33	@ 0x21
 800a006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a00a:	f7fb f983 	bl	8005314 <HAL_GetTick>
 800a00e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	88fa      	ldrh	r2, [r7, #6]
 800a014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	88fa      	ldrh	r2, [r7, #6]
 800a01a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a024:	d108      	bne.n	800a038 <HAL_UART_Transmit+0x6c>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d104      	bne.n	800a038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	61bb      	str	r3, [r7, #24]
 800a036:	e003      	b.n	800a040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a040:	e02a      	b.n	800a098 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2200      	movs	r2, #0
 800a04a:	2180      	movs	r1, #128	@ 0x80
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fb0b 	bl	800a668 <UART_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e036      	b.n	800a0ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	3302      	adds	r3, #2
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	e007      	b.n	800a08a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	781a      	ldrb	r2, [r3, #0]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3301      	adds	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1cf      	bne.n	800a042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2140      	movs	r1, #64	@ 0x40
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 fadb 	bl	800a668 <UART_WaitOnFlagUntilTimeout>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e006      	b.n	800a0ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e000      	b.n	800a0ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a0c8:	2302      	movs	r3, #2
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d112      	bne.n	800a112 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <HAL_UART_Receive_IT+0x26>
 800a0f2:	88fb      	ldrh	r3, [r7, #6]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e00b      	b.n	800a114 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	461a      	mov	r2, r3
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fb1b 	bl	800a744 <UART_Start_Receive_IT>
 800a10e:	4603      	mov	r3, r0
 800a110:	e000      	b.n	800a114 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a112:	2302      	movs	r3, #2
  }
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b0ba      	sub	sp, #232	@ 0xe8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a142:	2300      	movs	r3, #0
 800a144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a148:	2300      	movs	r3, #0
 800a14a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a152:	f003 030f 	and.w	r3, r3, #15
 800a156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a15a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10f      	bne.n	800a182 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a166:	f003 0320 	and.w	r3, r3, #32
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <HAL_UART_IRQHandler+0x66>
 800a16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fbf8 	bl	800a970 <UART_Receive_IT>
      return;
 800a180:	e25b      	b.n	800a63a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80de 	beq.w	800a348 <HAL_UART_IRQHandler+0x22c>
 800a18c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a19c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80d1 	beq.w	800a348 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00b      	beq.n	800a1ca <HAL_UART_IRQHandler+0xae>
 800a1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c2:	f043 0201 	orr.w	r2, r3, #1
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <HAL_UART_IRQHandler+0xd2>
 800a1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1e6:	f043 0202 	orr.w	r2, r3, #2
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00b      	beq.n	800a212 <HAL_UART_IRQHandler+0xf6>
 800a1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20a:	f043 0204 	orr.w	r2, r3, #4
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d011      	beq.n	800a242 <HAL_UART_IRQHandler+0x126>
 800a21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a222:	f003 0320 	and.w	r3, r3, #32
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a23a:	f043 0208 	orr.w	r2, r3, #8
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 81f2 	beq.w	800a630 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a250:	f003 0320 	and.w	r3, r3, #32
 800a254:	2b00      	cmp	r3, #0
 800a256:	d008      	beq.n	800a26a <HAL_UART_IRQHandler+0x14e>
 800a258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a25c:	f003 0320 	and.w	r3, r3, #32
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fb83 	bl	800a970 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	bf14      	ite	ne
 800a278:	2301      	movne	r3, #1
 800a27a:	2300      	moveq	r3, #0
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d103      	bne.n	800a296 <HAL_UART_IRQHandler+0x17a>
 800a28e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a292:	2b00      	cmp	r3, #0
 800a294:	d04f      	beq.n	800a336 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa8d 	bl	800a7b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d041      	beq.n	800a32e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3314      	adds	r3, #20
 800a2b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2e6:	e841 2300 	strex	r3, r2, [r1]
 800a2ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1d9      	bne.n	800a2aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d013      	beq.n	800a326 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a302:	4a7e      	ldr	r2, [pc, #504]	@ (800a4fc <HAL_UART_IRQHandler+0x3e0>)
 800a304:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fb f94a 	bl	80055a4 <HAL_DMA_Abort_IT>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d016      	beq.n	800a344 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a320:	4610      	mov	r0, r2
 800a322:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a324:	e00e      	b.n	800a344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f98a 	bl	800a640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32c:	e00a      	b.n	800a344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f986 	bl	800a640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a334:	e006      	b.n	800a344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f982 	bl	800a640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a342:	e175      	b.n	800a630 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a344:	bf00      	nop
    return;
 800a346:	e173      	b.n	800a630 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	f040 814f 	bne.w	800a5f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a356:	f003 0310 	and.w	r3, r3, #16
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8148 	beq.w	800a5f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a364:	f003 0310 	and.w	r3, r3, #16
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 8141 	beq.w	800a5f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60bb      	str	r3, [r7, #8]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	60bb      	str	r3, [r7, #8]
 800a382:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80b6 	beq.w	800a500 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 8145 	beq.w	800a634 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	f080 813e 	bcs.w	800a634 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	f000 8088 	beq.w	800a4dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	330c      	adds	r3, #12
 800a3d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	330c      	adds	r3, #12
 800a3f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a3f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a404:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1d9      	bne.n	800a3cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3314      	adds	r3, #20
 800a41e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a42a:	f023 0301 	bic.w	r3, r3, #1
 800a42e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3314      	adds	r3, #20
 800a438:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a43c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a440:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a442:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a444:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a44e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e1      	bne.n	800a418 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3314      	adds	r3, #20
 800a45a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a45e:	e853 3f00 	ldrex	r3, [r3]
 800a462:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a46a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3314      	adds	r3, #20
 800a474:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a478:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a47a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a47e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e3      	bne.n	800a454 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ac:	f023 0310 	bic.w	r3, r3, #16
 800a4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	330c      	adds	r3, #12
 800a4ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a4be:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a4c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e3      	bne.n	800a49a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fb f829 	bl	800552e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f8ad 	bl	800a652 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4f8:	e09c      	b.n	800a634 <HAL_UART_IRQHandler+0x518>
 800a4fa:	bf00      	nop
 800a4fc:	0800a87b 	.word	0x0800a87b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 808e 	beq.w	800a638 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a51c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 8089 	beq.w	800a638 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a538:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a53c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a54a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a54c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e3      	bne.n	800a526 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3314      	adds	r3, #20
 800a564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	623b      	str	r3, [r7, #32]
   return(result);
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	f023 0301 	bic.w	r3, r3, #1
 800a574:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3314      	adds	r3, #20
 800a57e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a582:	633a      	str	r2, [r7, #48]	@ 0x30
 800a584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e3      	bne.n	800a55e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2220      	movs	r2, #32
 800a59a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f023 0310 	bic.w	r3, r3, #16
 800a5ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a5c8:	61fa      	str	r2, [r7, #28]
 800a5ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5cc:	69b9      	ldr	r1, [r7, #24]
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	e841 2300 	strex	r3, r2, [r1]
 800a5d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e3      	bne.n	800a5a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f832 	bl	800a652 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5ee:	e023      	b.n	800a638 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d009      	beq.n	800a610 <HAL_UART_IRQHandler+0x4f4>
 800a5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f94a 	bl	800a8a2 <UART_Transmit_IT>
    return;
 800a60e:	e014      	b.n	800a63a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00e      	beq.n	800a63a <HAL_UART_IRQHandler+0x51e>
 800a61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	d008      	beq.n	800a63a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f989 	bl	800a940 <UART_EndTransmit_IT>
    return;
 800a62e:	e004      	b.n	800a63a <HAL_UART_IRQHandler+0x51e>
    return;
 800a630:	bf00      	nop
 800a632:	e002      	b.n	800a63a <HAL_UART_IRQHandler+0x51e>
      return;
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <HAL_UART_IRQHandler+0x51e>
      return;
 800a638:	bf00      	nop
  }
}
 800a63a:	37e8      	adds	r7, #232	@ 0xe8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bc80      	pop	{r7}
 800a650:	4770      	bx	lr

0800a652 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	bc80      	pop	{r7}
 800a666:	4770      	bx	lr

0800a668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b090      	sub	sp, #64	@ 0x40
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a678:	e050      	b.n	800a71c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a67a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d04c      	beq.n	800a71c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <UART_WaitOnFlagUntilTimeout+0x30>
 800a688:	f7fa fe44 	bl	8005314 <HAL_GetTick>
 800a68c:	4602      	mov	r2, r0
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a694:	429a      	cmp	r2, r3
 800a696:	d241      	bcs.n	800a71c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	330c      	adds	r3, #12
 800a69e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	330c      	adds	r3, #12
 800a6b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6b8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a6ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e5      	bne.n	800a698 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3314      	adds	r3, #20
 800a6d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	e853 3f00 	ldrex	r3, [r3]
 800a6da:	613b      	str	r3, [r7, #16]
   return(result);
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f023 0301 	bic.w	r3, r3, #1
 800a6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3314      	adds	r3, #20
 800a6ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6ec:	623a      	str	r2, [r7, #32]
 800a6ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f0:	69f9      	ldr	r1, [r7, #28]
 800a6f2:	6a3a      	ldr	r2, [r7, #32]
 800a6f4:	e841 2300 	strex	r3, r2, [r1]
 800a6f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1e5      	bne.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2220      	movs	r2, #32
 800a704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e00f      	b.n	800a73c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4013      	ands	r3, r2
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	429a      	cmp	r2, r3
 800a72a:	bf0c      	ite	eq
 800a72c:	2301      	moveq	r3, #1
 800a72e:	2300      	movne	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	461a      	mov	r2, r3
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	429a      	cmp	r2, r3
 800a738:	d09f      	beq.n	800a67a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3740      	adds	r7, #64	@ 0x40
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	4613      	mov	r3, r2
 800a750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	88fa      	ldrh	r2, [r7, #6]
 800a762:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2222      	movs	r2, #34	@ 0x22
 800a76e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d007      	beq.n	800a78a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a788:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	695a      	ldr	r2, [r3, #20]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0201 	orr.w	r2, r2, #1
 800a798:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68da      	ldr	r2, [r3, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 0220 	orr.w	r2, r2, #32
 800a7a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr

0800a7b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b095      	sub	sp, #84	@ 0x54
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	330c      	adds	r3, #12
 800a7c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	330c      	adds	r3, #12
 800a7dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7de:	643a      	str	r2, [r7, #64]	@ 0x40
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e5      	bne.n	800a7be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3314      	adds	r3, #20
 800a7f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	61fb      	str	r3, [r7, #28]
   return(result);
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3314      	adds	r3, #20
 800a810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a814:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e5      	bne.n	800a7f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d119      	bne.n	800a862 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	330c      	adds	r3, #12
 800a834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	f023 0310 	bic.w	r3, r3, #16
 800a844:	647b      	str	r3, [r7, #68]	@ 0x44
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	330c      	adds	r3, #12
 800a84c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84e:	61ba      	str	r2, [r7, #24]
 800a850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6979      	ldr	r1, [r7, #20]
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	613b      	str	r3, [r7, #16]
   return(result);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e5      	bne.n	800a82e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a870:	bf00      	nop
 800a872:	3754      	adds	r7, #84	@ 0x54
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a886:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fed3 	bl	800a640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b21      	cmp	r3, #33	@ 0x21
 800a8b4:	d13e      	bne.n	800a934 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8be:	d114      	bne.n	800a8ea <UART_Transmit_IT+0x48>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d110      	bne.n	800a8ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	1c9a      	adds	r2, r3, #2
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	621a      	str	r2, [r3, #32]
 800a8e8:	e008      	b.n	800a8fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	1c59      	adds	r1, r3, #1
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	6211      	str	r1, [r2, #32]
 800a8f4:	781a      	ldrb	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a900:	b29b      	uxth	r3, r3
 800a902:	3b01      	subs	r3, #1
 800a904:	b29b      	uxth	r3, r3
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	4619      	mov	r1, r3
 800a90a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10f      	bne.n	800a930 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a91e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a92e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	e000      	b.n	800a936 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a934:	2302      	movs	r3, #2
  }
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bc80      	pop	{r7}
 800a93e:	4770      	bx	lr

0800a940 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a956:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2220      	movs	r2, #32
 800a95c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7f8 fdfe 	bl	8003562 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08c      	sub	sp, #48	@ 0x30
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b22      	cmp	r3, #34	@ 0x22
 800a982:	f040 80ae 	bne.w	800aae2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a98e:	d117      	bne.n	800a9c0 <UART_Receive_IT+0x50>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d113      	bne.n	800a9c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a998:	2300      	movs	r3, #0
 800a99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b8:	1c9a      	adds	r2, r3, #2
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9be:	e026      	b.n	800aa0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d2:	d007      	beq.n	800a9e4 <UART_Receive_IT+0x74>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <UART_Receive_IT+0x82>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ee:	701a      	strb	r2, [r3, #0]
 800a9f0:	e008      	b.n	800aa04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d15d      	bne.n	800aade <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f022 0220 	bic.w	r2, r2, #32
 800aa30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68da      	ldr	r2, [r3, #12]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	695a      	ldr	r2, [r3, #20]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0201 	bic.w	r2, r2, #1
 800aa50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d135      	bne.n	800aad4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	330c      	adds	r3, #12
 800aa74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f023 0310 	bic.w	r3, r3, #16
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa8e:	623a      	str	r2, [r7, #32]
 800aa90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	69f9      	ldr	r1, [r7, #28]
 800aa94:	6a3a      	ldr	r2, [r7, #32]
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e5      	bne.n	800aa6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0310 	and.w	r3, r3, #16
 800aaac:	2b10      	cmp	r3, #16
 800aaae:	d10a      	bne.n	800aac6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fdc0 	bl	800a652 <HAL_UARTEx_RxEventCallback>
 800aad2:	e002      	b.n	800aada <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7f8 fd2b 	bl	8003530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	e002      	b.n	800aae4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	e000      	b.n	800aae4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aae2:	2302      	movs	r3, #2
  }
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3730      	adds	r7, #48	@ 0x30
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68da      	ldr	r2, [r3, #12]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	431a      	orrs	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ab26:	f023 030c 	bic.w	r3, r3, #12
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6812      	ldr	r2, [r2, #0]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	430b      	orrs	r3, r1
 800ab32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699a      	ldr	r2, [r3, #24]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a2c      	ldr	r2, [pc, #176]	@ (800ac00 <UART_SetConfig+0x114>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d103      	bne.n	800ab5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ab54:	f7fd fa2a 	bl	8007fac <HAL_RCC_GetPCLK2Freq>
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	e002      	b.n	800ab62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ab5c:	f7fd fa12 	bl	8007f84 <HAL_RCC_GetPCLK1Freq>
 800ab60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009a      	lsls	r2, r3, #2
 800ab6c:	441a      	add	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab78:	4a22      	ldr	r2, [pc, #136]	@ (800ac04 <UART_SetConfig+0x118>)
 800ab7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	0119      	lsls	r1, r3, #4
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	009a      	lsls	r2, r3, #2
 800ab8c:	441a      	add	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab98:	4b1a      	ldr	r3, [pc, #104]	@ (800ac04 <UART_SetConfig+0x118>)
 800ab9a:	fba3 0302 	umull	r0, r3, r3, r2
 800ab9e:	095b      	lsrs	r3, r3, #5
 800aba0:	2064      	movs	r0, #100	@ 0x64
 800aba2:	fb00 f303 	mul.w	r3, r0, r3
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	011b      	lsls	r3, r3, #4
 800abaa:	3332      	adds	r3, #50	@ 0x32
 800abac:	4a15      	ldr	r2, [pc, #84]	@ (800ac04 <UART_SetConfig+0x118>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	095b      	lsrs	r3, r3, #5
 800abb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abb8:	4419      	add	r1, r3
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009a      	lsls	r2, r3, #2
 800abc4:	441a      	add	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	fbb2 f2f3 	udiv	r2, r2, r3
 800abd0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac04 <UART_SetConfig+0x118>)
 800abd2:	fba3 0302 	umull	r0, r3, r3, r2
 800abd6:	095b      	lsrs	r3, r3, #5
 800abd8:	2064      	movs	r0, #100	@ 0x64
 800abda:	fb00 f303 	mul.w	r3, r0, r3
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	011b      	lsls	r3, r3, #4
 800abe2:	3332      	adds	r3, #50	@ 0x32
 800abe4:	4a07      	ldr	r2, [pc, #28]	@ (800ac04 <UART_SetConfig+0x118>)
 800abe6:	fba2 2303 	umull	r2, r3, r2, r3
 800abea:	095b      	lsrs	r3, r3, #5
 800abec:	f003 020f 	and.w	r2, r3, #15
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	440a      	add	r2, r1
 800abf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	40013800 	.word	0x40013800
 800ac04:	51eb851f 	.word	0x51eb851f

0800ac08 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ac08:	b084      	sub	sp, #16
 800ac0a:	b480      	push	{r7}
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	f107 001c 	add.w	r0, r7, #28
 800ac16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ac1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ac20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ac22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ac26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ac2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ac2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ac2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ac32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800ac42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bc80      	pop	{r7}
 800ac58:	b004      	add	sp, #16
 800ac5a:	4770      	bx	lr

0800ac5c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bc80      	pop	{r7}
 800ac72:	4770      	bx	lr

0800ac74 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2203      	movs	r2, #3
 800aca0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bc80      	pop	{r7}
 800acac:	4770      	bx	lr

0800acae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0303 	and.w	r3, r3, #3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bc80      	pop	{r7}
 800acc6:	4770      	bx	lr

0800acc8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ace6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800acec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800acf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ad02:	f023 030f 	bic.w	r3, r3, #15
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bc80      	pop	{r7}
 800ad18:	4770      	bx	lr

0800ad1a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	b2db      	uxtb	r3, r3
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b085      	sub	sp, #20
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3314      	adds	r3, #20
 800ad40:	461a      	mov	r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	4413      	add	r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
}  
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr

0800ad56 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b085      	sub	sp, #20
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad7c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ad82:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ad88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad94:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	431a      	orrs	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0

}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr

0800adac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800adba:	2310      	movs	r3, #16
 800adbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800adbe:	2340      	movs	r3, #64	@ 0x40
 800adc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adcc:	f107 0308 	add.w	r3, r7, #8
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7ff ff78 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800add8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800addc:	2110      	movs	r1, #16
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f9d6 	bl	800b190 <SDMMC_GetCmdResp1>
 800ade4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ade6:	69fb      	ldr	r3, [r7, #28]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3720      	adds	r7, #32
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800adfe:	2311      	movs	r3, #17
 800ae00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae02:	2340      	movs	r3, #64	@ 0x40
 800ae04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff ff56 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ae1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae20:	2111      	movs	r1, #17
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f9b4 	bl	800b190 <SDMMC_GetCmdResp1>
 800ae28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3720      	adds	r7, #32
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ae42:	2312      	movs	r3, #18
 800ae44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae46:	2340      	movs	r3, #64	@ 0x40
 800ae48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae54:	f107 0308 	add.w	r3, r7, #8
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ff34 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ae60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae64:	2112      	movs	r1, #18
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f992 	bl	800b190 <SDMMC_GetCmdResp1>
 800ae6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae6e:	69fb      	ldr	r3, [r7, #28]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3720      	adds	r7, #32
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ae86:	2318      	movs	r3, #24
 800ae88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae8a:	2340      	movs	r3, #64	@ 0x40
 800ae8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae98:	f107 0308 	add.w	r3, r7, #8
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff ff12 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aea8:	2118      	movs	r1, #24
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f970 	bl	800b190 <SDMMC_GetCmdResp1>
 800aeb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3720      	adds	r7, #32
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aeca:	2319      	movs	r3, #25
 800aecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aece:	2340      	movs	r3, #64	@ 0x40
 800aed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aed2:	2300      	movs	r3, #0
 800aed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aedc:	f107 0308 	add.w	r3, r7, #8
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff fef0 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aeec:	2119      	movs	r1, #25
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f94e 	bl	800b190 <SDMMC_GetCmdResp1>
 800aef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef6:	69fb      	ldr	r3, [r7, #28]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b088      	sub	sp, #32
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800af0c:	230c      	movs	r3, #12
 800af0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af10:	2340      	movs	r3, #64	@ 0x40
 800af12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fecf 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800af2a:	4a05      	ldr	r2, [pc, #20]	@ (800af40 <SDMMC_CmdStopTransfer+0x40>)
 800af2c:	210c      	movs	r1, #12
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f92e 	bl	800b190 <SDMMC_GetCmdResp1>
 800af34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	05f5e100 	.word	0x05f5e100

0800af44 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08a      	sub	sp, #40	@ 0x28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800af54:	2307      	movs	r3, #7
 800af56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af58:	2340      	movs	r3, #64	@ 0x40
 800af5a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af5c:	2300      	movs	r3, #0
 800af5e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af64:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af66:	f107 0310 	add.w	r3, r7, #16
 800af6a:	4619      	mov	r1, r3
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7ff feab 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800af72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af76:	2107      	movs	r1, #7
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 f909 	bl	800b190 <SDMMC_GetCmdResp1>
 800af7e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af82:	4618      	mov	r0, r3
 800af84:	3728      	adds	r7, #40	@ 0x28
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b088      	sub	sp, #32
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800af92:	2300      	movs	r3, #0
 800af94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800af9a:	2300      	movs	r3, #0
 800af9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af9e:	2300      	movs	r3, #0
 800afa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afa8:	f107 0308 	add.w	r3, r7, #8
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff fe8a 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fb21 	bl	800b5fc <SDMMC_GetCmdError>
 800afba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afbc:	69fb      	ldr	r3, [r7, #28]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b088      	sub	sp, #32
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800afce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800afd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800afd4:	2308      	movs	r3, #8
 800afd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afd8:	2340      	movs	r3, #64	@ 0x40
 800afda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afe6:	f107 0308 	add.w	r3, r7, #8
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff fe6b 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fab4 	bl	800b560 <SDMMC_GetCmdResp7>
 800aff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800affa:	69fb      	ldr	r3, [r7, #28]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b012:	2337      	movs	r3, #55	@ 0x37
 800b014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b016:	2340      	movs	r3, #64	@ 0x40
 800b018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b01e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b022:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b024:	f107 0308 	add.w	r3, r7, #8
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff fe4c 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b030:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b034:	2137      	movs	r1, #55	@ 0x37
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8aa 	bl	800b190 <SDMMC_GetCmdResp1>
 800b03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b03e:	69fb      	ldr	r3, [r7, #28]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3720      	adds	r7, #32
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b058:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b05c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b05e:	2329      	movs	r3, #41	@ 0x29
 800b060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b062:	2340      	movs	r3, #64	@ 0x40
 800b064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b06a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b06e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b070:	f107 0308 	add.w	r3, r7, #8
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fe26 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f9bd 	bl	800b3fc <SDMMC_GetCmdResp3>
 800b082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b084:	69fb      	ldr	r3, [r7, #28]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b088      	sub	sp, #32
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b09a:	2302      	movs	r3, #2
 800b09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b09e:	23c0      	movs	r3, #192	@ 0xc0
 800b0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ac:	f107 0308 	add.w	r3, r7, #8
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fe08 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f957 	bl	800b36c <SDMMC_GetCmdResp2>
 800b0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0d8:	2309      	movs	r3, #9
 800b0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b0dc:	23c0      	movs	r3, #192	@ 0xc0
 800b0de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ea:	f107 0308 	add.w	r3, r7, #8
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff fde9 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f938 	bl	800b36c <SDMMC_GetCmdResp2>
 800b0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3720      	adds	r7, #32
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b088      	sub	sp, #32
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b116:	2303      	movs	r3, #3
 800b118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b11a:	2340      	movs	r3, #64	@ 0x40
 800b11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b11e:	2300      	movs	r3, #0
 800b120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b128:	f107 0308 	add.w	r3, r7, #8
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff fdca 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	2103      	movs	r1, #3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f99b 	bl	800b474 <SDMMC_GetCmdResp6>
 800b13e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b140:	69fb      	ldr	r3, [r7, #28]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3720      	adds	r7, #32
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b088      	sub	sp, #32
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b158:	230d      	movs	r3, #13
 800b15a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b15c:	2340      	movs	r3, #64	@ 0x40
 800b15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b16a:	f107 0308 	add.w	r3, r7, #8
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff fda9 	bl	800acc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b17a:	210d      	movs	r1, #13
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f807 	bl	800b190 <SDMMC_GetCmdResp1>
 800b182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b184:	69fb      	ldr	r3, [r7, #28]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3720      	adds	r7, #32
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	460b      	mov	r3, r1
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b19e:	4b70      	ldr	r3, [pc, #448]	@ (800b360 <SDMMC_GetCmdResp1+0x1d0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a70      	ldr	r2, [pc, #448]	@ (800b364 <SDMMC_GetCmdResp1+0x1d4>)
 800b1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a8:	0a5a      	lsrs	r2, r3, #9
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	fb02 f303 	mul.w	r3, r2, r3
 800b1b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	1e5a      	subs	r2, r3, #1
 800b1b6:	61fa      	str	r2, [r7, #28]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1c0:	e0c9      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0ef      	beq.n	800b1b2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1ea      	bne.n	800b1b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d004      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	e0b1      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2201      	movs	r2, #1
 800b202:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b204:	2301      	movs	r3, #1
 800b206:	e0a6      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	22c5      	movs	r2, #197	@ 0xc5
 800b20c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fd83 	bl	800ad1a <SDIO_GetCommandResponse>
 800b214:	4603      	mov	r3, r0
 800b216:	461a      	mov	r2, r3
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d001      	beq.n	800b222 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b21e:	2301      	movs	r3, #1
 800b220:	e099      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b222:	2100      	movs	r1, #0
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff fd84 	bl	800ad32 <SDIO_GetResponse>
 800b22a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4b4e      	ldr	r3, [pc, #312]	@ (800b368 <SDMMC_GetCmdResp1+0x1d8>)
 800b230:	4013      	ands	r3, r2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b236:	2300      	movs	r3, #0
 800b238:	e08d      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da02      	bge.n	800b246 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b240:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b244:	e087      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b250:	2340      	movs	r3, #64	@ 0x40
 800b252:	e080      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b25e:	2380      	movs	r3, #128	@ 0x80
 800b260:	e079      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b26c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b270:	e071      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b27c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b280:	e069      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b28c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b290:	e061      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b29c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b2a0:	e059      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2b0:	e051      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b2c0:	e049      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b2d0:	e041      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e0:	e039      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b2f0:	e031      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b300:	e029      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b30c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b310:	e021      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b31c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b320:	e019      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d002      	beq.n	800b332 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b32c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b330:	e011      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b33c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b340:	e009      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b34c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b350:	e001      	b.n	800b356 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000024 	.word	0x20000024
 800b364:	10624dd3 	.word	0x10624dd3
 800b368:	fdffe008 	.word	0xfdffe008

0800b36c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b374:	4b1f      	ldr	r3, [pc, #124]	@ (800b3f4 <SDMMC_GetCmdResp2+0x88>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a1f      	ldr	r2, [pc, #124]	@ (800b3f8 <SDMMC_GetCmdResp2+0x8c>)
 800b37a:	fba2 2303 	umull	r2, r3, r2, r3
 800b37e:	0a5b      	lsrs	r3, r3, #9
 800b380:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	1e5a      	subs	r2, r3, #1
 800b38e:	60fa      	str	r2, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d102      	bne.n	800b39a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b394:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b398:	e026      	b.n	800b3e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b39e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0ef      	beq.n	800b38a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1ea      	bne.n	800b38a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3c6:	2304      	movs	r3, #4
 800b3c8:	e00e      	b.n	800b3e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d004      	beq.n	800b3e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e003      	b.n	800b3e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	22c5      	movs	r2, #197	@ 0xc5
 800b3e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bc80      	pop	{r7}
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20000024 	.word	0x20000024
 800b3f8:	10624dd3 	.word	0x10624dd3

0800b3fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b404:	4b19      	ldr	r3, [pc, #100]	@ (800b46c <SDMMC_GetCmdResp3+0x70>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a19      	ldr	r2, [pc, #100]	@ (800b470 <SDMMC_GetCmdResp3+0x74>)
 800b40a:	fba2 2303 	umull	r2, r3, r2, r3
 800b40e:	0a5b      	lsrs	r3, r3, #9
 800b410:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b414:	fb02 f303 	mul.w	r3, r2, r3
 800b418:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	1e5a      	subs	r2, r3, #1
 800b41e:	60fa      	str	r2, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b424:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b428:	e01b      	b.n	800b462 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b42e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0ef      	beq.n	800b41a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1ea      	bne.n	800b41a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d004      	beq.n	800b45a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2204      	movs	r2, #4
 800b454:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b456:	2304      	movs	r3, #4
 800b458:	e003      	b.n	800b462 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	22c5      	movs	r2, #197	@ 0xc5
 800b45e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr
 800b46c:	20000024 	.word	0x20000024
 800b470:	10624dd3 	.word	0x10624dd3

0800b474 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	460b      	mov	r3, r1
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b482:	4b35      	ldr	r3, [pc, #212]	@ (800b558 <SDMMC_GetCmdResp6+0xe4>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a35      	ldr	r2, [pc, #212]	@ (800b55c <SDMMC_GetCmdResp6+0xe8>)
 800b488:	fba2 2303 	umull	r2, r3, r2, r3
 800b48c:	0a5b      	lsrs	r3, r3, #9
 800b48e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b492:	fb02 f303 	mul.w	r3, r2, r3
 800b496:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	1e5a      	subs	r2, r3, #1
 800b49c:	61fa      	str	r2, [r7, #28]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d102      	bne.n	800b4a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4a6:	e052      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0ef      	beq.n	800b498 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1ea      	bne.n	800b498 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2204      	movs	r2, #4
 800b4d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	e03a      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d004      	beq.n	800b4ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e02f      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f7ff fc13 	bl	800ad1a <SDIO_GetCommandResponse>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	7afb      	ldrb	r3, [r7, #11]
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d001      	beq.n	800b502 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e025      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	22c5      	movs	r2, #197	@ 0xc5
 800b506:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7ff fc11 	bl	800ad32 <SDIO_GetResponse>
 800b510:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	0c1b      	lsrs	r3, r3, #16
 800b520:	b29a      	uxth	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b526:	2300      	movs	r3, #0
 800b528:	e011      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b538:	e009      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b548:	e001      	b.n	800b54e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b54a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000024 	.word	0x20000024
 800b55c:	10624dd3 	.word	0x10624dd3

0800b560 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b568:	4b22      	ldr	r3, [pc, #136]	@ (800b5f4 <SDMMC_GetCmdResp7+0x94>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a22      	ldr	r2, [pc, #136]	@ (800b5f8 <SDMMC_GetCmdResp7+0x98>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	0a5b      	lsrs	r3, r3, #9
 800b574:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b578:	fb02 f303 	mul.w	r3, r2, r3
 800b57c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	1e5a      	subs	r2, r3, #1
 800b582:	60fa      	str	r2, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b58c:	e02c      	b.n	800b5e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b592:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0ef      	beq.n	800b57e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1ea      	bne.n	800b57e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ac:	f003 0304 	and.w	r3, r3, #4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5ba:	2304      	movs	r3, #4
 800b5bc:	e014      	b.n	800b5e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d004      	beq.n	800b5d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e009      	b.n	800b5e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	@ 0x40
 800b5e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5e6:	2300      	movs	r3, #0
  
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20000024 	.word	0x20000024
 800b5f8:	10624dd3 	.word	0x10624dd3

0800b5fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b604:	4b10      	ldr	r3, [pc, #64]	@ (800b648 <SDMMC_GetCmdError+0x4c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a10      	ldr	r2, [pc, #64]	@ (800b64c <SDMMC_GetCmdError+0x50>)
 800b60a:	fba2 2303 	umull	r2, r3, r2, r3
 800b60e:	0a5b      	lsrs	r3, r3, #9
 800b610:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b614:	fb02 f303 	mul.w	r3, r2, r3
 800b618:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	1e5a      	subs	r2, r3, #1
 800b61e:	60fa      	str	r2, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b624:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b628:	e009      	b.n	800b63e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b62e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0f1      	beq.n	800b61a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	22c5      	movs	r2, #197	@ 0xc5
 800b63a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr
 800b648:	20000024 	.word	0x20000024
 800b64c:	10624dd3 	.word	0x10624dd3

0800b650 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b654:	4904      	ldr	r1, [pc, #16]	@ (800b668 <MX_FATFS_Init+0x18>)
 800b656:	4805      	ldr	r0, [pc, #20]	@ (800b66c <MX_FATFS_Init+0x1c>)
 800b658:	f000 f8d4 	bl	800b804 <FATFS_LinkDriver>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	4b03      	ldr	r3, [pc, #12]	@ (800b670 <MX_FATFS_Init+0x20>)
 800b662:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b664:	bf00      	nop
 800b666:	bd80      	pop	{r7, pc}
 800b668:	20000944 	.word	0x20000944
 800b66c:	0800d8a0 	.word	0x0800d8a0
 800b670:	20000940 	.word	0x20000940

0800b674 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b67e:	f000 f86b 	bl	800b758 <BSP_SD_IsDetected>
 800b682:	4603      	mov	r3, r0
 800b684:	2b01      	cmp	r3, #1
 800b686:	d001      	beq.n	800b68c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e005      	b.n	800b698 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b68c:	4804      	ldr	r0, [pc, #16]	@ (800b6a0 <BSP_SD_Init+0x2c>)
 800b68e:	f7fc fcef 	bl	8008070 <HAL_SD_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b696:	79fb      	ldrb	r3, [r7, #7]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	20000638 	.word	0x20000638

0800b6a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	68f9      	ldr	r1, [r7, #12]
 800b6c0:	4806      	ldr	r0, [pc, #24]	@ (800b6dc <BSP_SD_ReadBlocks+0x38>)
 800b6c2:	f7fc fd85 	bl	80081d0 <HAL_SD_ReadBlocks>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20000638 	.word	0x20000638

0800b6e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af02      	add	r7, sp, #8
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
 800b6ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	68f9      	ldr	r1, [r7, #12]
 800b6fc:	4806      	ldr	r0, [pc, #24]	@ (800b718 <BSP_SD_WriteBlocks+0x38>)
 800b6fe:	f7fc ff45 	bl	800858c <HAL_SD_WriteBlocks>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20000638 	.word	0x20000638

0800b71c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b720:	4805      	ldr	r0, [pc, #20]	@ (800b738 <BSP_SD_GetCardState+0x1c>)
 800b722:	f7fd fa88 	bl	8008c36 <HAL_SD_GetCardState>
 800b726:	4603      	mov	r3, r0
 800b728:	2b04      	cmp	r3, #4
 800b72a:	bf14      	ite	ne
 800b72c:	2301      	movne	r3, #1
 800b72e:	2300      	moveq	r3, #0
 800b730:	b2db      	uxtb	r3, r3
}
 800b732:	4618      	mov	r0, r3
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20000638 	.word	0x20000638

0800b73c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	4803      	ldr	r0, [pc, #12]	@ (800b754 <BSP_SD_GetCardInfo+0x18>)
 800b748:	f7fd fa4a 	bl	8008be0 <HAL_SD_GetCardInfo>
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20000638 	.word	0x20000638

0800b758 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b75e:	2301      	movs	r3, #1
 800b760:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	b2db      	uxtb	r3, r3
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bc80      	pop	{r7}
 800b76e:	4770      	bx	lr

0800b770 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	4613      	mov	r3, r2
 800b77c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b77e:	2301      	movs	r3, #1
 800b780:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b786:	4b1e      	ldr	r3, [pc, #120]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b788:	7a5b      	ldrb	r3, [r3, #9]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d831      	bhi.n	800b7f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b790:	4b1b      	ldr	r3, [pc, #108]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b792:	7a5b      	ldrb	r3, [r3, #9]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	4b19      	ldr	r3, [pc, #100]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b79a:	2100      	movs	r1, #0
 800b79c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b79e:	4b18      	ldr	r3, [pc, #96]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b7a0:	7a5b      	ldrb	r3, [r3, #9]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	4a16      	ldr	r2, [pc, #88]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b7ae:	4b14      	ldr	r3, [pc, #80]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b7b0:	7a5b      	ldrb	r3, [r3, #9]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	79fa      	ldrb	r2, [r7, #7]
 800b7bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7be:	4b10      	ldr	r3, [pc, #64]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b7c0:	7a5b      	ldrb	r3, [r3, #9]
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	b2d1      	uxtb	r1, r2
 800b7c8:	4a0d      	ldr	r2, [pc, #52]	@ (800b800 <FATFS_LinkDriverEx+0x90>)
 800b7ca:	7251      	strb	r1, [r2, #9]
 800b7cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b7ce:	7dbb      	ldrb	r3, [r7, #22]
 800b7d0:	3330      	adds	r3, #48	@ 0x30
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	223a      	movs	r2, #58	@ 0x3a
 800b7de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	3302      	adds	r3, #2
 800b7e4:	222f      	movs	r2, #47	@ 0x2f
 800b7e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	3303      	adds	r3, #3
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bc80      	pop	{r7}
 800b7fe:	4770      	bx	lr
 800b800:	20000948 	.word	0x20000948

0800b804 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b80e:	2200      	movs	r2, #0
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff ffac 	bl	800b770 <FATFS_LinkDriverEx>
 800b818:	4603      	mov	r3, r0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b82e:	4b0b      	ldr	r3, [pc, #44]	@ (800b85c <SD_initialize+0x38>)
 800b830:	2201      	movs	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800b834:	f7ff ff1e 	bl	800b674 <BSP_SD_Init>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d107      	bne.n	800b84e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b83e:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <SD_initialize+0x38>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f023 0301 	bic.w	r3, r3, #1
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	4b04      	ldr	r3, [pc, #16]	@ (800b85c <SD_initialize+0x38>)
 800b84c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b84e:	4b03      	ldr	r3, [pc, #12]	@ (800b85c <SD_initialize+0x38>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	b2db      	uxtb	r3, r3
}
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2000002d 	.word	0x2000002d

0800b860 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b86a:	4b0b      	ldr	r3, [pc, #44]	@ (800b898 <SD_status+0x38>)
 800b86c:	2201      	movs	r2, #1
 800b86e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b870:	f7ff ff54 	bl	800b71c <BSP_SD_GetCardState>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d107      	bne.n	800b88a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b87a:	4b07      	ldr	r3, [pc, #28]	@ (800b898 <SD_status+0x38>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	f023 0301 	bic.w	r3, r3, #1
 800b884:	b2da      	uxtb	r2, r3
 800b886:	4b04      	ldr	r3, [pc, #16]	@ (800b898 <SD_status+0x38>)
 800b888:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800b88a:	4b03      	ldr	r3, [pc, #12]	@ (800b898 <SD_status+0x38>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	b2db      	uxtb	r3, r3
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	2000002d 	.word	0x2000002d

0800b89c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f0 <SD_read+0x54>)
 800b8b2:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800b8b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f4 <SD_read+0x58>)
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	f7ff fef2 	bl	800b6a4 <BSP_SD_ReadBlocks>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10e      	bne.n	800b8e4 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b8c6:	e006      	b.n	800b8d6 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	1e5a      	subs	r2, r3, #1
 800b8cc:	613a      	str	r2, [r7, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <SD_read+0x3a>
      {
        return RES_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e007      	b.n	800b8e6 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b8d6:	f7ff ff21 	bl	800b71c <BSP_SD_GetCardState>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1f3      	bne.n	800b8c8 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	000186a0 	.word	0x000186a0
 800b8f4:	05f5e100 	.word	0x05f5e100

0800b8f8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800b90c:	4b0f      	ldr	r3, [pc, #60]	@ (800b94c <SD_write+0x54>)
 800b90e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800b910:	4b0f      	ldr	r3, [pc, #60]	@ (800b950 <SD_write+0x58>)
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	68b8      	ldr	r0, [r7, #8]
 800b918:	f7ff fee2 	bl	800b6e0 <BSP_SD_WriteBlocks>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10e      	bne.n	800b940 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b922:	e006      	b.n	800b932 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	1e5a      	subs	r2, r3, #1
 800b928:	613a      	str	r2, [r7, #16]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <SD_write+0x3a>
      {
        return RES_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e007      	b.n	800b942 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b932:	f7ff fef3 	bl	800b71c <BSP_SD_GetCardState>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1f3      	bne.n	800b924 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	000186a0 	.word	0x000186a0
 800b950:	05f5e100 	.word	0x05f5e100

0800b954 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08c      	sub	sp, #48	@ 0x30
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	603a      	str	r2, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
 800b960:	460b      	mov	r3, r1
 800b962:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b96a:	4b24      	ldr	r3, [pc, #144]	@ (800b9fc <SD_ioctl+0xa8>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <SD_ioctl+0x28>
 800b978:	2303      	movs	r3, #3
 800b97a:	e03b      	b.n	800b9f4 <SD_ioctl+0xa0>
  
  switch (cmd)
 800b97c:	79bb      	ldrb	r3, [r7, #6]
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d833      	bhi.n	800b9ea <SD_ioctl+0x96>
 800b982:	a201      	add	r2, pc, #4	@ (adr r2, 800b988 <SD_ioctl+0x34>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b999 	.word	0x0800b999
 800b98c:	0800b9a1 	.word	0x0800b9a1
 800b990:	0800b9b9 	.word	0x0800b9b9
 800b994:	0800b9d3 	.word	0x0800b9d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b99e:	e027      	b.n	800b9f0 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b9a0:	f107 030c 	add.w	r3, r7, #12
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fec9 	bl	800b73c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b9aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b9b6:	e01b      	b.n	800b9f0 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b9b8:	f107 030c 	add.w	r3, r7, #12
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff febd 	bl	800b73c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b9d0:	e00e      	b.n	800b9f0 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b9d2:	f107 030c 	add.w	r3, r7, #12
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff feb0 	bl	800b73c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800b9dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b9e8:	e002      	b.n	800b9f0 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800b9f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3730      	adds	r7, #48	@ 0x30
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	2000002d 	.word	0x2000002d

0800ba00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba12:	2b84      	cmp	r3, #132	@ 0x84
 800ba14:	d005      	beq.n	800ba22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	3303      	adds	r3, #3
 800ba20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ba22:	68fb      	ldr	r3, [r7, #12]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr

0800ba2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ba32:	f000 fc8d 	bl	800c350 <vTaskStartScheduler>
  
  return osOK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba3e:	b089      	sub	sp, #36	@ 0x24
 800ba40:	af04      	add	r7, sp, #16
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <osThreadCreate+0x54>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d01c      	beq.n	800ba90 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685c      	ldr	r4, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691e      	ldr	r6, [r3, #16]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff ffc9 	bl	800ba00 <makeFreeRtosPriority>
 800ba6e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba78:	9202      	str	r2, [sp, #8]
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	9100      	str	r1, [sp, #0]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	4632      	mov	r2, r6
 800ba82:	4629      	mov	r1, r5
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 f8e8 	bl	800bc5a <xTaskCreateStatic>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e01c      	b.n	800baca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685c      	ldr	r4, [r3, #4]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba9c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff ffab 	bl	800ba00 <makeFreeRtosPriority>
 800baaa:	4602      	mov	r2, r0
 800baac:	f107 030c 	add.w	r3, r7, #12
 800bab0:	9301      	str	r3, [sp, #4]
 800bab2:	9200      	str	r2, [sp, #0]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	4632      	mov	r2, r6
 800bab8:	4629      	mov	r1, r5
 800baba:	4620      	mov	r0, r4
 800babc:	f000 f92c 	bl	800bd18 <xTaskCreate>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d001      	beq.n	800baca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	e000      	b.n	800bacc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800baca:	68fb      	ldr	r3, [r7, #12]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bad4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <osDelay+0x16>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	e000      	b.n	800baec <osDelay+0x18>
 800baea:	2301      	movs	r3, #1
 800baec:	4618      	mov	r0, r3
 800baee:	f000 facb 	bl	800c088 <vTaskDelay>
  
  return osOK;
 800baf2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f103 0208 	add.w	r2, r3, #8
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f04f 32ff 	mov.w	r2, #4294967295
 800bb14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f103 0208 	add.w	r2, r3, #8
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f103 0208 	add.w	r2, r3, #8
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bc80      	pop	{r7}
 800bb38:	4770      	bx	lr

0800bb3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr

0800bb52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	1c5a      	adds	r2, r3, #1
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bc80      	pop	{r7}
 800bb96:	4770      	bx	lr

0800bb98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d103      	bne.n	800bbb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	e00c      	b.n	800bbd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e002      	b.n	800bbc6 <vListInsert+0x2e>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d2f6      	bcs.n	800bbc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	601a      	str	r2, [r3, #0]
}
 800bbfe:	bf00      	nop
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bc80      	pop	{r7}
 800bc06:	4770      	bx	lr

0800bc08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	6892      	ldr	r2, [r2, #8]
 800bc1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	6852      	ldr	r2, [r2, #4]
 800bc28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d103      	bne.n	800bc3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	1e5a      	subs	r2, r3, #1
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bc80      	pop	{r7}
 800bc58:	4770      	bx	lr

0800bc5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b08e      	sub	sp, #56	@ 0x38
 800bc5e:	af04      	add	r7, sp, #16
 800bc60:	60f8      	str	r0, [r7, #12]
 800bc62:	60b9      	str	r1, [r7, #8]
 800bc64:	607a      	str	r2, [r7, #4]
 800bc66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10b      	bne.n	800bc86 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc80:	bf00      	nop
 800bc82:	bf00      	nop
 800bc84:	e7fd      	b.n	800bc82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10b      	bne.n	800bca4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	61fb      	str	r3, [r7, #28]
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	e7fd      	b.n	800bca0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bca4:	2354      	movs	r3, #84	@ 0x54
 800bca6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b54      	cmp	r3, #84	@ 0x54
 800bcac:	d00b      	beq.n	800bcc6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	61bb      	str	r3, [r7, #24]
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	e7fd      	b.n	800bcc2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d01e      	beq.n	800bd0a <xTaskCreateStatic+0xb0>
 800bccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d01b      	beq.n	800bd0a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	2202      	movs	r2, #2
 800bce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bce4:	2300      	movs	r3, #0
 800bce6:	9303      	str	r3, [sp, #12]
 800bce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcea:	9302      	str	r3, [sp, #8]
 800bcec:	f107 0314 	add.w	r3, r7, #20
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	68b9      	ldr	r1, [r7, #8]
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 f850 	bl	800bda2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd04:	f000 f8d6 	bl	800beb4 <prvAddNewTaskToReadyList>
 800bd08:	e001      	b.n	800bd0e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd0e:	697b      	ldr	r3, [r7, #20]
	}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3728      	adds	r7, #40	@ 0x28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	@ 0x30
 800bd1c:	af04      	add	r7, sp, #16
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	4613      	mov	r3, r2
 800bd26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd28:	88fb      	ldrh	r3, [r7, #6]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f001 f86f 	bl	800ce10 <pvPortMalloc>
 800bd32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800bd3a:	2054      	movs	r0, #84	@ 0x54
 800bd3c:	f001 f868 	bl	800ce10 <pvPortMalloc>
 800bd40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd4e:	e005      	b.n	800bd5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd50:	6978      	ldr	r0, [r7, #20]
 800bd52:	f001 f925 	bl	800cfa0 <vPortFree>
 800bd56:	e001      	b.n	800bd5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d017      	beq.n	800bd92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd6a:	88fa      	ldrh	r2, [r7, #6]
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f80e 	bl	800bda2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd86:	69f8      	ldr	r0, [r7, #28]
 800bd88:	f000 f894 	bl	800beb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	61bb      	str	r3, [r7, #24]
 800bd90:	e002      	b.n	800bd98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd92:	f04f 33ff 	mov.w	r3, #4294967295
 800bd96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd98:	69bb      	ldr	r3, [r7, #24]
	}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b088      	sub	sp, #32
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	21a5      	movs	r1, #165	@ 0xa5
 800bdbc:	f001 fad0 	bl	800d360 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	f023 0307 	bic.w	r3, r3, #7
 800bdd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	f003 0307 	and.w	r3, r3, #7
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00b      	beq.n	800bdfc <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	617b      	str	r3, [r7, #20]
}
 800bdf6:	bf00      	nop
 800bdf8:	bf00      	nop
 800bdfa:	e7fd      	b.n	800bdf8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e012      	b.n	800be28 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	4413      	add	r3, r2
 800be08:	7819      	ldrb	r1, [r3, #0]
 800be0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	4413      	add	r3, r2
 800be10:	3334      	adds	r3, #52	@ 0x34
 800be12:	460a      	mov	r2, r1
 800be14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	4413      	add	r3, r2
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d006      	beq.n	800be30 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	3301      	adds	r3, #1
 800be26:	61fb      	str	r3, [r7, #28]
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	2b0f      	cmp	r3, #15
 800be2c:	d9e9      	bls.n	800be02 <prvInitialiseNewTask+0x60>
 800be2e:	e000      	b.n	800be32 <prvInitialiseNewTask+0x90>
		{
			break;
 800be30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3c:	2b06      	cmp	r3, #6
 800be3e:	d901      	bls.n	800be44 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be40:	2306      	movs	r3, #6
 800be42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be4e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be52:	2200      	movs	r2, #0
 800be54:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be58:	3304      	adds	r3, #4
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fe6d 	bl	800bb3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be62:	3318      	adds	r3, #24
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fe68 	bl	800bb3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be72:	f1c3 0207 	rsb	r2, r3, #7
 800be76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be82:	2200      	movs	r2, #0
 800be84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	68f9      	ldr	r1, [r7, #12]
 800be92:	69b8      	ldr	r0, [r7, #24]
 800be94:	f000 fe0a 	bl	800caac <pxPortInitialiseStack>
 800be98:	4602      	mov	r2, r0
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beaa:	bf00      	nop
 800beac:	3720      	adds	r7, #32
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
	...

0800beb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bebc:	f000 fee6 	bl	800cc8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bec0:	4b2a      	ldr	r3, [pc, #168]	@ (800bf6c <prvAddNewTaskToReadyList+0xb8>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3301      	adds	r3, #1
 800bec6:	4a29      	ldr	r2, [pc, #164]	@ (800bf6c <prvAddNewTaskToReadyList+0xb8>)
 800bec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800beca:	4b29      	ldr	r3, [pc, #164]	@ (800bf70 <prvAddNewTaskToReadyList+0xbc>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d109      	bne.n	800bee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bed2:	4a27      	ldr	r2, [pc, #156]	@ (800bf70 <prvAddNewTaskToReadyList+0xbc>)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bed8:	4b24      	ldr	r3, [pc, #144]	@ (800bf6c <prvAddNewTaskToReadyList+0xb8>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d110      	bne.n	800bf02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bee0:	f000 fc84 	bl	800c7ec <prvInitialiseTaskLists>
 800bee4:	e00d      	b.n	800bf02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bee6:	4b23      	ldr	r3, [pc, #140]	@ (800bf74 <prvAddNewTaskToReadyList+0xc0>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800beee:	4b20      	ldr	r3, [pc, #128]	@ (800bf70 <prvAddNewTaskToReadyList+0xbc>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef8:	429a      	cmp	r2, r3
 800befa:	d802      	bhi.n	800bf02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800befc:	4a1c      	ldr	r2, [pc, #112]	@ (800bf70 <prvAddNewTaskToReadyList+0xbc>)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf02:	4b1d      	ldr	r3, [pc, #116]	@ (800bf78 <prvAddNewTaskToReadyList+0xc4>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3301      	adds	r3, #1
 800bf08:	4a1b      	ldr	r2, [pc, #108]	@ (800bf78 <prvAddNewTaskToReadyList+0xc4>)
 800bf0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf10:	2201      	movs	r2, #1
 800bf12:	409a      	lsls	r2, r3
 800bf14:	4b19      	ldr	r3, [pc, #100]	@ (800bf7c <prvAddNewTaskToReadyList+0xc8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	4a18      	ldr	r2, [pc, #96]	@ (800bf7c <prvAddNewTaskToReadyList+0xc8>)
 800bf1c:	6013      	str	r3, [r2, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4a15      	ldr	r2, [pc, #84]	@ (800bf80 <prvAddNewTaskToReadyList+0xcc>)
 800bf2c:	441a      	add	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4619      	mov	r1, r3
 800bf34:	4610      	mov	r0, r2
 800bf36:	f7ff fe0c 	bl	800bb52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf3a:	f000 fed7 	bl	800ccec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <prvAddNewTaskToReadyList+0xc0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00e      	beq.n	800bf64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf46:	4b0a      	ldr	r3, [pc, #40]	@ (800bf70 <prvAddNewTaskToReadyList+0xbc>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d207      	bcs.n	800bf64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf54:	4b0b      	ldr	r3, [pc, #44]	@ (800bf84 <prvAddNewTaskToReadyList+0xd0>)
 800bf56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	20000a54 	.word	0x20000a54
 800bf70:	20000954 	.word	0x20000954
 800bf74:	20000a60 	.word	0x20000a60
 800bf78:	20000a70 	.word	0x20000a70
 800bf7c:	20000a5c 	.word	0x20000a5c
 800bf80:	20000958 	.word	0x20000958
 800bf84:	e000ed04 	.word	0xe000ed04

0800bf88 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08a      	sub	sp, #40	@ 0x28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bf92:	2300      	movs	r3, #0
 800bf94:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10b      	bne.n	800bfb4 <vTaskDelayUntil+0x2c>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	617b      	str	r3, [r7, #20]
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	e7fd      	b.n	800bfb0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10b      	bne.n	800bfd2 <vTaskDelayUntil+0x4a>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	613b      	str	r3, [r7, #16]
}
 800bfcc:	bf00      	nop
 800bfce:	bf00      	nop
 800bfd0:	e7fd      	b.n	800bfce <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800bfd2:	4b2a      	ldr	r3, [pc, #168]	@ (800c07c <vTaskDelayUntil+0xf4>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00b      	beq.n	800bff2 <vTaskDelayUntil+0x6a>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	60fb      	str	r3, [r7, #12]
}
 800bfec:	bf00      	nop
 800bfee:	bf00      	nop
 800bff0:	e7fd      	b.n	800bfee <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800bff2:	f000 fa0f 	bl	800c414 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bff6:	4b22      	ldr	r3, [pc, #136]	@ (800c080 <vTaskDelayUntil+0xf8>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	4413      	add	r3, r2
 800c004:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	6a3a      	ldr	r2, [r7, #32]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d20b      	bcs.n	800c028 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	69fa      	ldr	r2, [r7, #28]
 800c016:	429a      	cmp	r2, r3
 800c018:	d211      	bcs.n	800c03e <vTaskDelayUntil+0xb6>
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d90d      	bls.n	800c03e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c022:	2301      	movs	r3, #1
 800c024:	627b      	str	r3, [r7, #36]	@ 0x24
 800c026:	e00a      	b.n	800c03e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	69fa      	ldr	r2, [r7, #28]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d303      	bcc.n	800c03a <vTaskDelayUntil+0xb2>
 800c032:	69fa      	ldr	r2, [r7, #28]
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	429a      	cmp	r2, r3
 800c038:	d901      	bls.n	800c03e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c03a:	2301      	movs	r3, #1
 800c03c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	69fa      	ldr	r2, [r7, #28]
 800c042:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	d006      	beq.n	800c058 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	2100      	movs	r1, #0
 800c052:	4618      	mov	r0, r3
 800c054:	f000 fcc4 	bl	800c9e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c058:	f000 f9ea 	bl	800c430 <xTaskResumeAll>
 800c05c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d107      	bne.n	800c074 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c064:	4b07      	ldr	r3, [pc, #28]	@ (800c084 <vTaskDelayUntil+0xfc>)
 800c066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c074:	bf00      	nop
 800c076:	3728      	adds	r7, #40	@ 0x28
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	20000a7c 	.word	0x20000a7c
 800c080:	20000a58 	.word	0x20000a58
 800c084:	e000ed04 	.word	0xe000ed04

0800c088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d018      	beq.n	800c0cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c09a:	4b14      	ldr	r3, [pc, #80]	@ (800c0ec <vTaskDelay+0x64>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00b      	beq.n	800c0ba <vTaskDelay+0x32>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	60bb      	str	r3, [r7, #8]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0ba:	f000 f9ab 	bl	800c414 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fc8d 	bl	800c9e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0c6:	f000 f9b3 	bl	800c430 <xTaskResumeAll>
 800c0ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d107      	bne.n	800c0e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c0d2:	4b07      	ldr	r3, [pc, #28]	@ (800c0f0 <vTaskDelay+0x68>)
 800c0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0e2:	bf00      	nop
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000a7c 	.word	0x20000a7c
 800c0f0:	e000ed04 	.word	0xe000ed04

0800c0f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c0fc:	f000 fdc6 	bl	800cc8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d102      	bne.n	800c10c <vTaskSuspend+0x18>
 800c106:	4b3d      	ldr	r3, [pc, #244]	@ (800c1fc <vTaskSuspend+0x108>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	e000      	b.n	800c10e <vTaskSuspend+0x1a>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3304      	adds	r3, #4
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff fd77 	bl	800bc08 <uxListRemove>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d115      	bne.n	800c14c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c124:	4936      	ldr	r1, [pc, #216]	@ (800c200 <vTaskSuspend+0x10c>)
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	440b      	add	r3, r1
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10a      	bne.n	800c14c <vTaskSuspend+0x58>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13a:	2201      	movs	r2, #1
 800c13c:	fa02 f303 	lsl.w	r3, r2, r3
 800c140:	43da      	mvns	r2, r3
 800c142:	4b30      	ldr	r3, [pc, #192]	@ (800c204 <vTaskSuspend+0x110>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4013      	ands	r3, r2
 800c148:	4a2e      	ldr	r2, [pc, #184]	@ (800c204 <vTaskSuspend+0x110>)
 800c14a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3318      	adds	r3, #24
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fd55 	bl	800bc08 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3304      	adds	r3, #4
 800c162:	4619      	mov	r1, r3
 800c164:	4828      	ldr	r0, [pc, #160]	@ (800c208 <vTaskSuspend+0x114>)
 800c166:	f7ff fcf4 	bl	800bb52 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b01      	cmp	r3, #1
 800c174:	d103      	bne.n	800c17e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c17e:	f000 fdb5 	bl	800ccec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c182:	4b22      	ldr	r3, [pc, #136]	@ (800c20c <vTaskSuspend+0x118>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d005      	beq.n	800c196 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c18a:	f000 fd7f 	bl	800cc8c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c18e:	f000 fc03 	bl	800c998 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c192:	f000 fdab 	bl	800ccec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c196:	4b19      	ldr	r3, [pc, #100]	@ (800c1fc <vTaskSuspend+0x108>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d128      	bne.n	800c1f2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800c1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c20c <vTaskSuspend+0x118>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d018      	beq.n	800c1da <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c1a8:	4b19      	ldr	r3, [pc, #100]	@ (800c210 <vTaskSuspend+0x11c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00b      	beq.n	800c1c8 <vTaskSuspend+0xd4>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	60bb      	str	r3, [r7, #8]
}
 800c1c2:	bf00      	nop
 800c1c4:	bf00      	nop
 800c1c6:	e7fd      	b.n	800c1c4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800c1c8:	4b12      	ldr	r3, [pc, #72]	@ (800c214 <vTaskSuspend+0x120>)
 800c1ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1d8:	e00b      	b.n	800c1f2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800c1da:	4b0b      	ldr	r3, [pc, #44]	@ (800c208 <vTaskSuspend+0x114>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4b0e      	ldr	r3, [pc, #56]	@ (800c218 <vTaskSuspend+0x124>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d103      	bne.n	800c1ee <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800c1e6:	4b05      	ldr	r3, [pc, #20]	@ (800c1fc <vTaskSuspend+0x108>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
	}
 800c1ec:	e001      	b.n	800c1f2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800c1ee:	f000 fa89 	bl	800c704 <vTaskSwitchContext>
	}
 800c1f2:	bf00      	nop
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000954 	.word	0x20000954
 800c200:	20000958 	.word	0x20000958
 800c204:	20000a5c 	.word	0x20000a5c
 800c208:	20000a40 	.word	0x20000a40
 800c20c:	20000a60 	.word	0x20000a60
 800c210:	20000a7c 	.word	0x20000a7c
 800c214:	e000ed04 	.word	0xe000ed04
 800c218:	20000a54 	.word	0x20000a54

0800c21c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c224:	2300      	movs	r3, #0
 800c226:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10b      	bne.n	800c24a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60fb      	str	r3, [r7, #12]
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop
 800c248:	e7fd      	b.n	800c246 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	4a0f      	ldr	r2, [pc, #60]	@ (800c28c <prvTaskIsTaskSuspended+0x70>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d101      	bne.n	800c258 <prvTaskIsTaskSuspended+0x3c>
 800c254:	2301      	movs	r3, #1
 800c256:	e000      	b.n	800c25a <prvTaskIsTaskSuspended+0x3e>
 800c258:	2300      	movs	r3, #0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00f      	beq.n	800c27e <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c262:	4a0b      	ldr	r2, [pc, #44]	@ (800c290 <prvTaskIsTaskSuspended+0x74>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d00a      	beq.n	800c27e <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <prvTaskIsTaskSuspended+0x58>
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <prvTaskIsTaskSuspended+0x5a>
 800c274:	2300      	movs	r3, #0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 800c27a:	2301      	movs	r3, #1
 800c27c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c27e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c280:	4618      	mov	r0, r3
 800c282:	371c      	adds	r7, #28
 800c284:	46bd      	mov	sp, r7
 800c286:	bc80      	pop	{r7}
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20000a40 	.word	0x20000a40
 800c290:	20000a14 	.word	0x20000a14

0800c294 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <vTaskResume+0x2a>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	60bb      	str	r3, [r7, #8]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d039      	beq.n	800c338 <vTaskResume+0xa4>
 800c2c4:	4b1e      	ldr	r3, [pc, #120]	@ (800c340 <vTaskResume+0xac>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d034      	beq.n	800c338 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c2ce:	f000 fcdd 	bl	800cc8c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff ffa2 	bl	800c21c <prvTaskIsTaskSuspended>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d02a      	beq.n	800c334 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff fc90 	bl	800bc08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	409a      	lsls	r2, r3
 800c2f0:	4b14      	ldr	r3, [pc, #80]	@ (800c344 <vTaskResume+0xb0>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	4a13      	ldr	r2, [pc, #76]	@ (800c344 <vTaskResume+0xb0>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2fe:	4613      	mov	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4a10      	ldr	r2, [pc, #64]	@ (800c348 <vTaskResume+0xb4>)
 800c308:	441a      	add	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3304      	adds	r3, #4
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f7ff fc1e 	bl	800bb52 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c31a:	4b09      	ldr	r3, [pc, #36]	@ (800c340 <vTaskResume+0xac>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c320:	429a      	cmp	r2, r3
 800c322:	d307      	bcc.n	800c334 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c324:	4b09      	ldr	r3, [pc, #36]	@ (800c34c <vTaskResume+0xb8>)
 800c326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c334:	f000 fcda 	bl	800ccec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c338:	bf00      	nop
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	20000954 	.word	0x20000954
 800c344:	20000a5c 	.word	0x20000a5c
 800c348:	20000958 	.word	0x20000958
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	@ 0x28
 800c354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c356:	2300      	movs	r3, #0
 800c358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c35e:	463a      	mov	r2, r7
 800c360:	1d39      	adds	r1, r7, #4
 800c362:	f107 0308 	add.w	r3, r7, #8
 800c366:	4618      	mov	r0, r3
 800c368:	f7f7 f904 	bl	8003574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	9202      	str	r2, [sp, #8]
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	2300      	movs	r3, #0
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	2300      	movs	r3, #0
 800c37c:	460a      	mov	r2, r1
 800c37e:	491f      	ldr	r1, [pc, #124]	@ (800c3fc <vTaskStartScheduler+0xac>)
 800c380:	481f      	ldr	r0, [pc, #124]	@ (800c400 <vTaskStartScheduler+0xb0>)
 800c382:	f7ff fc6a 	bl	800bc5a <xTaskCreateStatic>
 800c386:	4603      	mov	r3, r0
 800c388:	4a1e      	ldr	r2, [pc, #120]	@ (800c404 <vTaskStartScheduler+0xb4>)
 800c38a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c38c:	4b1d      	ldr	r3, [pc, #116]	@ (800c404 <vTaskStartScheduler+0xb4>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c394:	2301      	movs	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
 800c398:	e001      	b.n	800c39e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c39a:	2300      	movs	r3, #0
 800c39c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d116      	bne.n	800c3d2 <vTaskStartScheduler+0x82>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	613b      	str	r3, [r7, #16]
}
 800c3b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3b8:	4b13      	ldr	r3, [pc, #76]	@ (800c408 <vTaskStartScheduler+0xb8>)
 800c3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c3be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3c0:	4b12      	ldr	r3, [pc, #72]	@ (800c40c <vTaskStartScheduler+0xbc>)
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c3c6:	4b12      	ldr	r3, [pc, #72]	@ (800c410 <vTaskStartScheduler+0xc0>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3cc:	f000 fbec 	bl	800cba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3d0:	e00f      	b.n	800c3f2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d8:	d10b      	bne.n	800c3f2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	60fb      	str	r3, [r7, #12]
}
 800c3ec:	bf00      	nop
 800c3ee:	bf00      	nop
 800c3f0:	e7fd      	b.n	800c3ee <vTaskStartScheduler+0x9e>
}
 800c3f2:	bf00      	nop
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0800d7a8 	.word	0x0800d7a8
 800c400:	0800c7bd 	.word	0x0800c7bd
 800c404:	20000a78 	.word	0x20000a78
 800c408:	20000a74 	.word	0x20000a74
 800c40c:	20000a60 	.word	0x20000a60
 800c410:	20000a58 	.word	0x20000a58

0800c414 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c414:	b480      	push	{r7}
 800c416:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c418:	4b04      	ldr	r3, [pc, #16]	@ (800c42c <vTaskSuspendAll+0x18>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3301      	adds	r3, #1
 800c41e:	4a03      	ldr	r2, [pc, #12]	@ (800c42c <vTaskSuspendAll+0x18>)
 800c420:	6013      	str	r3, [r2, #0]
}
 800c422:	bf00      	nop
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20000a7c 	.word	0x20000a7c

0800c430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c43e:	4b42      	ldr	r3, [pc, #264]	@ (800c548 <xTaskResumeAll+0x118>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10b      	bne.n	800c45e <xTaskResumeAll+0x2e>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	603b      	str	r3, [r7, #0]
}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	e7fd      	b.n	800c45a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c45e:	f000 fc15 	bl	800cc8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c462:	4b39      	ldr	r3, [pc, #228]	@ (800c548 <xTaskResumeAll+0x118>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3b01      	subs	r3, #1
 800c468:	4a37      	ldr	r2, [pc, #220]	@ (800c548 <xTaskResumeAll+0x118>)
 800c46a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c46c:	4b36      	ldr	r3, [pc, #216]	@ (800c548 <xTaskResumeAll+0x118>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d161      	bne.n	800c538 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c474:	4b35      	ldr	r3, [pc, #212]	@ (800c54c <xTaskResumeAll+0x11c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d05d      	beq.n	800c538 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c47c:	e02e      	b.n	800c4dc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c47e:	4b34      	ldr	r3, [pc, #208]	@ (800c550 <xTaskResumeAll+0x120>)
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3318      	adds	r3, #24
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff fbbc 	bl	800bc08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3304      	adds	r3, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fbb7 	bl	800bc08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49e:	2201      	movs	r2, #1
 800c4a0:	409a      	lsls	r2, r3
 800c4a2:	4b2c      	ldr	r3, [pc, #176]	@ (800c554 <xTaskResumeAll+0x124>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	4a2a      	ldr	r2, [pc, #168]	@ (800c554 <xTaskResumeAll+0x124>)
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4a27      	ldr	r2, [pc, #156]	@ (800c558 <xTaskResumeAll+0x128>)
 800c4ba:	441a      	add	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	f7ff fb45 	bl	800bb52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4cc:	4b23      	ldr	r3, [pc, #140]	@ (800c55c <xTaskResumeAll+0x12c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d302      	bcc.n	800c4dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c4d6:	4b22      	ldr	r3, [pc, #136]	@ (800c560 <xTaskResumeAll+0x130>)
 800c4d8:	2201      	movs	r2, #1
 800c4da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4dc:	4b1c      	ldr	r3, [pc, #112]	@ (800c550 <xTaskResumeAll+0x120>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1cc      	bne.n	800c47e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4ea:	f000 fa55 	bl	800c998 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c4ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c564 <xTaskResumeAll+0x134>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d010      	beq.n	800c51c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c4fa:	f000 f845 	bl	800c588 <xTaskIncrementTick>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c504:	4b16      	ldr	r3, [pc, #88]	@ (800c560 <xTaskResumeAll+0x130>)
 800c506:	2201      	movs	r2, #1
 800c508:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3b01      	subs	r3, #1
 800c50e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1f1      	bne.n	800c4fa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c516:	4b13      	ldr	r3, [pc, #76]	@ (800c564 <xTaskResumeAll+0x134>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c51c:	4b10      	ldr	r3, [pc, #64]	@ (800c560 <xTaskResumeAll+0x130>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d009      	beq.n	800c538 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c528:	4b0f      	ldr	r3, [pc, #60]	@ (800c568 <xTaskResumeAll+0x138>)
 800c52a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c52e:	601a      	str	r2, [r3, #0]
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c538:	f000 fbd8 	bl	800ccec <vPortExitCritical>

	return xAlreadyYielded;
 800c53c:	68bb      	ldr	r3, [r7, #8]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	20000a7c 	.word	0x20000a7c
 800c54c:	20000a54 	.word	0x20000a54
 800c550:	20000a14 	.word	0x20000a14
 800c554:	20000a5c 	.word	0x20000a5c
 800c558:	20000958 	.word	0x20000958
 800c55c:	20000954 	.word	0x20000954
 800c560:	20000a68 	.word	0x20000a68
 800c564:	20000a64 	.word	0x20000a64
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c572:	4b04      	ldr	r3, [pc, #16]	@ (800c584 <xTaskGetTickCount+0x18>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c578:	687b      	ldr	r3, [r7, #4]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	bc80      	pop	{r7}
 800c582:	4770      	bx	lr
 800c584:	20000a58 	.word	0x20000a58

0800c588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c58e:	2300      	movs	r3, #0
 800c590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c592:	4b51      	ldr	r3, [pc, #324]	@ (800c6d8 <xTaskIncrementTick+0x150>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 808e 	bne.w	800c6b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c59c:	4b4f      	ldr	r3, [pc, #316]	@ (800c6dc <xTaskIncrementTick+0x154>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5a4:	4a4d      	ldr	r2, [pc, #308]	@ (800c6dc <xTaskIncrementTick+0x154>)
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d121      	bne.n	800c5f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5b0:	4b4b      	ldr	r3, [pc, #300]	@ (800c6e0 <xTaskIncrementTick+0x158>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00b      	beq.n	800c5d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	603b      	str	r3, [r7, #0]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <xTaskIncrementTick+0x46>
 800c5d2:	4b43      	ldr	r3, [pc, #268]	@ (800c6e0 <xTaskIncrementTick+0x158>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	4b42      	ldr	r3, [pc, #264]	@ (800c6e4 <xTaskIncrementTick+0x15c>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a40      	ldr	r2, [pc, #256]	@ (800c6e0 <xTaskIncrementTick+0x158>)
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	4a40      	ldr	r2, [pc, #256]	@ (800c6e4 <xTaskIncrementTick+0x15c>)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6013      	str	r3, [r2, #0]
 800c5e6:	4b40      	ldr	r3, [pc, #256]	@ (800c6e8 <xTaskIncrementTick+0x160>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	4a3e      	ldr	r2, [pc, #248]	@ (800c6e8 <xTaskIncrementTick+0x160>)
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	f000 f9d2 	bl	800c998 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5f4:	4b3d      	ldr	r3, [pc, #244]	@ (800c6ec <xTaskIncrementTick+0x164>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d34d      	bcc.n	800c69a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5fe:	4b38      	ldr	r3, [pc, #224]	@ (800c6e0 <xTaskIncrementTick+0x158>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <xTaskIncrementTick+0x84>
 800c608:	2301      	movs	r3, #1
 800c60a:	e000      	b.n	800c60e <xTaskIncrementTick+0x86>
 800c60c:	2300      	movs	r3, #0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d004      	beq.n	800c61c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c612:	4b36      	ldr	r3, [pc, #216]	@ (800c6ec <xTaskIncrementTick+0x164>)
 800c614:	f04f 32ff 	mov.w	r2, #4294967295
 800c618:	601a      	str	r2, [r3, #0]
					break;
 800c61a:	e03e      	b.n	800c69a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c61c:	4b30      	ldr	r3, [pc, #192]	@ (800c6e0 <xTaskIncrementTick+0x158>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	429a      	cmp	r2, r3
 800c632:	d203      	bcs.n	800c63c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c634:	4a2d      	ldr	r2, [pc, #180]	@ (800c6ec <xTaskIncrementTick+0x164>)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6013      	str	r3, [r2, #0]
						break;
 800c63a:	e02e      	b.n	800c69a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	3304      	adds	r3, #4
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff fae1 	bl	800bc08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	3318      	adds	r3, #24
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff fad8 	bl	800bc08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c65c:	2201      	movs	r2, #1
 800c65e:	409a      	lsls	r2, r3
 800c660:	4b23      	ldr	r3, [pc, #140]	@ (800c6f0 <xTaskIncrementTick+0x168>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	4a22      	ldr	r2, [pc, #136]	@ (800c6f0 <xTaskIncrementTick+0x168>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a1f      	ldr	r2, [pc, #124]	@ (800c6f4 <xTaskIncrementTick+0x16c>)
 800c678:	441a      	add	r2, r3
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4619      	mov	r1, r3
 800c680:	4610      	mov	r0, r2
 800c682:	f7ff fa66 	bl	800bb52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c68a:	4b1b      	ldr	r3, [pc, #108]	@ (800c6f8 <xTaskIncrementTick+0x170>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c690:	429a      	cmp	r2, r3
 800c692:	d3b4      	bcc.n	800c5fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c694:	2301      	movs	r3, #1
 800c696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c698:	e7b1      	b.n	800c5fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c69a:	4b17      	ldr	r3, [pc, #92]	@ (800c6f8 <xTaskIncrementTick+0x170>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6a0:	4914      	ldr	r1, [pc, #80]	@ (800c6f4 <xTaskIncrementTick+0x16c>)
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	440b      	add	r3, r1
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d907      	bls.n	800c6c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	617b      	str	r3, [r7, #20]
 800c6b6:	e004      	b.n	800c6c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c6b8:	4b10      	ldr	r3, [pc, #64]	@ (800c6fc <xTaskIncrementTick+0x174>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	4a0f      	ldr	r2, [pc, #60]	@ (800c6fc <xTaskIncrementTick+0x174>)
 800c6c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c6c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c700 <xTaskIncrementTick+0x178>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c6ce:	697b      	ldr	r3, [r7, #20]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	20000a7c 	.word	0x20000a7c
 800c6dc:	20000a58 	.word	0x20000a58
 800c6e0:	20000a0c 	.word	0x20000a0c
 800c6e4:	20000a10 	.word	0x20000a10
 800c6e8:	20000a6c 	.word	0x20000a6c
 800c6ec:	20000a74 	.word	0x20000a74
 800c6f0:	20000a5c 	.word	0x20000a5c
 800c6f4:	20000958 	.word	0x20000958
 800c6f8:	20000954 	.word	0x20000954
 800c6fc:	20000a64 	.word	0x20000a64
 800c700:	20000a68 	.word	0x20000a68

0800c704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c704:	b480      	push	{r7}
 800c706:	b087      	sub	sp, #28
 800c708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c70a:	4b27      	ldr	r3, [pc, #156]	@ (800c7a8 <vTaskSwitchContext+0xa4>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c712:	4b26      	ldr	r3, [pc, #152]	@ (800c7ac <vTaskSwitchContext+0xa8>)
 800c714:	2201      	movs	r2, #1
 800c716:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c718:	e040      	b.n	800c79c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c71a:	4b24      	ldr	r3, [pc, #144]	@ (800c7ac <vTaskSwitchContext+0xa8>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c720:	4b23      	ldr	r3, [pc, #140]	@ (800c7b0 <vTaskSwitchContext+0xac>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	fab3 f383 	clz	r3, r3
 800c72c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c72e:	7afb      	ldrb	r3, [r7, #11]
 800c730:	f1c3 031f 	rsb	r3, r3, #31
 800c734:	617b      	str	r3, [r7, #20]
 800c736:	491f      	ldr	r1, [pc, #124]	@ (800c7b4 <vTaskSwitchContext+0xb0>)
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	4613      	mov	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10b      	bne.n	800c762 <vTaskSwitchContext+0x5e>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	607b      	str	r3, [r7, #4]
}
 800c75c:	bf00      	nop
 800c75e:	bf00      	nop
 800c760:	e7fd      	b.n	800c75e <vTaskSwitchContext+0x5a>
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	4613      	mov	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4a11      	ldr	r2, [pc, #68]	@ (800c7b4 <vTaskSwitchContext+0xb0>)
 800c76e:	4413      	add	r3, r2
 800c770:	613b      	str	r3, [r7, #16]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	605a      	str	r2, [r3, #4]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	3308      	adds	r3, #8
 800c784:	429a      	cmp	r2, r3
 800c786:	d104      	bne.n	800c792 <vTaskSwitchContext+0x8e>
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	4a07      	ldr	r2, [pc, #28]	@ (800c7b8 <vTaskSwitchContext+0xb4>)
 800c79a:	6013      	str	r3, [r2, #0]
}
 800c79c:	bf00      	nop
 800c79e:	371c      	adds	r7, #28
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bc80      	pop	{r7}
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	20000a7c 	.word	0x20000a7c
 800c7ac:	20000a68 	.word	0x20000a68
 800c7b0:	20000a5c 	.word	0x20000a5c
 800c7b4:	20000958 	.word	0x20000958
 800c7b8:	20000954 	.word	0x20000954

0800c7bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7c4:	f000 f852 	bl	800c86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7c8:	4b06      	ldr	r3, [pc, #24]	@ (800c7e4 <prvIdleTask+0x28>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d9f9      	bls.n	800c7c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7d0:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <prvIdleTask+0x2c>)
 800c7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c7e0:	e7f0      	b.n	800c7c4 <prvIdleTask+0x8>
 800c7e2:	bf00      	nop
 800c7e4:	20000958 	.word	0x20000958
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	607b      	str	r3, [r7, #4]
 800c7f6:	e00c      	b.n	800c812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4a12      	ldr	r2, [pc, #72]	@ (800c84c <prvInitialiseTaskLists+0x60>)
 800c804:	4413      	add	r3, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff f978 	bl	800bafc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3301      	adds	r3, #1
 800c810:	607b      	str	r3, [r7, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b06      	cmp	r3, #6
 800c816:	d9ef      	bls.n	800c7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c818:	480d      	ldr	r0, [pc, #52]	@ (800c850 <prvInitialiseTaskLists+0x64>)
 800c81a:	f7ff f96f 	bl	800bafc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c81e:	480d      	ldr	r0, [pc, #52]	@ (800c854 <prvInitialiseTaskLists+0x68>)
 800c820:	f7ff f96c 	bl	800bafc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c824:	480c      	ldr	r0, [pc, #48]	@ (800c858 <prvInitialiseTaskLists+0x6c>)
 800c826:	f7ff f969 	bl	800bafc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c82a:	480c      	ldr	r0, [pc, #48]	@ (800c85c <prvInitialiseTaskLists+0x70>)
 800c82c:	f7ff f966 	bl	800bafc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c830:	480b      	ldr	r0, [pc, #44]	@ (800c860 <prvInitialiseTaskLists+0x74>)
 800c832:	f7ff f963 	bl	800bafc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c836:	4b0b      	ldr	r3, [pc, #44]	@ (800c864 <prvInitialiseTaskLists+0x78>)
 800c838:	4a05      	ldr	r2, [pc, #20]	@ (800c850 <prvInitialiseTaskLists+0x64>)
 800c83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c83c:	4b0a      	ldr	r3, [pc, #40]	@ (800c868 <prvInitialiseTaskLists+0x7c>)
 800c83e:	4a05      	ldr	r2, [pc, #20]	@ (800c854 <prvInitialiseTaskLists+0x68>)
 800c840:	601a      	str	r2, [r3, #0]
}
 800c842:	bf00      	nop
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20000958 	.word	0x20000958
 800c850:	200009e4 	.word	0x200009e4
 800c854:	200009f8 	.word	0x200009f8
 800c858:	20000a14 	.word	0x20000a14
 800c85c:	20000a28 	.word	0x20000a28
 800c860:	20000a40 	.word	0x20000a40
 800c864:	20000a0c 	.word	0x20000a0c
 800c868:	20000a10 	.word	0x20000a10

0800c86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c872:	e019      	b.n	800c8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c874:	f000 fa0a 	bl	800cc8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c878:	4b10      	ldr	r3, [pc, #64]	@ (800c8bc <prvCheckTasksWaitingTermination+0x50>)
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3304      	adds	r3, #4
 800c884:	4618      	mov	r0, r3
 800c886:	f7ff f9bf 	bl	800bc08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c88a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c0 <prvCheckTasksWaitingTermination+0x54>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	3b01      	subs	r3, #1
 800c890:	4a0b      	ldr	r2, [pc, #44]	@ (800c8c0 <prvCheckTasksWaitingTermination+0x54>)
 800c892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c894:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c4 <prvCheckTasksWaitingTermination+0x58>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3b01      	subs	r3, #1
 800c89a:	4a0a      	ldr	r2, [pc, #40]	@ (800c8c4 <prvCheckTasksWaitingTermination+0x58>)
 800c89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c89e:	f000 fa25 	bl	800ccec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f848 	bl	800c938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8a8:	4b06      	ldr	r3, [pc, #24]	@ (800c8c4 <prvCheckTasksWaitingTermination+0x58>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1e1      	bne.n	800c874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20000a28 	.word	0x20000a28
 800c8c0:	20000a54 	.word	0x20000a54
 800c8c4:	20000a3c 	.word	0x20000a3c

0800c8c8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c8d4:	e005      	b.n	800c8e2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2ba5      	cmp	r3, #165	@ 0xa5
 800c8e8:	d0f5      	beq.n	800c8d6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	089b      	lsrs	r3, r3, #2
 800c8ee:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	b29b      	uxth	r3, r3
	}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr
	...

0800c900 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d102      	bne.n	800c914 <uxTaskGetStackHighWaterMark+0x14>
 800c90e:	4b09      	ldr	r3, [pc, #36]	@ (800c934 <uxTaskGetStackHighWaterMark+0x34>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	e000      	b.n	800c916 <uxTaskGetStackHighWaterMark+0x16>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c91c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c91e:	6938      	ldr	r0, [r7, #16]
 800c920:	f7ff ffd2 	bl	800c8c8 <prvTaskCheckFreeStackSpace>
 800c924:	4603      	mov	r3, r0
 800c926:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c928:	68fb      	ldr	r3, [r7, #12]
	}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3718      	adds	r7, #24
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	20000954 	.word	0x20000954

0800c938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c946:	2b00      	cmp	r3, #0
 800c948:	d108      	bne.n	800c95c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 fb26 	bl	800cfa0 <vPortFree>
				vPortFree( pxTCB );
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fb23 	bl	800cfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c95a:	e019      	b.n	800c990 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c962:	2b01      	cmp	r3, #1
 800c964:	d103      	bne.n	800c96e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fb1a 	bl	800cfa0 <vPortFree>
	}
 800c96c:	e010      	b.n	800c990 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c974:	2b02      	cmp	r3, #2
 800c976:	d00b      	beq.n	800c990 <prvDeleteTCB+0x58>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	60fb      	str	r3, [r7, #12]
}
 800c98a:	bf00      	nop
 800c98c:	bf00      	nop
 800c98e:	e7fd      	b.n	800c98c <prvDeleteTCB+0x54>
	}
 800c990:	bf00      	nop
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c99e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d8 <prvResetNextTaskUnblockTime+0x40>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <prvResetNextTaskUnblockTime+0x14>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e000      	b.n	800c9ae <prvResetNextTaskUnblockTime+0x16>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d004      	beq.n	800c9bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9dc <prvResetNextTaskUnblockTime+0x44>)
 800c9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9ba:	e008      	b.n	800c9ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <prvResetNextTaskUnblockTime+0x40>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	4a04      	ldr	r2, [pc, #16]	@ (800c9dc <prvResetNextTaskUnblockTime+0x44>)
 800c9cc:	6013      	str	r3, [r2, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bc80      	pop	{r7}
 800c9d6:	4770      	bx	lr
 800c9d8:	20000a0c 	.word	0x20000a0c
 800c9dc:	20000a74 	.word	0x20000a74

0800c9e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9ea:	4b29      	ldr	r3, [pc, #164]	@ (800ca90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9f0:	4b28      	ldr	r3, [pc, #160]	@ (800ca94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff f906 	bl	800bc08 <uxListRemove>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10b      	bne.n	800ca1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ca02:	4b24      	ldr	r3, [pc, #144]	@ (800ca94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca08:	2201      	movs	r2, #1
 800ca0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0e:	43da      	mvns	r2, r3
 800ca10:	4b21      	ldr	r3, [pc, #132]	@ (800ca98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4013      	ands	r3, r2
 800ca16:	4a20      	ldr	r2, [pc, #128]	@ (800ca98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca20:	d10a      	bne.n	800ca38 <prvAddCurrentTaskToDelayedList+0x58>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d007      	beq.n	800ca38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca28:	4b1a      	ldr	r3, [pc, #104]	@ (800ca94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4619      	mov	r1, r3
 800ca30:	481a      	ldr	r0, [pc, #104]	@ (800ca9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca32:	f7ff f88e 	bl	800bb52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca36:	e026      	b.n	800ca86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca40:	4b14      	ldr	r3, [pc, #80]	@ (800ca94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d209      	bcs.n	800ca64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca50:	4b13      	ldr	r3, [pc, #76]	@ (800caa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	4b0f      	ldr	r3, [pc, #60]	@ (800ca94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f7ff f89b 	bl	800bb98 <vListInsert>
}
 800ca62:	e010      	b.n	800ca86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca64:	4b0f      	ldr	r3, [pc, #60]	@ (800caa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	4b0a      	ldr	r3, [pc, #40]	@ (800ca94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4610      	mov	r0, r2
 800ca72:	f7ff f891 	bl	800bb98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca76:	4b0c      	ldr	r3, [pc, #48]	@ (800caa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d202      	bcs.n	800ca86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ca80:	4a09      	ldr	r2, [pc, #36]	@ (800caa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	6013      	str	r3, [r2, #0]
}
 800ca86:	bf00      	nop
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000a58 	.word	0x20000a58
 800ca94:	20000954 	.word	0x20000954
 800ca98:	20000a5c 	.word	0x20000a5c
 800ca9c:	20000a40 	.word	0x20000a40
 800caa0:	20000a10 	.word	0x20000a10
 800caa4:	20000a0c 	.word	0x20000a0c
 800caa8:	20000a74 	.word	0x20000a74

0800caac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3b04      	subs	r3, #4
 800cabc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3b04      	subs	r3, #4
 800caca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	f023 0201 	bic.w	r2, r3, #1
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3b04      	subs	r3, #4
 800cada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cadc:	4a08      	ldr	r2, [pc, #32]	@ (800cb00 <pxPortInitialiseStack+0x54>)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3b14      	subs	r3, #20
 800cae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3b20      	subs	r3, #32
 800caf2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800caf4:	68fb      	ldr	r3, [r7, #12]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bc80      	pop	{r7}
 800cafe:	4770      	bx	lr
 800cb00:	0800cb05 	.word	0x0800cb05

0800cb04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb0e:	4b12      	ldr	r3, [pc, #72]	@ (800cb58 <prvTaskExitError+0x54>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb16:	d00b      	beq.n	800cb30 <prvTaskExitError+0x2c>
	__asm volatile
 800cb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	60fb      	str	r3, [r7, #12]
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	e7fd      	b.n	800cb2c <prvTaskExitError+0x28>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	60bb      	str	r3, [r7, #8]
}
 800cb42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb44:	bf00      	nop
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0fc      	beq.n	800cb46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bc80      	pop	{r7}
 800cb56:	4770      	bx	lr
 800cb58:	20000030 	.word	0x20000030
 800cb5c:	00000000 	.word	0x00000000

0800cb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb60:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <pxCurrentTCBConst2>)
 800cb62:	6819      	ldr	r1, [r3, #0]
 800cb64:	6808      	ldr	r0, [r1, #0]
 800cb66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb6a:	f380 8809 	msr	PSP, r0
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f04f 0000 	mov.w	r0, #0
 800cb76:	f380 8811 	msr	BASEPRI, r0
 800cb7a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cb7e:	4770      	bx	lr

0800cb80 <pxCurrentTCBConst2>:
 800cb80:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop

0800cb88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cb88:	4806      	ldr	r0, [pc, #24]	@ (800cba4 <prvPortStartFirstTask+0x1c>)
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	6800      	ldr	r0, [r0, #0]
 800cb8e:	f380 8808 	msr	MSP, r0
 800cb92:	b662      	cpsie	i
 800cb94:	b661      	cpsie	f
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	df00      	svc	0
 800cba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cba2:	bf00      	nop
 800cba4:	e000ed08 	.word	0xe000ed08

0800cba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbae:	4b32      	ldr	r3, [pc, #200]	@ (800cc78 <xPortStartScheduler+0xd0>)
 800cbb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	22ff      	movs	r2, #255	@ 0xff
 800cbbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbc8:	78fb      	ldrb	r3, [r7, #3]
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	4b2a      	ldr	r3, [pc, #168]	@ (800cc7c <xPortStartScheduler+0xd4>)
 800cbd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbd6:	4b2a      	ldr	r3, [pc, #168]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cbd8:	2207      	movs	r2, #7
 800cbda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbdc:	e009      	b.n	800cbf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cbde:	4b28      	ldr	r3, [pc, #160]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	4a26      	ldr	r2, [pc, #152]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cbe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbe8:	78fb      	ldrb	r3, [r7, #3]
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbf2:	78fb      	ldrb	r3, [r7, #3]
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbfa:	2b80      	cmp	r3, #128	@ 0x80
 800cbfc:	d0ef      	beq.n	800cbde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbfe:	4b20      	ldr	r3, [pc, #128]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f1c3 0307 	rsb	r3, r3, #7
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	d00b      	beq.n	800cc22 <xPortStartScheduler+0x7a>
	__asm volatile
 800cc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	60bb      	str	r3, [r7, #8]
}
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
 800cc20:	e7fd      	b.n	800cc1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc22:	4b17      	ldr	r3, [pc, #92]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	4a15      	ldr	r2, [pc, #84]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cc2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc2c:	4b14      	ldr	r3, [pc, #80]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cc34:	4a12      	ldr	r2, [pc, #72]	@ (800cc80 <xPortStartScheduler+0xd8>)
 800cc36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc40:	4b10      	ldr	r3, [pc, #64]	@ (800cc84 <xPortStartScheduler+0xdc>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a0f      	ldr	r2, [pc, #60]	@ (800cc84 <xPortStartScheduler+0xdc>)
 800cc46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cc4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc84 <xPortStartScheduler+0xdc>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a0c      	ldr	r2, [pc, #48]	@ (800cc84 <xPortStartScheduler+0xdc>)
 800cc52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cc56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc58:	f000 f8b8 	bl	800cdcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc88 <xPortStartScheduler+0xe0>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc62:	f7ff ff91 	bl	800cb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc66:	f7ff fd4d 	bl	800c704 <vTaskSwitchContext>
	prvTaskExitError();
 800cc6a:	f7ff ff4b 	bl	800cb04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	e000e400 	.word	0xe000e400
 800cc7c:	20000a80 	.word	0x20000a80
 800cc80:	20000a84 	.word	0x20000a84
 800cc84:	e000ed20 	.word	0xe000ed20
 800cc88:	20000030 	.word	0x20000030

0800cc8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	607b      	str	r3, [r7, #4]
}
 800cca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cca6:	4b0f      	ldr	r3, [pc, #60]	@ (800cce4 <vPortEnterCritical+0x58>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4a0d      	ldr	r2, [pc, #52]	@ (800cce4 <vPortEnterCritical+0x58>)
 800ccae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ccb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cce4 <vPortEnterCritical+0x58>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d110      	bne.n	800ccda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccb8:	4b0b      	ldr	r3, [pc, #44]	@ (800cce8 <vPortEnterCritical+0x5c>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00b      	beq.n	800ccda <vPortEnterCritical+0x4e>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	603b      	str	r3, [r7, #0]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <vPortEnterCritical+0x4a>
	}
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bc80      	pop	{r7}
 800cce2:	4770      	bx	lr
 800cce4:	20000030 	.word	0x20000030
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccf2:	4b12      	ldr	r3, [pc, #72]	@ (800cd3c <vPortExitCritical+0x50>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10b      	bne.n	800cd12 <vPortExitCritical+0x26>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	607b      	str	r3, [r7, #4]
}
 800cd0c:	bf00      	nop
 800cd0e:	bf00      	nop
 800cd10:	e7fd      	b.n	800cd0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd12:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <vPortExitCritical+0x50>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3b01      	subs	r3, #1
 800cd18:	4a08      	ldr	r2, [pc, #32]	@ (800cd3c <vPortExitCritical+0x50>)
 800cd1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd1c:	4b07      	ldr	r3, [pc, #28]	@ (800cd3c <vPortExitCritical+0x50>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d105      	bne.n	800cd30 <vPortExitCritical+0x44>
 800cd24:	2300      	movs	r3, #0
 800cd26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bc80      	pop	{r7}
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	20000030 	.word	0x20000030

0800cd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd40:	f3ef 8009 	mrs	r0, PSP
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	4b0d      	ldr	r3, [pc, #52]	@ (800cd80 <pxCurrentTCBConst>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd50:	6010      	str	r0, [r2, #0]
 800cd52:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cd56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cd5a:	f380 8811 	msr	BASEPRI, r0
 800cd5e:	f7ff fcd1 	bl	800c704 <vTaskSwitchContext>
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd6e:	6819      	ldr	r1, [r3, #0]
 800cd70:	6808      	ldr	r0, [r1, #0]
 800cd72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd76:	f380 8809 	msr	PSP, r0
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	4770      	bx	lr

0800cd80 <pxCurrentTCBConst>:
 800cd80:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop

0800cd88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	607b      	str	r3, [r7, #4]
}
 800cda0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cda2:	f7ff fbf1 	bl	800c588 <xTaskIncrementTick>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdac:	4b06      	ldr	r3, [pc, #24]	@ (800cdc8 <SysTick_Handler+0x40>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	f383 8811 	msr	BASEPRI, r3
}
 800cdbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	e000ed04 	.word	0xe000ed04

0800cdcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdcc:	b480      	push	{r7}
 800cdce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cdfc <vPortSetupTimerInterrupt+0x30>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ce00 <vPortSetupTimerInterrupt+0x34>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cddc:	4b09      	ldr	r3, [pc, #36]	@ (800ce04 <vPortSetupTimerInterrupt+0x38>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a09      	ldr	r2, [pc, #36]	@ (800ce08 <vPortSetupTimerInterrupt+0x3c>)
 800cde2:	fba2 2303 	umull	r2, r3, r2, r3
 800cde6:	099b      	lsrs	r3, r3, #6
 800cde8:	4a08      	ldr	r2, [pc, #32]	@ (800ce0c <vPortSetupTimerInterrupt+0x40>)
 800cdea:	3b01      	subs	r3, #1
 800cdec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdee:	4b03      	ldr	r3, [pc, #12]	@ (800cdfc <vPortSetupTimerInterrupt+0x30>)
 800cdf0:	2207      	movs	r2, #7
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bc80      	pop	{r7}
 800cdfa:	4770      	bx	lr
 800cdfc:	e000e010 	.word	0xe000e010
 800ce00:	e000e018 	.word	0xe000e018
 800ce04:	20000024 	.word	0x20000024
 800ce08:	10624dd3 	.word	0x10624dd3
 800ce0c:	e000e014 	.word	0xe000e014

0800ce10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08a      	sub	sp, #40	@ 0x28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce1c:	f7ff fafa 	bl	800c414 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce20:	4b5a      	ldr	r3, [pc, #360]	@ (800cf8c <pvPortMalloc+0x17c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce28:	f000 f916 	bl	800d058 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce2c:	4b58      	ldr	r3, [pc, #352]	@ (800cf90 <pvPortMalloc+0x180>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4013      	ands	r3, r2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f040 8090 	bne.w	800cf5a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d01e      	beq.n	800ce7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ce40:	2208      	movs	r2, #8
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	4413      	add	r3, r2
 800ce46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f003 0307 	and.w	r3, r3, #7
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d015      	beq.n	800ce7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f023 0307 	bic.w	r3, r3, #7
 800ce58:	3308      	adds	r3, #8
 800ce5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f003 0307 	and.w	r3, r3, #7
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00b      	beq.n	800ce7e <pvPortMalloc+0x6e>
	__asm volatile
 800ce66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	617b      	str	r3, [r7, #20]
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	e7fd      	b.n	800ce7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d06a      	beq.n	800cf5a <pvPortMalloc+0x14a>
 800ce84:	4b43      	ldr	r3, [pc, #268]	@ (800cf94 <pvPortMalloc+0x184>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d865      	bhi.n	800cf5a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce8e:	4b42      	ldr	r3, [pc, #264]	@ (800cf98 <pvPortMalloc+0x188>)
 800ce90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce92:	4b41      	ldr	r3, [pc, #260]	@ (800cf98 <pvPortMalloc+0x188>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce98:	e004      	b.n	800cea4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d903      	bls.n	800ceb6 <pvPortMalloc+0xa6>
 800ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1f1      	bne.n	800ce9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ceb6:	4b35      	ldr	r3, [pc, #212]	@ (800cf8c <pvPortMalloc+0x17c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d04c      	beq.n	800cf5a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2208      	movs	r2, #8
 800cec6:	4413      	add	r3, r2
 800cec8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ceca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ced2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	1ad2      	subs	r2, r2, r3
 800ceda:	2308      	movs	r3, #8
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	429a      	cmp	r2, r3
 800cee0:	d920      	bls.n	800cf24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4413      	add	r3, r2
 800cee8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	f003 0307 	and.w	r3, r3, #7
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <pvPortMalloc+0xfc>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	613b      	str	r3, [r7, #16]
}
 800cf06:	bf00      	nop
 800cf08:	bf00      	nop
 800cf0a:	e7fd      	b.n	800cf08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	1ad2      	subs	r2, r2, r3
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf1e:	69b8      	ldr	r0, [r7, #24]
 800cf20:	f000 f8fc 	bl	800d11c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf24:	4b1b      	ldr	r3, [pc, #108]	@ (800cf94 <pvPortMalloc+0x184>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	4a19      	ldr	r2, [pc, #100]	@ (800cf94 <pvPortMalloc+0x184>)
 800cf30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf32:	4b18      	ldr	r3, [pc, #96]	@ (800cf94 <pvPortMalloc+0x184>)
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	4b19      	ldr	r3, [pc, #100]	@ (800cf9c <pvPortMalloc+0x18c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d203      	bcs.n	800cf46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf3e:	4b15      	ldr	r3, [pc, #84]	@ (800cf94 <pvPortMalloc+0x184>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a16      	ldr	r2, [pc, #88]	@ (800cf9c <pvPortMalloc+0x18c>)
 800cf44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	4b11      	ldr	r3, [pc, #68]	@ (800cf90 <pvPortMalloc+0x180>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf56:	2200      	movs	r2, #0
 800cf58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf5a:	f7ff fa69 	bl	800c430 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	f003 0307 	and.w	r3, r3, #7
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00b      	beq.n	800cf80 <pvPortMalloc+0x170>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	60fb      	str	r3, [r7, #12]
}
 800cf7a:	bf00      	nop
 800cf7c:	bf00      	nop
 800cf7e:	e7fd      	b.n	800cf7c <pvPortMalloc+0x16c>
	return pvReturn;
 800cf80:	69fb      	ldr	r3, [r7, #28]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3728      	adds	r7, #40	@ 0x28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20001690 	.word	0x20001690
 800cf90:	2000169c 	.word	0x2000169c
 800cf94:	20001694 	.word	0x20001694
 800cf98:	20001688 	.word	0x20001688
 800cf9c:	20001698 	.word	0x20001698

0800cfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d04a      	beq.n	800d048 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfb2:	2308      	movs	r3, #8
 800cfb4:	425b      	negs	r3, r3
 800cfb6:	697a      	ldr	r2, [r7, #20]
 800cfb8:	4413      	add	r3, r2
 800cfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	4b22      	ldr	r3, [pc, #136]	@ (800d050 <vPortFree+0xb0>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4013      	ands	r3, r2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10b      	bne.n	800cfe6 <vPortFree+0x46>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	60fb      	str	r3, [r7, #12]
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	e7fd      	b.n	800cfe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00b      	beq.n	800d006 <vPortFree+0x66>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	60bb      	str	r3, [r7, #8]
}
 800d000:	bf00      	nop
 800d002:	bf00      	nop
 800d004:	e7fd      	b.n	800d002 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	4b11      	ldr	r3, [pc, #68]	@ (800d050 <vPortFree+0xb0>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4013      	ands	r3, r2
 800d010:	2b00      	cmp	r3, #0
 800d012:	d019      	beq.n	800d048 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d115      	bne.n	800d048 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	4b0b      	ldr	r3, [pc, #44]	@ (800d050 <vPortFree+0xb0>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	43db      	mvns	r3, r3
 800d026:	401a      	ands	r2, r3
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d02c:	f7ff f9f2 	bl	800c414 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	4b07      	ldr	r3, [pc, #28]	@ (800d054 <vPortFree+0xb4>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4413      	add	r3, r2
 800d03a:	4a06      	ldr	r2, [pc, #24]	@ (800d054 <vPortFree+0xb4>)
 800d03c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d03e:	6938      	ldr	r0, [r7, #16]
 800d040:	f000 f86c 	bl	800d11c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d044:	f7ff f9f4 	bl	800c430 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d048:	bf00      	nop
 800d04a:	3718      	adds	r7, #24
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	2000169c 	.word	0x2000169c
 800d054:	20001694 	.word	0x20001694

0800d058 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d05e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d062:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d064:	4b27      	ldr	r3, [pc, #156]	@ (800d104 <prvHeapInit+0xac>)
 800d066:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f003 0307 	and.w	r3, r3, #7
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00c      	beq.n	800d08c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3307      	adds	r3, #7
 800d076:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f023 0307 	bic.w	r3, r3, #7
 800d07e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	4a1f      	ldr	r2, [pc, #124]	@ (800d104 <prvHeapInit+0xac>)
 800d088:	4413      	add	r3, r2
 800d08a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d090:	4a1d      	ldr	r2, [pc, #116]	@ (800d108 <prvHeapInit+0xb0>)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d096:	4b1c      	ldr	r3, [pc, #112]	@ (800d108 <prvHeapInit+0xb0>)
 800d098:	2200      	movs	r2, #0
 800d09a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0a4:	2208      	movs	r2, #8
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	1a9b      	subs	r3, r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f023 0307 	bic.w	r3, r3, #7
 800d0b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	4a15      	ldr	r2, [pc, #84]	@ (800d10c <prvHeapInit+0xb4>)
 800d0b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0ba:	4b14      	ldr	r3, [pc, #80]	@ (800d10c <prvHeapInit+0xb4>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0c2:	4b12      	ldr	r3, [pc, #72]	@ (800d10c <prvHeapInit+0xb4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	1ad2      	subs	r2, r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d10c <prvHeapInit+0xb4>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	@ (800d110 <prvHeapInit+0xb8>)
 800d0e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	4a09      	ldr	r2, [pc, #36]	@ (800d114 <prvHeapInit+0xbc>)
 800d0ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0f0:	4b09      	ldr	r3, [pc, #36]	@ (800d118 <prvHeapInit+0xc0>)
 800d0f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0f6:	601a      	str	r2, [r3, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bc80      	pop	{r7}
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	20000a88 	.word	0x20000a88
 800d108:	20001688 	.word	0x20001688
 800d10c:	20001690 	.word	0x20001690
 800d110:	20001698 	.word	0x20001698
 800d114:	20001694 	.word	0x20001694
 800d118:	2000169c 	.word	0x2000169c

0800d11c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d124:	4b27      	ldr	r3, [pc, #156]	@ (800d1c4 <prvInsertBlockIntoFreeList+0xa8>)
 800d126:	60fb      	str	r3, [r7, #12]
 800d128:	e002      	b.n	800d130 <prvInsertBlockIntoFreeList+0x14>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	429a      	cmp	r2, r3
 800d138:	d8f7      	bhi.n	800d12a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	4413      	add	r3, r2
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d108      	bne.n	800d15e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	441a      	add	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	441a      	add	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d118      	bne.n	800d1a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	4b14      	ldr	r3, [pc, #80]	@ (800d1c8 <prvInsertBlockIntoFreeList+0xac>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d00d      	beq.n	800d19a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	441a      	add	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	e008      	b.n	800d1ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d19a:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c8 <prvInsertBlockIntoFreeList+0xac>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	e003      	b.n	800d1ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d002      	beq.n	800d1ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1ba:	bf00      	nop
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bc80      	pop	{r7}
 800d1c2:	4770      	bx	lr
 800d1c4:	20001688 	.word	0x20001688
 800d1c8:	20001690 	.word	0x20001690

0800d1cc <calloc>:
 800d1cc:	4b02      	ldr	r3, [pc, #8]	@ (800d1d8 <calloc+0xc>)
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	4601      	mov	r1, r0
 800d1d2:	6818      	ldr	r0, [r3, #0]
 800d1d4:	f000 b802 	b.w	800d1dc <_calloc_r>
 800d1d8:	20000034 	.word	0x20000034

0800d1dc <_calloc_r>:
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	fba1 5402 	umull	r5, r4, r1, r2
 800d1e2:	b93c      	cbnz	r4, 800d1f4 <_calloc_r+0x18>
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	f000 f82f 	bl	800d248 <_malloc_r>
 800d1ea:	4606      	mov	r6, r0
 800d1ec:	b928      	cbnz	r0, 800d1fa <_calloc_r+0x1e>
 800d1ee:	2600      	movs	r6, #0
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	220c      	movs	r2, #12
 800d1f6:	6002      	str	r2, [r0, #0]
 800d1f8:	e7f9      	b.n	800d1ee <_calloc_r+0x12>
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	f000 f8af 	bl	800d360 <memset>
 800d202:	e7f5      	b.n	800d1f0 <_calloc_r+0x14>

0800d204 <sbrk_aligned>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	4e0f      	ldr	r6, [pc, #60]	@ (800d244 <sbrk_aligned+0x40>)
 800d208:	460c      	mov	r4, r1
 800d20a:	6831      	ldr	r1, [r6, #0]
 800d20c:	4605      	mov	r5, r0
 800d20e:	b911      	cbnz	r1, 800d216 <sbrk_aligned+0x12>
 800d210:	f000 f8ae 	bl	800d370 <_sbrk_r>
 800d214:	6030      	str	r0, [r6, #0]
 800d216:	4621      	mov	r1, r4
 800d218:	4628      	mov	r0, r5
 800d21a:	f000 f8a9 	bl	800d370 <_sbrk_r>
 800d21e:	1c43      	adds	r3, r0, #1
 800d220:	d103      	bne.n	800d22a <sbrk_aligned+0x26>
 800d222:	f04f 34ff 	mov.w	r4, #4294967295
 800d226:	4620      	mov	r0, r4
 800d228:	bd70      	pop	{r4, r5, r6, pc}
 800d22a:	1cc4      	adds	r4, r0, #3
 800d22c:	f024 0403 	bic.w	r4, r4, #3
 800d230:	42a0      	cmp	r0, r4
 800d232:	d0f8      	beq.n	800d226 <sbrk_aligned+0x22>
 800d234:	1a21      	subs	r1, r4, r0
 800d236:	4628      	mov	r0, r5
 800d238:	f000 f89a 	bl	800d370 <_sbrk_r>
 800d23c:	3001      	adds	r0, #1
 800d23e:	d1f2      	bne.n	800d226 <sbrk_aligned+0x22>
 800d240:	e7ef      	b.n	800d222 <sbrk_aligned+0x1e>
 800d242:	bf00      	nop
 800d244:	200016a0 	.word	0x200016a0

0800d248 <_malloc_r>:
 800d248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d24c:	1ccd      	adds	r5, r1, #3
 800d24e:	f025 0503 	bic.w	r5, r5, #3
 800d252:	3508      	adds	r5, #8
 800d254:	2d0c      	cmp	r5, #12
 800d256:	bf38      	it	cc
 800d258:	250c      	movcc	r5, #12
 800d25a:	2d00      	cmp	r5, #0
 800d25c:	4606      	mov	r6, r0
 800d25e:	db01      	blt.n	800d264 <_malloc_r+0x1c>
 800d260:	42a9      	cmp	r1, r5
 800d262:	d904      	bls.n	800d26e <_malloc_r+0x26>
 800d264:	230c      	movs	r3, #12
 800d266:	6033      	str	r3, [r6, #0]
 800d268:	2000      	movs	r0, #0
 800d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d344 <_malloc_r+0xfc>
 800d272:	f000 f869 	bl	800d348 <__malloc_lock>
 800d276:	f8d8 3000 	ldr.w	r3, [r8]
 800d27a:	461c      	mov	r4, r3
 800d27c:	bb44      	cbnz	r4, 800d2d0 <_malloc_r+0x88>
 800d27e:	4629      	mov	r1, r5
 800d280:	4630      	mov	r0, r6
 800d282:	f7ff ffbf 	bl	800d204 <sbrk_aligned>
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	4604      	mov	r4, r0
 800d28a:	d158      	bne.n	800d33e <_malloc_r+0xf6>
 800d28c:	f8d8 4000 	ldr.w	r4, [r8]
 800d290:	4627      	mov	r7, r4
 800d292:	2f00      	cmp	r7, #0
 800d294:	d143      	bne.n	800d31e <_malloc_r+0xd6>
 800d296:	2c00      	cmp	r4, #0
 800d298:	d04b      	beq.n	800d332 <_malloc_r+0xea>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	4639      	mov	r1, r7
 800d29e:	4630      	mov	r0, r6
 800d2a0:	eb04 0903 	add.w	r9, r4, r3
 800d2a4:	f000 f864 	bl	800d370 <_sbrk_r>
 800d2a8:	4581      	cmp	r9, r0
 800d2aa:	d142      	bne.n	800d332 <_malloc_r+0xea>
 800d2ac:	6821      	ldr	r1, [r4, #0]
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	1a6d      	subs	r5, r5, r1
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	f7ff ffa6 	bl	800d204 <sbrk_aligned>
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d03a      	beq.n	800d332 <_malloc_r+0xea>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	442b      	add	r3, r5
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	bb62      	cbnz	r2, 800d324 <_malloc_r+0xdc>
 800d2ca:	f8c8 7000 	str.w	r7, [r8]
 800d2ce:	e00f      	b.n	800d2f0 <_malloc_r+0xa8>
 800d2d0:	6822      	ldr	r2, [r4, #0]
 800d2d2:	1b52      	subs	r2, r2, r5
 800d2d4:	d420      	bmi.n	800d318 <_malloc_r+0xd0>
 800d2d6:	2a0b      	cmp	r2, #11
 800d2d8:	d917      	bls.n	800d30a <_malloc_r+0xc2>
 800d2da:	1961      	adds	r1, r4, r5
 800d2dc:	42a3      	cmp	r3, r4
 800d2de:	6025      	str	r5, [r4, #0]
 800d2e0:	bf18      	it	ne
 800d2e2:	6059      	strne	r1, [r3, #4]
 800d2e4:	6863      	ldr	r3, [r4, #4]
 800d2e6:	bf08      	it	eq
 800d2e8:	f8c8 1000 	streq.w	r1, [r8]
 800d2ec:	5162      	str	r2, [r4, r5]
 800d2ee:	604b      	str	r3, [r1, #4]
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f000 f82f 	bl	800d354 <__malloc_unlock>
 800d2f6:	f104 000b 	add.w	r0, r4, #11
 800d2fa:	1d23      	adds	r3, r4, #4
 800d2fc:	f020 0007 	bic.w	r0, r0, #7
 800d300:	1ac2      	subs	r2, r0, r3
 800d302:	bf1c      	itt	ne
 800d304:	1a1b      	subne	r3, r3, r0
 800d306:	50a3      	strne	r3, [r4, r2]
 800d308:	e7af      	b.n	800d26a <_malloc_r+0x22>
 800d30a:	6862      	ldr	r2, [r4, #4]
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	bf0c      	ite	eq
 800d310:	f8c8 2000 	streq.w	r2, [r8]
 800d314:	605a      	strne	r2, [r3, #4]
 800d316:	e7eb      	b.n	800d2f0 <_malloc_r+0xa8>
 800d318:	4623      	mov	r3, r4
 800d31a:	6864      	ldr	r4, [r4, #4]
 800d31c:	e7ae      	b.n	800d27c <_malloc_r+0x34>
 800d31e:	463c      	mov	r4, r7
 800d320:	687f      	ldr	r7, [r7, #4]
 800d322:	e7b6      	b.n	800d292 <_malloc_r+0x4a>
 800d324:	461a      	mov	r2, r3
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	42a3      	cmp	r3, r4
 800d32a:	d1fb      	bne.n	800d324 <_malloc_r+0xdc>
 800d32c:	2300      	movs	r3, #0
 800d32e:	6053      	str	r3, [r2, #4]
 800d330:	e7de      	b.n	800d2f0 <_malloc_r+0xa8>
 800d332:	230c      	movs	r3, #12
 800d334:	4630      	mov	r0, r6
 800d336:	6033      	str	r3, [r6, #0]
 800d338:	f000 f80c 	bl	800d354 <__malloc_unlock>
 800d33c:	e794      	b.n	800d268 <_malloc_r+0x20>
 800d33e:	6005      	str	r5, [r0, #0]
 800d340:	e7d6      	b.n	800d2f0 <_malloc_r+0xa8>
 800d342:	bf00      	nop
 800d344:	200016a4 	.word	0x200016a4

0800d348 <__malloc_lock>:
 800d348:	4801      	ldr	r0, [pc, #4]	@ (800d350 <__malloc_lock+0x8>)
 800d34a:	f000 b84b 	b.w	800d3e4 <__retarget_lock_acquire_recursive>
 800d34e:	bf00      	nop
 800d350:	200017e4 	.word	0x200017e4

0800d354 <__malloc_unlock>:
 800d354:	4801      	ldr	r0, [pc, #4]	@ (800d35c <__malloc_unlock+0x8>)
 800d356:	f000 b846 	b.w	800d3e6 <__retarget_lock_release_recursive>
 800d35a:	bf00      	nop
 800d35c:	200017e4 	.word	0x200017e4

0800d360 <memset>:
 800d360:	4603      	mov	r3, r0
 800d362:	4402      	add	r2, r0
 800d364:	4293      	cmp	r3, r2
 800d366:	d100      	bne.n	800d36a <memset+0xa>
 800d368:	4770      	bx	lr
 800d36a:	f803 1b01 	strb.w	r1, [r3], #1
 800d36e:	e7f9      	b.n	800d364 <memset+0x4>

0800d370 <_sbrk_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	2300      	movs	r3, #0
 800d374:	4d05      	ldr	r5, [pc, #20]	@ (800d38c <_sbrk_r+0x1c>)
 800d376:	4604      	mov	r4, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	602b      	str	r3, [r5, #0]
 800d37c:	f7f6 ff48 	bl	8004210 <_sbrk>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	d102      	bne.n	800d38a <_sbrk_r+0x1a>
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	b103      	cbz	r3, 800d38a <_sbrk_r+0x1a>
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	200017e0 	.word	0x200017e0

0800d390 <__errno>:
 800d390:	4b01      	ldr	r3, [pc, #4]	@ (800d398 <__errno+0x8>)
 800d392:	6818      	ldr	r0, [r3, #0]
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	20000034 	.word	0x20000034

0800d39c <__libc_init_array>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	2600      	movs	r6, #0
 800d3a0:	4d0c      	ldr	r5, [pc, #48]	@ (800d3d4 <__libc_init_array+0x38>)
 800d3a2:	4c0d      	ldr	r4, [pc, #52]	@ (800d3d8 <__libc_init_array+0x3c>)
 800d3a4:	1b64      	subs	r4, r4, r5
 800d3a6:	10a4      	asrs	r4, r4, #2
 800d3a8:	42a6      	cmp	r6, r4
 800d3aa:	d109      	bne.n	800d3c0 <__libc_init_array+0x24>
 800d3ac:	f000 f9a0 	bl	800d6f0 <_init>
 800d3b0:	2600      	movs	r6, #0
 800d3b2:	4d0a      	ldr	r5, [pc, #40]	@ (800d3dc <__libc_init_array+0x40>)
 800d3b4:	4c0a      	ldr	r4, [pc, #40]	@ (800d3e0 <__libc_init_array+0x44>)
 800d3b6:	1b64      	subs	r4, r4, r5
 800d3b8:	10a4      	asrs	r4, r4, #2
 800d3ba:	42a6      	cmp	r6, r4
 800d3bc:	d105      	bne.n	800d3ca <__libc_init_array+0x2e>
 800d3be:	bd70      	pop	{r4, r5, r6, pc}
 800d3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3c4:	4798      	blx	r3
 800d3c6:	3601      	adds	r6, #1
 800d3c8:	e7ee      	b.n	800d3a8 <__libc_init_array+0xc>
 800d3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ce:	4798      	blx	r3
 800d3d0:	3601      	adds	r6, #1
 800d3d2:	e7f2      	b.n	800d3ba <__libc_init_array+0x1e>
 800d3d4:	0800d8b4 	.word	0x0800d8b4
 800d3d8:	0800d8b4 	.word	0x0800d8b4
 800d3dc:	0800d8b4 	.word	0x0800d8b4
 800d3e0:	0800d8b8 	.word	0x0800d8b8

0800d3e4 <__retarget_lock_acquire_recursive>:
 800d3e4:	4770      	bx	lr

0800d3e6 <__retarget_lock_release_recursive>:
 800d3e6:	4770      	bx	lr

0800d3e8 <sqrt>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	460f      	mov	r7, r1
 800d3ee:	f000 f839 	bl	800d464 <__ieee754_sqrt>
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	460d      	mov	r5, r1
 800d3f8:	463b      	mov	r3, r7
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	f7f3 fb6d 	bl	8000adc <__aeabi_dcmpun>
 800d402:	b990      	cbnz	r0, 800d42a <sqrt+0x42>
 800d404:	2200      	movs	r2, #0
 800d406:	2300      	movs	r3, #0
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f3 fb3e 	bl	8000a8c <__aeabi_dcmplt>
 800d410:	b158      	cbz	r0, 800d42a <sqrt+0x42>
 800d412:	f7ff ffbd 	bl	800d390 <__errno>
 800d416:	2321      	movs	r3, #33	@ 0x21
 800d418:	2200      	movs	r2, #0
 800d41a:	6003      	str	r3, [r0, #0]
 800d41c:	2300      	movs	r3, #0
 800d41e:	4610      	mov	r0, r2
 800d420:	4619      	mov	r1, r3
 800d422:	f7f3 f9eb 	bl	80007fc <__aeabi_ddiv>
 800d426:	4604      	mov	r4, r0
 800d428:	460d      	mov	r5, r1
 800d42a:	4620      	mov	r0, r4
 800d42c:	4629      	mov	r1, r5
 800d42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d430 <sqrtf>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4605      	mov	r5, r0
 800d434:	f000 f8ec 	bl	800d610 <__ieee754_sqrtf>
 800d438:	4629      	mov	r1, r5
 800d43a:	4604      	mov	r4, r0
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7f3 feaf 	bl	80011a0 <__aeabi_fcmpun>
 800d442:	b968      	cbnz	r0, 800d460 <sqrtf+0x30>
 800d444:	2100      	movs	r1, #0
 800d446:	4628      	mov	r0, r5
 800d448:	f7f3 fe82 	bl	8001150 <__aeabi_fcmplt>
 800d44c:	b140      	cbz	r0, 800d460 <sqrtf+0x30>
 800d44e:	f7ff ff9f 	bl	800d390 <__errno>
 800d452:	2321      	movs	r3, #33	@ 0x21
 800d454:	2100      	movs	r1, #0
 800d456:	6003      	str	r3, [r0, #0]
 800d458:	4608      	mov	r0, r1
 800d45a:	f7f3 fd8f 	bl	8000f7c <__aeabi_fdiv>
 800d45e:	4604      	mov	r4, r0
 800d460:	4620      	mov	r0, r4
 800d462:	bd38      	pop	{r3, r4, r5, pc}

0800d464 <__ieee754_sqrt>:
 800d464:	4a67      	ldr	r2, [pc, #412]	@ (800d604 <__ieee754_sqrt+0x1a0>)
 800d466:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46a:	438a      	bics	r2, r1
 800d46c:	4606      	mov	r6, r0
 800d46e:	460f      	mov	r7, r1
 800d470:	460b      	mov	r3, r1
 800d472:	4604      	mov	r4, r0
 800d474:	d10e      	bne.n	800d494 <__ieee754_sqrt+0x30>
 800d476:	4602      	mov	r2, r0
 800d478:	f7f3 f896 	bl	80005a8 <__aeabi_dmul>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f2 feda 	bl	800023c <__adddf3>
 800d488:	4606      	mov	r6, r0
 800d48a:	460f      	mov	r7, r1
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	2900      	cmp	r1, #0
 800d496:	dc0c      	bgt.n	800d4b2 <__ieee754_sqrt+0x4e>
 800d498:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800d49c:	4302      	orrs	r2, r0
 800d49e:	d0f5      	beq.n	800d48c <__ieee754_sqrt+0x28>
 800d4a0:	b189      	cbz	r1, 800d4c6 <__ieee754_sqrt+0x62>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	f7f2 fec8 	bl	8000238 <__aeabi_dsub>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	f7f3 f9a6 	bl	80007fc <__aeabi_ddiv>
 800d4b0:	e7ea      	b.n	800d488 <__ieee754_sqrt+0x24>
 800d4b2:	150a      	asrs	r2, r1, #20
 800d4b4:	d115      	bne.n	800d4e2 <__ieee754_sqrt+0x7e>
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	e009      	b.n	800d4ce <__ieee754_sqrt+0x6a>
 800d4ba:	0ae3      	lsrs	r3, r4, #11
 800d4bc:	3a15      	subs	r2, #21
 800d4be:	0564      	lsls	r4, r4, #21
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d0fa      	beq.n	800d4ba <__ieee754_sqrt+0x56>
 800d4c4:	e7f7      	b.n	800d4b6 <__ieee754_sqrt+0x52>
 800d4c6:	460a      	mov	r2, r1
 800d4c8:	e7fa      	b.n	800d4c0 <__ieee754_sqrt+0x5c>
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	3101      	adds	r1, #1
 800d4ce:	02d8      	lsls	r0, r3, #11
 800d4d0:	d5fb      	bpl.n	800d4ca <__ieee754_sqrt+0x66>
 800d4d2:	1e48      	subs	r0, r1, #1
 800d4d4:	1a12      	subs	r2, r2, r0
 800d4d6:	f1c1 0020 	rsb	r0, r1, #32
 800d4da:	fa24 f000 	lsr.w	r0, r4, r0
 800d4de:	4303      	orrs	r3, r0
 800d4e0:	408c      	lsls	r4, r1
 800d4e2:	2600      	movs	r6, #0
 800d4e4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800d4e8:	2116      	movs	r1, #22
 800d4ea:	07d2      	lsls	r2, r2, #31
 800d4ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d4f0:	4632      	mov	r2, r6
 800d4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4fa:	bf5c      	itt	pl
 800d4fc:	005b      	lslpl	r3, r3, #1
 800d4fe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d502:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d506:	bf58      	it	pl
 800d508:	0064      	lslpl	r4, r4, #1
 800d50a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d50e:	107f      	asrs	r7, r7, #1
 800d510:	0064      	lsls	r4, r4, #1
 800d512:	1815      	adds	r5, r2, r0
 800d514:	429d      	cmp	r5, r3
 800d516:	bfde      	ittt	le
 800d518:	182a      	addle	r2, r5, r0
 800d51a:	1b5b      	suble	r3, r3, r5
 800d51c:	1836      	addle	r6, r6, r0
 800d51e:	0fe5      	lsrs	r5, r4, #31
 800d520:	3901      	subs	r1, #1
 800d522:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800d526:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d52a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d52e:	d1f0      	bne.n	800d512 <__ieee754_sqrt+0xae>
 800d530:	460d      	mov	r5, r1
 800d532:	f04f 0a20 	mov.w	sl, #32
 800d536:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d53a:	429a      	cmp	r2, r3
 800d53c:	eb01 0c00 	add.w	ip, r1, r0
 800d540:	db02      	blt.n	800d548 <__ieee754_sqrt+0xe4>
 800d542:	d113      	bne.n	800d56c <__ieee754_sqrt+0x108>
 800d544:	45a4      	cmp	ip, r4
 800d546:	d811      	bhi.n	800d56c <__ieee754_sqrt+0x108>
 800d548:	f1bc 0f00 	cmp.w	ip, #0
 800d54c:	eb0c 0100 	add.w	r1, ip, r0
 800d550:	da42      	bge.n	800d5d8 <__ieee754_sqrt+0x174>
 800d552:	2900      	cmp	r1, #0
 800d554:	db40      	blt.n	800d5d8 <__ieee754_sqrt+0x174>
 800d556:	f102 0e01 	add.w	lr, r2, #1
 800d55a:	1a9b      	subs	r3, r3, r2
 800d55c:	4672      	mov	r2, lr
 800d55e:	45a4      	cmp	ip, r4
 800d560:	bf88      	it	hi
 800d562:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d566:	eba4 040c 	sub.w	r4, r4, ip
 800d56a:	4405      	add	r5, r0
 800d56c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800d570:	f1ba 0a01 	subs.w	sl, sl, #1
 800d574:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800d578:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d57c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d580:	d1db      	bne.n	800d53a <__ieee754_sqrt+0xd6>
 800d582:	431c      	orrs	r4, r3
 800d584:	d01a      	beq.n	800d5bc <__ieee754_sqrt+0x158>
 800d586:	4c20      	ldr	r4, [pc, #128]	@ (800d608 <__ieee754_sqrt+0x1a4>)
 800d588:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800d60c <__ieee754_sqrt+0x1a8>
 800d58c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d590:	e9db 2300 	ldrd	r2, r3, [fp]
 800d594:	f7f2 fe50 	bl	8000238 <__aeabi_dsub>
 800d598:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	f7f3 fa7c 	bl	8000aa0 <__aeabi_dcmple>
 800d5a8:	b140      	cbz	r0, 800d5bc <__ieee754_sqrt+0x158>
 800d5aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d5ae:	e9db 2300 	ldrd	r2, r3, [fp]
 800d5b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d5b6:	d111      	bne.n	800d5dc <__ieee754_sqrt+0x178>
 800d5b8:	4655      	mov	r5, sl
 800d5ba:	3601      	adds	r6, #1
 800d5bc:	1072      	asrs	r2, r6, #1
 800d5be:	086b      	lsrs	r3, r5, #1
 800d5c0:	07f1      	lsls	r1, r6, #31
 800d5c2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d5c6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d5ca:	bf48      	it	mi
 800d5cc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800d5d6:	e757      	b.n	800d488 <__ieee754_sqrt+0x24>
 800d5d8:	4696      	mov	lr, r2
 800d5da:	e7be      	b.n	800d55a <__ieee754_sqrt+0xf6>
 800d5dc:	f7f2 fe2e 	bl	800023c <__adddf3>
 800d5e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	4649      	mov	r1, r9
 800d5ec:	f7f3 fa4e 	bl	8000a8c <__aeabi_dcmplt>
 800d5f0:	b120      	cbz	r0, 800d5fc <__ieee754_sqrt+0x198>
 800d5f2:	1ca8      	adds	r0, r5, #2
 800d5f4:	bf08      	it	eq
 800d5f6:	3601      	addeq	r6, #1
 800d5f8:	3502      	adds	r5, #2
 800d5fa:	e7df      	b.n	800d5bc <__ieee754_sqrt+0x158>
 800d5fc:	1c6b      	adds	r3, r5, #1
 800d5fe:	f023 0501 	bic.w	r5, r3, #1
 800d602:	e7db      	b.n	800d5bc <__ieee754_sqrt+0x158>
 800d604:	7ff00000 	.word	0x7ff00000
 800d608:	20000090 	.word	0x20000090
 800d60c:	20000088 	.word	0x20000088

0800d610 <__ieee754_sqrtf>:
 800d610:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800d614:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d61c:	4603      	mov	r3, r0
 800d61e:	4604      	mov	r4, r0
 800d620:	d30a      	bcc.n	800d638 <__ieee754_sqrtf+0x28>
 800d622:	4601      	mov	r1, r0
 800d624:	f7f3 fbf6 	bl	8000e14 <__aeabi_fmul>
 800d628:	4601      	mov	r1, r0
 800d62a:	4620      	mov	r0, r4
 800d62c:	f7f3 faea 	bl	8000c04 <__addsf3>
 800d630:	4604      	mov	r4, r0
 800d632:	4620      	mov	r0, r4
 800d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d638:	2a00      	cmp	r2, #0
 800d63a:	d0fa      	beq.n	800d632 <__ieee754_sqrtf+0x22>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	da06      	bge.n	800d64e <__ieee754_sqrtf+0x3e>
 800d640:	4601      	mov	r1, r0
 800d642:	f7f3 fadd 	bl	8000c00 <__aeabi_fsub>
 800d646:	4601      	mov	r1, r0
 800d648:	f7f3 fc98 	bl	8000f7c <__aeabi_fdiv>
 800d64c:	e7f0      	b.n	800d630 <__ieee754_sqrtf+0x20>
 800d64e:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800d652:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d656:	d03e      	beq.n	800d6d6 <__ieee754_sqrtf+0xc6>
 800d658:	2400      	movs	r4, #0
 800d65a:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800d65e:	07ca      	lsls	r2, r1, #31
 800d660:	f04f 0019 	mov.w	r0, #25
 800d664:	4626      	mov	r6, r4
 800d666:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800d66a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d66e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d672:	bf58      	it	pl
 800d674:	005b      	lslpl	r3, r3, #1
 800d676:	106d      	asrs	r5, r5, #1
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	1872      	adds	r2, r6, r1
 800d67c:	429a      	cmp	r2, r3
 800d67e:	bfcf      	iteee	gt
 800d680:	461a      	movgt	r2, r3
 800d682:	1856      	addle	r6, r2, r1
 800d684:	1864      	addle	r4, r4, r1
 800d686:	1a9a      	suble	r2, r3, r2
 800d688:	3801      	subs	r0, #1
 800d68a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800d68e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d692:	d1f2      	bne.n	800d67a <__ieee754_sqrtf+0x6a>
 800d694:	b1ba      	cbz	r2, 800d6c6 <__ieee754_sqrtf+0xb6>
 800d696:	4e14      	ldr	r6, [pc, #80]	@ (800d6e8 <__ieee754_sqrtf+0xd8>)
 800d698:	4f14      	ldr	r7, [pc, #80]	@ (800d6ec <__ieee754_sqrtf+0xdc>)
 800d69a:	6830      	ldr	r0, [r6, #0]
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	f7f3 faaf 	bl	8000c00 <__aeabi_fsub>
 800d6a2:	f8d6 8000 	ldr.w	r8, [r6]
 800d6a6:	4601      	mov	r1, r0
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	f7f3 fd5b 	bl	8001164 <__aeabi_fcmple>
 800d6ae:	b150      	cbz	r0, 800d6c6 <__ieee754_sqrtf+0xb6>
 800d6b0:	6830      	ldr	r0, [r6, #0]
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	f7f3 faa6 	bl	8000c04 <__addsf3>
 800d6b8:	6836      	ldr	r6, [r6, #0]
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7f3 fd47 	bl	8001150 <__aeabi_fcmplt>
 800d6c2:	b168      	cbz	r0, 800d6e0 <__ieee754_sqrtf+0xd0>
 800d6c4:	3402      	adds	r4, #2
 800d6c6:	1064      	asrs	r4, r4, #1
 800d6c8:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800d6cc:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800d6d0:	e7af      	b.n	800d632 <__ieee754_sqrtf+0x22>
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	3201      	adds	r2, #1
 800d6d6:	0218      	lsls	r0, r3, #8
 800d6d8:	d5fb      	bpl.n	800d6d2 <__ieee754_sqrtf+0xc2>
 800d6da:	3a01      	subs	r2, #1
 800d6dc:	1a89      	subs	r1, r1, r2
 800d6de:	e7bb      	b.n	800d658 <__ieee754_sqrtf+0x48>
 800d6e0:	3401      	adds	r4, #1
 800d6e2:	f024 0401 	bic.w	r4, r4, #1
 800d6e6:	e7ee      	b.n	800d6c6 <__ieee754_sqrtf+0xb6>
 800d6e8:	2000009c 	.word	0x2000009c
 800d6ec:	20000098 	.word	0x20000098

0800d6f0 <_init>:
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	bf00      	nop
 800d6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f6:	bc08      	pop	{r3}
 800d6f8:	469e      	mov	lr, r3
 800d6fa:	4770      	bx	lr

0800d6fc <_fini>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	bf00      	nop
 800d700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d702:	bc08      	pop	{r3}
 800d704:	469e      	mov	lr, r3
 800d706:	4770      	bx	lr
