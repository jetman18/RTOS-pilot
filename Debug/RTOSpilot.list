
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08011578  08011578  00021578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c48  08011c48  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  08011c48  08011c48  00021c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c50  08011c50  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c50  08011c50  00021c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c54  08011c54  00021c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08011c58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030134  2**0
                  CONTENTS
 10 .bss          00004d38  20000134  20000134  00030134  2**2
                  ALLOC
 11 ._user_heap_stack 00003004  20004e6c  20004e6c  00030134  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b70a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074e3  00000000  00000000  0006b86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002228  00000000  00000000  00072d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f78  00000000  00000000  00074f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c05b  00000000  00000000  00076ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031809  00000000  00000000  00082f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104f5a  00000000  00000000  000b475c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b96b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000949c  00000000  00000000  001b970c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000134 	.word	0x20000134
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801155c 	.word	0x0801155c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000138 	.word	0x20000138
 80001cc:	0801155c 	.word	0x0801155c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <ibus_init+0x54>)
 8000e9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e9e:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <ibus_init+0x54>)
 8000ea2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ea6:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e008      	b.n	8000ec0 <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <ibus_init+0x54>)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b0d      	cmp	r3, #13
 8000ec4:	ddf3      	ble.n	8000eae <ibus_init+0x1e>
    }
	uart = uartt;
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <ibus_init+0x58>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <ibus_init+0x58>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4906      	ldr	r1, [pc, #24]	; (8000eec <ibus_init+0x5c>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 f80a 	bl	8007eee <HAL_UART_Receive_IT>
#endif
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000401c 	.word	0x2000401c
 8000ee8:	20000178 	.word	0x20000178
 8000eec:	20000174 	.word	0x20000174

08000ef0 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <ibus_calback+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f80d 	bl	8000f18 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <ibus_calback+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4902      	ldr	r1, [pc, #8]	; (8000f10 <ibus_calback+0x20>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 fff1 	bl	8007eee <HAL_UART_Receive_IT>
#endif

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000174 	.word	0x20000174
 8000f14:	20000178 	.word	0x20000178

08000f18 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <ibusDataReceive+0x78>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <ibusDataReceive+0x7c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <ibusDataReceive+0x80>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d902      	bls.n	8000f46 <ibusDataReceive+0x2e>
        ibusFramePosition = 0;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <ibusDataReceive+0x84>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <ibusDataReceive+0x80>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <ibusDataReceive+0x84>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <ibusDataReceive+0x42>
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d114      	bne.n	8000f84 <ibusDataReceive+0x6c>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <ibusDataReceive+0x84>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <ibusDataReceive+0x88>)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <ibusDataReceive+0x84>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b1f      	cmp	r3, #31
 8000f6c:	d103      	bne.n	8000f76 <ibusDataReceive+0x5e>
        ibusFrameDone = TRUE;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <ibusDataReceive+0x8c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e007      	b.n	8000f86 <ibusDataReceive+0x6e>
    } else {
        ibusFramePosition++;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <ibusDataReceive+0x84>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <ibusDataReceive+0x84>)
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e000      	b.n	8000f86 <ibusDataReceive+0x6e>
        return;
 8000f84:	bf00      	nop
    }
}
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	20004684 	.word	0x20004684
 8000f94:	20004428 	.word	0x20004428
 8000f98:	2000017c 	.word	0x2000017c
 8000f9c:	20000180 	.word	0x20000180
 8000fa0:	20000154 	.word	0x20000154
 8000fa4:	20000150 	.word	0x20000150

08000fa8 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 8000fae:	4b64      	ldr	r3, [pc, #400]	; (8001140 <ibusFrameComplete+0x198>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80bc 	beq.w	8001130 <ibusFrameComplete+0x188>
        ibusFrameDone = FALSE;
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <ibusFrameComplete+0x198>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 8000fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc2:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e009      	b.n	8000fde <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4a5d      	ldr	r2, [pc, #372]	; (8001144 <ibusFrameComplete+0x19c>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	89ba      	ldrh	r2, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b1d      	cmp	r3, #29
 8000fe2:	d9f2      	bls.n	8000fca <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8000fe4:	4b57      	ldr	r3, [pc, #348]	; (8001144 <ibusFrameComplete+0x19c>)
 8000fe6:	7f9b      	ldrb	r3, [r3, #30]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b56      	ldr	r3, [pc, #344]	; (8001144 <ibusFrameComplete+0x19c>)
 8000fec:	7fdb      	ldrb	r3, [r3, #31]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8000ff8:	89ba      	ldrh	r2, [r7, #12]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 8097 	bne.w	8001130 <ibusFrameComplete+0x188>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <ibusFrameComplete+0x19c>)
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <ibusFrameComplete+0x19c>)
 800100a:	7892      	ldrb	r2, [r2, #2]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001012:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8001014:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <ibusFrameComplete+0x19c>)
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <ibusFrameComplete+0x19c>)
 800101c:	7912      	ldrb	r2, [r2, #4]
 800101e:	4413      	add	r3, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001024:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <ibusFrameComplete+0x19c>)
 8001028:	79db      	ldrb	r3, [r3, #7]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	4a45      	ldr	r2, [pc, #276]	; (8001144 <ibusFrameComplete+0x19c>)
 800102e:	7992      	ldrb	r2, [r2, #6]
 8001030:	4413      	add	r3, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4b44      	ldr	r3, [pc, #272]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001036:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001038:	4b42      	ldr	r3, [pc, #264]	; (8001144 <ibusFrameComplete+0x19c>)
 800103a:	7a5b      	ldrb	r3, [r3, #9]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4a41      	ldr	r2, [pc, #260]	; (8001144 <ibusFrameComplete+0x19c>)
 8001040:	7a12      	ldrb	r2, [r2, #8]
 8001042:	4413      	add	r3, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4b40      	ldr	r3, [pc, #256]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001048:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <ibusFrameComplete+0x19c>)
 800104c:	7adb      	ldrb	r3, [r3, #11]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4a3c      	ldr	r2, [pc, #240]	; (8001144 <ibusFrameComplete+0x19c>)
 8001052:	7a92      	ldrb	r2, [r2, #10]
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <ibusFrameComplete+0x1a0>)
 800105a:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <ibusFrameComplete+0x19c>)
 800105e:	7b5b      	ldrb	r3, [r3, #13]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <ibusFrameComplete+0x19c>)
 8001064:	7b12      	ldrb	r2, [r2, #12]
 8001066:	4413      	add	r3, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <ibusFrameComplete+0x1a0>)
 800106c:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <ibusFrameComplete+0x19c>)
 8001070:	7bdb      	ldrb	r3, [r3, #15]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	4a33      	ldr	r2, [pc, #204]	; (8001144 <ibusFrameComplete+0x19c>)
 8001076:	7b92      	ldrb	r2, [r2, #14]
 8001078:	4413      	add	r3, r2
 800107a:	461a      	mov	r2, r3
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <ibusFrameComplete+0x1a0>)
 800107e:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <ibusFrameComplete+0x19c>)
 8001082:	7c5b      	ldrb	r3, [r3, #17]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <ibusFrameComplete+0x19c>)
 8001088:	7c12      	ldrb	r2, [r2, #16]
 800108a:	4413      	add	r3, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001090:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <ibusFrameComplete+0x19c>)
 8001094:	7cdb      	ldrb	r3, [r3, #19]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <ibusFrameComplete+0x19c>)
 800109a:	7c92      	ldrb	r2, [r2, #18]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <ibusFrameComplete+0x1a0>)
 80010a2:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <ibusFrameComplete+0x19c>)
 80010a6:	7d5b      	ldrb	r3, [r3, #21]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <ibusFrameComplete+0x19c>)
 80010ac:	7d12      	ldrb	r2, [r2, #20]
 80010ae:	4413      	add	r3, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <ibusFrameComplete+0x1a0>)
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <ibusFrameComplete+0x19c>)
 80010b8:	7ddb      	ldrb	r3, [r3, #23]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <ibusFrameComplete+0x19c>)
 80010be:	7d92      	ldrb	r2, [r2, #22]
 80010c0:	4413      	add	r3, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <ibusFrameComplete+0x1a0>)
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <ibusFrameComplete+0x19c>)
 80010ca:	7e5b      	ldrb	r3, [r3, #25]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <ibusFrameComplete+0x19c>)
 80010d0:	7e12      	ldrb	r2, [r2, #24]
 80010d2:	4413      	add	r3, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <ibusFrameComplete+0x1a0>)
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <ibusFrameComplete+0x19c>)
 80010dc:	7edb      	ldrb	r3, [r3, #27]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <ibusFrameComplete+0x19c>)
 80010e2:	7e92      	ldrb	r2, [r2, #26]
 80010e4:	4413      	add	r3, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <ibusFrameComplete+0x1a0>)
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <ibusFrameComplete+0x19c>)
 80010ee:	7f5b      	ldrb	r3, [r3, #29]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <ibusFrameComplete+0x19c>)
 80010f4:	7f12      	ldrb	r2, [r2, #28]
 80010f6:	4413      	add	r3, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <ibusFrameComplete+0x1a0>)
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	e010      	b.n	8001126 <ibusFrameComplete+0x17e>
			    if(ibusChannelData[i] > 2100){
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	f640 0234 	movw	r2, #2100	; 0x834
 8001110:	4293      	cmp	r3, r2
 8001112:	d905      	bls.n	8001120 <ibusFrameComplete+0x178>
				    ibusChannelData[i] = 1000;
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <ibusFrameComplete+0x1a0>)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800111c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	3301      	adds	r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b0d      	cmp	r3, #13
 800112a:	ddeb      	ble.n	8001104 <ibusFrameComplete+0x15c>
				}
			}
            return TRUE;
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <ibusFrameComplete+0x18a>
        }
    }
    return FALSE;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000150 	.word	0x20000150
 8001144:	20000154 	.word	0x20000154
 8001148:	2000401c 	.word	0x2000401c

0800114c <dynamic_control>:
static float ctrl_right = 0;

sim_attitude arrow;

void dynamic_control(uint16_t thrust,uint16_t servoL,uint16_t servoR)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
 8001156:	460b      	mov	r3, r1
 8001158:	80bb      	strh	r3, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	807b      	strh	r3, [r7, #2]
    ctrl_left  = (servoL - 1500)/500.0f;
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80011c8 <dynamic_control+0x7c>
 8001170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <dynamic_control+0x80>)
 8001176:	edc3 7a00 	vstr	s15, [r3]
    ctrl_right = (servoR - 1500)/500.0f;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80011c8 <dynamic_control+0x7c>
 800118c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <dynamic_control+0x84>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
    T = T_max*(thrust - 1000)/1000.0f;
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <dynamic_control+0x88>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ae:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80011d8 <dynamic_control+0x8c>
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <dynamic_control+0x90>)
 80011b8:	edc3 7a00 	vstr	s15, [r3]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	43fa0000 	.word	0x43fa0000
 80011cc:	200001b4 	.word	0x200001b4
 80011d0:	200001b8 	.word	0x200001b8
 80011d4:	2000006c 	.word	0x2000006c
 80011d8:	447a0000 	.word	0x447a0000
 80011dc:	200001b0 	.word	0x200001b0

080011e0 <dynamic_loop>:

void dynamic_loop(float Dt){
 80011e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e4:	ed2d 8b02 	vpush	{d8}
 80011e8:	b0b6      	sub	sp, #216	; 0xd8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	ed87 0a01 	vstr	s0, [r7, #4]
    if(pre_run){
 80011f0:	4bc5      	ldr	r3, [pc, #788]	; (8001508 <dynamic_loop+0x328>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d034      	beq.n	8001262 <dynamic_loop+0x82>
        vex = 0, vey = 0,vez = 0;
 80011f8:	4bc4      	ldr	r3, [pc, #784]	; (800150c <dynamic_loop+0x32c>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	4bc3      	ldr	r3, [pc, #780]	; (8001510 <dynamic_loop+0x330>)
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	4bc2      	ldr	r3, [pc, #776]	; (8001514 <dynamic_loop+0x334>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
        pex = 0, pey = 0,pez = 0;
 8001210:	4bc1      	ldr	r3, [pc, #772]	; (8001518 <dynamic_loop+0x338>)
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	4bc0      	ldr	r3, [pc, #768]	; (800151c <dynamic_loop+0x33c>)
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	4bbf      	ldr	r3, [pc, #764]	; (8001520 <dynamic_loop+0x340>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
        P   = 0, Q   = 0, R = 0;
 8001228:	4bbe      	ldr	r3, [pc, #760]	; (8001524 <dynamic_loop+0x344>)
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4bbd      	ldr	r3, [pc, #756]	; (8001528 <dynamic_loop+0x348>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	4bbc      	ldr	r3, [pc, #752]	; (800152c <dynamic_loop+0x34c>)
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
        alpha = 0, beta = 0;
 8001240:	4bbb      	ldr	r3, [pc, #748]	; (8001530 <dynamic_loop+0x350>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	4bba      	ldr	r3, [pc, #744]	; (8001534 <dynamic_loop+0x354>)
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
        T    = 0;
 8001250:	4bb9      	ldr	r3, [pc, #740]	; (8001538 <dynamic_loop+0x358>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
        pre_run = 0;
 8001258:	4bab      	ldr	r3, [pc, #684]	; (8001508 <dynamic_loop+0x328>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
        return;
 800125e:	f001 b8d4 	b.w	800240a <dynamic_loop+0x122a>
    }
    float cosx = cos_approx(roll);
 8001262:	4bb6      	ldr	r3, [pc, #728]	; (800153c <dynamic_loop+0x35c>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f001 fbda 	bl	8002a24 <cos_approx>
 8001270:	ed87 0a33 	vstr	s0, [r7, #204]	; 0xcc
    float cosy = cos_approx(pitch);
 8001274:	4bb2      	ldr	r3, [pc, #712]	; (8001540 <dynamic_loop+0x360>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	f001 fbd1 	bl	8002a24 <cos_approx>
 8001282:	ed87 0a32 	vstr	s0, [r7, #200]	; 0xc8
    float cosz = cos_approx(yaw);
 8001286:	4baf      	ldr	r3, [pc, #700]	; (8001544 <dynamic_loop+0x364>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f001 fbc8 	bl	8002a24 <cos_approx>
 8001294:	ed87 0a31 	vstr	s0, [r7, #196]	; 0xc4
    float sinx = sin_approx(roll);
 8001298:	4ba8      	ldr	r3, [pc, #672]	; (800153c <dynamic_loop+0x35c>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f001 fb15 	bl	80028d0 <sin_approx>
 80012a6:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
    float siny = sin_approx(pitch);
 80012aa:	4ba5      	ldr	r3, [pc, #660]	; (8001540 <dynamic_loop+0x360>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	f001 fb0c 	bl	80028d0 <sin_approx>
 80012b8:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
    float sinz = sin_approx(yaw);
 80012bc:	4ba1      	ldr	r3, [pc, #644]	; (8001544 <dynamic_loop+0x364>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	f001 fb03 	bl	80028d0 <sin_approx>
 80012ca:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
    float tany = tan_approx(pitch);
 80012ce:	4b9c      	ldr	r3, [pc, #624]	; (8001540 <dynamic_loop+0x360>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f001 fafa 	bl	80028d0 <sin_approx>
 80012dc:	eeb0 8a40 	vmov.f32	s16, s0
 80012e0:	4b97      	ldr	r3, [pc, #604]	; (8001540 <dynamic_loop+0x360>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	f001 fb9b 	bl	8002a24 <cos_approx>
 80012ee:	eeb0 7a40 	vmov.f32	s14, s0
 80012f2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80012f6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

    // alpha
    float v_horizon = sqrt(vex*vex + vey*vey);
 80012fa:	4b84      	ldr	r3, [pc, #528]	; (800150c <dynamic_loop+0x32c>)
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	4b82      	ldr	r3, [pc, #520]	; (800150c <dynamic_loop+0x32c>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130a:	4b81      	ldr	r3, [pc, #516]	; (8001510 <dynamic_loop+0x330>)
 800130c:	edd3 6a00 	vldr	s13, [r3]
 8001310:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <dynamic_loop+0x330>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	ee17 0a90 	vmov	r0, s15
 8001322:	f7ff f8b9 	bl	8000498 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ec43 2b10 	vmov	d0, r2, r3
 800132e:	f00e ff45 	bl	80101bc <sqrt>
 8001332:	ec53 2b10 	vmov	r2, r3, d0
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fbdd 	bl	8000af8 <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    float temp_a = atan2_approx(vez,v_horizon)*toDeg;
 8001344:	4b73      	ldr	r3, [pc, #460]	; (8001514 <dynamic_loop+0x334>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f001 fb7f 	bl	8002a54 <atan2_approx>
 8001356:	eeb0 7a40 	vmov.f32	s14, s0
 800135a:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <dynamic_loop+0x368>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001364:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    temp_a =  pitch*toDeg - temp_a;
 8001368:	4b75      	ldr	r3, [pc, #468]	; (8001540 <dynamic_loop+0x360>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4b76      	ldr	r3, [pc, #472]	; (8001548 <dynamic_loop+0x368>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001378:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

    // beta
    float temp_beta  = abs(atan2(vey,vex)*toDeg);
 8001384:	4b62      	ldr	r3, [pc, #392]	; (8001510 <dynamic_loop+0x330>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f885 	bl	8000498 <__aeabi_f2d>
 800138e:	4680      	mov	r8, r0
 8001390:	4689      	mov	r9, r1
 8001392:	4b5e      	ldr	r3, [pc, #376]	; (800150c <dynamic_loop+0x32c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f87e 	bl	8000498 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b11 	vmov	d1, r2, r3
 80013a4:	ec49 8b10 	vmov	d0, r8, r9
 80013a8:	f00e fe58 	bl	801005c <atan2>
 80013ac:	ec59 8b10 	vmov	r8, r9, d0
 80013b0:	4b65      	ldr	r3, [pc, #404]	; (8001548 <dynamic_loop+0x368>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f86f 	bl	8000498 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f7ff fb47 	bl	8000a68 <__aeabi_dcmpgt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d025      	beq.n	800142c <dynamic_loop+0x24c>
 80013e0:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <dynamic_loop+0x330>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f857 	bl	8000498 <__aeabi_f2d>
 80013ea:	4604      	mov	r4, r0
 80013ec:	460d      	mov	r5, r1
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <dynamic_loop+0x32c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f850 	bl	8000498 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	ec43 2b11 	vmov	d1, r2, r3
 8001400:	ec45 4b10 	vmov	d0, r4, r5
 8001404:	f00e fe2a 	bl	801005c <atan2>
 8001408:	ec55 4b10 	vmov	r4, r5, d0
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <dynamic_loop+0x368>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f841 	bl	8000498 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7ff f893 	bl	8000548 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4614      	mov	r4, r2
 8001428:	461d      	mov	r5, r3
 800142a:	e025      	b.n	8001478 <dynamic_loop+0x298>
 800142c:	4b38      	ldr	r3, [pc, #224]	; (8001510 <dynamic_loop+0x330>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f831 	bl	8000498 <__aeabi_f2d>
 8001436:	4680      	mov	r8, r0
 8001438:	4689      	mov	r9, r1
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <dynamic_loop+0x32c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f82a 	bl	8000498 <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	ec43 2b11 	vmov	d1, r2, r3
 800144c:	ec49 8b10 	vmov	d0, r8, r9
 8001450:	f00e fe04 	bl	801005c <atan2>
 8001454:	ec59 8b10 	vmov	r8, r9, d0
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <dynamic_loop+0x368>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f81b 	bl	8000498 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4640      	mov	r0, r8
 8001468:	4649      	mov	r1, r9
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4614      	mov	r4, r2
 8001474:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7ff fb3c 	bl	8000af8 <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    float beta_t = 0;
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if  (vey >= 0)
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <dynamic_loop+0x330>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	db04      	blt.n	80014a8 <dynamic_loop+0x2c8>
        beta_t = temp_beta;
 800149e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80014a6:	e00f      	b.n	80014c8 <dynamic_loop+0x2e8>
    else if  (vey <= 0)
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <dynamic_loop+0x330>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d807      	bhi.n	80014c8 <dynamic_loop+0x2e8>
        beta_t = 360 - temp_beta;
 80014b8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001554 <dynamic_loop+0x374>
 80014bc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80014c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c4:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
    beta_t = yaw*toDeg - beta_t;  // beta 0 - 359
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <dynamic_loop+0x364>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <dynamic_loop+0x368>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4

    if (beta_t < -180)
 80014e4:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014e8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800154c <dynamic_loop+0x36c>
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d530      	bpl.n	8001558 <dynamic_loop+0x378>
        beta_t = beta_t + 360;
 80014f6:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014fa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001554 <dynamic_loop+0x374>
 80014fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001502:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
 8001506:	e038      	b.n	800157a <dynamic_loop+0x39a>
 8001508:	20000064 	.word	0x20000064
 800150c:	2000018c 	.word	0x2000018c
 8001510:	20000190 	.word	0x20000190
 8001514:	20000194 	.word	0x20000194
 8001518:	20000198 	.word	0x20000198
 800151c:	2000019c 	.word	0x2000019c
 8001520:	200001a0 	.word	0x200001a0
 8001524:	200001a4 	.word	0x200001a4
 8001528:	200001a8 	.word	0x200001a8
 800152c:	200001ac 	.word	0x200001ac
 8001530:	20004080 	.word	0x20004080
 8001534:	2000407c 	.word	0x2000407c
 8001538:	200001b0 	.word	0x200001b0
 800153c:	20000184 	.word	0x20000184
 8001540:	20000188 	.word	0x20000188
 8001544:	20000068 	.word	0x20000068
 8001548:	20000008 	.word	0x20000008
 800154c:	c3340000 	.word	0xc3340000
 8001550:	43340000 	.word	0x43340000
 8001554:	43b40000 	.word	0x43b40000
    else if (beta_t > 180)
 8001558:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800155c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8001550 <dynamic_loop+0x370>
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	dd07      	ble.n	800157a <dynamic_loop+0x39a>
        beta_t = beta_t - 360;
 800156a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800156e:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8001554 <dynamic_loop+0x374>
 8001572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001576:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4

    alpha =  temp_a*cosx + beta_t*sinx;
 800157a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800157e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001586:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 800158a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <dynamic_loop+0x3f8>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
    beta  = -temp_a*sinx + beta_t*cosx;
 800159c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80015a0:	eeb1 7a67 	vneg.f32	s14, s15
 80015a4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80015a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ac:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 80015b0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80015b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <dynamic_loop+0x3fc>)
 80015be:	edc3 7a00 	vstr	s15, [r3]

    float Cd = (pow(abs(alpha),3.7)/125 + alpha)*3/3625 + Cd_o;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <dynamic_loop+0x3f8>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd06      	ble.n	80015e0 <dynamic_loop+0x400>
 80015d2:	4b01      	ldr	r3, [pc, #4]	; (80015d8 <dynamic_loop+0x3f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	e00a      	b.n	80015ee <dynamic_loop+0x40e>
 80015d8:	20004080 	.word	0x20004080
 80015dc:	2000407c 	.word	0x2000407c
 80015e0:	4be3      	ldr	r3, [pc, #908]	; (8001970 <dynamic_loop+0x790>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eef1 7a67 	vneg.f32	s15, s15
 80015ea:	ee17 3a90 	vmov	r3, s15
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff52 	bl	8000498 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	ed9f 1bd7 	vldr	d1, [pc, #860]	; 8001958 <dynamic_loop+0x778>
 80015fc:	ec43 2b10 	vmov	d0, r2, r3
 8001600:	f00e fd2e 	bl	8010060 <pow>
 8001604:	ec51 0b10 	vmov	r0, r1, d0
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4bd9      	ldr	r3, [pc, #868]	; (8001974 <dynamic_loop+0x794>)
 800160e:	f7ff f8c5 	bl	800079c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4614      	mov	r4, r2
 8001618:	461d      	mov	r5, r3
 800161a:	4bd5      	ldr	r3, [pc, #852]	; (8001970 <dynamic_loop+0x790>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff3a 	bl	8000498 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fdd6 	bl	80001dc <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4bce      	ldr	r3, [pc, #824]	; (8001978 <dynamic_loop+0x798>)
 800163e:	f7fe ff83 	bl	8000548 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a3c5      	add	r3, pc, #788	; (adr r3, 8001960 <dynamic_loop+0x780>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f8a4 	bl	800079c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	4bc7      	ldr	r3, [pc, #796]	; (800197c <dynamic_loop+0x79c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff19 	bl	8000498 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7fe fdb5 	bl	80001dc <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa3d 	bl	8000af8 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float Cl = 0.01*alpha + Cl_0;
 8001684:	4bba      	ldr	r3, [pc, #744]	; (8001970 <dynamic_loop+0x790>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff05 	bl	8000498 <__aeabi_f2d>
 800168e:	a3b6      	add	r3, pc, #728	; (adr r3, 8001968 <dynamic_loop+0x788>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe ff58 	bl	8000548 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	461d      	mov	r5, r3
 80016a0:	4bb7      	ldr	r3, [pc, #732]	; (8001980 <dynamic_loop+0x7a0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fef7 	bl	8000498 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fd93 	bl	80001dc <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa1b 	bl	8000af8 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float Cl_rudder = 0.01*beta;
 80016c8:	4bae      	ldr	r3, [pc, #696]	; (8001984 <dynamic_loop+0x7a4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fee3 	bl	8000498 <__aeabi_f2d>
 80016d2:	a3a5      	add	r3, pc, #660	; (adr r3, 8001968 <dynamic_loop+0x788>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa08 	bl	8000af8 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    //Cl = constrainf(Cl,-1.3,1.3);

    // absolute velocity
    float Vsqr = vex*vex + vey*vey + vez*vez;
 80016ee:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <dynamic_loop+0x7a8>)
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	4ba4      	ldr	r3, [pc, #656]	; (8001988 <dynamic_loop+0x7a8>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fe:	4ba3      	ldr	r3, [pc, #652]	; (800198c <dynamic_loop+0x7ac>)
 8001700:	edd3 6a00 	vldr	s13, [r3]
 8001704:	4ba1      	ldr	r3, [pc, #644]	; (800198c <dynamic_loop+0x7ac>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001712:	4b9f      	ldr	r3, [pc, #636]	; (8001990 <dynamic_loop+0x7b0>)
 8001714:	edd3 6a00 	vldr	s13, [r3]
 8001718:	4b9d      	ldr	r3, [pc, #628]	; (8001990 <dynamic_loop+0x7b0>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001726:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float dynamic_p = 0.5*air_density*Vsqr;
 800172a:	4b9a      	ldr	r3, [pc, #616]	; (8001994 <dynamic_loop+0x7b4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe feb2 	bl	8000498 <__aeabi_f2d>
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b97      	ldr	r3, [pc, #604]	; (8001998 <dynamic_loop+0x7b8>)
 800173a:	f7fe ff05 	bl	8000548 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4614      	mov	r4, r2
 8001744:	461d      	mov	r5, r3
 8001746:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800174a:	f7fe fea5 	bl	8000498 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fef7 	bl	8000548 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9c9 	bl	8000af8 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    float L =  dynamic_p*wing_area*Cl;
 800176c:	4b8b      	ldr	r3, [pc, #556]	; (800199c <dynamic_loop+0x7bc>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float D = -dynamic_p*wing_area*Cd *0.5;
 8001786:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800178a:	eeb1 7a67 	vneg.f32	s14, s15
 800178e:	4b83      	ldr	r3, [pc, #524]	; (800199c <dynamic_loop+0x7bc>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001798:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float Side_force = dynamic_p*rudder_area*Cl_rudder;
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <dynamic_loop+0x7c0>)
 80017ae:	ed93 7a00 	vldr	s14, [r3]
 80017b2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    float sinA = sin_approx(alpha*toRad);
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <dynamic_loop+0x790>)
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <dynamic_loop+0x7c4>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	f001 f879 	bl	80028d0 <sin_approx>
 80017de:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    float cosA = cos_approx(alpha*toRad);
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <dynamic_loop+0x790>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <dynamic_loop+0x7c4>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	f001 f915 	bl	8002a24 <cos_approx>
 80017fa:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
    float cosB = cos_approx(beta*toRad);
 80017fe:	4b61      	ldr	r3, [pc, #388]	; (8001984 <dynamic_loop+0x7a4>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <dynamic_loop+0x7c4>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	f001 f907 	bl	8002a24 <cos_approx>
 8001816:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
    float sinB = sin_approx(beta*toRad);
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <dynamic_loop+0x7a4>)
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <dynamic_loop+0x7c4>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	f001 f84f 	bl	80028d0 <sin_approx>
 8001832:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78

    // rotate aero(or wind frame) to body frame
    float Fbx =  L*sinA + D*cosA*cosB + Side_force*cosA*sinB;
 8001836:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800183a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800183e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001842:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001846:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800184a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800184e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800185e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001862:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001866:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800186a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float Fby =  Side_force*cosB - D*sinB;
 8001876:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800187a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800187e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001882:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001886:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float Fbz =  L*cosA - D*cosB*sinA - Side_force*sinA*sinB;
 8001896:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800189a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800189e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80018a6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80018b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ba:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80018be:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80018c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

    // rotate gravity to body frame
    float g_bx =  gravity*siny;
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <dynamic_loop+0x7c8>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    float g_by = -gravity*cosy*sinx;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <dynamic_loop+0x7c8>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	eeb1 7a67 	vneg.f32	s14, s15
 80018f2:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80018f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fa:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80018fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001902:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    float g_bz =  gravity*cosx*cosy;
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <dynamic_loop+0x7c8>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    Fbx += mass*g_bx + T;
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <dynamic_loop+0x7cc>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800192a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <dynamic_loop+0x7d0>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800193c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001940:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    Fby += mass*g_by;
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <dynamic_loop+0x7cc>)
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	e02f      	b.n	80019b4 <dynamic_loop+0x7d4>
 8001954:	f3af 8000 	nop.w
 8001958:	9999999a 	.word	0x9999999a
 800195c:	400d9999 	.word	0x400d9999
 8001960:	00000000 	.word	0x00000000
 8001964:	40ac5200 	.word	0x40ac5200
 8001968:	47ae147b 	.word	0x47ae147b
 800196c:	3f847ae1 	.word	0x3f847ae1
 8001970:	20004080 	.word	0x20004080
 8001974:	405f4000 	.word	0x405f4000
 8001978:	40080000 	.word	0x40080000
 800197c:	20000024 	.word	0x20000024
 8001980:	20000028 	.word	0x20000028
 8001984:	2000407c 	.word	0x2000407c
 8001988:	2000018c 	.word	0x2000018c
 800198c:	20000190 	.word	0x20000190
 8001990:	20000194 	.word	0x20000194
 8001994:	20000010 	.word	0x20000010
 8001998:	3fe00000 	.word	0x3fe00000
 800199c:	20000018 	.word	0x20000018
 80019a0:	20000020 	.word	0x20000020
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	20000004 	.word	0x20000004
 80019ac:	20000014 	.word	0x20000014
 80019b0:	200001b0 	.word	0x200001b0
 80019b4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    Fbz += mass*g_bz;
 80019c0:	4b67      	ldr	r3, [pc, #412]	; (8001b60 <dynamic_loop+0x980>)
 80019c2:	ed93 7a00 	vldr	s14, [r3]
 80019c6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ce:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80019d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

    float acc_bx = Fbx/mass;
 80019da:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <dynamic_loop+0x980>)
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80019e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    float acc_by = Fby/mass;
 80019ec:	4b5c      	ldr	r3, [pc, #368]	; (8001b60 <dynamic_loop+0x980>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80019f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float acc_bz = Fbz/mass;
 80019fe:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <dynamic_loop+0x980>)
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // rotate acc body  to inertial frame
    float accEx = acc_bx*cosy*cosz - acc_bz*(sinx*sinz + cosx*cosz*siny) - acc_by*(cosx*sinz - cosz*sinx*siny);
 8001a10:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001a14:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a24:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8001a28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001a2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a30:	ed97 6a33 	vldr	s12, [r7, #204]	; 0xcc
 8001a34:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a3c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001a40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a48:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a54:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 8001a58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001a5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a60:	ed97 6a31 	vldr	s12, [r7, #196]	; 0xc4
 8001a64:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001a68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a6c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001a70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a78:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a84:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    float accEy = acc_by*(cosx*cosz + sinx*siny*sinz) + acc_bz*(cosz*sinx - cosx*siny*sinz) + acc_bx*cosy*sinz;
 8001a88:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8001a8c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a94:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8001a98:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001a9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab4:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8001ab8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001abc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ac0:	ed97 6a33 	vldr	s12, [r7, #204]	; 0xcc
 8001ac4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001ac8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001acc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001ad0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ad4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ad8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001ae8:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001aec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    float accEz = acc_bx*siny + acc_bz*cosx*cosy - acc_by*cosy*sinx;
 8001b00:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b04:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001b10:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001b14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b18:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b24:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001b28:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001b2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b30:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0

    // zero acce z on ground
    if (accEz > 0 && isFlying == 0)
 8001b40:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	dd0c      	ble.n	8001b68 <dynamic_loop+0x988>
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <dynamic_loop+0x984>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <dynamic_loop+0x988>
        isFlying = 1;
 8001b56:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <dynamic_loop+0x984>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e013      	b.n	8001b86 <dynamic_loop+0x9a6>
 8001b5e:	bf00      	nop
 8001b60:	20000014 	.word	0x20000014
 8001b64:	20000181 	.word	0x20000181
    else if (accEz < 0 && isFlying == 0)
 8001b68:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d507      	bpl.n	8001b86 <dynamic_loop+0x9a6>
 8001b76:	4bd8      	ldr	r3, [pc, #864]	; (8001ed8 <dynamic_loop+0xcf8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <dynamic_loop+0x9a6>
        accEz = 0;
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    pex += vex*Dt + 0.5*accEx*Dt*Dt;
 8001b86:	4bd5      	ldr	r3, [pc, #852]	; (8001edc <dynamic_loop+0xcfc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc84 	bl	8000498 <__aeabi_f2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	4bd2      	ldr	r3, [pc, #840]	; (8001ee0 <dynamic_loop+0xd00>)
 8001b96:	ed93 7a00 	vldr	s14, [r3]
 8001b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba2:	ee17 0a90 	vmov	r0, s15
 8001ba6:	f7fe fc77 	bl	8000498 <__aeabi_f2d>
 8001baa:	4680      	mov	r8, r0
 8001bac:	4689      	mov	r9, r1
 8001bae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bb0:	f7fe fc72 	bl	8000498 <__aeabi_f2d>
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4bca      	ldr	r3, [pc, #808]	; (8001ee4 <dynamic_loop+0xd04>)
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	469b      	mov	fp, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fc66 	bl	8000498 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4650      	mov	r0, sl
 8001bd2:	4659      	mov	r1, fp
 8001bd4:	f7fe fcb8 	bl	8000548 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4692      	mov	sl, r2
 8001bde:	469b      	mov	fp, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fc59 	bl	8000498 <__aeabi_f2d>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4650      	mov	r0, sl
 8001bec:	4659      	mov	r1, fp
 8001bee:	f7fe fcab 	bl	8000548 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4640      	mov	r0, r8
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	f7fe faef 	bl	80001dc <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fae9 	bl	80001dc <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ff71 	bl	8000af8 <__aeabi_d2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4ab0      	ldr	r2, [pc, #704]	; (8001edc <dynamic_loop+0xcfc>)
 8001c1a:	6013      	str	r3, [r2, #0]
    pey += vey*Dt + 0.5*accEy*Dt*Dt;
 8001c1c:	4bb2      	ldr	r3, [pc, #712]	; (8001ee8 <dynamic_loop+0xd08>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc39 	bl	8000498 <__aeabi_f2d>
 8001c26:	4604      	mov	r4, r0
 8001c28:	460d      	mov	r5, r1
 8001c2a:	4bb0      	ldr	r3, [pc, #704]	; (8001eec <dynamic_loop+0xd0c>)
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c38:	ee17 0a90 	vmov	r0, s15
 8001c3c:	f7fe fc2c 	bl	8000498 <__aeabi_f2d>
 8001c40:	4680      	mov	r8, r0
 8001c42:	4689      	mov	r9, r1
 8001c44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c46:	f7fe fc27 	bl	8000498 <__aeabi_f2d>
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4ba5      	ldr	r3, [pc, #660]	; (8001ee4 <dynamic_loop+0xd04>)
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4692      	mov	sl, r2
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7fe fc1b 	bl	8000498 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4650      	mov	r0, sl
 8001c68:	4659      	mov	r1, fp
 8001c6a:	f7fe fc6d 	bl	8000548 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4692      	mov	sl, r2
 8001c74:	469b      	mov	fp, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fc0e 	bl	8000498 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4650      	mov	r0, sl
 8001c82:	4659      	mov	r1, fp
 8001c84:	f7fe fc60 	bl	8000548 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	4649      	mov	r1, r9
 8001c90:	f7fe faa4 	bl	80001dc <__adddf3>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fa9e 	bl	80001dc <__adddf3>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff26 	bl	8000af8 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a8e      	ldr	r2, [pc, #568]	; (8001ee8 <dynamic_loop+0xd08>)
 8001cb0:	6013      	str	r3, [r2, #0]
    pez += vez*Dt + 0.5*accEz*Dt*Dt;
 8001cb2:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <dynamic_loop+0xd10>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbee 	bl	8000498 <__aeabi_f2d>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	460d      	mov	r5, r1
 8001cc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <dynamic_loop+0xd14>)
 8001cc2:	ed93 7a00 	vldr	s14, [r3]
 8001cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cce:	ee17 0a90 	vmov	r0, s15
 8001cd2:	f7fe fbe1 	bl	8000498 <__aeabi_f2d>
 8001cd6:	4680      	mov	r8, r0
 8001cd8:	4689      	mov	r9, r1
 8001cda:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001cde:	f7fe fbdb 	bl	8000498 <__aeabi_f2d>
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <dynamic_loop+0xd04>)
 8001ce8:	f7fe fc2e 	bl	8000548 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4692      	mov	sl, r2
 8001cf2:	469b      	mov	fp, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe fbcf 	bl	8000498 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4650      	mov	r0, sl
 8001d00:	4659      	mov	r1, fp
 8001d02:	f7fe fc21 	bl	8000548 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4692      	mov	sl, r2
 8001d0c:	469b      	mov	fp, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fbc2 	bl	8000498 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4650      	mov	r0, sl
 8001d1a:	4659      	mov	r1, fp
 8001d1c:	f7fe fc14 	bl	8000548 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4640      	mov	r0, r8
 8001d26:	4649      	mov	r1, r9
 8001d28:	f7fe fa58 	bl	80001dc <__adddf3>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fa52 	bl	80001dc <__adddf3>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe feda 	bl	8000af8 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <dynamic_loop+0xd10>)
 8001d48:	6013      	str	r3, [r2, #0]

    arrow.lat= pex/eart_radius*toDeg + init_latitude;
 8001d4a:	4b64      	ldr	r3, [pc, #400]	; (8001edc <dynamic_loop+0xcfc>)
 8001d4c:	edd3 6a00 	vldr	s13, [r3]
 8001d50:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <dynamic_loop+0xd18>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d5a:	4b68      	ldr	r3, [pc, #416]	; (8001efc <dynamic_loop+0xd1c>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <dynamic_loop+0xd20>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6e:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <dynamic_loop+0xd24>)
 8001d70:	edc3 7a06 	vstr	s15, [r3, #24]
    arrow.lon = pey/eart_radius*toDeg + init_longitude;
 8001d74:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <dynamic_loop+0xd08>)
 8001d76:	edd3 6a00 	vldr	s13, [r3]
 8001d7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <dynamic_loop+0xd18>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d84:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <dynamic_loop+0xd1c>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8e:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <dynamic_loop+0xd28>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <dynamic_loop+0xd24>)
 8001d9a:	edc3 7a07 	vstr	s15, [r3, #28]
    arrow.alt = pez + init_altitude;
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <dynamic_loop+0xd10>)
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <dynamic_loop+0xd2c>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <dynamic_loop+0xd24>)
 8001db0:	edc3 7a08 	vstr	s15, [r3, #32]

    vex +=  accEx*Dt;
 8001db4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <dynamic_loop+0xd00>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <dynamic_loop+0xd00>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
    vey +=  accEy*Dt;
 8001dd0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <dynamic_loop+0xd0c>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <dynamic_loop+0xd0c>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]
    vez +=  accEz*Dt;
 8001dec:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8001df0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df8:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <dynamic_loop+0xd14>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <dynamic_loop+0xd14>)
 8001e04:	edc3 7a00 	vstr	s15, [r3]
               ch3
                |
                -
     */
    //scale to deg
    ctrl_left  *= 40;
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <dynamic_loop+0xd30>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001f14 <dynamic_loop+0xd34>
 8001e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <dynamic_loop+0xd30>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
    ctrl_right *= 40;
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <dynamic_loop+0xd38>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001f14 <dynamic_loop+0xd34>
 8001e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <dynamic_loop+0xd38>)
 8001e2c:	edc3 7a00 	vstr	s15, [r3]

    float lift_left   = dynamic_p*wing_ctrl_area*aileron_Cl*ctrl_left;
 8001e30:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <dynamic_loop+0xd3c>)
 8001e32:	ed93 7a00 	vldr	s14, [r3]
 8001e36:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <dynamic_loop+0xd40>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <dynamic_loop+0xd30>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    float lift_right  = dynamic_p*wing_ctrl_area*aileron_Cl*ctrl_right;
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <dynamic_loop+0xd3c>)
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <dynamic_loop+0xd40>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <dynamic_loop+0xd38>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float drag_left   = dynamic_p*wing_ctrl_area*aileron_Cd*ctrl_left;
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <dynamic_loop+0xd3c>)
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <dynamic_loop+0xd44>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <dynamic_loop+0xd30>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float drag_right  = dynamic_p*wing_ctrl_area*aileron_Cd*ctrl_right;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <dynamic_loop+0xd3c>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <dynamic_loop+0xd44>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <dynamic_loop+0xd38>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // pitching moment coefficient
    float Cm_p = (0.002f*pow(alpha,3) + 0.2f*alpha)*0.0002f;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <dynamic_loop+0xd48>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fae3 	bl	8000498 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	e029      	b.n	8001f2c <dynamic_loop+0xd4c>
 8001ed8:	20000181 	.word	0x20000181
 8001edc:	20000198 	.word	0x20000198
 8001ee0:	2000018c 	.word	0x2000018c
 8001ee4:	3fe00000 	.word	0x3fe00000
 8001ee8:	2000019c 	.word	0x2000019c
 8001eec:	20000190 	.word	0x20000190
 8001ef0:	200001a0 	.word	0x200001a0
 8001ef4:	20000194 	.word	0x20000194
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000058 	.word	0x20000058
 8001f04:	20004054 	.word	0x20004054
 8001f08:	2000005c 	.word	0x2000005c
 8001f0c:	20000060 	.word	0x20000060
 8001f10:	200001b4 	.word	0x200001b4
 8001f14:	42200000 	.word	0x42200000
 8001f18:	200001b8 	.word	0x200001b8
 8001f1c:	2000001c 	.word	0x2000001c
 8001f20:	2000002c 	.word	0x2000002c
 8001f24:	20000030 	.word	0x20000030
 8001f28:	20004080 	.word	0x20004080
 8001f2c:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80020f8 <dynamic_loop+0xf18>
 8001f30:	ec43 2b10 	vmov	d0, r2, r3
 8001f34:	f00e f894 	bl	8010060 <pow>
 8001f38:	ec51 0b10 	vmov	r0, r1, d0
 8001f3c:	a37d      	add	r3, pc, #500	; (adr r3, 8002134 <dynamic_loop+0xf54>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fb01 	bl	8000548 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	4b6e      	ldr	r3, [pc, #440]	; (8002108 <dynamic_loop+0xf28>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800210c <dynamic_loop+0xf2c>
 8001f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5c:	ee17 0a90 	vmov	r0, s15
 8001f60:	f7fe fa9a 	bl	8000498 <__aeabi_f2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe f936 	bl	80001dc <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	a361      	add	r3, pc, #388	; (adr r3, 8002100 <dynamic_loop+0xf20>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fae3 	bl	8000548 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fdb5 	bl	8000af8 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
    float pitching_moment = dynamic_p*wing_area*Cm_p;
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <dynamic_loop+0xf30>)
 8001f94:	ed93 7a00 	vldr	s14, [r3]
 8001f98:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float yawing_moment  = Side_force*dis_ruderr2CG;
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <dynamic_loop+0xf34>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float Mx_total = (lift_right - lift_left)*dis_aile2center -sign(P)*P*P*cd_moment_x;
 8001fbe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001fc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <dynamic_loop+0xf38>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd4:	4b51      	ldr	r3, [pc, #324]	; (800211c <dynamic_loop+0xf3c>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	dd02      	ble.n	8001fea <dynamic_loop+0xe0a>
 8001fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe8:	e001      	b.n	8001fee <dynamic_loop+0xe0e>
 8001fea:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <dynamic_loop+0xf3c>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff8:	4b48      	ldr	r3, [pc, #288]	; (800211c <dynamic_loop+0xf3c>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <dynamic_loop+0xf40>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002010:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float My_total = (lift_right + lift_left)*dis_ele2center - pitching_moment  -sign(Q)*Q*Q*cd_moment_y;
 8002014:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002018:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800201c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <dynamic_loop+0xf44>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800202e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <dynamic_loop+0xf48>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	dd02      	ble.n	8002048 <dynamic_loop+0xe68>
 8002042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002046:	e001      	b.n	800204c <dynamic_loop+0xe6c>
 8002048:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <dynamic_loop+0xf48>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002056:	4b34      	ldr	r3, [pc, #208]	; (8002128 <dynamic_loop+0xf48>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <dynamic_loop+0xf4c>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float Mz_total = (fabs(drag_left) - fabs(drag_right))*dis_aile2center - yawing_moment  - sign(R)*R*R*cd_moment_z;
 8002072:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002076:	eef0 7ae7 	vabs.f32	s15, s15
 800207a:	ee17 0a90 	vmov	r0, s15
 800207e:	f7fe fa0b 	bl	8000498 <__aeabi_f2d>
 8002082:	4604      	mov	r4, r0
 8002084:	460d      	mov	r5, r1
 8002086:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800208a:	eef0 7ae7 	vabs.f32	s15, s15
 800208e:	ee17 0a90 	vmov	r0, s15
 8002092:	f7fe fa01 	bl	8000498 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f7fe f89b 	bl	80001d8 <__aeabi_dsub>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <dynamic_loop+0xf38>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9f2 	bl	8000498 <__aeabi_f2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe fa44 	bl	8000548 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ca:	f7fe f9e5 	bl	8000498 <__aeabi_f2d>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4620      	mov	r0, r4
 80020d4:	4629      	mov	r1, r5
 80020d6:	f7fe f87f 	bl	80001d8 <__aeabi_dsub>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4614      	mov	r4, r2
 80020e0:	461d      	mov	r5, r3
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <dynamic_loop+0xf50>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	dd24      	ble.n	800213c <dynamic_loop+0xf5c>
 80020f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020f6:	e023      	b.n	8002140 <dynamic_loop+0xf60>
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40080000 	.word	0x40080000
 8002100:	e0000000 	.word	0xe0000000
 8002104:	3f2a36e2 	.word	0x3f2a36e2
 8002108:	20004080 	.word	0x20004080
 800210c:	3e4ccccd 	.word	0x3e4ccccd
 8002110:	20000018 	.word	0x20000018
 8002114:	20000034 	.word	0x20000034
 8002118:	20000038 	.word	0x20000038
 800211c:	200001a4 	.word	0x200001a4
 8002120:	20000040 	.word	0x20000040
 8002124:	2000003c 	.word	0x2000003c
 8002128:	200001a8 	.word	0x200001a8
 800212c:	20000044 	.word	0x20000044
 8002130:	200001ac 	.word	0x200001ac
 8002134:	e0000000 	.word	0xe0000000
 8002138:	3f60624d 	.word	0x3f60624d
 800213c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002140:	4bb5      	ldr	r3, [pc, #724]	; (8002418 <dynamic_loop+0x1238>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214a:	4bb3      	ldr	r3, [pc, #716]	; (8002418 <dynamic_loop+0x1238>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002154:	4bb1      	ldr	r3, [pc, #708]	; (800241c <dynamic_loop+0x123c>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	ee17 0a90 	vmov	r0, s15
 8002162:	f7fe f999 	bl	8000498 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe f833 	bl	80001d8 <__aeabi_dsub>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fcbd 	bl	8000af8 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24

    float P_dot = Mx_total/Ixx;
 8002182:	4ba7      	ldr	r3, [pc, #668]	; (8002420 <dynamic_loop+0x1240>)
 8002184:	ed93 7a00 	vldr	s14, [r3]
 8002188:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800218c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002190:	edc7 7a08 	vstr	s15, [r7, #32]
    float Q_dot = My_total/Iyy;
 8002194:	4ba3      	ldr	r3, [pc, #652]	; (8002424 <dynamic_loop+0x1244>)
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800219e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a2:	edc7 7a07 	vstr	s15, [r7, #28]
    float R_dot = Mz_total/Izz;
 80021a6:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <dynamic_loop+0x1248>)
 80021a8:	ed93 7a00 	vldr	s14, [r3]
 80021ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80021b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b4:	edc7 7a06 	vstr	s15, [r7, #24]
	
    P += P_dot*Dt;
 80021b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80021bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80021c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c4:	4b99      	ldr	r3, [pc, #612]	; (800242c <dynamic_loop+0x124c>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	4b97      	ldr	r3, [pc, #604]	; (800242c <dynamic_loop+0x124c>)
 80021d0:	edc3 7a00 	vstr	s15, [r3]
    Q += Q_dot*Dt;
 80021d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80021d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e0:	4b93      	ldr	r3, [pc, #588]	; (8002430 <dynamic_loop+0x1250>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	4b91      	ldr	r3, [pc, #580]	; (8002430 <dynamic_loop+0x1250>)
 80021ec:	edc3 7a00 	vstr	s15, [r3]
    R += R_dot*Dt;
 80021f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80021f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fc:	4b86      	ldr	r3, [pc, #536]	; (8002418 <dynamic_loop+0x1238>)
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002206:	4b84      	ldr	r3, [pc, #528]	; (8002418 <dynamic_loop+0x1238>)
 8002208:	edc3 7a00 	vstr	s15, [r3]

    // cvt body rate to euler rate
    float r_dot   = P + R*cosx*tany + Q*sinx*tany;
 800220c:	4b82      	ldr	r3, [pc, #520]	; (8002418 <dynamic_loop+0x1238>)
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800221a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800221e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <dynamic_loop+0x124c>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222c:	4b80      	ldr	r3, [pc, #512]	; (8002430 <dynamic_loop+0x1250>)
 800222e:	edd3 6a00 	vldr	s13, [r3]
 8002232:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002236:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800223a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800223e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	edc7 7a05 	vstr	s15, [r7, #20]
    float p_dot   = Q*cosx - R*sinx;
 800224a:	4b79      	ldr	r3, [pc, #484]	; (8002430 <dynamic_loop+0x1250>)
 800224c:	ed93 7a00 	vldr	s14, [r3]
 8002250:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002258:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <dynamic_loop+0x1238>)
 800225a:	edd3 6a00 	vldr	s13, [r3]
 800225e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	edc7 7a04 	vstr	s15, [r7, #16]
    float y_dot   = R*cosx/cosy + Q*sinx/cosy;
 800226e:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <dynamic_loop+0x1238>)
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002278:	ee67 6a27 	vmul.f32	s13, s14, s15
 800227c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <dynamic_loop+0x1250>)
 8002286:	edd3 6a00 	vldr	s13, [r3]
 800228a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800228e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002292:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 8002296:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	edc7 7a03 	vstr	s15, [r7, #12]

    roll  += r_dot*Dt;
 80022a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80022a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ae:	4b61      	ldr	r3, [pc, #388]	; (8002434 <dynamic_loop+0x1254>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	4b5e      	ldr	r3, [pc, #376]	; (8002434 <dynamic_loop+0x1254>)
 80022ba:	edc3 7a00 	vstr	s15, [r3]
    pitch += p_dot*Dt;
 80022be:	ed97 7a04 	vldr	s14, [r7, #16]
 80022c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <dynamic_loop+0x1258>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <dynamic_loop+0x1258>)
 80022d6:	edc3 7a00 	vstr	s15, [r3]
    yaw   += y_dot*Dt;
 80022da:	ed97 7a03 	vldr	s14, [r7, #12]
 80022de:	edd7 7a01 	vldr	s15, [r7, #4]
 80022e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e6:	4b55      	ldr	r3, [pc, #340]	; (800243c <dynamic_loop+0x125c>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	4b52      	ldr	r3, [pc, #328]	; (800243c <dynamic_loop+0x125c>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]

    yaw   = swap360(yaw*toDeg)*toRad;
 80022f6:	4b51      	ldr	r3, [pc, #324]	; (800243c <dynamic_loop+0x125c>)
 80022f8:	ed93 7a00 	vldr	s14, [r3]
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <dynamic_loop+0x1260>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	f000 f8cd 	bl	80024a8 <swap360>
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <dynamic_loop+0x1264>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <dynamic_loop+0x125c>)
 800231e:	edc3 7a00 	vstr	s15, [r3]
    roll  = swap180(roll*toDeg)*toRad;
 8002322:	4b44      	ldr	r3, [pc, #272]	; (8002434 <dynamic_loop+0x1254>)
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	4b45      	ldr	r3, [pc, #276]	; (8002440 <dynamic_loop+0x1260>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002332:	eeb0 0a67 	vmov.f32	s0, s15
 8002336:	f000 f889 	bl	800244c <swap180>
 800233a:	eeb0 7a40 	vmov.f32	s14, s0
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <dynamic_loop+0x1264>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <dynamic_loop+0x1254>)
 800234a:	edc3 7a00 	vstr	s15, [r3]
    pitch = swap180(pitch*toDeg)*toRad;
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <dynamic_loop+0x1258>)
 8002350:	ed93 7a00 	vldr	s14, [r3]
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <dynamic_loop+0x1260>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	f000 f873 	bl	800244c <swap180>
 8002366:	eeb0 7a40 	vmov.f32	s14, s0
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <dynamic_loop+0x1264>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <dynamic_loop+0x1258>)
 8002376:	edc3 7a00 	vstr	s15, [r3]

    arrow.velocity = sqrtf(Vsqr);
 800237a:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800237e:	f00d ff51 	bl	8010224 <sqrtf>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <dynamic_loop+0x1268>)
 8002388:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    arrow.roll = roll*toDeg;
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <dynamic_loop+0x1254>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <dynamic_loop+0x1260>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <dynamic_loop+0x1268>)
 800239e:	edc3 7a00 	vstr	s15, [r3]
    arrow.pitch= pitch*toDeg;
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <dynamic_loop+0x1258>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <dynamic_loop+0x1260>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <dynamic_loop+0x1268>)
 80023b4:	edc3 7a01 	vstr	s15, [r3, #4]
    arrow.yaw = yaw*toDeg;
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <dynamic_loop+0x125c>)
 80023ba:	ed93 7a00 	vldr	s14, [r3]
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <dynamic_loop+0x1260>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c8:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <dynamic_loop+0x1268>)
 80023ca:	edc3 7a02 	vstr	s15, [r3, #8]

    arrow.roll_rate  = r_dot*toDeg;
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <dynamic_loop+0x1260>)
 80023d0:	ed93 7a00 	vldr	s14, [r3]
 80023d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <dynamic_loop+0x1268>)
 80023de:	edc3 7a03 	vstr	s15, [r3, #12]
    arrow.pitch_rate = p_dot*toDeg;
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <dynamic_loop+0x1260>)
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <dynamic_loop+0x1268>)
 80023f2:	edc3 7a04 	vstr	s15, [r3, #16]
    arrow.yaw_rate   = y_dot*toDeg;
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <dynamic_loop+0x1260>)
 80023f8:	ed93 7a00 	vldr	s14, [r3]
 80023fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <dynamic_loop+0x1268>)
 8002406:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800240a:	37d8      	adds	r7, #216	; 0xd8
 800240c:	46bd      	mov	sp, r7
 800240e:	ecbd 8b02 	vpop	{d8}
 8002412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	200001ac 	.word	0x200001ac
 800241c:	20000048 	.word	0x20000048
 8002420:	2000004c 	.word	0x2000004c
 8002424:	20000050 	.word	0x20000050
 8002428:	20000054 	.word	0x20000054
 800242c:	200001a4 	.word	0x200001a4
 8002430:	200001a8 	.word	0x200001a8
 8002434:	20000184 	.word	0x20000184
 8002438:	20000188 	.word	0x20000188
 800243c:	20000068 	.word	0x20000068
 8002440:	20000008 	.word	0x20000008
 8002444:	2000000c 	.word	0x2000000c
 8002448:	20004054 	.word	0x20004054

0800244c <swap180>:


static float swap180(float val){
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	ed87 0a01 	vstr	s0, [r7, #4]
    if(val > 179)
 8002456:	edd7 7a01 	vldr	s15, [r7, #4]
 800245a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002498 <swap180+0x4c>
 800245e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	dd02      	ble.n	800246e <swap180+0x22>
        val = -179;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <swap180+0x50>)
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	e00a      	b.n	8002484 <swap180+0x38>
    else if (val < -179)
 800246e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002472:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80024a0 <swap180+0x54>
 8002476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	d501      	bpl.n	8002484 <swap180+0x38>
        val = 179;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <swap180+0x58>)
 8002482:	607b      	str	r3, [r7, #4]
    return val;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	ee07 3a90 	vmov	s15, r3
}
 800248a:	eeb0 0a67 	vmov.f32	s0, s15
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	43330000 	.word	0x43330000
 800249c:	c3330000 	.word	0xc3330000
 80024a0:	c3330000 	.word	0xc3330000
 80024a4:	43330000 	.word	0x43330000

080024a8 <swap360>:

static float swap360(float val){
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	ed87 0a01 	vstr	s0, [r7, #4]
    if(val > 359)
 80024b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024f4 <swap360+0x4c>
 80024ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dd03      	ble.n	80024cc <swap360+0x24>
        val = 0;
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	e008      	b.n	80024de <swap360+0x36>
    else if (val < 0)
 80024cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	d501      	bpl.n	80024de <swap360+0x36>
        val = 359;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <swap360+0x50>)
 80024dc:	607b      	str	r3, [r7, #4]
    return val;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	ee07 3a90 	vmov	s15, r3
}
 80024e4:	eeb0 0a67 	vmov.f32	s0, s15
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	43b38000 	.word	0x43b38000
 80024f8:	43b38000 	.word	0x43b38000

080024fc <black_box_init>:
int32_t puts_state;

/*
 * init black box
 */
void black_box_init(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <black_box_init+0x40>)
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <black_box_init+0x44>)
 8002504:	605a      	str	r2, [r3, #4]
    //SDFile.fs->id = 1;
    //SDFile.id = 1;
    mount_state = f_mount(&SDFatFS,"",1);
 8002506:	2201      	movs	r2, #1
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <black_box_init+0x48>)
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <black_box_init+0x4c>)
 800250c:	f009 fc32 	bl	800bd74 <f_mount>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <black_box_init+0x50>)
 8002516:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002518:	2213      	movs	r2, #19
 800251a:	490d      	ldr	r1, [pc, #52]	; (8002550 <black_box_init+0x54>)
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <black_box_init+0x44>)
 800251e:	f009 fc8d 	bl	800be3c <f_open>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <black_box_init+0x58>)
 8002528:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.obj.objsize);
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <black_box_init+0x44>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4619      	mov	r1, r3
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <black_box_init+0x44>)
 8002532:	f00a f902 	bl	800c73a <f_lseek>
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20004084 	.word	0x20004084
 8002540:	200049b8 	.word	0x200049b8
 8002544:	08011578 	.word	0x08011578
 8002548:	20004be8 	.word	0x20004be8
 800254c:	20004291 	.word	0x20004291
 8002550:	0801157c 	.word	0x0801157c
 8002554:	20004290 	.word	0x20004290

08002558 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8002560:	4b49      	ldr	r3, [pc, #292]	; (8002688 <black_box_pack_int+0x130>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	220b      	movs	r2, #11
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f00d fca4 	bl	800fec0 <memset>
	if(val != 0){
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02b      	beq.n	80025d6 <black_box_pack_int+0x7e>
		val = abs(val);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	bfb8      	it	lt
 8002584:	425b      	neglt	r3, r3
 8002586:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	2200      	movs	r2, #0
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f921 	bl	80027d8 <intToStr>
 8002596:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(val_ < 0){
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	da2b      	bge.n	80025f6 <black_box_pack_int+0x9e>
			for(int i = len_str; i > 0; i--){
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a2:	e00f      	b.n	80025c4 <black_box_pack_int+0x6c>
				str_[i] = str_[i - 1];
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025ac:	4413      	add	r3, r2
 80025ae:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80025b2:	f107 0208 	add.w	r2, r7, #8
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	4413      	add	r3, r2
 80025ba:	460a      	mov	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dcec      	bgt.n	80025a4 <black_box_pack_int+0x4c>
			}
			len_str ++;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	3301      	adds	r3, #1
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			str_[0] = '-';
 80025d0:	232d      	movs	r3, #45	; 0x2d
 80025d2:	723b      	strb	r3, [r7, #8]
 80025d4:	e00f      	b.n	80025f6 <black_box_pack_int+0x9e>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <black_box_pack_int+0x130>)
 80025d8:	891b      	ldrh	r3, [r3, #8]
 80025da:	461a      	mov	r2, r3
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <black_box_pack_int+0x130>)
 80025de:	4413      	add	r3, r2
 80025e0:	2230      	movs	r2, #48	; 0x30
 80025e2:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	   fs.buffer_index ++;
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <black_box_pack_int+0x130>)
 80025ea:	891b      	ldrh	r3, [r3, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <black_box_pack_int+0x130>)
 80025f2:	811a      	strh	r2, [r3, #8]
 80025f4:	e045      	b.n	8002682 <black_box_pack_int+0x12a>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <black_box_pack_int+0x130>)
 80025fc:	891b      	ldrh	r3, [r3, #8]
 80025fe:	461a      	mov	r2, r3
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	4413      	add	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800260c:	dc08      	bgt.n	8002620 <black_box_pack_int+0xc8>
		max_index = fs.buffer_index + len_str;
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <black_box_pack_int+0x130>)
 8002610:	891b      	ldrh	r3, [r3, #8]
 8002612:	461a      	mov	r2, r3
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	4413      	add	r3, r2
 8002618:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 800261a:	2301      	movs	r3, #1
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	e004      	b.n	800262a <black_box_pack_int+0xd2>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <black_box_pack_int+0x130>)
 800262c:	891b      	ldrh	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e010      	b.n	8002654 <black_box_pack_int+0xfc>
			fs.buffer[j] = str_[str_idx ++];
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	627a      	str	r2, [r7, #36]	; 0x24
 8002638:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800263c:	4413      	add	r3, r2
 800263e:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <black_box_pack_int+0x130>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	330a      	adds	r3, #10
 800264a:	460a      	mov	r2, r1
 800264c:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3301      	adds	r3, #1
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	dbea      	blt.n	8002632 <black_box_pack_int+0xda>
	}
	
	if(index_flag){
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <black_box_pack_int+0x11c>
		fs.buffer_index += len_str;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <black_box_pack_int+0x130>)
 8002664:	891a      	ldrh	r2, [r3, #8]
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	b29b      	uxth	r3, r3
 800266a:	4413      	add	r3, r2
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <black_box_pack_int+0x130>)
 8002670:	811a      	strh	r2, [r3, #8]
 8002672:	e006      	b.n	8002682 <black_box_pack_int+0x12a>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <black_box_pack_int+0x130>)
 8002676:	891b      	ldrh	r3, [r3, #8]
 8002678:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b02      	ldr	r3, [pc, #8]	; (8002688 <black_box_pack_int+0x130>)
 8002680:	811a      	strh	r2, [r3, #8]
	}
}
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20004084 	.word	0x20004084

0800268c <black_box_pack_str>:


void black_box_pack_str(char *c){
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

    int i = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8002698:	e01c      	b.n	80026d4 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <black_box_pack_str+0x70>)
 800269c:	891b      	ldrh	r3, [r3, #8]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a8:	dd04      	ble.n	80026b4 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <black_box_pack_str+0x70>)
 80026ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b0:	811a      	strh	r2, [r3, #8]
                return;
 80026b2:	e01d      	b.n	80026f0 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	441a      	add	r2, r3
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <black_box_pack_str+0x70>)
 80026bc:	891b      	ldrh	r3, [r3, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	440b      	add	r3, r1
 80026c4:	7811      	ldrb	r1, [r2, #0]
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <black_box_pack_str+0x70>)
 80026c8:	4413      	add	r3, r2
 80026ca:	460a      	mov	r2, r1
 80026cc:	729a      	strb	r2, [r3, #10]
        i ++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1dc      	bne.n	800269a <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <black_box_pack_str+0x70>)
 80026e2:	891a      	ldrh	r2, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <black_box_pack_str+0x70>)
 80026ee:	811a      	strh	r2, [r3, #8]
}
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20004084 	.word	0x20004084

08002700 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <black_box_pack_char+0x30>)
 800270c:	891b      	ldrh	r3, [r3, #8]
 800270e:	461a      	mov	r2, r3
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <black_box_pack_char+0x30>)
 8002712:	4413      	add	r3, r2
 8002714:	79fa      	ldrb	r2, [r7, #7]
 8002716:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <black_box_pack_char+0x30>)
 800271a:	891b      	ldrh	r3, [r3, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <black_box_pack_char+0x30>)
 8002722:	811a      	strh	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	20004084 	.word	0x20004084

08002734 <black_box_load>:



void black_box_load()
 {
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <black_box_load+0x38>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4619      	mov	r1, r3
 800273e:	480c      	ldr	r0, [pc, #48]	; (8002770 <black_box_load+0x3c>)
 8002740:	f00a fac5 	bl	800ccce <f_puts>
 8002744:	4603      	mov	r3, r0
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <black_box_load+0x40>)
 8002748:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <black_box_load+0x38>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f009 ff6a 	bl	800c628 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	2100      	movs	r1, #0
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <black_box_load+0x3c>)
 800275c:	f00d fbb0 	bl	800fec0 <memset>
      fs.buffer_index = 0;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <black_box_load+0x38>)
 8002762:	2200      	movs	r2, #0
 8002764:	811a      	strh	r2, [r3, #8]
 }
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20004084 	.word	0x20004084
 8002770:	2000408e 	.word	0x2000408e
 8002774:	20004294 	.word	0x20004294

08002778 <reverse>:




static void reverse( char *str, int len)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	3b01      	subs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800278c:	e018      	b.n	80027c0 <reverse+0x48>
        temp = str[i];
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	441a      	add	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	440b      	add	r3, r1
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
        i++;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
        j--;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	3b01      	subs	r3, #1
 80027be:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbe2      	blt.n	800278e <reverse+0x16>
    }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
    while (x) {
 80027e4:	e01f      	b.n	8002826 <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <intToStr+0x8c>)
 80027ea:	fb83 1302 	smull	r1, r3, r3, r2
 80027ee:	1099      	asrs	r1, r3, #2
 80027f0:	17d3      	asrs	r3, r2, #31
 80027f2:	1ac9      	subs	r1, r1, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	1ad1      	subs	r1, r2, r3
 80027fe:	b2ca      	uxtb	r2, r1
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <intToStr+0x90>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1c59      	adds	r1, r3, #1
 8002806:	4818      	ldr	r0, [pc, #96]	; (8002868 <intToStr+0x90>)
 8002808:	6001      	str	r1, [r0, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	440b      	add	r3, r1
 8002810:	3230      	adds	r2, #48	; 0x30
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <intToStr+0x8c>)
 800281a:	fb82 1203 	smull	r1, r2, r2, r3
 800281e:	1092      	asrs	r2, r2, #2
 8002820:	17db      	asrs	r3, r3, #31
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1dc      	bne.n	80027e6 <intToStr+0xe>
    }

    while (fs.indexx < d)
 800282c:	e009      	b.n	8002842 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <intToStr+0x90>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <intToStr+0x90>)
 8002836:	600a      	str	r2, [r1, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4413      	add	r3, r2
 800283e:	2230      	movs	r2, #48	; 0x30
 8002840:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <intToStr+0x90>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	dcf0      	bgt.n	800282e <intToStr+0x56>
    reverse(str,fs.indexx);
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <intToStr+0x90>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	68b8      	ldr	r0, [r7, #8]
 8002854:	f7ff ff90 	bl	8002778 <reverse>
    return fs.indexx;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <intToStr+0x90>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	66666667 	.word	0x66666667
 8002868:	20004084 	.word	0x20004084

0800286c <gps_DMA_callback>:
    }
}

uint32_t ms_gps_thread;
void gps_DMA_callback()
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
    static uint32_t last_call;
    ms_gps_thread = millis() - last_call;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <gps_DMA_callback+0x4c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <gps_DMA_callback+0x50>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <gps_DMA_callback+0x54>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	099a      	lsrs	r2, r3, #6
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <gps_DMA_callback+0x58>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <gps_DMA_callback+0x5c>)
 800288c:	6013      	str	r3, [r2, #0]
    last_call = millis();
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <gps_DMA_callback+0x4c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <gps_DMA_callback+0x50>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <gps_DMA_callback+0x54>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <gps_DMA_callback+0x58>)
 80028a4:	6013      	str	r3, [r2, #0]
    receive_cplt = 1;
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <gps_DMA_callback+0x60>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20004684 	.word	0x20004684
 80028bc:	20004428 	.word	0x20004428
 80028c0:	10624dd3 	.word	0x10624dd3
 80028c4:	200001c0 	.word	0x200001c0
 80028c8:	200043b4 	.word	0x200043b4
 80028cc:	200001bc 	.word	0x200001bc

080028d0 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e2:	ee17 3a90 	vmov	r3, s15
 80028e6:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f113 0f20 	cmn.w	r3, #32
 80028ee:	db02      	blt.n	80028f6 <sin_approx+0x26>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	dd0a      	ble.n	800290c <sin_approx+0x3c>
 80028f6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8002a00 <sin_approx+0x130>
 80028fa:	e079      	b.n	80029f0 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 80028fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002900:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002a04 <sin_approx+0x134>
 8002904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002908:	edc7 7a01 	vstr	s15, [r7, #4]
 800290c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002910:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a08 <sin_approx+0x138>
 8002914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	dcee      	bgt.n	80028fc <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 800291e:	e007      	b.n	8002930 <sin_approx+0x60>
 8002920:	edd7 7a01 	vldr	s15, [r7, #4]
 8002924:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002a04 <sin_approx+0x134>
 8002928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002930:	edd7 7a01 	vldr	s15, [r7, #4]
 8002934:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002a0c <sin_approx+0x13c>
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	d4ee      	bmi.n	8002920 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8002942:	edd7 7a01 	vldr	s15, [r7, #4]
 8002946:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002a10 <sin_approx+0x140>
 800294a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	dd0c      	ble.n	800296e <sin_approx+0x9e>
 8002954:	edd7 7a01 	vldr	s15, [r7, #4]
 8002958:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002a10 <sin_approx+0x140>
 800295c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002960:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002a10 <sin_approx+0x140>
 8002964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002968:	edc7 7a01 	vstr	s15, [r7, #4]
 800296c:	e014      	b.n	8002998 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 800296e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002972:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002a14 <sin_approx+0x144>
 8002976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d50b      	bpl.n	8002998 <sin_approx+0xc8>
 8002980:	edd7 7a01 	vldr	s15, [r7, #4]
 8002984:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002a10 <sin_approx+0x140>
 8002988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800298c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002a14 <sin_approx+0x144>
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002994:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 8002998:	edd7 7a01 	vldr	s15, [r7, #4]
 800299c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029a0:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80029a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80029a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80029b4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002a00 <sin_approx+0x130>
 80029b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029bc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002a18 <sin_approx+0x148>
 80029c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029cc:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002a1c <sin_approx+0x14c>
 80029d0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80029d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029dc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002a20 <sin_approx+0x150>
 80029e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80029f0:	eeb0 0a67 	vmov.f32	s0, s15
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	00000000 	.word	0x00000000
 8002a04:	40c90fdb 	.word	0x40c90fdb
 8002a08:	40490fdb 	.word	0x40490fdb
 8002a0c:	c0490fdb 	.word	0xc0490fdb
 8002a10:	3fc90fdb 	.word	0x3fc90fdb
 8002a14:	bfc90fdb 	.word	0xbfc90fdb
 8002a18:	3941e792 	.word	0x3941e792
 8002a1c:	3c083097 	.word	0x3c083097
 8002a20:	3e2aa815 	.word	0x3e2aa815

08002a24 <cos_approx>:

float cos_approx(float x)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 8002a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a32:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a50 <cos_approx+0x2c>
 8002a36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	f7ff ff47 	bl	80028d0 <sin_approx>
 8002a42:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a46:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	3fc90fdb 	.word	0x3fc90fdb

08002a54 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b08b      	sub	sp, #44	; 0x2c
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a5e:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8002a62:	edd7 7a00 	vldr	s15, [r7]
 8002a66:	eef0 7ae7 	vabs.f32	s15, s15
 8002a6a:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 8002a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a72:	eef0 7ae7 	vabs.f32	s15, s15
 8002a76:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a92:	dd01      	ble.n	8002a98 <atan2_approx+0x44>
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	e000      	b.n	8002a9a <atan2_approx+0x46>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8002a9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	d018      	beq.n	8002adc <atan2_approx+0x88>
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	d502      	bpl.n	8002aca <atan2_approx+0x76>
 8002ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac8:	e001      	b.n	8002ace <atan2_approx+0x7a>
 8002aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ace:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002ad2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ad6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8002ada:	e002      	b.n	8002ae2 <atan2_approx+0x8e>
    else res = 0.0f;
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8002ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ae6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002bc4 <atan2_approx+0x170>
 8002aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002bc8 <atan2_approx+0x174>
 8002af2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002af6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002bcc <atan2_approx+0x178>
 8002b02:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002bd0 <atan2_approx+0x17c>
 8002b12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002bd4 <atan2_approx+0x180>
 8002b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b26:	eef1 6a67 	vneg.f32	s13, s15
 8002b2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b2e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002bd8 <atan2_approx+0x184>
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002bdc <atan2_approx+0x188>
 8002b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8002b56:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	dd07      	ble.n	8002b78 <atan2_approx+0x124>
 8002b68:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002be0 <atan2_approx+0x18c>
 8002b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8002b78:	edd7 7a00 	vldr	s15, [r7]
 8002b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	d507      	bpl.n	8002b96 <atan2_approx+0x142>
 8002b86:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002be4 <atan2_approx+0x190>
 8002b8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8002b96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	d505      	bpl.n	8002bb0 <atan2_approx+0x15c>
 8002ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ba8:	eef1 7a67 	vneg.f32	s15, s15
 8002bac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	ee07 3a90 	vmov	s15, r3
}
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	372c      	adds	r7, #44	; 0x2c
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	3d4e0939 	.word	0x3d4e0939
 8002bc8:	3e9eb5e3 	.word	0x3e9eb5e3
 8002bcc:	3e16fa88 	.word	0x3e16fa88
 8002bd0:	3f7ffe45 	.word	0x3f7ffe45
 8002bd4:	34a8dfa7 	.word	0x34a8dfa7
 8002bd8:	3f24fb99 	.word	0x3f24fb99
 8002bdc:	3e16a269 	.word	0x3e16a269
 8002be0:	3fc90fdb 	.word	0x3fc90fdb
 8002be4:	40490fdb 	.word	0x40490fdb

08002be8 <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_  *pid_in,float kp, float ki, float kd,float f_cut_err, float f_cut_D, float maxI){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	61f8      	str	r0, [r7, #28]
 8002bf0:	ed87 0a06 	vstr	s0, [r7, #24]
 8002bf4:	edc7 0a05 	vstr	s1, [r7, #20]
 8002bf8:	ed87 1a04 	vstr	s2, [r7, #16]
 8002bfc:	edc7 1a03 	vstr	s3, [r7, #12]
 8002c00:	ed87 2a02 	vstr	s4, [r7, #8]
 8002c04:	edc7 2a01 	vstr	s5, [r7, #4]
  memset(pid_in,0,sizeof(pid_));
 8002c08:	222c      	movs	r2, #44	; 0x2c
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	69f8      	ldr	r0, [r7, #28]
 8002c0e:	f00d f957 	bl	800fec0 <memset>
  pid_in->err = 0.0f;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
  pid_in->err_fcut = f_cut_err;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
  pid_in->kp = kp;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	609a      	str	r2, [r3, #8]
  pid_in->ki = ki;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	60da      	str	r2, [r3, #12]
  pid_in->kd = kd;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	611a      	str	r2, [r3, #16]
  pid_in->f_cut_D = f_cut_D;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
  pid_in->I_range = maxI;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	621a      	str	r2, [r3, #32]
  pid_in->last_input = 0;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  pid_in->D_filted = 0;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  pid_in->init = 1;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002c56:	bf00      	nop
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	//htimmz = htimz;
	HAL_TIM_Base_Start_IT(&htim4);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <timer_start+0x10>)
 8002c66:	f004 f9f7 	bl	8007058 <HAL_TIM_Base_Start_IT>
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20004684 	.word	0x20004684

08002c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <MX_DMA_Init+0x88>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <MX_DMA_Init+0x88>)
 8002c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <MX_DMA_Init+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <MX_DMA_Init+0x88>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <MX_DMA_Init+0x88>)
 8002ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <MX_DMA_Init+0x88>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2105      	movs	r1, #5
 8002cb6:	200c      	movs	r0, #12
 8002cb8:	f001 fc74 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002cbc:	200c      	movs	r0, #12
 8002cbe:	f001 fc8d 	bl	80045dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 11, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	210b      	movs	r1, #11
 8002cc6:	203b      	movs	r0, #59	; 0x3b
 8002cc8:	f001 fc6c 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002ccc:	203b      	movs	r0, #59	; 0x3b
 8002cce:	f001 fc85 	bl	80045dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	210b      	movs	r1, #11
 8002cd6:	2045      	movs	r0, #69	; 0x45
 8002cd8:	f001 fc64 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002cdc:	2045      	movs	r0, #69	; 0x45
 8002cde:	f001 fc7d 	bl	80045dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2105      	movs	r1, #5
 8002ce6:	2046      	movs	r0, #70	; 0x46
 8002ce8:	f001 fc5c 	bl	80045a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002cec:	2046      	movs	r0, #70	; 0x46
 8002cee:	f001 fc75 	bl	80045dc <HAL_NVIC_EnableIRQ>

}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    if(huart == &huart2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <HAL_UART_RxCpltCallback+0x2c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <HAL_UART_RxCpltCallback+0x16>
	{
		ibus_calback();
 8002d10:	f7fe f8ee 	bl	8000ef0 <ibus_calback>
    }
   else if(huart == &huart3){
      gps_DMA_callback();
   // 	gps_callback();
   }
}
 8002d14:	e005      	b.n	8002d22 <HAL_UART_RxCpltCallback+0x22>
   else if(huart == &huart3){
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_UART_RxCpltCallback+0x30>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_RxCpltCallback+0x22>
      gps_DMA_callback();
 8002d1e:	f7ff fda5 	bl	800286c <gps_DMA_callback>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000485c 	.word	0x2000485c
 8002d30:	20004774 	.word	0x20004774

08002d34 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_UART_TxCpltCallback+0x1c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8002d44:	f001 fb04 	bl	8004350 <mavlink_tx_cpl_callback>
    }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20004818 	.word	0x20004818

08002d54 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b094      	sub	sp, #80	; 0x50
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	timer_start(&htim4);
 8002d5a:	4824      	ldr	r0, [pc, #144]	; (8002dec <MX_FREERTOS_Init+0x98>)
 8002d5c:	f7ff ff80 	bl	8002c60 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, blackbox_task, osPriorityLow, 0, 512);
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <MX_FREERTOS_Init+0x9c>)
 8002d62:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002d66:	461d      	mov	r5, r3
 8002d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	6023      	str	r3, [r4, #0]
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8002d70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f00a f987 	bl	800d08a <osThreadCreate>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <MX_FREERTOS_Init+0xa0>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, ahrs_task, osPriorityHigh, 0, 512);
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <MX_FREERTOS_Init+0xa4>)
 8002d84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d88:	461d      	mov	r5, r3
 8002d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	6023      	str	r3, [r4, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8002d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f00a f976 	bl	800d08a <osThreadCreate>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <MX_FREERTOS_Init+0xa8>)
 8002da2:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, sensor_task, osPriorityRealtime, 0, 512);
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <MX_FREERTOS_Init+0xac>)
 8002da6:	f107 0414 	add.w	r4, r7, #20
 8002daa:	461d      	mov	r5, r3
 8002dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	6023      	str	r3, [r4, #0]
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00a f965 	bl	800d08a <osThreadCreate>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <MX_FREERTOS_Init+0xb0>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, osd_task, osPriorityLow, 0, 512);
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <MX_FREERTOS_Init+0xb4>)
 8002dc8:	463c      	mov	r4, r7
 8002dca:	461d      	mov	r5, r3
 8002dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	6023      	str	r3, [r4, #0]
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f00a f956 	bl	800d08a <osThreadCreate>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <MX_FREERTOS_Init+0xb8>)
 8002de2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002de4:	bf00      	nop
 8002de6:	3750      	adds	r7, #80	; 0x50
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bdb0      	pop	{r4, r5, r7, pc}
 8002dec:	20004684 	.word	0x20004684
 8002df0:	080115a8 	.word	0x080115a8
 8002df4:	20004430 	.word	0x20004430
 8002df8:	080115bc 	.word	0x080115bc
 8002dfc:	2000444c 	.word	0x2000444c
 8002e00:	080115d0 	.word	0x080115d0
 8002e04:	20004444 	.word	0x20004444
 8002e08:	080115e4 	.word	0x080115e4
 8002e0c:	2000443c 	.word	0x2000443c

08002e10 <blackbox_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blackbox_task */
void blackbox_task(void const * argument)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
		black_box_init();
 8002e18:	f7ff fb70 	bl	80024fc <black_box_init>
		black_box_reset = TRUE;
 8002e1c:	4b96      	ldr	r3, [pc, #600]	; (8003078 <blackbox_task+0x268>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
		TickType_t xLastWakeTime;
		const TickType_t xFrequency = 100;  // 
 8002e22:	2364      	movs	r3, #100	; 0x64
 8002e24:	617b      	str	r3, [r7, #20]
		xLastWakeTime = xTaskGetTickCount();
 8002e26:	f00b fe7b 	bl	800eb20 <xTaskGetTickCount>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	60bb      	str	r3, [r7, #8]
	  /* Infinite loop */
	  for(;;)
	  {
			static uint32_t start_time_ms;
			if(black_box_reset){
 8002e2e:	4b92      	ldr	r3, [pc, #584]	; (8003078 <blackbox_task+0x268>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d011      	beq.n	8002e5a <blackbox_task+0x4a>
				black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 8002e36:	4891      	ldr	r0, [pc, #580]	; (800307c <blackbox_task+0x26c>)
 8002e38:	f7ff fc28 	bl	800268c <black_box_pack_str>
				black_box_reset = FALSE;
 8002e3c:	4b8e      	ldr	r3, [pc, #568]	; (8003078 <blackbox_task+0x268>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
				start_time_ms = millis();
 8002e42:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <blackbox_task+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e48:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <blackbox_task+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a8e      	ldr	r2, [pc, #568]	; (8003088 <blackbox_task+0x278>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	4a8d      	ldr	r2, [pc, #564]	; (800308c <blackbox_task+0x27c>)
 8002e58:	6013      	str	r3, [r2, #0]
			}
			uint32_t time_ms =  millis() - start_time_ms;
 8002e5a:	4b89      	ldr	r3, [pc, #548]	; (8003080 <blackbox_task+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e60:	4b88      	ldr	r3, [pc, #544]	; (8003084 <blackbox_task+0x274>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a88      	ldr	r2, [pc, #544]	; (8003088 <blackbox_task+0x278>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	099a      	lsrs	r2, r3, #6
 8002e6e:	4b87      	ldr	r3, [pc, #540]	; (800308c <blackbox_task+0x27c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	613b      	str	r3, [r7, #16]
			// control thortle 0 -> 100%
			int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 8002e76:	4b86      	ldr	r3, [pc, #536]	; (8003090 <blackbox_task+0x280>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd faf8 	bl	8000474 <__aeabi_i2d>
 8002e84:	a37a      	add	r3, pc, #488	; (adr r3, 8003070 <blackbox_task+0x260>)
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f7fd fb5d 	bl	8000548 <__aeabi_dmul>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd fe07 	bl	8000aa8 <__aeabi_d2iz>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60fb      	str	r3, [r7, #12]

			// tx signal 0 -> 100 %
			//int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;

			/*** write time  ***/
			black_box_pack_int(time_ms);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fb59 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002ea6:	2020      	movs	r0, #32
 8002ea8:	f7ff fc2a 	bl	8002700 <black_box_pack_char>

			/*---- control parameters ---*/
			black_box_pack_int((int)servoL);
 8002eac:	4b79      	ldr	r3, [pc, #484]	; (8003094 <blackbox_task+0x284>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fb51 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002eb6:	2020      	movs	r0, #32
 8002eb8:	f7ff fc22 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)servoR);
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <blackbox_task+0x288>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fb49 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002ec6:	2020      	movs	r0, #32
 8002ec8:	f7ff fc1a 	bl	8002700 <black_box_pack_char>
			black_box_pack_int(throtle);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff fb43 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002ed2:	2020      	movs	r0, #32
 8002ed4:	f7ff fc14 	bl	8002700 <black_box_pack_char>
#ifndef HIL
			black_box_pack_int(srri);
			black_box_pack_char(' ');
#endif
			/*----- attitude ---------------------*/
			black_box_pack_int((int)(AHRS.roll*100));
 8002ed8:	4b70      	ldr	r3, [pc, #448]	; (800309c <blackbox_task+0x28c>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80030a0 <blackbox_task+0x290>
 8002ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eea:	ee17 0a90 	vmov	r0, s15
 8002eee:	f7ff fb33 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002ef2:	2020      	movs	r0, #32
 8002ef4:	f7ff fc04 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(roll_desired*100));
 8002ef8:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <blackbox_task+0x294>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80030a0 <blackbox_task+0x290>
 8002f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f0a:	ee17 0a90 	vmov	r0, s15
 8002f0e:	f7ff fb23 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002f12:	2020      	movs	r0, #32
 8002f14:	f7ff fbf4 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.p*100));
 8002f18:	4b60      	ldr	r3, [pc, #384]	; (800309c <blackbox_task+0x28c>)
 8002f1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f1e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80030a0 <blackbox_task+0x290>
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f2a:	ee17 0a90 	vmov	r0, s15
 8002f2e:	f7ff fb13 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002f32:	2020      	movs	r0, #32
 8002f34:	f7ff fbe4 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.roll_rate*100));
 8002f38:	4b58      	ldr	r3, [pc, #352]	; (800309c <blackbox_task+0x28c>)
 8002f3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f3e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80030a0 <blackbox_task+0x290>
 8002f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f4a:	ee17 0a90 	vmov	r0, s15
 8002f4e:	f7ff fb03 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002f52:	2020      	movs	r0, #32
 8002f54:	f7ff fbd4 	bl	8002700 <black_box_pack_char>

			black_box_pack_int((int)(AHRS.pitch*100));// cm
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <blackbox_task+0x28c>)
 8002f5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f5e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80030a0 <blackbox_task+0x290>
 8002f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6a:	ee17 0a90 	vmov	r0, s15
 8002f6e:	f7ff faf3 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002f72:	2020      	movs	r0, #32
 8002f74:	f7ff fbc4 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(pitch_desired*100));
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <blackbox_task+0x298>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80030a0 <blackbox_task+0x290>
 8002f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8a:	ee17 0a90 	vmov	r0, s15
 8002f8e:	f7ff fae3 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002f92:	2020      	movs	r0, #32
 8002f94:	f7ff fbb4 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.q*100));
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <blackbox_task+0x28c>)
 8002f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f9e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80030a0 <blackbox_task+0x290>
 8002fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002faa:	ee17 0a90 	vmov	r0, s15
 8002fae:	f7ff fad3 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002fb2:	2020      	movs	r0, #32
 8002fb4:	f7ff fba4 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.pitch_rate*100));
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <blackbox_task+0x28c>)
 8002fba:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fbe:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80030a0 <blackbox_task+0x290>
 8002fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fca:	ee17 0a90 	vmov	r0, s15
 8002fce:	f7ff fac3 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002fd2:	2020      	movs	r0, #32
 8002fd4:	f7ff fb94 	bl	8002700 <black_box_pack_char>

			black_box_pack_int((int)(AHRS.yaw*100));
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <blackbox_task+0x28c>)
 8002fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fde:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80030a0 <blackbox_task+0x290>
 8002fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fea:	ee17 0a90 	vmov	r0, s15
 8002fee:	f7ff fab3 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8002ff2:	2020      	movs	r0, #32
 8002ff4:	f7ff fb84 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.r*100));
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <blackbox_task+0x28c>)
 8002ffa:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ffe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80030a0 <blackbox_task+0x290>
 8003002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800300a:	ee17 0a90 	vmov	r0, s15
 800300e:	f7ff faa3 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8003012:	2020      	movs	r0, #32
 8003014:	f7ff fb74 	bl	8002700 <black_box_pack_char>
			black_box_pack_int((int)(AHRS.yaw_rate*100));
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <blackbox_task+0x28c>)
 800301a:	edd3 7a08 	vldr	s15, [r3, #32]
 800301e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030a0 <blackbox_task+0x290>
 8003022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800302a:	ee17 0a90 	vmov	r0, s15
 800302e:	f7ff fa93 	bl	8002558 <black_box_pack_int>
			black_box_pack_char(' ');
 8003032:	2020      	movs	r0, #32
 8003034:	f7ff fb64 	bl	8002700 <black_box_pack_char>
			black_box_pack_int(baro_alt);   // cm
#endif

			/*----- end line && load data to sd card- -----*/
			//sdcard_fsize = black_box_get_file_size();
			black_box_pack_char('\n');
 8003038:	200a      	movs	r0, #10
 800303a:	f7ff fb61 	bl	8002700 <black_box_pack_char>
			black_box_load();
 800303e:	f7ff fb79 	bl	8002734 <black_box_load>
            // if write ok
			if(puts_state != -1){
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <blackbox_task+0x29c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d003      	beq.n	8003054 <blackbox_task+0x244>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800304c:	2110      	movs	r1, #16
 800304e:	4818      	ldr	r0, [pc, #96]	; (80030b0 <blackbox_task+0x2a0>)
 8003050:	f002 f8ad 	bl	80051ae <HAL_GPIO_TogglePin>
			}
		vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	6979      	ldr	r1, [r7, #20]
 800305a:	4618      	mov	r0, r3
 800305c:	f00b fa92 	bl	800e584 <vTaskDelayUntil>
#ifdef STACK_DEBUG
	    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8003060:	2000      	movs	r0, #0
 8003062:	f00c f845 	bl	800f0f0 <uxTaskGetStackHighWaterMark>
 8003066:	4603      	mov	r3, r0
 8003068:	b29a      	uxth	r2, r3
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <blackbox_task+0x2a4>)
 800306c:	801a      	strh	r2, [r3, #0]
	  {
 800306e:	e6de      	b.n	8002e2e <blackbox_task+0x1e>
 8003070:	9999999a 	.word	0x9999999a
 8003074:	3fb99999 	.word	0x3fb99999
 8003078:	20004434 	.word	0x20004434
 800307c:	080115f8 	.word	0x080115f8
 8003080:	20004684 	.word	0x20004684
 8003084:	20004428 	.word	0x20004428
 8003088:	10624dd3 	.word	0x10624dd3
 800308c:	200001c4 	.word	0x200001c4
 8003090:	2000401c 	.word	0x2000401c
 8003094:	200048d0 	.word	0x200048d0
 8003098:	200048a4 	.word	0x200048a4
 800309c:	200043e0 	.word	0x200043e0
 80030a0:	42c80000 	.word	0x42c80000
 80030a4:	200048bc 	.word	0x200048bc
 80030a8:	200048b0 	.word	0x200048b0
 80030ac:	20004294 	.word	0x20004294
 80030b0:	40020000 	.word	0x40020000
 80030b4:	20004440 	.word	0x20004440

080030b8 <ahrs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
	attitude_ctrl_init();
 80030c0:	f001 f87e 	bl	80041c0 <attitude_ctrl_init>
	initPWM(&htim3);
	compassInit();
	gps_init(&huart3,38400);
	baro_init();
#endif
	mavlinkInit(1,1,&huart1,115200);
 80030c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <ahrs_task+0xe4>)
 80030ca:	2101      	movs	r1, #1
 80030cc:	2001      	movs	r0, #1
 80030ce:	f001 f90f 	bl	80042f0 <mavlinkInit>
	ibus_init(&huart2);
 80030d2:	4833      	ldr	r0, [pc, #204]	; (80031a0 <ahrs_task+0xe8>)
 80030d4:	f7fd fedc 	bl	8000e90 <ibus_init>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 80030d8:	230a      	movs	r3, #10
 80030da:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 80030dc:	f00b fd20 	bl	800eb20 <xTaskGetTickCount>
 80030e0:	4603      	mov	r3, r0
 80030e2:	60bb      	str	r3, [r7, #8]
	// gps
	gps_readout();
	update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],0.01);
	attitude_ctrl_start(0.01);
#endif
	ibusFrameComplete();
 80030e4:	f7fd ff60 	bl	8000fa8 <ibusFrameComplete>
    // start dynamic mode
	uint16_t thrust = ibusChannelData[CH3];
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <ahrs_task+0xec>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	827b      	strh	r3, [r7, #18]
	uint16_t servoLL = ibusChannelData[CH2];
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <ahrs_task+0xec>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	823b      	strh	r3, [r7, #16]
	uint16_t servoRR = ibusChannelData[CH1];
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <ahrs_task+0xec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	81fb      	strh	r3, [r7, #14]
	dynamic_control(thrust,servoLL,servoRR);
 80030fa:	89fa      	ldrh	r2, [r7, #14]
 80030fc:	8a39      	ldrh	r1, [r7, #16]
 80030fe:	8a7b      	ldrh	r3, [r7, #18]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe f823 	bl	800114c <dynamic_control>
	dynamic_loop(0.01);
 8003106:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80031a8 <ahrs_task+0xf0>
 800310a:	f7fe f869 	bl	80011e0 <dynamic_loop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,0);
	}
*/

	static uint32_t gps_tim_ms;
	if(millis() - gps_tim_ms > 200){
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <ahrs_task+0xf4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <ahrs_task+0xf8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4413      	add	r3, r2
 800311a:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <ahrs_task+0xfc>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099a      	lsrs	r2, r3, #6
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <ahrs_task+0x100>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2bc8      	cmp	r3, #200	; 0xc8
 800312a:	d914      	bls.n	8003156 <ahrs_task+0x9e>
	   if(_gps.fix > 1){
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <ahrs_task+0x104>)
 800312e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003132:	2b01      	cmp	r3, #1
 8003134:	d903      	bls.n	800313e <ahrs_task+0x86>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003136:	2120      	movs	r1, #32
 8003138:	4821      	ldr	r0, [pc, #132]	; (80031c0 <ahrs_task+0x108>)
 800313a:	f002 f838 	bl	80051ae <HAL_GPIO_TogglePin>
	   }
	   gps_tim_ms = millis();
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <ahrs_task+0xf4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <ahrs_task+0xf8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4413      	add	r3, r2
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <ahrs_task+0xfc>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <ahrs_task+0x100>)
 8003154:	6013      	str	r3, [r2, #0]
	}

	if(ibusChannelData[CH6] < CHANNEL_HIGH ){
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <ahrs_task+0xec>)
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800315e:	4293      	cmp	r3, r2
 8003160:	d808      	bhi.n	8003174 <ahrs_task+0xbc>
		vTaskSuspend(task1Handle);
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <ahrs_task+0x10c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f00b fabe 	bl	800e6e8 <vTaskSuspend>
		black_box_reset = TRUE;
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <ahrs_task+0x110>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e004      	b.n	800317e <ahrs_task+0xc6>
	}
	else{
		vTaskResume(task1Handle);
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <ahrs_task+0x10c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f00b fb79 	bl	800e870 <vTaskResume>
	}

	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	4618      	mov	r0, r3
 8003186:	f00b f9fd 	bl	800e584 <vTaskDelayUntil>
#ifdef STACK_DEBUG
	stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 800318a:	2000      	movs	r0, #0
 800318c:	f00b ffb0 	bl	800f0f0 <uxTaskGetStackHighWaterMark>
 8003190:	4603      	mov	r3, r0
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <ahrs_task+0x114>)
 8003196:	801a      	strh	r2, [r3, #0]
  {
 8003198:	e7a4      	b.n	80030e4 <ahrs_task+0x2c>
 800319a:	bf00      	nop
 800319c:	20004818 	.word	0x20004818
 80031a0:	2000485c 	.word	0x2000485c
 80031a4:	2000401c 	.word	0x2000401c
 80031a8:	3c23d70a 	.word	0x3c23d70a
 80031ac:	20004684 	.word	0x20004684
 80031b0:	20004428 	.word	0x20004428
 80031b4:	10624dd3 	.word	0x10624dd3
 80031b8:	200001c8 	.word	0x200001c8
 80031bc:	200042a4 	.word	0x200042a4
 80031c0:	40020000 	.word	0x40020000
 80031c4:	20004430 	.word	0x20004430
 80031c8:	20004434 	.word	0x20004434
 80031cc:	2000444a 	.word	0x2000444a

080031d0 <sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_task */
void sensor_task(void const * argument)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
#ifdef HIL
	vTaskSuspend(NULL);
 80031d8:	2000      	movs	r0, #0
 80031da:	f00b fa85 	bl	800e6e8 <vTaskSuspend>
	//i2cDectect(&hi2c2);
	HAL_Delay(2000);
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
#endif
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 80031de:	2302      	movs	r3, #2
 80031e0:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80031e2:	f00b fc9d 	bl	800eb20 <xTaskGetTickCount>
 80031e6:	4603      	mov	r3, r0
 80031e8:	60bb      	str	r3, [r7, #8]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
#endif
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
#ifdef STACK_DEBUG
		stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 80031ea:	2000      	movs	r0, #0
 80031ec:	f00b ff80 	bl	800f0f0 <uxTaskGetStackHighWaterMark>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <sensor_task+0x38>)
 80031f6:	801a      	strh	r2, [r3, #0]
#endif
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80031f8:	f107 0308 	add.w	r3, r7, #8
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	f00b f9c0 	bl	800e584 <vTaskDelayUntil>
		stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8003204:	e7f1      	b.n	80031ea <sensor_task+0x1a>
 8003206:	bf00      	nop
 8003208:	2000442c 	.word	0x2000442c

0800320c <osd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_osd_task */
void osd_task(void const * argument)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN osd_task */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003218:	4807      	ldr	r0, [pc, #28]	; (8003238 <osd_task+0x2c>)
 800321a:	f001 ffc8 	bl	80051ae <HAL_GPIO_TogglePin>
	osDelay(1000);
 800321e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003222:	f009 ff59 	bl	800d0d8 <osDelay>
#ifdef STACK_DEBUG
	stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8003226:	2000      	movs	r0, #0
 8003228:	f00b ff62 	bl	800f0f0 <uxTaskGetStackHighWaterMark>
 800322c:	4603      	mov	r3, r0
 800322e:	b29a      	uxth	r2, r3
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <osd_task+0x30>)
 8003232:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003234:	e7ee      	b.n	8003214 <osd_task+0x8>
 8003236:	bf00      	nop
 8003238:	40020800 	.word	0x40020800
 800323c:	20004448 	.word	0x20004448

08003240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b58      	ldr	r3, [pc, #352]	; (80033bc <MX_GPIO_Init+0x17c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a57      	ldr	r2, [pc, #348]	; (80033bc <MX_GPIO_Init+0x17c>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b55      	ldr	r3, [pc, #340]	; (80033bc <MX_GPIO_Init+0x17c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b51      	ldr	r3, [pc, #324]	; (80033bc <MX_GPIO_Init+0x17c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a50      	ldr	r2, [pc, #320]	; (80033bc <MX_GPIO_Init+0x17c>)
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b4e      	ldr	r3, [pc, #312]	; (80033bc <MX_GPIO_Init+0x17c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <MX_GPIO_Init+0x17c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a49      	ldr	r2, [pc, #292]	; (80033bc <MX_GPIO_Init+0x17c>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a42      	ldr	r2, [pc, #264]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b40      	ldr	r3, [pc, #256]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a3b      	ldr	r2, [pc, #236]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <MX_GPIO_Init+0x17c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032e2:	2200      	movs	r2, #0
 80032e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032e8:	4835      	ldr	r0, [pc, #212]	; (80033c0 <MX_GPIO_Init+0x180>)
 80032ea:	f001 ff47 	bl	800517c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2132      	movs	r1, #50	; 0x32
 80032f2:	4834      	ldr	r0, [pc, #208]	; (80033c4 <MX_GPIO_Init+0x184>)
 80032f4:	f001 ff42 	bl	800517c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	4832      	ldr	r0, [pc, #200]	; (80033c8 <MX_GPIO_Init+0x188>)
 80032fe:	f001 ff3d 	bl	800517c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	2118      	movs	r1, #24
 8003306:	4831      	ldr	r0, [pc, #196]	; (80033cc <MX_GPIO_Init+0x18c>)
 8003308:	f001 ff38 	bl	800517c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800330c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003312:	2301      	movs	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	4826      	ldr	r0, [pc, #152]	; (80033c0 <MX_GPIO_Init+0x180>)
 8003326:	f001 fd75 	bl	8004e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800332a:	2302      	movs	r3, #2
 800332c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003332:	2302      	movs	r3, #2
 8003334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4820      	ldr	r0, [pc, #128]	; (80033c4 <MX_GPIO_Init+0x184>)
 8003342:	f001 fd67 	bl	8004e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003346:	2330      	movs	r3, #48	; 0x30
 8003348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	4819      	ldr	r0, [pc, #100]	; (80033c4 <MX_GPIO_Init+0x184>)
 800335e:	f001 fd59 	bl	8004e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003366:	2301      	movs	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	4619      	mov	r1, r3
 8003378:	4813      	ldr	r0, [pc, #76]	; (80033c8 <MX_GPIO_Init+0x188>)
 800337a:	f001 fd4b 	bl	8004e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800337e:	2318      	movs	r3, #24
 8003380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003382:	2301      	movs	r3, #1
 8003384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	480d      	ldr	r0, [pc, #52]	; (80033cc <MX_GPIO_Init+0x18c>)
 8003396:	f001 fd3d 	bl	8004e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800339a:	2320      	movs	r3, #32
 800339c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033a2:	2302      	movs	r3, #2
 80033a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	4807      	ldr	r0, [pc, #28]	; (80033cc <MX_GPIO_Init+0x18c>)
 80033ae:	f001 fd31 	bl	8004e14 <HAL_GPIO_Init>

}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40020400 	.word	0x40020400

080033d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <MX_I2C1_Init+0x50>)
 80033d6:	4a13      	ldr	r2, [pc, #76]	; (8003424 <MX_I2C1_Init+0x54>)
 80033d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_I2C1_Init+0x50>)
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <MX_I2C1_Init+0x58>)
 80033de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <MX_I2C1_Init+0x50>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_I2C1_Init+0x50>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_I2C1_Init+0x50>)
 80033ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <MX_I2C1_Init+0x50>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_I2C1_Init+0x50>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <MX_I2C1_Init+0x50>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <MX_I2C1_Init+0x50>)
 8003408:	2200      	movs	r2, #0
 800340a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800340c:	4804      	ldr	r0, [pc, #16]	; (8003420 <MX_I2C1_Init+0x50>)
 800340e:	f001 fee9 	bl	80051e4 <HAL_I2C_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003418:	f000 f95c 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20004450 	.word	0x20004450
 8003424:	40005400 	.word	0x40005400
 8003428:	00061a80 	.word	0x00061a80

0800342c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <MX_I2C2_Init+0x50>)
 8003432:	4a13      	ldr	r2, [pc, #76]	; (8003480 <MX_I2C2_Init+0x54>)
 8003434:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_I2C2_Init+0x50>)
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <MX_I2C2_Init+0x58>)
 800343a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <MX_I2C2_Init+0x50>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_I2C2_Init+0x50>)
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <MX_I2C2_Init+0x50>)
 800344a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800344e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <MX_I2C2_Init+0x50>)
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <MX_I2C2_Init+0x50>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <MX_I2C2_Init+0x50>)
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <MX_I2C2_Init+0x50>)
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003468:	4804      	ldr	r0, [pc, #16]	; (800347c <MX_I2C2_Init+0x50>)
 800346a:	f001 febb 	bl	80051e4 <HAL_I2C_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003474:	f000 f92e 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200044a4 	.word	0x200044a4
 8003480:	40005800 	.word	0x40005800
 8003484:	00061a80 	.word	0x00061a80

08003488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_I2C_MspInit+0xe8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d12c      	bne.n	8003504 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_I2C_MspInit+0xec>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a30      	ldr	r2, [pc, #192]	; (8003574 <HAL_I2C_MspInit+0xec>)
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <HAL_I2C_MspInit+0xec>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034c6:	23c0      	movs	r3, #192	; 0xc0
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ca:	2312      	movs	r3, #18
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034d6:	2304      	movs	r3, #4
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	4619      	mov	r1, r3
 80034e0:	4825      	ldr	r0, [pc, #148]	; (8003578 <HAL_I2C_MspInit+0xf0>)
 80034e2:	f001 fc97 	bl	8004e14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_I2C_MspInit+0xec>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_I2C_MspInit+0xec>)
 80034f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_I2C_MspInit+0xec>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003502:	e031      	b.n	8003568 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_I2C_MspInit+0xf4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d12c      	bne.n	8003568 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_I2C_MspInit+0xec>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_I2C_MspInit+0xec>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_I2C_MspInit+0xec>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800352a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800352e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003530:	2312      	movs	r3, #18
 8003532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800353c:	2304      	movs	r3, #4
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	4619      	mov	r1, r3
 8003546:	480c      	ldr	r0, [pc, #48]	; (8003578 <HAL_I2C_MspInit+0xf0>)
 8003548:	f001 fc64 	bl	8004e14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_I2C_MspInit+0xec>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <HAL_I2C_MspInit+0xec>)
 8003556:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_I2C_MspInit+0xec>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	bf00      	nop
 800356a:	3730      	adds	r7, #48	; 0x30
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40005400 	.word	0x40005400
 8003574:	40023800 	.word	0x40023800
 8003578:	40020400 	.word	0x40020400
 800357c:	40005800 	.word	0x40005800

08003580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003584:	f000 fef0 	bl	8004368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003588:	f000 f81c 	bl	80035c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358c:	f7ff fe58 	bl	8003240 <MX_GPIO_Init>
  MX_DMA_Init();
 8003590:	f7ff fb70 	bl	8002c74 <MX_DMA_Init>
  MX_I2C1_Init();
 8003594:	f7ff ff1c 	bl	80033d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003598:	f7ff ff48 	bl	800342c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800359c:	f000 f8a0 	bl	80036e0 <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 80035a0:	f000 fac4 	bl	8003b2c <MX_TIM3_Init>
  MX_TIM4_Init();
 80035a4:	f000 fb4e 	bl	8003c44 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80035a8:	f000 fc32 	bl	8003e10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80035ac:	f000 fc5a 	bl	8003e64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80035b0:	f000 fc82 	bl	8003eb8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80035b4:	f006 f83e 	bl	8009634 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80035b8:	f7ff fbcc 	bl	8002d54 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80035bc:	f009 fd42 	bl	800d044 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <main+0x40>
	...

080035c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b094      	sub	sp, #80	; 0x50
 80035c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ca:	f107 0320 	add.w	r3, r7, #32
 80035ce:	2230      	movs	r2, #48	; 0x30
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f00c fc74 	bl	800fec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <SystemClock_Config+0xcc>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <SystemClock_Config+0xcc>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6413      	str	r3, [r2, #64]	; 0x40
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <SystemClock_Config+0xcc>)
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003604:	2300      	movs	r3, #0
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	4b22      	ldr	r3, [pc, #136]	; (8003694 <SystemClock_Config+0xd0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a21      	ldr	r2, [pc, #132]	; (8003694 <SystemClock_Config+0xd0>)
 800360e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <SystemClock_Config+0xd0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003624:	2301      	movs	r3, #1
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003628:	2310      	movs	r3, #16
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800362c:	2302      	movs	r3, #2
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003630:	2300      	movs	r3, #0
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003634:	2308      	movs	r3, #8
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003638:	23a8      	movs	r3, #168	; 0xa8
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800363c:	2302      	movs	r3, #2
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003640:	2307      	movs	r3, #7
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003644:	f107 0320 	add.w	r3, r7, #32
 8003648:	4618      	mov	r0, r3
 800364a:	f001 ff0f 	bl	800546c <HAL_RCC_OscConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003654:	f000 f83e 	bl	80036d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003658:	230f      	movs	r3, #15
 800365a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800365c:	2302      	movs	r3, #2
 800365e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800366a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	2105      	movs	r1, #5
 8003676:	4618      	mov	r0, r3
 8003678:	f002 f970 	bl	800595c <HAL_RCC_ClockConfig>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003682:	f000 f827 	bl	80036d4 <Error_Handler>
  }
}
 8003686:	bf00      	nop
 8003688:	3750      	adds	r7, #80	; 0x50
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000

08003698 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036aa:	f000 fe7f 	bl	80043ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim == &htim4)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		TIMER_CALLBACK();
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80036be:	33ff      	adds	r3, #255	; 0xff
 80036c0:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80036c2:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20004684 	.word	0x20004684
 80036d0:	20004428 	.word	0x20004428

080036d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036d8:	b672      	cpsid	i
}
 80036da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036dc:	e7fe      	b.n	80036dc <Error_Handler+0x8>
	...

080036e0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <MX_SDIO_SD_Init+0x44>)
 80036e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 800370a:	220a      	movs	r2, #10
 800370c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 4;
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <MX_SDIO_SD_Init+0x40>)
 8003710:	2204      	movs	r2, #4
 8003712:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	200045b8 	.word	0x200045b8
 8003724:	40012c00 	.word	0x40012c00

08003728 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a68      	ldr	r2, [pc, #416]	; (80038e8 <HAL_SD_MspInit+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f040 80c9 	bne.w	80038de <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	4b66      	ldr	r3, [pc, #408]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	4a65      	ldr	r2, [pc, #404]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 8003756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800375a:	6453      	str	r3, [r2, #68]	; 0x44
 800375c:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	4a5e      	ldr	r2, [pc, #376]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	6313      	str	r3, [r2, #48]	; 0x30
 8003778:	4b5c      	ldr	r3, [pc, #368]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 800378e:	f043 0308 	orr.w	r3, r3, #8
 8003792:	6313      	str	r3, [r2, #48]	; 0x30
 8003794:	4b55      	ldr	r3, [pc, #340]	; (80038ec <HAL_SD_MspInit+0x1c4>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80037a0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80037a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ae:	2303      	movs	r3, #3
 80037b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80037b2:	230c      	movs	r3, #12
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	4619      	mov	r1, r3
 80037bc:	484c      	ldr	r0, [pc, #304]	; (80038f0 <HAL_SD_MspInit+0x1c8>)
 80037be:	f001 fb29 	bl	8004e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037c2:	2304      	movs	r3, #4
 80037c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80037d2:	230c      	movs	r3, #12
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	4619      	mov	r1, r3
 80037dc:	4845      	ldr	r0, [pc, #276]	; (80038f4 <HAL_SD_MspInit+0x1cc>)
 80037de:	f001 fb19 	bl	8004e14 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80037e2:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 80037e4:	4a45      	ldr	r2, [pc, #276]	; (80038fc <HAL_SD_MspInit+0x1d4>)
 80037e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80037e8:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 80037ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f0:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037f6:	4b40      	ldr	r3, [pc, #256]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037fc:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 80037fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003802:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800380a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800380c:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 800380e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003812:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003814:	4b38      	ldr	r3, [pc, #224]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003816:	2220      	movs	r2, #32
 8003818:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003820:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003822:	2204      	movs	r2, #4
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003828:	2203      	movs	r2, #3
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 800382e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003836:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800383c:	482e      	ldr	r0, [pc, #184]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 800383e:	f000 fedb 	bl	80045f8 <HAL_DMA_Init>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8003848:	f7ff ff44 	bl	80036d4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
 8003852:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <HAL_SD_MspInit+0x1d0>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <HAL_SD_MspInit+0x1dc>)
 800385c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 8003860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003864:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 8003874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003878:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 800387c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003880:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 8003884:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003888:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 800388c:	2220      	movs	r2, #32
 800388e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 8003898:	2204      	movs	r2, #4
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 800389e:	2203      	movs	r2, #3
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 80038a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 80038ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80038b2:	4813      	ldr	r0, [pc, #76]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 80038b4:	f000 fea0 	bl	80045f8 <HAL_DMA_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80038be:	f7ff ff09 	bl	80036d4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_SD_MspInit+0x1d8>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 11, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	210b      	movs	r1, #11
 80038d2:	2031      	movs	r0, #49	; 0x31
 80038d4:	f000 fe66 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80038d8:	2031      	movs	r0, #49	; 0x31
 80038da:	f000 fe7f 	bl	80045dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	200044f8 	.word	0x200044f8
 80038fc:	40026458 	.word	0x40026458
 8003900:	20004558 	.word	0x20004558
 8003904:	400264a0 	.word	0x400264a0

08003908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_MspInit+0x54>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <HAL_MspInit+0x54>)
 8003918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391c:	6453      	str	r3, [r2, #68]	; 0x44
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_MspInit+0x54>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_MspInit+0x54>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_MspInit+0x54>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_MspInit+0x54>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	210f      	movs	r1, #15
 800394a:	f06f 0001 	mvn.w	r0, #1
 800394e:	f000 fe29 	bl	80045a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8003970:	2200      	movs	r2, #0
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	201c      	movs	r0, #28
 8003976:	f000 fe15 	bl	80045a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800397a:	201c      	movs	r0, #28
 800397c:	f000 fe2e 	bl	80045dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_InitTick+0xa8>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_InitTick+0xa8>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_InitTick+0xa8>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800399c:	f107 0210 	add.w	r2, r7, #16
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 f9a8 	bl	8005cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80039ac:	f002 f97e 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 80039b0:	4603      	mov	r3, r0
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <HAL_InitTick+0xac>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0c9b      	lsrs	r3, r3, #18
 80039c0:	3b01      	subs	r3, #1
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80039c4:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_InitTick+0xb0>)
 80039c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_InitTick+0xb0>)
 80039ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <HAL_InitTick+0xb0>)
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_InitTick+0xb0>)
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_InitTick+0xb0>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80039e6:	480a      	ldr	r0, [pc, #40]	; (8003a10 <HAL_InitTick+0xb0>)
 80039e8:	f003 fae6 	bl	8006fb8 <HAL_TIM_Base_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d104      	bne.n	80039fc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80039f2:	4807      	ldr	r0, [pc, #28]	; (8003a10 <HAL_InitTick+0xb0>)
 80039f4:	f003 fb30 	bl	8007058 <HAL_TIM_Base_Start_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	e000      	b.n	80039fe <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3730      	adds	r7, #48	; 0x30
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	2000463c 	.word	0x2000463c

08003a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <NMI_Handler+0x4>

08003a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a1e:	e7fe      	b.n	8003a1e <HardFault_Handler+0x4>

08003a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <MemManage_Handler+0x4>

08003a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <BusFault_Handler+0x4>

08003a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <UsageFault_Handler+0x4>

08003a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <DMA1_Stream1_IRQHandler+0x10>)
 8003a46:	f000 ff6f 	bl	8004928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20004714 	.word	0x20004714

08003a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM2_IRQHandler+0x10>)
 8003a5a:	f003 fbc6 	bl	80071ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000463c 	.word	0x2000463c

08003a68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <TIM4_IRQHandler+0x10>)
 8003a6e:	f003 fbbc 	bl	80071ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20004684 	.word	0x20004684

08003a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <USART1_IRQHandler+0x10>)
 8003a82:	f004 fa65 	bl	8007f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20004818 	.word	0x20004818

08003a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <USART2_IRQHandler+0x10>)
 8003a96:	f004 fa5b 	bl	8007f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	2000485c 	.word	0x2000485c

08003aa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <USART3_IRQHandler+0x10>)
 8003aaa:	f004 fa51 	bl	8007f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20004774 	.word	0x20004774

08003ab8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <SDIO_IRQHandler+0x10>)
 8003abe:	f002 fbc5 	bl	800624c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200045b8 	.word	0x200045b8

08003acc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <DMA2_Stream3_IRQHandler+0x10>)
 8003ad2:	f000 ff29 	bl	8004928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200044f8 	.word	0x200044f8

08003ae0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003ae4:	4802      	ldr	r0, [pc, #8]	; (8003af0 <DMA2_Stream6_IRQHandler+0x10>)
 8003ae6:	f000 ff1f 	bl	8004928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20004558 	.word	0x20004558

08003af4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <DMA2_Stream7_IRQHandler+0x10>)
 8003afa:	f000 ff15 	bl	8004928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200047b8 	.word	0x200047b8

08003b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <SystemInit+0x20>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <SystemInit+0x20>)
 8003b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08e      	sub	sp, #56	; 0x38
 8003b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
 8003b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b40:	f107 0320 	add.w	r3, r7, #32
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b5c:	4b37      	ldr	r3, [pc, #220]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b5e:	4a38      	ldr	r2, [pc, #224]	; (8003c40 <MX_TIM3_Init+0x114>)
 8003b60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003b62:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b64:	2247      	movs	r2, #71	; 0x47
 8003b66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003b6e:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b82:	482e      	ldr	r0, [pc, #184]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003b84:	f003 fa18 	bl	8006fb8 <HAL_TIM_Base_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003b8e:	f7ff fda1 	bl	80036d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4827      	ldr	r0, [pc, #156]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003ba0:	f003 fcee 	bl	8007580 <HAL_TIM_ConfigClockSource>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003baa:	f7ff fd93 	bl	80036d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bae:	4823      	ldr	r0, [pc, #140]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003bb0:	f003 fac2 	bl	8007138 <HAL_TIM_PWM_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003bba:	f7ff fd8b 	bl	80036d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bc6:	f107 0320 	add.w	r3, r7, #32
 8003bca:	4619      	mov	r1, r3
 8003bcc:	481b      	ldr	r0, [pc, #108]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003bce:	f004 f8b1 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003bd8:	f7ff fd7c 	bl	80036d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bdc:	2360      	movs	r3, #96	; 0x60
 8003bde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4812      	ldr	r0, [pc, #72]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003bf4:	f003 fc02 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003bfe:	f7ff fd69 	bl	80036d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	2204      	movs	r2, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	480c      	ldr	r0, [pc, #48]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003c0a:	f003 fbf7 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003c14:	f7ff fd5e 	bl	80036d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003c20:	f003 fbec 	bl	80073fc <HAL_TIM_PWM_ConfigChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003c2a:	f7ff fd53 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c2e:	4803      	ldr	r0, [pc, #12]	; (8003c3c <MX_TIM3_Init+0x110>)
 8003c30:	f000 f894 	bl	8003d5c <HAL_TIM_MspPostInit>

}
 8003c34:	bf00      	nop
 8003c36:	3738      	adds	r7, #56	; 0x38
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200046cc 	.word	0x200046cc
 8003c40:	40000400 	.word	0x40000400

08003c44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c58:	463b      	mov	r3, r7
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <MX_TIM4_Init+0x98>)
 8003c64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8003c66:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c68:	2247      	movs	r2, #71	; 0x47
 8003c6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c86:	4814      	ldr	r0, [pc, #80]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003c88:	f003 f996 	bl	8006fb8 <HAL_TIM_Base_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003c92:	f7ff fd1f 	bl	80036d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c9c:	f107 0308 	add.w	r3, r7, #8
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003ca4:	f003 fc6c 	bl	8007580 <HAL_TIM_ConfigClockSource>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003cae:	f7ff fd11 	bl	80036d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cba:	463b      	mov	r3, r7
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4806      	ldr	r0, [pc, #24]	; (8003cd8 <MX_TIM4_Init+0x94>)
 8003cc0:	f004 f838 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003cca:	f7ff fd03 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cce:	bf00      	nop
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20004684 	.word	0x20004684
 8003cdc:	40000800 	.word	0x40000800

08003ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <HAL_TIM_Base_MspInit+0x70>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10e      	bne.n	8003d10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HAL_TIM_Base_MspInit+0x74>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_TIM_Base_MspInit+0x74>)
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_TIM_Base_MspInit+0x74>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d0e:	e01a      	b.n	8003d46 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a10      	ldr	r2, [pc, #64]	; (8003d58 <HAL_TIM_Base_MspInit+0x78>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d115      	bne.n	8003d46 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HAL_TIM_Base_MspInit+0x74>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <HAL_TIM_Base_MspInit+0x74>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <HAL_TIM_Base_MspInit+0x74>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003d36:	2200      	movs	r2, #0
 8003d38:	2105      	movs	r1, #5
 8003d3a:	201e      	movs	r0, #30
 8003d3c:	f000 fc32 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d40:	201e      	movs	r0, #30
 8003d42:	f000 fc4b 	bl	80045dc <HAL_NVIC_EnableIRQ>
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40000800 	.word	0x40000800

08003d5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_TIM_MspPostInit+0xa4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d13b      	bne.n	8003df6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_TIM_MspPostInit+0xa8>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_TIM_MspPostInit+0xa8>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_TIM_MspPostInit+0xa8>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_TIM_MspPostInit+0xa8>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_TIM_MspPostInit+0xa8>)
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_TIM_MspPostInit+0xa8>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003db6:	23c0      	movs	r3, #192	; 0xc0
 8003db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dca:	f107 0314 	add.w	r3, r7, #20
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480d      	ldr	r0, [pc, #52]	; (8003e08 <HAL_TIM_MspPostInit+0xac>)
 8003dd2:	f001 f81f 	bl	8004e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003de6:	2302      	movs	r3, #2
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	4619      	mov	r1, r3
 8003df0:	4806      	ldr	r0, [pc, #24]	; (8003e0c <HAL_TIM_MspPostInit+0xb0>)
 8003df2:	f001 f80f 	bl	8004e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003df6:	bf00      	nop
 8003df8:	3728      	adds	r7, #40	; 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40020400 	.word	0x40020400

08003e10 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <MX_USART1_UART_Init+0x50>)
 8003e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e36:	220c      	movs	r2, #12
 8003e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e46:	4805      	ldr	r0, [pc, #20]	; (8003e5c <MX_USART1_UART_Init+0x4c>)
 8003e48:	f004 f804 	bl	8007e54 <HAL_UART_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e52:	f7ff fc3f 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20004818 	.word	0x20004818
 8003e60:	40011000 	.word	0x40011000

08003e64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <MX_USART2_UART_Init+0x50>)
 8003e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e76:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e8a:	220c      	movs	r2, #12
 8003e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e9a:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e9c:	f003 ffda 	bl	8007e54 <HAL_UART_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ea6:	f7ff fc15 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2000485c 	.word	0x2000485c
 8003eb4:	40004400 	.word	0x40004400

08003eb8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <MX_USART3_UART_Init+0x50>)
 8003ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ede:	220c      	movs	r2, #12
 8003ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003eee:	4805      	ldr	r0, [pc, #20]	; (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ef0:	f003 ffb0 	bl	8007e54 <HAL_UART_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003efa:	f7ff fbeb 	bl	80036d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20004774 	.word	0x20004774
 8003f08:	40004800 	.word	0x40004800

08003f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a86      	ldr	r2, [pc, #536]	; (8004144 <HAL_UART_MspInit+0x238>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d163      	bne.n	8003ff6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	4b85      	ldr	r3, [pc, #532]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4a84      	ldr	r2, [pc, #528]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8003f38:	f043 0310 	orr.w	r3, r3, #16
 8003f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3e:	4b82      	ldr	r3, [pc, #520]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a7d      	ldr	r2, [pc, #500]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b7b      	ldr	r3, [pc, #492]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f78:	2307      	movs	r3, #7
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f80:	4619      	mov	r1, r3
 8003f82:	4872      	ldr	r0, [pc, #456]	; (800414c <HAL_UART_MspInit+0x240>)
 8003f84:	f000 ff46 	bl	8004e14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003f88:	4b71      	ldr	r3, [pc, #452]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003f8a:	4a72      	ldr	r2, [pc, #456]	; (8004154 <HAL_UART_MspInit+0x248>)
 8003f8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003f8e:	4b70      	ldr	r3, [pc, #448]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003f90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f96:	4b6e      	ldr	r3, [pc, #440]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003f98:	2240      	movs	r2, #64	; 0x40
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9c:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa2:	4b6b      	ldr	r3, [pc, #428]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003faa:	4b69      	ldr	r3, [pc, #420]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fb0:	4b67      	ldr	r3, [pc, #412]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003fb6:	4b66      	ldr	r3, [pc, #408]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fbc:	4b64      	ldr	r3, [pc, #400]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003fc8:	4861      	ldr	r0, [pc, #388]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fca:	f000 fb15 	bl	80045f8 <HAL_DMA_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003fd4:	f7ff fb7e 	bl	80036d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a5d      	ldr	r2, [pc, #372]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fde:	4a5c      	ldr	r2, [pc, #368]	; (8004150 <HAL_UART_MspInit+0x244>)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2105      	movs	r1, #5
 8003fe8:	2025      	movs	r0, #37	; 0x25
 8003fea:	f000 fadb 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fee:	2025      	movs	r0, #37	; 0x25
 8003ff0:	f000 faf4 	bl	80045dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003ff4:	e0a1      	b.n	800413a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a57      	ldr	r2, [pc, #348]	; (8004158 <HAL_UART_MspInit+0x24c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d134      	bne.n	800406a <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	4a4f      	ldr	r2, [pc, #316]	; (8004148 <HAL_UART_MspInit+0x23c>)
 800400a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400e:	6413      	str	r3, [r2, #64]	; 0x40
 8004010:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	4b49      	ldr	r3, [pc, #292]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	4a48      	ldr	r2, [pc, #288]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6313      	str	r3, [r2, #48]	; 0x30
 800402c:	4b46      	ldr	r3, [pc, #280]	; (8004148 <HAL_UART_MspInit+0x23c>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004038:	230c      	movs	r3, #12
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403c:	2302      	movs	r3, #2
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004044:	2303      	movs	r3, #3
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004048:	2307      	movs	r3, #7
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004050:	4619      	mov	r1, r3
 8004052:	483e      	ldr	r0, [pc, #248]	; (800414c <HAL_UART_MspInit+0x240>)
 8004054:	f000 fede 	bl	8004e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	210a      	movs	r1, #10
 800405c:	2026      	movs	r0, #38	; 0x26
 800405e:	f000 faa1 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004062:	2026      	movs	r0, #38	; 0x26
 8004064:	f000 faba 	bl	80045dc <HAL_NVIC_EnableIRQ>
}
 8004068:	e067      	b.n	800413a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3b      	ldr	r2, [pc, #236]	; (800415c <HAL_UART_MspInit+0x250>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d162      	bne.n	800413a <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	4b33      	ldr	r3, [pc, #204]	; (8004148 <HAL_UART_MspInit+0x23c>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a32      	ldr	r2, [pc, #200]	; (8004148 <HAL_UART_MspInit+0x23c>)
 800407e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
 8004084:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <HAL_UART_MspInit+0x23c>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_UART_MspInit+0x23c>)
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	6313      	str	r3, [r2, #48]	; 0x30
 80040a0:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_UART_MspInit+0x23c>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b2:	2302      	movs	r3, #2
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040be:	2307      	movs	r3, #7
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c6:	4619      	mov	r1, r3
 80040c8:	4825      	ldr	r0, [pc, #148]	; (8004160 <HAL_UART_MspInit+0x254>)
 80040ca:	f000 fea3 	bl	8004e14 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040d0:	4a25      	ldr	r2, [pc, #148]	; (8004168 <HAL_UART_MspInit+0x25c>)
 80040d2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040e8:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_UART_MspInit+0x258>)
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HAL_UART_MspInit+0x258>)
 8004104:	2200      	movs	r2, #0
 8004106:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_UART_MspInit+0x258>)
 800410a:	2200      	movs	r2, #0
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800410e:	4815      	ldr	r0, [pc, #84]	; (8004164 <HAL_UART_MspInit+0x258>)
 8004110:	f000 fa72 	bl	80045f8 <HAL_DMA_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_UART_MspInit+0x212>
      Error_Handler();
 800411a:	f7ff fadb 	bl	80036d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a10      	ldr	r2, [pc, #64]	; (8004164 <HAL_UART_MspInit+0x258>)
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
 8004124:	4a0f      	ldr	r2, [pc, #60]	; (8004164 <HAL_UART_MspInit+0x258>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	210a      	movs	r1, #10
 800412e:	2027      	movs	r0, #39	; 0x27
 8004130:	f000 fa38 	bl	80045a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004134:	2027      	movs	r0, #39	; 0x27
 8004136:	f000 fa51 	bl	80045dc <HAL_NVIC_EnableIRQ>
}
 800413a:	bf00      	nop
 800413c:	3738      	adds	r7, #56	; 0x38
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40011000 	.word	0x40011000
 8004148:	40023800 	.word	0x40023800
 800414c:	40020000 	.word	0x40020000
 8004150:	200047b8 	.word	0x200047b8
 8004154:	400264b8 	.word	0x400264b8
 8004158:	40004400 	.word	0x40004400
 800415c:	40004800 	.word	0x40004800
 8004160:	40020c00 	.word	0x40020c00
 8004164:	20004714 	.word	0x20004714
 8004168:	40026028 	.word	0x40026028

0800416c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800416c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004170:	480d      	ldr	r0, [pc, #52]	; (80041a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004172:	490e      	ldr	r1, [pc, #56]	; (80041ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004178:	e002      	b.n	8004180 <LoopCopyDataInit>

0800417a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800417c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417e:	3304      	adds	r3, #4

08004180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004184:	d3f9      	bcc.n	800417a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004188:	4c0b      	ldr	r4, [pc, #44]	; (80041b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800418a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800418c:	e001      	b.n	8004192 <LoopFillZerobss>

0800418e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004190:	3204      	adds	r2, #4

08004192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004194:	d3fb      	bcc.n	800418e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004196:	f7ff fcb7 	bl	8003b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800419a:	f00b fe5d 	bl	800fe58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800419e:	f7ff f9ef 	bl	8003580 <main>
  bx  lr    
 80041a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041ac:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 80041b0:	08011c58 	.word	0x08011c58
  ldr r2, =_sbss
 80041b4:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 80041b8:	20004e6c 	.word	0x20004e6c

080041bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041bc:	e7fe      	b.n	80041bc <ADC_IRQHandler>
	...

080041c0 <attitude_ctrl_init>:
int16_t manual_trim_roll,manual_trim_pitch;

/*
 *  init pid controller
 */
void attitude_ctrl_init(){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
   speed_filter_reset = TRUE;
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <attitude_ctrl_init+0x110>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 80041ca:	4b42      	ldr	r3, [pc, #264]	; (80042d4 <attitude_ctrl_init+0x114>)
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
   // init roll pid 
   pid_init(&roll_angle_pid, pid_profile_1.roll_angle_Kp,0,0,10,0,0);
 80041d2:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <attitude_ctrl_init+0x118>)
 80041d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80041d8:	eddf 2a40 	vldr	s5, [pc, #256]	; 80042dc <attitude_ctrl_init+0x11c>
 80041dc:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 80042dc <attitude_ctrl_init+0x11c>
 80041e0:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80041e4:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80042dc <attitude_ctrl_init+0x11c>
 80041e8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80042dc <attitude_ctrl_init+0x11c>
 80041ec:	eeb0 0a67 	vmov.f32	s0, s15
 80041f0:	483b      	ldr	r0, [pc, #236]	; (80042e0 <attitude_ctrl_init+0x120>)
 80041f2:	f7fe fcf9 	bl	8002be8 <pid_init>
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 80041f6:	4b38      	ldr	r3, [pc, #224]	; (80042d8 <attitude_ctrl_init+0x118>)
 80041f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <attitude_ctrl_init+0x118>)
 80041fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8004202:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004204:	edd3 6a07 	vldr	s13, [r3, #28]
            pid_profile_1.roll_rate_Ki,pid_profile_1.roll_rate_Kd,
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D,
 8004208:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <attitude_ctrl_init+0x118>)
 800420a:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 800420c:	ee06 3a10 	vmov	s12, r3
 8004210:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D,
 8004214:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004216:	f993 3020 	ldrsb.w	r3, [r3, #32]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 800421a:	ee05 3a90 	vmov	s11, r3
 800421e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.roll_max_I);
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004224:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, 
 8004228:	ee05 3a10 	vmov	s10, r3
 800422c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8004230:	eef0 2a45 	vmov.f32	s5, s10
 8004234:	eeb0 2a65 	vmov.f32	s4, s11
 8004238:	eef0 1a46 	vmov.f32	s3, s12
 800423c:	eeb0 1a66 	vmov.f32	s2, s13
 8004240:	eef0 0a47 	vmov.f32	s1, s14
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	4826      	ldr	r0, [pc, #152]	; (80042e4 <attitude_ctrl_init+0x124>)
 800424a:	f7fe fccd 	bl	8002be8 <pid_init>
   // init roll pid 
   pid_init(&pitch_angle_pid, pid_profile_1.pitch_angle_Kp,0,0,10,0,0);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004250:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004254:	eddf 2a21 	vldr	s5, [pc, #132]	; 80042dc <attitude_ctrl_init+0x11c>
 8004258:	ed9f 2a20 	vldr	s4, [pc, #128]	; 80042dc <attitude_ctrl_init+0x11c>
 800425c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8004260:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80042dc <attitude_ctrl_init+0x11c>
 8004264:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80042dc <attitude_ctrl_init+0x11c>
 8004268:	eeb0 0a67 	vmov.f32	s0, s15
 800426c:	481e      	ldr	r0, [pc, #120]	; (80042e8 <attitude_ctrl_init+0x128>)
 800426e:	f7fe fcbb 	bl	8002be8 <pid_init>
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004274:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004278:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <attitude_ctrl_init+0x118>)
 800427a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004280:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
            pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004286:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 8004288:	ee06 3a10 	vmov	s12, r3
 800428c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <attitude_ctrl_init+0x118>)
 8004292:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 8004296:	ee05 3a90 	vmov	s11, r3
 800429a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.pitch_max_I);
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <attitude_ctrl_init+0x118>)
 80042a0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,
 80042a4:	ee05 3a10 	vmov	s10, r3
 80042a8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80042ac:	eef0 2a45 	vmov.f32	s5, s10
 80042b0:	eeb0 2a65 	vmov.f32	s4, s11
 80042b4:	eef0 1a46 	vmov.f32	s3, s12
 80042b8:	eeb0 1a66 	vmov.f32	s2, s13
 80042bc:	eef0 0a47 	vmov.f32	s1, s14
 80042c0:	eeb0 0a67 	vmov.f32	s0, s15
 80042c4:	4809      	ldr	r0, [pc, #36]	; (80042ec <attitude_ctrl_init+0x12c>)
 80042c6:	f7fe fc8f 	bl	8002be8 <pid_init>
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200048c0 	.word	0x200048c0
 80042d4:	200048d4 	.word	0x200048d4
 80042d8:	20000074 	.word	0x20000074
 80042dc:	00000000 	.word	0x00000000
 80042e0:	20000224 	.word	0x20000224
 80042e4:	200001cc 	.word	0x200001cc
 80042e8:	20000250 	.word	0x20000250
 80042ec:	200001f8 	.word	0x200001f8

080042f0 <mavlinkInit>:
static UART_HandleTypeDef *uart;
uint8_t buffer__[MAX_LENGHT];
static int isTxcpl;
uint32_t send_time_us;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60ba      	str	r2, [r7, #8]
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	460b      	mov	r3, r1
 8004300:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <mavlinkInit+0x44>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
    index_ =0;
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <mavlinkInit+0x48>)
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <mavlinkInit+0x4c>)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8004314:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <mavlinkInit+0x50>)
 8004316:	7bbb      	ldrb	r3, [r7, #14]
 8004318:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <mavlinkInit+0x54>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6013      	str	r3, [r2, #0]
    //uartt->Init.BaudRate = baudrate;
	//HAL_UART_Init(uartt);
	HAL_UART_Receive_IT(&huart1, &data,1);
 8004320:	2201      	movs	r2, #1
 8004322:	4909      	ldr	r1, [pc, #36]	; (8004348 <mavlinkInit+0x58>)
 8004324:	4809      	ldr	r0, [pc, #36]	; (800434c <mavlinkInit+0x5c>)
 8004326:	f003 fde2 	bl	8007eee <HAL_UART_Receive_IT>
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000284 	.word	0x20000284
 8004338:	2000027d 	.word	0x2000027d
 800433c:	200049a8 	.word	0x200049a8
 8004340:	200049a0 	.word	0x200049a0
 8004344:	20000280 	.word	0x20000280
 8004348:	2000027c 	.word	0x2000027c
 800434c:	20004818 	.word	0x20004818

08004350 <mavlink_tx_cpl_callback>:
  isTxcpl = 0;
 }
}

void mavlink_tx_cpl_callback()
{   
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	isTxcpl = 1;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <mavlink_tx_cpl_callback+0x14>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20000284 	.word	0x20000284

08004368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_Init+0x40>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <HAL_Init+0x40>)
 8004372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_Init+0x40>)
 800437e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <HAL_Init+0x40>)
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004390:	2003      	movs	r0, #3
 8004392:	f000 f8fc 	bl	800458e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004396:	200f      	movs	r0, #15
 8004398:	f7ff fae2 	bl	8003960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800439c:	f7ff fab4 	bl	8003908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023c00 	.word	0x40023c00

080043ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_IncTick+0x20>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_IncTick+0x24>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4413      	add	r3, r2
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <HAL_IncTick+0x24>)
 80043be:	6013      	str	r3, [r2, #0]
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	200000c4 	.word	0x200000c4
 80043d0:	200049ac 	.word	0x200049ac

080043d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return uwTick;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <HAL_GetTick+0x14>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	200049ac 	.word	0x200049ac

080043ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f4:	f7ff ffee 	bl	80043d4 <HAL_GetTick>
 80043f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d005      	beq.n	8004412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_Delay+0x44>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004412:	bf00      	nop
 8004414:	f7ff ffde 	bl	80043d4 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	429a      	cmp	r2, r3
 8004422:	d8f7      	bhi.n	8004414 <HAL_Delay+0x28>
  {
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200000c4 	.word	0x200000c4

08004434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <__NVIC_SetPriorityGrouping+0x44>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800445c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004466:	4a04      	ldr	r2, [pc, #16]	; (8004478 <__NVIC_SetPriorityGrouping+0x44>)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	60d3      	str	r3, [r2, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <__NVIC_GetPriorityGrouping+0x18>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 0307 	and.w	r3, r3, #7
}
 800448a:	4618      	mov	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db0b      	blt.n	80044c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	4907      	ldr	r1, [pc, #28]	; (80044d0 <__NVIC_EnableIRQ+0x38>)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2001      	movs	r0, #1
 80044ba:	fa00 f202 	lsl.w	r2, r0, r2
 80044be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e100 	.word	0xe000e100

080044d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db0a      	blt.n	80044fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	490c      	ldr	r1, [pc, #48]	; (8004520 <__NVIC_SetPriority+0x4c>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	0112      	lsls	r2, r2, #4
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	440b      	add	r3, r1
 80044f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044fc:	e00a      	b.n	8004514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4908      	ldr	r1, [pc, #32]	; (8004524 <__NVIC_SetPriority+0x50>)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3b04      	subs	r3, #4
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	440b      	add	r3, r1
 8004512:	761a      	strb	r2, [r3, #24]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000e100 	.word	0xe000e100
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	; 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	bf28      	it	cs
 8004546:	2304      	movcs	r3, #4
 8004548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3304      	adds	r3, #4
 800454e:	2b06      	cmp	r3, #6
 8004550:	d902      	bls.n	8004558 <NVIC_EncodePriority+0x30>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3b03      	subs	r3, #3
 8004556:	e000      	b.n	800455a <NVIC_EncodePriority+0x32>
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800455c:	f04f 32ff 	mov.w	r2, #4294967295
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	401a      	ands	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004570:	f04f 31ff 	mov.w	r1, #4294967295
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	43d9      	mvns	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	4313      	orrs	r3, r2
         );
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ff4c 	bl	8004434 <__NVIC_SetPriorityGrouping>
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045b6:	f7ff ff61 	bl	800447c <__NVIC_GetPriorityGrouping>
 80045ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f7ff ffb1 	bl	8004528 <NVIC_EncodePriority>
 80045c6:	4602      	mov	r2, r0
 80045c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff80 	bl	80044d4 <__NVIC_SetPriority>
}
 80045d4:	bf00      	nop
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff54 	bl	8004498 <__NVIC_EnableIRQ>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004604:	f7ff fee6 	bl	80043d4 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e099      	b.n	8004748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004634:	e00f      	b.n	8004656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004636:	f7ff fecd 	bl	80043d4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b05      	cmp	r3, #5
 8004642:	d908      	bls.n	8004656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2203      	movs	r2, #3
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e078      	b.n	8004748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e8      	bne.n	8004636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4b38      	ldr	r3, [pc, #224]	; (8004750 <HAL_DMA_Init+0x158>)
 8004670:	4013      	ands	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800469a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d107      	bne.n	80046c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	4313      	orrs	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0307 	bic.w	r3, r3, #7
 80046d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d117      	bne.n	800471a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fb0d 	bl	8004d1c <DMA_CheckFifoParam>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2240      	movs	r2, #64	; 0x40
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004716:	2301      	movs	r3, #1
 8004718:	e016      	b.n	8004748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fac4 	bl	8004cb0 <DMA_CalcBaseAndBitshift>
 8004728:	4603      	mov	r3, r0
 800472a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	223f      	movs	r2, #63	; 0x3f
 8004732:	409a      	lsls	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	f010803f 	.word	0xf010803f

08004754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_DMA_Start_IT+0x26>
 8004776:	2302      	movs	r3, #2
 8004778:	e040      	b.n	80047fc <HAL_DMA_Start_IT+0xa8>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d12f      	bne.n	80047ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa56 	bl	8004c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	223f      	movs	r2, #63	; 0x3f
 80047ae:	409a      	lsls	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0216 	orr.w	r2, r2, #22
 80047c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e005      	b.n	80047fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004812:	f7ff fddf 	bl	80043d4 <HAL_GetTick>
 8004816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e052      	b.n	80048dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0216 	bic.w	r2, r2, #22
 8004844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_DMA_Abort+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0208 	bic.w	r2, r2, #8
 8004874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004886:	e013      	b.n	80048b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004888:	f7ff fda4 	bl	80043d4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b05      	cmp	r3, #5
 8004894:	d90c      	bls.n	80048b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2203      	movs	r2, #3
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e015      	b.n	80048dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e4      	bne.n	8004888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	223f      	movs	r2, #63	; 0x3f
 80048c4:	409a      	lsls	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d004      	beq.n	8004902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2280      	movs	r2, #128	; 0x80
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e00c      	b.n	800491c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2205      	movs	r2, #5
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004934:	4b92      	ldr	r3, [pc, #584]	; (8004b80 <HAL_DMA_IRQHandler+0x258>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a92      	ldr	r2, [pc, #584]	; (8004b84 <HAL_DMA_IRQHandler+0x25c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0a9b      	lsrs	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004952:	2208      	movs	r2, #8
 8004954:	409a      	lsls	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01a      	beq.n	8004994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0204 	bic.w	r2, r2, #4
 800497a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	2208      	movs	r2, #8
 8004982:	409a      	lsls	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d012      	beq.n	80049ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	2201      	movs	r2, #1
 80049b8:	409a      	lsls	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	f043 0202 	orr.w	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2204      	movs	r2, #4
 80049d0:	409a      	lsls	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d012      	beq.n	8004a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	2204      	movs	r2, #4
 80049ee:	409a      	lsls	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2210      	movs	r2, #16
 8004a06:	409a      	lsls	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d043      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d03c      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	2210      	movs	r2, #16
 8004a24:	409a      	lsls	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d018      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d024      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
 8004a56:	e01f      	b.n	8004a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
 8004a68:	e016      	b.n	8004a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0208 	bic.w	r2, r2, #8
 8004a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 808e 	beq.w	8004bc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8086 	beq.w	8004bc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	2220      	movs	r2, #32
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d136      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0216 	bic.w	r2, r2, #22
 8004ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <HAL_DMA_IRQHandler+0x1da>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0208 	bic.w	r2, r2, #8
 8004b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	223f      	movs	r2, #63	; 0x3f
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d07d      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
        }
        return;
 8004b3e:	e078      	b.n	8004c32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01c      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d108      	bne.n	8004b6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d030      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
 8004b6c:	e02b      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d027      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
 8004b7e:	e022      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x29e>
 8004b80:	20000070 	.word	0x20000070
 8004b84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0210 	bic.w	r2, r2, #16
 8004ba4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d032      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d022      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2205      	movs	r2, #5
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d307      	bcc.n	8004c0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f2      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0x2ca>
 8004c0c:	e000      	b.n	8004c10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
 8004c30:	e000      	b.n	8004c34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c32:	bf00      	nop
    }
  }
}
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop

08004c3c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d108      	bne.n	8004c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c92:	e007      	b.n	8004ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	3b10      	subs	r3, #16
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <DMA_CalcBaseAndBitshift+0x64>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cca:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <DMA_CalcBaseAndBitshift+0x68>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d909      	bls.n	8004cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	659a      	str	r2, [r3, #88]	; 0x58
 8004cf0:	e007      	b.n	8004d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	aaaaaaab 	.word	0xaaaaaaab
 8004d18:	080116d0 	.word	0x080116d0

08004d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11f      	bne.n	8004d76 <DMA_CheckFifoParam+0x5a>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d856      	bhi.n	8004dea <DMA_CheckFifoParam+0xce>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <DMA_CheckFifoParam+0x28>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d67 	.word	0x08004d67
 8004d4c:	08004d55 	.word	0x08004d55
 8004d50:	08004deb 	.word	0x08004deb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d046      	beq.n	8004dee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d64:	e043      	b.n	8004dee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d6e:	d140      	bne.n	8004df2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d74:	e03d      	b.n	8004df2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d121      	bne.n	8004dc4 <DMA_CheckFifoParam+0xa8>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d837      	bhi.n	8004df6 <DMA_CheckFifoParam+0xda>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <DMA_CheckFifoParam+0x70>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004da3 	.word	0x08004da3
 8004d94:	08004d9d 	.word	0x08004d9d
 8004d98:	08004db5 	.word	0x08004db5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e030      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d025      	beq.n	8004dfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db2:	e022      	b.n	8004dfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dbc:	d11f      	bne.n	8004dfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dc2:	e01c      	b.n	8004dfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d903      	bls.n	8004dd2 <DMA_CheckFifoParam+0xb6>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d003      	beq.n	8004dd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dd0:	e018      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd6:	e015      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      break;
 8004de8:	e00b      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;
 8004dea:	bf00      	nop
 8004dec:	e00a      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      break;
 8004dee:	bf00      	nop
 8004df0:	e008      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      break;
 8004df2:	bf00      	nop
 8004df4:	e006      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      break;
 8004df6:	bf00      	nop
 8004df8:	e004      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <DMA_CheckFifoParam+0xe8>
      break;
 8004e02:	bf00      	nop
    }
  } 
  
  return status; 
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e16b      	b.n	8005108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e30:	2201      	movs	r2, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	f040 815a 	bne.w	8005102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d005      	beq.n	8004e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d130      	bne.n	8004ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	2203      	movs	r2, #3
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 0201 	and.w	r2, r3, #1
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d017      	beq.n	8004f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	2203      	movs	r2, #3
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d123      	bne.n	8004f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	08da      	lsrs	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3208      	adds	r2, #8
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	220f      	movs	r2, #15
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	08da      	lsrs	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3208      	adds	r2, #8
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	2203      	movs	r2, #3
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0203 	and.w	r2, r3, #3
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80b4 	beq.w	8005102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	4b60      	ldr	r3, [pc, #384]	; (8005120 <HAL_GPIO_Init+0x30c>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	4a5f      	ldr	r2, [pc, #380]	; (8005120 <HAL_GPIO_Init+0x30c>)
 8004fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8004faa:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <HAL_GPIO_Init+0x30c>)
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fb6:	4a5b      	ldr	r2, [pc, #364]	; (8005124 <HAL_GPIO_Init+0x310>)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	089b      	lsrs	r3, r3, #2
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	220f      	movs	r2, #15
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a52      	ldr	r2, [pc, #328]	; (8005128 <HAL_GPIO_Init+0x314>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d02b      	beq.n	800503a <HAL_GPIO_Init+0x226>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a51      	ldr	r2, [pc, #324]	; (800512c <HAL_GPIO_Init+0x318>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d025      	beq.n	8005036 <HAL_GPIO_Init+0x222>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a50      	ldr	r2, [pc, #320]	; (8005130 <HAL_GPIO_Init+0x31c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01f      	beq.n	8005032 <HAL_GPIO_Init+0x21e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a4f      	ldr	r2, [pc, #316]	; (8005134 <HAL_GPIO_Init+0x320>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d019      	beq.n	800502e <HAL_GPIO_Init+0x21a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a4e      	ldr	r2, [pc, #312]	; (8005138 <HAL_GPIO_Init+0x324>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_GPIO_Init+0x216>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a4d      	ldr	r2, [pc, #308]	; (800513c <HAL_GPIO_Init+0x328>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00d      	beq.n	8005026 <HAL_GPIO_Init+0x212>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a4c      	ldr	r2, [pc, #304]	; (8005140 <HAL_GPIO_Init+0x32c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <HAL_GPIO_Init+0x20e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a4b      	ldr	r2, [pc, #300]	; (8005144 <HAL_GPIO_Init+0x330>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <HAL_GPIO_Init+0x20a>
 800501a:	2307      	movs	r3, #7
 800501c:	e00e      	b.n	800503c <HAL_GPIO_Init+0x228>
 800501e:	2308      	movs	r3, #8
 8005020:	e00c      	b.n	800503c <HAL_GPIO_Init+0x228>
 8005022:	2306      	movs	r3, #6
 8005024:	e00a      	b.n	800503c <HAL_GPIO_Init+0x228>
 8005026:	2305      	movs	r3, #5
 8005028:	e008      	b.n	800503c <HAL_GPIO_Init+0x228>
 800502a:	2304      	movs	r3, #4
 800502c:	e006      	b.n	800503c <HAL_GPIO_Init+0x228>
 800502e:	2303      	movs	r3, #3
 8005030:	e004      	b.n	800503c <HAL_GPIO_Init+0x228>
 8005032:	2302      	movs	r3, #2
 8005034:	e002      	b.n	800503c <HAL_GPIO_Init+0x228>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_GPIO_Init+0x228>
 800503a:	2300      	movs	r3, #0
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	f002 0203 	and.w	r2, r2, #3
 8005042:	0092      	lsls	r2, r2, #2
 8005044:	4093      	lsls	r3, r2
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800504c:	4935      	ldr	r1, [pc, #212]	; (8005124 <HAL_GPIO_Init+0x310>)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	089b      	lsrs	r3, r3, #2
 8005052:	3302      	adds	r3, #2
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_GPIO_Init+0x334>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800507e:	4a32      	ldr	r2, [pc, #200]	; (8005148 <HAL_GPIO_Init+0x334>)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005084:	4b30      	ldr	r3, [pc, #192]	; (8005148 <HAL_GPIO_Init+0x334>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050a8:	4a27      	ldr	r2, [pc, #156]	; (8005148 <HAL_GPIO_Init+0x334>)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050ae:	4b26      	ldr	r3, [pc, #152]	; (8005148 <HAL_GPIO_Init+0x334>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050d2:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <HAL_GPIO_Init+0x334>)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_GPIO_Init+0x334>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050fc:	4a12      	ldr	r2, [pc, #72]	; (8005148 <HAL_GPIO_Init+0x334>)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b0f      	cmp	r3, #15
 800510c:	f67f ae90 	bls.w	8004e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	3724      	adds	r7, #36	; 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	40013800 	.word	0x40013800
 8005128:	40020000 	.word	0x40020000
 800512c:	40020400 	.word	0x40020400
 8005130:	40020800 	.word	0x40020800
 8005134:	40020c00 	.word	0x40020c00
 8005138:	40021000 	.word	0x40021000
 800513c:	40021400 	.word	0x40021400
 8005140:	40021800 	.word	0x40021800
 8005144:	40021c00 	.word	0x40021c00
 8005148:	40013c00 	.word	0x40013c00

0800514c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	887b      	ldrh	r3, [r7, #2]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	e001      	b.n	800516e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	807b      	strh	r3, [r7, #2]
 8005188:	4613      	mov	r3, r2
 800518a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800518c:	787b      	ldrb	r3, [r7, #1]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005192:	887a      	ldrh	r2, [r7, #2]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005198:	e003      	b.n	80051a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	041a      	lsls	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	619a      	str	r2, [r3, #24]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051c0:	887a      	ldrh	r2, [r7, #2]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4013      	ands	r3, r2
 80051c6:	041a      	lsls	r2, r3, #16
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	43d9      	mvns	r1, r3
 80051cc:	887b      	ldrh	r3, [r7, #2]
 80051ce:	400b      	ands	r3, r1
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	619a      	str	r2, [r3, #24]
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e12b      	b.n	800544e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fe f93c 	bl	8003488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2224      	movs	r2, #36	; 0x24
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005248:	f000 fd30 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 800524c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4a81      	ldr	r2, [pc, #516]	; (8005458 <HAL_I2C_Init+0x274>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d807      	bhi.n	8005268 <HAL_I2C_Init+0x84>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a80      	ldr	r2, [pc, #512]	; (800545c <HAL_I2C_Init+0x278>)
 800525c:	4293      	cmp	r3, r2
 800525e:	bf94      	ite	ls
 8005260:	2301      	movls	r3, #1
 8005262:	2300      	movhi	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e006      	b.n	8005276 <HAL_I2C_Init+0x92>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4a7d      	ldr	r2, [pc, #500]	; (8005460 <HAL_I2C_Init+0x27c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	bf94      	ite	ls
 8005270:	2301      	movls	r3, #1
 8005272:	2300      	movhi	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e0e7      	b.n	800544e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a78      	ldr	r2, [pc, #480]	; (8005464 <HAL_I2C_Init+0x280>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	0c9b      	lsrs	r3, r3, #18
 8005288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a6a      	ldr	r2, [pc, #424]	; (8005458 <HAL_I2C_Init+0x274>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d802      	bhi.n	80052b8 <HAL_I2C_Init+0xd4>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3301      	adds	r3, #1
 80052b6:	e009      	b.n	80052cc <HAL_I2C_Init+0xe8>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	4a69      	ldr	r2, [pc, #420]	; (8005468 <HAL_I2C_Init+0x284>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	3301      	adds	r3, #1
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	495c      	ldr	r1, [pc, #368]	; (8005458 <HAL_I2C_Init+0x274>)
 80052e8:	428b      	cmp	r3, r1
 80052ea:	d819      	bhi.n	8005320 <HAL_I2C_Init+0x13c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1e59      	subs	r1, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005300:	400b      	ands	r3, r1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_I2C_Init+0x138>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1e59      	subs	r1, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	fbb1 f3f3 	udiv	r3, r1, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531a:	e051      	b.n	80053c0 <HAL_I2C_Init+0x1dc>
 800531c:	2304      	movs	r3, #4
 800531e:	e04f      	b.n	80053c0 <HAL_I2C_Init+0x1dc>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d111      	bne.n	800534c <HAL_I2C_Init+0x168>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1e58      	subs	r0, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6859      	ldr	r1, [r3, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	440b      	add	r3, r1
 8005336:	fbb0 f3f3 	udiv	r3, r0, r3
 800533a:	3301      	adds	r3, #1
 800533c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e012      	b.n	8005372 <HAL_I2C_Init+0x18e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1e58      	subs	r0, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	0099      	lsls	r1, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005362:	3301      	adds	r3, #1
 8005364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_I2C_Init+0x196>
 8005376:	2301      	movs	r3, #1
 8005378:	e022      	b.n	80053c0 <HAL_I2C_Init+0x1dc>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10e      	bne.n	80053a0 <HAL_I2C_Init+0x1bc>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1e58      	subs	r0, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	440b      	add	r3, r1
 8005390:	fbb0 f3f3 	udiv	r3, r0, r3
 8005394:	3301      	adds	r3, #1
 8005396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539e:	e00f      	b.n	80053c0 <HAL_I2C_Init+0x1dc>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1e58      	subs	r0, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	0099      	lsls	r1, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	6809      	ldr	r1, [r1, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6911      	ldr	r1, [r2, #16]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68d2      	ldr	r2, [r2, #12]
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	430b      	orrs	r3, r1
 8005402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	000186a0 	.word	0x000186a0
 800545c:	001e847f 	.word	0x001e847f
 8005460:	003d08ff 	.word	0x003d08ff
 8005464:	431bde83 	.word	0x431bde83
 8005468:	10624dd3 	.word	0x10624dd3

0800546c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e264      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d075      	beq.n	8005576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800548a:	4ba3      	ldr	r3, [pc, #652]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b04      	cmp	r3, #4
 8005494:	d00c      	beq.n	80054b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005496:	4ba0      	ldr	r3, [pc, #640]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d112      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a2:	4b9d      	ldr	r3, [pc, #628]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ae:	d10b      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	4b99      	ldr	r3, [pc, #612]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d05b      	beq.n	8005574 <HAL_RCC_OscConfig+0x108>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d157      	bne.n	8005574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e23f      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCC_OscConfig+0x74>
 80054d2:	4b91      	ldr	r3, [pc, #580]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a90      	ldr	r2, [pc, #576]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e01d      	b.n	800551c <HAL_RCC_OscConfig+0xb0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x98>
 80054ea:	4b8b      	ldr	r3, [pc, #556]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a8a      	ldr	r2, [pc, #552]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b88      	ldr	r3, [pc, #544]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a87      	ldr	r2, [pc, #540]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0xb0>
 8005504:	4b84      	ldr	r3, [pc, #528]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a83      	ldr	r2, [pc, #524]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800550a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b81      	ldr	r3, [pc, #516]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a80      	ldr	r2, [pc, #512]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fe ff56 	bl	80043d4 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800552c:	f7fe ff52 	bl	80043d4 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e204      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b76      	ldr	r3, [pc, #472]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0xc0>
 800554a:	e014      	b.n	8005576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fe ff42 	bl	80043d4 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005554:	f7fe ff3e 	bl	80043d4 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1f0      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0xe8>
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d063      	beq.n	800564a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005582:	4b65      	ldr	r3, [pc, #404]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558e:	4b62      	ldr	r3, [pc, #392]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005596:	2b08      	cmp	r3, #8
 8005598:	d11c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559a:	4b5f      	ldr	r3, [pc, #380]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a6:	4b5c      	ldr	r3, [pc, #368]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RCC_OscConfig+0x152>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e1c4      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055be:	4b56      	ldr	r3, [pc, #344]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4952      	ldr	r1, [pc, #328]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d2:	e03a      	b.n	800564a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d020      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055dc:	4b4f      	ldr	r3, [pc, #316]	; (800571c <HAL_RCC_OscConfig+0x2b0>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fe fef7 	bl	80043d4 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fe fef3 	bl	80043d4 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1a5      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fc:	4b46      	ldr	r3, [pc, #280]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	4b43      	ldr	r3, [pc, #268]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4940      	ldr	r1, [pc, #256]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]
 800561c:	e015      	b.n	800564a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561e:	4b3f      	ldr	r3, [pc, #252]	; (800571c <HAL_RCC_OscConfig+0x2b0>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fe fed6 	bl	80043d4 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800562c:	f7fe fed2 	bl	80043d4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e184      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d030      	beq.n	80056b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565e:	4b30      	ldr	r3, [pc, #192]	; (8005720 <HAL_RCC_OscConfig+0x2b4>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fe feb6 	bl	80043d4 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566c:	f7fe feb2 	bl	80043d4 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e164      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567e:	4b26      	ldr	r3, [pc, #152]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x200>
 800568a:	e015      	b.n	80056b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <HAL_RCC_OscConfig+0x2b4>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005692:	f7fe fe9f 	bl	80043d4 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800569a:	f7fe fe9b 	bl	80043d4 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e14d      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f0      	bne.n	800569a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a0 	beq.w	8005806 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6413      	str	r3, [r2, #64]	; 0x40
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_OscConfig+0x2b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d121      	bne.n	8005746 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCC_OscConfig+0x2b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <HAL_RCC_OscConfig+0x2b8>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800570e:	f7fe fe61 	bl	80043d4 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	e011      	b.n	800573a <HAL_RCC_OscConfig+0x2ce>
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	42470000 	.word	0x42470000
 8005720:	42470e80 	.word	0x42470e80
 8005724:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005728:	f7fe fe54 	bl	80043d4 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e106      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573a:	4b85      	ldr	r3, [pc, #532]	; (8005950 <HAL_RCC_OscConfig+0x4e4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x2f0>
 800574e:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	4a80      	ldr	r2, [pc, #512]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6713      	str	r3, [r2, #112]	; 0x70
 800575a:	e01c      	b.n	8005796 <HAL_RCC_OscConfig+0x32a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b05      	cmp	r3, #5
 8005762:	d10c      	bne.n	800577e <HAL_RCC_OscConfig+0x312>
 8005764:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a7a      	ldr	r2, [pc, #488]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 800576a:	f043 0304 	orr.w	r3, r3, #4
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	4b78      	ldr	r3, [pc, #480]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	4a77      	ldr	r2, [pc, #476]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6713      	str	r3, [r2, #112]	; 0x70
 800577c:	e00b      	b.n	8005796 <HAL_RCC_OscConfig+0x32a>
 800577e:	4b75      	ldr	r3, [pc, #468]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a74      	ldr	r2, [pc, #464]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b72      	ldr	r3, [pc, #456]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a71      	ldr	r2, [pc, #452]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d015      	beq.n	80057ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579e:	f7fe fe19 	bl	80043d4 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	e00a      	b.n	80057bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fe fe15 	bl	80043d4 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0c5      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057bc:	4b65      	ldr	r3, [pc, #404]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ee      	beq.n	80057a6 <HAL_RCC_OscConfig+0x33a>
 80057c8:	e014      	b.n	80057f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ca:	f7fe fe03 	bl	80043d4 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d0:	e00a      	b.n	80057e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d2:	f7fe fdff 	bl	80043d4 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e0af      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e8:	4b5a      	ldr	r3, [pc, #360]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ee      	bne.n	80057d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d105      	bne.n	8005806 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fa:	4b56      	ldr	r3, [pc, #344]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	4a55      	ldr	r2, [pc, #340]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 809b 	beq.w	8005946 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005810:	4b50      	ldr	r3, [pc, #320]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b08      	cmp	r3, #8
 800581a:	d05c      	beq.n	80058d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d141      	bne.n	80058a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005824:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <HAL_RCC_OscConfig+0x4ec>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582a:	f7fe fdd3 	bl	80043d4 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005832:	f7fe fdcf 	bl	80043d4 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e081      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005844:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f0      	bne.n	8005832 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	041b      	lsls	r3, r3, #16
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	4937      	ldr	r1, [pc, #220]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800587a:	4b37      	ldr	r3, [pc, #220]	; (8005958 <HAL_RCC_OscConfig+0x4ec>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fe fda8 	bl	80043d4 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005888:	f7fe fda4 	bl	80043d4 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e056      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x41c>
 80058a6:	e04e      	b.n	8005946 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_RCC_OscConfig+0x4ec>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ae:	f7fe fd91 	bl	80043d4 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b6:	f7fe fd8d 	bl	80043d4 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e03f      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x44a>
 80058d4:	e037      	b.n	8005946 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e032      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d028      	beq.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d121      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d11a      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005918:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800591a:	4293      	cmp	r3, r2
 800591c:	d111      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	3b01      	subs	r3, #1
 800592c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d107      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40007000 	.word	0x40007000
 8005954:	40023800 	.word	0x40023800
 8005958:	42470060 	.word	0x42470060

0800595c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0cc      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005970:	4b68      	ldr	r3, [pc, #416]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d90c      	bls.n	8005998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b65      	ldr	r3, [pc, #404]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b63      	ldr	r3, [pc, #396]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b8      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b0:	4b59      	ldr	r3, [pc, #356]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c8:	4b53      	ldr	r3, [pc, #332]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a52      	ldr	r2, [pc, #328]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	494d      	ldr	r1, [pc, #308]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d044      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b47      	ldr	r3, [pc, #284]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d119      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1a:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e06f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e067      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4934      	ldr	r1, [pc, #208]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a4c:	f7fe fcc2 	bl	80043d4 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fe fcbe 	bl	80043d4 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e04f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 020c 	and.w	r2, r3, #12
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d1eb      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a7c:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d20c      	bcs.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e032      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4916      	ldr	r1, [pc, #88]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ace:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	490e      	ldr	r1, [pc, #56]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ae2:	f000 f821 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	490a      	ldr	r1, [pc, #40]	; (8005b1c <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCC_ClockConfig+0x1c8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd ff2c 	bl	8003960 <HAL_InitTick>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40023c00 	.word	0x40023c00
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	080116b8 	.word	0x080116b8
 8005b20:	20000070 	.word	0x20000070
 8005b24:	200000c0 	.word	0x200000c0

08005b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b5b0      	push	{r4, r5, r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b2e:	2100      	movs	r1, #0
 8005b30:	6079      	str	r1, [r7, #4]
 8005b32:	2100      	movs	r1, #0
 8005b34:	60f9      	str	r1, [r7, #12]
 8005b36:	2100      	movs	r1, #0
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b3e:	4952      	ldr	r1, [pc, #328]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b40:	6889      	ldr	r1, [r1, #8]
 8005b42:	f001 010c 	and.w	r1, r1, #12
 8005b46:	2908      	cmp	r1, #8
 8005b48:	d00d      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0x3e>
 8005b4a:	2908      	cmp	r1, #8
 8005b4c:	f200 8094 	bhi.w	8005c78 <HAL_RCC_GetSysClockFreq+0x150>
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x32>
 8005b54:	2904      	cmp	r1, #4
 8005b56:	d003      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x38>
 8005b58:	e08e      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b5a:	4b4c      	ldr	r3, [pc, #304]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x164>)
 8005b5c:	60bb      	str	r3, [r7, #8]
       break;
 8005b5e:	e08e      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b60:	4b4b      	ldr	r3, [pc, #300]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b62:	60bb      	str	r3, [r7, #8]
      break;
 8005b64:	e08b      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b66:	4948      	ldr	r1, [pc, #288]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b68:	6849      	ldr	r1, [r1, #4]
 8005b6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005b6e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b70:	4945      	ldr	r1, [pc, #276]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b72:	6849      	ldr	r1, [r1, #4]
 8005b74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d024      	beq.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7c:	4942      	ldr	r1, [pc, #264]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b7e:	6849      	ldr	r1, [r1, #4]
 8005b80:	0989      	lsrs	r1, r1, #6
 8005b82:	4608      	mov	r0, r1
 8005b84:	f04f 0100 	mov.w	r1, #0
 8005b88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005b8c:	f04f 0500 	mov.w	r5, #0
 8005b90:	ea00 0204 	and.w	r2, r0, r4
 8005b94:	ea01 0305 	and.w	r3, r1, r5
 8005b98:	493d      	ldr	r1, [pc, #244]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b9a:	fb01 f003 	mul.w	r0, r1, r3
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	fb01 f102 	mul.w	r1, r1, r2
 8005ba4:	1844      	adds	r4, r0, r1
 8005ba6:	493a      	ldr	r1, [pc, #232]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ba8:	fba2 0101 	umull	r0, r1, r2, r1
 8005bac:	1863      	adds	r3, r4, r1
 8005bae:	4619      	mov	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	f7fa ffee 	bl	8000b98 <__aeabi_uldivmod>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e04a      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc6:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	099b      	lsrs	r3, r3, #6
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bd6:	f04f 0100 	mov.w	r1, #0
 8005bda:	ea02 0400 	and.w	r4, r2, r0
 8005bde:	ea03 0501 	and.w	r5, r3, r1
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	014b      	lsls	r3, r1, #5
 8005bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bf4:	0142      	lsls	r2, r0, #5
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	1b00      	subs	r0, r0, r4
 8005bfc:	eb61 0105 	sbc.w	r1, r1, r5
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	018b      	lsls	r3, r1, #6
 8005c0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c0e:	0182      	lsls	r2, r0, #6
 8005c10:	1a12      	subs	r2, r2, r0
 8005c12:	eb63 0301 	sbc.w	r3, r3, r1
 8005c16:	f04f 0000 	mov.w	r0, #0
 8005c1a:	f04f 0100 	mov.w	r1, #0
 8005c1e:	00d9      	lsls	r1, r3, #3
 8005c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c24:	00d0      	lsls	r0, r2, #3
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	1912      	adds	r2, r2, r4
 8005c2c:	eb45 0303 	adc.w	r3, r5, r3
 8005c30:	f04f 0000 	mov.w	r0, #0
 8005c34:	f04f 0100 	mov.w	r1, #0
 8005c38:	0299      	lsls	r1, r3, #10
 8005c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c3e:	0290      	lsls	r0, r2, #10
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	f7fa ffa2 	bl	8000b98 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	3301      	adds	r3, #1
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	60bb      	str	r3, [r7, #8]
      break;
 8005c76:	e002      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x164>)
 8005c7a:	60bb      	str	r3, [r7, #8]
      break;
 8005c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bdb0      	pop	{r4, r5, r7, pc}
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	00f42400 	.word	0x00f42400
 8005c90:	017d7840 	.word	0x017d7840

08005c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000070 	.word	0x20000070

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cb0:	f7ff fff0 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0a9b      	lsrs	r3, r3, #10
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	; (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	080116c8 	.word	0x080116c8

08005cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cd8:	f7ff ffdc 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0b5b      	lsrs	r3, r3, #13
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4903      	ldr	r1, [pc, #12]	; (8005cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	080116c8 	.word	0x080116c8

08005cfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	220f      	movs	r2, #15
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <HAL_RCC_GetClockConfig+0x5c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0203 	and.w	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <HAL_RCC_GetClockConfig+0x5c>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <HAL_RCC_GetClockConfig+0x5c>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <HAL_RCC_GetClockConfig+0x5c>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <HAL_RCC_GetClockConfig+0x60>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0207 	and.w	r2, r3, #7
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40023c00 	.word	0x40023c00

08005d60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e022      	b.n	8005db8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fd fccf 	bl	8003728 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f814 	bl	8005dc0 <HAL_SD_InitCard>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e00a      	b.n	8005db8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b08e      	sub	sp, #56	; 0x38
 8005dc4:	af04      	add	r7, sp, #16
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005ddc:	2376      	movs	r3, #118	; 0x76
 8005dde:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681d      	ldr	r5, [r3, #0]
 8005de4:	466c      	mov	r4, sp
 8005de6:	f107 0314 	add.w	r3, r7, #20
 8005dea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005df2:	f107 0308 	add.w	r3, r7, #8
 8005df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f002 fee9 	bl	8008bd0 <SDIO_Init>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e04c      	b.n	8005eaa <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005e10:	4b28      	ldr	r3, [pc, #160]	; (8005eb4 <HAL_SD_InitCard+0xf4>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f002 ff21 	bl	8008c62 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005e20:	4b24      	ldr	r3, [pc, #144]	; (8005eb4 <HAL_SD_InitCard+0xf4>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 ff6a 	bl	8006d00 <SD_PowerON>
 8005e2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e02e      	b.n	8005eaa <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fe8b 	bl	8006b68 <SD_InitCard>
 8005e52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e01b      	b.n	8005eaa <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f002 ff84 	bl	8008d88 <SDMMC_CmdBlockLength>
 8005e80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00f      	beq.n	8005ea8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <HAL_SD_InitCard+0xf8>)
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3728      	adds	r7, #40	; 0x28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	422580a0 	.word	0x422580a0
 8005eb8:	004005ff 	.word	0x004005ff

08005ebc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	; 0x30
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d107      	bne.n	8005ee4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0c0      	b.n	8006066 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	f040 80b9 	bne.w	8006064 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d907      	bls.n	8005f16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0a7      	b.n	8006066 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2200      	movs	r2, #0
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005f34:	f043 0302 	orr.w	r3, r3, #2
 8005f38:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	4a4c      	ldr	r2, [pc, #304]	; (8006070 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	4a4b      	ldr	r2, [pc, #300]	; (8006074 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005f48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	2200      	movs	r2, #0
 8005f50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	2200      	movs	r2, #0
 8005f58:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3380      	adds	r3, #128	; 0x80
 8005f80:	4619      	mov	r1, r3
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	025b      	lsls	r3, r3, #9
 8005f88:	089b      	lsrs	r3, r3, #2
 8005f8a:	f7fe fbe3 	bl	8004754 <HAL_DMA_Start_IT>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a33      	ldr	r2, [pc, #204]	; (8006078 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e050      	b.n	8006066 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	; (800607c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d002      	beq.n	8005fd8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	025b      	lsls	r3, r3, #9
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	025b      	lsls	r3, r3, #9
 8005fe2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005fe4:	2390      	movs	r3, #144	; 0x90
 8005fe6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f107 0210 	add.w	r2, r7, #16
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f002 fe96 	bl	8008d30 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d90a      	bls.n	8006020 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2282      	movs	r2, #130	; 0x82
 800600e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006016:	4618      	mov	r0, r3
 8006018:	f002 fefa 	bl	8008e10 <SDMMC_CmdReadMultiBlock>
 800601c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800601e:	e009      	b.n	8006034 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2281      	movs	r2, #129	; 0x81
 8006024:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800602c:	4618      	mov	r0, r3
 800602e:	f002 fecd 	bl	8008dcc <SDMMC_CmdReadSingleBlock>
 8006032:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d012      	beq.n	8006060 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a0e      	ldr	r2, [pc, #56]	; (8006078 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	431a      	orrs	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e002      	b.n	8006066 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e000      	b.n	8006066 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3730      	adds	r7, #48	; 0x30
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	08006977 	.word	0x08006977
 8006074:	080069e9 	.word	0x080069e9
 8006078:	004005ff 	.word	0x004005ff
 800607c:	4225858c 	.word	0x4225858c

08006080 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	; 0x30
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0c5      	b.n	8006234 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	f040 80be 	bne.w	8006232 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	441a      	add	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d907      	bls.n	80060da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0ac      	b.n	8006234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2203      	movs	r2, #3
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006102:	4a4e      	ldr	r2, [pc, #312]	; (800623c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	4a4d      	ldr	r2, [pc, #308]	; (8006240 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800610c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	2200      	movs	r2, #0
 8006114:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	2b01      	cmp	r3, #1
 800611c:	d002      	beq.n	8006124 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	025b      	lsls	r3, r3, #9
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d90a      	bls.n	8006140 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	22a0      	movs	r2, #160	; 0xa0
 800612e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006136:	4618      	mov	r0, r3
 8006138:	f002 feae 	bl	8008e98 <SDMMC_CmdWriteMultiBlock>
 800613c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800613e:	e009      	b.n	8006154 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2290      	movs	r2, #144	; 0x90
 8006144:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800614c:	4618      	mov	r0, r3
 800614e:	f002 fe81 	bl	8008e54 <SDMMC_CmdWriteSingleBlock>
 8006152:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d012      	beq.n	8006180 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a39      	ldr	r2, [pc, #228]	; (8006244 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e059      	b.n	8006234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006180:	4b31      	ldr	r3, [pc, #196]	; (8006248 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3380      	adds	r3, #128	; 0x80
 80061b6:	461a      	mov	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	025b      	lsls	r3, r3, #9
 80061bc:	089b      	lsrs	r3, r3, #2
 80061be:	f7fe fac9 	bl	8004754 <HAL_DMA_Start_IT>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01c      	beq.n	8006202 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80061d6:	f023 0302 	bic.w	r3, r3, #2
 80061da:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e018      	b.n	8006234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006202:	f04f 33ff 	mov.w	r3, #4294967295
 8006206:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	025b      	lsls	r3, r3, #9
 800620c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800620e:	2390      	movs	r3, #144	; 0x90
 8006210:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006216:	2300      	movs	r3, #0
 8006218:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800621a:	2301      	movs	r3, #1
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f107 0210 	add.w	r2, r7, #16
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f002 fd81 	bl	8008d30 <SDIO_ConfigData>

      return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	; 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	0800694d 	.word	0x0800694d
 8006240:	080069e9 	.word	0x080069e9
 8006244:	004005ff 	.word	0x004005ff
 8006248:	4225858c 	.word	0x4225858c

0800624c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_SD_IRQHandler+0x2e>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fdfa 	bl	8006e6c <SD_Read_IT>
 8006278:	e165      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 808f 	beq.w	80063a8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006292:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80062a2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80062a6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d039      	beq.n	8006336 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_SD_IRQHandler+0x8a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f002 fdfe 	bl	8008edc <SDMMC_CmdStopTransfer>
 80062e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f92f 	bl	8006558 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8006302:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <HAL_SD_IRQHandler+0xda>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f003 fa1c 	bl	8009764 <HAL_SD_RxCpltCallback>
 800632c:	e10b      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f003 fa0e 	bl	8009750 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006334:	e107      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8102 	beq.w	8006546 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d011      	beq.n	8006370 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f002 fdc3 	bl	8008edc <SDMMC_CmdStopTransfer>
 8006356:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8f4 	bl	8006558 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 80e5 	bne.w	8006546 <HAL_SD_IRQHandler+0x2fa>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 80df 	bne.w	8006546 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0208 	bic.w	r2, r2, #8
 8006396:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f003 f9d5 	bl	8009750 <HAL_SD_TxCpltCallback>
}
 80063a6:	e0ce      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_SD_IRQHandler+0x17c>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fda4 	bl	8006f0e <SD_Write_IT>
 80063c6:	e0be      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ce:	f240 233a 	movw	r3, #570	; 0x23a
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80b6 	beq.w	8006546 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	f043 0208 	orr.w	r2, r3, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	f043 0220 	orr.w	r2, r3, #32
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	f043 0210 	orr.w	r2, r3, #16
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	f043 0208 	orr.w	r2, r3, #8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f240 723a 	movw	r2, #1850	; 0x73a
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006474:	f023 0302 	bic.w	r3, r3, #2
 8006478:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f002 fd2c 	bl	8008edc <SDMMC_CmdStopTransfer>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f855 	bl	8006558 <HAL_SD_ErrorCallback>
}
 80064ae:	e04a      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d045      	beq.n	8006546 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <HAL_SD_IRQHandler+0x282>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <HAL_SD_IRQHandler+0x304>)
 80064d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fa02 	bl	80048e4 <HAL_DMA_Abort_IT>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d02f      	beq.n	8006546 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 face 	bl	8006a8c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80064f0:	e029      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_SD_IRQHandler+0x2ba>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d011      	beq.n	800652a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	4a12      	ldr	r2, [pc, #72]	; (8006554 <HAL_SD_IRQHandler+0x308>)
 800650c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe f9e6 	bl	80048e4 <HAL_DMA_Abort_IT>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d013      	beq.n	8006546 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fae9 	bl	8006afa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006528:	e00d      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f003 f8fc 	bl	800973c <HAL_SD_AbortCallback>
}
 8006544:	e7ff      	b.n	8006546 <HAL_SD_IRQHandler+0x2fa>
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	08006a8d 	.word	0x08006a8d
 8006554:	08006afb 	.word	0x08006afb

08006558 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657a:	0f9b      	lsrs	r3, r3, #30
 800657c:	b2da      	uxtb	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006586:	0e9b      	lsrs	r3, r3, #26
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	b2da      	uxtb	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006598:	0e1b      	lsrs	r3, r3, #24
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065cc:	0d1b      	lsrs	r3, r3, #20
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ea:	0bdb      	lsrs	r3, r3, #15
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065fc:	0b9b      	lsrs	r3, r3, #14
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800660e:	0b5b      	lsrs	r3, r3, #13
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006620:	0b1b      	lsrs	r3, r3, #12
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2200      	movs	r2, #0
 8006632:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006638:	2b00      	cmp	r3, #0
 800663a:	d163      	bne.n	8006704 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006640:	009a      	lsls	r2, r3, #2
 8006642:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006646:	4013      	ands	r3, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800664c:	0f92      	lsrs	r2, r2, #30
 800664e:	431a      	orrs	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006658:	0edb      	lsrs	r3, r3, #27
 800665a:	b2db      	uxtb	r3, r3
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	b2da      	uxtb	r2, r3
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800666a:	0e1b      	lsrs	r3, r3, #24
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	b2da      	uxtb	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667c:	0d5b      	lsrs	r3, r3, #21
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	b2da      	uxtb	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	0c9b      	lsrs	r3, r3, #18
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	b2da      	uxtb	r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a0:	0bdb      	lsrs	r3, r3, #15
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	7e1b      	ldrb	r3, [r3, #24]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	3302      	adds	r3, #2
 80066c4:	2201      	movs	r2, #1
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80066ce:	fb02 f203 	mul.w	r2, r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	7a1b      	ldrb	r3, [r3, #8]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	2201      	movs	r2, #1
 80066e2:	409a      	lsls	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80066f0:	0a52      	lsrs	r2, r2, #9
 80066f2:	fb02 f203 	mul.w	r2, r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006700:	661a      	str	r2, [r3, #96]	; 0x60
 8006702:	e031      	b.n	8006768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006708:	2b01      	cmp	r3, #1
 800670a:	d11d      	bne.n	8006748 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006710:	041b      	lsls	r3, r3, #16
 8006712:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	431a      	orrs	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	3301      	adds	r3, #1
 8006728:	029a      	lsls	r2, r3, #10
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800673c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	661a      	str	r2, [r3, #96]	; 0x60
 8006746:	e00f      	b.n	8006768 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a58      	ldr	r2, [pc, #352]	; (80068b0 <HAL_SD_GetCardCSD+0x344>)
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e09d      	b.n	80068a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676c:	0b9b      	lsrs	r3, r3, #14
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	b2da      	uxtb	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	b2da      	uxtb	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006796:	b2da      	uxtb	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	0fdb      	lsrs	r3, r3, #31
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	0f5b      	lsrs	r3, r3, #29
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	0e9b      	lsrs	r3, r3, #26
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d0:	0d9b      	lsrs	r3, r3, #22
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	0d5b      	lsrs	r3, r3, #21
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	0bdb      	lsrs	r3, r3, #15
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	0b9b      	lsrs	r3, r3, #14
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	0b5b      	lsrs	r3, r3, #13
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	0b1b      	lsrs	r3, r3, #12
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	0a9b      	lsrs	r3, r3, #10
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	b2da      	uxtb	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	b2da      	uxtb	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006892:	b2da      	uxtb	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	004005ff 	.word	0x004005ff

080068b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006918:	f107 030c 	add.w	r3, r7, #12
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa7c 	bl	8006e1c <SD_SendStatus>
 8006924:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	0a5b      	lsrs	r3, r3, #9
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006942:	693b      	ldr	r3, [r7, #16]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006988:	2b82      	cmp	r3, #130	; 0x82
 800698a:	d111      	bne.n	80069b0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f002 faa3 	bl	8008edc <SDMMC_CmdStopTransfer>
 8006996:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fdd4 	bl	8006558 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0208 	bic.w	r2, r2, #8
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f002 fec3 	bl	8009764 <HAL_SD_RxCpltCallback>
#endif
}
 80069de:	bf00      	nop
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fe f920 	bl	8004c3c <HAL_DMA_GetError>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d03e      	beq.n	8006a80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <SD_DMAError+0x36>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d12d      	bne.n	8006a7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a19      	ldr	r2, [pc, #100]	; (8006a88 <SD_DMAError+0xa0>)
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006a34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006a42:	6978      	ldr	r0, [r7, #20]
 8006a44:	f7ff ff62 	bl	800690c <HAL_SD_GetCardState>
 8006a48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d002      	beq.n	8006a56 <SD_DMAError+0x6e>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d10a      	bne.n	8006a6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f002 fa3e 	bl	8008edc <SDMMC_CmdStopTransfer>
 8006a60:	4602      	mov	r2, r0
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	431a      	orrs	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2200      	movs	r2, #0
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006a7a:	6978      	ldr	r0, [r7, #20]
 8006a7c:	f7ff fd6c 	bl	8006558 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006a80:	bf00      	nop
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	004005ff 	.word	0x004005ff

08006a8c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff ff31 	bl	800690c <HAL_SD_GetCardState>
 8006aaa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d002      	beq.n	8006ac6 <SD_DMATxAbort+0x3a>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d10a      	bne.n	8006adc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 fa06 	bl	8008edc <SDMMC_CmdStopTransfer>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f002 fe29 	bl	800973c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006aea:	e002      	b.n	8006af2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff fd33 	bl	8006558 <HAL_SD_ErrorCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fefa 	bl	800690c <HAL_SD_GetCardState>
 8006b18:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d002      	beq.n	8006b34 <SD_DMARxAbort+0x3a>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	d10a      	bne.n	8006b4a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f002 f9cf 	bl	8008edc <SDMMC_CmdStopTransfer>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f002 fdf2 	bl	800973c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b58:	e002      	b.n	8006b60 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fcfc 	bl	8006558 <HAL_SD_ErrorCallback>
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b68:	b5b0      	push	{r4, r5, r7, lr}
 8006b6a:	b094      	sub	sp, #80	; 0x50
 8006b6c:	af04      	add	r7, sp, #16
 8006b6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b70:	2301      	movs	r3, #1
 8006b72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f881 	bl	8008c80 <SDIO_GetPowerState>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b88:	e0b6      	b.n	8006cf8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d02f      	beq.n	8006bf2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f002 fa67 	bl	800906a <SDMMC_CmdSendCID>
 8006b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	e0a7      	b.n	8006cf8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f002 f8ab 	bl	8008d0a <SDIO_GetResponse>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2104      	movs	r1, #4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 f8a2 	bl	8008d0a <SDIO_GetResponse>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2108      	movs	r1, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 f899 	bl	8008d0a <SDIO_GetResponse>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	210c      	movs	r1, #12
 8006be4:	4618      	mov	r0, r3
 8006be6:	f002 f890 	bl	8008d0a <SDIO_GetResponse>
 8006bea:	4602      	mov	r2, r0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d00d      	beq.n	8006c16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f107 020e 	add.w	r2, r7, #14
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f002 fa6d 	bl	80090e4 <SDMMC_CmdSetRelAdd>
 8006c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <SD_InitCard+0xae>
    {
      return errorstate;
 8006c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c14:	e070      	b.n	8006cf8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d036      	beq.n	8006c8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c1e:	89fb      	ldrh	r3, [r7, #14]
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f002 fa37 	bl	80090a6 <SDMMC_CmdSendCSD>
 8006c38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	e059      	b.n	8006cf8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 f85d 	bl	8008d0a <SDIO_GetResponse>
 8006c50:	4602      	mov	r2, r0
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2104      	movs	r1, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f002 f854 	bl	8008d0a <SDIO_GetResponse>
 8006c62:	4602      	mov	r2, r0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2108      	movs	r1, #8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f002 f84b 	bl	8008d0a <SDIO_GetResponse>
 8006c74:	4602      	mov	r2, r0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	210c      	movs	r1, #12
 8006c80:	4618      	mov	r0, r3
 8006c82:	f002 f842 	bl	8008d0a <SDIO_GetResponse>
 8006c86:	4602      	mov	r2, r0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2104      	movs	r1, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f002 f839 	bl	8008d0a <SDIO_GetResponse>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	0d1a      	lsrs	r2, r3, #20
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fc60 	bl	800656c <HAL_SD_GetCardCSD>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cb6:	e01f      	b.n	8006cf8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6819      	ldr	r1, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc0:	041b      	lsls	r3, r3, #16
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	f002 f929 	bl	8008f20 <SDMMC_CmdSelDesel>
 8006cce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <SD_InitCard+0x172>
  {
    return errorstate;
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	e00e      	b.n	8006cf8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681d      	ldr	r5, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	466c      	mov	r4, sp
 8006ce2:	f103 0210 	add.w	r2, r3, #16
 8006ce6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cec:	3304      	adds	r3, #4
 8006cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f001 ff6d 	bl	8008bd0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3740      	adds	r7, #64	; 0x40
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bdb0      	pop	{r4, r5, r7, pc}

08006d00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 f924 	bl	8008f66 <SDMMC_CmdGoIdleState>
 8006d1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	e072      	b.n	8006e10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f002 f937 	bl	8008fa2 <SDMMC_CmdOperCond>
 8006d34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00d      	beq.n	8006d58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 f90d 	bl	8008f66 <SDMMC_CmdGoIdleState>
 8006d4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	e05b      	b.n	8006e10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d137      	bne.n	8006dd6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f002 f937 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8006d72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d02d      	beq.n	8006dd6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d7e:	e047      	b.n	8006e10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 f92a 	bl	8008fe0 <SDMMC_CmdAppCommand>
 8006d8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <SD_PowerON+0x98>
    {
      return errorstate;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	e03b      	b.n	8006e10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	491e      	ldr	r1, [pc, #120]	; (8006e18 <SD_PowerON+0x118>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 f940 	bl	8009024 <SDMMC_CmdAppOperCommand>
 8006da4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006db0:	e02e      	b.n	8006e10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 ffa6 	bl	8008d0a <SDIO_GetResponse>
 8006dbe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	0fdb      	lsrs	r3, r3, #31
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <SD_PowerON+0xcc>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <SD_PowerON+0xce>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]

    count++;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d802      	bhi.n	8006de6 <SD_PowerON+0xe6>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0cc      	beq.n	8006d80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d902      	bls.n	8006df6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006df4:	e00c      	b.n	8006e10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
 8006e06:	e002      	b.n	8006e0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	c1100000 	.word	0xc1100000

08006e1c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e30:	e018      	b.n	8006e64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f002 f971 	bl	8009126 <SDMMC_CmdSendStatus>
 8006e44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e009      	b.n	8006e64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 ff57 	bl	8008d0a <SDIO_GetResponse>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03f      	beq.n	8006f06 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e033      	b.n	8006ef4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 fec8 	bl	8008c26 <SDIO_ReadFIFO>
 8006e96:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	0e1b      	lsrs	r3, r3, #24
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b07      	cmp	r3, #7
 8006ef8:	d9c8      	bls.n	8006e8c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d043      	beq.n	8006fb0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e037      	b.n	8006f9e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	021a      	lsls	r2, r3, #8
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	041a      	lsls	r2, r3, #16
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	061a      	lsls	r2, r3, #24
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f107 0208 	add.w	r2, r7, #8
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fe54 	bl	8008c40 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b07      	cmp	r3, #7
 8006fa2:	d9c4      	bls.n	8006f2e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e041      	b.n	800704e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fc fe7e 	bl	8003ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f000 fbb2 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d001      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e04e      	b.n	800710e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a23      	ldr	r2, [pc, #140]	; (800711c <HAL_TIM_Base_Start_IT+0xc4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d022      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709a:	d01d      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <HAL_TIM_Base_Start_IT+0xc8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d018      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <HAL_TIM_Base_Start_IT+0xcc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d013      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <HAL_TIM_Base_Start_IT+0xd0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00e      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1b      	ldr	r2, [pc, #108]	; (800712c <HAL_TIM_Base_Start_IT+0xd4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d009      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a19      	ldr	r2, [pc, #100]	; (8007130 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <HAL_TIM_Base_Start_IT+0x80>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a18      	ldr	r2, [pc, #96]	; (8007134 <HAL_TIM_Base_Start_IT+0xdc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d111      	bne.n	80070fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b06      	cmp	r3, #6
 80070e8:	d010      	beq.n	800710c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0201 	orr.w	r2, r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fa:	e007      	b.n	800710c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40010000 	.word	0x40010000
 8007120:	40000400 	.word	0x40000400
 8007124:	40000800 	.word	0x40000800
 8007128:	40000c00 	.word	0x40000c00
 800712c:	40010400 	.word	0x40010400
 8007130:	40014000 	.word	0x40014000
 8007134:	40001800 	.word	0x40001800

08007138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e041      	b.n	80071ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f839 	bl	80071d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f000 faf2 	bl	8007760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d122      	bne.n	8007246 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b02      	cmp	r3, #2
 800720c:	d11b      	bne.n	8007246 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0202 	mvn.w	r2, #2
 8007216:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fa78 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007232:	e005      	b.n	8007240 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa6a 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa7b 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b04      	cmp	r3, #4
 8007252:	d122      	bne.n	800729a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b04      	cmp	r3, #4
 8007260:	d11b      	bne.n	800729a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0204 	mvn.w	r2, #4
 800726a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa4e 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 8007286:	e005      	b.n	8007294 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fa40 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa51 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d122      	bne.n	80072ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d11b      	bne.n	80072ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f06f 0208 	mvn.w	r2, #8
 80072be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2204      	movs	r2, #4
 80072c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa24 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 80072da:	e005      	b.n	80072e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa16 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa27 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d122      	bne.n	8007342 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b10      	cmp	r3, #16
 8007308:	d11b      	bne.n	8007342 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f06f 0210 	mvn.w	r2, #16
 8007312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2208      	movs	r2, #8
 8007318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f9fa 	bl	8007722 <HAL_TIM_IC_CaptureCallback>
 800732e:	e005      	b.n	800733c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f9ec 	bl	800770e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9fd 	bl	8007736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10e      	bne.n	800736e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f06f 0201 	mvn.w	r2, #1
 8007366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fc f995 	bl	8003698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d10e      	bne.n	800739a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007386:	2b80      	cmp	r3, #128	; 0x80
 8007388:	d107      	bne.n	800739a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fd53 	bl	8007e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	d10e      	bne.n	80073c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d107      	bne.n	80073c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f9c2 	bl	800774a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d10e      	bne.n	80073f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d107      	bne.n	80073f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f06f 0220 	mvn.w	r2, #32
 80073ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fd1d 	bl	8007e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007416:	2302      	movs	r3, #2
 8007418:	e0ae      	b.n	8007578 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	f200 809f 	bhi.w	8007568 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007465 	.word	0x08007465
 8007434:	08007569 	.word	0x08007569
 8007438:	08007569 	.word	0x08007569
 800743c:	08007569 	.word	0x08007569
 8007440:	080074a5 	.word	0x080074a5
 8007444:	08007569 	.word	0x08007569
 8007448:	08007569 	.word	0x08007569
 800744c:	08007569 	.word	0x08007569
 8007450:	080074e7 	.word	0x080074e7
 8007454:	08007569 	.word	0x08007569
 8007458:	08007569 	.word	0x08007569
 800745c:	08007569 	.word	0x08007569
 8007460:	08007527 	.word	0x08007527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fa18 	bl	80078a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0208 	orr.w	r2, r2, #8
 800747e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0204 	bic.w	r2, r2, #4
 800748e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6999      	ldr	r1, [r3, #24]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691a      	ldr	r2, [r3, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	619a      	str	r2, [r3, #24]
      break;
 80074a2:	e064      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fa68 	bl	8007980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6999      	ldr	r1, [r3, #24]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	021a      	lsls	r2, r3, #8
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	619a      	str	r2, [r3, #24]
      break;
 80074e4:	e043      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fabd 	bl	8007a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0208 	orr.w	r2, r2, #8
 8007500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0204 	bic.w	r2, r2, #4
 8007510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69d9      	ldr	r1, [r3, #28]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	61da      	str	r2, [r3, #28]
      break;
 8007524:	e023      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fb11 	bl	8007b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69d9      	ldr	r1, [r3, #28]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	021a      	lsls	r2, r3, #8
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	61da      	str	r2, [r3, #28]
      break;
 8007566:	e002      	b.n	800756e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
      break;
 800756c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_TIM_ConfigClockSource+0x1c>
 8007598:	2302      	movs	r3, #2
 800759a:	e0b4      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x186>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075d4:	d03e      	beq.n	8007654 <HAL_TIM_ConfigClockSource+0xd4>
 80075d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075da:	f200 8087 	bhi.w	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e2:	f000 8086 	beq.w	80076f2 <HAL_TIM_ConfigClockSource+0x172>
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ea:	d87f      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075ec:	2b70      	cmp	r3, #112	; 0x70
 80075ee:	d01a      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0xa6>
 80075f0:	2b70      	cmp	r3, #112	; 0x70
 80075f2:	d87b      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075f4:	2b60      	cmp	r3, #96	; 0x60
 80075f6:	d050      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x11a>
 80075f8:	2b60      	cmp	r3, #96	; 0x60
 80075fa:	d877      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b50      	cmp	r3, #80	; 0x50
 80075fe:	d03c      	beq.n	800767a <HAL_TIM_ConfigClockSource+0xfa>
 8007600:	2b50      	cmp	r3, #80	; 0x50
 8007602:	d873      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	d058      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x13a>
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d86f      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b30      	cmp	r3, #48	; 0x30
 800760e:	d064      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007610:	2b30      	cmp	r3, #48	; 0x30
 8007612:	d86b      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d060      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007618:	2b20      	cmp	r3, #32
 800761a:	d867      	bhi.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d05c      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007620:	2b10      	cmp	r3, #16
 8007622:	d05a      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x15a>
 8007624:	e062      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6899      	ldr	r1, [r3, #8]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f000 fb5d 	bl	8007cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	609a      	str	r2, [r3, #8]
      break;
 8007652:	e04f      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6899      	ldr	r1, [r3, #8]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f000 fb46 	bl	8007cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007676:	609a      	str	r2, [r3, #8]
      break;
 8007678:	e03c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6859      	ldr	r1, [r3, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	461a      	mov	r2, r3
 8007688:	f000 faba 	bl	8007c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2150      	movs	r1, #80	; 0x50
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fb13 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 8007698:	e02c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6859      	ldr	r1, [r3, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f000 fad9 	bl	8007c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2160      	movs	r1, #96	; 0x60
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fb03 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076b8:	e01c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f000 fa9a 	bl	8007c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2140      	movs	r1, #64	; 0x40
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 faf3 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076d8:	e00c      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f000 faea 	bl	8007cbe <TIM_ITRx_SetConfig>
      break;
 80076ea:	e003      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	e000      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a40      	ldr	r2, [pc, #256]	; (8007874 <TIM_Base_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777e:	d00f      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a3d      	ldr	r2, [pc, #244]	; (8007878 <TIM_Base_SetConfig+0x118>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a3c      	ldr	r2, [pc, #240]	; (800787c <TIM_Base_SetConfig+0x11c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a3b      	ldr	r2, [pc, #236]	; (8007880 <TIM_Base_SetConfig+0x120>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a3a      	ldr	r2, [pc, #232]	; (8007884 <TIM_Base_SetConfig+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d108      	bne.n	80077b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <TIM_Base_SetConfig+0x114>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c0:	d027      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <TIM_Base_SetConfig+0x118>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d023      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a2b      	ldr	r2, [pc, #172]	; (800787c <TIM_Base_SetConfig+0x11c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <TIM_Base_SetConfig+0x120>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a29      	ldr	r2, [pc, #164]	; (8007884 <TIM_Base_SetConfig+0x124>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d017      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <TIM_Base_SetConfig+0x128>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a27      	ldr	r2, [pc, #156]	; (800788c <TIM_Base_SetConfig+0x12c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00f      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <TIM_Base_SetConfig+0x130>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00b      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <TIM_Base_SetConfig+0x134>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a24      	ldr	r2, [pc, #144]	; (8007898 <TIM_Base_SetConfig+0x138>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a23      	ldr	r2, [pc, #140]	; (800789c <TIM_Base_SetConfig+0x13c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d108      	bne.n	8007824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <TIM_Base_SetConfig+0x114>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0xf8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0c      	ldr	r2, [pc, #48]	; (8007884 <TIM_Base_SetConfig+0x124>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d103      	bne.n	8007860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	615a      	str	r2, [r3, #20]
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40010400 	.word	0x40010400
 8007888:	40014000 	.word	0x40014000
 800788c:	40014400 	.word	0x40014400
 8007890:	40014800 	.word	0x40014800
 8007894:	40001800 	.word	0x40001800
 8007898:	40001c00 	.word	0x40001c00
 800789c:	40002000 	.word	0x40002000

080078a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0201 	bic.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f023 0302 	bic.w	r3, r3, #2
 80078e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <TIM_OC1_SetConfig+0xd8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC1_SetConfig+0x64>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a1f      	ldr	r2, [pc, #124]	; (800797c <TIM_OC1_SetConfig+0xdc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10c      	bne.n	800791e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f023 0308 	bic.w	r3, r3, #8
 800790a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f023 0304 	bic.w	r3, r3, #4
 800791c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <TIM_OC1_SetConfig+0xd8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_OC1_SetConfig+0x8e>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a14      	ldr	r2, [pc, #80]	; (800797c <TIM_OC1_SetConfig+0xdc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d111      	bne.n	8007952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800793c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	621a      	str	r2, [r3, #32]
}
 800796c:	bf00      	nop
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0210 	bic.w	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0320 	bic.w	r3, r3, #32
 80079ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC2_SetConfig+0x68>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10d      	bne.n	8007a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC2_SetConfig+0x94>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d113      	bne.n	8007a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <TIM_OC3_SetConfig+0xe0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_OC3_SetConfig+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <TIM_OC3_SetConfig+0xe4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d10d      	bne.n	8007aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <TIM_OC3_SetConfig+0xe0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0x92>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a15      	ldr	r2, [pc, #84]	; (8007b50 <TIM_OC3_SetConfig+0xe4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d113      	bne.n	8007b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400

08007b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	031b      	lsls	r3, r3, #12
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a12      	ldr	r2, [pc, #72]	; (8007bf8 <TIM_OC4_SetConfig+0xa4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC4_SetConfig+0x68>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <TIM_OC4_SetConfig+0xa8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d109      	bne.n	8007bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	019b      	lsls	r3, r3, #6
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400

08007c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0201 	bic.w	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f023 030a 	bic.w	r3, r3, #10
 8007c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b087      	sub	sp, #28
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f023 0210 	bic.w	r2, r3, #16
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f043 0307 	orr.w	r3, r3, #7
 8007ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	609a      	str	r2, [r3, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	021a      	lsls	r2, r3, #8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e05a      	b.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d98:	d01d      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1b      	ldr	r2, [pc, #108]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1a      	ldr	r2, [pc, #104]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a18      	ldr	r2, [pc, #96]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a17      	ldr	r2, [pc, #92]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d10c      	bne.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40001800 	.word	0x40001800

08007e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e03f      	b.n	8007ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fc f846 	bl	8003f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2224      	movs	r2, #36	; 0x24
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fcd1 	bl	8008840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695a      	ldr	r2, [r3, #20]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d11d      	bne.n	8007f44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <HAL_UART_Receive_IT+0x26>
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e016      	b.n	8007f46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_UART_Receive_IT+0x38>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e00f      	b.n	8007f46 <HAL_UART_Receive_IT+0x58>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	461a      	mov	r2, r3
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 faac 	bl	8008498 <UART_Start_Receive_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	e000      	b.n	8007f46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
  }
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b0ba      	sub	sp, #232	; 0xe8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10f      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x66>
 8007fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb8b 	bl	80086ca <UART_Receive_IT>
      return;
 8007fb4:	e256      	b.n	8008464 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 80de 	beq.w	800817c <HAL_UART_IRQHandler+0x22c>
 8007fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d106      	bne.n	8007fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80d1 	beq.w	800817c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <HAL_UART_IRQHandler+0xae>
 8007fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	f043 0201 	orr.w	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <HAL_UART_IRQHandler+0xd2>
 800800a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	f043 0202 	orr.w	r2, r3, #2
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <HAL_UART_IRQHandler+0xf6>
 800802e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	f043 0204 	orr.w	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d011      	beq.n	8008076 <HAL_UART_IRQHandler+0x126>
 8008052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d105      	bne.n	800806a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800805e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f043 0208 	orr.w	r2, r3, #8
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 81ed 	beq.w	800845a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	d008      	beq.n	800809e <HAL_UART_IRQHandler+0x14e>
 800808c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fb16 	bl	80086ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a8:	2b40      	cmp	r3, #64	; 0x40
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d103      	bne.n	80080ca <HAL_UART_IRQHandler+0x17a>
 80080c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d04f      	beq.n	800816a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa1e 	bl	800850c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080da:	2b40      	cmp	r3, #64	; 0x40
 80080dc:	d141      	bne.n	8008162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3314      	adds	r3, #20
 80080e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3314      	adds	r3, #20
 8008106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800810a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800810e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1d9      	bne.n	80080de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	4a7d      	ldr	r2, [pc, #500]	; (800832c <HAL_UART_IRQHandler+0x3dc>)
 8008138:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	4618      	mov	r0, r3
 8008140:	f7fc fbd0 	bl	80048e4 <HAL_DMA_Abort_IT>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d016      	beq.n	8008178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008158:	e00e      	b.n	8008178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f986 	bl	800846c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	e00a      	b.n	8008178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f982 	bl	800846c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	e006      	b.n	8008178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f97e 	bl	800846c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008176:	e170      	b.n	800845a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	bf00      	nop
    return;
 800817a:	e16e      	b.n	800845a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	2b01      	cmp	r3, #1
 8008182:	f040 814a 	bne.w	800841a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 8143 	beq.w	800841a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 813c 	beq.w	800841a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081a2:	2300      	movs	r3, #0
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	f040 80b4 	bne.w	8008330 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8140 	beq.w	800845e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081e6:	429a      	cmp	r2, r3
 80081e8:	f080 8139 	bcs.w	800845e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fe:	f000 8088 	beq.w	8008312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	330c      	adds	r3, #12
 8008208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800821c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800822e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800823a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1d9      	bne.n	8008202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3314      	adds	r3, #20
 8008254:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800825e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008260:	f023 0301 	bic.w	r3, r3, #1
 8008264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3314      	adds	r3, #20
 800826e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008272:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008276:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800827a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e1      	bne.n	800824e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3314      	adds	r3, #20
 8008290:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800829a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800829c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3314      	adds	r3, #20
 80082aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e3      	bne.n	800828a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2220      	movs	r2, #32
 80082c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	330c      	adds	r3, #12
 80082d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e2:	f023 0310 	bic.w	r3, r3, #16
 80082e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	330c      	adds	r3, #12
 80082f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80082f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e3      	bne.n	80082d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	4618      	mov	r0, r3
 800830e:	f7fc fa79 	bl	8004804 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800831a:	b29b      	uxth	r3, r3
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	b29b      	uxth	r3, r3
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f8ac 	bl	8008480 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008328:	e099      	b.n	800845e <HAL_UART_IRQHandler+0x50e>
 800832a:	bf00      	nop
 800832c:	080085d3 	.word	0x080085d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008338:	b29b      	uxth	r3, r3
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 808b 	beq.w	8008462 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800834c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8086 	beq.w	8008462 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	330c      	adds	r3, #12
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800836c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330c      	adds	r3, #12
 8008376:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800837a:	647a      	str	r2, [r7, #68]	; 0x44
 800837c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e3      	bne.n	8008356 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3314      	adds	r3, #20
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	623b      	str	r3, [r7, #32]
   return(result);
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3314      	adds	r3, #20
 80083ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083b2:	633a      	str	r2, [r7, #48]	; 0x30
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e3      	bne.n	800838e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0310 	bic.w	r3, r3, #16
 80083ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083f8:	61fa      	str	r2, [r7, #28]
 80083fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	69b9      	ldr	r1, [r7, #24]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	617b      	str	r3, [r7, #20]
   return(result);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e3      	bne.n	80083d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800840c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f834 	bl	8008480 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008418:	e023      	b.n	8008462 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800841a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <HAL_UART_IRQHandler+0x4ea>
 8008426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f8e1 	bl	80085fa <UART_Transmit_IT>
    return;
 8008438:	e014      	b.n	8008464 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800843a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00e      	beq.n	8008464 <HAL_UART_IRQHandler+0x514>
 8008446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f921 	bl	800869a <UART_EndTransmit_IT>
    return;
 8008458:	e004      	b.n	8008464 <HAL_UART_IRQHandler+0x514>
    return;
 800845a:	bf00      	nop
 800845c:	e002      	b.n	8008464 <HAL_UART_IRQHandler+0x514>
      return;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <HAL_UART_IRQHandler+0x514>
      return;
 8008462:	bf00      	nop
  }
}
 8008464:	37e8      	adds	r7, #232	; 0xe8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop

0800846c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2222      	movs	r2, #34	; 0x22
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695a      	ldr	r2, [r3, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0201 	orr.w	r2, r2, #1
 80084ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0220 	orr.w	r2, r2, #32
 80084fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b095      	sub	sp, #84	; 0x54
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800852a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	330c      	adds	r3, #12
 8008532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008534:	643a      	str	r2, [r7, #64]	; 0x40
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800853a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e5      	bne.n	8008514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3314      	adds	r3, #20
 800854e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	61fb      	str	r3, [r7, #28]
   return(result);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f023 0301 	bic.w	r3, r3, #1
 800855e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3314      	adds	r3, #20
 8008566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	2b01      	cmp	r3, #1
 8008582:	d119      	bne.n	80085b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	330c      	adds	r3, #12
 800858a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	60bb      	str	r3, [r7, #8]
   return(result);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f023 0310 	bic.w	r3, r3, #16
 800859a:	647b      	str	r3, [r7, #68]	; 0x44
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a4:	61ba      	str	r2, [r7, #24]
 80085a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	613b      	str	r3, [r7, #16]
   return(result);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085c6:	bf00      	nop
 80085c8:	3754      	adds	r7, #84	; 0x54
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7ff ff3d 	bl	800846c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b21      	cmp	r3, #33	; 0x21
 800860c:	d13e      	bne.n	800868c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008616:	d114      	bne.n	8008642 <UART_Transmit_IT+0x48>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d110      	bne.n	8008642 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008634:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	621a      	str	r2, [r3, #32]
 8008640:	e008      	b.n	8008654 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	1c59      	adds	r1, r3, #1
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6211      	str	r1, [r2, #32]
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4619      	mov	r1, r3
 8008662:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10f      	bne.n	8008688 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008676:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008686:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	e000      	b.n	800868e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800868c:	2302      	movs	r3, #2
  }
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fa fb3a 	bl	8002d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b08c      	sub	sp, #48	; 0x30
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b22      	cmp	r3, #34	; 0x22
 80086dc:	f040 80ab 	bne.w	8008836 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e8:	d117      	bne.n	800871a <UART_Receive_IT+0x50>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d113      	bne.n	800871a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	b29b      	uxth	r3, r3
 8008704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008708:	b29a      	uxth	r2, r3
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	1c9a      	adds	r2, r3, #2
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	629a      	str	r2, [r3, #40]	; 0x28
 8008718:	e026      	b.n	8008768 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008720:	2300      	movs	r3, #0
 8008722:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800872c:	d007      	beq.n	800873e <UART_Receive_IT+0x74>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <UART_Receive_IT+0x82>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	b2da      	uxtb	r2, r3
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	e008      	b.n	800875e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008758:	b2da      	uxtb	r2, r3
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800876c:	b29b      	uxth	r3, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	b29b      	uxth	r3, r3
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4619      	mov	r1, r3
 8008776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008778:	2b00      	cmp	r3, #0
 800877a:	d15a      	bne.n	8008832 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0220 	bic.w	r2, r2, #32
 800878a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800879a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695a      	ldr	r2, [r3, #20]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0201 	bic.w	r2, r2, #1
 80087aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d135      	bne.n	8008828 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	330c      	adds	r3, #12
 80087c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	613b      	str	r3, [r7, #16]
   return(result);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f023 0310 	bic.w	r3, r3, #16
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	330c      	adds	r3, #12
 80087e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e2:	623a      	str	r2, [r7, #32]
 80087e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	69f9      	ldr	r1, [r7, #28]
 80087e8:	6a3a      	ldr	r2, [r7, #32]
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e5      	bne.n	80087c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d10a      	bne.n	800881a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fe2d 	bl	8008480 <HAL_UARTEx_RxEventCallback>
 8008826:	e002      	b.n	800882e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7fa fa69 	bl	8002d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e002      	b.n	8008838 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e000      	b.n	8008838 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008836:	2302      	movs	r3, #2
  }
}
 8008838:	4618      	mov	r0, r3
 800883a:	3730      	adds	r7, #48	; 0x30
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	b09f      	sub	sp, #124	; 0x7c
 8008846:	af00      	add	r7, sp, #0
 8008848:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800884a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	68d9      	ldr	r1, [r3, #12]
 8008858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	ea40 0301 	orr.w	r3, r0, r1
 8008860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	431a      	orrs	r2, r3
 800886c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	431a      	orrs	r2, r3
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	4313      	orrs	r3, r2
 8008878:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800887a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008884:	f021 010c 	bic.w	r1, r1, #12
 8008888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800888e:	430b      	orrs	r3, r1
 8008890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800889c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889e:	6999      	ldr	r1, [r3, #24]
 80088a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	ea40 0301 	orr.w	r3, r0, r1
 80088a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4bc5      	ldr	r3, [pc, #788]	; (8008bc4 <UART_SetConfig+0x384>)
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d004      	beq.n	80088be <UART_SetConfig+0x7e>
 80088b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	4bc3      	ldr	r3, [pc, #780]	; (8008bc8 <UART_SetConfig+0x388>)
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d103      	bne.n	80088c6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088be:	f7fd fa09 	bl	8005cd4 <HAL_RCC_GetPCLK2Freq>
 80088c2:	6778      	str	r0, [r7, #116]	; 0x74
 80088c4:	e002      	b.n	80088cc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088c6:	f7fd f9f1 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 80088ca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088d4:	f040 80b6 	bne.w	8008a44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088da:	461c      	mov	r4, r3
 80088dc:	f04f 0500 	mov.w	r5, #0
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	1891      	adds	r1, r2, r2
 80088e6:	6439      	str	r1, [r7, #64]	; 0x40
 80088e8:	415b      	adcs	r3, r3
 80088ea:	647b      	str	r3, [r7, #68]	; 0x44
 80088ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088f0:	1912      	adds	r2, r2, r4
 80088f2:	eb45 0303 	adc.w	r3, r5, r3
 80088f6:	f04f 0000 	mov.w	r0, #0
 80088fa:	f04f 0100 	mov.w	r1, #0
 80088fe:	00d9      	lsls	r1, r3, #3
 8008900:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008904:	00d0      	lsls	r0, r2, #3
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	1911      	adds	r1, r2, r4
 800890c:	6639      	str	r1, [r7, #96]	; 0x60
 800890e:	416b      	adcs	r3, r5
 8008910:	667b      	str	r3, [r7, #100]	; 0x64
 8008912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	461a      	mov	r2, r3
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	1891      	adds	r1, r2, r2
 800891e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008920:	415b      	adcs	r3, r3
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008928:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800892c:	f7f8 f934 	bl	8000b98 <__aeabi_uldivmod>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4ba5      	ldr	r3, [pc, #660]	; (8008bcc <UART_SetConfig+0x38c>)
 8008936:	fba3 2302 	umull	r2, r3, r3, r2
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	011e      	lsls	r6, r3, #4
 800893e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008940:	461c      	mov	r4, r3
 8008942:	f04f 0500 	mov.w	r5, #0
 8008946:	4622      	mov	r2, r4
 8008948:	462b      	mov	r3, r5
 800894a:	1891      	adds	r1, r2, r2
 800894c:	6339      	str	r1, [r7, #48]	; 0x30
 800894e:	415b      	adcs	r3, r3
 8008950:	637b      	str	r3, [r7, #52]	; 0x34
 8008952:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008956:	1912      	adds	r2, r2, r4
 8008958:	eb45 0303 	adc.w	r3, r5, r3
 800895c:	f04f 0000 	mov.w	r0, #0
 8008960:	f04f 0100 	mov.w	r1, #0
 8008964:	00d9      	lsls	r1, r3, #3
 8008966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800896a:	00d0      	lsls	r0, r2, #3
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	1911      	adds	r1, r2, r4
 8008972:	65b9      	str	r1, [r7, #88]	; 0x58
 8008974:	416b      	adcs	r3, r5
 8008976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	461a      	mov	r2, r3
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	1891      	adds	r1, r2, r2
 8008984:	62b9      	str	r1, [r7, #40]	; 0x28
 8008986:	415b      	adcs	r3, r3
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800898a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800898e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008992:	f7f8 f901 	bl	8000b98 <__aeabi_uldivmod>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4b8c      	ldr	r3, [pc, #560]	; (8008bcc <UART_SetConfig+0x38c>)
 800899c:	fba3 1302 	umull	r1, r3, r3, r2
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	2164      	movs	r1, #100	; 0x64
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	3332      	adds	r3, #50	; 0x32
 80089ae:	4a87      	ldr	r2, [pc, #540]	; (8008bcc <UART_SetConfig+0x38c>)
 80089b0:	fba2 2303 	umull	r2, r3, r2, r3
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089bc:	441e      	add	r6, r3
 80089be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c0:	4618      	mov	r0, r3
 80089c2:	f04f 0100 	mov.w	r1, #0
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	1894      	adds	r4, r2, r2
 80089cc:	623c      	str	r4, [r7, #32]
 80089ce:	415b      	adcs	r3, r3
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
 80089d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089d6:	1812      	adds	r2, r2, r0
 80089d8:	eb41 0303 	adc.w	r3, r1, r3
 80089dc:	f04f 0400 	mov.w	r4, #0
 80089e0:	f04f 0500 	mov.w	r5, #0
 80089e4:	00dd      	lsls	r5, r3, #3
 80089e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089ea:	00d4      	lsls	r4, r2, #3
 80089ec:	4622      	mov	r2, r4
 80089ee:	462b      	mov	r3, r5
 80089f0:	1814      	adds	r4, r2, r0
 80089f2:	653c      	str	r4, [r7, #80]	; 0x50
 80089f4:	414b      	adcs	r3, r1
 80089f6:	657b      	str	r3, [r7, #84]	; 0x54
 80089f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 0300 	mov.w	r3, #0
 8008a02:	1891      	adds	r1, r2, r2
 8008a04:	61b9      	str	r1, [r7, #24]
 8008a06:	415b      	adcs	r3, r3
 8008a08:	61fb      	str	r3, [r7, #28]
 8008a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a12:	f7f8 f8c1 	bl	8000b98 <__aeabi_uldivmod>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4b6c      	ldr	r3, [pc, #432]	; (8008bcc <UART_SetConfig+0x38c>)
 8008a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	2164      	movs	r1, #100	; 0x64
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	3332      	adds	r3, #50	; 0x32
 8008a2e:	4a67      	ldr	r2, [pc, #412]	; (8008bcc <UART_SetConfig+0x38c>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	095b      	lsrs	r3, r3, #5
 8008a36:	f003 0207 	and.w	r2, r3, #7
 8008a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4432      	add	r2, r6
 8008a40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a42:	e0b9      	b.n	8008bb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a46:	461c      	mov	r4, r3
 8008a48:	f04f 0500 	mov.w	r5, #0
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	462b      	mov	r3, r5
 8008a50:	1891      	adds	r1, r2, r2
 8008a52:	6139      	str	r1, [r7, #16]
 8008a54:	415b      	adcs	r3, r3
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a5c:	1912      	adds	r2, r2, r4
 8008a5e:	eb45 0303 	adc.w	r3, r5, r3
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f04f 0100 	mov.w	r1, #0
 8008a6a:	00d9      	lsls	r1, r3, #3
 8008a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a70:	00d0      	lsls	r0, r2, #3
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	eb12 0804 	adds.w	r8, r2, r4
 8008a7a:	eb43 0905 	adc.w	r9, r3, r5
 8008a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f04f 0100 	mov.w	r1, #0
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	008b      	lsls	r3, r1, #2
 8008a92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a96:	0082      	lsls	r2, r0, #2
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	f7f8 f87c 	bl	8000b98 <__aeabi_uldivmod>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4b49      	ldr	r3, [pc, #292]	; (8008bcc <UART_SetConfig+0x38c>)
 8008aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	011e      	lsls	r6, r3, #4
 8008aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f04f 0100 	mov.w	r1, #0
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	1894      	adds	r4, r2, r2
 8008abc:	60bc      	str	r4, [r7, #8]
 8008abe:	415b      	adcs	r3, r3
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ac6:	1812      	adds	r2, r2, r0
 8008ac8:	eb41 0303 	adc.w	r3, r1, r3
 8008acc:	f04f 0400 	mov.w	r4, #0
 8008ad0:	f04f 0500 	mov.w	r5, #0
 8008ad4:	00dd      	lsls	r5, r3, #3
 8008ad6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ada:	00d4      	lsls	r4, r2, #3
 8008adc:	4622      	mov	r2, r4
 8008ade:	462b      	mov	r3, r5
 8008ae0:	1814      	adds	r4, r2, r0
 8008ae2:	64bc      	str	r4, [r7, #72]	; 0x48
 8008ae4:	414b      	adcs	r3, r1
 8008ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f04f 0100 	mov.w	r1, #0
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	008b      	lsls	r3, r1, #2
 8008afc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b00:	0082      	lsls	r2, r0, #2
 8008b02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b06:	f7f8 f847 	bl	8000b98 <__aeabi_uldivmod>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4b2f      	ldr	r3, [pc, #188]	; (8008bcc <UART_SetConfig+0x38c>)
 8008b10:	fba3 1302 	umull	r1, r3, r3, r2
 8008b14:	095b      	lsrs	r3, r3, #5
 8008b16:	2164      	movs	r1, #100	; 0x64
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	3332      	adds	r3, #50	; 0x32
 8008b22:	4a2a      	ldr	r2, [pc, #168]	; (8008bcc <UART_SetConfig+0x38c>)
 8008b24:	fba2 2303 	umull	r2, r3, r2, r3
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b2e:	441e      	add	r6, r3
 8008b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b32:	4618      	mov	r0, r3
 8008b34:	f04f 0100 	mov.w	r1, #0
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	1894      	adds	r4, r2, r2
 8008b3e:	603c      	str	r4, [r7, #0]
 8008b40:	415b      	adcs	r3, r3
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b48:	1812      	adds	r2, r2, r0
 8008b4a:	eb41 0303 	adc.w	r3, r1, r3
 8008b4e:	f04f 0400 	mov.w	r4, #0
 8008b52:	f04f 0500 	mov.w	r5, #0
 8008b56:	00dd      	lsls	r5, r3, #3
 8008b58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b5c:	00d4      	lsls	r4, r2, #3
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	eb12 0a00 	adds.w	sl, r2, r0
 8008b66:	eb43 0b01 	adc.w	fp, r3, r1
 8008b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f04f 0100 	mov.w	r1, #0
 8008b74:	f04f 0200 	mov.w	r2, #0
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	008b      	lsls	r3, r1, #2
 8008b7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b82:	0082      	lsls	r2, r0, #2
 8008b84:	4650      	mov	r0, sl
 8008b86:	4659      	mov	r1, fp
 8008b88:	f7f8 f806 	bl	8000b98 <__aeabi_uldivmod>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4b0e      	ldr	r3, [pc, #56]	; (8008bcc <UART_SetConfig+0x38c>)
 8008b92:	fba3 1302 	umull	r1, r3, r3, r2
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	2164      	movs	r1, #100	; 0x64
 8008b9a:	fb01 f303 	mul.w	r3, r1, r3
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	3332      	adds	r3, #50	; 0x32
 8008ba4:	4a09      	ldr	r2, [pc, #36]	; (8008bcc <UART_SetConfig+0x38c>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	f003 020f 	and.w	r2, r3, #15
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4432      	add	r2, r6
 8008bb6:	609a      	str	r2, [r3, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	377c      	adds	r7, #124	; 0x7c
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc2:	bf00      	nop
 8008bc4:	40011000 	.word	0x40011000
 8008bc8:	40011400 	.word	0x40011400
 8008bcc:	51eb851f 	.word	0x51eb851f

08008bd0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	f107 001c 	add.w	r0, r7, #28
 8008bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008be6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008be8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008bee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008bf2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008bf6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008bfa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	b004      	add	sp, #16
 8008c24:	4770      	bx	lr

08008c26 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2203      	movs	r2, #3
 8008c6e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008c70:	2002      	movs	r0, #2
 8008c72:	f7fb fbbb 	bl	80043ec <HAL_Delay>
  
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0303 	and.w	r3, r3, #3
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008cc0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008cc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cd6:	f023 030f 	bic.w	r3, r3, #15
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	b2db      	uxtb	r3, r3
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3314      	adds	r3, #20
 8008d18:	461a      	mov	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
}  
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d56:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0

}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d96:	2310      	movs	r3, #16
 8008d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d9a:	2340      	movs	r3, #64	; 0x40
 8008d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008da8:	f107 0308 	add.w	r3, r7, #8
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff ff74 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db8:	2110      	movs	r1, #16
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa02 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008dda:	2311      	movs	r3, #17
 8008ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dec:	f107 0308 	add.w	r3, r7, #8
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff ff52 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfc:	2111      	movs	r1, #17
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9e0 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e06:	69fb      	ldr	r3, [r7, #28]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e1e:	2312      	movs	r3, #18
 8008e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e22:	2340      	movs	r3, #64	; 0x40
 8008e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e26:	2300      	movs	r3, #0
 8008e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e30:	f107 0308 	add.w	r3, r7, #8
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff ff30 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e40:	2112      	movs	r1, #18
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f9be 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4a:	69fb      	ldr	r3, [r7, #28]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e62:	2318      	movs	r3, #24
 8008e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e66:	2340      	movs	r3, #64	; 0x40
 8008e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e74:	f107 0308 	add.w	r3, r7, #8
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff ff0e 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e84:	2118      	movs	r1, #24
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f99c 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e8e:	69fb      	ldr	r3, [r7, #28]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008ea6:	2319      	movs	r3, #25
 8008ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eaa:	2340      	movs	r3, #64	; 0x40
 8008eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eb8:	f107 0308 	add.w	r3, r7, #8
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff feec 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	2119      	movs	r1, #25
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f97a 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ee8:	230c      	movs	r3, #12
 8008eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eec:	2340      	movs	r3, #64	; 0x40
 8008eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fecb 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008f06:	4a05      	ldr	r2, [pc, #20]	; (8008f1c <SDMMC_CmdStopTransfer+0x40>)
 8008f08:	210c      	movs	r1, #12
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f95a 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f12:	69fb      	ldr	r3, [r7, #28]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3720      	adds	r7, #32
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	05f5e100 	.word	0x05f5e100

08008f20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f30:	2307      	movs	r3, #7
 8008f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f34:	2340      	movs	r3, #64	; 0x40
 8008f36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	4619      	mov	r1, r3
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff fea7 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f52:	2107      	movs	r1, #7
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f935 	bl	80091c4 <SDMMC_GetCmdResp1>
 8008f5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3728      	adds	r7, #40	; 0x28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fe86 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f8eb 	bl	800916c <SDMMC_GetCmdError>
 8008f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f98:	69fb      	ldr	r3, [r7, #28]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b088      	sub	sp, #32
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008faa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fc2:	f107 0308 	add.w	r3, r7, #8
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff fe67 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fae2 	bl	8009598 <SDMMC_GetCmdResp7>
 8008fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fee:	2337      	movs	r3, #55	; 0x37
 8008ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ff2:	2340      	movs	r3, #64	; 0x40
 8008ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009000:	f107 0308 	add.w	r3, r7, #8
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff fe48 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800900c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009010:	2137      	movs	r1, #55	; 0x37
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8d6 	bl	80091c4 <SDMMC_GetCmdResp1>
 8009018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901a:	69fb      	ldr	r3, [r7, #28]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800903a:	2329      	movs	r3, #41	; 0x29
 800903c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800903e:	2340      	movs	r3, #64	; 0x40
 8009040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800904c:	f107 0308 	add.w	r3, r7, #8
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff fe22 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f9e9 	bl	8009430 <SDMMC_GetCmdResp3>
 800905e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009060:	69fb      	ldr	r3, [r7, #28]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b088      	sub	sp, #32
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009076:	2302      	movs	r3, #2
 8009078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800907a:	23c0      	movs	r3, #192	; 0xc0
 800907c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009088:	f107 0308 	add.w	r3, r7, #8
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fe04 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f983 	bl	80093a0 <SDMMC_GetCmdResp2>
 800909a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909c:	69fb      	ldr	r3, [r7, #28]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b088      	sub	sp, #32
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80090b4:	2309      	movs	r3, #9
 80090b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80090b8:	23c0      	movs	r3, #192	; 0xc0
 80090ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090c6:	f107 0308 	add.w	r3, r7, #8
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff fde5 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f964 	bl	80093a0 <SDMMC_GetCmdResp2>
 80090d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80090f2:	2303      	movs	r3, #3
 80090f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009102:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009104:	f107 0308 	add.w	r3, r7, #8
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff fdc6 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	2103      	movs	r1, #3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f9c9 	bl	80094ac <SDMMC_GetCmdResp6>
 800911a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800911c:	69fb      	ldr	r3, [r7, #28]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b088      	sub	sp, #32
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009134:	230d      	movs	r3, #13
 8009136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009138:	2340      	movs	r3, #64	; 0x40
 800913a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009144:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff fda5 	bl	8008c9c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009152:	f241 3288 	movw	r2, #5000	; 0x1388
 8009156:	210d      	movs	r1, #13
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f833 	bl	80091c4 <SDMMC_GetCmdResp1>
 800915e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009160:	69fb      	ldr	r3, [r7, #28]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009174:	4b11      	ldr	r3, [pc, #68]	; (80091bc <SDMMC_GetCmdError+0x50>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a11      	ldr	r2, [pc, #68]	; (80091c0 <SDMMC_GetCmdError+0x54>)
 800917a:	fba2 2303 	umull	r2, r3, r2, r3
 800917e:	0a5b      	lsrs	r3, r3, #9
 8009180:	f241 3288 	movw	r2, #5000	; 0x1388
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	60fa      	str	r2, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009198:	e009      	b.n	80091ae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0f1      	beq.n	800918a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	22c5      	movs	r2, #197	; 0xc5
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	20000070 	.word	0x20000070
 80091c0:	10624dd3 	.word	0x10624dd3

080091c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	460b      	mov	r3, r1
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80091d2:	4b70      	ldr	r3, [pc, #448]	; (8009394 <SDMMC_GetCmdResp1+0x1d0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a70      	ldr	r2, [pc, #448]	; (8009398 <SDMMC_GetCmdResp1+0x1d4>)
 80091d8:	fba2 2303 	umull	r2, r3, r2, r3
 80091dc:	0a5a      	lsrs	r2, r3, #9
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	1e5a      	subs	r2, r3, #1
 80091ea:	61fa      	str	r2, [r7, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f4:	e0c9      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0ef      	beq.n	80091e6 <SDMMC_GetCmdResp1+0x22>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1ea      	bne.n	80091e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2204      	movs	r2, #4
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009222:	2304      	movs	r3, #4
 8009224:	e0b1      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d004      	beq.n	800923c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009238:	2301      	movs	r3, #1
 800923a:	e0a6      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	22c5      	movs	r2, #197	; 0xc5
 8009240:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff fd54 	bl	8008cf0 <SDIO_GetCommandResponse>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	4293      	cmp	r3, r2
 8009250:	d001      	beq.n	8009256 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009252:	2301      	movs	r3, #1
 8009254:	e099      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009256:	2100      	movs	r1, #0
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff fd56 	bl	8008d0a <SDIO_GetResponse>
 800925e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4b4e      	ldr	r3, [pc, #312]	; (800939c <SDMMC_GetCmdResp1+0x1d8>)
 8009264:	4013      	ands	r3, r2
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800926a:	2300      	movs	r3, #0
 800926c:	e08d      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	da02      	bge.n	800927a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009278:	e087      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009284:	2340      	movs	r3, #64	; 0x40
 8009286:	e080      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009292:	2380      	movs	r3, #128	; 0x80
 8009294:	e079      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092a4:	e071      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b4:	e069      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c4:	e061      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80092d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092d4:	e059      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092e4:	e051      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092f4:	e049      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009304:	e041      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009314:	e039      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009324:	e031      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009330:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009334:	e029      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009340:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009344:	e021      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009350:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009354:	e019      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009364:	e011      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009374:	e009      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009380:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009384:	e001      	b.n	800938a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800938a:	4618      	mov	r0, r3
 800938c:	3720      	adds	r7, #32
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000070 	.word	0x20000070
 8009398:	10624dd3 	.word	0x10624dd3
 800939c:	fdffe008 	.word	0xfdffe008

080093a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093a8:	4b1f      	ldr	r3, [pc, #124]	; (8009428 <SDMMC_GetCmdResp2+0x88>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1f      	ldr	r2, [pc, #124]	; (800942c <SDMMC_GetCmdResp2+0x8c>)
 80093ae:	fba2 2303 	umull	r2, r3, r2, r3
 80093b2:	0a5b      	lsrs	r3, r3, #9
 80093b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1e5a      	subs	r2, r3, #1
 80093c2:	60fa      	str	r2, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093cc:	e026      	b.n	800941c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0ef      	beq.n	80093be <SDMMC_GetCmdResp2+0x1e>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1ea      	bne.n	80093be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093fa:	2304      	movs	r3, #4
 80093fc:	e00e      	b.n	800941c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009410:	2301      	movs	r3, #1
 8009412:	e003      	b.n	800941c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	22c5      	movs	r2, #197	; 0xc5
 8009418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000070 	.word	0x20000070
 800942c:	10624dd3 	.word	0x10624dd3

08009430 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009438:	4b1a      	ldr	r3, [pc, #104]	; (80094a4 <SDMMC_GetCmdResp3+0x74>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a1a      	ldr	r2, [pc, #104]	; (80094a8 <SDMMC_GetCmdResp3+0x78>)
 800943e:	fba2 2303 	umull	r2, r3, r2, r3
 8009442:	0a5b      	lsrs	r3, r3, #9
 8009444:	f241 3288 	movw	r2, #5000	; 0x1388
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	1e5a      	subs	r2, r3, #1
 8009452:	60fa      	str	r2, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d102      	bne.n	800945e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800945c:	e01b      	b.n	8009496 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0ef      	beq.n	800944e <SDMMC_GetCmdResp3+0x1e>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1ea      	bne.n	800944e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2204      	movs	r2, #4
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800948a:	2304      	movs	r3, #4
 800948c:	e003      	b.n	8009496 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	22c5      	movs	r2, #197	; 0xc5
 8009492:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20000070 	.word	0x20000070
 80094a8:	10624dd3 	.word	0x10624dd3

080094ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	460b      	mov	r3, r1
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094ba:	4b35      	ldr	r3, [pc, #212]	; (8009590 <SDMMC_GetCmdResp6+0xe4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a35      	ldr	r2, [pc, #212]	; (8009594 <SDMMC_GetCmdResp6+0xe8>)
 80094c0:	fba2 2303 	umull	r2, r3, r2, r3
 80094c4:	0a5b      	lsrs	r3, r3, #9
 80094c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
 80094ce:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	1e5a      	subs	r2, r3, #1
 80094d4:	61fa      	str	r2, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094de:	e052      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0ef      	beq.n	80094d0 <SDMMC_GetCmdResp6+0x24>
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1ea      	bne.n	80094d0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2204      	movs	r2, #4
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800950c:	2304      	movs	r3, #4
 800950e:	e03a      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009522:	2301      	movs	r3, #1
 8009524:	e02f      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fbe2 	bl	8008cf0 <SDIO_GetCommandResponse>
 800952c:	4603      	mov	r3, r0
 800952e:	461a      	mov	r2, r3
 8009530:	7afb      	ldrb	r3, [r7, #11]
 8009532:	4293      	cmp	r3, r2
 8009534:	d001      	beq.n	800953a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009536:	2301      	movs	r3, #1
 8009538:	e025      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	22c5      	movs	r2, #197	; 0xc5
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009540:	2100      	movs	r1, #0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fbe1 	bl	8008d0a <SDIO_GetResponse>
 8009548:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	b29a      	uxth	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800955e:	2300      	movs	r3, #0
 8009560:	e011      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800956c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009570:	e009      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800957c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009580:	e001      	b.n	8009586 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009586:	4618      	mov	r0, r3
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000070 	.word	0x20000070
 8009594:	10624dd3 	.word	0x10624dd3

08009598 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095a0:	4b22      	ldr	r3, [pc, #136]	; (800962c <SDMMC_GetCmdResp7+0x94>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a22      	ldr	r2, [pc, #136]	; (8009630 <SDMMC_GetCmdResp7+0x98>)
 80095a6:	fba2 2303 	umull	r2, r3, r2, r3
 80095aa:	0a5b      	lsrs	r3, r3, #9
 80095ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
 80095b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1e5a      	subs	r2, r3, #1
 80095ba:	60fa      	str	r2, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095c4:	e02c      	b.n	8009620 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0ef      	beq.n	80095b6 <SDMMC_GetCmdResp7+0x1e>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ea      	bne.n	80095b6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2204      	movs	r2, #4
 80095f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095f2:	2304      	movs	r3, #4
 80095f4:	e014      	b.n	8009620 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009608:	2301      	movs	r3, #1
 800960a:	e009      	b.n	8009620 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2240      	movs	r2, #64	; 0x40
 800961c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800961e:	2300      	movs	r3, #0
  
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	20000070 	.word	0x20000070
 8009630:	10624dd3 	.word	0x10624dd3

08009634 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009638:	4904      	ldr	r1, [pc, #16]	; (800964c <MX_FATFS_Init+0x18>)
 800963a:	4805      	ldr	r0, [pc, #20]	; (8009650 <MX_FATFS_Init+0x1c>)
 800963c:	f003 fbb8 	bl	800cdb0 <FATFS_LinkDriver>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	4b03      	ldr	r3, [pc, #12]	; (8009654 <MX_FATFS_Init+0x20>)
 8009646:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009648:	bf00      	nop
 800964a:	bd80      	pop	{r7, pc}
 800964c:	200049b4 	.word	0x200049b4
 8009650:	080116d8 	.word	0x080116d8
 8009654:	200049b0 	.word	0x200049b0

08009658 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800965c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800965e:	4618      	mov	r0, r3
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009672:	f000 f888 	bl	8009786 <BSP_SD_IsDetected>
 8009676:	4603      	mov	r3, r0
 8009678:	2b01      	cmp	r3, #1
 800967a:	d001      	beq.n	8009680 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e005      	b.n	800968c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009680:	4804      	ldr	r0, [pc, #16]	; (8009694 <BSP_SD_Init+0x2c>)
 8009682:	f7fc fb6d 	bl	8005d60 <HAL_SD_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800968a:	79fb      	ldrb	r3, [r7, #7]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	200045b8 	.word	0x200045b8

08009698 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	68f9      	ldr	r1, [r7, #12]
 80096ae:	4806      	ldr	r0, [pc, #24]	; (80096c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80096b0:	f7fc fc04 	bl	8005ebc <HAL_SD_ReadBlocks_DMA>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	200045b8 	.word	0x200045b8

080096cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	68f9      	ldr	r1, [r7, #12]
 80096e2:	4806      	ldr	r0, [pc, #24]	; (80096fc <BSP_SD_WriteBlocks_DMA+0x30>)
 80096e4:	f7fc fccc 	bl	8006080 <HAL_SD_WriteBlocks_DMA>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	200045b8 	.word	0x200045b8

08009700 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009704:	4805      	ldr	r0, [pc, #20]	; (800971c <BSP_SD_GetCardState+0x1c>)
 8009706:	f7fd f901 	bl	800690c <HAL_SD_GetCardState>
 800970a:	4603      	mov	r3, r0
 800970c:	2b04      	cmp	r3, #4
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	b2db      	uxtb	r3, r3
}
 8009716:	4618      	mov	r0, r3
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200045b8 	.word	0x200045b8

08009720 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	4803      	ldr	r0, [pc, #12]	; (8009738 <BSP_SD_GetCardInfo+0x18>)
 800972c:	f7fd f8c2 	bl	80068b4 <HAL_SD_GetCardInfo>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200045b8 	.word	0x200045b8

0800973c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009744:	f000 f818 	bl	8009778 <BSP_SD_AbortCallback>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009758:	f000 f9c4 	bl	8009ae4 <BSP_SD_WriteCpltCallback>
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800976c:	f000 f9c8 	bl	8009b00 <BSP_SD_ReadCpltCallback>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009778:	b480      	push	{r7}
 800977a:	af00      	add	r7, sp, #0

}
 800977c:	bf00      	nop
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800978c:	2301      	movs	r3, #1
 800978e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009790:	f000 f80c 	bl	80097ac <BSP_PlatformIsDetected>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800979a:	2300      	movs	r3, #0
 800979c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	b2db      	uxtb	r3, r3
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80097b2:	2301      	movs	r3, #1
 80097b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80097b6:	2120      	movs	r1, #32
 80097b8:	4806      	ldr	r0, [pc, #24]	; (80097d4 <BSP_PlatformIsDetected+0x28>)
 80097ba:	f7fb fcc7 	bl	800514c <HAL_GPIO_ReadPin>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80097c4:	2300      	movs	r3, #0
 80097c6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80097c8:	79fb      	ldrb	r3, [r7, #7]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	40020400 	.word	0x40020400

080097d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80097e0:	f003 fc43 	bl	800d06a <osKernelSysTick>
 80097e4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80097e6:	e006      	b.n	80097f6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097e8:	f7ff ff8a 	bl	8009700 <BSP_SD_GetCardState>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e009      	b.n	800980a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80097f6:	f003 fc38 	bl	800d06a <osKernelSysTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d8f0      	bhi.n	80097e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800981e:	4b0b      	ldr	r3, [pc, #44]	; (800984c <SD_CheckStatus+0x38>)
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009824:	f7ff ff6c 	bl	8009700 <BSP_SD_GetCardState>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d107      	bne.n	800983e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <SD_CheckStatus+0x38>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f023 0301 	bic.w	r3, r3, #1
 8009838:	b2da      	uxtb	r2, r3
 800983a:	4b04      	ldr	r3, [pc, #16]	; (800984c <SD_CheckStatus+0x38>)
 800983c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800983e:	4b03      	ldr	r3, [pc, #12]	; (800984c <SD_CheckStatus+0x38>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b2db      	uxtb	r3, r3
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	200000c5 	.word	0x200000c5

08009850 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800985a:	4b20      	ldr	r3, [pc, #128]	; (80098dc <SD_initialize+0x8c>)
 800985c:	2201      	movs	r2, #1
 800985e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8009860:	f003 fbf7 	bl	800d052 <osKernelRunning>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d031      	beq.n	80098ce <SD_initialize+0x7e>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800986a:	f7ff fefd 	bl	8009668 <BSP_SD_Init>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d107      	bne.n	8009884 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff ffcc 	bl	8009814 <SD_CheckStatus>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	4b16      	ldr	r3, [pc, #88]	; (80098dc <SD_initialize+0x8c>)
 8009882:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009884:	4b15      	ldr	r3, [pc, #84]	; (80098dc <SD_initialize+0x8c>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b01      	cmp	r3, #1
 800988c:	d01f      	beq.n	80098ce <SD_initialize+0x7e>
    {
      if (SDQueueID == NULL)
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <SD_initialize+0x90>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10f      	bne.n	80098b6 <SD_initialize+0x66>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8009896:	4a13      	ldr	r2, [pc, #76]	; (80098e4 <SD_initialize+0x94>)
 8009898:	f107 0308 	add.w	r3, r7, #8
 800989c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098a0:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f003 fcdd 	bl	800d26a <osMessageCreate>
 80098b0:	4603      	mov	r3, r0
 80098b2:	4a0b      	ldr	r2, [pc, #44]	; (80098e0 <SD_initialize+0x90>)
 80098b4:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80098b6:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <SD_initialize+0x90>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <SD_initialize+0x7e>
      {
        Stat |= STA_NOINIT;
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <SD_initialize+0x8c>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f043 0301 	orr.w	r3, r3, #1
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	4b04      	ldr	r3, [pc, #16]	; (80098dc <SD_initialize+0x8c>)
 80098cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80098ce:	4b03      	ldr	r3, [pc, #12]	; (80098dc <SD_initialize+0x8c>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b2db      	uxtb	r3, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	200000c5 	.word	0x200000c5
 80098e0:	20000288 	.word	0x20000288
 80098e4:	08011660 	.word	0x08011660

080098e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff ff8d 	bl	8009814 <SD_CheckStatus>
 80098fa:	4603      	mov	r3, r0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08a      	sub	sp, #40	; 0x28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800991a:	f247 5030 	movw	r0, #30000	; 0x7530
 800991e:	f7ff ff5b 	bl	80097d8 <SD_CheckStatusWithTimeout>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	da02      	bge.n	800992e <SD_read+0x2a>
  {
    return res;
 8009928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800992c:	e032      	b.n	8009994 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	68b8      	ldr	r0, [r7, #8]
 8009934:	f7ff feb0 	bl	8009698 <BSP_SD_ReadBlocks_DMA>
 8009938:	4603      	mov	r3, r0
 800993a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800993e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009942:	2b00      	cmp	r3, #0
 8009944:	d124      	bne.n	8009990 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009946:	4b15      	ldr	r3, [pc, #84]	; (800999c <SD_read+0x98>)
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	f107 0314 	add.w	r3, r7, #20
 800994e:	f247 5230 	movw	r2, #30000	; 0x7530
 8009952:	4618      	mov	r0, r3
 8009954:	f003 fcdc 	bl	800d310 <osMessageGet>

    if (event.status == osEventMessage)
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b10      	cmp	r3, #16
 800995c:	d118      	bne.n	8009990 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d115      	bne.n	8009990 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8009964:	f003 fb81 	bl	800d06a <osKernelSysTick>
 8009968:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800996a:	e008      	b.n	800997e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800996c:	f7ff fec8 	bl	8009700 <BSP_SD_GetCardState>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d103      	bne.n	800997e <SD_read+0x7a>
              {
                res = RES_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800997c:	e008      	b.n	8009990 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800997e:	f003 fb74 	bl	800d06a <osKernelSysTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	f247 522f 	movw	r2, #29999	; 0x752f
 800998c:	4293      	cmp	r3, r2
 800998e:	d9ed      	bls.n	800996c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009994:	4618      	mov	r0, r3
 8009996:	3728      	adds	r7, #40	; 0x28
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000288 	.word	0x20000288

080099a0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80099b6:	f247 5030 	movw	r0, #30000	; 0x7530
 80099ba:	f7ff ff0d 	bl	80097d8 <SD_CheckStatusWithTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	da02      	bge.n	80099ca <SD_write+0x2a>
  {
    return res;
 80099c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c8:	e02e      	b.n	8009a28 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	68b8      	ldr	r0, [r7, #8]
 80099d0:	f7ff fe7c 	bl	80096cc <BSP_SD_WriteBlocks_DMA>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d124      	bne.n	8009a24 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80099da:	4b15      	ldr	r3, [pc, #84]	; (8009a30 <SD_write+0x90>)
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	f107 0314 	add.w	r3, r7, #20
 80099e2:	f247 5230 	movw	r2, #30000	; 0x7530
 80099e6:	4618      	mov	r0, r3
 80099e8:	f003 fc92 	bl	800d310 <osMessageGet>

    if (event.status == osEventMessage)
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b10      	cmp	r3, #16
 80099f0:	d118      	bne.n	8009a24 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d115      	bne.n	8009a24 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80099f8:	f003 fb37 	bl	800d06a <osKernelSysTick>
 80099fc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80099fe:	e008      	b.n	8009a12 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a00:	f7ff fe7e 	bl	8009700 <BSP_SD_GetCardState>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d103      	bne.n	8009a12 <SD_write+0x72>
          {
            res = RES_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8009a10:	e008      	b.n	8009a24 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8009a12:	f003 fb2a 	bl	800d06a <osKernelSysTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d9ed      	bls.n	8009a00 <SD_write+0x60>
    }

  }
#endif

  return res;
 8009a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3728      	adds	r7, #40	; 0x28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20000288 	.word	0x20000288

08009a34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08c      	sub	sp, #48	; 0x30
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	603a      	str	r2, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
 8009a40:	460b      	mov	r3, r1
 8009a42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009a4a:	4b25      	ldr	r3, [pc, #148]	; (8009ae0 <SD_ioctl+0xac>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <SD_ioctl+0x28>
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e03c      	b.n	8009ad6 <SD_ioctl+0xa2>

  switch (cmd)
 8009a5c:	79bb      	ldrb	r3, [r7, #6]
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d834      	bhi.n	8009acc <SD_ioctl+0x98>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <SD_ioctl+0x34>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a79 	.word	0x08009a79
 8009a6c:	08009a81 	.word	0x08009a81
 8009a70:	08009a99 	.word	0x08009a99
 8009a74:	08009ab3 	.word	0x08009ab3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a7e:	e028      	b.n	8009ad2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a80:	f107 030c 	add.w	r3, r7, #12
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fe4b 	bl	8009720 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a96:	e01c      	b.n	8009ad2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a98:	f107 030c 	add.w	r3, r7, #12
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff fe3f 	bl	8009720 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ab0:	e00f      	b.n	8009ad2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ab2:	f107 030c 	add.w	r3, r7, #12
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fe32 	bl	8009720 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	0a5a      	lsrs	r2, r3, #9
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009aca:	e002      	b.n	8009ad2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009acc:	2304      	movs	r3, #4
 8009ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3730      	adds	r7, #48	; 0x30
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	200000c5 	.word	0x200000c5

08009ae4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <BSP_SD_WriteCpltCallback+0x18>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2102      	movs	r1, #2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f003 fbcd 	bl	800d290 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009af6:	bf00      	nop
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000288 	.word	0x20000288

08009b00 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8009b04:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <BSP_SD_ReadCpltCallback+0x18>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f003 fbbf 	bl	800d290 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009b12:	bf00      	nop
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20000288 	.word	0x20000288

08009b1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	4a08      	ldr	r2, [pc, #32]	; (8009b4c <disk_status+0x30>)
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	79fa      	ldrb	r2, [r7, #7]
 8009b34:	4905      	ldr	r1, [pc, #20]	; (8009b4c <disk_status+0x30>)
 8009b36:	440a      	add	r2, r1
 8009b38:	7a12      	ldrb	r2, [r2, #8]
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	4798      	blx	r3
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	200002b4 	.word	0x200002b4

08009b50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	4a0d      	ldr	r2, [pc, #52]	; (8009b98 <disk_initialize+0x48>)
 8009b62:	5cd3      	ldrb	r3, [r2, r3]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d111      	bne.n	8009b8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	4a0b      	ldr	r2, [pc, #44]	; (8009b98 <disk_initialize+0x48>)
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	4a09      	ldr	r2, [pc, #36]	; (8009b98 <disk_initialize+0x48>)
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	79fa      	ldrb	r2, [r7, #7]
 8009b7e:	4906      	ldr	r1, [pc, #24]	; (8009b98 <disk_initialize+0x48>)
 8009b80:	440a      	add	r2, r1
 8009b82:	7a12      	ldrb	r2, [r2, #8]
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200002b4 	.word	0x200002b4

08009b9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	4a0a      	ldr	r2, [pc, #40]	; (8009bd8 <disk_read+0x3c>)
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	689c      	ldr	r4, [r3, #8]
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4a07      	ldr	r2, [pc, #28]	; (8009bd8 <disk_read+0x3c>)
 8009bbc:	4413      	add	r3, r2
 8009bbe:	7a18      	ldrb	r0, [r3, #8]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	47a0      	blx	r4
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd90      	pop	{r4, r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200002b4 	.word	0x200002b4

08009bdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4a0a      	ldr	r2, [pc, #40]	; (8009c18 <disk_write+0x3c>)
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	68dc      	ldr	r4, [r3, #12]
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4a07      	ldr	r2, [pc, #28]	; (8009c18 <disk_write+0x3c>)
 8009bfc:	4413      	add	r3, r2
 8009bfe:	7a18      	ldrb	r0, [r3, #8]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	47a0      	blx	r4
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd90      	pop	{r4, r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200002b4 	.word	0x200002b4

08009c1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	603a      	str	r2, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <disk_ioctl+0x38>)
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	79fa      	ldrb	r2, [r7, #7]
 8009c3a:	4906      	ldr	r1, [pc, #24]	; (8009c54 <disk_ioctl+0x38>)
 8009c3c:	440a      	add	r2, r1
 8009c3e:	7a10      	ldrb	r0, [r2, #8]
 8009c40:	79b9      	ldrb	r1, [r7, #6]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	4798      	blx	r3
 8009c46:	4603      	mov	r3, r0
 8009c48:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200002b4 	.word	0x200002b4

08009c58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3301      	adds	r3, #1
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c68:	89fb      	ldrh	r3, [r7, #14]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	b21a      	sxth	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	4313      	orrs	r3, r2
 8009c76:	b21b      	sxth	r3, r3
 8009c78:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3303      	adds	r3, #3
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	3202      	adds	r2, #2
 8009ca0:	7812      	ldrb	r2, [r2, #0]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	3201      	adds	r2, #1
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	887a      	ldrh	r2, [r7, #2]
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	887b      	ldrh	r3, [r7, #2]
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	887a      	ldrh	r2, [r7, #2]
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	701a      	strb	r2, [r3, #0]
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	0a1b      	lsrs	r3, r3, #8
 8009d1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	607a      	str	r2, [r7, #4]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	701a      	strb	r2, [r3, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	0a1b      	lsrs	r3, r3, #8
 8009d30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	701a      	strb	r2, [r3, #0]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	0a1b      	lsrs	r3, r3, #8
 8009d42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	701a      	strb	r2, [r3, #0]
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00d      	beq.n	8009d92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	1c53      	adds	r3, r2, #1
 8009d7a:	613b      	str	r3, [r7, #16]
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	1c59      	adds	r1, r3, #1
 8009d80:	6179      	str	r1, [r7, #20]
 8009d82:	7812      	ldrb	r2, [r2, #0]
 8009d84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f1      	bne.n	8009d76 <mem_cpy+0x1a>
	}
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d9e:	b480      	push	{r7}
 8009da0:	b087      	sub	sp, #28
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	617a      	str	r2, [r7, #20]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f3      	bne.n	8009dae <mem_set+0x10>
}
 8009dc6:	bf00      	nop
 8009dc8:	bf00      	nop
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	61fb      	str	r3, [r7, #28]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	61fa      	str	r2, [r7, #28]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	4619      	mov	r1, r3
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	61ba      	str	r2, [r7, #24]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	1acb      	subs	r3, r1, r3
 8009e00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	607b      	str	r3, [r7, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <mem_cmp+0x40>
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0eb      	beq.n	8009dec <mem_cmp+0x18>

	return r;
 8009e14:	697b      	ldr	r3, [r7, #20]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3724      	adds	r7, #36	; 0x24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e2c:	e002      	b.n	8009e34 <chk_chr+0x12>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3301      	adds	r3, #1
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <chk_chr+0x26>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d1f2      	bne.n	8009e2e <chk_chr+0xc>
	return *str;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d009      	beq.n	8009e7a <lock_fs+0x22>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f003 f8a0 	bl	800cfb0 <ff_req_grant>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <lock_fs+0x22>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e000      	b.n	8009e7c <lock_fs+0x24>
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00d      	beq.n	8009eb2 <unlock_fs+0x2e>
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	2b0c      	cmp	r3, #12
 8009e9a:	d00a      	beq.n	8009eb2 <unlock_fs+0x2e>
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	2b0b      	cmp	r3, #11
 8009ea0:	d007      	beq.n	8009eb2 <unlock_fs+0x2e>
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	2b0f      	cmp	r3, #15
 8009ea6:	d004      	beq.n	8009eb2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f003 f894 	bl	800cfda <ff_rel_grant>
	}
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60bb      	str	r3, [r7, #8]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e029      	b.n	8009f24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ed0:	4a27      	ldr	r2, [pc, #156]	; (8009f70 <chk_lock+0xb4>)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	4413      	add	r3, r2
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d01d      	beq.n	8009f1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ede:	4a24      	ldr	r2, [pc, #144]	; (8009f70 <chk_lock+0xb4>)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	4413      	add	r3, r2
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d116      	bne.n	8009f1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ef0:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <chk_lock+0xb4>)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3304      	adds	r3, #4
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d10c      	bne.n	8009f1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009f04:	4a1a      	ldr	r2, [pc, #104]	; (8009f70 <chk_lock+0xb4>)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	4413      	add	r3, r2
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d102      	bne.n	8009f1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009f18:	e007      	b.n	8009f2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d9d2      	bls.n	8009ed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d109      	bne.n	8009f44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <chk_lock+0x80>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d101      	bne.n	8009f40 <chk_lock+0x84>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e010      	b.n	8009f62 <chk_lock+0xa6>
 8009f40:	2312      	movs	r3, #18
 8009f42:	e00e      	b.n	8009f62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d108      	bne.n	8009f5c <chk_lock+0xa0>
 8009f4a:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <chk_lock+0xb4>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	330c      	adds	r3, #12
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f5a:	d101      	bne.n	8009f60 <chk_lock+0xa4>
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	e000      	b.n	8009f62 <chk_lock+0xa6>
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20000294 	.word	0x20000294

08009f74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	607b      	str	r3, [r7, #4]
 8009f7e:	e002      	b.n	8009f86 <enq_lock+0x12>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3301      	adds	r3, #1
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d806      	bhi.n	8009f9a <enq_lock+0x26>
 8009f8c:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <enq_lock+0x40>)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	011b      	lsls	r3, r3, #4
 8009f92:	4413      	add	r3, r2
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f2      	bne.n	8009f80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	bf14      	ite	ne
 8009fa0:	2301      	movne	r3, #1
 8009fa2:	2300      	moveq	r3, #0
 8009fa4:	b2db      	uxtb	r3, r3
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	20000294 	.word	0x20000294

08009fb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	e01f      	b.n	800a008 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009fc8:	4a41      	ldr	r2, [pc, #260]	; (800a0d0 <inc_lock+0x118>)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	4413      	add	r3, r2
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d113      	bne.n	800a002 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009fda:	4a3d      	ldr	r2, [pc, #244]	; (800a0d0 <inc_lock+0x118>)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	4413      	add	r3, r2
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d109      	bne.n	800a002 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009fee:	4a38      	ldr	r2, [pc, #224]	; (800a0d0 <inc_lock+0x118>)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d006      	beq.n	800a010 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3301      	adds	r3, #1
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d9dc      	bls.n	8009fc8 <inc_lock+0x10>
 800a00e:	e000      	b.n	800a012 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a010:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d132      	bne.n	800a07e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e002      	b.n	800a024 <inc_lock+0x6c>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3301      	adds	r3, #1
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d806      	bhi.n	800a038 <inc_lock+0x80>
 800a02a:	4a29      	ldr	r2, [pc, #164]	; (800a0d0 <inc_lock+0x118>)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	4413      	add	r3, r2
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1f2      	bne.n	800a01e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d101      	bne.n	800a042 <inc_lock+0x8a>
 800a03e:	2300      	movs	r3, #0
 800a040:	e040      	b.n	800a0c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	4922      	ldr	r1, [pc, #136]	; (800a0d0 <inc_lock+0x118>)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	440b      	add	r3, r1
 800a04e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	491e      	ldr	r1, [pc, #120]	; (800a0d0 <inc_lock+0x118>)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	011b      	lsls	r3, r3, #4
 800a05a:	440b      	add	r3, r1
 800a05c:	3304      	adds	r3, #4
 800a05e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	695a      	ldr	r2, [r3, #20]
 800a064:	491a      	ldr	r1, [pc, #104]	; (800a0d0 <inc_lock+0x118>)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	440b      	add	r3, r1
 800a06c:	3308      	adds	r3, #8
 800a06e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a070:	4a17      	ldr	r2, [pc, #92]	; (800a0d0 <inc_lock+0x118>)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4413      	add	r3, r2
 800a078:	330c      	adds	r3, #12
 800a07a:	2200      	movs	r2, #0
 800a07c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d009      	beq.n	800a098 <inc_lock+0xe0>
 800a084:	4a12      	ldr	r2, [pc, #72]	; (800a0d0 <inc_lock+0x118>)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	4413      	add	r3, r2
 800a08c:	330c      	adds	r3, #12
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <inc_lock+0xe0>
 800a094:	2300      	movs	r3, #0
 800a096:	e015      	b.n	800a0c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d108      	bne.n	800a0b0 <inc_lock+0xf8>
 800a09e:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <inc_lock+0x118>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	4413      	add	r3, r2
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	e001      	b.n	800a0b4 <inc_lock+0xfc>
 800a0b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0b4:	4906      	ldr	r1, [pc, #24]	; (800a0d0 <inc_lock+0x118>)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	440b      	add	r3, r1
 800a0bc:	330c      	adds	r3, #12
 800a0be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3301      	adds	r3, #1
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	20000294 	.word	0x20000294

0800a0d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e010      	b.n	800a104 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0e2:	4a0d      	ldr	r2, [pc, #52]	; (800a118 <clear_lock+0x44>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d105      	bne.n	800a0fe <clear_lock+0x2a>
 800a0f2:	4a09      	ldr	r2, [pc, #36]	; (800a118 <clear_lock+0x44>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d9eb      	bls.n	800a0e2 <clear_lock+0xe>
	}
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	20000294 	.word	0x20000294

0800a11c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	78db      	ldrb	r3, [r3, #3]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d034      	beq.n	800a19a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a134:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7858      	ldrb	r0, [r3, #1]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a140:	2301      	movs	r3, #1
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	f7ff fd4a 	bl	8009bdc <disk_write>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
 800a152:	e022      	b.n	800a19a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	429a      	cmp	r2, r3
 800a168:	d217      	bcs.n	800a19a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	789b      	ldrb	r3, [r3, #2]
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	e010      	b.n	800a194 <sync_window+0x78>
					wsect += fs->fsize;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4413      	add	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7858      	ldrb	r0, [r3, #1]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a186:	2301      	movs	r3, #1
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	f7ff fd27 	bl	8009bdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d8eb      	bhi.n	800a172 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d01b      	beq.n	800a1f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff ffad 	bl	800a11c <sync_window>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d113      	bne.n	800a1f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7858      	ldrb	r0, [r3, #1]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	f7ff fcdf 	bl	8009b9c <disk_read>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d004      	beq.n	800a1ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ff87 	bl	800a11c <sync_window>
 800a20e:	4603      	mov	r3, r0
 800a210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d158      	bne.n	800a2ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d148      	bne.n	800a2b2 <sync_fs+0xb2>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	791b      	ldrb	r3, [r3, #4]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d144      	bne.n	800a2b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3338      	adds	r3, #56	; 0x38
 800a22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fdb3 	bl	8009d9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3338      	adds	r3, #56	; 0x38
 800a23c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a240:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fd42 	bl	8009cce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3338      	adds	r3, #56	; 0x38
 800a24e:	4921      	ldr	r1, [pc, #132]	; (800a2d4 <sync_fs+0xd4>)
 800a250:	4618      	mov	r0, r3
 800a252:	f7ff fd57 	bl	8009d04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3338      	adds	r3, #56	; 0x38
 800a25a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a25e:	491e      	ldr	r1, [pc, #120]	; (800a2d8 <sync_fs+0xd8>)
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fd4f 	bl	8009d04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3338      	adds	r3, #56	; 0x38
 800a26a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7ff fd45 	bl	8009d04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3338      	adds	r3, #56	; 0x38
 800a27e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7ff fd3b 	bl	8009d04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7858      	ldrb	r0, [r3, #1]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f7ff fc98 	bl	8009bdc <disk_write>
			fs->fsi_flag = 0;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fcae 	bl	8009c1c <disk_ioctl>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <sync_fs+0xca>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	41615252 	.word	0x41615252
 800a2d8:	61417272 	.word	0x61417272

0800a2dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	3b02      	subs	r3, #2
 800a2ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	3b02      	subs	r3, #2
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d301      	bcc.n	800a2fc <clust2sect+0x20>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e008      	b.n	800a30e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	895b      	ldrh	r3, [r3, #10]
 800a300:	461a      	mov	r2, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	fb03 f202 	mul.w	r2, r3, r2
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30c:	4413      	add	r3, r2
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b086      	sub	sp, #24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d904      	bls.n	800a33a <get_fat+0x20>
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d302      	bcc.n	800a340 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a33a:	2301      	movs	r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	e08f      	b.n	800a460 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d062      	beq.n	800a414 <get_fat+0xfa>
 800a34e:	2b03      	cmp	r3, #3
 800a350:	dc7c      	bgt.n	800a44c <get_fat+0x132>
 800a352:	2b01      	cmp	r3, #1
 800a354:	d002      	beq.n	800a35c <get_fat+0x42>
 800a356:	2b02      	cmp	r3, #2
 800a358:	d042      	beq.n	800a3e0 <get_fat+0xc6>
 800a35a:	e077      	b.n	800a44c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	085b      	lsrs	r3, r3, #1
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	0a5b      	lsrs	r3, r3, #9
 800a372:	4413      	add	r3, r2
 800a374:	4619      	mov	r1, r3
 800a376:	6938      	ldr	r0, [r7, #16]
 800a378:	f7ff ff14 	bl	800a1a4 <move_window>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d167      	bne.n	800a452 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	60fa      	str	r2, [r7, #12]
 800a388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	4413      	add	r3, r2
 800a390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a394:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	0a5b      	lsrs	r3, r3, #9
 800a39e:	4413      	add	r3, r2
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6938      	ldr	r0, [r7, #16]
 800a3a4:	f7ff fefe 	bl	800a1a4 <move_window>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d153      	bne.n	800a456 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <get_fat+0xbc>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	091b      	lsrs	r3, r3, #4
 800a3d4:	e002      	b.n	800a3dc <get_fat+0xc2>
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3dc:	617b      	str	r3, [r7, #20]
			break;
 800a3de:	e03f      	b.n	800a460 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	4413      	add	r3, r2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6938      	ldr	r0, [r7, #16]
 800a3ee:	f7ff fed9 	bl	800a1a4 <move_window>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d130      	bne.n	800a45a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a406:	4413      	add	r3, r2
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fc25 	bl	8009c58 <ld_word>
 800a40e:	4603      	mov	r3, r0
 800a410:	617b      	str	r3, [r7, #20]
			break;
 800a412:	e025      	b.n	800a460 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	09db      	lsrs	r3, r3, #7
 800a41c:	4413      	add	r3, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	6938      	ldr	r0, [r7, #16]
 800a422:	f7ff febf 	bl	800a1a4 <move_window>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d118      	bne.n	800a45e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a43a:	4413      	add	r3, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff fc23 	bl	8009c88 <ld_dword>
 800a442:	4603      	mov	r3, r0
 800a444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a448:	617b      	str	r3, [r7, #20]
			break;
 800a44a:	e009      	b.n	800a460 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a44c:	2301      	movs	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	e006      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a452:	bf00      	nop
 800a454:	e004      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a456:	bf00      	nop
 800a458:	e002      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a45a:	bf00      	nop
 800a45c:	e000      	b.n	800a460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a45e:	bf00      	nop
		}
	}

	return val;
 800a460:	697b      	ldr	r3, [r7, #20]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a46a:	b590      	push	{r4, r7, lr}
 800a46c:	b089      	sub	sp, #36	; 0x24
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a476:	2302      	movs	r3, #2
 800a478:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	f240 80d2 	bls.w	800a626 <put_fat+0x1bc>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	429a      	cmp	r2, r3
 800a48a:	f080 80cc 	bcs.w	800a626 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b03      	cmp	r3, #3
 800a494:	f000 8096 	beq.w	800a5c4 <put_fat+0x15a>
 800a498:	2b03      	cmp	r3, #3
 800a49a:	f300 80cd 	bgt.w	800a638 <put_fat+0x1ce>
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d002      	beq.n	800a4a8 <put_fat+0x3e>
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d06e      	beq.n	800a584 <put_fat+0x11a>
 800a4a6:	e0c7      	b.n	800a638 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	61bb      	str	r3, [r7, #24]
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	0a5b      	lsrs	r3, r3, #9
 800a4be:	4413      	add	r3, r2
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7ff fe6e 	bl	800a1a4 <move_window>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4cc:	7ffb      	ldrb	r3, [r7, #31]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f040 80ab 	bne.w	800a62a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	1c59      	adds	r1, r3, #1
 800a4de:	61b9      	str	r1, [r7, #24]
 800a4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e4:	4413      	add	r3, r2
 800a4e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00d      	beq.n	800a50e <put_fat+0xa4>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	b25b      	sxtb	r3, r3
 800a4f8:	f003 030f 	and.w	r3, r3, #15
 800a4fc:	b25a      	sxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	b25b      	sxtb	r3, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	b25b      	sxtb	r3, r3
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	e001      	b.n	800a512 <put_fat+0xa8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	0a5b      	lsrs	r3, r3, #9
 800a524:	4413      	add	r3, r2
 800a526:	4619      	mov	r1, r3
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fe3b 	bl	800a1a4 <move_window>
 800a52e:	4603      	mov	r3, r0
 800a530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a532:	7ffb      	ldrb	r3, [r7, #31]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d17a      	bne.n	800a62e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a544:	4413      	add	r3, r2
 800a546:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <put_fat+0xf0>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	091b      	lsrs	r3, r3, #4
 800a556:	b2db      	uxtb	r3, r3
 800a558:	e00e      	b.n	800a578 <put_fat+0x10e>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b25b      	sxtb	r3, r3
 800a560:	f023 030f 	bic.w	r3, r3, #15
 800a564:	b25a      	sxtb	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	0a1b      	lsrs	r3, r3, #8
 800a56a:	b25b      	sxtb	r3, r3
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	b25b      	sxtb	r3, r3
 800a572:	4313      	orrs	r3, r2
 800a574:	b25b      	sxtb	r3, r3
 800a576:	b2db      	uxtb	r3, r3
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	70da      	strb	r2, [r3, #3]
			break;
 800a582:	e059      	b.n	800a638 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	4413      	add	r3, r2
 800a58e:	4619      	mov	r1, r3
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff fe07 	bl	800a1a4 <move_window>
 800a596:	4603      	mov	r3, r0
 800a598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d148      	bne.n	800a632 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5ae:	4413      	add	r3, r2
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	b292      	uxth	r2, r2
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fb89 	bl	8009cce <st_word>
			fs->wflag = 1;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	70da      	strb	r2, [r3, #3]
			break;
 800a5c2:	e039      	b.n	800a638 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	09db      	lsrs	r3, r3, #7
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f7ff fde7 	bl	800a1a4 <move_window>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5da:	7ffb      	ldrb	r3, [r7, #31]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d12a      	bne.n	800a636 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5f4:	4413      	add	r3, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fb46 	bl	8009c88 <ld_dword>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a602:	4323      	orrs	r3, r4
 800a604:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a614:	4413      	add	r3, r2
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff fb73 	bl	8009d04 <st_dword>
			fs->wflag = 1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	70da      	strb	r2, [r3, #3]
			break;
 800a624:	e008      	b.n	800a638 <put_fat+0x1ce>
		}
	}
 800a626:	bf00      	nop
 800a628:	e006      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a62a:	bf00      	nop
 800a62c:	e004      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a62e:	bf00      	nop
 800a630:	e002      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a636:	bf00      	nop
	return res;
 800a638:	7ffb      	ldrb	r3, [r7, #31]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3724      	adds	r7, #36	; 0x24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd90      	pop	{r4, r7, pc}

0800a642 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b088      	sub	sp, #32
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d904      	bls.n	800a668 <remove_chain+0x26>
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d301      	bcc.n	800a66c <remove_chain+0x2a>
 800a668:	2302      	movs	r3, #2
 800a66a:	e04b      	b.n	800a704 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a672:	f04f 32ff 	mov.w	r2, #4294967295
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	69b8      	ldr	r0, [r7, #24]
 800a67a:	f7ff fef6 	bl	800a46a <put_fat>
 800a67e:	4603      	mov	r3, r0
 800a680:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a682:	7ffb      	ldrb	r3, [r7, #31]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <remove_chain+0x4a>
 800a688:	7ffb      	ldrb	r3, [r7, #31]
 800a68a:	e03b      	b.n	800a704 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff fe43 	bl	800a31a <get_fat>
 800a694:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d031      	beq.n	800a700 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <remove_chain+0x64>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02e      	b.n	800a704 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d101      	bne.n	800a6b2 <remove_chain+0x70>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e028      	b.n	800a704 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	69b8      	ldr	r0, [r7, #24]
 800a6b8:	f7ff fed7 	bl	800a46a <put_fat>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <remove_chain+0x88>
 800a6c6:	7ffb      	ldrb	r3, [r7, #31]
 800a6c8:	e01c      	b.n	800a704 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	699a      	ldr	r2, [r3, #24]
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	3b02      	subs	r3, #2
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d20b      	bcs.n	800a6f0 <remove_chain+0xae>
			fs->free_clst++;
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d3c6      	bcc.n	800a68c <remove_chain+0x4a>
 800a6fe:	e000      	b.n	800a702 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a700:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10d      	bne.n	800a73e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <create_chain+0x2c>
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d31b      	bcc.n	800a770 <create_chain+0x64>
 800a738:	2301      	movs	r3, #1
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e018      	b.n	800a770 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fdea 	bl	800a31a <get_fat>
 800a746:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d801      	bhi.n	800a752 <create_chain+0x46>
 800a74e:	2301      	movs	r3, #1
 800a750:	e070      	b.n	800a834 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d101      	bne.n	800a75e <create_chain+0x52>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e06a      	b.n	800a834 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d201      	bcs.n	800a76c <create_chain+0x60>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e063      	b.n	800a834 <create_chain+0x128>
		scl = clst;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	3301      	adds	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	429a      	cmp	r2, r3
 800a782:	d307      	bcc.n	800a794 <create_chain+0x88>
				ncl = 2;
 800a784:	2302      	movs	r3, #2
 800a786:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d901      	bls.n	800a794 <create_chain+0x88>
 800a790:	2300      	movs	r3, #0
 800a792:	e04f      	b.n	800a834 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a794:	69f9      	ldr	r1, [r7, #28]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7ff fdbf 	bl	800a31a <get_fat>
 800a79c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00e      	beq.n	800a7c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <create_chain+0xa6>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d101      	bne.n	800a7b6 <create_chain+0xaa>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	e03e      	b.n	800a834 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d1da      	bne.n	800a774 <create_chain+0x68>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e038      	b.n	800a834 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	69f9      	ldr	r1, [r7, #28]
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7ff fe4d 	bl	800a46a <put_fat>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <create_chain+0xe2>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d006      	beq.n	800a7ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7ff fe40 	bl	800a46a <put_fat>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d116      	bne.n	800a822 <create_chain+0x116>
		fs->last_clst = ncl;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	699a      	ldr	r2, [r3, #24]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	3b02      	subs	r3, #2
 800a804:	429a      	cmp	r2, r3
 800a806:	d804      	bhi.n	800a812 <create_chain+0x106>
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	1e5a      	subs	r2, r3, #1
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	711a      	strb	r2, [r3, #4]
 800a820:	e007      	b.n	800a832 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d102      	bne.n	800a82e <create_chain+0x122>
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	e000      	b.n	800a830 <create_chain+0x124>
 800a82e:	2301      	movs	r3, #1
 800a830:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	3304      	adds	r3, #4
 800a852:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	0a5b      	lsrs	r3, r3, #9
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	8952      	ldrh	r2, [r2, #10]
 800a85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a860:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1d1a      	adds	r2, r3, #4
 800a866:	613a      	str	r2, [r7, #16]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <clmt_clust+0x3a>
 800a872:	2300      	movs	r3, #0
 800a874:	e010      	b.n	800a898 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d307      	bcc.n	800a88e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	3304      	adds	r3, #4
 800a88a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a88c:	e7e9      	b.n	800a862 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a88e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
}
 800a898:	4618      	mov	r0, r3
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ba:	d204      	bcs.n	800a8c6 <dir_sdi+0x22>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f003 031f 	and.w	r3, r3, #31
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e063      	b.n	800a992 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <dir_sdi+0x46>
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d902      	bls.n	800a8ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10c      	bne.n	800a90a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	8912      	ldrh	r2, [r2, #8]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d301      	bcc.n	800a900 <dir_sdi+0x5c>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e048      	b.n	800a992 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	61da      	str	r2, [r3, #28]
 800a908:	e029      	b.n	800a95e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	895b      	ldrh	r3, [r3, #10]
 800a90e:	025b      	lsls	r3, r3, #9
 800a910:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a912:	e019      	b.n	800a948 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fcfe 	bl	800a31a <get_fat>
 800a91e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	d101      	bne.n	800a92c <dir_sdi+0x88>
 800a928:	2301      	movs	r3, #1
 800a92a:	e032      	b.n	800a992 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d904      	bls.n	800a93c <dir_sdi+0x98>
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d301      	bcc.n	800a940 <dir_sdi+0x9c>
 800a93c:	2302      	movs	r3, #2
 800a93e:	e028      	b.n	800a992 <dir_sdi+0xee>
			ofs -= csz;
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d2e1      	bcs.n	800a914 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a950:	6979      	ldr	r1, [r7, #20]
 800a952:	6938      	ldr	r0, [r7, #16]
 800a954:	f7ff fcc2 	bl	800a2dc <clust2sect>
 800a958:	4602      	mov	r2, r0
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <dir_sdi+0xcc>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e010      	b.n	800a992 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	69da      	ldr	r2, [r3, #28]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	0a5b      	lsrs	r3, r3, #9
 800a978:	441a      	add	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98a:	441a      	add	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	3320      	adds	r3, #32
 800a9b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <dir_next+0x28>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c0:	d301      	bcc.n	800a9c6 <dir_next+0x2c>
 800a9c2:	2304      	movs	r3, #4
 800a9c4:	e0aa      	b.n	800ab1c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 8098 	bne.w	800ab02 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	8912      	ldrh	r2, [r2, #8]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	f0c0 8088 	bcc.w	800ab02 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	61da      	str	r2, [r3, #28]
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	e08f      	b.n	800ab1c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	0a5b      	lsrs	r3, r3, #9
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	8952      	ldrh	r2, [r2, #10]
 800aa04:	3a01      	subs	r2, #1
 800aa06:	4013      	ands	r3, r2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d17a      	bne.n	800ab02 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7ff fc80 	bl	800a31a <get_fat>
 800aa1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d801      	bhi.n	800aa26 <dir_next+0x8c>
 800aa22:	2302      	movs	r3, #2
 800aa24:	e07a      	b.n	800ab1c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d101      	bne.n	800aa32 <dir_next+0x98>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e074      	b.n	800ab1c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d358      	bcc.n	800aaee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	61da      	str	r2, [r3, #28]
 800aa48:	2304      	movs	r3, #4
 800aa4a:	e067      	b.n	800ab1c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7ff fe59 	bl	800a70c <create_chain>
 800aa5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <dir_next+0xcc>
 800aa62:	2307      	movs	r3, #7
 800aa64:	e05a      	b.n	800ab1c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <dir_next+0xd6>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e055      	b.n	800ab1c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa76:	d101      	bne.n	800aa7c <dir_next+0xe2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e04f      	b.n	800ab1c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fb4d 	bl	800a11c <sync_window>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <dir_next+0xf2>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e047      	b.n	800ab1c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3338      	adds	r3, #56	; 0x38
 800aa90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff f981 	bl	8009d9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	6979      	ldr	r1, [r7, #20]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff fc1a 	bl	800a2dc <clust2sect>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	635a      	str	r2, [r3, #52]	; 0x34
 800aaae:	e012      	b.n	800aad6 <dir_next+0x13c>
						fs->wflag = 1;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2201      	movs	r2, #1
 800aab4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fb30 	bl	800a11c <sync_window>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <dir_next+0x12c>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e02a      	b.n	800ab1c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3301      	adds	r3, #1
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	635a      	str	r2, [r3, #52]	; 0x34
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	895b      	ldrh	r3, [r3, #10]
 800aada:	461a      	mov	r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4293      	cmp	r3, r2
 800aae0:	d3e6      	bcc.n	800aab0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aaf4:	6979      	ldr	r1, [r7, #20]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff fbf0 	bl	800a2dc <clust2sect>
 800aafc:	4602      	mov	r2, r0
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab14:	441a      	add	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab34:	2100      	movs	r1, #0
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff feb4 	bl	800a8a4 <dir_sdi>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d12b      	bne.n	800ab9e <dir_alloc+0x7a>
		n = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff fb27 	bl	800a1a4 <move_window>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11d      	bne.n	800ab9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2be5      	cmp	r3, #229	; 0xe5
 800ab68:	d004      	beq.n	800ab74 <dir_alloc+0x50>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d107      	bne.n	800ab84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	3301      	adds	r3, #1
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d102      	bne.n	800ab88 <dir_alloc+0x64>
 800ab82:	e00c      	b.n	800ab9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab84:	2300      	movs	r3, #0
 800ab86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab88:	2101      	movs	r1, #1
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff ff05 	bl	800a99a <dir_next>
 800ab90:	4603      	mov	r3, r0
 800ab92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0d7      	beq.n	800ab4a <dir_alloc+0x26>
 800ab9a:	e000      	b.n	800ab9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d101      	bne.n	800aba8 <dir_alloc+0x84>
 800aba4:	2307      	movs	r3, #7
 800aba6:	75fb      	strb	r3, [r7, #23]
	return res;
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	331a      	adds	r3, #26
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff f849 	bl	8009c58 <ld_word>
 800abc6:	4603      	mov	r3, r0
 800abc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d109      	bne.n	800abe6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	3314      	adds	r3, #20
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f83e 	bl	8009c58 <ld_word>
 800abdc:	4603      	mov	r3, r0
 800abde:	041b      	lsls	r3, r3, #16
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	331a      	adds	r3, #26
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	b292      	uxth	r2, r2
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff f861 	bl	8009cce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d109      	bne.n	800ac28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f103 0214 	add.w	r2, r3, #20
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7ff f853 	bl	8009cce <st_word>
	}
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ac30:	b590      	push	{r4, r7, lr}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	331a      	adds	r3, #26
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff f80a 	bl	8009c58 <ld_word>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <cmp_lfn+0x1e>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e059      	b.n	800ad02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	4613      	mov	r3, r2
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac64:	2301      	movs	r3, #1
 800ac66:	81fb      	strh	r3, [r7, #14]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	e033      	b.n	800acd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ac6e:	4a27      	ldr	r2, [pc, #156]	; (800ad0c <cmp_lfn+0xdc>)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	4413      	add	r3, r2
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe ffeb 	bl	8009c58 <ld_word>
 800ac82:	4603      	mov	r3, r0
 800ac84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ac86:	89fb      	ldrh	r3, [r7, #14]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01a      	beq.n	800acc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2bfe      	cmp	r3, #254	; 0xfe
 800ac90:	d812      	bhi.n	800acb8 <cmp_lfn+0x88>
 800ac92:	89bb      	ldrh	r3, [r7, #12]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f002 f8d7 	bl	800ce48 <ff_wtoupper>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	461c      	mov	r4, r3
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	617a      	str	r2, [r7, #20]
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4413      	add	r3, r2
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f002 f8cb 	bl	800ce48 <ff_wtoupper>
 800acb2:	4603      	mov	r3, r0
 800acb4:	429c      	cmp	r4, r3
 800acb6:	d001      	beq.n	800acbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800acb8:	2300      	movs	r3, #0
 800acba:	e022      	b.n	800ad02 <cmp_lfn+0xd2>
			}
			wc = uc;
 800acbc:	89bb      	ldrh	r3, [r7, #12]
 800acbe:	81fb      	strh	r3, [r7, #14]
 800acc0:	e006      	b.n	800acd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800acc2:	89bb      	ldrh	r3, [r7, #12]
 800acc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acc8:	4293      	cmp	r3, r2
 800acca:	d001      	beq.n	800acd0 <cmp_lfn+0xa0>
 800accc:	2300      	movs	r3, #0
 800acce:	e018      	b.n	800ad02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	3301      	adds	r3, #1
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b0c      	cmp	r3, #12
 800acda:	d9c8      	bls.n	800ac6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <cmp_lfn+0xd0>
 800ace8:	89fb      	ldrh	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d008      	beq.n	800ad00 <cmp_lfn+0xd0>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4413      	add	r3, r2
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <cmp_lfn+0xd0>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e000      	b.n	800ad02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ad00:	2301      	movs	r3, #1
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd90      	pop	{r4, r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0801176c 	.word	0x0801176c

0800ad10 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	460b      	mov	r3, r1
 800ad20:	71fb      	strb	r3, [r7, #7]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	330d      	adds	r3, #13
 800ad2a:	79ba      	ldrb	r2, [r7, #6]
 800ad2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	330b      	adds	r3, #11
 800ad32:	220f      	movs	r2, #15
 800ad34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	330c      	adds	r3, #12
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	331a      	adds	r3, #26
 800ad42:	2100      	movs	r1, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fe ffc2 	bl	8009cce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	1e5a      	subs	r2, r3, #1
 800ad4e:	4613      	mov	r3, r2
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	82fb      	strh	r3, [r7, #22]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ad62:	8afb      	ldrh	r3, [r7, #22]
 800ad64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d007      	beq.n	800ad7c <put_lfn+0x6c>
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	61fa      	str	r2, [r7, #28]
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ad7c:	4a17      	ldr	r2, [pc, #92]	; (800addc <put_lfn+0xcc>)
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	4413      	add	r3, r2
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	4413      	add	r3, r2
 800ad8a:	8afa      	ldrh	r2, [r7, #22]
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe ff9d 	bl	8009cce <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ad94:	8afb      	ldrh	r3, [r7, #22]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <put_lfn+0x90>
 800ad9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad9e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	3301      	adds	r3, #1
 800ada4:	61bb      	str	r3, [r7, #24]
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b0c      	cmp	r3, #12
 800adaa:	d9da      	bls.n	800ad62 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800adac:	8afb      	ldrh	r3, [r7, #22]
 800adae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d006      	beq.n	800adc4 <put_lfn+0xb4>
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4413      	add	r3, r2
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <put_lfn+0xbc>
 800adc4:	79fb      	ldrb	r3, [r7, #7]
 800adc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	79fa      	ldrb	r2, [r7, #7]
 800add0:	701a      	strb	r2, [r3, #0]
}
 800add2:	bf00      	nop
 800add4:	3720      	adds	r7, #32
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	0801176c 	.word	0x0801176c

0800ade0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08c      	sub	sp, #48	; 0x30
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800adee:	220b      	movs	r2, #11
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7fe ffb2 	bl	8009d5c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	2b05      	cmp	r3, #5
 800adfc:	d92b      	bls.n	800ae56 <gen_numname+0x76>
		sr = seq;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ae02:	e022      	b.n	800ae4a <gen_numname+0x6a>
			wc = *lfn++;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	1c9a      	adds	r2, r3, #2
 800ae08:	607a      	str	r2, [r7, #4]
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ae0e:	2300      	movs	r3, #0
 800ae10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae12:	e017      	b.n	800ae44 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	005a      	lsls	r2, r3, #1
 800ae18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	4413      	add	r3, r2
 800ae20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ae22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae24:	085b      	lsrs	r3, r3, #1
 800ae26:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <gen_numname+0x5e>
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ae38:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ae3c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	3301      	adds	r3, #1
 800ae42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	2b0f      	cmp	r3, #15
 800ae48:	d9e4      	bls.n	800ae14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1d8      	bne.n	800ae04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ae56:	2307      	movs	r3, #7
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 030f 	and.w	r3, r3, #15
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	3330      	adds	r3, #48	; 0x30
 800ae66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ae6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae6e:	2b39      	cmp	r3, #57	; 0x39
 800ae70:	d904      	bls.n	800ae7c <gen_numname+0x9c>
 800ae72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae76:	3307      	adds	r3, #7
 800ae78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	1e5a      	subs	r2, r3, #1
 800ae80:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ae86:	4413      	add	r3, r2
 800ae88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ae8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	091b      	lsrs	r3, r3, #4
 800ae94:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1de      	bne.n	800ae5a <gen_numname+0x7a>
	ns[i] = '~';
 800ae9c:	f107 0214 	add.w	r2, r7, #20
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	4413      	add	r3, r2
 800aea4:	227e      	movs	r2, #126	; 0x7e
 800aea6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aea8:	2300      	movs	r3, #0
 800aeaa:	627b      	str	r3, [r7, #36]	; 0x24
 800aeac:	e002      	b.n	800aeb4 <gen_numname+0xd4>
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d205      	bcs.n	800aec8 <gen_numname+0xe8>
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	4413      	add	r3, r2
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	d1f2      	bne.n	800aeae <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeca:	2b07      	cmp	r3, #7
 800aecc:	d808      	bhi.n	800aee0 <gen_numname+0x100>
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	62ba      	str	r2, [r7, #40]	; 0x28
 800aed4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aed8:	4413      	add	r3, r2
 800aeda:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aede:	e000      	b.n	800aee2 <gen_numname+0x102>
 800aee0:	2120      	movs	r1, #32
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	1c5a      	adds	r2, r3, #1
 800aee6:	627a      	str	r2, [r7, #36]	; 0x24
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	460a      	mov	r2, r1
 800aeee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	2b07      	cmp	r3, #7
 800aef4:	d9e8      	bls.n	800aec8 <gen_numname+0xe8>
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	3730      	adds	r7, #48	; 0x30
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800af0c:	230b      	movs	r3, #11
 800af0e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	b2da      	uxtb	r2, r3
 800af14:	0852      	lsrs	r2, r2, #1
 800af16:	01db      	lsls	r3, r3, #7
 800af18:	4313      	orrs	r3, r2
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	1c59      	adds	r1, r3, #1
 800af20:	6079      	str	r1, [r7, #4]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	4413      	add	r3, r2
 800af26:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1ed      	bne.n	800af10 <sum_sfn+0x10>
	return sum;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af50:	2100      	movs	r1, #0
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff fca6 	bl	800a8a4 <dir_sdi>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <dir_find+0x24>
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	e0a9      	b.n	800b0ba <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af66:	23ff      	movs	r3, #255	; 0xff
 800af68:	753b      	strb	r3, [r7, #20]
 800af6a:	7d3b      	ldrb	r3, [r7, #20]
 800af6c:	757b      	strb	r3, [r7, #21]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f04f 32ff 	mov.w	r2, #4294967295
 800af74:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6938      	ldr	r0, [r7, #16]
 800af7e:	f7ff f911 	bl	800a1a4 <move_window>
 800af82:	4603      	mov	r3, r0
 800af84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af86:	7dfb      	ldrb	r3, [r7, #23]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f040 8090 	bne.w	800b0ae <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af96:	7dbb      	ldrb	r3, [r7, #22]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d102      	bne.n	800afa2 <dir_find+0x60>
 800af9c:	2304      	movs	r3, #4
 800af9e:	75fb      	strb	r3, [r7, #23]
 800afa0:	e08a      	b.n	800b0b8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	330b      	adds	r3, #11
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afae:	73fb      	strb	r3, [r7, #15]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	7bfa      	ldrb	r2, [r7, #15]
 800afb4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800afb6:	7dbb      	ldrb	r3, [r7, #22]
 800afb8:	2be5      	cmp	r3, #229	; 0xe5
 800afba:	d007      	beq.n	800afcc <dir_find+0x8a>
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	f003 0308 	and.w	r3, r3, #8
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d009      	beq.n	800afda <dir_find+0x98>
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	2b0f      	cmp	r3, #15
 800afca:	d006      	beq.n	800afda <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afcc:	23ff      	movs	r3, #255	; 0xff
 800afce:	757b      	strb	r3, [r7, #21]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f04f 32ff 	mov.w	r2, #4294967295
 800afd6:	631a      	str	r2, [r3, #48]	; 0x30
 800afd8:	e05e      	b.n	800b098 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d136      	bne.n	800b04e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	d154      	bne.n	800b098 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800afee:	7dbb      	ldrb	r3, [r7, #22]
 800aff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00d      	beq.n	800b014 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a1b      	ldr	r3, [r3, #32]
 800affc:	7b5b      	ldrb	r3, [r3, #13]
 800affe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b000:	7dbb      	ldrb	r3, [r7, #22]
 800b002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b006:	75bb      	strb	r3, [r7, #22]
 800b008:	7dbb      	ldrb	r3, [r7, #22]
 800b00a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	695a      	ldr	r2, [r3, #20]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b014:	7dba      	ldrb	r2, [r7, #22]
 800b016:	7d7b      	ldrb	r3, [r7, #21]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d115      	bne.n	800b048 <dir_find+0x106>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	330d      	adds	r3, #13
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	7d3a      	ldrb	r2, [r7, #20]
 800b026:	429a      	cmp	r2, r3
 800b028:	d10e      	bne.n	800b048 <dir_find+0x106>
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	4619      	mov	r1, r3
 800b034:	4610      	mov	r0, r2
 800b036:	f7ff fdfb 	bl	800ac30 <cmp_lfn>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <dir_find+0x106>
 800b040:	7d7b      	ldrb	r3, [r7, #21]
 800b042:	3b01      	subs	r3, #1
 800b044:	b2db      	uxtb	r3, r3
 800b046:	e000      	b.n	800b04a <dir_find+0x108>
 800b048:	23ff      	movs	r3, #255	; 0xff
 800b04a:	757b      	strb	r3, [r7, #21]
 800b04c:	e024      	b.n	800b098 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b04e:	7d7b      	ldrb	r3, [r7, #21]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <dir_find+0x126>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff ff51 	bl	800af00 <sum_sfn>
 800b05e:	4603      	mov	r3, r0
 800b060:	461a      	mov	r2, r3
 800b062:	7d3b      	ldrb	r3, [r7, #20]
 800b064:	4293      	cmp	r3, r2
 800b066:	d024      	beq.n	800b0b2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10a      	bne.n	800b08c <dir_find+0x14a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a18      	ldr	r0, [r3, #32]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3324      	adds	r3, #36	; 0x24
 800b07e:	220b      	movs	r2, #11
 800b080:	4619      	mov	r1, r3
 800b082:	f7fe fea7 	bl	8009dd4 <mem_cmp>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d014      	beq.n	800b0b6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b08c:	23ff      	movs	r3, #255	; 0xff
 800b08e:	757b      	strb	r3, [r7, #21]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f04f 32ff 	mov.w	r2, #4294967295
 800b096:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b098:	2100      	movs	r1, #0
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff fc7d 	bl	800a99a <dir_next>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f43f af65 	beq.w	800af76 <dir_find+0x34>
 800b0ac:	e004      	b.n	800b0b8 <dir_find+0x176>
		if (res != FR_OK) break;
 800b0ae:	bf00      	nop
 800b0b0:	e002      	b.n	800b0b8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0b2:	bf00      	nop
 800b0b4:	e000      	b.n	800b0b8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0b6:	bf00      	nop

	return res;
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08c      	sub	sp, #48	; 0x30
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <dir_register+0x20>
 800b0e0:	2306      	movs	r3, #6
 800b0e2:	e0e0      	b.n	800b2a6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e8:	e002      	b.n	800b0f0 <dir_register+0x2c>
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	4413      	add	r3, r2
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1f4      	bne.n	800b0ea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b106:	f107 030c 	add.w	r3, r7, #12
 800b10a:	220c      	movs	r2, #12
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fe fe25 	bl	8009d5c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d032      	beq.n	800b182 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2240      	movs	r2, #64	; 0x40
 800b120:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b124:	2301      	movs	r3, #1
 800b126:	62bb      	str	r3, [r7, #40]	; 0x28
 800b128:	e016      	b.n	800b158 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	f107 010c 	add.w	r1, r7, #12
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	f7ff fe51 	bl	800ade0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff feff 	bl	800af42 <dir_find>
 800b144:	4603      	mov	r3, r0
 800b146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	3301      	adds	r3, #1
 800b156:	62bb      	str	r3, [r7, #40]	; 0x28
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	2b63      	cmp	r3, #99	; 0x63
 800b15c:	d9e5      	bls.n	800b12a <dir_register+0x66>
 800b15e:	e000      	b.n	800b162 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b160:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	2b64      	cmp	r3, #100	; 0x64
 800b166:	d101      	bne.n	800b16c <dir_register+0xa8>
 800b168:	2307      	movs	r3, #7
 800b16a:	e09c      	b.n	800b2a6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b16c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b170:	2b04      	cmp	r3, #4
 800b172:	d002      	beq.n	800b17a <dir_register+0xb6>
 800b174:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b178:	e095      	b.n	800b2a6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b17a:	7dfa      	ldrb	r2, [r7, #23]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	f003 0302 	and.w	r3, r3, #2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d007      	beq.n	800b19c <dir_register+0xd8>
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	330c      	adds	r3, #12
 800b190:	4a47      	ldr	r2, [pc, #284]	; (800b2b0 <dir_register+0x1ec>)
 800b192:	fba2 2303 	umull	r2, r3, r2, r3
 800b196:	089b      	lsrs	r3, r3, #2
 800b198:	3301      	adds	r3, #1
 800b19a:	e000      	b.n	800b19e <dir_register+0xda>
 800b19c:	2301      	movs	r3, #1
 800b19e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b1a0:	6a39      	ldr	r1, [r7, #32]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff fcbe 	bl	800ab24 <dir_alloc>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b1ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d148      	bne.n	800b248 <dir_register+0x184>
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	623b      	str	r3, [r7, #32]
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d042      	beq.n	800b248 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	695a      	ldr	r2, [r3, #20]
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	015b      	lsls	r3, r3, #5
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff fb68 	bl	800a8a4 <dir_sdi>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b1da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d132      	bne.n	800b248 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3324      	adds	r3, #36	; 0x24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fe8a 	bl	800af00 <sum_sfn>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	69f8      	ldr	r0, [r7, #28]
 800b1f8:	f7fe ffd4 	bl	800a1a4 <move_window>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b206:	2b00      	cmp	r3, #0
 800b208:	d11d      	bne.n	800b246 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	68d8      	ldr	r0, [r3, #12]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a19      	ldr	r1, [r3, #32]
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	b2da      	uxtb	r2, r3
 800b216:	7efb      	ldrb	r3, [r7, #27]
 800b218:	f7ff fd7a 	bl	800ad10 <put_lfn>
				fs->wflag = 1;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	2201      	movs	r2, #1
 800b220:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b222:	2100      	movs	r1, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff fbb8 	bl	800a99a <dir_next>
 800b22a:	4603      	mov	r3, r0
 800b22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b234:	2b00      	cmp	r3, #0
 800b236:	d107      	bne.n	800b248 <dir_register+0x184>
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	623b      	str	r3, [r7, #32]
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1d5      	bne.n	800b1f0 <dir_register+0x12c>
 800b244:	e000      	b.n	800b248 <dir_register+0x184>
				if (res != FR_OK) break;
 800b246:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d128      	bne.n	800b2a2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	4619      	mov	r1, r3
 800b256:	69f8      	ldr	r0, [r7, #28]
 800b258:	f7fe ffa4 	bl	800a1a4 <move_window>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b266:	2b00      	cmp	r3, #0
 800b268:	d11b      	bne.n	800b2a2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	2220      	movs	r2, #32
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fd93 	bl	8009d9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a18      	ldr	r0, [r3, #32]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3324      	adds	r3, #36	; 0x24
 800b280:	220b      	movs	r2, #11
 800b282:	4619      	mov	r1, r3
 800b284:	f7fe fd6a 	bl	8009d5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	330c      	adds	r3, #12
 800b294:	f002 0218 	and.w	r2, r2, #24
 800b298:	b2d2      	uxtb	r2, r2
 800b29a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3730      	adds	r7, #48	; 0x30
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	4ec4ec4f 	.word	0x4ec4ec4f

0800b2b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08a      	sub	sp, #40	; 0x28
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	61ba      	str	r2, [r7, #24]
 800b2da:	693a      	ldr	r2, [r7, #16]
 800b2dc:	4413      	add	r3, r2
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b2e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2e4:	2b1f      	cmp	r3, #31
 800b2e6:	d940      	bls.n	800b36a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b2e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2ea:	2b2f      	cmp	r3, #47	; 0x2f
 800b2ec:	d006      	beq.n	800b2fc <create_name+0x48>
 800b2ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2f0:	2b5c      	cmp	r3, #92	; 0x5c
 800b2f2:	d110      	bne.n	800b316 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b2f4:	e002      	b.n	800b2fc <create_name+0x48>
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	61bb      	str	r3, [r7, #24]
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	4413      	add	r3, r2
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b2f      	cmp	r3, #47	; 0x2f
 800b306:	d0f6      	beq.n	800b2f6 <create_name+0x42>
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	4413      	add	r3, r2
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b5c      	cmp	r3, #92	; 0x5c
 800b312:	d0f0      	beq.n	800b2f6 <create_name+0x42>
			break;
 800b314:	e02a      	b.n	800b36c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2bfe      	cmp	r3, #254	; 0xfe
 800b31a:	d901      	bls.n	800b320 <create_name+0x6c>
 800b31c:	2306      	movs	r3, #6
 800b31e:	e177      	b.n	800b610 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b322:	b2db      	uxtb	r3, r3
 800b324:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b328:	2101      	movs	r1, #1
 800b32a:	4618      	mov	r0, r3
 800b32c:	f001 fd50 	bl	800cdd0 <ff_convert>
 800b330:	4603      	mov	r3, r0
 800b332:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <create_name+0x8a>
 800b33a:	2306      	movs	r3, #6
 800b33c:	e168      	b.n	800b610 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b340:	2b7f      	cmp	r3, #127	; 0x7f
 800b342:	d809      	bhi.n	800b358 <create_name+0xa4>
 800b344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b346:	4619      	mov	r1, r3
 800b348:	48b3      	ldr	r0, [pc, #716]	; (800b618 <create_name+0x364>)
 800b34a:	f7fe fd6a 	bl	8009e22 <chk_chr>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <create_name+0xa4>
 800b354:	2306      	movs	r3, #6
 800b356:	e15b      	b.n	800b610 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	617a      	str	r2, [r7, #20]
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b366:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b368:	e7b4      	b.n	800b2d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b36a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	441a      	add	r2, r3
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b378:	2b1f      	cmp	r3, #31
 800b37a:	d801      	bhi.n	800b380 <create_name+0xcc>
 800b37c:	2304      	movs	r3, #4
 800b37e:	e000      	b.n	800b382 <create_name+0xce>
 800b380:	2300      	movs	r3, #0
 800b382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b386:	e011      	b.n	800b3ac <create_name+0xf8>
		w = lfn[di - 1];
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b38e:	3b01      	subs	r3, #1
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	4413      	add	r3, r2
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b39a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d002      	beq.n	800b3a6 <create_name+0xf2>
 800b3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b3a4:	d106      	bne.n	800b3b4 <create_name+0x100>
		di--;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1ea      	bne.n	800b388 <create_name+0xd4>
 800b3b2:	e000      	b.n	800b3b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b3b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4413      	add	r3, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <create_name+0x118>
 800b3c8:	2306      	movs	r3, #6
 800b3ca:	e121      	b.n	800b610 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3324      	adds	r3, #36	; 0x24
 800b3d0:	220b      	movs	r2, #11
 800b3d2:	2120      	movs	r1, #32
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fce2 	bl	8009d9e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b3da:	2300      	movs	r3, #0
 800b3dc:	61bb      	str	r3, [r7, #24]
 800b3de:	e002      	b.n	800b3e6 <create_name+0x132>
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	61bb      	str	r3, [r7, #24]
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d0f5      	beq.n	800b3e0 <create_name+0x12c>
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b400:	d0ee      	beq.n	800b3e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d009      	beq.n	800b41c <create_name+0x168>
 800b408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b40c:	f043 0303 	orr.w	r3, r3, #3
 800b410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b414:	e002      	b.n	800b41c <create_name+0x168>
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	3b01      	subs	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d009      	beq.n	800b436 <create_name+0x182>
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b428:	3b01      	subs	r3, #1
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	2b2e      	cmp	r3, #46	; 0x2e
 800b434:	d1ef      	bne.n	800b416 <create_name+0x162>

	i = b = 0; ni = 8;
 800b436:	2300      	movs	r3, #0
 800b438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b43c:	2300      	movs	r3, #0
 800b43e:	623b      	str	r3, [r7, #32]
 800b440:	2308      	movs	r3, #8
 800b442:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	61ba      	str	r2, [r7, #24]
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 8090 	beq.w	800b57c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b45e:	2b20      	cmp	r3, #32
 800b460:	d006      	beq.n	800b470 <create_name+0x1bc>
 800b462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b464:	2b2e      	cmp	r3, #46	; 0x2e
 800b466:	d10a      	bne.n	800b47e <create_name+0x1ca>
 800b468:	69ba      	ldr	r2, [r7, #24]
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d006      	beq.n	800b47e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b474:	f043 0303 	orr.w	r3, r3, #3
 800b478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b47c:	e07d      	b.n	800b57a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b47e:	6a3a      	ldr	r2, [r7, #32]
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	429a      	cmp	r2, r3
 800b484:	d203      	bcs.n	800b48e <create_name+0x1da>
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d123      	bne.n	800b4d6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	2b0b      	cmp	r3, #11
 800b492:	d106      	bne.n	800b4a2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b498:	f043 0303 	orr.w	r3, r3, #3
 800b49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4a0:	e06f      	b.n	800b582 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b4a2:	69ba      	ldr	r2, [r7, #24]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d005      	beq.n	800b4b6 <create_name+0x202>
 800b4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ae:	f043 0303 	orr.w	r3, r3, #3
 800b4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b4b6:	69ba      	ldr	r2, [r7, #24]
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d860      	bhi.n	800b580 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	61bb      	str	r3, [r7, #24]
 800b4c2:	2308      	movs	r3, #8
 800b4c4:	623b      	str	r3, [r7, #32]
 800b4c6:	230b      	movs	r3, #11
 800b4c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b4ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4d4:	e051      	b.n	800b57a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4d8:	2b7f      	cmp	r3, #127	; 0x7f
 800b4da:	d914      	bls.n	800b506 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fc75 	bl	800cdd0 <ff_convert>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d004      	beq.n	800b4fa <create_name+0x246>
 800b4f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4f2:	3b80      	subs	r3, #128	; 0x80
 800b4f4:	4a49      	ldr	r2, [pc, #292]	; (800b61c <create_name+0x368>)
 800b4f6:	5cd3      	ldrb	r3, [r2, r3]
 800b4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b4fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4fe:	f043 0302 	orr.w	r3, r3, #2
 800b502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d007      	beq.n	800b51c <create_name+0x268>
 800b50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b50e:	4619      	mov	r1, r3
 800b510:	4843      	ldr	r0, [pc, #268]	; (800b620 <create_name+0x36c>)
 800b512:	f7fe fc86 	bl	8009e22 <chk_chr>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b51c:	235f      	movs	r3, #95	; 0x5f
 800b51e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b524:	f043 0303 	orr.w	r3, r3, #3
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b52c:	e01b      	b.n	800b566 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b530:	2b40      	cmp	r3, #64	; 0x40
 800b532:	d909      	bls.n	800b548 <create_name+0x294>
 800b534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b536:	2b5a      	cmp	r3, #90	; 0x5a
 800b538:	d806      	bhi.n	800b548 <create_name+0x294>
					b |= 2;
 800b53a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b53e:	f043 0302 	orr.w	r3, r3, #2
 800b542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b546:	e00e      	b.n	800b566 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b54a:	2b60      	cmp	r3, #96	; 0x60
 800b54c:	d90b      	bls.n	800b566 <create_name+0x2b2>
 800b54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b550:	2b7a      	cmp	r3, #122	; 0x7a
 800b552:	d808      	bhi.n	800b566 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b558:	f043 0301 	orr.w	r3, r3, #1
 800b55c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b562:	3b20      	subs	r3, #32
 800b564:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	623a      	str	r2, [r7, #32]
 800b56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b56e:	b2d1      	uxtb	r1, r2
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	4413      	add	r3, r2
 800b574:	460a      	mov	r2, r1
 800b576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b57a:	e763      	b.n	800b444 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b57c:	bf00      	nop
 800b57e:	e000      	b.n	800b582 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b580:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b588:	2be5      	cmp	r3, #229	; 0xe5
 800b58a:	d103      	bne.n	800b594 <create_name+0x2e0>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2205      	movs	r2, #5
 800b590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b08      	cmp	r3, #8
 800b598:	d104      	bne.n	800b5a4 <create_name+0x2f0>
 800b59a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b5a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5a8:	f003 030c 	and.w	r3, r3, #12
 800b5ac:	2b0c      	cmp	r3, #12
 800b5ae:	d005      	beq.n	800b5bc <create_name+0x308>
 800b5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5b4:	f003 0303 	and.w	r3, r3, #3
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d105      	bne.n	800b5c8 <create_name+0x314>
 800b5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5c0:	f043 0302 	orr.w	r3, r3, #2
 800b5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d117      	bne.n	800b604 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5d8:	f003 0303 	and.w	r3, r3, #3
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d105      	bne.n	800b5ec <create_name+0x338>
 800b5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e4:	f043 0310 	orr.w	r3, r3, #16
 800b5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b5ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5f0:	f003 030c 	and.w	r3, r3, #12
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d105      	bne.n	800b604 <create_name+0x350>
 800b5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5fc:	f043 0308 	orr.w	r3, r3, #8
 800b600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b60a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b60e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b610:	4618      	mov	r0, r3
 800b612:	3728      	adds	r7, #40	; 0x28
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	08011668 	.word	0x08011668
 800b61c:	080116ec 	.word	0x080116ec
 800b620:	08011674 	.word	0x08011674

0800b624 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b638:	e002      	b.n	800b640 <follow_path+0x1c>
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	3301      	adds	r3, #1
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b2f      	cmp	r3, #47	; 0x2f
 800b646:	d0f8      	beq.n	800b63a <follow_path+0x16>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	2b5c      	cmp	r3, #92	; 0x5c
 800b64e:	d0f4      	beq.n	800b63a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2200      	movs	r2, #0
 800b654:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b1f      	cmp	r3, #31
 800b65c:	d80a      	bhi.n	800b674 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2280      	movs	r2, #128	; 0x80
 800b662:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b666:	2100      	movs	r1, #0
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff f91b 	bl	800a8a4 <dir_sdi>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]
 800b672:	e043      	b.n	800b6fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b674:	463b      	mov	r3, r7
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff fe1b 	bl	800b2b4 <create_name>
 800b67e:	4603      	mov	r3, r0
 800b680:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b682:	7dfb      	ldrb	r3, [r7, #23]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d134      	bne.n	800b6f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fc5a 	bl	800af42 <dir_find>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b698:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d127      	bne.n	800b6f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d122      	bne.n	800b6f6 <follow_path+0xd2>
 800b6b0:	2305      	movs	r3, #5
 800b6b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b6b4:	e01f      	b.n	800b6f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6b6:	7afb      	ldrb	r3, [r7, #11]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d11c      	bne.n	800b6fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	799b      	ldrb	r3, [r3, #6]
 800b6c4:	f003 0310 	and.w	r3, r3, #16
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b6cc:	2305      	movs	r3, #5
 800b6ce:	75fb      	strb	r3, [r7, #23]
 800b6d0:	e014      	b.n	800b6fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7ff fa64 	bl	800abb2 <ld_clust>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6f0:	e7c0      	b.n	800b674 <follow_path+0x50>
			if (res != FR_OK) break;
 800b6f2:	bf00      	nop
 800b6f4:	e002      	b.n	800b6fc <follow_path+0xd8>
				break;
 800b6f6:	bf00      	nop
 800b6f8:	e000      	b.n	800b6fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6fa:	bf00      	nop
			}
		}
	}

	return res;
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b706:	b480      	push	{r7}
 800b708:	b087      	sub	sp, #28
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b70e:	f04f 33ff 	mov.w	r3, #4294967295
 800b712:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d031      	beq.n	800b780 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	e002      	b.n	800b72a <get_ldnumber+0x24>
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	3301      	adds	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b1f      	cmp	r3, #31
 800b730:	d903      	bls.n	800b73a <get_ldnumber+0x34>
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b3a      	cmp	r3, #58	; 0x3a
 800b738:	d1f4      	bne.n	800b724 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	2b3a      	cmp	r3, #58	; 0x3a
 800b740:	d11c      	bne.n	800b77c <get_ldnumber+0x76>
			tp = *path;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	60fa      	str	r2, [r7, #12]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	3b30      	subs	r3, #48	; 0x30
 800b752:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b09      	cmp	r3, #9
 800b758:	d80e      	bhi.n	800b778 <get_ldnumber+0x72>
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d10a      	bne.n	800b778 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d107      	bne.n	800b778 <get_ldnumber+0x72>
					vol = (int)i;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	3301      	adds	r3, #1
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	e002      	b.n	800b782 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b77c:	2300      	movs	r3, #0
 800b77e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b780:	693b      	ldr	r3, [r7, #16]
}
 800b782:	4618      	mov	r0, r3
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
	...

0800b790 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	70da      	strb	r2, [r3, #3]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7fe fcfa 	bl	800a1a4 <move_window>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <check_fs+0x2a>
 800b7b6:	2304      	movs	r3, #4
 800b7b8:	e038      	b.n	800b82c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3338      	adds	r3, #56	; 0x38
 800b7be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fa48 	bl	8009c58 <ld_word>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d001      	beq.n	800b7d8 <check_fs+0x48>
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e029      	b.n	800b82c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7de:	2be9      	cmp	r3, #233	; 0xe9
 800b7e0:	d009      	beq.n	800b7f6 <check_fs+0x66>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7e8:	2beb      	cmp	r3, #235	; 0xeb
 800b7ea:	d11e      	bne.n	800b82a <check_fs+0x9a>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b7f2:	2b90      	cmp	r3, #144	; 0x90
 800b7f4:	d119      	bne.n	800b82a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3338      	adds	r3, #56	; 0x38
 800b7fa:	3336      	adds	r3, #54	; 0x36
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe fa43 	bl	8009c88 <ld_dword>
 800b802:	4603      	mov	r3, r0
 800b804:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b808:	4a0a      	ldr	r2, [pc, #40]	; (800b834 <check_fs+0xa4>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d101      	bne.n	800b812 <check_fs+0x82>
 800b80e:	2300      	movs	r3, #0
 800b810:	e00c      	b.n	800b82c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	3338      	adds	r3, #56	; 0x38
 800b816:	3352      	adds	r3, #82	; 0x52
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fa35 	bl	8009c88 <ld_dword>
 800b81e:	4603      	mov	r3, r0
 800b820:	4a05      	ldr	r2, [pc, #20]	; (800b838 <check_fs+0xa8>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d101      	bne.n	800b82a <check_fs+0x9a>
 800b826:	2300      	movs	r3, #0
 800b828:	e000      	b.n	800b82c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b82a:	2302      	movs	r3, #2
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	00544146 	.word	0x00544146
 800b838:	33544146 	.word	0x33544146

0800b83c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b096      	sub	sp, #88	; 0x58
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f7ff ff58 	bl	800b706 <get_ldnumber>
 800b856:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	da01      	bge.n	800b862 <find_volume+0x26>
 800b85e:	230b      	movs	r3, #11
 800b860:	e236      	b.n	800bcd0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b862:	4aac      	ldr	r2, [pc, #688]	; (800bb14 <find_volume+0x2d8>)
 800b864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b86a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <find_volume+0x3a>
 800b872:	230c      	movs	r3, #12
 800b874:	e22c      	b.n	800bcd0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800b876:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b878:	f7fe faee 	bl	8009e58 <lock_fs>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <find_volume+0x4a>
 800b882:	230f      	movs	r3, #15
 800b884:	e224      	b.n	800bcd0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b88a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	f023 0301 	bic.w	r3, r3, #1
 800b892:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d01a      	beq.n	800b8d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe f93b 	bl	8009b1c <disk_status>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b8ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10c      	bne.n	800b8d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <find_volume+0x92>
 800b8be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8c2:	f003 0304 	and.w	r3, r3, #4
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b8ca:	230a      	movs	r3, #10
 800b8cc:	e200      	b.n	800bcd0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e1fe      	b.n	800bcd0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	785b      	ldrb	r3, [r3, #1]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe f933 	bl	8009b50 <disk_initialize>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b8f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e1e7      	b.n	800bcd0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d007      	beq.n	800b916 <find_volume+0xda>
 800b906:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b90a:	f003 0304 	and.w	r3, r3, #4
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b912:	230a      	movs	r3, #10
 800b914:	e1dc      	b.n	800bcd0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b91a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b91c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b91e:	f7ff ff37 	bl	800b790 <check_fs>
 800b922:	4603      	mov	r3, r0
 800b924:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d14b      	bne.n	800b9c8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b930:	2300      	movs	r3, #0
 800b932:	643b      	str	r3, [r7, #64]	; 0x40
 800b934:	e01f      	b.n	800b976 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b944:	4413      	add	r3, r2
 800b946:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	3304      	adds	r3, #4
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d006      	beq.n	800b960 <find_volume+0x124>
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	3308      	adds	r3, #8
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe f996 	bl	8009c88 <ld_dword>
 800b95c:	4602      	mov	r2, r0
 800b95e:	e000      	b.n	800b962 <find_volume+0x126>
 800b960:	2200      	movs	r2, #0
 800b962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b96a:	440b      	add	r3, r1
 800b96c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b972:	3301      	adds	r3, #1
 800b974:	643b      	str	r3, [r7, #64]	; 0x40
 800b976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b978:	2b03      	cmp	r3, #3
 800b97a:	d9dc      	bls.n	800b936 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b97c:	2300      	movs	r3, #0
 800b97e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <find_volume+0x150>
 800b986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b988:	3b01      	subs	r3, #1
 800b98a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b994:	4413      	add	r3, r2
 800b996:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b99a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d005      	beq.n	800b9ae <find_volume+0x172>
 800b9a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9a6:	f7ff fef3 	bl	800b790 <check_fs>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	e000      	b.n	800b9b0 <find_volume+0x174>
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b9b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d905      	bls.n	800b9c8 <find_volume+0x18c>
 800b9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9be:	3301      	adds	r3, #1
 800b9c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d9e1      	bls.n	800b98c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d101      	bne.n	800b9d4 <find_volume+0x198>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e17d      	b.n	800bcd0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b9d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d901      	bls.n	800b9e0 <find_volume+0x1a4>
 800b9dc:	230d      	movs	r3, #13
 800b9de:	e177      	b.n	800bcd0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	3338      	adds	r3, #56	; 0x38
 800b9e4:	330b      	adds	r3, #11
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe f936 	bl	8009c58 <ld_word>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f2:	d001      	beq.n	800b9f8 <find_volume+0x1bc>
 800b9f4:	230d      	movs	r3, #13
 800b9f6:	e16b      	b.n	800bcd0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	3338      	adds	r3, #56	; 0x38
 800b9fc:	3316      	adds	r3, #22
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f92a 	bl	8009c58 <ld_word>
 800ba04:	4603      	mov	r3, r0
 800ba06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ba08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <find_volume+0x1e0>
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba10:	3338      	adds	r3, #56	; 0x38
 800ba12:	3324      	adds	r3, #36	; 0x24
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe f937 	bl	8009c88 <ld_dword>
 800ba1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba20:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	789b      	ldrb	r3, [r3, #2]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d005      	beq.n	800ba40 <find_volume+0x204>
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	789b      	ldrb	r3, [r3, #2]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d001      	beq.n	800ba40 <find_volume+0x204>
 800ba3c:	230d      	movs	r3, #13
 800ba3e:	e147      	b.n	800bcd0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	789b      	ldrb	r3, [r3, #2]
 800ba44:	461a      	mov	r2, r3
 800ba46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba48:	fb02 f303 	mul.w	r3, r2, r3
 800ba4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	895b      	ldrh	r3, [r3, #10]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d008      	beq.n	800ba74 <find_volume+0x238>
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	895b      	ldrh	r3, [r3, #10]
 800ba66:	461a      	mov	r2, r3
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	895b      	ldrh	r3, [r3, #10]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	4013      	ands	r3, r2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <find_volume+0x23c>
 800ba74:	230d      	movs	r3, #13
 800ba76:	e12b      	b.n	800bcd0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ba78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7a:	3338      	adds	r3, #56	; 0x38
 800ba7c:	3311      	adds	r3, #17
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fe f8ea 	bl	8009c58 <ld_word>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	891b      	ldrh	r3, [r3, #8]
 800ba90:	f003 030f 	and.w	r3, r3, #15
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <find_volume+0x262>
 800ba9a:	230d      	movs	r3, #13
 800ba9c:	e118      	b.n	800bcd0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	3338      	adds	r3, #56	; 0x38
 800baa2:	3313      	adds	r3, #19
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe f8d7 	bl	8009c58 <ld_word>
 800baaa:	4603      	mov	r3, r0
 800baac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800baae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d106      	bne.n	800bac2 <find_volume+0x286>
 800bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab6:	3338      	adds	r3, #56	; 0x38
 800bab8:	3320      	adds	r3, #32
 800baba:	4618      	mov	r0, r3
 800babc:	f7fe f8e4 	bl	8009c88 <ld_dword>
 800bac0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	3338      	adds	r3, #56	; 0x38
 800bac6:	330e      	adds	r3, #14
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fe f8c5 	bl	8009c58 <ld_word>
 800bace:	4603      	mov	r3, r0
 800bad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d101      	bne.n	800badc <find_volume+0x2a0>
 800bad8:	230d      	movs	r3, #13
 800bada:	e0f9      	b.n	800bcd0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800badc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae0:	4413      	add	r3, r2
 800bae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae4:	8912      	ldrh	r2, [r2, #8]
 800bae6:	0912      	lsrs	r2, r2, #4
 800bae8:	b292      	uxth	r2, r2
 800baea:	4413      	add	r3, r2
 800baec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800baee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d201      	bcs.n	800bafa <find_volume+0x2be>
 800baf6:	230d      	movs	r3, #13
 800baf8:	e0ea      	b.n	800bcd0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bafa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb02:	8952      	ldrh	r2, [r2, #10]
 800bb04:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d103      	bne.n	800bb18 <find_volume+0x2dc>
 800bb10:	230d      	movs	r3, #13
 800bb12:	e0dd      	b.n	800bcd0 <find_volume+0x494>
 800bb14:	2000028c 	.word	0x2000028c
		fmt = FS_FAT32;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d802      	bhi.n	800bb2e <find_volume+0x2f2>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d802      	bhi.n	800bb3e <find_volume+0x302>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	1c9a      	adds	r2, r3, #2
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bb4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb50:	441a      	add	r2, r3
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bb56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	441a      	add	r2, r3
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bb60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d11e      	bne.n	800bba6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	3338      	adds	r3, #56	; 0x38
 800bb6c:	332a      	adds	r3, #42	; 0x2a
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fe f872 	bl	8009c58 <ld_word>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <find_volume+0x342>
 800bb7a:	230d      	movs	r3, #13
 800bb7c:	e0a8      	b.n	800bcd0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	891b      	ldrh	r3, [r3, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <find_volume+0x34e>
 800bb86:	230d      	movs	r3, #13
 800bb88:	e0a2      	b.n	800bcd0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	3338      	adds	r3, #56	; 0x38
 800bb8e:	332c      	adds	r3, #44	; 0x2c
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe f879 	bl	8009c88 <ld_dword>
 800bb96:	4602      	mov	r2, r0
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	69db      	ldr	r3, [r3, #28]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	647b      	str	r3, [r7, #68]	; 0x44
 800bba4:	e01f      	b.n	800bbe6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba8:	891b      	ldrh	r3, [r3, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <find_volume+0x376>
 800bbae:	230d      	movs	r3, #13
 800bbb0:	e08e      	b.n	800bcd0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb8:	441a      	add	r2, r3
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bbbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d103      	bne.n	800bbce <find_volume+0x392>
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	e00a      	b.n	800bbe4 <find_volume+0x3a8>
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	69da      	ldr	r2, [r3, #28]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4413      	add	r3, r2
 800bbd8:	085a      	lsrs	r2, r3, #1
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bbe4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe8:	6a1a      	ldr	r2, [r3, #32]
 800bbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bbf0:	0a5b      	lsrs	r3, r3, #9
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d201      	bcs.n	800bbfa <find_volume+0x3be>
 800bbf6:	230d      	movs	r3, #13
 800bbf8:	e06a      	b.n	800bcd0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bc00:	619a      	str	r2, [r3, #24]
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	699a      	ldr	r2, [r3, #24]
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	2280      	movs	r2, #128	; 0x80
 800bc0e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bc10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d149      	bne.n	800bcac <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	3338      	adds	r3, #56	; 0x38
 800bc1c:	3330      	adds	r3, #48	; 0x30
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe f81a 	bl	8009c58 <ld_word>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d140      	bne.n	800bcac <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bc2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc32:	f7fe fab7 	bl	800a1a4 <move_window>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d137      	bne.n	800bcac <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	2200      	movs	r2, #0
 800bc40:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	3338      	adds	r3, #56	; 0x38
 800bc46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe f804 	bl	8009c58 <ld_word>
 800bc50:	4603      	mov	r3, r0
 800bc52:	461a      	mov	r2, r3
 800bc54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d127      	bne.n	800bcac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5e:	3338      	adds	r3, #56	; 0x38
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe f811 	bl	8009c88 <ld_dword>
 800bc66:	4603      	mov	r3, r0
 800bc68:	4a1b      	ldr	r2, [pc, #108]	; (800bcd8 <find_volume+0x49c>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d11e      	bne.n	800bcac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc70:	3338      	adds	r3, #56	; 0x38
 800bc72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fe f806 	bl	8009c88 <ld_dword>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a17      	ldr	r2, [pc, #92]	; (800bcdc <find_volume+0x4a0>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d113      	bne.n	800bcac <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	3338      	adds	r3, #56	; 0x38
 800bc88:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fd fffb 	bl	8009c88 <ld_dword>
 800bc92:	4602      	mov	r2, r0
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9a:	3338      	adds	r3, #56	; 0x38
 800bc9c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fd fff1 	bl	8009c88 <ld_dword>
 800bca6:	4602      	mov	r2, r0
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bcb2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <find_volume+0x4a4>)
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	4b08      	ldr	r3, [pc, #32]	; (800bce0 <find_volume+0x4a4>)
 800bcbe:	801a      	strh	r2, [r3, #0]
 800bcc0:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <find_volume+0x4a4>)
 800bcc2:	881a      	ldrh	r2, [r3, #0]
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bcc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcca:	f7fe fa03 	bl	800a0d4 <clear_lock>
#endif
	return FR_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3758      	adds	r7, #88	; 0x58
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	41615252 	.word	0x41615252
 800bcdc:	61417272 	.word	0x61417272
 800bce0:	20000290 	.word	0x20000290

0800bce4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bcee:	2309      	movs	r3, #9
 800bcf0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d02e      	beq.n	800bd56 <validate+0x72>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d02a      	beq.n	800bd56 <validate+0x72>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d025      	beq.n	800bd56 <validate+0x72>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	889a      	ldrh	r2, [r3, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	88db      	ldrh	r3, [r3, #6]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d11e      	bne.n	800bd56 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe f89b 	bl	8009e58 <lock_fs>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d014      	beq.n	800bd52 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fd fef4 	bl	8009b1c <disk_status>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <validate+0x60>
				res = FR_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]
 800bd42:	e008      	b.n	800bd56 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe f89a 	bl	8009e84 <unlock_fs>
 800bd50:	e001      	b.n	800bd56 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bd52:	230f      	movs	r3, #15
 800bd54:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d102      	bne.n	800bd62 <validate+0x7e>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	e000      	b.n	800bd64 <validate+0x80>
 800bd62:	2300      	movs	r3, #0
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	6013      	str	r3, [r2, #0]
	return res;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bd86:	f107 0310 	add.w	r3, r7, #16
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff fcbb 	bl	800b706 <get_ldnumber>
 800bd90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	da01      	bge.n	800bd9c <f_mount+0x28>
 800bd98:	230b      	movs	r3, #11
 800bd9a:	e048      	b.n	800be2e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd9c:	4a26      	ldr	r2, [pc, #152]	; (800be38 <f_mount+0xc4>)
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00f      	beq.n	800bdcc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bdac:	69b8      	ldr	r0, [r7, #24]
 800bdae:	f7fe f991 	bl	800a0d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f001 f8ee 	bl	800cf98 <ff_del_syncobj>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <f_mount+0x52>
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e033      	b.n	800be2e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00f      	beq.n	800bdf2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3310      	adds	r3, #16
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f001 f8ba 	bl	800cf5c <ff_cre_syncobj>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <f_mount+0x7e>
 800bdee:	2302      	movs	r3, #2
 800bdf0:	e01d      	b.n	800be2e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	4910      	ldr	r1, [pc, #64]	; (800be38 <f_mount+0xc4>)
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d002      	beq.n	800be08 <f_mount+0x94>
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d001      	beq.n	800be0c <f_mount+0x98>
 800be08:	2300      	movs	r3, #0
 800be0a:	e010      	b.n	800be2e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be0c:	f107 010c 	add.w	r1, r7, #12
 800be10:	f107 0308 	add.w	r3, r7, #8
 800be14:	2200      	movs	r2, #0
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fd10 	bl	800b83c <find_volume>
 800be1c:	4603      	mov	r3, r0
 800be1e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	7dfa      	ldrb	r2, [r7, #23]
 800be24:	4611      	mov	r1, r2
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f82c 	bl	8009e84 <unlock_fs>
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3720      	adds	r7, #32
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000028c 	.word	0x2000028c

0800be3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800be42:	af00      	add	r7, sp, #0
 800be44:	f107 030c 	add.w	r3, r7, #12
 800be48:	6018      	str	r0, [r3, #0]
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	6019      	str	r1, [r3, #0]
 800be50:	1dfb      	adds	r3, r7, #7
 800be52:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <f_open+0x26>
 800be5e:	2309      	movs	r3, #9
 800be60:	e239      	b.n	800c2d6 <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800be62:	1dfb      	adds	r3, r7, #7
 800be64:	1dfa      	adds	r2, r7, #7
 800be66:	7812      	ldrb	r2, [r2, #0]
 800be68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800be6c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800be6e:	1dfb      	adds	r3, r7, #7
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800be76:	f107 0308 	add.w	r3, r7, #8
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff fcde 	bl	800b83c <find_volume>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800be86:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 8210 	bne.w	800c2b0 <f_open+0x474>
		dj.obj.fs = fs;
 800be90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be94:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800be98:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800be9c:	f107 0214 	add.w	r2, r7, #20
 800bea0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800bea2:	f107 0308 	add.w	r3, r7, #8
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800beac:	4611      	mov	r1, r2
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fbb8 	bl	800b624 <follow_path>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800beba:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d11b      	bne.n	800befa <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bec2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800bec6:	b25b      	sxtb	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da03      	bge.n	800bed4 <f_open+0x98>
				res = FR_INVALID_NAME;
 800becc:	2306      	movs	r3, #6
 800bece:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bed2:	e012      	b.n	800befa <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bed4:	1dfb      	adds	r3, r7, #7
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	f023 0301 	bic.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bf14      	ite	ne
 800bee0:	2301      	movne	r3, #1
 800bee2:	2300      	moveq	r3, #0
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	461a      	mov	r2, r3
 800bee8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800beec:	4611      	mov	r1, r2
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fd ffe4 	bl	8009ebc <chk_lock>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800befa:	1dfb      	adds	r3, r7, #7
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	f003 031c 	and.w	r3, r3, #28
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 809b 	beq.w	800c03e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800bf08:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d019      	beq.n	800bf44 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf10:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf14:	2b04      	cmp	r3, #4
 800bf16:	d10e      	bne.n	800bf36 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf18:	f7fe f82c 	bl	8009f74 <enq_lock>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d006      	beq.n	800bf30 <f_open+0xf4>
 800bf22:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff f8cc 	bl	800b0c4 <dir_register>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	e000      	b.n	800bf32 <f_open+0xf6>
 800bf30:	2312      	movs	r3, #18
 800bf32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf36:	1dfb      	adds	r3, r7, #7
 800bf38:	1dfa      	adds	r2, r7, #7
 800bf3a:	7812      	ldrb	r2, [r2, #0]
 800bf3c:	f042 0208 	orr.w	r2, r2, #8
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	e012      	b.n	800bf6a <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf44:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800bf48:	f003 0311 	and.w	r3, r3, #17
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <f_open+0x11c>
					res = FR_DENIED;
 800bf50:	2307      	movs	r3, #7
 800bf52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bf56:	e008      	b.n	800bf6a <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf58:	1dfb      	adds	r3, r7, #7
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <f_open+0x12e>
 800bf64:	2308      	movs	r3, #8
 800bf66:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf6a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 8082 	bne.w	800c078 <f_open+0x23c>
 800bf74:	1dfb      	adds	r3, r7, #7
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	f003 0308 	and.w	r3, r3, #8
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d07b      	beq.n	800c078 <f_open+0x23c>
				dw = GET_FATTIME();
 800bf80:	f7fd fb6a 	bl	8009658 <get_fattime>
 800bf84:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bf88:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bf8c:	330e      	adds	r3, #14
 800bf8e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fd feb6 	bl	8009d04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bf98:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bf9c:	3316      	adds	r3, #22
 800bf9e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fd feae 	bl	8009d04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfa8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bfac:	330b      	adds	r3, #11
 800bfae:	2220      	movs	r2, #32
 800bfb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bfb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfb6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800bfba:	4611      	mov	r1, r2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fdf8 	bl	800abb2 <ld_clust>
 800bfc2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfca:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800bfce:	2200      	movs	r2, #0
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe fe0d 	bl	800abf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfd6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bfda:	331c      	adds	r3, #28
 800bfdc:	2100      	movs	r1, #0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fd fe90 	bl	8009d04 <st_dword>
					fs->wflag = 1;
 800bfe4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bfe8:	2201      	movs	r2, #1
 800bfea:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bfec:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d041      	beq.n	800c078 <f_open+0x23c>
						dw = fs->winsect;
 800bff4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffa:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800bffe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c002:	2200      	movs	r2, #0
 800c004:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fb1a 	bl	800a642 <remove_chain>
 800c00e:	4603      	mov	r3, r0
 800c010:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800c014:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d12d      	bne.n	800c078 <f_open+0x23c>
							res = move_window(fs, dw);
 800c01c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c020:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe f8bd 	bl	800a1a4 <move_window>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c030:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c034:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800c038:	3a01      	subs	r2, #1
 800c03a:	615a      	str	r2, [r3, #20]
 800c03c:	e01c      	b.n	800c078 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c03e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c042:	2b00      	cmp	r3, #0
 800c044:	d118      	bne.n	800c078 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c046:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c04a:	f003 0310 	and.w	r3, r3, #16
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <f_open+0x21e>
					res = FR_NO_FILE;
 800c052:	2304      	movs	r3, #4
 800c054:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c058:	e00e      	b.n	800c078 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c05a:	1dfb      	adds	r3, r7, #7
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d008      	beq.n	800c078 <f_open+0x23c>
 800c066:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <f_open+0x23c>
						res = FR_DENIED;
 800c072:	2307      	movs	r3, #7
 800c074:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800c078:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d136      	bne.n	800c0ee <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c080:	1dfb      	adds	r3, r7, #7
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	f003 0308 	and.w	r3, r3, #8
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d005      	beq.n	800c098 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800c08c:	1dfb      	adds	r3, r7, #7
 800c08e:	1dfa      	adds	r2, r7, #7
 800c090:	7812      	ldrb	r2, [r2, #0]
 800c092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c096:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c098:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c09c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c09e:	f107 030c 	add.w	r3, r7, #12
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c0a6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c0aa:	f107 030c 	add.w	r3, r7, #12
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0b2:	1dfb      	adds	r3, r7, #7
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	f023 0301 	bic.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bf14      	ite	ne
 800c0be:	2301      	movne	r3, #1
 800c0c0:	2300      	moveq	r3, #0
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fd ff73 	bl	8009fb8 <inc_lock>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	f107 030c 	add.w	r3, r7, #12
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0dc:	f107 030c 	add.w	r3, r7, #12
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d102      	bne.n	800c0ee <f_open+0x2b2>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0ee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f040 80dc 	bne.w	800c2b0 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c0f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c0fc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c100:	4611      	mov	r1, r2
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe fd55 	bl	800abb2 <ld_clust>
 800c108:	4602      	mov	r2, r0
 800c10a:	f107 030c 	add.w	r3, r7, #12
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c112:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c116:	331c      	adds	r3, #28
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd fdb5 	bl	8009c88 <ld_dword>
 800c11e:	4602      	mov	r2, r0
 800c120:	f107 030c 	add.w	r3, r7, #12
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c128:	f107 030c 	add.w	r3, r7, #12
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2200      	movs	r2, #0
 800c130:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c132:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c136:	f107 030c 	add.w	r3, r7, #12
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c13e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c142:	88da      	ldrh	r2, [r3, #6]
 800c144:	f107 030c 	add.w	r3, r7, #12
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c14c:	f107 030c 	add.w	r3, r7, #12
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	1dfa      	adds	r2, r7, #7
 800c154:	7812      	ldrb	r2, [r2, #0]
 800c156:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c158:	f107 030c 	add.w	r3, r7, #12
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2200      	movs	r2, #0
 800c160:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c162:	f107 030c 	add.w	r3, r7, #12
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2200      	movs	r2, #0
 800c16a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c16c:	f107 030c 	add.w	r3, r7, #12
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c176:	f107 030c 	add.w	r3, r7, #12
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3330      	adds	r3, #48	; 0x30
 800c17e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c182:	2100      	movs	r1, #0
 800c184:	4618      	mov	r0, r3
 800c186:	f7fd fe0a 	bl	8009d9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c18a:	1dfb      	adds	r3, r7, #7
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	f003 0320 	and.w	r3, r3, #32
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 808c 	beq.w	800c2b0 <f_open+0x474>
 800c198:	f107 030c 	add.w	r3, r7, #12
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 8085 	beq.w	800c2b0 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c1a6:	f107 030c 	add.w	r3, r7, #12
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	f107 030c 	add.w	r3, r7, #12
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c1b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c1ba:	895b      	ldrh	r3, [r3, #10]
 800c1bc:	025b      	lsls	r3, r3, #9
 800c1be:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c1c2:	f107 030c 	add.w	r3, r7, #12
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1ce:	f107 030c 	add.w	r3, r7, #12
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c1da:	e01f      	b.n	800c21c <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800c1dc:	f107 030c 	add.w	r3, r7, #12
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe f897 	bl	800a31a <get_fat>
 800c1ec:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800c1f0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d802      	bhi.n	800c1fe <f_open+0x3c2>
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c1fe:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c206:	d102      	bne.n	800c20e <f_open+0x3d2>
 800c208:	2301      	movs	r3, #1
 800c20a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c20e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c212:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c21c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c220:	2b00      	cmp	r3, #0
 800c222:	d105      	bne.n	800c230 <f_open+0x3f4>
 800c224:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c228:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d8d5      	bhi.n	800c1dc <f_open+0x3a0>
				}
				fp->clust = clst;
 800c230:	f107 030c 	add.w	r3, r7, #12
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800c23a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c23c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c240:	2b00      	cmp	r3, #0
 800c242:	d135      	bne.n	800c2b0 <f_open+0x474>
 800c244:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d02f      	beq.n	800c2b0 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c250:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c254:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c258:	4618      	mov	r0, r3
 800c25a:	f7fe f83f 	bl	800a2dc <clust2sect>
 800c25e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800c262:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d103      	bne.n	800c272 <f_open+0x436>
						res = FR_INT_ERR;
 800c26a:	2302      	movs	r3, #2
 800c26c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c270:	e01e      	b.n	800c2b0 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c272:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c276:	0a5a      	lsrs	r2, r3, #9
 800c278:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c27c:	441a      	add	r2, r3
 800c27e:	f107 030c 	add.w	r3, r7, #12
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c286:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c28a:	7858      	ldrb	r0, [r3, #1]
 800c28c:	f107 030c 	add.w	r3, r7, #12
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6a1a      	ldr	r2, [r3, #32]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	f7fd fc7c 	bl	8009b9c <disk_read>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <f_open+0x474>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c2b0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d004      	beq.n	800c2c2 <f_open+0x486>
 800c2b8:	f107 030c 	add.w	r3, r7, #12
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c2c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2c6:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fd fdd9 	bl	8009e84 <unlock_fs>
 800c2d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08c      	sub	sp, #48	; 0x30
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f107 0210 	add.w	r2, r7, #16
 800c2fe:	4611      	mov	r1, r2
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff fcef 	bl	800bce4 <validate>
 800c306:	4603      	mov	r3, r0
 800c308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c30c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c310:	2b00      	cmp	r3, #0
 800c312:	d107      	bne.n	800c324 <f_write+0x44>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	7d5b      	ldrb	r3, [r3, #21]
 800c318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c31c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c320:	2b00      	cmp	r3, #0
 800c322:	d009      	beq.n	800c338 <f_write+0x58>
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c32a:	4611      	mov	r1, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd fda9 	bl	8009e84 <unlock_fs>
 800c332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c336:	e173      	b.n	800c620 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	7d1b      	ldrb	r3, [r3, #20]
 800c33c:	f003 0302 	and.w	r3, r3, #2
 800c340:	2b00      	cmp	r3, #0
 800c342:	d106      	bne.n	800c352 <f_write+0x72>
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	2107      	movs	r1, #7
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fd fd9b 	bl	8009e84 <unlock_fs>
 800c34e:	2307      	movs	r3, #7
 800c350:	e166      	b.n	800c620 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	699a      	ldr	r2, [r3, #24]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	441a      	add	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	429a      	cmp	r2, r3
 800c360:	f080 814b 	bcs.w	800c5fa <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	43db      	mvns	r3, r3
 800c36a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c36c:	e145      	b.n	800c5fa <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c376:	2b00      	cmp	r3, #0
 800c378:	f040 8101 	bne.w	800c57e <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	0a5b      	lsrs	r3, r3, #9
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	8952      	ldrh	r2, [r2, #10]
 800c386:	3a01      	subs	r2, #1
 800c388:	4013      	ands	r3, r2
 800c38a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d14d      	bne.n	800c42e <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10c      	bne.n	800c3b4 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d11a      	bne.n	800c3dc <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fe f9ae 	bl	800a70c <create_chain>
 800c3b0:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3b2:	e013      	b.n	800c3dc <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d007      	beq.n	800c3cc <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f7fe fa3a 	bl	800a83c <clmt_clust>
 800c3c8:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3ca:	e007      	b.n	800c3dc <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	f7fe f999 	bl	800a70c <create_chain>
 800c3da:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 8110 	beq.w	800c604 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d109      	bne.n	800c3fe <f_write+0x11e>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	755a      	strb	r2, [r3, #21]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	2102      	movs	r1, #2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fd fd45 	bl	8009e84 <unlock_fs>
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	e110      	b.n	800c620 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c404:	d109      	bne.n	800c41a <f_write+0x13a>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2201      	movs	r2, #1
 800c40a:	755a      	strb	r2, [r3, #21]
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2101      	movs	r1, #1
 800c410:	4618      	mov	r0, r3
 800c412:	f7fd fd37 	bl	8009e84 <unlock_fs>
 800c416:	2301      	movs	r3, #1
 800c418:	e102      	b.n	800c620 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c41e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <f_write+0x14e>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	7d1b      	ldrb	r3, [r3, #20]
 800c432:	b25b      	sxtb	r3, r3
 800c434:	2b00      	cmp	r3, #0
 800c436:	da1d      	bge.n	800c474 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	7858      	ldrb	r0, [r3, #1]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6a1a      	ldr	r2, [r3, #32]
 800c446:	2301      	movs	r3, #1
 800c448:	f7fd fbc8 	bl	8009bdc <disk_write>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d009      	beq.n	800c466 <f_write+0x186>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2201      	movs	r2, #1
 800c456:	755a      	strb	r2, [r3, #21]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2101      	movs	r1, #1
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fd fd11 	bl	8009e84 <unlock_fs>
 800c462:	2301      	movs	r3, #1
 800c464:	e0dc      	b.n	800c620 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	7d1b      	ldrb	r3, [r3, #20]
 800c46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	4619      	mov	r1, r3
 800c47c:	4610      	mov	r0, r2
 800c47e:	f7fd ff2d 	bl	800a2dc <clust2sect>
 800c482:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <f_write+0x1be>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2202      	movs	r2, #2
 800c48e:	755a      	strb	r2, [r3, #21]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2102      	movs	r1, #2
 800c494:	4618      	mov	r0, r3
 800c496:	f7fd fcf5 	bl	8009e84 <unlock_fs>
 800c49a:	2302      	movs	r3, #2
 800c49c:	e0c0      	b.n	800c620 <f_write+0x340>
			sect += csect;
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	0a5b      	lsrs	r3, r3, #9
 800c4aa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d041      	beq.n	800c536 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4b2:	69ba      	ldr	r2, [r7, #24]
 800c4b4:	6a3b      	ldr	r3, [r7, #32]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	693a      	ldr	r2, [r7, #16]
 800c4ba:	8952      	ldrh	r2, [r2, #10]
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d905      	bls.n	800c4cc <f_write+0x1ec>
					cc = fs->csize - csect;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	895b      	ldrh	r3, [r3, #10]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	7858      	ldrb	r0, [r3, #1]
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	69f9      	ldr	r1, [r7, #28]
 800c4d6:	f7fd fb81 	bl	8009bdc <disk_write>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d009      	beq.n	800c4f4 <f_write+0x214>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	755a      	strb	r2, [r3, #21]
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd fcca 	bl	8009e84 <unlock_fs>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e095      	b.n	800c620 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6a1a      	ldr	r2, [r3, #32]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	6a3a      	ldr	r2, [r7, #32]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d915      	bls.n	800c52e <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6a1a      	ldr	r2, [r3, #32]
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	025b      	lsls	r3, r3, #9
 800c512:	69fa      	ldr	r2, [r7, #28]
 800c514:	4413      	add	r3, r2
 800c516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c51a:	4619      	mov	r1, r3
 800c51c:	f7fd fc1e 	bl	8009d5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	7d1b      	ldrb	r3, [r3, #20]
 800c524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c52e:	6a3b      	ldr	r3, [r7, #32]
 800c530:	025b      	lsls	r3, r3, #9
 800c532:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c534:	e044      	b.n	800c5c0 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d01b      	beq.n	800c578 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	699a      	ldr	r2, [r3, #24]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c548:	429a      	cmp	r2, r3
 800c54a:	d215      	bcs.n	800c578 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	7858      	ldrb	r0, [r3, #1]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c556:	2301      	movs	r3, #1
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	f7fd fb1f 	bl	8009b9c <disk_read>
 800c55e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c560:	2b00      	cmp	r3, #0
 800c562:	d009      	beq.n	800c578 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2201      	movs	r2, #1
 800c568:	755a      	strb	r2, [r3, #21]
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2101      	movs	r1, #1
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fd fc88 	bl	8009e84 <unlock_fs>
 800c574:	2301      	movs	r3, #1
 800c576:	e053      	b.n	800c620 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c586:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	d901      	bls.n	800c598 <f_write+0x2b8>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a6:	4413      	add	r3, r2
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5aa:	69f9      	ldr	r1, [r7, #28]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd fbd5 	bl	8009d5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	7d1b      	ldrb	r3, [r3, #20]
 800c5b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c5c0:	69fa      	ldr	r2, [r7, #28]
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c4:	4413      	add	r3, r2
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	699a      	ldr	r2, [r3, #24]
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	441a      	add	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	619a      	str	r2, [r3, #24]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	bf38      	it	cc
 800c5e0:	461a      	movcc	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	60da      	str	r2, [r3, #12]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	441a      	add	r2, r3
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f47f aeb6 	bne.w	800c36e <f_write+0x8e>
 800c602:	e000      	b.n	800c606 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c604:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	7d1b      	ldrb	r3, [r3, #20]
 800c60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fd fc33 	bl	8009e84 <unlock_fs>
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3730      	adds	r7, #48	; 0x30
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f107 0208 	add.w	r2, r7, #8
 800c636:	4611      	mov	r1, r2
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff fb53 	bl	800bce4 <validate>
 800c63e:	4603      	mov	r3, r0
 800c640:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d16d      	bne.n	800c724 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7d1b      	ldrb	r3, [r3, #20]
 800c64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c650:	2b00      	cmp	r3, #0
 800c652:	d067      	beq.n	800c724 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7d1b      	ldrb	r3, [r3, #20]
 800c658:	b25b      	sxtb	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	da1a      	bge.n	800c694 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	7858      	ldrb	r0, [r3, #1]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a1a      	ldr	r2, [r3, #32]
 800c66c:	2301      	movs	r3, #1
 800c66e:	f7fd fab5 	bl	8009bdc <disk_write>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d006      	beq.n	800c686 <f_sync+0x5e>
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2101      	movs	r1, #1
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fd fc01 	bl	8009e84 <unlock_fs>
 800c682:	2301      	movs	r3, #1
 800c684:	e055      	b.n	800c732 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	7d1b      	ldrb	r3, [r3, #20]
 800c68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c694:	f7fc ffe0 	bl	8009658 <get_fattime>
 800c698:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	f7fd fd7e 	bl	800a1a4 <move_window>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d138      	bne.n	800c724 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	330b      	adds	r3, #11
 800c6bc:	781a      	ldrb	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	330b      	adds	r3, #11
 800c6c2:	f042 0220 	orr.w	r2, r2, #32
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	68f9      	ldr	r1, [r7, #12]
 800c6d6:	f7fe fa8b 	bl	800abf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f103 021c 	add.w	r2, r3, #28
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	f7fd fb0c 	bl	8009d04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3316      	adds	r3, #22
 800c6f0:	6939      	ldr	r1, [r7, #16]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fd fb06 	bl	8009d04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	3312      	adds	r3, #18
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fd fae5 	bl	8009cce <st_word>
					fs->wflag = 1;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	2201      	movs	r2, #1
 800c708:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fd fd77 	bl	800a200 <sync_fs>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7d1b      	ldrb	r3, [r3, #20]
 800c71a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	7dfa      	ldrb	r2, [r7, #23]
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fd fbaa 	bl	8009e84 <unlock_fs>
 800c730:	7dfb      	ldrb	r3, [r7, #23]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b090      	sub	sp, #64	; 0x40
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f107 0208 	add.w	r2, r7, #8
 800c74a:	4611      	mov	r1, r2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff fac9 	bl	800bce4 <validate>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c758:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d103      	bne.n	800c768 <f_lseek+0x2e>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7d5b      	ldrb	r3, [r3, #21]
 800c764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d009      	beq.n	800c784 <f_lseek+0x4a>
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c776:	4611      	mov	r1, r2
 800c778:	4618      	mov	r0, r3
 800c77a:	f7fd fb83 	bl	8009e84 <unlock_fs>
 800c77e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c782:	e229      	b.n	800cbd8 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 80ea 	beq.w	800c962 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d164      	bne.n	800c860 <f_lseek+0x126>
			tbl = fp->cltbl;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	627a      	str	r2, [r7, #36]	; 0x24
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	617b      	str	r3, [r7, #20]
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d044      	beq.n	800c840 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	3302      	adds	r3, #2
 800c7c2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fd fda1 	bl	800a31a <get_fat>
 800c7d8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d809      	bhi.n	800c7f4 <f_lseek+0xba>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	755a      	strb	r2, [r3, #21]
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2102      	movs	r1, #2
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fd fb4a 	bl	8009e84 <unlock_fs>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e1f1      	b.n	800cbd8 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fa:	d109      	bne.n	800c810 <f_lseek+0xd6>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	755a      	strb	r2, [r3, #21]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2101      	movs	r1, #1
 800c806:	4618      	mov	r0, r3
 800c808:	f7fd fb3c 	bl	8009e84 <unlock_fs>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e1e3      	b.n	800cbd8 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c816:	429a      	cmp	r2, r3
 800c818:	d0d4      	beq.n	800c7c4 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d809      	bhi.n	800c836 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	1d1a      	adds	r2, r3, #4
 800c826:	627a      	str	r2, [r7, #36]	; 0x24
 800c828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	1d1a      	adds	r2, r3, #4
 800c830:	627a      	str	r2, [r7, #36]	; 0x24
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d3ba      	bcc.n	800c7b6 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c846:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d803      	bhi.n	800c858 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	e1b6      	b.n	800cbc6 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c858:	2311      	movs	r3, #17
 800c85a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c85e:	e1b2      	b.n	800cbc6 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d902      	bls.n	800c870 <f_lseek+0x136>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 81a4 	beq.w	800cbc6 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	3b01      	subs	r3, #1
 800c882:	4619      	mov	r1, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7fd ffd9 	bl	800a83c <clmt_clust>
 800c88a:	4602      	mov	r2, r0
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	4619      	mov	r1, r3
 800c898:	4610      	mov	r0, r2
 800c89a:	f7fd fd1f 	bl	800a2dc <clust2sect>
 800c89e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d109      	bne.n	800c8ba <f_lseek+0x180>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	755a      	strb	r2, [r3, #21]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2102      	movs	r1, #2
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fd fae7 	bl	8009e84 <unlock_fs>
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	e18e      	b.n	800cbd8 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	0a5b      	lsrs	r3, r3, #9
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	8952      	ldrh	r2, [r2, #10]
 800c8c4:	3a01      	subs	r2, #1
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 8175 	beq.w	800cbc6 <f_lseek+0x48c>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	f000 816f 	beq.w	800cbc6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7d1b      	ldrb	r3, [r3, #20]
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	da1d      	bge.n	800c92e <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	7858      	ldrb	r0, [r3, #1]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a1a      	ldr	r2, [r3, #32]
 800c900:	2301      	movs	r3, #1
 800c902:	f7fd f96b 	bl	8009bdc <disk_write>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d009      	beq.n	800c920 <f_lseek+0x1e6>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	755a      	strb	r2, [r3, #21]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2101      	movs	r1, #1
 800c916:	4618      	mov	r0, r3
 800c918:	f7fd fab4 	bl	8009e84 <unlock_fs>
 800c91c:	2301      	movs	r3, #1
 800c91e:	e15b      	b.n	800cbd8 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	7d1b      	ldrb	r3, [r3, #20]
 800c924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	7858      	ldrb	r0, [r3, #1]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c938:	2301      	movs	r3, #1
 800c93a:	69ba      	ldr	r2, [r7, #24]
 800c93c:	f7fd f92e 	bl	8009b9c <disk_read>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d009      	beq.n	800c95a <f_lseek+0x220>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	755a      	strb	r2, [r3, #21]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2101      	movs	r1, #1
 800c950:	4618      	mov	r0, r3
 800c952:	f7fd fa97 	bl	8009e84 <unlock_fs>
 800c956:	2301      	movs	r3, #1
 800c958:	e13e      	b.n	800cbd8 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	621a      	str	r2, [r3, #32]
 800c960:	e131      	b.n	800cbc6 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d908      	bls.n	800c97e <f_lseek+0x244>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	7d1b      	ldrb	r3, [r3, #20]
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	637b      	str	r3, [r7, #52]	; 0x34
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c98c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 80c0 	beq.w	800cb16 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	895b      	ldrh	r3, [r3, #10]
 800c99a:	025b      	lsls	r3, r3, #9
 800c99c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d01b      	beq.n	800c9dc <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	1e5a      	subs	r2, r3, #1
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	1e59      	subs	r1, r3, #1
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d30f      	bcc.n	800c9dc <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	1e5a      	subs	r2, r3, #1
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	425b      	negs	r3, r3
 800c9c4:	401a      	ands	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	69db      	ldr	r3, [r3, #28]
 800c9d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9da:	e02c      	b.n	800ca36 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d123      	bne.n	800ca30 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fd fe8d 	bl	800a70c <create_chain>
 800c9f2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d109      	bne.n	800ca0e <f_lseek+0x2d4>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	755a      	strb	r2, [r3, #21]
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2102      	movs	r1, #2
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fd fa3d 	bl	8009e84 <unlock_fs>
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	e0e4      	b.n	800cbd8 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca14:	d109      	bne.n	800ca2a <f_lseek+0x2f0>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	755a      	strb	r2, [r3, #21]
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2101      	movs	r1, #1
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fd fa2f 	bl	8009e84 <unlock_fs>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e0d6      	b.n	800cbd8 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca2e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca34:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d06c      	beq.n	800cb16 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800ca3c:	e044      	b.n	800cac8 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	1ad3      	subs	r3, r2, r3
 800ca44:	603b      	str	r3, [r7, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	699a      	ldr	r2, [r3, #24]
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	441a      	add	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00b      	beq.n	800ca76 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fd fe52 	bl	800a70c <create_chain>
 800ca68:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d108      	bne.n	800ca82 <f_lseek+0x348>
							ofs = 0; break;
 800ca70:	2300      	movs	r3, #0
 800ca72:	603b      	str	r3, [r7, #0]
 800ca74:	e02c      	b.n	800cad0 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fd fc4d 	bl	800a31a <get_fat>
 800ca80:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca88:	d109      	bne.n	800ca9e <f_lseek+0x364>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	755a      	strb	r2, [r3, #21]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	2101      	movs	r1, #1
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fd f9f5 	bl	8009e84 <unlock_fs>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e09c      	b.n	800cbd8 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d904      	bls.n	800caae <f_lseek+0x374>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caaa:	429a      	cmp	r2, r3
 800caac:	d309      	bcc.n	800cac2 <f_lseek+0x388>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2202      	movs	r2, #2
 800cab2:	755a      	strb	r2, [r3, #21]
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	2102      	movs	r1, #2
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fd f9e3 	bl	8009e84 <unlock_fs>
 800cabe:	2302      	movs	r3, #2
 800cac0:	e08a      	b.n	800cbd8 <f_lseek+0x49e>
					fp->clust = clst;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cac6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d8b6      	bhi.n	800ca3e <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	699a      	ldr	r2, [r3, #24]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	441a      	add	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d017      	beq.n	800cb16 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd fbf6 	bl	800a2dc <clust2sect>
 800caf0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800caf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d109      	bne.n	800cb0c <f_lseek+0x3d2>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2202      	movs	r2, #2
 800cafc:	755a      	strb	r2, [r3, #21]
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2102      	movs	r1, #2
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fd f9be 	bl	8009e84 <unlock_fs>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e065      	b.n	800cbd8 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	0a5b      	lsrs	r3, r3, #9
 800cb10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb12:	4413      	add	r3, r2
 800cb14:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d90a      	bls.n	800cb38 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	699a      	ldr	r2, [r3, #24]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	7d1b      	ldrb	r3, [r3, #20]
 800cb2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d040      	beq.n	800cbc6 <f_lseek+0x48c>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d03b      	beq.n	800cbc6 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7d1b      	ldrb	r3, [r3, #20]
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	da1d      	bge.n	800cb94 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	7858      	ldrb	r0, [r3, #1]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1a      	ldr	r2, [r3, #32]
 800cb66:	2301      	movs	r3, #1
 800cb68:	f7fd f838 	bl	8009bdc <disk_write>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d009      	beq.n	800cb86 <f_lseek+0x44c>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2201      	movs	r2, #1
 800cb76:	755a      	strb	r2, [r3, #21]
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fd f981 	bl	8009e84 <unlock_fs>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e028      	b.n	800cbd8 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	7d1b      	ldrb	r3, [r3, #20]
 800cb8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	7858      	ldrb	r0, [r3, #1]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb9e:	2301      	movs	r3, #1
 800cba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cba2:	f7fc fffb 	bl	8009b9c <disk_read>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d009      	beq.n	800cbc0 <f_lseek+0x486>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	755a      	strb	r2, [r3, #21]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fd f964 	bl	8009e84 <unlock_fs>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e00b      	b.n	800cbd8 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbc4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cbcc:	4611      	mov	r1, r2
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd f958 	bl	8009e84 <unlock_fs>
 800cbd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3740      	adds	r7, #64	; 0x40
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800cbec:	78fb      	ldrb	r3, [r7, #3]
 800cbee:	2b0a      	cmp	r3, #10
 800cbf0:	d103      	bne.n	800cbfa <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cbf2:	210d      	movs	r1, #13
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fff3 	bl	800cbe0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	db25      	blt.n	800cc52 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	60fa      	str	r2, [r7, #12]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	4413      	add	r3, r2
 800cc10:	78fa      	ldrb	r2, [r7, #3]
 800cc12:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b3c      	cmp	r3, #60	; 0x3c
 800cc18:	dd12      	ble.n	800cc40 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f103 010c 	add.w	r1, r3, #12
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	f107 0308 	add.w	r3, r7, #8
 800cc2a:	f7ff fb59 	bl	800c2e0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d101      	bne.n	800cc3a <putc_bfd+0x5a>
 800cc36:	2300      	movs	r3, #0
 800cc38:	e001      	b.n	800cc3e <putc_bfd+0x5e>
 800cc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	609a      	str	r2, [r3, #8]
 800cc50:	e000      	b.n	800cc54 <putc_bfd+0x74>
	if (i < 0) return;
 800cc52:	bf00      	nop
}
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	db16      	blt.n	800cc98 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6818      	ldr	r0, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f103 010c 	add.w	r1, r3, #12
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	f107 030c 	add.w	r3, r7, #12
 800cc7e:	f7ff fb2f 	bl	800c2e0 <f_write>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d107      	bne.n	800cc98 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d102      	bne.n	800cc98 <putc_flush+0x3e>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	e001      	b.n	800cc9c <putc_flush+0x42>
	return EOF;
 800cc98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	605a      	str	r2, [r3, #4]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	609a      	str	r2, [r3, #8]
}
 800ccc2:	bf00      	nop
 800ccc4:	370c      	adds	r7, #12
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b096      	sub	sp, #88	; 0x58
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ccd8:	f107 030c 	add.w	r3, r7, #12
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff ffe0 	bl	800cca4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800cce4:	e009      	b.n	800ccfa <f_puts+0x2c>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	781a      	ldrb	r2, [r3, #0]
 800ccee:	f107 030c 	add.w	r3, r7, #12
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff ff73 	bl	800cbe0 <putc_bfd>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1f1      	bne.n	800cce6 <f_puts+0x18>
	return putc_flush(&pb);
 800cd02:	f107 030c 	add.w	r3, r7, #12
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff ffa7 	bl	800cc5a <putc_flush>
 800cd0c:	4603      	mov	r3, r0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3758      	adds	r7, #88	; 0x58
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cd26:	2301      	movs	r3, #1
 800cd28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cd2e:	4b1f      	ldr	r3, [pc, #124]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd30:	7a5b      	ldrb	r3, [r3, #9]
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d131      	bne.n	800cd9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cd38:	4b1c      	ldr	r3, [pc, #112]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd3a:	7a5b      	ldrb	r3, [r3, #9]
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	461a      	mov	r2, r3
 800cd40:	4b1a      	ldr	r3, [pc, #104]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd42:	2100      	movs	r1, #0
 800cd44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cd46:	4b19      	ldr	r3, [pc, #100]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd48:	7a5b      	ldrb	r3, [r3, #9]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	4a17      	ldr	r2, [pc, #92]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cd56:	4b15      	ldr	r3, [pc, #84]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd58:	7a5b      	ldrb	r3, [r3, #9]
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4b13      	ldr	r3, [pc, #76]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd60:	4413      	add	r3, r2
 800cd62:	79fa      	ldrb	r2, [r7, #7]
 800cd64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cd66:	4b11      	ldr	r3, [pc, #68]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd68:	7a5b      	ldrb	r3, [r3, #9]
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	b2d1      	uxtb	r1, r2
 800cd70:	4a0e      	ldr	r2, [pc, #56]	; (800cdac <FATFS_LinkDriverEx+0x94>)
 800cd72:	7251      	strb	r1, [r2, #9]
 800cd74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cd76:	7dbb      	ldrb	r3, [r7, #22]
 800cd78:	3330      	adds	r3, #48	; 0x30
 800cd7a:	b2da      	uxtb	r2, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	3301      	adds	r3, #1
 800cd84:	223a      	movs	r2, #58	; 0x3a
 800cd86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	3302      	adds	r3, #2
 800cd8c:	222f      	movs	r2, #47	; 0x2f
 800cd8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	3303      	adds	r3, #3
 800cd94:	2200      	movs	r2, #0
 800cd96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	371c      	adds	r7, #28
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	200002b4 	.word	0x200002b4

0800cdb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cdba:	2200      	movs	r2, #0
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff ffaa 	bl	800cd18 <FATFS_LinkDriverEx>
 800cdc4:	4603      	mov	r3, r0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	6039      	str	r1, [r7, #0]
 800cdda:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cddc:	88fb      	ldrh	r3, [r7, #6]
 800cdde:	2b7f      	cmp	r3, #127	; 0x7f
 800cde0:	d802      	bhi.n	800cde8 <ff_convert+0x18>
		c = chr;
 800cde2:	88fb      	ldrh	r3, [r7, #6]
 800cde4:	81fb      	strh	r3, [r7, #14]
 800cde6:	e025      	b.n	800ce34 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00b      	beq.n	800ce06 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	2bff      	cmp	r3, #255	; 0xff
 800cdf2:	d805      	bhi.n	800ce00 <ff_convert+0x30>
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	3b80      	subs	r3, #128	; 0x80
 800cdf8:	4a12      	ldr	r2, [pc, #72]	; (800ce44 <ff_convert+0x74>)
 800cdfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdfe:	e000      	b.n	800ce02 <ff_convert+0x32>
 800ce00:	2300      	movs	r3, #0
 800ce02:	81fb      	strh	r3, [r7, #14]
 800ce04:	e016      	b.n	800ce34 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ce06:	2300      	movs	r3, #0
 800ce08:	81fb      	strh	r3, [r7, #14]
 800ce0a:	e009      	b.n	800ce20 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ce0c:	89fb      	ldrh	r3, [r7, #14]
 800ce0e:	4a0d      	ldr	r2, [pc, #52]	; (800ce44 <ff_convert+0x74>)
 800ce10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce14:	88fa      	ldrh	r2, [r7, #6]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d006      	beq.n	800ce28 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ce1a:	89fb      	ldrh	r3, [r7, #14]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	81fb      	strh	r3, [r7, #14]
 800ce20:	89fb      	ldrh	r3, [r7, #14]
 800ce22:	2b7f      	cmp	r3, #127	; 0x7f
 800ce24:	d9f2      	bls.n	800ce0c <ff_convert+0x3c>
 800ce26:	e000      	b.n	800ce2a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ce28:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ce2a:	89fb      	ldrh	r3, [r7, #14]
 800ce2c:	3380      	adds	r3, #128	; 0x80
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ce34:	89fb      	ldrh	r3, [r7, #14]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	0801177c 	.word	0x0801177c

0800ce48 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ce52:	88fb      	ldrh	r3, [r7, #6]
 800ce54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce58:	d201      	bcs.n	800ce5e <ff_wtoupper+0x16>
 800ce5a:	4b3e      	ldr	r3, [pc, #248]	; (800cf54 <ff_wtoupper+0x10c>)
 800ce5c:	e000      	b.n	800ce60 <ff_wtoupper+0x18>
 800ce5e:	4b3e      	ldr	r3, [pc, #248]	; (800cf58 <ff_wtoupper+0x110>)
 800ce60:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	1c9a      	adds	r2, r3, #2
 800ce66:	617a      	str	r2, [r7, #20]
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ce6c:	8a7b      	ldrh	r3, [r7, #18]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d068      	beq.n	800cf44 <ff_wtoupper+0xfc>
 800ce72:	88fa      	ldrh	r2, [r7, #6]
 800ce74:	8a7b      	ldrh	r3, [r7, #18]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d364      	bcc.n	800cf44 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	1c9a      	adds	r2, r3, #2
 800ce7e:	617a      	str	r2, [r7, #20]
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	823b      	strh	r3, [r7, #16]
 800ce84:	8a3b      	ldrh	r3, [r7, #16]
 800ce86:	0a1b      	lsrs	r3, r3, #8
 800ce88:	81fb      	strh	r3, [r7, #14]
 800ce8a:	8a3b      	ldrh	r3, [r7, #16]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ce90:	88fa      	ldrh	r2, [r7, #6]
 800ce92:	8a79      	ldrh	r1, [r7, #18]
 800ce94:	8a3b      	ldrh	r3, [r7, #16]
 800ce96:	440b      	add	r3, r1
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	da49      	bge.n	800cf30 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ce9c:	89fb      	ldrh	r3, [r7, #14]
 800ce9e:	2b08      	cmp	r3, #8
 800cea0:	d84f      	bhi.n	800cf42 <ff_wtoupper+0xfa>
 800cea2:	a201      	add	r2, pc, #4	; (adr r2, 800cea8 <ff_wtoupper+0x60>)
 800cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea8:	0800cecd 	.word	0x0800cecd
 800ceac:	0800cedf 	.word	0x0800cedf
 800ceb0:	0800cef5 	.word	0x0800cef5
 800ceb4:	0800cefd 	.word	0x0800cefd
 800ceb8:	0800cf05 	.word	0x0800cf05
 800cebc:	0800cf0d 	.word	0x0800cf0d
 800cec0:	0800cf15 	.word	0x0800cf15
 800cec4:	0800cf1d 	.word	0x0800cf1d
 800cec8:	0800cf25 	.word	0x0800cf25
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cecc:	88fa      	ldrh	r2, [r7, #6]
 800cece:	8a7b      	ldrh	r3, [r7, #18]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	4413      	add	r3, r2
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	80fb      	strh	r3, [r7, #6]
 800cedc:	e027      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cede:	88fa      	ldrh	r2, [r7, #6]
 800cee0:	8a7b      	ldrh	r3, [r7, #18]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	88fa      	ldrh	r2, [r7, #6]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	80fb      	strh	r3, [r7, #6]
 800cef2:	e01c      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cef4:	88fb      	ldrh	r3, [r7, #6]
 800cef6:	3b10      	subs	r3, #16
 800cef8:	80fb      	strh	r3, [r7, #6]
 800cefa:	e018      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cefc:	88fb      	ldrh	r3, [r7, #6]
 800cefe:	3b20      	subs	r3, #32
 800cf00:	80fb      	strh	r3, [r7, #6]
 800cf02:	e014      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cf04:	88fb      	ldrh	r3, [r7, #6]
 800cf06:	3b30      	subs	r3, #48	; 0x30
 800cf08:	80fb      	strh	r3, [r7, #6]
 800cf0a:	e010      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
 800cf0e:	3b1a      	subs	r3, #26
 800cf10:	80fb      	strh	r3, [r7, #6]
 800cf12:	e00c      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cf14:	88fb      	ldrh	r3, [r7, #6]
 800cf16:	3308      	adds	r3, #8
 800cf18:	80fb      	strh	r3, [r7, #6]
 800cf1a:	e008      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cf1c:	88fb      	ldrh	r3, [r7, #6]
 800cf1e:	3b50      	subs	r3, #80	; 0x50
 800cf20:	80fb      	strh	r3, [r7, #6]
 800cf22:	e004      	b.n	800cf2e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cf24:	88fb      	ldrh	r3, [r7, #6]
 800cf26:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cf2a:	80fb      	strh	r3, [r7, #6]
 800cf2c:	bf00      	nop
			}
			break;
 800cf2e:	e008      	b.n	800cf42 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cf30:	89fb      	ldrh	r3, [r7, #14]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d195      	bne.n	800ce62 <ff_wtoupper+0x1a>
 800cf36:	8a3b      	ldrh	r3, [r7, #16]
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cf40:	e78f      	b.n	800ce62 <ff_wtoupper+0x1a>
			break;
 800cf42:	bf00      	nop
	}

	return chr;
 800cf44:	88fb      	ldrh	r3, [r7, #6]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	371c      	adds	r7, #28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	0801187c 	.word	0x0801187c
 800cf58:	08011a70 	.word	0x08011a70

0800cf5c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	4603      	mov	r3, r0
 800cf64:	6039      	str	r1, [r7, #0]
 800cf66:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800cf6c:	f107 0308 	add.w	r3, r7, #8
 800cf70:	2101      	movs	r1, #1
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 f8c4 	bl	800d100 <osSemaphoreCreate>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	bf14      	ite	ne
 800cf86:	2301      	movne	r3, #1
 800cf88:	2300      	moveq	r3, #0
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	60fb      	str	r3, [r7, #12]

    return ret;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f94f 	bl	800d244 <osSemaphoreDelete>
#endif
    return 1;
 800cfa6:	2301      	movs	r3, #1
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800cfbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f8bb 	bl	800d13c <osSemaphoreWait>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f8f8 	bl	800d1d8 <osSemaphoreRelease>
#endif
}
 800cfe8:	bf00      	nop
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	4603      	mov	r3, r0
 800cff8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cffa:	2300      	movs	r3, #0
 800cffc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d002:	2b84      	cmp	r3, #132	; 0x84
 800d004:	d005      	beq.n	800d012 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d006:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	4413      	add	r3, r2
 800d00e:	3303      	adds	r3, #3
 800d010:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d012:	68fb      	ldr	r3, [r7, #12]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d026:	f3ef 8305 	mrs	r3, IPSR
 800d02a:	607b      	str	r3, [r7, #4]
  return(result);
 800d02c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d02e:	2b00      	cmp	r3, #0
 800d030:	bf14      	ite	ne
 800d032:	2301      	movne	r3, #1
 800d034:	2300      	moveq	r3, #0
 800d036:	b2db      	uxtb	r3, r3
}
 800d038:	4618      	mov	r0, r3
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d048:	f001 fc70 	bl	800e92c <vTaskStartScheduler>
  
  return osOK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	bd80      	pop	{r7, pc}

0800d052 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d056:	f002 f89d 	bl	800f194 <xTaskGetSchedulerState>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d101      	bne.n	800d064 <osKernelRunning+0x12>
    return 0;
 800d060:	2300      	movs	r3, #0
 800d062:	e000      	b.n	800d066 <osKernelRunning+0x14>
  else
    return 1;
 800d064:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d066:	4618      	mov	r0, r3
 800d068:	bd80      	pop	{r7, pc}

0800d06a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d06e:	f7ff ffd7 	bl	800d020 <inHandlerMode>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d003      	beq.n	800d080 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d078:	f001 fd62 	bl	800eb40 <xTaskGetTickCountFromISR>
 800d07c:	4603      	mov	r3, r0
 800d07e:	e002      	b.n	800d086 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d080:	f001 fd4e 	bl	800eb20 <xTaskGetTickCount>
 800d084:	4603      	mov	r3, r0
  }
}
 800d086:	4618      	mov	r0, r3
 800d088:	bd80      	pop	{r7, pc}

0800d08a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d08a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d08c:	b087      	sub	sp, #28
 800d08e:	af02      	add	r7, sp, #8
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685c      	ldr	r4, [r3, #4]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0a0:	b29e      	uxth	r6, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff ffa1 	bl	800cff0 <makeFreeRtosPriority>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	f107 030c 	add.w	r3, r7, #12
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	9200      	str	r2, [sp, #0]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 f90e 	bl	800e2e0 <xTaskCreate>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d001      	beq.n	800d0ce <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e000      	b.n	800d0d0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <osDelay+0x16>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	e000      	b.n	800d0f0 <osDelay+0x18>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f001 fac5 	bl	800e680 <vTaskDelay>
  
  return osOK;
 800d0f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d110      	bne.n	800d132 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800d110:	2203      	movs	r2, #3
 800d112:	2100      	movs	r1, #0
 800d114:	2001      	movs	r0, #1
 800d116:	f000 fa8b 	bl	800d630 <xQueueGenericCreate>
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d005      	beq.n	800d12e <osSemaphoreCreate+0x2e>
 800d122:	2300      	movs	r3, #0
 800d124:	2200      	movs	r2, #0
 800d126:	2100      	movs	r1, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 fad7 	bl	800d6dc <xQueueGenericSend>
    return sema;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	e000      	b.n	800d134 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800d132:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d146:	2300      	movs	r3, #0
 800d148:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d150:	2380      	movs	r3, #128	; 0x80
 800d152:	e03a      	b.n	800d1ca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d154:	2300      	movs	r3, #0
 800d156:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15e:	d103      	bne.n	800d168 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	60fb      	str	r3, [r7, #12]
 800d166:	e009      	b.n	800d17c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d006      	beq.n	800d17c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <osSemaphoreWait+0x40>
      ticks = 1;
 800d178:	2301      	movs	r3, #1
 800d17a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d17c:	f7ff ff50 	bl	800d020 <inHandlerMode>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d017      	beq.n	800d1b6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d186:	f107 0308 	add.w	r3, r7, #8
 800d18a:	461a      	mov	r2, r3
 800d18c:	2100      	movs	r1, #0
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 feb6 	bl	800df00 <xQueueReceiveFromISR>
 800d194:	4603      	mov	r3, r0
 800d196:	2b01      	cmp	r3, #1
 800d198:	d001      	beq.n	800d19e <osSemaphoreWait+0x62>
      return osErrorOS;
 800d19a:	23ff      	movs	r3, #255	; 0xff
 800d19c:	e015      	b.n	800d1ca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d011      	beq.n	800d1c8 <osSemaphoreWait+0x8c>
 800d1a4:	4b0b      	ldr	r3, [pc, #44]	; (800d1d4 <osSemaphoreWait+0x98>)
 800d1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	e008      	b.n	800d1c8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d1b6:	68f9      	ldr	r1, [r7, #12]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fd95 	bl	800dce8 <xQueueSemaphoreTake>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d001      	beq.n	800d1c8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d1c4:	23ff      	movs	r3, #255	; 0xff
 800d1c6:	e000      	b.n	800d1ca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	e000ed04 	.word	0xe000ed04

0800d1d8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d1e8:	f7ff ff1a 	bl	800d020 <inHandlerMode>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d016      	beq.n	800d220 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d1f2:	f107 0308 	add.w	r3, r7, #8
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fc08 	bl	800da0e <xQueueGiveFromISR>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b01      	cmp	r3, #1
 800d202:	d001      	beq.n	800d208 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d204:	23ff      	movs	r3, #255	; 0xff
 800d206:	e017      	b.n	800d238 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d013      	beq.n	800d236 <osSemaphoreRelease+0x5e>
 800d20e:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <osSemaphoreRelease+0x68>)
 800d210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	e00a      	b.n	800d236 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d220:	2300      	movs	r3, #0
 800d222:	2200      	movs	r2, #0
 800d224:	2100      	movs	r1, #0
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fa58 	bl	800d6dc <xQueueGenericSend>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d001      	beq.n	800d236 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d232:	23ff      	movs	r3, #255	; 0xff
 800d234:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d236:	68fb      	ldr	r3, [r7, #12]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	e000ed04 	.word	0xe000ed04

0800d244 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d24c:	f7ff fee8 	bl	800d020 <inHandlerMode>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800d256:	2382      	movs	r3, #130	; 0x82
 800d258:	e003      	b.n	800d262 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fed0 	bl	800e000 <vQueueDelete>

  return osOK; 
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b082      	sub	sp, #8
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	4619      	mov	r1, r3
 800d280:	f000 f9d6 	bl	800d630 <xQueueGenericCreate>
 800d284:	4603      	mov	r3, r0
#endif
}
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d29c:	2300      	movs	r3, #0
 800d29e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <osMessagePut+0x1e>
    ticks = 1;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d2ae:	f7ff feb7 	bl	800d020 <inHandlerMode>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d018      	beq.n	800d2ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d2b8:	f107 0210 	add.w	r2, r7, #16
 800d2bc:	f107 0108 	add.w	r1, r7, #8
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f000 fb08 	bl	800d8d8 <xQueueGenericSendFromISR>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d001      	beq.n	800d2d2 <osMessagePut+0x42>
      return osErrorOS;
 800d2ce:	23ff      	movs	r3, #255	; 0xff
 800d2d0:	e018      	b.n	800d304 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d014      	beq.n	800d302 <osMessagePut+0x72>
 800d2d8:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <osMessagePut+0x7c>)
 800d2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	e00b      	b.n	800d302 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d2ea:	f107 0108 	add.w	r1, r7, #8
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f000 f9f2 	bl	800d6dc <xQueueGenericSend>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d001      	beq.n	800d302 <osMessagePut+0x72>
      return osErrorOS;
 800d2fe:	23ff      	movs	r3, #255	; 0xff
 800d300:	e000      	b.n	800d304 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	e000ed04 	.word	0xe000ed04

0800d310 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d310:	b590      	push	{r4, r7, lr}
 800d312:	b08b      	sub	sp, #44	; 0x2c
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10a      	bne.n	800d340 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d32a:	2380      	movs	r3, #128	; 0x80
 800d32c:	617b      	str	r3, [r7, #20]
    return event;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	461c      	mov	r4, r3
 800d332:	f107 0314 	add.w	r3, r7, #20
 800d336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d33a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d33e:	e054      	b.n	800d3ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d340:	2300      	movs	r3, #0
 800d342:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34e:	d103      	bne.n	800d358 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d350:	f04f 33ff 	mov.w	r3, #4294967295
 800d354:	627b      	str	r3, [r7, #36]	; 0x24
 800d356:	e009      	b.n	800d36c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d006      	beq.n	800d36c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <osMessageGet+0x5c>
      ticks = 1;
 800d368:	2301      	movs	r3, #1
 800d36a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d36c:	f7ff fe58 	bl	800d020 <inHandlerMode>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d01c      	beq.n	800d3b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d376:	f107 0220 	add.w	r2, r7, #32
 800d37a:	f107 0314 	add.w	r3, r7, #20
 800d37e:	3304      	adds	r3, #4
 800d380:	4619      	mov	r1, r3
 800d382:	68b8      	ldr	r0, [r7, #8]
 800d384:	f000 fdbc 	bl	800df00 <xQueueReceiveFromISR>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d102      	bne.n	800d394 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d38e:	2310      	movs	r3, #16
 800d390:	617b      	str	r3, [r7, #20]
 800d392:	e001      	b.n	800d398 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d394:	2300      	movs	r3, #0
 800d396:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d01d      	beq.n	800d3da <osMessageGet+0xca>
 800d39e:	4b15      	ldr	r3, [pc, #84]	; (800d3f4 <osMessageGet+0xe4>)
 800d3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	e014      	b.n	800d3da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d3b0:	f107 0314 	add.w	r3, r7, #20
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	68b8      	ldr	r0, [r7, #8]
 800d3bc:	f000 fbb4 	bl	800db28 <xQueueReceive>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d102      	bne.n	800d3cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d3c6:	2310      	movs	r3, #16
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	e006      	b.n	800d3da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <osMessageGet+0xc6>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	e000      	b.n	800d3d8 <osMessageGet+0xc8>
 800d3d6:	2340      	movs	r3, #64	; 0x40
 800d3d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	461c      	mov	r4, r3
 800d3de:	f107 0314 	add.w	r3, r7, #20
 800d3e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	372c      	adds	r7, #44	; 0x2c
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd90      	pop	{r4, r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	e000ed04 	.word	0xe000ed04

0800d3f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f103 0208 	add.w	r2, r3, #8
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f04f 32ff 	mov.w	r2, #4294967295
 800d410:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f103 0208 	add.w	r2, r3, #8
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f103 0208 	add.w	r2, r3, #8
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d452:	b480      	push	{r7}
 800d454:	b085      	sub	sp, #20
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	1c5a      	adds	r2, r3, #1
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	601a      	str	r2, [r3, #0]
}
 800d48e:	bf00      	nop
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b0:	d103      	bne.n	800d4ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	e00c      	b.n	800d4d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3308      	adds	r3, #8
 800d4be:	60fb      	str	r3, [r7, #12]
 800d4c0:	e002      	b.n	800d4c8 <vListInsert+0x2e>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d2f6      	bcs.n	800d4c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	683a      	ldr	r2, [r7, #0]
 800d4e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	683a      	ldr	r2, [r7, #0]
 800d4ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	1c5a      	adds	r2, r3, #1
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	601a      	str	r2, [r3, #0]
}
 800d500:	bf00      	nop
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	6892      	ldr	r2, [r2, #8]
 800d522:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	6852      	ldr	r2, [r2, #4]
 800d52c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	429a      	cmp	r2, r3
 800d536:	d103      	bne.n	800d540 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	1e5a      	subs	r2, r3, #1
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10a      	bne.n	800d58a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d586:	bf00      	nop
 800d588:	e7fe      	b.n	800d588 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d58a:	f002 f953 	bl	800f834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d596:	68f9      	ldr	r1, [r7, #12]
 800d598:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d59a:	fb01 f303 	mul.w	r3, r1, r3
 800d59e:	441a      	add	r2, r3
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	68f9      	ldr	r1, [r7, #12]
 800d5be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5c0:	fb01 f303 	mul.w	r3, r1, r3
 800d5c4:	441a      	add	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	22ff      	movs	r2, #255	; 0xff
 800d5ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	22ff      	movs	r2, #255	; 0xff
 800d5d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d114      	bne.n	800d60a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01a      	beq.n	800d61e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3310      	adds	r3, #16
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f001 fbf7 	bl	800ede0 <xTaskRemoveFromEventList>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d012      	beq.n	800d61e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d5f8:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <xQueueGenericReset+0xcc>)
 800d5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	e009      	b.n	800d61e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3310      	adds	r3, #16
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff fef2 	bl	800d3f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	3324      	adds	r3, #36	; 0x24
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff feed 	bl	800d3f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d61e:	f002 f939 	bl	800f894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d622:	2301      	movs	r3, #1
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	e000ed04 	.word	0xe000ed04

0800d630 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08a      	sub	sp, #40	; 0x28
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	4613      	mov	r3, r2
 800d63c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10a      	bne.n	800d65a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	613b      	str	r3, [r7, #16]
}
 800d656:	bf00      	nop
 800d658:	e7fe      	b.n	800d658 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	fb02 f303 	mul.w	r3, r2, r3
 800d662:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	3348      	adds	r3, #72	; 0x48
 800d668:	4618      	mov	r0, r3
 800d66a:	f002 fa05 	bl	800fa78 <pvPortMalloc>
 800d66e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00d      	beq.n	800d692 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	3348      	adds	r3, #72	; 0x48
 800d67e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d680:	79fa      	ldrb	r2, [r7, #7]
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	4613      	mov	r3, r2
 800d688:	697a      	ldr	r2, [r7, #20]
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f000 f805 	bl	800d69c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d692:	69bb      	ldr	r3, [r7, #24]
	}
 800d694:	4618      	mov	r0, r3
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d103      	bne.n	800d6b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	69ba      	ldr	r2, [r7, #24]
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	e002      	b.n	800d6be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	69b8      	ldr	r0, [r7, #24]
 800d6ce:	f7ff ff47 	bl	800d560 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b08e      	sub	sp, #56	; 0x38
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10a      	bne.n	800d70e <xQueueGenericSend+0x32>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d70a:	bf00      	nop
 800d70c:	e7fe      	b.n	800d70c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <xQueueGenericSend+0x40>
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <xQueueGenericSend+0x44>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e000      	b.n	800d722 <xQueueGenericSend+0x46>
 800d720:	2300      	movs	r3, #0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10a      	bne.n	800d73c <xQueueGenericSend+0x60>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d103      	bne.n	800d74a <xQueueGenericSend+0x6e>
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d746:	2b01      	cmp	r3, #1
 800d748:	d101      	bne.n	800d74e <xQueueGenericSend+0x72>
 800d74a:	2301      	movs	r3, #1
 800d74c:	e000      	b.n	800d750 <xQueueGenericSend+0x74>
 800d74e:	2300      	movs	r3, #0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10a      	bne.n	800d76a <xQueueGenericSend+0x8e>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	623b      	str	r3, [r7, #32]
}
 800d766:	bf00      	nop
 800d768:	e7fe      	b.n	800d768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d76a:	f001 fd13 	bl	800f194 <xTaskGetSchedulerState>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d102      	bne.n	800d77a <xQueueGenericSend+0x9e>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <xQueueGenericSend+0xa2>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e000      	b.n	800d780 <xQueueGenericSend+0xa4>
 800d77e:	2300      	movs	r3, #0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <xQueueGenericSend+0xbe>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	61fb      	str	r3, [r7, #28]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d79a:	f002 f84b 	bl	800f834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d302      	bcc.n	800d7b0 <xQueueGenericSend+0xd4>
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d129      	bne.n	800d804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7b0:	683a      	ldr	r2, [r7, #0]
 800d7b2:	68b9      	ldr	r1, [r7, #8]
 800d7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7b6:	f000 fc59 	bl	800e06c <prvCopyDataToQueue>
 800d7ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d010      	beq.n	800d7e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c6:	3324      	adds	r3, #36	; 0x24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f001 fb09 	bl	800ede0 <xTaskRemoveFromEventList>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d013      	beq.n	800d7fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7d4:	4b3f      	ldr	r3, [pc, #252]	; (800d8d4 <xQueueGenericSend+0x1f8>)
 800d7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	e00a      	b.n	800d7fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d007      	beq.n	800d7fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7ec:	4b39      	ldr	r3, [pc, #228]	; (800d8d4 <xQueueGenericSend+0x1f8>)
 800d7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7fc:	f002 f84a 	bl	800f894 <vPortExitCritical>
				return pdPASS;
 800d800:	2301      	movs	r3, #1
 800d802:	e063      	b.n	800d8cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d103      	bne.n	800d812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d80a:	f002 f843 	bl	800f894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	e05c      	b.n	800d8cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d814:	2b00      	cmp	r3, #0
 800d816:	d106      	bne.n	800d826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d818:	f107 0314 	add.w	r3, r7, #20
 800d81c:	4618      	mov	r0, r3
 800d81e:	f001 fb41 	bl	800eea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d822:	2301      	movs	r3, #1
 800d824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d826:	f002 f835 	bl	800f894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d82a:	f001 f8cf 	bl	800e9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d82e:	f002 f801 	bl	800f834 <vPortEnterCritical>
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d838:	b25b      	sxtb	r3, r3
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d103      	bne.n	800d848 <xQueueGenericSend+0x16c>
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d84e:	b25b      	sxtb	r3, r3
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d854:	d103      	bne.n	800d85e <xQueueGenericSend+0x182>
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d85e:	f002 f819 	bl	800f894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d862:	1d3a      	adds	r2, r7, #4
 800d864:	f107 0314 	add.w	r3, r7, #20
 800d868:	4611      	mov	r1, r2
 800d86a:	4618      	mov	r0, r3
 800d86c:	f001 fb30 	bl	800eed0 <xTaskCheckForTimeOut>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d124      	bne.n	800d8c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d878:	f000 fcf0 	bl	800e25c <prvIsQueueFull>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d018      	beq.n	800d8b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	3310      	adds	r3, #16
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	4611      	mov	r1, r2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f001 fa84 	bl	800ed98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d892:	f000 fc7b 	bl	800e18c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d896:	f001 f8a7 	bl	800e9e8 <xTaskResumeAll>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f47f af7c 	bne.w	800d79a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d8a2:	4b0c      	ldr	r3, [pc, #48]	; (800d8d4 <xQueueGenericSend+0x1f8>)
 800d8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	e772      	b.n	800d79a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8b6:	f000 fc69 	bl	800e18c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8ba:	f001 f895 	bl	800e9e8 <xTaskResumeAll>
 800d8be:	e76c      	b.n	800d79a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8c2:	f000 fc63 	bl	800e18c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8c6:	f001 f88f 	bl	800e9e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3738      	adds	r7, #56	; 0x38
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	e000ed04 	.word	0xe000ed04

0800d8d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b090      	sub	sp, #64	; 0x40
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10a      	bne.n	800d906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d103      	bne.n	800d914 <xQueueGenericSendFromISR+0x3c>
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d101      	bne.n	800d918 <xQueueGenericSendFromISR+0x40>
 800d914:	2301      	movs	r3, #1
 800d916:	e000      	b.n	800d91a <xQueueGenericSendFromISR+0x42>
 800d918:	2300      	movs	r3, #0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10a      	bne.n	800d934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d930:	bf00      	nop
 800d932:	e7fe      	b.n	800d932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d103      	bne.n	800d942 <xQueueGenericSendFromISR+0x6a>
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d101      	bne.n	800d946 <xQueueGenericSendFromISR+0x6e>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <xQueueGenericSendFromISR+0x70>
 800d946:	2300      	movs	r3, #0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10a      	bne.n	800d962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	623b      	str	r3, [r7, #32]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d962:	f002 f849 	bl	800f9f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d966:	f3ef 8211 	mrs	r2, BASEPRI
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	61fa      	str	r2, [r7, #28]
 800d97c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d97e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d302      	bcc.n	800d994 <xQueueGenericSendFromISR+0xbc>
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b02      	cmp	r3, #2
 800d992:	d12f      	bne.n	800d9f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	68b9      	ldr	r1, [r7, #8]
 800d9a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9aa:	f000 fb5f 	bl	800e06c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b6:	d112      	bne.n	800d9de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d016      	beq.n	800d9ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	3324      	adds	r3, #36	; 0x24
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f001 fa0b 	bl	800ede0 <xTaskRemoveFromEventList>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00e      	beq.n	800d9ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00b      	beq.n	800d9ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	e007      	b.n	800d9ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	b25a      	sxtb	r2, r3
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d9f2:	e001      	b.n	800d9f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800da06:	4618      	mov	r0, r3
 800da08:	3740      	adds	r7, #64	; 0x40
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b08e      	sub	sp, #56	; 0x38
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10a      	bne.n	800da38 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	623b      	str	r3, [r7, #32]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00a      	beq.n	800da56 <xQueueGiveFromISR+0x48>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	61fb      	str	r3, [r7, #28]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d103      	bne.n	800da66 <xQueueGiveFromISR+0x58>
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <xQueueGiveFromISR+0x5c>
 800da66:	2301      	movs	r3, #1
 800da68:	e000      	b.n	800da6c <xQueueGiveFromISR+0x5e>
 800da6a:	2300      	movs	r3, #0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10a      	bne.n	800da86 <xQueueGiveFromISR+0x78>
	__asm volatile
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	61bb      	str	r3, [r7, #24]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da86:	f001 ffb7 	bl	800f9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800da8a:	f3ef 8211 	mrs	r2, BASEPRI
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	617a      	str	r2, [r7, #20]
 800daa0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800daa2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800daa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d22b      	bcs.n	800db0e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	1c5a      	adds	r2, r3, #1
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad0:	d112      	bne.n	800daf8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d016      	beq.n	800db08 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	3324      	adds	r3, #36	; 0x24
 800dade:	4618      	mov	r0, r3
 800dae0:	f001 f97e 	bl	800ede0 <xTaskRemoveFromEventList>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00e      	beq.n	800db08 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00b      	beq.n	800db08 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	2201      	movs	r2, #1
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	e007      	b.n	800db08 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800daf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dafc:	3301      	adds	r3, #1
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	b25a      	sxtb	r2, r3
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db08:	2301      	movs	r3, #1
 800db0a:	637b      	str	r3, [r7, #52]	; 0x34
 800db0c:	e001      	b.n	800db12 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	637b      	str	r3, [r7, #52]	; 0x34
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f383 8811 	msr	BASEPRI, r3
}
 800db1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db20:	4618      	mov	r0, r3
 800db22:	3738      	adds	r7, #56	; 0x38
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08c      	sub	sp, #48	; 0x30
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db34:	2300      	movs	r3, #0
 800db36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d10a      	bne.n	800db58 <xQueueReceive+0x30>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	623b      	str	r3, [r7, #32]
}
 800db54:	bf00      	nop
 800db56:	e7fe      	b.n	800db56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d103      	bne.n	800db66 <xQueueReceive+0x3e>
 800db5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <xQueueReceive+0x42>
 800db66:	2301      	movs	r3, #1
 800db68:	e000      	b.n	800db6c <xQueueReceive+0x44>
 800db6a:	2300      	movs	r3, #0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d10a      	bne.n	800db86 <xQueueReceive+0x5e>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	61fb      	str	r3, [r7, #28]
}
 800db82:	bf00      	nop
 800db84:	e7fe      	b.n	800db84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db86:	f001 fb05 	bl	800f194 <xTaskGetSchedulerState>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <xQueueReceive+0x6e>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <xQueueReceive+0x72>
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <xQueueReceive+0x74>
 800db9a:	2300      	movs	r3, #0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <xQueueReceive+0x8e>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	61bb      	str	r3, [r7, #24]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbb6:	f001 fe3d 	bl	800f834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d01f      	beq.n	800dc06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbca:	f000 fab9 	bl	800e140 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	1e5a      	subs	r2, r3, #1
 800dbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00f      	beq.n	800dbfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe0:	3310      	adds	r3, #16
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 f8fc 	bl	800ede0 <xTaskRemoveFromEventList>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d007      	beq.n	800dbfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbee:	4b3d      	ldr	r3, [pc, #244]	; (800dce4 <xQueueReceive+0x1bc>)
 800dbf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbfe:	f001 fe49 	bl	800f894 <vPortExitCritical>
				return pdPASS;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e069      	b.n	800dcda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d103      	bne.n	800dc14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc0c:	f001 fe42 	bl	800f894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc10:	2300      	movs	r3, #0
 800dc12:	e062      	b.n	800dcda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d106      	bne.n	800dc28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc1a:	f107 0310 	add.w	r3, r7, #16
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f001 f940 	bl	800eea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc24:	2301      	movs	r3, #1
 800dc26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc28:	f001 fe34 	bl	800f894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc2c:	f000 fece 	bl	800e9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc30:	f001 fe00 	bl	800f834 <vPortEnterCritical>
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc3a:	b25b      	sxtb	r3, r3
 800dc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc40:	d103      	bne.n	800dc4a <xQueueReceive+0x122>
 800dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc50:	b25b      	sxtb	r3, r3
 800dc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc56:	d103      	bne.n	800dc60 <xQueueReceive+0x138>
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc60:	f001 fe18 	bl	800f894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc64:	1d3a      	adds	r2, r7, #4
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f001 f92f 	bl	800eed0 <xTaskCheckForTimeOut>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d123      	bne.n	800dcc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc7a:	f000 fad9 	bl	800e230 <prvIsQueueEmpty>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d017      	beq.n	800dcb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc86:	3324      	adds	r3, #36	; 0x24
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f001 f883 	bl	800ed98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc94:	f000 fa7a 	bl	800e18c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc98:	f000 fea6 	bl	800e9e8 <xTaskResumeAll>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d189      	bne.n	800dbb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dca2:	4b10      	ldr	r3, [pc, #64]	; (800dce4 <xQueueReceive+0x1bc>)
 800dca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	e780      	b.n	800dbb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb6:	f000 fa69 	bl	800e18c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcba:	f000 fe95 	bl	800e9e8 <xTaskResumeAll>
 800dcbe:	e77a      	b.n	800dbb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dcc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc2:	f000 fa63 	bl	800e18c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcc6:	f000 fe8f 	bl	800e9e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dccc:	f000 fab0 	bl	800e230 <prvIsQueueEmpty>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f43f af6f 	beq.w	800dbb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3730      	adds	r7, #48	; 0x30
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	e000ed04 	.word	0xe000ed04

0800dce8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08e      	sub	sp, #56	; 0x38
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	623b      	str	r3, [r7, #32]
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00a      	beq.n	800dd38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	61fb      	str	r3, [r7, #28]
}
 800dd34:	bf00      	nop
 800dd36:	e7fe      	b.n	800dd36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd38:	f001 fa2c 	bl	800f194 <xTaskGetSchedulerState>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d102      	bne.n	800dd48 <xQueueSemaphoreTake+0x60>
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <xQueueSemaphoreTake+0x64>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e000      	b.n	800dd4e <xQueueSemaphoreTake+0x66>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d10a      	bne.n	800dd68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	61bb      	str	r3, [r7, #24]
}
 800dd64:	bf00      	nop
 800dd66:	e7fe      	b.n	800dd66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd68:	f001 fd64 	bl	800f834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d024      	beq.n	800ddc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	1e5a      	subs	r2, r3, #1
 800dd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d104      	bne.n	800dd92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dd88:	f001 fbac 	bl	800f4e4 <pvTaskIncrementMutexHeldCount>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00f      	beq.n	800ddba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9c:	3310      	adds	r3, #16
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f001 f81e 	bl	800ede0 <xTaskRemoveFromEventList>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d007      	beq.n	800ddba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddaa:	4b54      	ldr	r3, [pc, #336]	; (800defc <xQueueSemaphoreTake+0x214>)
 800ddac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb0:	601a      	str	r2, [r3, #0]
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ddba:	f001 fd6b 	bl	800f894 <vPortExitCritical>
				return pdPASS;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e097      	b.n	800def2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d111      	bne.n	800ddec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00a      	beq.n	800dde4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	617b      	str	r3, [r7, #20]
}
 800dde0:	bf00      	nop
 800dde2:	e7fe      	b.n	800dde2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dde4:	f001 fd56 	bl	800f894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dde8:	2300      	movs	r3, #0
 800ddea:	e082      	b.n	800def2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddf2:	f107 030c 	add.w	r3, r7, #12
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f001 f854 	bl	800eea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de00:	f001 fd48 	bl	800f894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de04:	f000 fde2 	bl	800e9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de08:	f001 fd14 	bl	800f834 <vPortEnterCritical>
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de12:	b25b      	sxtb	r3, r3
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de18:	d103      	bne.n	800de22 <xQueueSemaphoreTake+0x13a>
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de28:	b25b      	sxtb	r3, r3
 800de2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2e:	d103      	bne.n	800de38 <xQueueSemaphoreTake+0x150>
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de38:	f001 fd2c 	bl	800f894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de3c:	463a      	mov	r2, r7
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f001 f843 	bl	800eed0 <xTaskCheckForTimeOut>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d132      	bne.n	800deb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de52:	f000 f9ed 	bl	800e230 <prvIsQueueEmpty>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d026      	beq.n	800deaa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d109      	bne.n	800de78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800de64:	f001 fce6 	bl	800f834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f001 f9af 	bl	800f1d0 <xTaskPriorityInherit>
 800de72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800de74:	f001 fd0e 	bl	800f894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	3324      	adds	r3, #36	; 0x24
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f000 ff89 	bl	800ed98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de88:	f000 f980 	bl	800e18c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de8c:	f000 fdac 	bl	800e9e8 <xTaskResumeAll>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	f47f af68 	bne.w	800dd68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800de98:	4b18      	ldr	r3, [pc, #96]	; (800defc <xQueueSemaphoreTake+0x214>)
 800de9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	e75e      	b.n	800dd68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800deaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deac:	f000 f96e 	bl	800e18c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800deb0:	f000 fd9a 	bl	800e9e8 <xTaskResumeAll>
 800deb4:	e758      	b.n	800dd68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800deb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deb8:	f000 f968 	bl	800e18c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800debc:	f000 fd94 	bl	800e9e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dec2:	f000 f9b5 	bl	800e230 <prvIsQueueEmpty>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f43f af4d 	beq.w	800dd68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00d      	beq.n	800def0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ded4:	f001 fcae 	bl	800f834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ded8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deda:	f000 f8af 	bl	800e03c <prvGetDisinheritPriorityAfterTimeout>
 800dede:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dee6:	4618      	mov	r0, r3
 800dee8:	f001 fa6e 	bl	800f3c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800deec:	f001 fcd2 	bl	800f894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800def0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800def2:	4618      	mov	r0, r3
 800def4:	3738      	adds	r7, #56	; 0x38
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	e000ed04 	.word	0xe000ed04

0800df00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08e      	sub	sp, #56	; 0x38
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10a      	bne.n	800df2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	623b      	str	r3, [r7, #32]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d103      	bne.n	800df3a <xQueueReceiveFromISR+0x3a>
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <xQueueReceiveFromISR+0x3e>
 800df3a:	2301      	movs	r3, #1
 800df3c:	e000      	b.n	800df40 <xQueueReceiveFromISR+0x40>
 800df3e:	2300      	movs	r3, #0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10a      	bne.n	800df5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	61fb      	str	r3, [r7, #28]
}
 800df56:	bf00      	nop
 800df58:	e7fe      	b.n	800df58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df5a:	f001 fd4d 	bl	800f9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800df5e:	f3ef 8211 	mrs	r2, BASEPRI
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	61ba      	str	r2, [r7, #24]
 800df74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800df76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	2b00      	cmp	r3, #0
 800df84:	d02f      	beq.n	800dfe6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800df86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800df90:	68b9      	ldr	r1, [r7, #8]
 800df92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df94:	f000 f8d4 	bl	800e140 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	1e5a      	subs	r2, r3, #1
 800df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dfa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa8:	d112      	bne.n	800dfd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d016      	beq.n	800dfe0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	3310      	adds	r3, #16
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f000 ff12 	bl	800ede0 <xTaskRemoveFromEventList>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00e      	beq.n	800dfe0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00b      	beq.n	800dfe0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e007      	b.n	800dfe0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	b25a      	sxtb	r2, r3
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800dfe4:	e001      	b.n	800dfea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	637b      	str	r3, [r7, #52]	; 0x34
 800dfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f383 8811 	msr	BASEPRI, r3
}
 800dff4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3738      	adds	r7, #56	; 0x38
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10a      	bne.n	800e028 <vQueueDelete+0x28>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60bb      	str	r3, [r7, #8]
}
 800e024:	bf00      	nop
 800e026:	e7fe      	b.n	800e026 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f000 f92f 	bl	800e28c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f001 fdee 	bl	800fc10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d006      	beq.n	800e05a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f1c3 0307 	rsb	r3, r3, #7
 800e056:	60fb      	str	r3, [r7, #12]
 800e058:	e001      	b.n	800e05e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e05a:	2300      	movs	r3, #0
 800e05c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e05e:	68fb      	ldr	r3, [r7, #12]
	}
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b086      	sub	sp, #24
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e078:	2300      	movs	r3, #0
 800e07a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10d      	bne.n	800e0a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d14d      	bne.n	800e12e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	4618      	mov	r0, r3
 800e098:	f001 f910 	bl	800f2bc <xTaskPriorityDisinherit>
 800e09c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	609a      	str	r2, [r3, #8]
 800e0a4:	e043      	b.n	800e12e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d119      	bne.n	800e0e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6858      	ldr	r0, [r3, #4]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	68b9      	ldr	r1, [r7, #8]
 800e0b8:	f001 fef4 	bl	800fea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c4:	441a      	add	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d32b      	bcc.n	800e12e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	605a      	str	r2, [r3, #4]
 800e0de:	e026      	b.n	800e12e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	68d8      	ldr	r0, [r3, #12]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	f001 feda 	bl	800fea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	68da      	ldr	r2, [r3, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0f8:	425b      	negs	r3, r3
 800e0fa:	441a      	add	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	68da      	ldr	r2, [r3, #12]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d207      	bcs.n	800e11c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	689a      	ldr	r2, [r3, #8]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e114:	425b      	negs	r3, r3
 800e116:	441a      	add	r2, r3
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b02      	cmp	r3, #2
 800e120:	d105      	bne.n	800e12e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e136:	697b      	ldr	r3, [r7, #20]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d018      	beq.n	800e184 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68da      	ldr	r2, [r3, #12]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e15a:	441a      	add	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68da      	ldr	r2, [r3, #12]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d303      	bcc.n	800e174 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68d9      	ldr	r1, [r3, #12]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e17c:	461a      	mov	r2, r3
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	f001 fe90 	bl	800fea4 <memcpy>
	}
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e194:	f001 fb4e 	bl	800f834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e19e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1a0:	e011      	b.n	800e1c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d012      	beq.n	800e1d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3324      	adds	r3, #36	; 0x24
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 fe16 	bl	800ede0 <xTaskRemoveFromEventList>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e1ba:	f000 feeb 	bl	800ef94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	dce9      	bgt.n	800e1a2 <prvUnlockQueue+0x16>
 800e1ce:	e000      	b.n	800e1d2 <prvUnlockQueue+0x46>
					break;
 800e1d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	22ff      	movs	r2, #255	; 0xff
 800e1d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e1da:	f001 fb5b 	bl	800f894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e1de:	f001 fb29 	bl	800f834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e1ea:	e011      	b.n	800e210 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d012      	beq.n	800e21a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3310      	adds	r3, #16
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f000 fdf1 	bl	800ede0 <xTaskRemoveFromEventList>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e204:	f000 fec6 	bl	800ef94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e208:	7bbb      	ldrb	r3, [r7, #14]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e214:	2b00      	cmp	r3, #0
 800e216:	dce9      	bgt.n	800e1ec <prvUnlockQueue+0x60>
 800e218:	e000      	b.n	800e21c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e21a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	22ff      	movs	r2, #255	; 0xff
 800e220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e224:	f001 fb36 	bl	800f894 <vPortExitCritical>
}
 800e228:	bf00      	nop
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e238:	f001 fafc 	bl	800f834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e240:	2b00      	cmp	r3, #0
 800e242:	d102      	bne.n	800e24a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e244:	2301      	movs	r3, #1
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e001      	b.n	800e24e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e24e:	f001 fb21 	bl	800f894 <vPortExitCritical>

	return xReturn;
 800e252:	68fb      	ldr	r3, [r7, #12]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e264:	f001 fae6 	bl	800f834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e270:	429a      	cmp	r2, r3
 800e272:	d102      	bne.n	800e27a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e274:	2301      	movs	r3, #1
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	e001      	b.n	800e27e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e27e:	f001 fb09 	bl	800f894 <vPortExitCritical>

	return xReturn;
 800e282:	68fb      	ldr	r3, [r7, #12]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e294:	2300      	movs	r3, #0
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	e016      	b.n	800e2c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e29a:	4a10      	ldr	r2, [pc, #64]	; (800e2dc <vQueueUnregisterQueue+0x50>)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	4413      	add	r3, r2
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d10b      	bne.n	800e2c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e2aa:	4a0c      	ldr	r2, [pc, #48]	; (800e2dc <vQueueUnregisterQueue+0x50>)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e2b4:	4a09      	ldr	r2, [pc, #36]	; (800e2dc <vQueueUnregisterQueue+0x50>)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	00db      	lsls	r3, r3, #3
 800e2ba:	4413      	add	r3, r2
 800e2bc:	2200      	movs	r2, #0
 800e2be:	605a      	str	r2, [r3, #4]
				break;
 800e2c0:	e006      	b.n	800e2d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	60fb      	str	r3, [r7, #12]
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2b07      	cmp	r3, #7
 800e2cc:	d9e5      	bls.n	800e29a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e2ce:	bf00      	nop
 800e2d0:	bf00      	nop
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	20004e20 	.word	0x20004e20

0800e2e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b08c      	sub	sp, #48	; 0x30
 800e2e4:	af04      	add	r7, sp, #16
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e2f0:	88fb      	ldrh	r3, [r7, #6]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f001 fbbf 	bl	800fa78 <pvPortMalloc>
 800e2fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00e      	beq.n	800e320 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e302:	20b4      	movs	r0, #180	; 0xb4
 800e304:	f001 fbb8 	bl	800fa78 <pvPortMalloc>
 800e308:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d003      	beq.n	800e318 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	631a      	str	r2, [r3, #48]	; 0x30
 800e316:	e005      	b.n	800e324 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e318:	6978      	ldr	r0, [r7, #20]
 800e31a:	f001 fc79 	bl	800fc10 <vPortFree>
 800e31e:	e001      	b.n	800e324 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e320:	2300      	movs	r3, #0
 800e322:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d013      	beq.n	800e352 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e32a:	88fa      	ldrh	r2, [r7, #6]
 800e32c:	2300      	movs	r3, #0
 800e32e:	9303      	str	r3, [sp, #12]
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	9302      	str	r3, [sp, #8]
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	9301      	str	r3, [sp, #4]
 800e338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	68b9      	ldr	r1, [r7, #8]
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f80f 	bl	800e364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e346:	69f8      	ldr	r0, [r7, #28]
 800e348:	f000 f8b2 	bl	800e4b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e34c:	2301      	movs	r3, #1
 800e34e:	61bb      	str	r3, [r7, #24]
 800e350:	e002      	b.n	800e358 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e352:	f04f 33ff 	mov.w	r3, #4294967295
 800e356:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e358:	69bb      	ldr	r3, [r7, #24]
	}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3720      	adds	r7, #32
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
	...

0800e364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	461a      	mov	r2, r3
 800e37c:	21a5      	movs	r1, #165	; 0xa5
 800e37e:	f001 fd9f 	bl	800fec0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e38c:	3b01      	subs	r3, #1
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	4413      	add	r3, r2
 800e392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	f023 0307 	bic.w	r3, r3, #7
 800e39a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	f003 0307 	and.w	r3, r3, #7
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	617b      	str	r3, [r7, #20]
}
 800e3b8:	bf00      	nop
 800e3ba:	e7fe      	b.n	800e3ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d01f      	beq.n	800e402 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	61fb      	str	r3, [r7, #28]
 800e3c6:	e012      	b.n	800e3ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	7819      	ldrb	r1, [r3, #0]
 800e3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	3334      	adds	r3, #52	; 0x34
 800e3d8:	460a      	mov	r2, r1
 800e3da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d006      	beq.n	800e3f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	61fb      	str	r3, [r7, #28]
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	2b0f      	cmp	r3, #15
 800e3f2:	d9e9      	bls.n	800e3c8 <prvInitialiseNewTask+0x64>
 800e3f4:	e000      	b.n	800e3f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e3f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e400:	e003      	b.n	800e40a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e404:	2200      	movs	r2, #0
 800e406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	2b06      	cmp	r3, #6
 800e40e:	d901      	bls.n	800e414 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e410:	2306      	movs	r3, #6
 800e412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e41e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e422:	2200      	movs	r2, #0
 800e424:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e428:	3304      	adds	r3, #4
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff f804 	bl	800d438 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e432:	3318      	adds	r3, #24
 800e434:	4618      	mov	r0, r3
 800e436:	f7fe ffff 	bl	800d438 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e43e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	f1c3 0207 	rsb	r2, r3, #7
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e44e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e462:	334c      	adds	r3, #76	; 0x4c
 800e464:	2260      	movs	r2, #96	; 0x60
 800e466:	2100      	movs	r1, #0
 800e468:	4618      	mov	r0, r3
 800e46a:	f001 fd29 	bl	800fec0 <memset>
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	4a0c      	ldr	r2, [pc, #48]	; (800e4a4 <prvInitialiseNewTask+0x140>)
 800e472:	651a      	str	r2, [r3, #80]	; 0x50
 800e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e476:	4a0c      	ldr	r2, [pc, #48]	; (800e4a8 <prvInitialiseNewTask+0x144>)
 800e478:	655a      	str	r2, [r3, #84]	; 0x54
 800e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47c:	4a0b      	ldr	r2, [pc, #44]	; (800e4ac <prvInitialiseNewTask+0x148>)
 800e47e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e480:	683a      	ldr	r2, [r7, #0]
 800e482:	68f9      	ldr	r1, [r7, #12]
 800e484:	69b8      	ldr	r0, [r7, #24]
 800e486:	f001 f8a7 	bl	800f5d8 <pxPortInitialiseStack>
 800e48a:	4602      	mov	r2, r0
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e49a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e49c:	bf00      	nop
 800e49e:	3720      	adds	r7, #32
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	08011b4c 	.word	0x08011b4c
 800e4a8:	08011b6c 	.word	0x08011b6c
 800e4ac:	08011b2c 	.word	0x08011b2c

0800e4b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e4b8:	f001 f9bc 	bl	800f834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e4bc:	4b2a      	ldr	r3, [pc, #168]	; (800e568 <prvAddNewTaskToReadyList+0xb8>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	4a29      	ldr	r2, [pc, #164]	; (800e568 <prvAddNewTaskToReadyList+0xb8>)
 800e4c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e4c6:	4b29      	ldr	r3, [pc, #164]	; (800e56c <prvAddNewTaskToReadyList+0xbc>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d109      	bne.n	800e4e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e4ce:	4a27      	ldr	r2, [pc, #156]	; (800e56c <prvAddNewTaskToReadyList+0xbc>)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e4d4:	4b24      	ldr	r3, [pc, #144]	; (800e568 <prvAddNewTaskToReadyList+0xb8>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d110      	bne.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e4dc:	f000 fd7e 	bl	800efdc <prvInitialiseTaskLists>
 800e4e0:	e00d      	b.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e4e2:	4b23      	ldr	r3, [pc, #140]	; (800e570 <prvAddNewTaskToReadyList+0xc0>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d109      	bne.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e4ea:	4b20      	ldr	r3, [pc, #128]	; (800e56c <prvAddNewTaskToReadyList+0xbc>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d802      	bhi.n	800e4fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e4f8:	4a1c      	ldr	r2, [pc, #112]	; (800e56c <prvAddNewTaskToReadyList+0xbc>)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e4fe:	4b1d      	ldr	r3, [pc, #116]	; (800e574 <prvAddNewTaskToReadyList+0xc4>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3301      	adds	r3, #1
 800e504:	4a1b      	ldr	r2, [pc, #108]	; (800e574 <prvAddNewTaskToReadyList+0xc4>)
 800e506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50c:	2201      	movs	r2, #1
 800e50e:	409a      	lsls	r2, r3
 800e510:	4b19      	ldr	r3, [pc, #100]	; (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4313      	orrs	r3, r2
 800e516:	4a18      	ldr	r2, [pc, #96]	; (800e578 <prvAddNewTaskToReadyList+0xc8>)
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51e:	4613      	mov	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4413      	add	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4a15      	ldr	r2, [pc, #84]	; (800e57c <prvAddNewTaskToReadyList+0xcc>)
 800e528:	441a      	add	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3304      	adds	r3, #4
 800e52e:	4619      	mov	r1, r3
 800e530:	4610      	mov	r0, r2
 800e532:	f7fe ff8e 	bl	800d452 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e536:	f001 f9ad 	bl	800f894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e53a:	4b0d      	ldr	r3, [pc, #52]	; (800e570 <prvAddNewTaskToReadyList+0xc0>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00e      	beq.n	800e560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e542:	4b0a      	ldr	r3, [pc, #40]	; (800e56c <prvAddNewTaskToReadyList+0xbc>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d207      	bcs.n	800e560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e550:	4b0b      	ldr	r3, [pc, #44]	; (800e580 <prvAddNewTaskToReadyList+0xd0>)
 800e552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e556:	601a      	str	r2, [r3, #0]
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e560:	bf00      	nop
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	200003c0 	.word	0x200003c0
 800e56c:	200002c0 	.word	0x200002c0
 800e570:	200003cc 	.word	0x200003cc
 800e574:	200003dc 	.word	0x200003dc
 800e578:	200003c8 	.word	0x200003c8
 800e57c:	200002c4 	.word	0x200002c4
 800e580:	e000ed04 	.word	0xe000ed04

0800e584 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e584:	b580      	push	{r7, lr}
 800e586:	b08a      	sub	sp, #40	; 0x28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e58e:	2300      	movs	r3, #0
 800e590:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10a      	bne.n	800e5ae <vTaskDelayUntil+0x2a>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	617b      	str	r3, [r7, #20]
}
 800e5aa:	bf00      	nop
 800e5ac:	e7fe      	b.n	800e5ac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d10a      	bne.n	800e5ca <vTaskDelayUntil+0x46>
	__asm volatile
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	613b      	str	r3, [r7, #16]
}
 800e5c6:	bf00      	nop
 800e5c8:	e7fe      	b.n	800e5c8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e5ca:	4b2a      	ldr	r3, [pc, #168]	; (800e674 <vTaskDelayUntil+0xf0>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <vTaskDelayUntil+0x64>
	__asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	60fb      	str	r3, [r7, #12]
}
 800e5e4:	bf00      	nop
 800e5e6:	e7fe      	b.n	800e5e6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e5e8:	f000 f9f0 	bl	800e9cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e5ec:	4b22      	ldr	r3, [pc, #136]	; (800e678 <vTaskDelayUntil+0xf4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6a3a      	ldr	r2, [r7, #32]
 800e602:	429a      	cmp	r2, r3
 800e604:	d20b      	bcs.n	800e61e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	69fa      	ldr	r2, [r7, #28]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d211      	bcs.n	800e634 <vTaskDelayUntil+0xb0>
 800e610:	69fa      	ldr	r2, [r7, #28]
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	429a      	cmp	r2, r3
 800e616:	d90d      	bls.n	800e634 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e618:	2301      	movs	r3, #1
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
 800e61c:	e00a      	b.n	800e634 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	69fa      	ldr	r2, [r7, #28]
 800e624:	429a      	cmp	r2, r3
 800e626:	d303      	bcc.n	800e630 <vTaskDelayUntil+0xac>
 800e628:	69fa      	ldr	r2, [r7, #28]
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d901      	bls.n	800e634 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	69fa      	ldr	r2, [r7, #28]
 800e638:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d006      	beq.n	800e64e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e640:	69fa      	ldr	r2, [r7, #28]
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	2100      	movs	r1, #0
 800e648:	4618      	mov	r0, r3
 800e64a:	f000 ff5f 	bl	800f50c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e64e:	f000 f9cb 	bl	800e9e8 <xTaskResumeAll>
 800e652:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d107      	bne.n	800e66a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e65a:	4b08      	ldr	r3, [pc, #32]	; (800e67c <vTaskDelayUntil+0xf8>)
 800e65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e66a:	bf00      	nop
 800e66c:	3728      	adds	r7, #40	; 0x28
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	200003e8 	.word	0x200003e8
 800e678:	200003c4 	.word	0x200003c4
 800e67c:	e000ed04 	.word	0xe000ed04

0800e680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e688:	2300      	movs	r3, #0
 800e68a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d017      	beq.n	800e6c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e692:	4b13      	ldr	r3, [pc, #76]	; (800e6e0 <vTaskDelay+0x60>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00a      	beq.n	800e6b0 <vTaskDelay+0x30>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	60bb      	str	r3, [r7, #8]
}
 800e6ac:	bf00      	nop
 800e6ae:	e7fe      	b.n	800e6ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e6b0:	f000 f98c 	bl	800e9cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 ff28 	bl	800f50c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e6bc:	f000 f994 	bl	800e9e8 <xTaskResumeAll>
 800e6c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d107      	bne.n	800e6d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e6c8:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <vTaskDelay+0x64>)
 800e6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ce:	601a      	str	r2, [r3, #0]
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6d8:	bf00      	nop
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	200003e8 	.word	0x200003e8
 800e6e4:	e000ed04 	.word	0xe000ed04

0800e6e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e6f0:	f001 f8a0 	bl	800f834 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d102      	bne.n	800e700 <vTaskSuspend+0x18>
 800e6fa:	4b3c      	ldr	r3, [pc, #240]	; (800e7ec <vTaskSuspend+0x104>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	e000      	b.n	800e702 <vTaskSuspend+0x1a>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	3304      	adds	r3, #4
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe feff 	bl	800d50c <uxListRemove>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d115      	bne.n	800e740 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e718:	4935      	ldr	r1, [pc, #212]	; (800e7f0 <vTaskSuspend+0x108>)
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	440b      	add	r3, r1
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10a      	bne.n	800e740 <vTaskSuspend+0x58>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72e:	2201      	movs	r2, #1
 800e730:	fa02 f303 	lsl.w	r3, r2, r3
 800e734:	43da      	mvns	r2, r3
 800e736:	4b2f      	ldr	r3, [pc, #188]	; (800e7f4 <vTaskSuspend+0x10c>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4013      	ands	r3, r2
 800e73c:	4a2d      	ldr	r2, [pc, #180]	; (800e7f4 <vTaskSuspend+0x10c>)
 800e73e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e744:	2b00      	cmp	r3, #0
 800e746:	d004      	beq.n	800e752 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3318      	adds	r3, #24
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fe fedd 	bl	800d50c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3304      	adds	r3, #4
 800e756:	4619      	mov	r1, r3
 800e758:	4827      	ldr	r0, [pc, #156]	; (800e7f8 <vTaskSuspend+0x110>)
 800e75a:	f7fe fe7a 	bl	800d452 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b01      	cmp	r3, #1
 800e768:	d103      	bne.n	800e772 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e772:	f001 f88f 	bl	800f894 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e776:	4b21      	ldr	r3, [pc, #132]	; (800e7fc <vTaskSuspend+0x114>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d005      	beq.n	800e78a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e77e:	f001 f859 	bl	800f834 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e782:	f000 fce7 	bl	800f154 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e786:	f001 f885 	bl	800f894 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e78a:	4b18      	ldr	r3, [pc, #96]	; (800e7ec <vTaskSuspend+0x104>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	429a      	cmp	r2, r3
 800e792:	d127      	bne.n	800e7e4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800e794:	4b19      	ldr	r3, [pc, #100]	; (800e7fc <vTaskSuspend+0x114>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d017      	beq.n	800e7cc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e79c:	4b18      	ldr	r3, [pc, #96]	; (800e800 <vTaskSuspend+0x118>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00a      	beq.n	800e7ba <vTaskSuspend+0xd2>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	60bb      	str	r3, [r7, #8]
}
 800e7b6:	bf00      	nop
 800e7b8:	e7fe      	b.n	800e7b8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800e7ba:	4b12      	ldr	r3, [pc, #72]	; (800e804 <vTaskSuspend+0x11c>)
 800e7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7c0:	601a      	str	r2, [r3, #0]
 800e7c2:	f3bf 8f4f 	dsb	sy
 800e7c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7ca:	e00b      	b.n	800e7e4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e7cc:	4b0a      	ldr	r3, [pc, #40]	; (800e7f8 <vTaskSuspend+0x110>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <vTaskSuspend+0x120>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d103      	bne.n	800e7e0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800e7d8:	4b04      	ldr	r3, [pc, #16]	; (800e7ec <vTaskSuspend+0x104>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]
	}
 800e7de:	e001      	b.n	800e7e4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800e7e0:	f000 fa78 	bl	800ecd4 <vTaskSwitchContext>
	}
 800e7e4:	bf00      	nop
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	200002c0 	.word	0x200002c0
 800e7f0:	200002c4 	.word	0x200002c4
 800e7f4:	200003c8 	.word	0x200003c8
 800e7f8:	200003ac 	.word	0x200003ac
 800e7fc:	200003cc 	.word	0x200003cc
 800e800:	200003e8 	.word	0x200003e8
 800e804:	e000ed04 	.word	0xe000ed04
 800e808:	200003c0 	.word	0x200003c0

0800e80c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e80c:	b480      	push	{r7}
 800e80e:	b087      	sub	sp, #28
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e814:	2300      	movs	r3, #0
 800e816:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10a      	bne.n	800e838 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	60fb      	str	r3, [r7, #12]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	4a0a      	ldr	r2, [pc, #40]	; (800e868 <prvTaskIsTaskSuspended+0x5c>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d10a      	bne.n	800e858 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e846:	4a09      	ldr	r2, [pc, #36]	; (800e86c <prvTaskIsTaskSuspended+0x60>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d005      	beq.n	800e858 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e850:	2b00      	cmp	r3, #0
 800e852:	d101      	bne.n	800e858 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800e854:	2301      	movs	r3, #1
 800e856:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e858:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e85a:	4618      	mov	r0, r3
 800e85c:	371c      	adds	r7, #28
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	200003ac 	.word	0x200003ac
 800e86c:	20000380 	.word	0x20000380

0800e870 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10a      	bne.n	800e898 <vTaskResume+0x28>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	60bb      	str	r3, [r7, #8]
}
 800e894:	bf00      	nop
 800e896:	e7fe      	b.n	800e896 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e898:	4b20      	ldr	r3, [pc, #128]	; (800e91c <vTaskResume+0xac>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d037      	beq.n	800e912 <vTaskResume+0xa2>
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d034      	beq.n	800e912 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800e8a8:	f000 ffc4 	bl	800f834 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7ff ffad 	bl	800e80c <prvTaskIsTaskSuspended>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d02a      	beq.n	800e90e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fe25 	bl	800d50c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	409a      	lsls	r2, r3
 800e8ca:	4b15      	ldr	r3, [pc, #84]	; (800e920 <vTaskResume+0xb0>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	4a13      	ldr	r2, [pc, #76]	; (800e920 <vTaskResume+0xb0>)
 800e8d2:	6013      	str	r3, [r2, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d8:	4613      	mov	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4a10      	ldr	r2, [pc, #64]	; (800e924 <vTaskResume+0xb4>)
 800e8e2:	441a      	add	r2, r3
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	f7fe fdb1 	bl	800d452 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f4:	4b09      	ldr	r3, [pc, #36]	; (800e91c <vTaskResume+0xac>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d307      	bcc.n	800e90e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e8fe:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <vTaskResume+0xb8>)
 800e900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e90e:	f000 ffc1 	bl	800f894 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e912:	bf00      	nop
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	200002c0 	.word	0x200002c0
 800e920:	200003c8 	.word	0x200003c8
 800e924:	200002c4 	.word	0x200002c4
 800e928:	e000ed04 	.word	0xe000ed04

0800e92c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800e932:	4b1e      	ldr	r3, [pc, #120]	; (800e9ac <vTaskStartScheduler+0x80>)
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	2300      	movs	r3, #0
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	2300      	movs	r3, #0
 800e93c:	2280      	movs	r2, #128	; 0x80
 800e93e:	491c      	ldr	r1, [pc, #112]	; (800e9b0 <vTaskStartScheduler+0x84>)
 800e940:	481c      	ldr	r0, [pc, #112]	; (800e9b4 <vTaskStartScheduler+0x88>)
 800e942:	f7ff fccd 	bl	800e2e0 <xTaskCreate>
 800e946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d11b      	bne.n	800e986 <vTaskStartScheduler+0x5a>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	60bb      	str	r3, [r7, #8]
}
 800e960:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e962:	4b15      	ldr	r3, [pc, #84]	; (800e9b8 <vTaskStartScheduler+0x8c>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	334c      	adds	r3, #76	; 0x4c
 800e968:	4a14      	ldr	r2, [pc, #80]	; (800e9bc <vTaskStartScheduler+0x90>)
 800e96a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e96c:	4b14      	ldr	r3, [pc, #80]	; (800e9c0 <vTaskStartScheduler+0x94>)
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295
 800e972:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e974:	4b13      	ldr	r3, [pc, #76]	; (800e9c4 <vTaskStartScheduler+0x98>)
 800e976:	2201      	movs	r2, #1
 800e978:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e97a:	4b13      	ldr	r3, [pc, #76]	; (800e9c8 <vTaskStartScheduler+0x9c>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e980:	f000 feb6 	bl	800f6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e984:	e00e      	b.n	800e9a4 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d10a      	bne.n	800e9a4 <vTaskStartScheduler+0x78>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	607b      	str	r3, [r7, #4]
}
 800e9a0:	bf00      	nop
 800e9a2:	e7fe      	b.n	800e9a2 <vTaskStartScheduler+0x76>
}
 800e9a4:	bf00      	nop
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	200003e4 	.word	0x200003e4
 800e9b0:	080116b0 	.word	0x080116b0
 800e9b4:	0800efad 	.word	0x0800efad
 800e9b8:	200002c0 	.word	0x200002c0
 800e9bc:	200000cc 	.word	0x200000cc
 800e9c0:	200003e0 	.word	0x200003e0
 800e9c4:	200003cc 	.word	0x200003cc
 800e9c8:	200003c4 	.word	0x200003c4

0800e9cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e9d0:	4b04      	ldr	r3, [pc, #16]	; (800e9e4 <vTaskSuspendAll+0x18>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	4a03      	ldr	r2, [pc, #12]	; (800e9e4 <vTaskSuspendAll+0x18>)
 800e9d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e9da:	bf00      	nop
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	200003e8 	.word	0x200003e8

0800e9e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e9f6:	4b41      	ldr	r3, [pc, #260]	; (800eafc <xTaskResumeAll+0x114>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d10a      	bne.n	800ea14 <xTaskResumeAll+0x2c>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	603b      	str	r3, [r7, #0]
}
 800ea10:	bf00      	nop
 800ea12:	e7fe      	b.n	800ea12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea14:	f000 ff0e 	bl	800f834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea18:	4b38      	ldr	r3, [pc, #224]	; (800eafc <xTaskResumeAll+0x114>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	4a37      	ldr	r2, [pc, #220]	; (800eafc <xTaskResumeAll+0x114>)
 800ea20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea22:	4b36      	ldr	r3, [pc, #216]	; (800eafc <xTaskResumeAll+0x114>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d161      	bne.n	800eaee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea2a:	4b35      	ldr	r3, [pc, #212]	; (800eb00 <xTaskResumeAll+0x118>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d05d      	beq.n	800eaee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea32:	e02e      	b.n	800ea92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea34:	4b33      	ldr	r3, [pc, #204]	; (800eb04 <xTaskResumeAll+0x11c>)
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	3318      	adds	r3, #24
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe fd63 	bl	800d50c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe fd5e 	bl	800d50c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea54:	2201      	movs	r2, #1
 800ea56:	409a      	lsls	r2, r3
 800ea58:	4b2b      	ldr	r3, [pc, #172]	; (800eb08 <xTaskResumeAll+0x120>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	4a2a      	ldr	r2, [pc, #168]	; (800eb08 <xTaskResumeAll+0x120>)
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea66:	4613      	mov	r3, r2
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4413      	add	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4a27      	ldr	r2, [pc, #156]	; (800eb0c <xTaskResumeAll+0x124>)
 800ea70:	441a      	add	r2, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	3304      	adds	r3, #4
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f7fe fcea 	bl	800d452 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea82:	4b23      	ldr	r3, [pc, #140]	; (800eb10 <xTaskResumeAll+0x128>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d302      	bcc.n	800ea92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ea8c:	4b21      	ldr	r3, [pc, #132]	; (800eb14 <xTaskResumeAll+0x12c>)
 800ea8e:	2201      	movs	r2, #1
 800ea90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea92:	4b1c      	ldr	r3, [pc, #112]	; (800eb04 <xTaskResumeAll+0x11c>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1cc      	bne.n	800ea34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d001      	beq.n	800eaa4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eaa0:	f000 fb58 	bl	800f154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eaa4:	4b1c      	ldr	r3, [pc, #112]	; (800eb18 <xTaskResumeAll+0x130>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d010      	beq.n	800ead2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eab0:	f000 f858 	bl	800eb64 <xTaskIncrementTick>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800eaba:	4b16      	ldr	r3, [pc, #88]	; (800eb14 <xTaskResumeAll+0x12c>)
 800eabc:	2201      	movs	r2, #1
 800eabe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3b01      	subs	r3, #1
 800eac4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1f1      	bne.n	800eab0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800eacc:	4b12      	ldr	r3, [pc, #72]	; (800eb18 <xTaskResumeAll+0x130>)
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ead2:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <xTaskResumeAll+0x12c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d009      	beq.n	800eaee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eada:	2301      	movs	r3, #1
 800eadc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eade:	4b0f      	ldr	r3, [pc, #60]	; (800eb1c <xTaskResumeAll+0x134>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eaee:	f000 fed1 	bl	800f894 <vPortExitCritical>

	return xAlreadyYielded;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	200003e8 	.word	0x200003e8
 800eb00:	200003c0 	.word	0x200003c0
 800eb04:	20000380 	.word	0x20000380
 800eb08:	200003c8 	.word	0x200003c8
 800eb0c:	200002c4 	.word	0x200002c4
 800eb10:	200002c0 	.word	0x200002c0
 800eb14:	200003d4 	.word	0x200003d4
 800eb18:	200003d0 	.word	0x200003d0
 800eb1c:	e000ed04 	.word	0xe000ed04

0800eb20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eb26:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <xTaskGetTickCount+0x1c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eb2c:	687b      	ldr	r3, [r7, #4]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	200003c4 	.word	0x200003c4

0800eb40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb46:	f000 ff57 	bl	800f9f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800eb4e:	4b04      	ldr	r3, [pc, #16]	; (800eb60 <xTaskGetTickCountFromISR+0x20>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb54:	683b      	ldr	r3, [r7, #0]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	200003c4 	.word	0x200003c4

0800eb64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb6e:	4b4e      	ldr	r3, [pc, #312]	; (800eca8 <xTaskIncrementTick+0x144>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f040 808e 	bne.w	800ec94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eb78:	4b4c      	ldr	r3, [pc, #304]	; (800ecac <xTaskIncrementTick+0x148>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eb80:	4a4a      	ldr	r2, [pc, #296]	; (800ecac <xTaskIncrementTick+0x148>)
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d120      	bne.n	800ebce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eb8c:	4b48      	ldr	r3, [pc, #288]	; (800ecb0 <xTaskIncrementTick+0x14c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00a      	beq.n	800ebac <xTaskIncrementTick+0x48>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	603b      	str	r3, [r7, #0]
}
 800eba8:	bf00      	nop
 800ebaa:	e7fe      	b.n	800ebaa <xTaskIncrementTick+0x46>
 800ebac:	4b40      	ldr	r3, [pc, #256]	; (800ecb0 <xTaskIncrementTick+0x14c>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	4b40      	ldr	r3, [pc, #256]	; (800ecb4 <xTaskIncrementTick+0x150>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a3e      	ldr	r2, [pc, #248]	; (800ecb0 <xTaskIncrementTick+0x14c>)
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	4a3e      	ldr	r2, [pc, #248]	; (800ecb4 <xTaskIncrementTick+0x150>)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	4b3d      	ldr	r3, [pc, #244]	; (800ecb8 <xTaskIncrementTick+0x154>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	4a3c      	ldr	r2, [pc, #240]	; (800ecb8 <xTaskIncrementTick+0x154>)
 800ebc8:	6013      	str	r3, [r2, #0]
 800ebca:	f000 fac3 	bl	800f154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ebce:	4b3b      	ldr	r3, [pc, #236]	; (800ecbc <xTaskIncrementTick+0x158>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d348      	bcc.n	800ec6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebd8:	4b35      	ldr	r3, [pc, #212]	; (800ecb0 <xTaskIncrementTick+0x14c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d104      	bne.n	800ebec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebe2:	4b36      	ldr	r3, [pc, #216]	; (800ecbc <xTaskIncrementTick+0x158>)
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	601a      	str	r2, [r3, #0]
					break;
 800ebea:	e03e      	b.n	800ec6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebec:	4b30      	ldr	r3, [pc, #192]	; (800ecb0 <xTaskIncrementTick+0x14c>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ebfc:	693a      	ldr	r2, [r7, #16]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d203      	bcs.n	800ec0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec04:	4a2d      	ldr	r2, [pc, #180]	; (800ecbc <xTaskIncrementTick+0x158>)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ec0a:	e02e      	b.n	800ec6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe fc7b 	bl	800d50c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d004      	beq.n	800ec28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	3318      	adds	r3, #24
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe fc72 	bl	800d50c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	409a      	lsls	r2, r3
 800ec30:	4b23      	ldr	r3, [pc, #140]	; (800ecc0 <xTaskIncrementTick+0x15c>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	4a22      	ldr	r2, [pc, #136]	; (800ecc0 <xTaskIncrementTick+0x15c>)
 800ec38:	6013      	str	r3, [r2, #0]
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec3e:	4613      	mov	r3, r2
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	4413      	add	r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4a1f      	ldr	r2, [pc, #124]	; (800ecc4 <xTaskIncrementTick+0x160>)
 800ec48:	441a      	add	r2, r3
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	3304      	adds	r3, #4
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4610      	mov	r0, r2
 800ec52:	f7fe fbfe 	bl	800d452 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5a:	4b1b      	ldr	r3, [pc, #108]	; (800ecc8 <xTaskIncrementTick+0x164>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d3b9      	bcc.n	800ebd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ec64:	2301      	movs	r3, #1
 800ec66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec68:	e7b6      	b.n	800ebd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ec6a:	4b17      	ldr	r3, [pc, #92]	; (800ecc8 <xTaskIncrementTick+0x164>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	4914      	ldr	r1, [pc, #80]	; (800ecc4 <xTaskIncrementTick+0x160>)
 800ec72:	4613      	mov	r3, r2
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	4413      	add	r3, r2
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	440b      	add	r3, r1
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d901      	bls.n	800ec86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ec82:	2301      	movs	r3, #1
 800ec84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ec86:	4b11      	ldr	r3, [pc, #68]	; (800eccc <xTaskIncrementTick+0x168>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	617b      	str	r3, [r7, #20]
 800ec92:	e004      	b.n	800ec9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ec94:	4b0e      	ldr	r3, [pc, #56]	; (800ecd0 <xTaskIncrementTick+0x16c>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	4a0d      	ldr	r2, [pc, #52]	; (800ecd0 <xTaskIncrementTick+0x16c>)
 800ec9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ec9e:	697b      	ldr	r3, [r7, #20]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3718      	adds	r7, #24
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	200003e8 	.word	0x200003e8
 800ecac:	200003c4 	.word	0x200003c4
 800ecb0:	20000378 	.word	0x20000378
 800ecb4:	2000037c 	.word	0x2000037c
 800ecb8:	200003d8 	.word	0x200003d8
 800ecbc:	200003e0 	.word	0x200003e0
 800ecc0:	200003c8 	.word	0x200003c8
 800ecc4:	200002c4 	.word	0x200002c4
 800ecc8:	200002c0 	.word	0x200002c0
 800eccc:	200003d4 	.word	0x200003d4
 800ecd0:	200003d0 	.word	0x200003d0

0800ecd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b087      	sub	sp, #28
 800ecd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ecda:	4b29      	ldr	r3, [pc, #164]	; (800ed80 <vTaskSwitchContext+0xac>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d003      	beq.n	800ecea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ece2:	4b28      	ldr	r3, [pc, #160]	; (800ed84 <vTaskSwitchContext+0xb0>)
 800ece4:	2201      	movs	r2, #1
 800ece6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ece8:	e044      	b.n	800ed74 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ecea:	4b26      	ldr	r3, [pc, #152]	; (800ed84 <vTaskSwitchContext+0xb0>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecf0:	4b25      	ldr	r3, [pc, #148]	; (800ed88 <vTaskSwitchContext+0xb4>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	fab3 f383 	clz	r3, r3
 800ecfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ecfe:	7afb      	ldrb	r3, [r7, #11]
 800ed00:	f1c3 031f 	rsb	r3, r3, #31
 800ed04:	617b      	str	r3, [r7, #20]
 800ed06:	4921      	ldr	r1, [pc, #132]	; (800ed8c <vTaskSwitchContext+0xb8>)
 800ed08:	697a      	ldr	r2, [r7, #20]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4413      	add	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	440b      	add	r3, r1
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10a      	bne.n	800ed30 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	607b      	str	r3, [r7, #4]
}
 800ed2c:	bf00      	nop
 800ed2e:	e7fe      	b.n	800ed2e <vTaskSwitchContext+0x5a>
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	4613      	mov	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4a14      	ldr	r2, [pc, #80]	; (800ed8c <vTaskSwitchContext+0xb8>)
 800ed3c:	4413      	add	r3, r2
 800ed3e:	613b      	str	r3, [r7, #16]
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	685a      	ldr	r2, [r3, #4]
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	605a      	str	r2, [r3, #4]
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	685a      	ldr	r2, [r3, #4]
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	3308      	adds	r3, #8
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d104      	bne.n	800ed60 <vTaskSwitchContext+0x8c>
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	605a      	str	r2, [r3, #4]
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	4a0a      	ldr	r2, [pc, #40]	; (800ed90 <vTaskSwitchContext+0xbc>)
 800ed68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed6a:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <vTaskSwitchContext+0xbc>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	334c      	adds	r3, #76	; 0x4c
 800ed70:	4a08      	ldr	r2, [pc, #32]	; (800ed94 <vTaskSwitchContext+0xc0>)
 800ed72:	6013      	str	r3, [r2, #0]
}
 800ed74:	bf00      	nop
 800ed76:	371c      	adds	r7, #28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	200003e8 	.word	0x200003e8
 800ed84:	200003d4 	.word	0x200003d4
 800ed88:	200003c8 	.word	0x200003c8
 800ed8c:	200002c4 	.word	0x200002c4
 800ed90:	200002c0 	.word	0x200002c0
 800ed94:	200000cc 	.word	0x200000cc

0800ed98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10a      	bne.n	800edbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	60fb      	str	r3, [r7, #12]
}
 800edba:	bf00      	nop
 800edbc:	e7fe      	b.n	800edbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800edbe:	4b07      	ldr	r3, [pc, #28]	; (800eddc <vTaskPlaceOnEventList+0x44>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	3318      	adds	r3, #24
 800edc4:	4619      	mov	r1, r3
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7fe fb67 	bl	800d49a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edcc:	2101      	movs	r1, #1
 800edce:	6838      	ldr	r0, [r7, #0]
 800edd0:	f000 fb9c 	bl	800f50c <prvAddCurrentTaskToDelayedList>
}
 800edd4:	bf00      	nop
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	200002c0 	.word	0x200002c0

0800ede0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10a      	bne.n	800ee0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	60fb      	str	r3, [r7, #12]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	3318      	adds	r3, #24
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fe fb7b 	bl	800d50c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee16:	4b1d      	ldr	r3, [pc, #116]	; (800ee8c <xTaskRemoveFromEventList+0xac>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d11c      	bne.n	800ee58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe fb72 	bl	800d50c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	409a      	lsls	r2, r3
 800ee30:	4b17      	ldr	r3, [pc, #92]	; (800ee90 <xTaskRemoveFromEventList+0xb0>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	4a16      	ldr	r2, [pc, #88]	; (800ee90 <xTaskRemoveFromEventList+0xb0>)
 800ee38:	6013      	str	r3, [r2, #0]
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4a13      	ldr	r2, [pc, #76]	; (800ee94 <xTaskRemoveFromEventList+0xb4>)
 800ee48:	441a      	add	r2, r3
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7fe fafe 	bl	800d452 <vListInsertEnd>
 800ee56:	e005      	b.n	800ee64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	3318      	adds	r3, #24
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	480e      	ldr	r0, [pc, #56]	; (800ee98 <xTaskRemoveFromEventList+0xb8>)
 800ee60:	f7fe faf7 	bl	800d452 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee68:	4b0c      	ldr	r3, [pc, #48]	; (800ee9c <xTaskRemoveFromEventList+0xbc>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d905      	bls.n	800ee7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ee72:	2301      	movs	r3, #1
 800ee74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ee76:	4b0a      	ldr	r3, [pc, #40]	; (800eea0 <xTaskRemoveFromEventList+0xc0>)
 800ee78:	2201      	movs	r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	e001      	b.n	800ee82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ee82:	697b      	ldr	r3, [r7, #20]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3718      	adds	r7, #24
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	200003e8 	.word	0x200003e8
 800ee90:	200003c8 	.word	0x200003c8
 800ee94:	200002c4 	.word	0x200002c4
 800ee98:	20000380 	.word	0x20000380
 800ee9c:	200002c0 	.word	0x200002c0
 800eea0:	200003d4 	.word	0x200003d4

0800eea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eeac:	4b06      	ldr	r3, [pc, #24]	; (800eec8 <vTaskInternalSetTimeOutState+0x24>)
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eeb4:	4b05      	ldr	r3, [pc, #20]	; (800eecc <vTaskInternalSetTimeOutState+0x28>)
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	605a      	str	r2, [r3, #4]
}
 800eebc:	bf00      	nop
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	200003d8 	.word	0x200003d8
 800eecc:	200003c4 	.word	0x200003c4

0800eed0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	613b      	str	r3, [r7, #16]
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10a      	bne.n	800ef12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	60fb      	str	r3, [r7, #12]
}
 800ef0e:	bf00      	nop
 800ef10:	e7fe      	b.n	800ef10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ef12:	f000 fc8f 	bl	800f834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ef16:	4b1d      	ldr	r3, [pc, #116]	; (800ef8c <xTaskCheckForTimeOut+0xbc>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef2e:	d102      	bne.n	800ef36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ef30:	2300      	movs	r3, #0
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	e023      	b.n	800ef7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	4b15      	ldr	r3, [pc, #84]	; (800ef90 <xTaskCheckForTimeOut+0xc0>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d007      	beq.n	800ef52 <xTaskCheckForTimeOut+0x82>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	69ba      	ldr	r2, [r7, #24]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d302      	bcc.n	800ef52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	61fb      	str	r3, [r7, #28]
 800ef50:	e015      	b.n	800ef7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	697a      	ldr	r2, [r7, #20]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d20b      	bcs.n	800ef74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	1ad2      	subs	r2, r2, r3
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff ff9b 	bl	800eea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	61fb      	str	r3, [r7, #28]
 800ef72:	e004      	b.n	800ef7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2200      	movs	r2, #0
 800ef78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ef7e:	f000 fc89 	bl	800f894 <vPortExitCritical>

	return xReturn;
 800ef82:	69fb      	ldr	r3, [r7, #28]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3720      	adds	r7, #32
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	200003c4 	.word	0x200003c4
 800ef90:	200003d8 	.word	0x200003d8

0800ef94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ef94:	b480      	push	{r7}
 800ef96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ef98:	4b03      	ldr	r3, [pc, #12]	; (800efa8 <vTaskMissedYield+0x14>)
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	601a      	str	r2, [r3, #0]
}
 800ef9e:	bf00      	nop
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	200003d4 	.word	0x200003d4

0800efac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800efb4:	f000 f852 	bl	800f05c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800efb8:	4b06      	ldr	r3, [pc, #24]	; (800efd4 <prvIdleTask+0x28>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d9f9      	bls.n	800efb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800efc0:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <prvIdleTask+0x2c>)
 800efc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc6:	601a      	str	r2, [r3, #0]
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800efd0:	e7f0      	b.n	800efb4 <prvIdleTask+0x8>
 800efd2:	bf00      	nop
 800efd4:	200002c4 	.word	0x200002c4
 800efd8:	e000ed04 	.word	0xe000ed04

0800efdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efe2:	2300      	movs	r3, #0
 800efe4:	607b      	str	r3, [r7, #4]
 800efe6:	e00c      	b.n	800f002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	4613      	mov	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4a12      	ldr	r2, [pc, #72]	; (800f03c <prvInitialiseTaskLists+0x60>)
 800eff4:	4413      	add	r3, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fe f9fe 	bl	800d3f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	3301      	adds	r3, #1
 800f000:	607b      	str	r3, [r7, #4]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b06      	cmp	r3, #6
 800f006:	d9ef      	bls.n	800efe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f008:	480d      	ldr	r0, [pc, #52]	; (800f040 <prvInitialiseTaskLists+0x64>)
 800f00a:	f7fe f9f5 	bl	800d3f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f00e:	480d      	ldr	r0, [pc, #52]	; (800f044 <prvInitialiseTaskLists+0x68>)
 800f010:	f7fe f9f2 	bl	800d3f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f014:	480c      	ldr	r0, [pc, #48]	; (800f048 <prvInitialiseTaskLists+0x6c>)
 800f016:	f7fe f9ef 	bl	800d3f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f01a:	480c      	ldr	r0, [pc, #48]	; (800f04c <prvInitialiseTaskLists+0x70>)
 800f01c:	f7fe f9ec 	bl	800d3f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f020:	480b      	ldr	r0, [pc, #44]	; (800f050 <prvInitialiseTaskLists+0x74>)
 800f022:	f7fe f9e9 	bl	800d3f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f026:	4b0b      	ldr	r3, [pc, #44]	; (800f054 <prvInitialiseTaskLists+0x78>)
 800f028:	4a05      	ldr	r2, [pc, #20]	; (800f040 <prvInitialiseTaskLists+0x64>)
 800f02a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f02c:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <prvInitialiseTaskLists+0x7c>)
 800f02e:	4a05      	ldr	r2, [pc, #20]	; (800f044 <prvInitialiseTaskLists+0x68>)
 800f030:	601a      	str	r2, [r3, #0]
}
 800f032:	bf00      	nop
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	200002c4 	.word	0x200002c4
 800f040:	20000350 	.word	0x20000350
 800f044:	20000364 	.word	0x20000364
 800f048:	20000380 	.word	0x20000380
 800f04c:	20000394 	.word	0x20000394
 800f050:	200003ac 	.word	0x200003ac
 800f054:	20000378 	.word	0x20000378
 800f058:	2000037c 	.word	0x2000037c

0800f05c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f062:	e019      	b.n	800f098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f064:	f000 fbe6 	bl	800f834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f068:	4b10      	ldr	r3, [pc, #64]	; (800f0ac <prvCheckTasksWaitingTermination+0x50>)
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	3304      	adds	r3, #4
 800f074:	4618      	mov	r0, r3
 800f076:	f7fe fa49 	bl	800d50c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f07a:	4b0d      	ldr	r3, [pc, #52]	; (800f0b0 <prvCheckTasksWaitingTermination+0x54>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	3b01      	subs	r3, #1
 800f080:	4a0b      	ldr	r2, [pc, #44]	; (800f0b0 <prvCheckTasksWaitingTermination+0x54>)
 800f082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f084:	4b0b      	ldr	r3, [pc, #44]	; (800f0b4 <prvCheckTasksWaitingTermination+0x58>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3b01      	subs	r3, #1
 800f08a:	4a0a      	ldr	r2, [pc, #40]	; (800f0b4 <prvCheckTasksWaitingTermination+0x58>)
 800f08c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f08e:	f000 fc01 	bl	800f894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f848 	bl	800f128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f098:	4b06      	ldr	r3, [pc, #24]	; (800f0b4 <prvCheckTasksWaitingTermination+0x58>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1e1      	bne.n	800f064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f0a0:	bf00      	nop
 800f0a2:	bf00      	nop
 800f0a4:	3708      	adds	r7, #8
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	20000394 	.word	0x20000394
 800f0b0:	200003c0 	.word	0x200003c0
 800f0b4:	200003a8 	.word	0x200003a8

0800f0b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f0c4:	e005      	b.n	800f0d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	2ba5      	cmp	r3, #165	; 0xa5
 800f0d8:	d0f5      	beq.n	800f0c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	089b      	lsrs	r3, r3, #2
 800f0de:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	b29b      	uxth	r3, r3
	}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d102      	bne.n	800f104 <uxTaskGetStackHighWaterMark+0x14>
 800f0fe:	4b09      	ldr	r3, [pc, #36]	; (800f124 <uxTaskGetStackHighWaterMark+0x34>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	e000      	b.n	800f106 <uxTaskGetStackHighWaterMark+0x16>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f10c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800f10e:	6938      	ldr	r0, [r7, #16]
 800f110:	f7ff ffd2 	bl	800f0b8 <prvTaskCheckFreeStackSpace>
 800f114:	4603      	mov	r3, r0
 800f116:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800f118:	68fb      	ldr	r3, [r7, #12]
	}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3718      	adds	r7, #24
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	200002c0 	.word	0x200002c0

0800f128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	334c      	adds	r3, #76	; 0x4c
 800f134:	4618      	mov	r0, r3
 800f136:	f000 fed9 	bl	800feec <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 fd66 	bl	800fc10 <vPortFree>
			vPortFree( pxTCB );
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 fd63 	bl	800fc10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f14a:	bf00      	nop
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f15a:	4b0c      	ldr	r3, [pc, #48]	; (800f18c <prvResetNextTaskUnblockTime+0x38>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d104      	bne.n	800f16e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f164:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <prvResetNextTaskUnblockTime+0x3c>)
 800f166:	f04f 32ff 	mov.w	r2, #4294967295
 800f16a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f16c:	e008      	b.n	800f180 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f16e:	4b07      	ldr	r3, [pc, #28]	; (800f18c <prvResetNextTaskUnblockTime+0x38>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	4a04      	ldr	r2, [pc, #16]	; (800f190 <prvResetNextTaskUnblockTime+0x3c>)
 800f17e:	6013      	str	r3, [r2, #0]
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr
 800f18c:	20000378 	.word	0x20000378
 800f190:	200003e0 	.word	0x200003e0

0800f194 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f19a:	4b0b      	ldr	r3, [pc, #44]	; (800f1c8 <xTaskGetSchedulerState+0x34>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d102      	bne.n	800f1a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	607b      	str	r3, [r7, #4]
 800f1a6:	e008      	b.n	800f1ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1a8:	4b08      	ldr	r3, [pc, #32]	; (800f1cc <xTaskGetSchedulerState+0x38>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d102      	bne.n	800f1b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f1b0:	2302      	movs	r3, #2
 800f1b2:	607b      	str	r3, [r7, #4]
 800f1b4:	e001      	b.n	800f1ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f1ba:	687b      	ldr	r3, [r7, #4]
	}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	200003cc 	.word	0x200003cc
 800f1cc:	200003e8 	.word	0x200003e8

0800f1d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d05e      	beq.n	800f2a4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1ea:	4b31      	ldr	r3, [pc, #196]	; (800f2b0 <xTaskPriorityInherit+0xe0>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d24e      	bcs.n	800f292 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	db06      	blt.n	800f20a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1fc:	4b2c      	ldr	r3, [pc, #176]	; (800f2b0 <xTaskPriorityInherit+0xe0>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	f1c3 0207 	rsb	r2, r3, #7
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	6959      	ldr	r1, [r3, #20]
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f212:	4613      	mov	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4a26      	ldr	r2, [pc, #152]	; (800f2b4 <xTaskPriorityInherit+0xe4>)
 800f21c:	4413      	add	r3, r2
 800f21e:	4299      	cmp	r1, r3
 800f220:	d12f      	bne.n	800f282 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	3304      	adds	r3, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f7fe f970 	bl	800d50c <uxListRemove>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10a      	bne.n	800f248 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f236:	2201      	movs	r2, #1
 800f238:	fa02 f303 	lsl.w	r3, r2, r3
 800f23c:	43da      	mvns	r2, r3
 800f23e:	4b1e      	ldr	r3, [pc, #120]	; (800f2b8 <xTaskPriorityInherit+0xe8>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4013      	ands	r3, r2
 800f244:	4a1c      	ldr	r2, [pc, #112]	; (800f2b8 <xTaskPriorityInherit+0xe8>)
 800f246:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f248:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <xTaskPriorityInherit+0xe0>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f256:	2201      	movs	r2, #1
 800f258:	409a      	lsls	r2, r3
 800f25a:	4b17      	ldr	r3, [pc, #92]	; (800f2b8 <xTaskPriorityInherit+0xe8>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4313      	orrs	r3, r2
 800f260:	4a15      	ldr	r2, [pc, #84]	; (800f2b8 <xTaskPriorityInherit+0xe8>)
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f268:	4613      	mov	r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4413      	add	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4a10      	ldr	r2, [pc, #64]	; (800f2b4 <xTaskPriorityInherit+0xe4>)
 800f272:	441a      	add	r2, r3
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	3304      	adds	r3, #4
 800f278:	4619      	mov	r1, r3
 800f27a:	4610      	mov	r0, r2
 800f27c:	f7fe f8e9 	bl	800d452 <vListInsertEnd>
 800f280:	e004      	b.n	800f28c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f282:	4b0b      	ldr	r3, [pc, #44]	; (800f2b0 <xTaskPriorityInherit+0xe0>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f28c:	2301      	movs	r3, #1
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	e008      	b.n	800f2a4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f296:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <xTaskPriorityInherit+0xe0>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d201      	bcs.n	800f2a4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
	}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	200002c0 	.word	0x200002c0
 800f2b4:	200002c4 	.word	0x200002c4
 800f2b8:	200003c8 	.word	0x200003c8

0800f2bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d06e      	beq.n	800f3b0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2d2:	4b3a      	ldr	r3, [pc, #232]	; (800f3bc <xTaskPriorityDisinherit+0x100>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d00a      	beq.n	800f2f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	f383 8811 	msr	BASEPRI, r3
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	60fb      	str	r3, [r7, #12]
}
 800f2ee:	bf00      	nop
 800f2f0:	e7fe      	b.n	800f2f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10a      	bne.n	800f310 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	60bb      	str	r3, [r7, #8]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f314:	1e5a      	subs	r2, r3, #1
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f322:	429a      	cmp	r2, r3
 800f324:	d044      	beq.n	800f3b0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d140      	bne.n	800f3b0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	3304      	adds	r3, #4
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe f8ea 	bl	800d50c <uxListRemove>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d115      	bne.n	800f36a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f342:	491f      	ldr	r1, [pc, #124]	; (800f3c0 <xTaskPriorityDisinherit+0x104>)
 800f344:	4613      	mov	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4413      	add	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	440b      	add	r3, r1
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10a      	bne.n	800f36a <xTaskPriorityDisinherit+0xae>
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	2201      	movs	r2, #1
 800f35a:	fa02 f303 	lsl.w	r3, r2, r3
 800f35e:	43da      	mvns	r2, r3
 800f360:	4b18      	ldr	r3, [pc, #96]	; (800f3c4 <xTaskPriorityDisinherit+0x108>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4013      	ands	r3, r2
 800f366:	4a17      	ldr	r2, [pc, #92]	; (800f3c4 <xTaskPriorityDisinherit+0x108>)
 800f368:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f376:	f1c3 0207 	rsb	r2, r3, #7
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f382:	2201      	movs	r2, #1
 800f384:	409a      	lsls	r2, r3
 800f386:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <xTaskPriorityDisinherit+0x108>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	4a0d      	ldr	r2, [pc, #52]	; (800f3c4 <xTaskPriorityDisinherit+0x108>)
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f394:	4613      	mov	r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4a08      	ldr	r2, [pc, #32]	; (800f3c0 <xTaskPriorityDisinherit+0x104>)
 800f39e:	441a      	add	r2, r3
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	4610      	mov	r0, r2
 800f3a8:	f7fe f853 	bl	800d452 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f3b0:	697b      	ldr	r3, [r7, #20]
	}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3718      	adds	r7, #24
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	200002c0 	.word	0x200002c0
 800f3c0:	200002c4 	.word	0x200002c4
 800f3c4:	200003c8 	.word	0x200003c8

0800f3c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d077      	beq.n	800f4d0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10a      	bne.n	800f3fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	60fb      	str	r3, [r7, #12]
}
 800f3fa:	bf00      	nop
 800f3fc:	e7fe      	b.n	800f3fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	429a      	cmp	r2, r3
 800f406:	d902      	bls.n	800f40e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	61fb      	str	r3, [r7, #28]
 800f40c:	e002      	b.n	800f414 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f412:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f418:	69fa      	ldr	r2, [r7, #28]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d058      	beq.n	800f4d0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f422:	697a      	ldr	r2, [r7, #20]
 800f424:	429a      	cmp	r2, r3
 800f426:	d153      	bne.n	800f4d0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f428:	4b2b      	ldr	r3, [pc, #172]	; (800f4d8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	69ba      	ldr	r2, [r7, #24]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d10a      	bne.n	800f448 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f436:	f383 8811 	msr	BASEPRI, r3
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	60bb      	str	r3, [r7, #8]
}
 800f444:	bf00      	nop
 800f446:	e7fe      	b.n	800f446 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	69fa      	ldr	r2, [r7, #28]
 800f452:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	699b      	ldr	r3, [r3, #24]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	db04      	blt.n	800f466 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	f1c3 0207 	rsb	r2, r3, #7
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	6959      	ldr	r1, [r3, #20]
 800f46a:	693a      	ldr	r2, [r7, #16]
 800f46c:	4613      	mov	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	4a19      	ldr	r2, [pc, #100]	; (800f4dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f476:	4413      	add	r3, r2
 800f478:	4299      	cmp	r1, r3
 800f47a:	d129      	bne.n	800f4d0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	3304      	adds	r3, #4
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe f843 	bl	800d50c <uxListRemove>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10a      	bne.n	800f4a2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f490:	2201      	movs	r2, #1
 800f492:	fa02 f303 	lsl.w	r3, r2, r3
 800f496:	43da      	mvns	r2, r3
 800f498:	4b11      	ldr	r3, [pc, #68]	; (800f4e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4013      	ands	r3, r2
 800f49e:	4a10      	ldr	r2, [pc, #64]	; (800f4e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f4a0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	409a      	lsls	r2, r3
 800f4aa:	4b0d      	ldr	r3, [pc, #52]	; (800f4e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	4a0b      	ldr	r2, [pc, #44]	; (800f4e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	4413      	add	r3, r2
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4a06      	ldr	r2, [pc, #24]	; (800f4dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f4c2:	441a      	add	r2, r3
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4610      	mov	r0, r2
 800f4cc:	f7fd ffc1 	bl	800d452 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4d0:	bf00      	nop
 800f4d2:	3720      	adds	r7, #32
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200002c0 	.word	0x200002c0
 800f4dc:	200002c4 	.word	0x200002c4
 800f4e0:	200003c8 	.word	0x200003c8

0800f4e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f4e4:	b480      	push	{r7}
 800f4e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f4e8:	4b07      	ldr	r3, [pc, #28]	; (800f508 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d004      	beq.n	800f4fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f4f0:	4b05      	ldr	r3, [pc, #20]	; (800f508 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4f6:	3201      	adds	r2, #1
 800f4f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f4fa:	4b03      	ldr	r3, [pc, #12]	; (800f508 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
	}
 800f4fe:	4618      	mov	r0, r3
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	200002c0 	.word	0x200002c0

0800f50c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f516:	4b29      	ldr	r3, [pc, #164]	; (800f5bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f51c:	4b28      	ldr	r3, [pc, #160]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	3304      	adds	r3, #4
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fff2 	bl	800d50c <uxListRemove>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10b      	bne.n	800f546 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f52e:	4b24      	ldr	r3, [pc, #144]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f534:	2201      	movs	r2, #1
 800f536:	fa02 f303 	lsl.w	r3, r2, r3
 800f53a:	43da      	mvns	r2, r3
 800f53c:	4b21      	ldr	r3, [pc, #132]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4013      	ands	r3, r2
 800f542:	4a20      	ldr	r2, [pc, #128]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f544:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54c:	d10a      	bne.n	800f564 <prvAddCurrentTaskToDelayedList+0x58>
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d007      	beq.n	800f564 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f554:	4b1a      	ldr	r3, [pc, #104]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	3304      	adds	r3, #4
 800f55a:	4619      	mov	r1, r3
 800f55c:	481a      	ldr	r0, [pc, #104]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f55e:	f7fd ff78 	bl	800d452 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f562:	e026      	b.n	800f5b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4413      	add	r3, r2
 800f56a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f56c:	4b14      	ldr	r3, [pc, #80]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68ba      	ldr	r2, [r7, #8]
 800f572:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d209      	bcs.n	800f590 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f57c:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	4b0f      	ldr	r3, [pc, #60]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	3304      	adds	r3, #4
 800f586:	4619      	mov	r1, r3
 800f588:	4610      	mov	r0, r2
 800f58a:	f7fd ff86 	bl	800d49a <vListInsert>
}
 800f58e:	e010      	b.n	800f5b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f590:	4b0f      	ldr	r3, [pc, #60]	; (800f5d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	4b0a      	ldr	r3, [pc, #40]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3304      	adds	r3, #4
 800f59a:	4619      	mov	r1, r3
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7fd ff7c 	bl	800d49a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5a2:	4b0c      	ldr	r3, [pc, #48]	; (800f5d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d202      	bcs.n	800f5b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f5ac:	4a09      	ldr	r2, [pc, #36]	; (800f5d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	6013      	str	r3, [r2, #0]
}
 800f5b2:	bf00      	nop
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	200003c4 	.word	0x200003c4
 800f5c0:	200002c0 	.word	0x200002c0
 800f5c4:	200003c8 	.word	0x200003c8
 800f5c8:	200003ac 	.word	0x200003ac
 800f5cc:	2000037c 	.word	0x2000037c
 800f5d0:	20000378 	.word	0x20000378
 800f5d4:	200003e0 	.word	0x200003e0

0800f5d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3b04      	subs	r3, #4
 800f5e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3b04      	subs	r3, #4
 800f5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	f023 0201 	bic.w	r2, r3, #1
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	3b04      	subs	r3, #4
 800f606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f608:	4a0c      	ldr	r2, [pc, #48]	; (800f63c <pxPortInitialiseStack+0x64>)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3b14      	subs	r3, #20
 800f612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3b04      	subs	r3, #4
 800f61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f06f 0202 	mvn.w	r2, #2
 800f626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	3b20      	subs	r3, #32
 800f62c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f62e:	68fb      	ldr	r3, [r7, #12]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	0800f641 	.word	0x0800f641

0800f640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f64a:	4b12      	ldr	r3, [pc, #72]	; (800f694 <prvTaskExitError+0x54>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f652:	d00a      	beq.n	800f66a <prvTaskExitError+0x2a>
	__asm volatile
 800f654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	60fb      	str	r3, [r7, #12]
}
 800f666:	bf00      	nop
 800f668:	e7fe      	b.n	800f668 <prvTaskExitError+0x28>
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	60bb      	str	r3, [r7, #8]
}
 800f67c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f67e:	bf00      	nop
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d0fc      	beq.n	800f680 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f686:	bf00      	nop
 800f688:	bf00      	nop
 800f68a:	3714      	adds	r7, #20
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	200000c8 	.word	0x200000c8
	...

0800f6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f6a0:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <pxCurrentTCBConst2>)
 800f6a2:	6819      	ldr	r1, [r3, #0]
 800f6a4:	6808      	ldr	r0, [r1, #0]
 800f6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6aa:	f380 8809 	msr	PSP, r0
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f04f 0000 	mov.w	r0, #0
 800f6b6:	f380 8811 	msr	BASEPRI, r0
 800f6ba:	4770      	bx	lr
 800f6bc:	f3af 8000 	nop.w

0800f6c0 <pxCurrentTCBConst2>:
 800f6c0:	200002c0 	.word	0x200002c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f6c4:	bf00      	nop
 800f6c6:	bf00      	nop

0800f6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f6c8:	4808      	ldr	r0, [pc, #32]	; (800f6ec <prvPortStartFirstTask+0x24>)
 800f6ca:	6800      	ldr	r0, [r0, #0]
 800f6cc:	6800      	ldr	r0, [r0, #0]
 800f6ce:	f380 8808 	msr	MSP, r0
 800f6d2:	f04f 0000 	mov.w	r0, #0
 800f6d6:	f380 8814 	msr	CONTROL, r0
 800f6da:	b662      	cpsie	i
 800f6dc:	b661      	cpsie	f
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	df00      	svc	0
 800f6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6ea:	bf00      	nop
 800f6ec:	e000ed08 	.word	0xe000ed08

0800f6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f6f6:	4b46      	ldr	r3, [pc, #280]	; (800f810 <xPortStartScheduler+0x120>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a46      	ldr	r2, [pc, #280]	; (800f814 <xPortStartScheduler+0x124>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d10a      	bne.n	800f716 <xPortStartScheduler+0x26>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	613b      	str	r3, [r7, #16]
}
 800f712:	bf00      	nop
 800f714:	e7fe      	b.n	800f714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f716:	4b3e      	ldr	r3, [pc, #248]	; (800f810 <xPortStartScheduler+0x120>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a3f      	ldr	r2, [pc, #252]	; (800f818 <xPortStartScheduler+0x128>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d10a      	bne.n	800f736 <xPortStartScheduler+0x46>
	__asm volatile
 800f720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f724:	f383 8811 	msr	BASEPRI, r3
 800f728:	f3bf 8f6f 	isb	sy
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	60fb      	str	r3, [r7, #12]
}
 800f732:	bf00      	nop
 800f734:	e7fe      	b.n	800f734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f736:	4b39      	ldr	r3, [pc, #228]	; (800f81c <xPortStartScheduler+0x12c>)
 800f738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	22ff      	movs	r2, #255	; 0xff
 800f746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f750:	78fb      	ldrb	r3, [r7, #3]
 800f752:	b2db      	uxtb	r3, r3
 800f754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	4b31      	ldr	r3, [pc, #196]	; (800f820 <xPortStartScheduler+0x130>)
 800f75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f75e:	4b31      	ldr	r3, [pc, #196]	; (800f824 <xPortStartScheduler+0x134>)
 800f760:	2207      	movs	r2, #7
 800f762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f764:	e009      	b.n	800f77a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f766:	4b2f      	ldr	r3, [pc, #188]	; (800f824 <xPortStartScheduler+0x134>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	4a2d      	ldr	r2, [pc, #180]	; (800f824 <xPortStartScheduler+0x134>)
 800f76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f770:	78fb      	ldrb	r3, [r7, #3]
 800f772:	b2db      	uxtb	r3, r3
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	b2db      	uxtb	r3, r3
 800f778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f77a:	78fb      	ldrb	r3, [r7, #3]
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f782:	2b80      	cmp	r3, #128	; 0x80
 800f784:	d0ef      	beq.n	800f766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f786:	4b27      	ldr	r3, [pc, #156]	; (800f824 <xPortStartScheduler+0x134>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f1c3 0307 	rsb	r3, r3, #7
 800f78e:	2b04      	cmp	r3, #4
 800f790:	d00a      	beq.n	800f7a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	60bb      	str	r3, [r7, #8]
}
 800f7a4:	bf00      	nop
 800f7a6:	e7fe      	b.n	800f7a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f7a8:	4b1e      	ldr	r3, [pc, #120]	; (800f824 <xPortStartScheduler+0x134>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	4a1d      	ldr	r2, [pc, #116]	; (800f824 <xPortStartScheduler+0x134>)
 800f7b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f7b2:	4b1c      	ldr	r3, [pc, #112]	; (800f824 <xPortStartScheduler+0x134>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f7ba:	4a1a      	ldr	r2, [pc, #104]	; (800f824 <xPortStartScheduler+0x134>)
 800f7bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f7c6:	4b18      	ldr	r3, [pc, #96]	; (800f828 <xPortStartScheduler+0x138>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a17      	ldr	r2, [pc, #92]	; (800f828 <xPortStartScheduler+0x138>)
 800f7cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7d2:	4b15      	ldr	r3, [pc, #84]	; (800f828 <xPortStartScheduler+0x138>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a14      	ldr	r2, [pc, #80]	; (800f828 <xPortStartScheduler+0x138>)
 800f7d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f7dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f7de:	f000 f8dd 	bl	800f99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7e2:	4b12      	ldr	r3, [pc, #72]	; (800f82c <xPortStartScheduler+0x13c>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7e8:	f000 f8fc 	bl	800f9e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7ec:	4b10      	ldr	r3, [pc, #64]	; (800f830 <xPortStartScheduler+0x140>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a0f      	ldr	r2, [pc, #60]	; (800f830 <xPortStartScheduler+0x140>)
 800f7f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f7f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7f8:	f7ff ff66 	bl	800f6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f7fc:	f7ff fa6a 	bl	800ecd4 <vTaskSwitchContext>
	prvTaskExitError();
 800f800:	f7ff ff1e 	bl	800f640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	e000ed00 	.word	0xe000ed00
 800f814:	410fc271 	.word	0x410fc271
 800f818:	410fc270 	.word	0x410fc270
 800f81c:	e000e400 	.word	0xe000e400
 800f820:	200003ec 	.word	0x200003ec
 800f824:	200003f0 	.word	0x200003f0
 800f828:	e000ed20 	.word	0xe000ed20
 800f82c:	200000c8 	.word	0x200000c8
 800f830:	e000ef34 	.word	0xe000ef34

0800f834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	607b      	str	r3, [r7, #4]
}
 800f84c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f84e:	4b0f      	ldr	r3, [pc, #60]	; (800f88c <vPortEnterCritical+0x58>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3301      	adds	r3, #1
 800f854:	4a0d      	ldr	r2, [pc, #52]	; (800f88c <vPortEnterCritical+0x58>)
 800f856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f858:	4b0c      	ldr	r3, [pc, #48]	; (800f88c <vPortEnterCritical+0x58>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d10f      	bne.n	800f880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f860:	4b0b      	ldr	r3, [pc, #44]	; (800f890 <vPortEnterCritical+0x5c>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <vPortEnterCritical+0x4c>
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	603b      	str	r3, [r7, #0]
}
 800f87c:	bf00      	nop
 800f87e:	e7fe      	b.n	800f87e <vPortEnterCritical+0x4a>
	}
}
 800f880:	bf00      	nop
 800f882:	370c      	adds	r7, #12
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr
 800f88c:	200000c8 	.word	0x200000c8
 800f890:	e000ed04 	.word	0xe000ed04

0800f894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f89a:	4b12      	ldr	r3, [pc, #72]	; (800f8e4 <vPortExitCritical+0x50>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10a      	bne.n	800f8b8 <vPortExitCritical+0x24>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	607b      	str	r3, [r7, #4]
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <vPortExitCritical+0x50>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <vPortExitCritical+0x50>)
 800f8c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <vPortExitCritical+0x50>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d105      	bne.n	800f8d6 <vPortExitCritical+0x42>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	f383 8811 	msr	BASEPRI, r3
}
 800f8d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f8d6:	bf00      	nop
 800f8d8:	370c      	adds	r7, #12
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	200000c8 	.word	0x200000c8
	...

0800f8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f8f0:	f3ef 8009 	mrs	r0, PSP
 800f8f4:	f3bf 8f6f 	isb	sy
 800f8f8:	4b15      	ldr	r3, [pc, #84]	; (800f950 <pxCurrentTCBConst>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	f01e 0f10 	tst.w	lr, #16
 800f900:	bf08      	it	eq
 800f902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90a:	6010      	str	r0, [r2, #0]
 800f90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f914:	f380 8811 	msr	BASEPRI, r0
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	f3bf 8f6f 	isb	sy
 800f920:	f7ff f9d8 	bl	800ecd4 <vTaskSwitchContext>
 800f924:	f04f 0000 	mov.w	r0, #0
 800f928:	f380 8811 	msr	BASEPRI, r0
 800f92c:	bc09      	pop	{r0, r3}
 800f92e:	6819      	ldr	r1, [r3, #0]
 800f930:	6808      	ldr	r0, [r1, #0]
 800f932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f936:	f01e 0f10 	tst.w	lr, #16
 800f93a:	bf08      	it	eq
 800f93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f940:	f380 8809 	msr	PSP, r0
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	f3af 8000 	nop.w

0800f950 <pxCurrentTCBConst>:
 800f950:	200002c0 	.word	0x200002c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f954:	bf00      	nop
 800f956:	bf00      	nop

0800f958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
	__asm volatile
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	607b      	str	r3, [r7, #4]
}
 800f970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f972:	f7ff f8f7 	bl	800eb64 <xTaskIncrementTick>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d003      	beq.n	800f984 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f97c:	4b06      	ldr	r3, [pc, #24]	; (800f998 <SysTick_Handler+0x40>)
 800f97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	2300      	movs	r3, #0
 800f986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	f383 8811 	msr	BASEPRI, r3
}
 800f98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f990:	bf00      	nop
 800f992:	3708      	adds	r7, #8
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	e000ed04 	.word	0xe000ed04

0800f99c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f9a0:	4b0b      	ldr	r3, [pc, #44]	; (800f9d0 <vPortSetupTimerInterrupt+0x34>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f9a6:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <vPortSetupTimerInterrupt+0x38>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f9ac:	4b0a      	ldr	r3, [pc, #40]	; (800f9d8 <vPortSetupTimerInterrupt+0x3c>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a0a      	ldr	r2, [pc, #40]	; (800f9dc <vPortSetupTimerInterrupt+0x40>)
 800f9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9b6:	099b      	lsrs	r3, r3, #6
 800f9b8:	4a09      	ldr	r2, [pc, #36]	; (800f9e0 <vPortSetupTimerInterrupt+0x44>)
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f9be:	4b04      	ldr	r3, [pc, #16]	; (800f9d0 <vPortSetupTimerInterrupt+0x34>)
 800f9c0:	2207      	movs	r2, #7
 800f9c2:	601a      	str	r2, [r3, #0]
}
 800f9c4:	bf00      	nop
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	e000e010 	.word	0xe000e010
 800f9d4:	e000e018 	.word	0xe000e018
 800f9d8:	20000070 	.word	0x20000070
 800f9dc:	10624dd3 	.word	0x10624dd3
 800f9e0:	e000e014 	.word	0xe000e014

0800f9e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f9f4 <vPortEnableVFP+0x10>
 800f9e8:	6801      	ldr	r1, [r0, #0]
 800f9ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f9ee:	6001      	str	r1, [r0, #0]
 800f9f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9f2:	bf00      	nop
 800f9f4:	e000ed88 	.word	0xe000ed88

0800f9f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9fe:	f3ef 8305 	mrs	r3, IPSR
 800fa02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b0f      	cmp	r3, #15
 800fa08:	d914      	bls.n	800fa34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa0a:	4a17      	ldr	r2, [pc, #92]	; (800fa68 <vPortValidateInterruptPriority+0x70>)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa14:	4b15      	ldr	r3, [pc, #84]	; (800fa6c <vPortValidateInterruptPriority+0x74>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	7afa      	ldrb	r2, [r7, #11]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d20a      	bcs.n	800fa34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	607b      	str	r3, [r7, #4]
}
 800fa30:	bf00      	nop
 800fa32:	e7fe      	b.n	800fa32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa34:	4b0e      	ldr	r3, [pc, #56]	; (800fa70 <vPortValidateInterruptPriority+0x78>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa3c:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <vPortValidateInterruptPriority+0x7c>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d90a      	bls.n	800fa5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	603b      	str	r3, [r7, #0]
}
 800fa56:	bf00      	nop
 800fa58:	e7fe      	b.n	800fa58 <vPortValidateInterruptPriority+0x60>
	}
 800fa5a:	bf00      	nop
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	e000e3f0 	.word	0xe000e3f0
 800fa6c:	200003ec 	.word	0x200003ec
 800fa70:	e000ed0c 	.word	0xe000ed0c
 800fa74:	200003f0 	.word	0x200003f0

0800fa78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b08a      	sub	sp, #40	; 0x28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa80:	2300      	movs	r3, #0
 800fa82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa84:	f7fe ffa2 	bl	800e9cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa88:	4b5b      	ldr	r3, [pc, #364]	; (800fbf8 <pvPortMalloc+0x180>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d101      	bne.n	800fa94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa90:	f000 f920 	bl	800fcd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa94:	4b59      	ldr	r3, [pc, #356]	; (800fbfc <pvPortMalloc+0x184>)
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f040 8093 	bne.w	800fbc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d01d      	beq.n	800fae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800faa8:	2208      	movs	r2, #8
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4413      	add	r3, r2
 800faae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f003 0307 	and.w	r3, r3, #7
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d014      	beq.n	800fae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f023 0307 	bic.w	r3, r3, #7
 800fac0:	3308      	adds	r3, #8
 800fac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f003 0307 	and.w	r3, r3, #7
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00a      	beq.n	800fae4 <pvPortMalloc+0x6c>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	617b      	str	r3, [r7, #20]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d06e      	beq.n	800fbc8 <pvPortMalloc+0x150>
 800faea:	4b45      	ldr	r3, [pc, #276]	; (800fc00 <pvPortMalloc+0x188>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d869      	bhi.n	800fbc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800faf4:	4b43      	ldr	r3, [pc, #268]	; (800fc04 <pvPortMalloc+0x18c>)
 800faf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800faf8:	4b42      	ldr	r3, [pc, #264]	; (800fc04 <pvPortMalloc+0x18c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fafe:	e004      	b.n	800fb0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d903      	bls.n	800fb1c <pvPortMalloc+0xa4>
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d1f1      	bne.n	800fb00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fb1c:	4b36      	ldr	r3, [pc, #216]	; (800fbf8 <pvPortMalloc+0x180>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d050      	beq.n	800fbc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb26:	6a3b      	ldr	r3, [r7, #32]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2208      	movs	r2, #8
 800fb2c:	4413      	add	r3, r2
 800fb2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	6a3b      	ldr	r3, [r7, #32]
 800fb36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	685a      	ldr	r2, [r3, #4]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	1ad2      	subs	r2, r2, r3
 800fb40:	2308      	movs	r3, #8
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d91f      	bls.n	800fb88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	f003 0307 	and.w	r3, r3, #7
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00a      	beq.n	800fb70 <pvPortMalloc+0xf8>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	613b      	str	r3, [r7, #16]
}
 800fb6c:	bf00      	nop
 800fb6e:	e7fe      	b.n	800fb6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	685a      	ldr	r2, [r3, #4]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	1ad2      	subs	r2, r2, r3
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb82:	69b8      	ldr	r0, [r7, #24]
 800fb84:	f000 f908 	bl	800fd98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb88:	4b1d      	ldr	r3, [pc, #116]	; (800fc00 <pvPortMalloc+0x188>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	4a1b      	ldr	r2, [pc, #108]	; (800fc00 <pvPortMalloc+0x188>)
 800fb94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb96:	4b1a      	ldr	r3, [pc, #104]	; (800fc00 <pvPortMalloc+0x188>)
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	4b1b      	ldr	r3, [pc, #108]	; (800fc08 <pvPortMalloc+0x190>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d203      	bcs.n	800fbaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fba2:	4b17      	ldr	r3, [pc, #92]	; (800fc00 <pvPortMalloc+0x188>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a18      	ldr	r2, [pc, #96]	; (800fc08 <pvPortMalloc+0x190>)
 800fba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	4b13      	ldr	r3, [pc, #76]	; (800fbfc <pvPortMalloc+0x184>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	2200      	movs	r2, #0
 800fbbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fbbe:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <pvPortMalloc+0x194>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	4a11      	ldr	r2, [pc, #68]	; (800fc0c <pvPortMalloc+0x194>)
 800fbc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fbc8:	f7fe ff0e 	bl	800e9e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	f003 0307 	and.w	r3, r3, #7
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d00a      	beq.n	800fbec <pvPortMalloc+0x174>
	__asm volatile
 800fbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	60fb      	str	r3, [r7, #12]
}
 800fbe8:	bf00      	nop
 800fbea:	e7fe      	b.n	800fbea <pvPortMalloc+0x172>
	return pvReturn;
 800fbec:	69fb      	ldr	r3, [r7, #28]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3728      	adds	r7, #40	; 0x28
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20003ffc 	.word	0x20003ffc
 800fbfc:	20004010 	.word	0x20004010
 800fc00:	20004000 	.word	0x20004000
 800fc04:	20003ff4 	.word	0x20003ff4
 800fc08:	20004004 	.word	0x20004004
 800fc0c:	20004008 	.word	0x20004008

0800fc10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d04d      	beq.n	800fcbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fc22:	2308      	movs	r3, #8
 800fc24:	425b      	negs	r3, r3
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	4413      	add	r3, r2
 800fc2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	4b24      	ldr	r3, [pc, #144]	; (800fcc8 <vPortFree+0xb8>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4013      	ands	r3, r2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10a      	bne.n	800fc54 <vPortFree+0x44>
	__asm volatile
 800fc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	60fb      	str	r3, [r7, #12]
}
 800fc50:	bf00      	nop
 800fc52:	e7fe      	b.n	800fc52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00a      	beq.n	800fc72 <vPortFree+0x62>
	__asm volatile
 800fc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc60:	f383 8811 	msr	BASEPRI, r3
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	f3bf 8f4f 	dsb	sy
 800fc6c:	60bb      	str	r3, [r7, #8]
}
 800fc6e:	bf00      	nop
 800fc70:	e7fe      	b.n	800fc70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	4b14      	ldr	r3, [pc, #80]	; (800fcc8 <vPortFree+0xb8>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4013      	ands	r3, r2
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d01e      	beq.n	800fcbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d11a      	bne.n	800fcbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	685a      	ldr	r2, [r3, #4]
 800fc8c:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <vPortFree+0xb8>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	43db      	mvns	r3, r3
 800fc92:	401a      	ands	r2, r3
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc98:	f7fe fe98 	bl	800e9cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	685a      	ldr	r2, [r3, #4]
 800fca0:	4b0a      	ldr	r3, [pc, #40]	; (800fccc <vPortFree+0xbc>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4413      	add	r3, r2
 800fca6:	4a09      	ldr	r2, [pc, #36]	; (800fccc <vPortFree+0xbc>)
 800fca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fcaa:	6938      	ldr	r0, [r7, #16]
 800fcac:	f000 f874 	bl	800fd98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fcb0:	4b07      	ldr	r3, [pc, #28]	; (800fcd0 <vPortFree+0xc0>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	4a06      	ldr	r2, [pc, #24]	; (800fcd0 <vPortFree+0xc0>)
 800fcb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fcba:	f7fe fe95 	bl	800e9e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fcbe:	bf00      	nop
 800fcc0:	3718      	adds	r7, #24
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20004010 	.word	0x20004010
 800fccc:	20004000 	.word	0x20004000
 800fcd0:	2000400c 	.word	0x2000400c

0800fcd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fcda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fcde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fce0:	4b27      	ldr	r3, [pc, #156]	; (800fd80 <prvHeapInit+0xac>)
 800fce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f003 0307 	and.w	r3, r3, #7
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00c      	beq.n	800fd08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3307      	adds	r3, #7
 800fcf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f023 0307 	bic.w	r3, r3, #7
 800fcfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fcfc:	68ba      	ldr	r2, [r7, #8]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	4a1f      	ldr	r2, [pc, #124]	; (800fd80 <prvHeapInit+0xac>)
 800fd04:	4413      	add	r3, r2
 800fd06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fd0c:	4a1d      	ldr	r2, [pc, #116]	; (800fd84 <prvHeapInit+0xb0>)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd12:	4b1c      	ldr	r3, [pc, #112]	; (800fd84 <prvHeapInit+0xb0>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	68ba      	ldr	r2, [r7, #8]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd20:	2208      	movs	r2, #8
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	1a9b      	subs	r3, r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f023 0307 	bic.w	r3, r3, #7
 800fd2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	4a15      	ldr	r2, [pc, #84]	; (800fd88 <prvHeapInit+0xb4>)
 800fd34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd36:	4b14      	ldr	r3, [pc, #80]	; (800fd88 <prvHeapInit+0xb4>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd3e:	4b12      	ldr	r3, [pc, #72]	; (800fd88 <prvHeapInit+0xb4>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2200      	movs	r2, #0
 800fd44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	1ad2      	subs	r2, r2, r3
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd54:	4b0c      	ldr	r3, [pc, #48]	; (800fd88 <prvHeapInit+0xb4>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	4a0a      	ldr	r2, [pc, #40]	; (800fd8c <prvHeapInit+0xb8>)
 800fd62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	4a09      	ldr	r2, [pc, #36]	; (800fd90 <prvHeapInit+0xbc>)
 800fd6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd6c:	4b09      	ldr	r3, [pc, #36]	; (800fd94 <prvHeapInit+0xc0>)
 800fd6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fd72:	601a      	str	r2, [r3, #0]
}
 800fd74:	bf00      	nop
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr
 800fd80:	200003f4 	.word	0x200003f4
 800fd84:	20003ff4 	.word	0x20003ff4
 800fd88:	20003ffc 	.word	0x20003ffc
 800fd8c:	20004004 	.word	0x20004004
 800fd90:	20004000 	.word	0x20004000
 800fd94:	20004010 	.word	0x20004010

0800fd98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fda0:	4b28      	ldr	r3, [pc, #160]	; (800fe44 <prvInsertBlockIntoFreeList+0xac>)
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e002      	b.n	800fdac <prvInsertBlockIntoFreeList+0x14>
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	60fb      	str	r3, [r7, #12]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d8f7      	bhi.n	800fda6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d108      	bne.n	800fdda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	441a      	add	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	441a      	add	r2, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d118      	bne.n	800fe20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	4b15      	ldr	r3, [pc, #84]	; (800fe48 <prvInsertBlockIntoFreeList+0xb0>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d00d      	beq.n	800fe16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	441a      	add	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	e008      	b.n	800fe28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe16:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <prvInsertBlockIntoFreeList+0xb0>)
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	e003      	b.n	800fe28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d002      	beq.n	800fe36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe36:	bf00      	nop
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	20003ff4 	.word	0x20003ff4
 800fe48:	20003ffc 	.word	0x20003ffc

0800fe4c <__errno>:
 800fe4c:	4b01      	ldr	r3, [pc, #4]	; (800fe54 <__errno+0x8>)
 800fe4e:	6818      	ldr	r0, [r3, #0]
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	200000cc 	.word	0x200000cc

0800fe58 <__libc_init_array>:
 800fe58:	b570      	push	{r4, r5, r6, lr}
 800fe5a:	4d0d      	ldr	r5, [pc, #52]	; (800fe90 <__libc_init_array+0x38>)
 800fe5c:	4c0d      	ldr	r4, [pc, #52]	; (800fe94 <__libc_init_array+0x3c>)
 800fe5e:	1b64      	subs	r4, r4, r5
 800fe60:	10a4      	asrs	r4, r4, #2
 800fe62:	2600      	movs	r6, #0
 800fe64:	42a6      	cmp	r6, r4
 800fe66:	d109      	bne.n	800fe7c <__libc_init_array+0x24>
 800fe68:	4d0b      	ldr	r5, [pc, #44]	; (800fe98 <__libc_init_array+0x40>)
 800fe6a:	4c0c      	ldr	r4, [pc, #48]	; (800fe9c <__libc_init_array+0x44>)
 800fe6c:	f001 fb76 	bl	801155c <_init>
 800fe70:	1b64      	subs	r4, r4, r5
 800fe72:	10a4      	asrs	r4, r4, #2
 800fe74:	2600      	movs	r6, #0
 800fe76:	42a6      	cmp	r6, r4
 800fe78:	d105      	bne.n	800fe86 <__libc_init_array+0x2e>
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe80:	4798      	blx	r3
 800fe82:	3601      	adds	r6, #1
 800fe84:	e7ee      	b.n	800fe64 <__libc_init_array+0xc>
 800fe86:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe8a:	4798      	blx	r3
 800fe8c:	3601      	adds	r6, #1
 800fe8e:	e7f2      	b.n	800fe76 <__libc_init_array+0x1e>
 800fe90:	08011c50 	.word	0x08011c50
 800fe94:	08011c50 	.word	0x08011c50
 800fe98:	08011c50 	.word	0x08011c50
 800fe9c:	08011c54 	.word	0x08011c54

0800fea0 <__retarget_lock_acquire_recursive>:
 800fea0:	4770      	bx	lr

0800fea2 <__retarget_lock_release_recursive>:
 800fea2:	4770      	bx	lr

0800fea4 <memcpy>:
 800fea4:	440a      	add	r2, r1
 800fea6:	4291      	cmp	r1, r2
 800fea8:	f100 33ff 	add.w	r3, r0, #4294967295
 800feac:	d100      	bne.n	800feb0 <memcpy+0xc>
 800feae:	4770      	bx	lr
 800feb0:	b510      	push	{r4, lr}
 800feb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800feb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feba:	4291      	cmp	r1, r2
 800febc:	d1f9      	bne.n	800feb2 <memcpy+0xe>
 800febe:	bd10      	pop	{r4, pc}

0800fec0 <memset>:
 800fec0:	4402      	add	r2, r0
 800fec2:	4603      	mov	r3, r0
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d100      	bne.n	800feca <memset+0xa>
 800fec8:	4770      	bx	lr
 800feca:	f803 1b01 	strb.w	r1, [r3], #1
 800fece:	e7f9      	b.n	800fec4 <memset+0x4>

0800fed0 <cleanup_glue>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	460c      	mov	r4, r1
 800fed4:	6809      	ldr	r1, [r1, #0]
 800fed6:	4605      	mov	r5, r0
 800fed8:	b109      	cbz	r1, 800fede <cleanup_glue+0xe>
 800feda:	f7ff fff9 	bl	800fed0 <cleanup_glue>
 800fede:	4621      	mov	r1, r4
 800fee0:	4628      	mov	r0, r5
 800fee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fee6:	f000 b869 	b.w	800ffbc <_free_r>
	...

0800feec <_reclaim_reent>:
 800feec:	4b2c      	ldr	r3, [pc, #176]	; (800ffa0 <_reclaim_reent+0xb4>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4283      	cmp	r3, r0
 800fef2:	b570      	push	{r4, r5, r6, lr}
 800fef4:	4604      	mov	r4, r0
 800fef6:	d051      	beq.n	800ff9c <_reclaim_reent+0xb0>
 800fef8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fefa:	b143      	cbz	r3, 800ff0e <_reclaim_reent+0x22>
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d14a      	bne.n	800ff98 <_reclaim_reent+0xac>
 800ff02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff04:	6819      	ldr	r1, [r3, #0]
 800ff06:	b111      	cbz	r1, 800ff0e <_reclaim_reent+0x22>
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 f857 	bl	800ffbc <_free_r>
 800ff0e:	6961      	ldr	r1, [r4, #20]
 800ff10:	b111      	cbz	r1, 800ff18 <_reclaim_reent+0x2c>
 800ff12:	4620      	mov	r0, r4
 800ff14:	f000 f852 	bl	800ffbc <_free_r>
 800ff18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ff1a:	b111      	cbz	r1, 800ff22 <_reclaim_reent+0x36>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 f84d 	bl	800ffbc <_free_r>
 800ff22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ff24:	b111      	cbz	r1, 800ff2c <_reclaim_reent+0x40>
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 f848 	bl	800ffbc <_free_r>
 800ff2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ff2e:	b111      	cbz	r1, 800ff36 <_reclaim_reent+0x4a>
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 f843 	bl	800ffbc <_free_r>
 800ff36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ff38:	b111      	cbz	r1, 800ff40 <_reclaim_reent+0x54>
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 f83e 	bl	800ffbc <_free_r>
 800ff40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ff42:	b111      	cbz	r1, 800ff4a <_reclaim_reent+0x5e>
 800ff44:	4620      	mov	r0, r4
 800ff46:	f000 f839 	bl	800ffbc <_free_r>
 800ff4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ff4c:	b111      	cbz	r1, 800ff54 <_reclaim_reent+0x68>
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 f834 	bl	800ffbc <_free_r>
 800ff54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff56:	b111      	cbz	r1, 800ff5e <_reclaim_reent+0x72>
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f000 f82f 	bl	800ffbc <_free_r>
 800ff5e:	69a3      	ldr	r3, [r4, #24]
 800ff60:	b1e3      	cbz	r3, 800ff9c <_reclaim_reent+0xb0>
 800ff62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ff64:	4620      	mov	r0, r4
 800ff66:	4798      	blx	r3
 800ff68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ff6a:	b1b9      	cbz	r1, 800ff9c <_reclaim_reent+0xb0>
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff72:	f7ff bfad 	b.w	800fed0 <cleanup_glue>
 800ff76:	5949      	ldr	r1, [r1, r5]
 800ff78:	b941      	cbnz	r1, 800ff8c <_reclaim_reent+0xa0>
 800ff7a:	3504      	adds	r5, #4
 800ff7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff7e:	2d80      	cmp	r5, #128	; 0x80
 800ff80:	68d9      	ldr	r1, [r3, #12]
 800ff82:	d1f8      	bne.n	800ff76 <_reclaim_reent+0x8a>
 800ff84:	4620      	mov	r0, r4
 800ff86:	f000 f819 	bl	800ffbc <_free_r>
 800ff8a:	e7ba      	b.n	800ff02 <_reclaim_reent+0x16>
 800ff8c:	680e      	ldr	r6, [r1, #0]
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 f814 	bl	800ffbc <_free_r>
 800ff94:	4631      	mov	r1, r6
 800ff96:	e7ef      	b.n	800ff78 <_reclaim_reent+0x8c>
 800ff98:	2500      	movs	r5, #0
 800ff9a:	e7ef      	b.n	800ff7c <_reclaim_reent+0x90>
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	bf00      	nop
 800ffa0:	200000cc 	.word	0x200000cc

0800ffa4 <__malloc_lock>:
 800ffa4:	4801      	ldr	r0, [pc, #4]	; (800ffac <__malloc_lock+0x8>)
 800ffa6:	f7ff bf7b 	b.w	800fea0 <__retarget_lock_acquire_recursive>
 800ffaa:	bf00      	nop
 800ffac:	20004e64 	.word	0x20004e64

0800ffb0 <__malloc_unlock>:
 800ffb0:	4801      	ldr	r0, [pc, #4]	; (800ffb8 <__malloc_unlock+0x8>)
 800ffb2:	f7ff bf76 	b.w	800fea2 <__retarget_lock_release_recursive>
 800ffb6:	bf00      	nop
 800ffb8:	20004e64 	.word	0x20004e64

0800ffbc <_free_r>:
 800ffbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	d048      	beq.n	8010054 <_free_r+0x98>
 800ffc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc6:	9001      	str	r0, [sp, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f1a1 0404 	sub.w	r4, r1, #4
 800ffce:	bfb8      	it	lt
 800ffd0:	18e4      	addlt	r4, r4, r3
 800ffd2:	f7ff ffe7 	bl	800ffa4 <__malloc_lock>
 800ffd6:	4a20      	ldr	r2, [pc, #128]	; (8010058 <_free_r+0x9c>)
 800ffd8:	9801      	ldr	r0, [sp, #4]
 800ffda:	6813      	ldr	r3, [r2, #0]
 800ffdc:	4615      	mov	r5, r2
 800ffde:	b933      	cbnz	r3, 800ffee <_free_r+0x32>
 800ffe0:	6063      	str	r3, [r4, #4]
 800ffe2:	6014      	str	r4, [r2, #0]
 800ffe4:	b003      	add	sp, #12
 800ffe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffea:	f7ff bfe1 	b.w	800ffb0 <__malloc_unlock>
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	d90b      	bls.n	801000a <_free_r+0x4e>
 800fff2:	6821      	ldr	r1, [r4, #0]
 800fff4:	1862      	adds	r2, r4, r1
 800fff6:	4293      	cmp	r3, r2
 800fff8:	bf04      	itt	eq
 800fffa:	681a      	ldreq	r2, [r3, #0]
 800fffc:	685b      	ldreq	r3, [r3, #4]
 800fffe:	6063      	str	r3, [r4, #4]
 8010000:	bf04      	itt	eq
 8010002:	1852      	addeq	r2, r2, r1
 8010004:	6022      	streq	r2, [r4, #0]
 8010006:	602c      	str	r4, [r5, #0]
 8010008:	e7ec      	b.n	800ffe4 <_free_r+0x28>
 801000a:	461a      	mov	r2, r3
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	b10b      	cbz	r3, 8010014 <_free_r+0x58>
 8010010:	42a3      	cmp	r3, r4
 8010012:	d9fa      	bls.n	801000a <_free_r+0x4e>
 8010014:	6811      	ldr	r1, [r2, #0]
 8010016:	1855      	adds	r5, r2, r1
 8010018:	42a5      	cmp	r5, r4
 801001a:	d10b      	bne.n	8010034 <_free_r+0x78>
 801001c:	6824      	ldr	r4, [r4, #0]
 801001e:	4421      	add	r1, r4
 8010020:	1854      	adds	r4, r2, r1
 8010022:	42a3      	cmp	r3, r4
 8010024:	6011      	str	r1, [r2, #0]
 8010026:	d1dd      	bne.n	800ffe4 <_free_r+0x28>
 8010028:	681c      	ldr	r4, [r3, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	6053      	str	r3, [r2, #4]
 801002e:	4421      	add	r1, r4
 8010030:	6011      	str	r1, [r2, #0]
 8010032:	e7d7      	b.n	800ffe4 <_free_r+0x28>
 8010034:	d902      	bls.n	801003c <_free_r+0x80>
 8010036:	230c      	movs	r3, #12
 8010038:	6003      	str	r3, [r0, #0]
 801003a:	e7d3      	b.n	800ffe4 <_free_r+0x28>
 801003c:	6825      	ldr	r5, [r4, #0]
 801003e:	1961      	adds	r1, r4, r5
 8010040:	428b      	cmp	r3, r1
 8010042:	bf04      	itt	eq
 8010044:	6819      	ldreq	r1, [r3, #0]
 8010046:	685b      	ldreq	r3, [r3, #4]
 8010048:	6063      	str	r3, [r4, #4]
 801004a:	bf04      	itt	eq
 801004c:	1949      	addeq	r1, r1, r5
 801004e:	6021      	streq	r1, [r4, #0]
 8010050:	6054      	str	r4, [r2, #4]
 8010052:	e7c7      	b.n	800ffe4 <_free_r+0x28>
 8010054:	b003      	add	sp, #12
 8010056:	bd30      	pop	{r4, r5, pc}
 8010058:	20004014 	.word	0x20004014

0801005c <atan2>:
 801005c:	f000 b908 	b.w	8010270 <__ieee754_atan2>

08010060 <pow>:
 8010060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010064:	ec59 8b10 	vmov	r8, r9, d0
 8010068:	ec57 6b11 	vmov	r6, r7, d1
 801006c:	f000 f9cc 	bl	8010408 <__ieee754_pow>
 8010070:	4b4e      	ldr	r3, [pc, #312]	; (80101ac <pow+0x14c>)
 8010072:	f993 3000 	ldrsb.w	r3, [r3]
 8010076:	3301      	adds	r3, #1
 8010078:	ec55 4b10 	vmov	r4, r5, d0
 801007c:	d015      	beq.n	80100aa <pow+0x4a>
 801007e:	4632      	mov	r2, r6
 8010080:	463b      	mov	r3, r7
 8010082:	4630      	mov	r0, r6
 8010084:	4639      	mov	r1, r7
 8010086:	f7f0 fcf9 	bl	8000a7c <__aeabi_dcmpun>
 801008a:	b970      	cbnz	r0, 80100aa <pow+0x4a>
 801008c:	4642      	mov	r2, r8
 801008e:	464b      	mov	r3, r9
 8010090:	4640      	mov	r0, r8
 8010092:	4649      	mov	r1, r9
 8010094:	f7f0 fcf2 	bl	8000a7c <__aeabi_dcmpun>
 8010098:	2200      	movs	r2, #0
 801009a:	2300      	movs	r3, #0
 801009c:	b148      	cbz	r0, 80100b2 <pow+0x52>
 801009e:	4630      	mov	r0, r6
 80100a0:	4639      	mov	r1, r7
 80100a2:	f7f0 fcb9 	bl	8000a18 <__aeabi_dcmpeq>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d17d      	bne.n	80101a6 <pow+0x146>
 80100aa:	ec45 4b10 	vmov	d0, r4, r5
 80100ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b2:	4640      	mov	r0, r8
 80100b4:	4649      	mov	r1, r9
 80100b6:	f7f0 fcaf 	bl	8000a18 <__aeabi_dcmpeq>
 80100ba:	b1e0      	cbz	r0, 80100f6 <pow+0x96>
 80100bc:	2200      	movs	r2, #0
 80100be:	2300      	movs	r3, #0
 80100c0:	4630      	mov	r0, r6
 80100c2:	4639      	mov	r1, r7
 80100c4:	f7f0 fca8 	bl	8000a18 <__aeabi_dcmpeq>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d16c      	bne.n	80101a6 <pow+0x146>
 80100cc:	ec47 6b10 	vmov	d0, r6, r7
 80100d0:	f001 f91f 	bl	8011312 <finite>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d0e8      	beq.n	80100aa <pow+0x4a>
 80100d8:	2200      	movs	r2, #0
 80100da:	2300      	movs	r3, #0
 80100dc:	4630      	mov	r0, r6
 80100de:	4639      	mov	r1, r7
 80100e0:	f7f0 fca4 	bl	8000a2c <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d0e0      	beq.n	80100aa <pow+0x4a>
 80100e8:	f7ff feb0 	bl	800fe4c <__errno>
 80100ec:	2321      	movs	r3, #33	; 0x21
 80100ee:	6003      	str	r3, [r0, #0]
 80100f0:	2400      	movs	r4, #0
 80100f2:	4d2f      	ldr	r5, [pc, #188]	; (80101b0 <pow+0x150>)
 80100f4:	e7d9      	b.n	80100aa <pow+0x4a>
 80100f6:	ec45 4b10 	vmov	d0, r4, r5
 80100fa:	f001 f90a 	bl	8011312 <finite>
 80100fe:	bbb8      	cbnz	r0, 8010170 <pow+0x110>
 8010100:	ec49 8b10 	vmov	d0, r8, r9
 8010104:	f001 f905 	bl	8011312 <finite>
 8010108:	b390      	cbz	r0, 8010170 <pow+0x110>
 801010a:	ec47 6b10 	vmov	d0, r6, r7
 801010e:	f001 f900 	bl	8011312 <finite>
 8010112:	b368      	cbz	r0, 8010170 <pow+0x110>
 8010114:	4622      	mov	r2, r4
 8010116:	462b      	mov	r3, r5
 8010118:	4620      	mov	r0, r4
 801011a:	4629      	mov	r1, r5
 801011c:	f7f0 fcae 	bl	8000a7c <__aeabi_dcmpun>
 8010120:	b160      	cbz	r0, 801013c <pow+0xdc>
 8010122:	f7ff fe93 	bl	800fe4c <__errno>
 8010126:	2321      	movs	r3, #33	; 0x21
 8010128:	6003      	str	r3, [r0, #0]
 801012a:	2200      	movs	r2, #0
 801012c:	2300      	movs	r3, #0
 801012e:	4610      	mov	r0, r2
 8010130:	4619      	mov	r1, r3
 8010132:	f7f0 fb33 	bl	800079c <__aeabi_ddiv>
 8010136:	4604      	mov	r4, r0
 8010138:	460d      	mov	r5, r1
 801013a:	e7b6      	b.n	80100aa <pow+0x4a>
 801013c:	f7ff fe86 	bl	800fe4c <__errno>
 8010140:	2322      	movs	r3, #34	; 0x22
 8010142:	6003      	str	r3, [r0, #0]
 8010144:	2200      	movs	r2, #0
 8010146:	2300      	movs	r3, #0
 8010148:	4640      	mov	r0, r8
 801014a:	4649      	mov	r1, r9
 801014c:	f7f0 fc6e 	bl	8000a2c <__aeabi_dcmplt>
 8010150:	2400      	movs	r4, #0
 8010152:	b158      	cbz	r0, 801016c <pow+0x10c>
 8010154:	ec47 6b10 	vmov	d0, r6, r7
 8010158:	f001 f8ee 	bl	8011338 <rint>
 801015c:	4632      	mov	r2, r6
 801015e:	ec51 0b10 	vmov	r0, r1, d0
 8010162:	463b      	mov	r3, r7
 8010164:	f7f0 fc58 	bl	8000a18 <__aeabi_dcmpeq>
 8010168:	2800      	cmp	r0, #0
 801016a:	d0c2      	beq.n	80100f2 <pow+0x92>
 801016c:	4d11      	ldr	r5, [pc, #68]	; (80101b4 <pow+0x154>)
 801016e:	e79c      	b.n	80100aa <pow+0x4a>
 8010170:	2200      	movs	r2, #0
 8010172:	2300      	movs	r3, #0
 8010174:	4620      	mov	r0, r4
 8010176:	4629      	mov	r1, r5
 8010178:	f7f0 fc4e 	bl	8000a18 <__aeabi_dcmpeq>
 801017c:	2800      	cmp	r0, #0
 801017e:	d094      	beq.n	80100aa <pow+0x4a>
 8010180:	ec49 8b10 	vmov	d0, r8, r9
 8010184:	f001 f8c5 	bl	8011312 <finite>
 8010188:	2800      	cmp	r0, #0
 801018a:	d08e      	beq.n	80100aa <pow+0x4a>
 801018c:	ec47 6b10 	vmov	d0, r6, r7
 8010190:	f001 f8bf 	bl	8011312 <finite>
 8010194:	2800      	cmp	r0, #0
 8010196:	d088      	beq.n	80100aa <pow+0x4a>
 8010198:	f7ff fe58 	bl	800fe4c <__errno>
 801019c:	2322      	movs	r3, #34	; 0x22
 801019e:	6003      	str	r3, [r0, #0]
 80101a0:	2400      	movs	r4, #0
 80101a2:	2500      	movs	r5, #0
 80101a4:	e781      	b.n	80100aa <pow+0x4a>
 80101a6:	4d04      	ldr	r5, [pc, #16]	; (80101b8 <pow+0x158>)
 80101a8:	2400      	movs	r4, #0
 80101aa:	e77e      	b.n	80100aa <pow+0x4a>
 80101ac:	20000130 	.word	0x20000130
 80101b0:	fff00000 	.word	0xfff00000
 80101b4:	7ff00000 	.word	0x7ff00000
 80101b8:	3ff00000 	.word	0x3ff00000

080101bc <sqrt>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	ed2d 8b02 	vpush	{d8}
 80101c2:	ec55 4b10 	vmov	r4, r5, d0
 80101c6:	f000 fe41 	bl	8010e4c <__ieee754_sqrt>
 80101ca:	4b15      	ldr	r3, [pc, #84]	; (8010220 <sqrt+0x64>)
 80101cc:	eeb0 8a40 	vmov.f32	s16, s0
 80101d0:	eef0 8a60 	vmov.f32	s17, s1
 80101d4:	f993 3000 	ldrsb.w	r3, [r3]
 80101d8:	3301      	adds	r3, #1
 80101da:	d019      	beq.n	8010210 <sqrt+0x54>
 80101dc:	4622      	mov	r2, r4
 80101de:	462b      	mov	r3, r5
 80101e0:	4620      	mov	r0, r4
 80101e2:	4629      	mov	r1, r5
 80101e4:	f7f0 fc4a 	bl	8000a7c <__aeabi_dcmpun>
 80101e8:	b990      	cbnz	r0, 8010210 <sqrt+0x54>
 80101ea:	2200      	movs	r2, #0
 80101ec:	2300      	movs	r3, #0
 80101ee:	4620      	mov	r0, r4
 80101f0:	4629      	mov	r1, r5
 80101f2:	f7f0 fc1b 	bl	8000a2c <__aeabi_dcmplt>
 80101f6:	b158      	cbz	r0, 8010210 <sqrt+0x54>
 80101f8:	f7ff fe28 	bl	800fe4c <__errno>
 80101fc:	2321      	movs	r3, #33	; 0x21
 80101fe:	6003      	str	r3, [r0, #0]
 8010200:	2200      	movs	r2, #0
 8010202:	2300      	movs	r3, #0
 8010204:	4610      	mov	r0, r2
 8010206:	4619      	mov	r1, r3
 8010208:	f7f0 fac8 	bl	800079c <__aeabi_ddiv>
 801020c:	ec41 0b18 	vmov	d8, r0, r1
 8010210:	eeb0 0a48 	vmov.f32	s0, s16
 8010214:	eef0 0a68 	vmov.f32	s1, s17
 8010218:	ecbd 8b02 	vpop	{d8}
 801021c:	bd38      	pop	{r3, r4, r5, pc}
 801021e:	bf00      	nop
 8010220:	20000130 	.word	0x20000130

08010224 <sqrtf>:
 8010224:	b508      	push	{r3, lr}
 8010226:	ed2d 8b02 	vpush	{d8}
 801022a:	eeb0 8a40 	vmov.f32	s16, s0
 801022e:	f000 fec1 	bl	8010fb4 <__ieee754_sqrtf>
 8010232:	4b0d      	ldr	r3, [pc, #52]	; (8010268 <sqrtf+0x44>)
 8010234:	f993 3000 	ldrsb.w	r3, [r3]
 8010238:	3301      	adds	r3, #1
 801023a:	d011      	beq.n	8010260 <sqrtf+0x3c>
 801023c:	eeb4 8a48 	vcmp.f32	s16, s16
 8010240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010244:	d60c      	bvs.n	8010260 <sqrtf+0x3c>
 8010246:	eddf 8a09 	vldr	s17, [pc, #36]	; 801026c <sqrtf+0x48>
 801024a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801024e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010252:	d505      	bpl.n	8010260 <sqrtf+0x3c>
 8010254:	f7ff fdfa 	bl	800fe4c <__errno>
 8010258:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801025c:	2321      	movs	r3, #33	; 0x21
 801025e:	6003      	str	r3, [r0, #0]
 8010260:	ecbd 8b02 	vpop	{d8}
 8010264:	bd08      	pop	{r3, pc}
 8010266:	bf00      	nop
 8010268:	20000130 	.word	0x20000130
 801026c:	00000000 	.word	0x00000000

08010270 <__ieee754_atan2>:
 8010270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010274:	ec57 6b11 	vmov	r6, r7, d1
 8010278:	4273      	negs	r3, r6
 801027a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010400 <__ieee754_atan2+0x190>
 801027e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010282:	4333      	orrs	r3, r6
 8010284:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010288:	4573      	cmp	r3, lr
 801028a:	ec51 0b10 	vmov	r0, r1, d0
 801028e:	ee11 8a10 	vmov	r8, s2
 8010292:	d80a      	bhi.n	80102aa <__ieee754_atan2+0x3a>
 8010294:	4244      	negs	r4, r0
 8010296:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801029a:	4304      	orrs	r4, r0
 801029c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80102a0:	4574      	cmp	r4, lr
 80102a2:	ee10 9a10 	vmov	r9, s0
 80102a6:	468c      	mov	ip, r1
 80102a8:	d907      	bls.n	80102ba <__ieee754_atan2+0x4a>
 80102aa:	4632      	mov	r2, r6
 80102ac:	463b      	mov	r3, r7
 80102ae:	f7ef ff95 	bl	80001dc <__adddf3>
 80102b2:	ec41 0b10 	vmov	d0, r0, r1
 80102b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80102be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80102c2:	4334      	orrs	r4, r6
 80102c4:	d103      	bne.n	80102ce <__ieee754_atan2+0x5e>
 80102c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102ca:	f000 be79 	b.w	8010fc0 <atan>
 80102ce:	17bc      	asrs	r4, r7, #30
 80102d0:	f004 0402 	and.w	r4, r4, #2
 80102d4:	ea53 0909 	orrs.w	r9, r3, r9
 80102d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80102dc:	d107      	bne.n	80102ee <__ieee754_atan2+0x7e>
 80102de:	2c02      	cmp	r4, #2
 80102e0:	d060      	beq.n	80103a4 <__ieee754_atan2+0x134>
 80102e2:	2c03      	cmp	r4, #3
 80102e4:	d1e5      	bne.n	80102b2 <__ieee754_atan2+0x42>
 80102e6:	a142      	add	r1, pc, #264	; (adr r1, 80103f0 <__ieee754_atan2+0x180>)
 80102e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ec:	e7e1      	b.n	80102b2 <__ieee754_atan2+0x42>
 80102ee:	ea52 0808 	orrs.w	r8, r2, r8
 80102f2:	d106      	bne.n	8010302 <__ieee754_atan2+0x92>
 80102f4:	f1bc 0f00 	cmp.w	ip, #0
 80102f8:	da5f      	bge.n	80103ba <__ieee754_atan2+0x14a>
 80102fa:	a13f      	add	r1, pc, #252	; (adr r1, 80103f8 <__ieee754_atan2+0x188>)
 80102fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010300:	e7d7      	b.n	80102b2 <__ieee754_atan2+0x42>
 8010302:	4572      	cmp	r2, lr
 8010304:	d10f      	bne.n	8010326 <__ieee754_atan2+0xb6>
 8010306:	4293      	cmp	r3, r2
 8010308:	f104 34ff 	add.w	r4, r4, #4294967295
 801030c:	d107      	bne.n	801031e <__ieee754_atan2+0xae>
 801030e:	2c02      	cmp	r4, #2
 8010310:	d84c      	bhi.n	80103ac <__ieee754_atan2+0x13c>
 8010312:	4b35      	ldr	r3, [pc, #212]	; (80103e8 <__ieee754_atan2+0x178>)
 8010314:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010318:	e9d4 0100 	ldrd	r0, r1, [r4]
 801031c:	e7c9      	b.n	80102b2 <__ieee754_atan2+0x42>
 801031e:	2c02      	cmp	r4, #2
 8010320:	d848      	bhi.n	80103b4 <__ieee754_atan2+0x144>
 8010322:	4b32      	ldr	r3, [pc, #200]	; (80103ec <__ieee754_atan2+0x17c>)
 8010324:	e7f6      	b.n	8010314 <__ieee754_atan2+0xa4>
 8010326:	4573      	cmp	r3, lr
 8010328:	d0e4      	beq.n	80102f4 <__ieee754_atan2+0x84>
 801032a:	1a9b      	subs	r3, r3, r2
 801032c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010330:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010334:	da1e      	bge.n	8010374 <__ieee754_atan2+0x104>
 8010336:	2f00      	cmp	r7, #0
 8010338:	da01      	bge.n	801033e <__ieee754_atan2+0xce>
 801033a:	323c      	adds	r2, #60	; 0x3c
 801033c:	db1e      	blt.n	801037c <__ieee754_atan2+0x10c>
 801033e:	4632      	mov	r2, r6
 8010340:	463b      	mov	r3, r7
 8010342:	f7f0 fa2b 	bl	800079c <__aeabi_ddiv>
 8010346:	ec41 0b10 	vmov	d0, r0, r1
 801034a:	f000 ffd9 	bl	8011300 <fabs>
 801034e:	f000 fe37 	bl	8010fc0 <atan>
 8010352:	ec51 0b10 	vmov	r0, r1, d0
 8010356:	2c01      	cmp	r4, #1
 8010358:	d013      	beq.n	8010382 <__ieee754_atan2+0x112>
 801035a:	2c02      	cmp	r4, #2
 801035c:	d015      	beq.n	801038a <__ieee754_atan2+0x11a>
 801035e:	2c00      	cmp	r4, #0
 8010360:	d0a7      	beq.n	80102b2 <__ieee754_atan2+0x42>
 8010362:	a319      	add	r3, pc, #100	; (adr r3, 80103c8 <__ieee754_atan2+0x158>)
 8010364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010368:	f7ef ff36 	bl	80001d8 <__aeabi_dsub>
 801036c:	a318      	add	r3, pc, #96	; (adr r3, 80103d0 <__ieee754_atan2+0x160>)
 801036e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010372:	e014      	b.n	801039e <__ieee754_atan2+0x12e>
 8010374:	a118      	add	r1, pc, #96	; (adr r1, 80103d8 <__ieee754_atan2+0x168>)
 8010376:	e9d1 0100 	ldrd	r0, r1, [r1]
 801037a:	e7ec      	b.n	8010356 <__ieee754_atan2+0xe6>
 801037c:	2000      	movs	r0, #0
 801037e:	2100      	movs	r1, #0
 8010380:	e7e9      	b.n	8010356 <__ieee754_atan2+0xe6>
 8010382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010386:	4619      	mov	r1, r3
 8010388:	e793      	b.n	80102b2 <__ieee754_atan2+0x42>
 801038a:	a30f      	add	r3, pc, #60	; (adr r3, 80103c8 <__ieee754_atan2+0x158>)
 801038c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010390:	f7ef ff22 	bl	80001d8 <__aeabi_dsub>
 8010394:	4602      	mov	r2, r0
 8010396:	460b      	mov	r3, r1
 8010398:	a10d      	add	r1, pc, #52	; (adr r1, 80103d0 <__ieee754_atan2+0x160>)
 801039a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801039e:	f7ef ff1b 	bl	80001d8 <__aeabi_dsub>
 80103a2:	e786      	b.n	80102b2 <__ieee754_atan2+0x42>
 80103a4:	a10a      	add	r1, pc, #40	; (adr r1, 80103d0 <__ieee754_atan2+0x160>)
 80103a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103aa:	e782      	b.n	80102b2 <__ieee754_atan2+0x42>
 80103ac:	a10c      	add	r1, pc, #48	; (adr r1, 80103e0 <__ieee754_atan2+0x170>)
 80103ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103b2:	e77e      	b.n	80102b2 <__ieee754_atan2+0x42>
 80103b4:	2000      	movs	r0, #0
 80103b6:	2100      	movs	r1, #0
 80103b8:	e77b      	b.n	80102b2 <__ieee754_atan2+0x42>
 80103ba:	a107      	add	r1, pc, #28	; (adr r1, 80103d8 <__ieee754_atan2+0x168>)
 80103bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103c0:	e777      	b.n	80102b2 <__ieee754_atan2+0x42>
 80103c2:	bf00      	nop
 80103c4:	f3af 8000 	nop.w
 80103c8:	33145c07 	.word	0x33145c07
 80103cc:	3ca1a626 	.word	0x3ca1a626
 80103d0:	54442d18 	.word	0x54442d18
 80103d4:	400921fb 	.word	0x400921fb
 80103d8:	54442d18 	.word	0x54442d18
 80103dc:	3ff921fb 	.word	0x3ff921fb
 80103e0:	54442d18 	.word	0x54442d18
 80103e4:	3fe921fb 	.word	0x3fe921fb
 80103e8:	08011b90 	.word	0x08011b90
 80103ec:	08011ba8 	.word	0x08011ba8
 80103f0:	54442d18 	.word	0x54442d18
 80103f4:	c00921fb 	.word	0xc00921fb
 80103f8:	54442d18 	.word	0x54442d18
 80103fc:	bff921fb 	.word	0xbff921fb
 8010400:	7ff00000 	.word	0x7ff00000
 8010404:	00000000 	.word	0x00000000

08010408 <__ieee754_pow>:
 8010408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040c:	ed2d 8b06 	vpush	{d8-d10}
 8010410:	b08d      	sub	sp, #52	; 0x34
 8010412:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010416:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801041a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801041e:	ea56 0100 	orrs.w	r1, r6, r0
 8010422:	ec53 2b10 	vmov	r2, r3, d0
 8010426:	f000 84d1 	beq.w	8010dcc <__ieee754_pow+0x9c4>
 801042a:	497f      	ldr	r1, [pc, #508]	; (8010628 <__ieee754_pow+0x220>)
 801042c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010430:	428c      	cmp	r4, r1
 8010432:	ee10 8a10 	vmov	r8, s0
 8010436:	4699      	mov	r9, r3
 8010438:	dc09      	bgt.n	801044e <__ieee754_pow+0x46>
 801043a:	d103      	bne.n	8010444 <__ieee754_pow+0x3c>
 801043c:	b97a      	cbnz	r2, 801045e <__ieee754_pow+0x56>
 801043e:	42a6      	cmp	r6, r4
 8010440:	dd02      	ble.n	8010448 <__ieee754_pow+0x40>
 8010442:	e00c      	b.n	801045e <__ieee754_pow+0x56>
 8010444:	428e      	cmp	r6, r1
 8010446:	dc02      	bgt.n	801044e <__ieee754_pow+0x46>
 8010448:	428e      	cmp	r6, r1
 801044a:	d110      	bne.n	801046e <__ieee754_pow+0x66>
 801044c:	b178      	cbz	r0, 801046e <__ieee754_pow+0x66>
 801044e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010452:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010456:	ea54 0308 	orrs.w	r3, r4, r8
 801045a:	f000 84b7 	beq.w	8010dcc <__ieee754_pow+0x9c4>
 801045e:	4873      	ldr	r0, [pc, #460]	; (801062c <__ieee754_pow+0x224>)
 8010460:	b00d      	add	sp, #52	; 0x34
 8010462:	ecbd 8b06 	vpop	{d8-d10}
 8010466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801046a:	f000 bf5d 	b.w	8011328 <nan>
 801046e:	f1b9 0f00 	cmp.w	r9, #0
 8010472:	da36      	bge.n	80104e2 <__ieee754_pow+0xda>
 8010474:	496e      	ldr	r1, [pc, #440]	; (8010630 <__ieee754_pow+0x228>)
 8010476:	428e      	cmp	r6, r1
 8010478:	dc51      	bgt.n	801051e <__ieee754_pow+0x116>
 801047a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801047e:	428e      	cmp	r6, r1
 8010480:	f340 84af 	ble.w	8010de2 <__ieee754_pow+0x9da>
 8010484:	1531      	asrs	r1, r6, #20
 8010486:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801048a:	2914      	cmp	r1, #20
 801048c:	dd0f      	ble.n	80104ae <__ieee754_pow+0xa6>
 801048e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010492:	fa20 fc01 	lsr.w	ip, r0, r1
 8010496:	fa0c f101 	lsl.w	r1, ip, r1
 801049a:	4281      	cmp	r1, r0
 801049c:	f040 84a1 	bne.w	8010de2 <__ieee754_pow+0x9da>
 80104a0:	f00c 0c01 	and.w	ip, ip, #1
 80104a4:	f1cc 0102 	rsb	r1, ip, #2
 80104a8:	9100      	str	r1, [sp, #0]
 80104aa:	b180      	cbz	r0, 80104ce <__ieee754_pow+0xc6>
 80104ac:	e059      	b.n	8010562 <__ieee754_pow+0x15a>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d155      	bne.n	801055e <__ieee754_pow+0x156>
 80104b2:	f1c1 0114 	rsb	r1, r1, #20
 80104b6:	fa46 fc01 	asr.w	ip, r6, r1
 80104ba:	fa0c f101 	lsl.w	r1, ip, r1
 80104be:	42b1      	cmp	r1, r6
 80104c0:	f040 848c 	bne.w	8010ddc <__ieee754_pow+0x9d4>
 80104c4:	f00c 0c01 	and.w	ip, ip, #1
 80104c8:	f1cc 0102 	rsb	r1, ip, #2
 80104cc:	9100      	str	r1, [sp, #0]
 80104ce:	4959      	ldr	r1, [pc, #356]	; (8010634 <__ieee754_pow+0x22c>)
 80104d0:	428e      	cmp	r6, r1
 80104d2:	d12d      	bne.n	8010530 <__ieee754_pow+0x128>
 80104d4:	2f00      	cmp	r7, #0
 80104d6:	da79      	bge.n	80105cc <__ieee754_pow+0x1c4>
 80104d8:	4956      	ldr	r1, [pc, #344]	; (8010634 <__ieee754_pow+0x22c>)
 80104da:	2000      	movs	r0, #0
 80104dc:	f7f0 f95e 	bl	800079c <__aeabi_ddiv>
 80104e0:	e016      	b.n	8010510 <__ieee754_pow+0x108>
 80104e2:	2100      	movs	r1, #0
 80104e4:	9100      	str	r1, [sp, #0]
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d13b      	bne.n	8010562 <__ieee754_pow+0x15a>
 80104ea:	494f      	ldr	r1, [pc, #316]	; (8010628 <__ieee754_pow+0x220>)
 80104ec:	428e      	cmp	r6, r1
 80104ee:	d1ee      	bne.n	80104ce <__ieee754_pow+0xc6>
 80104f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80104f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80104f8:	ea53 0308 	orrs.w	r3, r3, r8
 80104fc:	f000 8466 	beq.w	8010dcc <__ieee754_pow+0x9c4>
 8010500:	4b4d      	ldr	r3, [pc, #308]	; (8010638 <__ieee754_pow+0x230>)
 8010502:	429c      	cmp	r4, r3
 8010504:	dd0d      	ble.n	8010522 <__ieee754_pow+0x11a>
 8010506:	2f00      	cmp	r7, #0
 8010508:	f280 8464 	bge.w	8010dd4 <__ieee754_pow+0x9cc>
 801050c:	2000      	movs	r0, #0
 801050e:	2100      	movs	r1, #0
 8010510:	ec41 0b10 	vmov	d0, r0, r1
 8010514:	b00d      	add	sp, #52	; 0x34
 8010516:	ecbd 8b06 	vpop	{d8-d10}
 801051a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051e:	2102      	movs	r1, #2
 8010520:	e7e0      	b.n	80104e4 <__ieee754_pow+0xdc>
 8010522:	2f00      	cmp	r7, #0
 8010524:	daf2      	bge.n	801050c <__ieee754_pow+0x104>
 8010526:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801052a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801052e:	e7ef      	b.n	8010510 <__ieee754_pow+0x108>
 8010530:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010534:	d104      	bne.n	8010540 <__ieee754_pow+0x138>
 8010536:	4610      	mov	r0, r2
 8010538:	4619      	mov	r1, r3
 801053a:	f7f0 f805 	bl	8000548 <__aeabi_dmul>
 801053e:	e7e7      	b.n	8010510 <__ieee754_pow+0x108>
 8010540:	493e      	ldr	r1, [pc, #248]	; (801063c <__ieee754_pow+0x234>)
 8010542:	428f      	cmp	r7, r1
 8010544:	d10d      	bne.n	8010562 <__ieee754_pow+0x15a>
 8010546:	f1b9 0f00 	cmp.w	r9, #0
 801054a:	db0a      	blt.n	8010562 <__ieee754_pow+0x15a>
 801054c:	ec43 2b10 	vmov	d0, r2, r3
 8010550:	b00d      	add	sp, #52	; 0x34
 8010552:	ecbd 8b06 	vpop	{d8-d10}
 8010556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055a:	f000 bc77 	b.w	8010e4c <__ieee754_sqrt>
 801055e:	2100      	movs	r1, #0
 8010560:	9100      	str	r1, [sp, #0]
 8010562:	ec43 2b10 	vmov	d0, r2, r3
 8010566:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801056a:	f000 fec9 	bl	8011300 <fabs>
 801056e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010572:	ec51 0b10 	vmov	r0, r1, d0
 8010576:	f1b8 0f00 	cmp.w	r8, #0
 801057a:	d12a      	bne.n	80105d2 <__ieee754_pow+0x1ca>
 801057c:	b12c      	cbz	r4, 801058a <__ieee754_pow+0x182>
 801057e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8010634 <__ieee754_pow+0x22c>
 8010582:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010586:	45e6      	cmp	lr, ip
 8010588:	d123      	bne.n	80105d2 <__ieee754_pow+0x1ca>
 801058a:	2f00      	cmp	r7, #0
 801058c:	da05      	bge.n	801059a <__ieee754_pow+0x192>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	2000      	movs	r0, #0
 8010594:	4927      	ldr	r1, [pc, #156]	; (8010634 <__ieee754_pow+0x22c>)
 8010596:	f7f0 f901 	bl	800079c <__aeabi_ddiv>
 801059a:	f1b9 0f00 	cmp.w	r9, #0
 801059e:	dab7      	bge.n	8010510 <__ieee754_pow+0x108>
 80105a0:	9b00      	ldr	r3, [sp, #0]
 80105a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80105a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80105aa:	4323      	orrs	r3, r4
 80105ac:	d108      	bne.n	80105c0 <__ieee754_pow+0x1b8>
 80105ae:	4602      	mov	r2, r0
 80105b0:	460b      	mov	r3, r1
 80105b2:	4610      	mov	r0, r2
 80105b4:	4619      	mov	r1, r3
 80105b6:	f7ef fe0f 	bl	80001d8 <__aeabi_dsub>
 80105ba:	4602      	mov	r2, r0
 80105bc:	460b      	mov	r3, r1
 80105be:	e78d      	b.n	80104dc <__ieee754_pow+0xd4>
 80105c0:	9b00      	ldr	r3, [sp, #0]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d1a4      	bne.n	8010510 <__ieee754_pow+0x108>
 80105c6:	4602      	mov	r2, r0
 80105c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105cc:	4610      	mov	r0, r2
 80105ce:	4619      	mov	r1, r3
 80105d0:	e79e      	b.n	8010510 <__ieee754_pow+0x108>
 80105d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80105d6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80105da:	950a      	str	r5, [sp, #40]	; 0x28
 80105dc:	9d00      	ldr	r5, [sp, #0]
 80105de:	46ac      	mov	ip, r5
 80105e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80105e2:	ea5c 0505 	orrs.w	r5, ip, r5
 80105e6:	d0e4      	beq.n	80105b2 <__ieee754_pow+0x1aa>
 80105e8:	4b15      	ldr	r3, [pc, #84]	; (8010640 <__ieee754_pow+0x238>)
 80105ea:	429e      	cmp	r6, r3
 80105ec:	f340 80fc 	ble.w	80107e8 <__ieee754_pow+0x3e0>
 80105f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80105f4:	429e      	cmp	r6, r3
 80105f6:	4b10      	ldr	r3, [pc, #64]	; (8010638 <__ieee754_pow+0x230>)
 80105f8:	dd07      	ble.n	801060a <__ieee754_pow+0x202>
 80105fa:	429c      	cmp	r4, r3
 80105fc:	dc0a      	bgt.n	8010614 <__ieee754_pow+0x20c>
 80105fe:	2f00      	cmp	r7, #0
 8010600:	da84      	bge.n	801050c <__ieee754_pow+0x104>
 8010602:	a307      	add	r3, pc, #28	; (adr r3, 8010620 <__ieee754_pow+0x218>)
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	e795      	b.n	8010536 <__ieee754_pow+0x12e>
 801060a:	429c      	cmp	r4, r3
 801060c:	dbf7      	blt.n	80105fe <__ieee754_pow+0x1f6>
 801060e:	4b09      	ldr	r3, [pc, #36]	; (8010634 <__ieee754_pow+0x22c>)
 8010610:	429c      	cmp	r4, r3
 8010612:	dd17      	ble.n	8010644 <__ieee754_pow+0x23c>
 8010614:	2f00      	cmp	r7, #0
 8010616:	dcf4      	bgt.n	8010602 <__ieee754_pow+0x1fa>
 8010618:	e778      	b.n	801050c <__ieee754_pow+0x104>
 801061a:	bf00      	nop
 801061c:	f3af 8000 	nop.w
 8010620:	8800759c 	.word	0x8800759c
 8010624:	7e37e43c 	.word	0x7e37e43c
 8010628:	7ff00000 	.word	0x7ff00000
 801062c:	08011bc0 	.word	0x08011bc0
 8010630:	433fffff 	.word	0x433fffff
 8010634:	3ff00000 	.word	0x3ff00000
 8010638:	3fefffff 	.word	0x3fefffff
 801063c:	3fe00000 	.word	0x3fe00000
 8010640:	41e00000 	.word	0x41e00000
 8010644:	4b64      	ldr	r3, [pc, #400]	; (80107d8 <__ieee754_pow+0x3d0>)
 8010646:	2200      	movs	r2, #0
 8010648:	f7ef fdc6 	bl	80001d8 <__aeabi_dsub>
 801064c:	a356      	add	r3, pc, #344	; (adr r3, 80107a8 <__ieee754_pow+0x3a0>)
 801064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010652:	4604      	mov	r4, r0
 8010654:	460d      	mov	r5, r1
 8010656:	f7ef ff77 	bl	8000548 <__aeabi_dmul>
 801065a:	a355      	add	r3, pc, #340	; (adr r3, 80107b0 <__ieee754_pow+0x3a8>)
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	4606      	mov	r6, r0
 8010662:	460f      	mov	r7, r1
 8010664:	4620      	mov	r0, r4
 8010666:	4629      	mov	r1, r5
 8010668:	f7ef ff6e 	bl	8000548 <__aeabi_dmul>
 801066c:	4b5b      	ldr	r3, [pc, #364]	; (80107dc <__ieee754_pow+0x3d4>)
 801066e:	4682      	mov	sl, r0
 8010670:	468b      	mov	fp, r1
 8010672:	2200      	movs	r2, #0
 8010674:	4620      	mov	r0, r4
 8010676:	4629      	mov	r1, r5
 8010678:	f7ef ff66 	bl	8000548 <__aeabi_dmul>
 801067c:	4602      	mov	r2, r0
 801067e:	460b      	mov	r3, r1
 8010680:	a14d      	add	r1, pc, #308	; (adr r1, 80107b8 <__ieee754_pow+0x3b0>)
 8010682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010686:	f7ef fda7 	bl	80001d8 <__aeabi_dsub>
 801068a:	4622      	mov	r2, r4
 801068c:	462b      	mov	r3, r5
 801068e:	f7ef ff5b 	bl	8000548 <__aeabi_dmul>
 8010692:	4602      	mov	r2, r0
 8010694:	460b      	mov	r3, r1
 8010696:	2000      	movs	r0, #0
 8010698:	4951      	ldr	r1, [pc, #324]	; (80107e0 <__ieee754_pow+0x3d8>)
 801069a:	f7ef fd9d 	bl	80001d8 <__aeabi_dsub>
 801069e:	4622      	mov	r2, r4
 80106a0:	4680      	mov	r8, r0
 80106a2:	4689      	mov	r9, r1
 80106a4:	462b      	mov	r3, r5
 80106a6:	4620      	mov	r0, r4
 80106a8:	4629      	mov	r1, r5
 80106aa:	f7ef ff4d 	bl	8000548 <__aeabi_dmul>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4640      	mov	r0, r8
 80106b4:	4649      	mov	r1, r9
 80106b6:	f7ef ff47 	bl	8000548 <__aeabi_dmul>
 80106ba:	a341      	add	r3, pc, #260	; (adr r3, 80107c0 <__ieee754_pow+0x3b8>)
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	f7ef ff42 	bl	8000548 <__aeabi_dmul>
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	4650      	mov	r0, sl
 80106ca:	4659      	mov	r1, fp
 80106cc:	f7ef fd84 	bl	80001d8 <__aeabi_dsub>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4680      	mov	r8, r0
 80106d6:	4689      	mov	r9, r1
 80106d8:	4630      	mov	r0, r6
 80106da:	4639      	mov	r1, r7
 80106dc:	f7ef fd7e 	bl	80001dc <__adddf3>
 80106e0:	2400      	movs	r4, #0
 80106e2:	4632      	mov	r2, r6
 80106e4:	463b      	mov	r3, r7
 80106e6:	4620      	mov	r0, r4
 80106e8:	460d      	mov	r5, r1
 80106ea:	f7ef fd75 	bl	80001d8 <__aeabi_dsub>
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	4640      	mov	r0, r8
 80106f4:	4649      	mov	r1, r9
 80106f6:	f7ef fd6f 	bl	80001d8 <__aeabi_dsub>
 80106fa:	9b00      	ldr	r3, [sp, #0]
 80106fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106fe:	3b01      	subs	r3, #1
 8010700:	4313      	orrs	r3, r2
 8010702:	4682      	mov	sl, r0
 8010704:	468b      	mov	fp, r1
 8010706:	f040 81f1 	bne.w	8010aec <__ieee754_pow+0x6e4>
 801070a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80107c8 <__ieee754_pow+0x3c0>
 801070e:	eeb0 8a47 	vmov.f32	s16, s14
 8010712:	eef0 8a67 	vmov.f32	s17, s15
 8010716:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801071a:	2600      	movs	r6, #0
 801071c:	4632      	mov	r2, r6
 801071e:	463b      	mov	r3, r7
 8010720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010724:	f7ef fd58 	bl	80001d8 <__aeabi_dsub>
 8010728:	4622      	mov	r2, r4
 801072a:	462b      	mov	r3, r5
 801072c:	f7ef ff0c 	bl	8000548 <__aeabi_dmul>
 8010730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010734:	4680      	mov	r8, r0
 8010736:	4689      	mov	r9, r1
 8010738:	4650      	mov	r0, sl
 801073a:	4659      	mov	r1, fp
 801073c:	f7ef ff04 	bl	8000548 <__aeabi_dmul>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	4640      	mov	r0, r8
 8010746:	4649      	mov	r1, r9
 8010748:	f7ef fd48 	bl	80001dc <__adddf3>
 801074c:	4632      	mov	r2, r6
 801074e:	463b      	mov	r3, r7
 8010750:	4680      	mov	r8, r0
 8010752:	4689      	mov	r9, r1
 8010754:	4620      	mov	r0, r4
 8010756:	4629      	mov	r1, r5
 8010758:	f7ef fef6 	bl	8000548 <__aeabi_dmul>
 801075c:	460b      	mov	r3, r1
 801075e:	4604      	mov	r4, r0
 8010760:	460d      	mov	r5, r1
 8010762:	4602      	mov	r2, r0
 8010764:	4649      	mov	r1, r9
 8010766:	4640      	mov	r0, r8
 8010768:	f7ef fd38 	bl	80001dc <__adddf3>
 801076c:	4b1d      	ldr	r3, [pc, #116]	; (80107e4 <__ieee754_pow+0x3dc>)
 801076e:	4299      	cmp	r1, r3
 8010770:	ec45 4b19 	vmov	d9, r4, r5
 8010774:	4606      	mov	r6, r0
 8010776:	460f      	mov	r7, r1
 8010778:	468b      	mov	fp, r1
 801077a:	f340 82fe 	ble.w	8010d7a <__ieee754_pow+0x972>
 801077e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010782:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010786:	4303      	orrs	r3, r0
 8010788:	f000 81f0 	beq.w	8010b6c <__ieee754_pow+0x764>
 801078c:	a310      	add	r3, pc, #64	; (adr r3, 80107d0 <__ieee754_pow+0x3c8>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	ec51 0b18 	vmov	r0, r1, d8
 8010796:	f7ef fed7 	bl	8000548 <__aeabi_dmul>
 801079a:	a30d      	add	r3, pc, #52	; (adr r3, 80107d0 <__ieee754_pow+0x3c8>)
 801079c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a0:	e6cb      	b.n	801053a <__ieee754_pow+0x132>
 80107a2:	bf00      	nop
 80107a4:	f3af 8000 	nop.w
 80107a8:	60000000 	.word	0x60000000
 80107ac:	3ff71547 	.word	0x3ff71547
 80107b0:	f85ddf44 	.word	0xf85ddf44
 80107b4:	3e54ae0b 	.word	0x3e54ae0b
 80107b8:	55555555 	.word	0x55555555
 80107bc:	3fd55555 	.word	0x3fd55555
 80107c0:	652b82fe 	.word	0x652b82fe
 80107c4:	3ff71547 	.word	0x3ff71547
 80107c8:	00000000 	.word	0x00000000
 80107cc:	bff00000 	.word	0xbff00000
 80107d0:	8800759c 	.word	0x8800759c
 80107d4:	7e37e43c 	.word	0x7e37e43c
 80107d8:	3ff00000 	.word	0x3ff00000
 80107dc:	3fd00000 	.word	0x3fd00000
 80107e0:	3fe00000 	.word	0x3fe00000
 80107e4:	408fffff 	.word	0x408fffff
 80107e8:	4bd7      	ldr	r3, [pc, #860]	; (8010b48 <__ieee754_pow+0x740>)
 80107ea:	ea03 0309 	and.w	r3, r3, r9
 80107ee:	2200      	movs	r2, #0
 80107f0:	b92b      	cbnz	r3, 80107fe <__ieee754_pow+0x3f6>
 80107f2:	4bd6      	ldr	r3, [pc, #856]	; (8010b4c <__ieee754_pow+0x744>)
 80107f4:	f7ef fea8 	bl	8000548 <__aeabi_dmul>
 80107f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80107fc:	460c      	mov	r4, r1
 80107fe:	1523      	asrs	r3, r4, #20
 8010800:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010804:	4413      	add	r3, r2
 8010806:	9309      	str	r3, [sp, #36]	; 0x24
 8010808:	4bd1      	ldr	r3, [pc, #836]	; (8010b50 <__ieee754_pow+0x748>)
 801080a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801080e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010812:	429c      	cmp	r4, r3
 8010814:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010818:	dd08      	ble.n	801082c <__ieee754_pow+0x424>
 801081a:	4bce      	ldr	r3, [pc, #824]	; (8010b54 <__ieee754_pow+0x74c>)
 801081c:	429c      	cmp	r4, r3
 801081e:	f340 8163 	ble.w	8010ae8 <__ieee754_pow+0x6e0>
 8010822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010824:	3301      	adds	r3, #1
 8010826:	9309      	str	r3, [sp, #36]	; 0x24
 8010828:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801082c:	2400      	movs	r4, #0
 801082e:	00e3      	lsls	r3, r4, #3
 8010830:	930b      	str	r3, [sp, #44]	; 0x2c
 8010832:	4bc9      	ldr	r3, [pc, #804]	; (8010b58 <__ieee754_pow+0x750>)
 8010834:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010838:	ed93 7b00 	vldr	d7, [r3]
 801083c:	4629      	mov	r1, r5
 801083e:	ec53 2b17 	vmov	r2, r3, d7
 8010842:	eeb0 8a47 	vmov.f32	s16, s14
 8010846:	eef0 8a67 	vmov.f32	s17, s15
 801084a:	4682      	mov	sl, r0
 801084c:	f7ef fcc4 	bl	80001d8 <__aeabi_dsub>
 8010850:	4652      	mov	r2, sl
 8010852:	4606      	mov	r6, r0
 8010854:	460f      	mov	r7, r1
 8010856:	462b      	mov	r3, r5
 8010858:	ec51 0b18 	vmov	r0, r1, d8
 801085c:	f7ef fcbe 	bl	80001dc <__adddf3>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	2000      	movs	r0, #0
 8010866:	49bd      	ldr	r1, [pc, #756]	; (8010b5c <__ieee754_pow+0x754>)
 8010868:	f7ef ff98 	bl	800079c <__aeabi_ddiv>
 801086c:	ec41 0b19 	vmov	d9, r0, r1
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	4630      	mov	r0, r6
 8010876:	4639      	mov	r1, r7
 8010878:	f7ef fe66 	bl	8000548 <__aeabi_dmul>
 801087c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010884:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010888:	2300      	movs	r3, #0
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010890:	46ab      	mov	fp, r5
 8010892:	106d      	asrs	r5, r5, #1
 8010894:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010898:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801089c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80108a0:	2200      	movs	r2, #0
 80108a2:	4640      	mov	r0, r8
 80108a4:	4649      	mov	r1, r9
 80108a6:	4614      	mov	r4, r2
 80108a8:	461d      	mov	r5, r3
 80108aa:	f7ef fe4d 	bl	8000548 <__aeabi_dmul>
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	4630      	mov	r0, r6
 80108b4:	4639      	mov	r1, r7
 80108b6:	f7ef fc8f 	bl	80001d8 <__aeabi_dsub>
 80108ba:	ec53 2b18 	vmov	r2, r3, d8
 80108be:	4606      	mov	r6, r0
 80108c0:	460f      	mov	r7, r1
 80108c2:	4620      	mov	r0, r4
 80108c4:	4629      	mov	r1, r5
 80108c6:	f7ef fc87 	bl	80001d8 <__aeabi_dsub>
 80108ca:	4602      	mov	r2, r0
 80108cc:	460b      	mov	r3, r1
 80108ce:	4650      	mov	r0, sl
 80108d0:	4659      	mov	r1, fp
 80108d2:	f7ef fc81 	bl	80001d8 <__aeabi_dsub>
 80108d6:	4642      	mov	r2, r8
 80108d8:	464b      	mov	r3, r9
 80108da:	f7ef fe35 	bl	8000548 <__aeabi_dmul>
 80108de:	4602      	mov	r2, r0
 80108e0:	460b      	mov	r3, r1
 80108e2:	4630      	mov	r0, r6
 80108e4:	4639      	mov	r1, r7
 80108e6:	f7ef fc77 	bl	80001d8 <__aeabi_dsub>
 80108ea:	ec53 2b19 	vmov	r2, r3, d9
 80108ee:	f7ef fe2b 	bl	8000548 <__aeabi_dmul>
 80108f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80108f6:	ec41 0b18 	vmov	d8, r0, r1
 80108fa:	4610      	mov	r0, r2
 80108fc:	4619      	mov	r1, r3
 80108fe:	f7ef fe23 	bl	8000548 <__aeabi_dmul>
 8010902:	a37d      	add	r3, pc, #500	; (adr r3, 8010af8 <__ieee754_pow+0x6f0>)
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	4604      	mov	r4, r0
 801090a:	460d      	mov	r5, r1
 801090c:	f7ef fe1c 	bl	8000548 <__aeabi_dmul>
 8010910:	a37b      	add	r3, pc, #492	; (adr r3, 8010b00 <__ieee754_pow+0x6f8>)
 8010912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010916:	f7ef fc61 	bl	80001dc <__adddf3>
 801091a:	4622      	mov	r2, r4
 801091c:	462b      	mov	r3, r5
 801091e:	f7ef fe13 	bl	8000548 <__aeabi_dmul>
 8010922:	a379      	add	r3, pc, #484	; (adr r3, 8010b08 <__ieee754_pow+0x700>)
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7ef fc58 	bl	80001dc <__adddf3>
 801092c:	4622      	mov	r2, r4
 801092e:	462b      	mov	r3, r5
 8010930:	f7ef fe0a 	bl	8000548 <__aeabi_dmul>
 8010934:	a376      	add	r3, pc, #472	; (adr r3, 8010b10 <__ieee754_pow+0x708>)
 8010936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093a:	f7ef fc4f 	bl	80001dc <__adddf3>
 801093e:	4622      	mov	r2, r4
 8010940:	462b      	mov	r3, r5
 8010942:	f7ef fe01 	bl	8000548 <__aeabi_dmul>
 8010946:	a374      	add	r3, pc, #464	; (adr r3, 8010b18 <__ieee754_pow+0x710>)
 8010948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094c:	f7ef fc46 	bl	80001dc <__adddf3>
 8010950:	4622      	mov	r2, r4
 8010952:	462b      	mov	r3, r5
 8010954:	f7ef fdf8 	bl	8000548 <__aeabi_dmul>
 8010958:	a371      	add	r3, pc, #452	; (adr r3, 8010b20 <__ieee754_pow+0x718>)
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	f7ef fc3d 	bl	80001dc <__adddf3>
 8010962:	4622      	mov	r2, r4
 8010964:	4606      	mov	r6, r0
 8010966:	460f      	mov	r7, r1
 8010968:	462b      	mov	r3, r5
 801096a:	4620      	mov	r0, r4
 801096c:	4629      	mov	r1, r5
 801096e:	f7ef fdeb 	bl	8000548 <__aeabi_dmul>
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	4630      	mov	r0, r6
 8010978:	4639      	mov	r1, r7
 801097a:	f7ef fde5 	bl	8000548 <__aeabi_dmul>
 801097e:	4642      	mov	r2, r8
 8010980:	4604      	mov	r4, r0
 8010982:	460d      	mov	r5, r1
 8010984:	464b      	mov	r3, r9
 8010986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801098a:	f7ef fc27 	bl	80001dc <__adddf3>
 801098e:	ec53 2b18 	vmov	r2, r3, d8
 8010992:	f7ef fdd9 	bl	8000548 <__aeabi_dmul>
 8010996:	4622      	mov	r2, r4
 8010998:	462b      	mov	r3, r5
 801099a:	f7ef fc1f 	bl	80001dc <__adddf3>
 801099e:	4642      	mov	r2, r8
 80109a0:	4682      	mov	sl, r0
 80109a2:	468b      	mov	fp, r1
 80109a4:	464b      	mov	r3, r9
 80109a6:	4640      	mov	r0, r8
 80109a8:	4649      	mov	r1, r9
 80109aa:	f7ef fdcd 	bl	8000548 <__aeabi_dmul>
 80109ae:	4b6c      	ldr	r3, [pc, #432]	; (8010b60 <__ieee754_pow+0x758>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	4606      	mov	r6, r0
 80109b4:	460f      	mov	r7, r1
 80109b6:	f7ef fc11 	bl	80001dc <__adddf3>
 80109ba:	4652      	mov	r2, sl
 80109bc:	465b      	mov	r3, fp
 80109be:	f7ef fc0d 	bl	80001dc <__adddf3>
 80109c2:	9c04      	ldr	r4, [sp, #16]
 80109c4:	460d      	mov	r5, r1
 80109c6:	4622      	mov	r2, r4
 80109c8:	460b      	mov	r3, r1
 80109ca:	4640      	mov	r0, r8
 80109cc:	4649      	mov	r1, r9
 80109ce:	f7ef fdbb 	bl	8000548 <__aeabi_dmul>
 80109d2:	4b63      	ldr	r3, [pc, #396]	; (8010b60 <__ieee754_pow+0x758>)
 80109d4:	4680      	mov	r8, r0
 80109d6:	4689      	mov	r9, r1
 80109d8:	2200      	movs	r2, #0
 80109da:	4620      	mov	r0, r4
 80109dc:	4629      	mov	r1, r5
 80109de:	f7ef fbfb 	bl	80001d8 <__aeabi_dsub>
 80109e2:	4632      	mov	r2, r6
 80109e4:	463b      	mov	r3, r7
 80109e6:	f7ef fbf7 	bl	80001d8 <__aeabi_dsub>
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	4650      	mov	r0, sl
 80109f0:	4659      	mov	r1, fp
 80109f2:	f7ef fbf1 	bl	80001d8 <__aeabi_dsub>
 80109f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109fa:	f7ef fda5 	bl	8000548 <__aeabi_dmul>
 80109fe:	4622      	mov	r2, r4
 8010a00:	4606      	mov	r6, r0
 8010a02:	460f      	mov	r7, r1
 8010a04:	462b      	mov	r3, r5
 8010a06:	ec51 0b18 	vmov	r0, r1, d8
 8010a0a:	f7ef fd9d 	bl	8000548 <__aeabi_dmul>
 8010a0e:	4602      	mov	r2, r0
 8010a10:	460b      	mov	r3, r1
 8010a12:	4630      	mov	r0, r6
 8010a14:	4639      	mov	r1, r7
 8010a16:	f7ef fbe1 	bl	80001dc <__adddf3>
 8010a1a:	4606      	mov	r6, r0
 8010a1c:	460f      	mov	r7, r1
 8010a1e:	4602      	mov	r2, r0
 8010a20:	460b      	mov	r3, r1
 8010a22:	4640      	mov	r0, r8
 8010a24:	4649      	mov	r1, r9
 8010a26:	f7ef fbd9 	bl	80001dc <__adddf3>
 8010a2a:	9c04      	ldr	r4, [sp, #16]
 8010a2c:	a33e      	add	r3, pc, #248	; (adr r3, 8010b28 <__ieee754_pow+0x720>)
 8010a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a32:	4620      	mov	r0, r4
 8010a34:	460d      	mov	r5, r1
 8010a36:	f7ef fd87 	bl	8000548 <__aeabi_dmul>
 8010a3a:	4642      	mov	r2, r8
 8010a3c:	ec41 0b18 	vmov	d8, r0, r1
 8010a40:	464b      	mov	r3, r9
 8010a42:	4620      	mov	r0, r4
 8010a44:	4629      	mov	r1, r5
 8010a46:	f7ef fbc7 	bl	80001d8 <__aeabi_dsub>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	4630      	mov	r0, r6
 8010a50:	4639      	mov	r1, r7
 8010a52:	f7ef fbc1 	bl	80001d8 <__aeabi_dsub>
 8010a56:	a336      	add	r3, pc, #216	; (adr r3, 8010b30 <__ieee754_pow+0x728>)
 8010a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5c:	f7ef fd74 	bl	8000548 <__aeabi_dmul>
 8010a60:	a335      	add	r3, pc, #212	; (adr r3, 8010b38 <__ieee754_pow+0x730>)
 8010a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a66:	4606      	mov	r6, r0
 8010a68:	460f      	mov	r7, r1
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	f7ef fd6b 	bl	8000548 <__aeabi_dmul>
 8010a72:	4602      	mov	r2, r0
 8010a74:	460b      	mov	r3, r1
 8010a76:	4630      	mov	r0, r6
 8010a78:	4639      	mov	r1, r7
 8010a7a:	f7ef fbaf 	bl	80001dc <__adddf3>
 8010a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a80:	4b38      	ldr	r3, [pc, #224]	; (8010b64 <__ieee754_pow+0x75c>)
 8010a82:	4413      	add	r3, r2
 8010a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a88:	f7ef fba8 	bl	80001dc <__adddf3>
 8010a8c:	4682      	mov	sl, r0
 8010a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a90:	468b      	mov	fp, r1
 8010a92:	f7ef fcef 	bl	8000474 <__aeabi_i2d>
 8010a96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a98:	4b33      	ldr	r3, [pc, #204]	; (8010b68 <__ieee754_pow+0x760>)
 8010a9a:	4413      	add	r3, r2
 8010a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	460f      	mov	r7, r1
 8010aa4:	4652      	mov	r2, sl
 8010aa6:	465b      	mov	r3, fp
 8010aa8:	ec51 0b18 	vmov	r0, r1, d8
 8010aac:	f7ef fb96 	bl	80001dc <__adddf3>
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	f7ef fb92 	bl	80001dc <__adddf3>
 8010ab8:	4632      	mov	r2, r6
 8010aba:	463b      	mov	r3, r7
 8010abc:	f7ef fb8e 	bl	80001dc <__adddf3>
 8010ac0:	9c04      	ldr	r4, [sp, #16]
 8010ac2:	4632      	mov	r2, r6
 8010ac4:	463b      	mov	r3, r7
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	460d      	mov	r5, r1
 8010aca:	f7ef fb85 	bl	80001d8 <__aeabi_dsub>
 8010ace:	4642      	mov	r2, r8
 8010ad0:	464b      	mov	r3, r9
 8010ad2:	f7ef fb81 	bl	80001d8 <__aeabi_dsub>
 8010ad6:	ec53 2b18 	vmov	r2, r3, d8
 8010ada:	f7ef fb7d 	bl	80001d8 <__aeabi_dsub>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	4659      	mov	r1, fp
 8010ae6:	e606      	b.n	80106f6 <__ieee754_pow+0x2ee>
 8010ae8:	2401      	movs	r4, #1
 8010aea:	e6a0      	b.n	801082e <__ieee754_pow+0x426>
 8010aec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010b40 <__ieee754_pow+0x738>
 8010af0:	e60d      	b.n	801070e <__ieee754_pow+0x306>
 8010af2:	bf00      	nop
 8010af4:	f3af 8000 	nop.w
 8010af8:	4a454eef 	.word	0x4a454eef
 8010afc:	3fca7e28 	.word	0x3fca7e28
 8010b00:	93c9db65 	.word	0x93c9db65
 8010b04:	3fcd864a 	.word	0x3fcd864a
 8010b08:	a91d4101 	.word	0xa91d4101
 8010b0c:	3fd17460 	.word	0x3fd17460
 8010b10:	518f264d 	.word	0x518f264d
 8010b14:	3fd55555 	.word	0x3fd55555
 8010b18:	db6fabff 	.word	0xdb6fabff
 8010b1c:	3fdb6db6 	.word	0x3fdb6db6
 8010b20:	33333303 	.word	0x33333303
 8010b24:	3fe33333 	.word	0x3fe33333
 8010b28:	e0000000 	.word	0xe0000000
 8010b2c:	3feec709 	.word	0x3feec709
 8010b30:	dc3a03fd 	.word	0xdc3a03fd
 8010b34:	3feec709 	.word	0x3feec709
 8010b38:	145b01f5 	.word	0x145b01f5
 8010b3c:	be3e2fe0 	.word	0xbe3e2fe0
 8010b40:	00000000 	.word	0x00000000
 8010b44:	3ff00000 	.word	0x3ff00000
 8010b48:	7ff00000 	.word	0x7ff00000
 8010b4c:	43400000 	.word	0x43400000
 8010b50:	0003988e 	.word	0x0003988e
 8010b54:	000bb679 	.word	0x000bb679
 8010b58:	08011bc8 	.word	0x08011bc8
 8010b5c:	3ff00000 	.word	0x3ff00000
 8010b60:	40080000 	.word	0x40080000
 8010b64:	08011be8 	.word	0x08011be8
 8010b68:	08011bd8 	.word	0x08011bd8
 8010b6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010e44 <__ieee754_pow+0xa3c>)
 8010b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b72:	4640      	mov	r0, r8
 8010b74:	4649      	mov	r1, r9
 8010b76:	f7ef fb31 	bl	80001dc <__adddf3>
 8010b7a:	4622      	mov	r2, r4
 8010b7c:	ec41 0b1a 	vmov	d10, r0, r1
 8010b80:	462b      	mov	r3, r5
 8010b82:	4630      	mov	r0, r6
 8010b84:	4639      	mov	r1, r7
 8010b86:	f7ef fb27 	bl	80001d8 <__aeabi_dsub>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	ec51 0b1a 	vmov	r0, r1, d10
 8010b92:	f7ef ff69 	bl	8000a68 <__aeabi_dcmpgt>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	f47f adf8 	bne.w	801078c <__ieee754_pow+0x384>
 8010b9c:	4aa4      	ldr	r2, [pc, #656]	; (8010e30 <__ieee754_pow+0xa28>)
 8010b9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	f340 810b 	ble.w	8010dbe <__ieee754_pow+0x9b6>
 8010ba8:	151b      	asrs	r3, r3, #20
 8010baa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010bae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010bb2:	fa4a f303 	asr.w	r3, sl, r3
 8010bb6:	445b      	add	r3, fp
 8010bb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010bbc:	4e9d      	ldr	r6, [pc, #628]	; (8010e34 <__ieee754_pow+0xa2c>)
 8010bbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010bc2:	4116      	asrs	r6, r2
 8010bc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010bc8:	2000      	movs	r0, #0
 8010bca:	ea23 0106 	bic.w	r1, r3, r6
 8010bce:	f1c2 0214 	rsb	r2, r2, #20
 8010bd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010bd6:	fa4a fa02 	asr.w	sl, sl, r2
 8010bda:	f1bb 0f00 	cmp.w	fp, #0
 8010bde:	4602      	mov	r2, r0
 8010be0:	460b      	mov	r3, r1
 8010be2:	4620      	mov	r0, r4
 8010be4:	4629      	mov	r1, r5
 8010be6:	bfb8      	it	lt
 8010be8:	f1ca 0a00 	rsblt	sl, sl, #0
 8010bec:	f7ef faf4 	bl	80001d8 <__aeabi_dsub>
 8010bf0:	ec41 0b19 	vmov	d9, r0, r1
 8010bf4:	4642      	mov	r2, r8
 8010bf6:	464b      	mov	r3, r9
 8010bf8:	ec51 0b19 	vmov	r0, r1, d9
 8010bfc:	f7ef faee 	bl	80001dc <__adddf3>
 8010c00:	2400      	movs	r4, #0
 8010c02:	a379      	add	r3, pc, #484	; (adr r3, 8010de8 <__ieee754_pow+0x9e0>)
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	4620      	mov	r0, r4
 8010c0a:	460d      	mov	r5, r1
 8010c0c:	f7ef fc9c 	bl	8000548 <__aeabi_dmul>
 8010c10:	ec53 2b19 	vmov	r2, r3, d9
 8010c14:	4606      	mov	r6, r0
 8010c16:	460f      	mov	r7, r1
 8010c18:	4620      	mov	r0, r4
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	f7ef fadc 	bl	80001d8 <__aeabi_dsub>
 8010c20:	4602      	mov	r2, r0
 8010c22:	460b      	mov	r3, r1
 8010c24:	4640      	mov	r0, r8
 8010c26:	4649      	mov	r1, r9
 8010c28:	f7ef fad6 	bl	80001d8 <__aeabi_dsub>
 8010c2c:	a370      	add	r3, pc, #448	; (adr r3, 8010df0 <__ieee754_pow+0x9e8>)
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	f7ef fc89 	bl	8000548 <__aeabi_dmul>
 8010c36:	a370      	add	r3, pc, #448	; (adr r3, 8010df8 <__ieee754_pow+0x9f0>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	4680      	mov	r8, r0
 8010c3e:	4689      	mov	r9, r1
 8010c40:	4620      	mov	r0, r4
 8010c42:	4629      	mov	r1, r5
 8010c44:	f7ef fc80 	bl	8000548 <__aeabi_dmul>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	4640      	mov	r0, r8
 8010c4e:	4649      	mov	r1, r9
 8010c50:	f7ef fac4 	bl	80001dc <__adddf3>
 8010c54:	4604      	mov	r4, r0
 8010c56:	460d      	mov	r5, r1
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	4639      	mov	r1, r7
 8010c60:	f7ef fabc 	bl	80001dc <__adddf3>
 8010c64:	4632      	mov	r2, r6
 8010c66:	463b      	mov	r3, r7
 8010c68:	4680      	mov	r8, r0
 8010c6a:	4689      	mov	r9, r1
 8010c6c:	f7ef fab4 	bl	80001d8 <__aeabi_dsub>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	4620      	mov	r0, r4
 8010c76:	4629      	mov	r1, r5
 8010c78:	f7ef faae 	bl	80001d8 <__aeabi_dsub>
 8010c7c:	4642      	mov	r2, r8
 8010c7e:	4606      	mov	r6, r0
 8010c80:	460f      	mov	r7, r1
 8010c82:	464b      	mov	r3, r9
 8010c84:	4640      	mov	r0, r8
 8010c86:	4649      	mov	r1, r9
 8010c88:	f7ef fc5e 	bl	8000548 <__aeabi_dmul>
 8010c8c:	a35c      	add	r3, pc, #368	; (adr r3, 8010e00 <__ieee754_pow+0x9f8>)
 8010c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c92:	4604      	mov	r4, r0
 8010c94:	460d      	mov	r5, r1
 8010c96:	f7ef fc57 	bl	8000548 <__aeabi_dmul>
 8010c9a:	a35b      	add	r3, pc, #364	; (adr r3, 8010e08 <__ieee754_pow+0xa00>)
 8010c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca0:	f7ef fa9a 	bl	80001d8 <__aeabi_dsub>
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	462b      	mov	r3, r5
 8010ca8:	f7ef fc4e 	bl	8000548 <__aeabi_dmul>
 8010cac:	a358      	add	r3, pc, #352	; (adr r3, 8010e10 <__ieee754_pow+0xa08>)
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	f7ef fa93 	bl	80001dc <__adddf3>
 8010cb6:	4622      	mov	r2, r4
 8010cb8:	462b      	mov	r3, r5
 8010cba:	f7ef fc45 	bl	8000548 <__aeabi_dmul>
 8010cbe:	a356      	add	r3, pc, #344	; (adr r3, 8010e18 <__ieee754_pow+0xa10>)
 8010cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc4:	f7ef fa88 	bl	80001d8 <__aeabi_dsub>
 8010cc8:	4622      	mov	r2, r4
 8010cca:	462b      	mov	r3, r5
 8010ccc:	f7ef fc3c 	bl	8000548 <__aeabi_dmul>
 8010cd0:	a353      	add	r3, pc, #332	; (adr r3, 8010e20 <__ieee754_pow+0xa18>)
 8010cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd6:	f7ef fa81 	bl	80001dc <__adddf3>
 8010cda:	4622      	mov	r2, r4
 8010cdc:	462b      	mov	r3, r5
 8010cde:	f7ef fc33 	bl	8000548 <__aeabi_dmul>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	4640      	mov	r0, r8
 8010ce8:	4649      	mov	r1, r9
 8010cea:	f7ef fa75 	bl	80001d8 <__aeabi_dsub>
 8010cee:	4604      	mov	r4, r0
 8010cf0:	460d      	mov	r5, r1
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	4649      	mov	r1, r9
 8010cfa:	f7ef fc25 	bl	8000548 <__aeabi_dmul>
 8010cfe:	2200      	movs	r2, #0
 8010d00:	ec41 0b19 	vmov	d9, r0, r1
 8010d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d08:	4620      	mov	r0, r4
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	f7ef fa64 	bl	80001d8 <__aeabi_dsub>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	ec51 0b19 	vmov	r0, r1, d9
 8010d18:	f7ef fd40 	bl	800079c <__aeabi_ddiv>
 8010d1c:	4632      	mov	r2, r6
 8010d1e:	4604      	mov	r4, r0
 8010d20:	460d      	mov	r5, r1
 8010d22:	463b      	mov	r3, r7
 8010d24:	4640      	mov	r0, r8
 8010d26:	4649      	mov	r1, r9
 8010d28:	f7ef fc0e 	bl	8000548 <__aeabi_dmul>
 8010d2c:	4632      	mov	r2, r6
 8010d2e:	463b      	mov	r3, r7
 8010d30:	f7ef fa54 	bl	80001dc <__adddf3>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4620      	mov	r0, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	f7ef fa4c 	bl	80001d8 <__aeabi_dsub>
 8010d40:	4642      	mov	r2, r8
 8010d42:	464b      	mov	r3, r9
 8010d44:	f7ef fa48 	bl	80001d8 <__aeabi_dsub>
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	493a      	ldr	r1, [pc, #232]	; (8010e38 <__ieee754_pow+0xa30>)
 8010d4e:	2000      	movs	r0, #0
 8010d50:	f7ef fa42 	bl	80001d8 <__aeabi_dsub>
 8010d54:	e9cd 0100 	strd	r0, r1, [sp]
 8010d58:	9b01      	ldr	r3, [sp, #4]
 8010d5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d62:	da2f      	bge.n	8010dc4 <__ieee754_pow+0x9bc>
 8010d64:	4650      	mov	r0, sl
 8010d66:	ed9d 0b00 	vldr	d0, [sp]
 8010d6a:	f000 fb71 	bl	8011450 <scalbn>
 8010d6e:	ec51 0b10 	vmov	r0, r1, d0
 8010d72:	ec53 2b18 	vmov	r2, r3, d8
 8010d76:	f7ff bbe0 	b.w	801053a <__ieee754_pow+0x132>
 8010d7a:	4b30      	ldr	r3, [pc, #192]	; (8010e3c <__ieee754_pow+0xa34>)
 8010d7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010d80:	429e      	cmp	r6, r3
 8010d82:	f77f af0b 	ble.w	8010b9c <__ieee754_pow+0x794>
 8010d86:	4b2e      	ldr	r3, [pc, #184]	; (8010e40 <__ieee754_pow+0xa38>)
 8010d88:	440b      	add	r3, r1
 8010d8a:	4303      	orrs	r3, r0
 8010d8c:	d00b      	beq.n	8010da6 <__ieee754_pow+0x99e>
 8010d8e:	a326      	add	r3, pc, #152	; (adr r3, 8010e28 <__ieee754_pow+0xa20>)
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	ec51 0b18 	vmov	r0, r1, d8
 8010d98:	f7ef fbd6 	bl	8000548 <__aeabi_dmul>
 8010d9c:	a322      	add	r3, pc, #136	; (adr r3, 8010e28 <__ieee754_pow+0xa20>)
 8010d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da2:	f7ff bbca 	b.w	801053a <__ieee754_pow+0x132>
 8010da6:	4622      	mov	r2, r4
 8010da8:	462b      	mov	r3, r5
 8010daa:	f7ef fa15 	bl	80001d8 <__aeabi_dsub>
 8010dae:	4642      	mov	r2, r8
 8010db0:	464b      	mov	r3, r9
 8010db2:	f7ef fe4f 	bl	8000a54 <__aeabi_dcmpge>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	f43f aef0 	beq.w	8010b9c <__ieee754_pow+0x794>
 8010dbc:	e7e7      	b.n	8010d8e <__ieee754_pow+0x986>
 8010dbe:	f04f 0a00 	mov.w	sl, #0
 8010dc2:	e717      	b.n	8010bf4 <__ieee754_pow+0x7ec>
 8010dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	e7d2      	b.n	8010d72 <__ieee754_pow+0x96a>
 8010dcc:	491a      	ldr	r1, [pc, #104]	; (8010e38 <__ieee754_pow+0xa30>)
 8010dce:	2000      	movs	r0, #0
 8010dd0:	f7ff bb9e 	b.w	8010510 <__ieee754_pow+0x108>
 8010dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dd8:	f7ff bb9a 	b.w	8010510 <__ieee754_pow+0x108>
 8010ddc:	9000      	str	r0, [sp, #0]
 8010dde:	f7ff bb76 	b.w	80104ce <__ieee754_pow+0xc6>
 8010de2:	2100      	movs	r1, #0
 8010de4:	f7ff bb60 	b.w	80104a8 <__ieee754_pow+0xa0>
 8010de8:	00000000 	.word	0x00000000
 8010dec:	3fe62e43 	.word	0x3fe62e43
 8010df0:	fefa39ef 	.word	0xfefa39ef
 8010df4:	3fe62e42 	.word	0x3fe62e42
 8010df8:	0ca86c39 	.word	0x0ca86c39
 8010dfc:	be205c61 	.word	0xbe205c61
 8010e00:	72bea4d0 	.word	0x72bea4d0
 8010e04:	3e663769 	.word	0x3e663769
 8010e08:	c5d26bf1 	.word	0xc5d26bf1
 8010e0c:	3ebbbd41 	.word	0x3ebbbd41
 8010e10:	af25de2c 	.word	0xaf25de2c
 8010e14:	3f11566a 	.word	0x3f11566a
 8010e18:	16bebd93 	.word	0x16bebd93
 8010e1c:	3f66c16c 	.word	0x3f66c16c
 8010e20:	5555553e 	.word	0x5555553e
 8010e24:	3fc55555 	.word	0x3fc55555
 8010e28:	c2f8f359 	.word	0xc2f8f359
 8010e2c:	01a56e1f 	.word	0x01a56e1f
 8010e30:	3fe00000 	.word	0x3fe00000
 8010e34:	000fffff 	.word	0x000fffff
 8010e38:	3ff00000 	.word	0x3ff00000
 8010e3c:	4090cbff 	.word	0x4090cbff
 8010e40:	3f6f3400 	.word	0x3f6f3400
 8010e44:	652b82fe 	.word	0x652b82fe
 8010e48:	3c971547 	.word	0x3c971547

08010e4c <__ieee754_sqrt>:
 8010e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e50:	ec55 4b10 	vmov	r4, r5, d0
 8010e54:	4e56      	ldr	r6, [pc, #344]	; (8010fb0 <__ieee754_sqrt+0x164>)
 8010e56:	43ae      	bics	r6, r5
 8010e58:	ee10 0a10 	vmov	r0, s0
 8010e5c:	ee10 3a10 	vmov	r3, s0
 8010e60:	4629      	mov	r1, r5
 8010e62:	462a      	mov	r2, r5
 8010e64:	d110      	bne.n	8010e88 <__ieee754_sqrt+0x3c>
 8010e66:	ee10 2a10 	vmov	r2, s0
 8010e6a:	462b      	mov	r3, r5
 8010e6c:	f7ef fb6c 	bl	8000548 <__aeabi_dmul>
 8010e70:	4602      	mov	r2, r0
 8010e72:	460b      	mov	r3, r1
 8010e74:	4620      	mov	r0, r4
 8010e76:	4629      	mov	r1, r5
 8010e78:	f7ef f9b0 	bl	80001dc <__adddf3>
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	460d      	mov	r5, r1
 8010e80:	ec45 4b10 	vmov	d0, r4, r5
 8010e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e88:	2d00      	cmp	r5, #0
 8010e8a:	dc10      	bgt.n	8010eae <__ieee754_sqrt+0x62>
 8010e8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e90:	4330      	orrs	r0, r6
 8010e92:	d0f5      	beq.n	8010e80 <__ieee754_sqrt+0x34>
 8010e94:	b15d      	cbz	r5, 8010eae <__ieee754_sqrt+0x62>
 8010e96:	ee10 2a10 	vmov	r2, s0
 8010e9a:	462b      	mov	r3, r5
 8010e9c:	ee10 0a10 	vmov	r0, s0
 8010ea0:	f7ef f99a 	bl	80001d8 <__aeabi_dsub>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	f7ef fc78 	bl	800079c <__aeabi_ddiv>
 8010eac:	e7e6      	b.n	8010e7c <__ieee754_sqrt+0x30>
 8010eae:	1509      	asrs	r1, r1, #20
 8010eb0:	d076      	beq.n	8010fa0 <__ieee754_sqrt+0x154>
 8010eb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010eb6:	07ce      	lsls	r6, r1, #31
 8010eb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010ebc:	bf5e      	ittt	pl
 8010ebe:	0fda      	lsrpl	r2, r3, #31
 8010ec0:	005b      	lslpl	r3, r3, #1
 8010ec2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010ec6:	0fda      	lsrs	r2, r3, #31
 8010ec8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010ecc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	106d      	asrs	r5, r5, #1
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	f04f 0e16 	mov.w	lr, #22
 8010eda:	4684      	mov	ip, r0
 8010edc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ee0:	eb0c 0401 	add.w	r4, ip, r1
 8010ee4:	4294      	cmp	r4, r2
 8010ee6:	bfde      	ittt	le
 8010ee8:	1b12      	suble	r2, r2, r4
 8010eea:	eb04 0c01 	addle.w	ip, r4, r1
 8010eee:	1840      	addle	r0, r0, r1
 8010ef0:	0052      	lsls	r2, r2, #1
 8010ef2:	f1be 0e01 	subs.w	lr, lr, #1
 8010ef6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010efa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010efe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f02:	d1ed      	bne.n	8010ee0 <__ieee754_sqrt+0x94>
 8010f04:	4671      	mov	r1, lr
 8010f06:	2720      	movs	r7, #32
 8010f08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010f0c:	4562      	cmp	r2, ip
 8010f0e:	eb04 060e 	add.w	r6, r4, lr
 8010f12:	dc02      	bgt.n	8010f1a <__ieee754_sqrt+0xce>
 8010f14:	d113      	bne.n	8010f3e <__ieee754_sqrt+0xf2>
 8010f16:	429e      	cmp	r6, r3
 8010f18:	d811      	bhi.n	8010f3e <__ieee754_sqrt+0xf2>
 8010f1a:	2e00      	cmp	r6, #0
 8010f1c:	eb06 0e04 	add.w	lr, r6, r4
 8010f20:	da43      	bge.n	8010faa <__ieee754_sqrt+0x15e>
 8010f22:	f1be 0f00 	cmp.w	lr, #0
 8010f26:	db40      	blt.n	8010faa <__ieee754_sqrt+0x15e>
 8010f28:	f10c 0801 	add.w	r8, ip, #1
 8010f2c:	eba2 020c 	sub.w	r2, r2, ip
 8010f30:	429e      	cmp	r6, r3
 8010f32:	bf88      	it	hi
 8010f34:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010f38:	1b9b      	subs	r3, r3, r6
 8010f3a:	4421      	add	r1, r4
 8010f3c:	46c4      	mov	ip, r8
 8010f3e:	0052      	lsls	r2, r2, #1
 8010f40:	3f01      	subs	r7, #1
 8010f42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010f46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010f4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f4e:	d1dd      	bne.n	8010f0c <__ieee754_sqrt+0xc0>
 8010f50:	4313      	orrs	r3, r2
 8010f52:	d006      	beq.n	8010f62 <__ieee754_sqrt+0x116>
 8010f54:	1c4c      	adds	r4, r1, #1
 8010f56:	bf13      	iteet	ne
 8010f58:	3101      	addne	r1, #1
 8010f5a:	3001      	addeq	r0, #1
 8010f5c:	4639      	moveq	r1, r7
 8010f5e:	f021 0101 	bicne.w	r1, r1, #1
 8010f62:	1043      	asrs	r3, r0, #1
 8010f64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010f68:	0849      	lsrs	r1, r1, #1
 8010f6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010f6e:	07c2      	lsls	r2, r0, #31
 8010f70:	bf48      	it	mi
 8010f72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010f76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	463d      	mov	r5, r7
 8010f7e:	e77f      	b.n	8010e80 <__ieee754_sqrt+0x34>
 8010f80:	0ada      	lsrs	r2, r3, #11
 8010f82:	3815      	subs	r0, #21
 8010f84:	055b      	lsls	r3, r3, #21
 8010f86:	2a00      	cmp	r2, #0
 8010f88:	d0fa      	beq.n	8010f80 <__ieee754_sqrt+0x134>
 8010f8a:	02d7      	lsls	r7, r2, #11
 8010f8c:	d50a      	bpl.n	8010fa4 <__ieee754_sqrt+0x158>
 8010f8e:	f1c1 0420 	rsb	r4, r1, #32
 8010f92:	fa23 f404 	lsr.w	r4, r3, r4
 8010f96:	1e4d      	subs	r5, r1, #1
 8010f98:	408b      	lsls	r3, r1
 8010f9a:	4322      	orrs	r2, r4
 8010f9c:	1b41      	subs	r1, r0, r5
 8010f9e:	e788      	b.n	8010eb2 <__ieee754_sqrt+0x66>
 8010fa0:	4608      	mov	r0, r1
 8010fa2:	e7f0      	b.n	8010f86 <__ieee754_sqrt+0x13a>
 8010fa4:	0052      	lsls	r2, r2, #1
 8010fa6:	3101      	adds	r1, #1
 8010fa8:	e7ef      	b.n	8010f8a <__ieee754_sqrt+0x13e>
 8010faa:	46e0      	mov	r8, ip
 8010fac:	e7be      	b.n	8010f2c <__ieee754_sqrt+0xe0>
 8010fae:	bf00      	nop
 8010fb0:	7ff00000 	.word	0x7ff00000

08010fb4 <__ieee754_sqrtf>:
 8010fb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010fb8:	4770      	bx	lr
 8010fba:	0000      	movs	r0, r0
 8010fbc:	0000      	movs	r0, r0
	...

08010fc0 <atan>:
 8010fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	ec55 4b10 	vmov	r4, r5, d0
 8010fc8:	4bc3      	ldr	r3, [pc, #780]	; (80112d8 <atan+0x318>)
 8010fca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010fce:	429e      	cmp	r6, r3
 8010fd0:	46ab      	mov	fp, r5
 8010fd2:	dd18      	ble.n	8011006 <atan+0x46>
 8010fd4:	4bc1      	ldr	r3, [pc, #772]	; (80112dc <atan+0x31c>)
 8010fd6:	429e      	cmp	r6, r3
 8010fd8:	dc01      	bgt.n	8010fde <atan+0x1e>
 8010fda:	d109      	bne.n	8010ff0 <atan+0x30>
 8010fdc:	b144      	cbz	r4, 8010ff0 <atan+0x30>
 8010fde:	4622      	mov	r2, r4
 8010fe0:	462b      	mov	r3, r5
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7ef f8f9 	bl	80001dc <__adddf3>
 8010fea:	4604      	mov	r4, r0
 8010fec:	460d      	mov	r5, r1
 8010fee:	e006      	b.n	8010ffe <atan+0x3e>
 8010ff0:	f1bb 0f00 	cmp.w	fp, #0
 8010ff4:	f300 8131 	bgt.w	801125a <atan+0x29a>
 8010ff8:	a59b      	add	r5, pc, #620	; (adr r5, 8011268 <atan+0x2a8>)
 8010ffa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ffe:	ec45 4b10 	vmov	d0, r4, r5
 8011002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011006:	4bb6      	ldr	r3, [pc, #728]	; (80112e0 <atan+0x320>)
 8011008:	429e      	cmp	r6, r3
 801100a:	dc14      	bgt.n	8011036 <atan+0x76>
 801100c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011010:	429e      	cmp	r6, r3
 8011012:	dc0d      	bgt.n	8011030 <atan+0x70>
 8011014:	a396      	add	r3, pc, #600	; (adr r3, 8011270 <atan+0x2b0>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	ee10 0a10 	vmov	r0, s0
 801101e:	4629      	mov	r1, r5
 8011020:	f7ef f8dc 	bl	80001dc <__adddf3>
 8011024:	4baf      	ldr	r3, [pc, #700]	; (80112e4 <atan+0x324>)
 8011026:	2200      	movs	r2, #0
 8011028:	f7ef fd1e 	bl	8000a68 <__aeabi_dcmpgt>
 801102c:	2800      	cmp	r0, #0
 801102e:	d1e6      	bne.n	8010ffe <atan+0x3e>
 8011030:	f04f 3aff 	mov.w	sl, #4294967295
 8011034:	e02b      	b.n	801108e <atan+0xce>
 8011036:	f000 f963 	bl	8011300 <fabs>
 801103a:	4bab      	ldr	r3, [pc, #684]	; (80112e8 <atan+0x328>)
 801103c:	429e      	cmp	r6, r3
 801103e:	ec55 4b10 	vmov	r4, r5, d0
 8011042:	f300 80bf 	bgt.w	80111c4 <atan+0x204>
 8011046:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801104a:	429e      	cmp	r6, r3
 801104c:	f300 80a0 	bgt.w	8011190 <atan+0x1d0>
 8011050:	ee10 2a10 	vmov	r2, s0
 8011054:	ee10 0a10 	vmov	r0, s0
 8011058:	462b      	mov	r3, r5
 801105a:	4629      	mov	r1, r5
 801105c:	f7ef f8be 	bl	80001dc <__adddf3>
 8011060:	4ba0      	ldr	r3, [pc, #640]	; (80112e4 <atan+0x324>)
 8011062:	2200      	movs	r2, #0
 8011064:	f7ef f8b8 	bl	80001d8 <__aeabi_dsub>
 8011068:	2200      	movs	r2, #0
 801106a:	4606      	mov	r6, r0
 801106c:	460f      	mov	r7, r1
 801106e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011072:	4620      	mov	r0, r4
 8011074:	4629      	mov	r1, r5
 8011076:	f7ef f8b1 	bl	80001dc <__adddf3>
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	4630      	mov	r0, r6
 8011080:	4639      	mov	r1, r7
 8011082:	f7ef fb8b 	bl	800079c <__aeabi_ddiv>
 8011086:	f04f 0a00 	mov.w	sl, #0
 801108a:	4604      	mov	r4, r0
 801108c:	460d      	mov	r5, r1
 801108e:	4622      	mov	r2, r4
 8011090:	462b      	mov	r3, r5
 8011092:	4620      	mov	r0, r4
 8011094:	4629      	mov	r1, r5
 8011096:	f7ef fa57 	bl	8000548 <__aeabi_dmul>
 801109a:	4602      	mov	r2, r0
 801109c:	460b      	mov	r3, r1
 801109e:	4680      	mov	r8, r0
 80110a0:	4689      	mov	r9, r1
 80110a2:	f7ef fa51 	bl	8000548 <__aeabi_dmul>
 80110a6:	a374      	add	r3, pc, #464	; (adr r3, 8011278 <atan+0x2b8>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	4606      	mov	r6, r0
 80110ae:	460f      	mov	r7, r1
 80110b0:	f7ef fa4a 	bl	8000548 <__aeabi_dmul>
 80110b4:	a372      	add	r3, pc, #456	; (adr r3, 8011280 <atan+0x2c0>)
 80110b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ba:	f7ef f88f 	bl	80001dc <__adddf3>
 80110be:	4632      	mov	r2, r6
 80110c0:	463b      	mov	r3, r7
 80110c2:	f7ef fa41 	bl	8000548 <__aeabi_dmul>
 80110c6:	a370      	add	r3, pc, #448	; (adr r3, 8011288 <atan+0x2c8>)
 80110c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110cc:	f7ef f886 	bl	80001dc <__adddf3>
 80110d0:	4632      	mov	r2, r6
 80110d2:	463b      	mov	r3, r7
 80110d4:	f7ef fa38 	bl	8000548 <__aeabi_dmul>
 80110d8:	a36d      	add	r3, pc, #436	; (adr r3, 8011290 <atan+0x2d0>)
 80110da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110de:	f7ef f87d 	bl	80001dc <__adddf3>
 80110e2:	4632      	mov	r2, r6
 80110e4:	463b      	mov	r3, r7
 80110e6:	f7ef fa2f 	bl	8000548 <__aeabi_dmul>
 80110ea:	a36b      	add	r3, pc, #428	; (adr r3, 8011298 <atan+0x2d8>)
 80110ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f0:	f7ef f874 	bl	80001dc <__adddf3>
 80110f4:	4632      	mov	r2, r6
 80110f6:	463b      	mov	r3, r7
 80110f8:	f7ef fa26 	bl	8000548 <__aeabi_dmul>
 80110fc:	a368      	add	r3, pc, #416	; (adr r3, 80112a0 <atan+0x2e0>)
 80110fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011102:	f7ef f86b 	bl	80001dc <__adddf3>
 8011106:	4642      	mov	r2, r8
 8011108:	464b      	mov	r3, r9
 801110a:	f7ef fa1d 	bl	8000548 <__aeabi_dmul>
 801110e:	a366      	add	r3, pc, #408	; (adr r3, 80112a8 <atan+0x2e8>)
 8011110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011114:	4680      	mov	r8, r0
 8011116:	4689      	mov	r9, r1
 8011118:	4630      	mov	r0, r6
 801111a:	4639      	mov	r1, r7
 801111c:	f7ef fa14 	bl	8000548 <__aeabi_dmul>
 8011120:	a363      	add	r3, pc, #396	; (adr r3, 80112b0 <atan+0x2f0>)
 8011122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011126:	f7ef f857 	bl	80001d8 <__aeabi_dsub>
 801112a:	4632      	mov	r2, r6
 801112c:	463b      	mov	r3, r7
 801112e:	f7ef fa0b 	bl	8000548 <__aeabi_dmul>
 8011132:	a361      	add	r3, pc, #388	; (adr r3, 80112b8 <atan+0x2f8>)
 8011134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011138:	f7ef f84e 	bl	80001d8 <__aeabi_dsub>
 801113c:	4632      	mov	r2, r6
 801113e:	463b      	mov	r3, r7
 8011140:	f7ef fa02 	bl	8000548 <__aeabi_dmul>
 8011144:	a35e      	add	r3, pc, #376	; (adr r3, 80112c0 <atan+0x300>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	f7ef f845 	bl	80001d8 <__aeabi_dsub>
 801114e:	4632      	mov	r2, r6
 8011150:	463b      	mov	r3, r7
 8011152:	f7ef f9f9 	bl	8000548 <__aeabi_dmul>
 8011156:	a35c      	add	r3, pc, #368	; (adr r3, 80112c8 <atan+0x308>)
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	f7ef f83c 	bl	80001d8 <__aeabi_dsub>
 8011160:	4632      	mov	r2, r6
 8011162:	463b      	mov	r3, r7
 8011164:	f7ef f9f0 	bl	8000548 <__aeabi_dmul>
 8011168:	4602      	mov	r2, r0
 801116a:	460b      	mov	r3, r1
 801116c:	4640      	mov	r0, r8
 801116e:	4649      	mov	r1, r9
 8011170:	f7ef f834 	bl	80001dc <__adddf3>
 8011174:	4622      	mov	r2, r4
 8011176:	462b      	mov	r3, r5
 8011178:	f7ef f9e6 	bl	8000548 <__aeabi_dmul>
 801117c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011180:	4602      	mov	r2, r0
 8011182:	460b      	mov	r3, r1
 8011184:	d14b      	bne.n	801121e <atan+0x25e>
 8011186:	4620      	mov	r0, r4
 8011188:	4629      	mov	r1, r5
 801118a:	f7ef f825 	bl	80001d8 <__aeabi_dsub>
 801118e:	e72c      	b.n	8010fea <atan+0x2a>
 8011190:	ee10 0a10 	vmov	r0, s0
 8011194:	4b53      	ldr	r3, [pc, #332]	; (80112e4 <atan+0x324>)
 8011196:	2200      	movs	r2, #0
 8011198:	4629      	mov	r1, r5
 801119a:	f7ef f81d 	bl	80001d8 <__aeabi_dsub>
 801119e:	4b51      	ldr	r3, [pc, #324]	; (80112e4 <atan+0x324>)
 80111a0:	4606      	mov	r6, r0
 80111a2:	460f      	mov	r7, r1
 80111a4:	2200      	movs	r2, #0
 80111a6:	4620      	mov	r0, r4
 80111a8:	4629      	mov	r1, r5
 80111aa:	f7ef f817 	bl	80001dc <__adddf3>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4630      	mov	r0, r6
 80111b4:	4639      	mov	r1, r7
 80111b6:	f7ef faf1 	bl	800079c <__aeabi_ddiv>
 80111ba:	f04f 0a01 	mov.w	sl, #1
 80111be:	4604      	mov	r4, r0
 80111c0:	460d      	mov	r5, r1
 80111c2:	e764      	b.n	801108e <atan+0xce>
 80111c4:	4b49      	ldr	r3, [pc, #292]	; (80112ec <atan+0x32c>)
 80111c6:	429e      	cmp	r6, r3
 80111c8:	da1d      	bge.n	8011206 <atan+0x246>
 80111ca:	ee10 0a10 	vmov	r0, s0
 80111ce:	4b48      	ldr	r3, [pc, #288]	; (80112f0 <atan+0x330>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	4629      	mov	r1, r5
 80111d4:	f7ef f800 	bl	80001d8 <__aeabi_dsub>
 80111d8:	4b45      	ldr	r3, [pc, #276]	; (80112f0 <atan+0x330>)
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	2200      	movs	r2, #0
 80111e0:	4620      	mov	r0, r4
 80111e2:	4629      	mov	r1, r5
 80111e4:	f7ef f9b0 	bl	8000548 <__aeabi_dmul>
 80111e8:	4b3e      	ldr	r3, [pc, #248]	; (80112e4 <atan+0x324>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	f7ee fff6 	bl	80001dc <__adddf3>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4630      	mov	r0, r6
 80111f6:	4639      	mov	r1, r7
 80111f8:	f7ef fad0 	bl	800079c <__aeabi_ddiv>
 80111fc:	f04f 0a02 	mov.w	sl, #2
 8011200:	4604      	mov	r4, r0
 8011202:	460d      	mov	r5, r1
 8011204:	e743      	b.n	801108e <atan+0xce>
 8011206:	462b      	mov	r3, r5
 8011208:	ee10 2a10 	vmov	r2, s0
 801120c:	4939      	ldr	r1, [pc, #228]	; (80112f4 <atan+0x334>)
 801120e:	2000      	movs	r0, #0
 8011210:	f7ef fac4 	bl	800079c <__aeabi_ddiv>
 8011214:	f04f 0a03 	mov.w	sl, #3
 8011218:	4604      	mov	r4, r0
 801121a:	460d      	mov	r5, r1
 801121c:	e737      	b.n	801108e <atan+0xce>
 801121e:	4b36      	ldr	r3, [pc, #216]	; (80112f8 <atan+0x338>)
 8011220:	4e36      	ldr	r6, [pc, #216]	; (80112fc <atan+0x33c>)
 8011222:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011226:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801122a:	e9da 2300 	ldrd	r2, r3, [sl]
 801122e:	f7ee ffd3 	bl	80001d8 <__aeabi_dsub>
 8011232:	4622      	mov	r2, r4
 8011234:	462b      	mov	r3, r5
 8011236:	f7ee ffcf 	bl	80001d8 <__aeabi_dsub>
 801123a:	4602      	mov	r2, r0
 801123c:	460b      	mov	r3, r1
 801123e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011242:	f7ee ffc9 	bl	80001d8 <__aeabi_dsub>
 8011246:	f1bb 0f00 	cmp.w	fp, #0
 801124a:	4604      	mov	r4, r0
 801124c:	460d      	mov	r5, r1
 801124e:	f6bf aed6 	bge.w	8010ffe <atan+0x3e>
 8011252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011256:	461d      	mov	r5, r3
 8011258:	e6d1      	b.n	8010ffe <atan+0x3e>
 801125a:	a51d      	add	r5, pc, #116	; (adr r5, 80112d0 <atan+0x310>)
 801125c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011260:	e6cd      	b.n	8010ffe <atan+0x3e>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	54442d18 	.word	0x54442d18
 801126c:	bff921fb 	.word	0xbff921fb
 8011270:	8800759c 	.word	0x8800759c
 8011274:	7e37e43c 	.word	0x7e37e43c
 8011278:	e322da11 	.word	0xe322da11
 801127c:	3f90ad3a 	.word	0x3f90ad3a
 8011280:	24760deb 	.word	0x24760deb
 8011284:	3fa97b4b 	.word	0x3fa97b4b
 8011288:	a0d03d51 	.word	0xa0d03d51
 801128c:	3fb10d66 	.word	0x3fb10d66
 8011290:	c54c206e 	.word	0xc54c206e
 8011294:	3fb745cd 	.word	0x3fb745cd
 8011298:	920083ff 	.word	0x920083ff
 801129c:	3fc24924 	.word	0x3fc24924
 80112a0:	5555550d 	.word	0x5555550d
 80112a4:	3fd55555 	.word	0x3fd55555
 80112a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80112ac:	bfa2b444 	.word	0xbfa2b444
 80112b0:	52defd9a 	.word	0x52defd9a
 80112b4:	3fadde2d 	.word	0x3fadde2d
 80112b8:	af749a6d 	.word	0xaf749a6d
 80112bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80112c0:	fe231671 	.word	0xfe231671
 80112c4:	3fbc71c6 	.word	0x3fbc71c6
 80112c8:	9998ebc4 	.word	0x9998ebc4
 80112cc:	3fc99999 	.word	0x3fc99999
 80112d0:	54442d18 	.word	0x54442d18
 80112d4:	3ff921fb 	.word	0x3ff921fb
 80112d8:	440fffff 	.word	0x440fffff
 80112dc:	7ff00000 	.word	0x7ff00000
 80112e0:	3fdbffff 	.word	0x3fdbffff
 80112e4:	3ff00000 	.word	0x3ff00000
 80112e8:	3ff2ffff 	.word	0x3ff2ffff
 80112ec:	40038000 	.word	0x40038000
 80112f0:	3ff80000 	.word	0x3ff80000
 80112f4:	bff00000 	.word	0xbff00000
 80112f8:	08011c18 	.word	0x08011c18
 80112fc:	08011bf8 	.word	0x08011bf8

08011300 <fabs>:
 8011300:	ec51 0b10 	vmov	r0, r1, d0
 8011304:	ee10 2a10 	vmov	r2, s0
 8011308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801130c:	ec43 2b10 	vmov	d0, r2, r3
 8011310:	4770      	bx	lr

08011312 <finite>:
 8011312:	b082      	sub	sp, #8
 8011314:	ed8d 0b00 	vstr	d0, [sp]
 8011318:	9801      	ldr	r0, [sp, #4]
 801131a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801131e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011322:	0fc0      	lsrs	r0, r0, #31
 8011324:	b002      	add	sp, #8
 8011326:	4770      	bx	lr

08011328 <nan>:
 8011328:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011330 <nan+0x8>
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	00000000 	.word	0x00000000
 8011334:	7ff80000 	.word	0x7ff80000

08011338 <rint>:
 8011338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801133a:	ec51 0b10 	vmov	r0, r1, d0
 801133e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011342:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011346:	2e13      	cmp	r6, #19
 8011348:	ee10 4a10 	vmov	r4, s0
 801134c:	460b      	mov	r3, r1
 801134e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011352:	dc58      	bgt.n	8011406 <rint+0xce>
 8011354:	2e00      	cmp	r6, #0
 8011356:	da2b      	bge.n	80113b0 <rint+0x78>
 8011358:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801135c:	4302      	orrs	r2, r0
 801135e:	d023      	beq.n	80113a8 <rint+0x70>
 8011360:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011364:	4302      	orrs	r2, r0
 8011366:	4254      	negs	r4, r2
 8011368:	4314      	orrs	r4, r2
 801136a:	0c4b      	lsrs	r3, r1, #17
 801136c:	0b24      	lsrs	r4, r4, #12
 801136e:	045b      	lsls	r3, r3, #17
 8011370:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011374:	ea44 0103 	orr.w	r1, r4, r3
 8011378:	4b32      	ldr	r3, [pc, #200]	; (8011444 <rint+0x10c>)
 801137a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801137e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	4630      	mov	r0, r6
 8011388:	4639      	mov	r1, r7
 801138a:	f7ee ff27 	bl	80001dc <__adddf3>
 801138e:	e9cd 0100 	strd	r0, r1, [sp]
 8011392:	463b      	mov	r3, r7
 8011394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011398:	4632      	mov	r2, r6
 801139a:	f7ee ff1d 	bl	80001d8 <__aeabi_dsub>
 801139e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80113a6:	4639      	mov	r1, r7
 80113a8:	ec41 0b10 	vmov	d0, r0, r1
 80113ac:	b003      	add	sp, #12
 80113ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b0:	4a25      	ldr	r2, [pc, #148]	; (8011448 <rint+0x110>)
 80113b2:	4132      	asrs	r2, r6
 80113b4:	ea01 0702 	and.w	r7, r1, r2
 80113b8:	4307      	orrs	r7, r0
 80113ba:	d0f5      	beq.n	80113a8 <rint+0x70>
 80113bc:	0851      	lsrs	r1, r2, #1
 80113be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80113c2:	4314      	orrs	r4, r2
 80113c4:	d00c      	beq.n	80113e0 <rint+0xa8>
 80113c6:	ea23 0201 	bic.w	r2, r3, r1
 80113ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80113ce:	2e13      	cmp	r6, #19
 80113d0:	fa43 f606 	asr.w	r6, r3, r6
 80113d4:	bf0c      	ite	eq
 80113d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80113da:	2400      	movne	r4, #0
 80113dc:	ea42 0306 	orr.w	r3, r2, r6
 80113e0:	4918      	ldr	r1, [pc, #96]	; (8011444 <rint+0x10c>)
 80113e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80113e6:	4622      	mov	r2, r4
 80113e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80113ec:	4620      	mov	r0, r4
 80113ee:	4629      	mov	r1, r5
 80113f0:	f7ee fef4 	bl	80001dc <__adddf3>
 80113f4:	e9cd 0100 	strd	r0, r1, [sp]
 80113f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113fc:	4622      	mov	r2, r4
 80113fe:	462b      	mov	r3, r5
 8011400:	f7ee feea 	bl	80001d8 <__aeabi_dsub>
 8011404:	e7d0      	b.n	80113a8 <rint+0x70>
 8011406:	2e33      	cmp	r6, #51	; 0x33
 8011408:	dd07      	ble.n	801141a <rint+0xe2>
 801140a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801140e:	d1cb      	bne.n	80113a8 <rint+0x70>
 8011410:	ee10 2a10 	vmov	r2, s0
 8011414:	f7ee fee2 	bl	80001dc <__adddf3>
 8011418:	e7c6      	b.n	80113a8 <rint+0x70>
 801141a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801141e:	f04f 36ff 	mov.w	r6, #4294967295
 8011422:	40d6      	lsrs	r6, r2
 8011424:	4230      	tst	r0, r6
 8011426:	d0bf      	beq.n	80113a8 <rint+0x70>
 8011428:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801142c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011430:	bf1f      	itttt	ne
 8011432:	ea24 0101 	bicne.w	r1, r4, r1
 8011436:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801143a:	fa44 f202 	asrne.w	r2, r4, r2
 801143e:	ea41 0402 	orrne.w	r4, r1, r2
 8011442:	e7cd      	b.n	80113e0 <rint+0xa8>
 8011444:	08011c38 	.word	0x08011c38
 8011448:	000fffff 	.word	0x000fffff
 801144c:	00000000 	.word	0x00000000

08011450 <scalbn>:
 8011450:	b570      	push	{r4, r5, r6, lr}
 8011452:	ec55 4b10 	vmov	r4, r5, d0
 8011456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801145a:	4606      	mov	r6, r0
 801145c:	462b      	mov	r3, r5
 801145e:	b99a      	cbnz	r2, 8011488 <scalbn+0x38>
 8011460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011464:	4323      	orrs	r3, r4
 8011466:	d036      	beq.n	80114d6 <scalbn+0x86>
 8011468:	4b39      	ldr	r3, [pc, #228]	; (8011550 <scalbn+0x100>)
 801146a:	4629      	mov	r1, r5
 801146c:	ee10 0a10 	vmov	r0, s0
 8011470:	2200      	movs	r2, #0
 8011472:	f7ef f869 	bl	8000548 <__aeabi_dmul>
 8011476:	4b37      	ldr	r3, [pc, #220]	; (8011554 <scalbn+0x104>)
 8011478:	429e      	cmp	r6, r3
 801147a:	4604      	mov	r4, r0
 801147c:	460d      	mov	r5, r1
 801147e:	da10      	bge.n	80114a2 <scalbn+0x52>
 8011480:	a32b      	add	r3, pc, #172	; (adr r3, 8011530 <scalbn+0xe0>)
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	e03a      	b.n	80114fe <scalbn+0xae>
 8011488:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801148c:	428a      	cmp	r2, r1
 801148e:	d10c      	bne.n	80114aa <scalbn+0x5a>
 8011490:	ee10 2a10 	vmov	r2, s0
 8011494:	4620      	mov	r0, r4
 8011496:	4629      	mov	r1, r5
 8011498:	f7ee fea0 	bl	80001dc <__adddf3>
 801149c:	4604      	mov	r4, r0
 801149e:	460d      	mov	r5, r1
 80114a0:	e019      	b.n	80114d6 <scalbn+0x86>
 80114a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80114a6:	460b      	mov	r3, r1
 80114a8:	3a36      	subs	r2, #54	; 0x36
 80114aa:	4432      	add	r2, r6
 80114ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80114b0:	428a      	cmp	r2, r1
 80114b2:	dd08      	ble.n	80114c6 <scalbn+0x76>
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	a120      	add	r1, pc, #128	; (adr r1, 8011538 <scalbn+0xe8>)
 80114b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114bc:	da1c      	bge.n	80114f8 <scalbn+0xa8>
 80114be:	a120      	add	r1, pc, #128	; (adr r1, 8011540 <scalbn+0xf0>)
 80114c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c4:	e018      	b.n	80114f8 <scalbn+0xa8>
 80114c6:	2a00      	cmp	r2, #0
 80114c8:	dd08      	ble.n	80114dc <scalbn+0x8c>
 80114ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80114ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80114d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80114d6:	ec45 4b10 	vmov	d0, r4, r5
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80114e0:	da19      	bge.n	8011516 <scalbn+0xc6>
 80114e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80114e6:	429e      	cmp	r6, r3
 80114e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80114ec:	dd0a      	ble.n	8011504 <scalbn+0xb4>
 80114ee:	a112      	add	r1, pc, #72	; (adr r1, 8011538 <scalbn+0xe8>)
 80114f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1e2      	bne.n	80114be <scalbn+0x6e>
 80114f8:	a30f      	add	r3, pc, #60	; (adr r3, 8011538 <scalbn+0xe8>)
 80114fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fe:	f7ef f823 	bl	8000548 <__aeabi_dmul>
 8011502:	e7cb      	b.n	801149c <scalbn+0x4c>
 8011504:	a10a      	add	r1, pc, #40	; (adr r1, 8011530 <scalbn+0xe0>)
 8011506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0b8      	beq.n	8011480 <scalbn+0x30>
 801150e:	a10e      	add	r1, pc, #56	; (adr r1, 8011548 <scalbn+0xf8>)
 8011510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011514:	e7b4      	b.n	8011480 <scalbn+0x30>
 8011516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801151a:	3236      	adds	r2, #54	; 0x36
 801151c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011524:	4620      	mov	r0, r4
 8011526:	4b0c      	ldr	r3, [pc, #48]	; (8011558 <scalbn+0x108>)
 8011528:	2200      	movs	r2, #0
 801152a:	e7e8      	b.n	80114fe <scalbn+0xae>
 801152c:	f3af 8000 	nop.w
 8011530:	c2f8f359 	.word	0xc2f8f359
 8011534:	01a56e1f 	.word	0x01a56e1f
 8011538:	8800759c 	.word	0x8800759c
 801153c:	7e37e43c 	.word	0x7e37e43c
 8011540:	8800759c 	.word	0x8800759c
 8011544:	fe37e43c 	.word	0xfe37e43c
 8011548:	c2f8f359 	.word	0xc2f8f359
 801154c:	81a56e1f 	.word	0x81a56e1f
 8011550:	43500000 	.word	0x43500000
 8011554:	ffff3cb0 	.word	0xffff3cb0
 8011558:	3c900000 	.word	0x3c900000

0801155c <_init>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	bf00      	nop
 8011560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011562:	bc08      	pop	{r3}
 8011564:	469e      	mov	lr, r3
 8011566:	4770      	bx	lr

08011568 <_fini>:
 8011568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156a:	bf00      	nop
 801156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801156e:	bc08      	pop	{r3}
 8011570:	469e      	mov	lr, r3
 8011572:	4770      	bx	lr
