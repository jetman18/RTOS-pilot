
RTOS-pilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015704  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08015894  08015894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f48  08015f48  00017120  2**0
                  CONTENTS
  4 .ARM          00000008  08015f48  08015f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f50  08015f50  00017120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f50  08015f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015f54  08015f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08015f58  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017120  2**0
                  CONTENTS
 10 .bss          000032b4  20000120  20000120  00017120  2**2
                  ALLOC
 11 ._user_heap_stack 00008004  200033d4  200033d4  00017120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d3d7  00000000  00000000  00017150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007748  00000000  00000000  00044527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002428  00000000  00000000  0004bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001be4  00000000  00000000  0004e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf44  00000000  00000000  0004fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036f04  00000000  00000000  0007cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105db2  00000000  00000000  000b3ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b9876  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009b2c  00000000  00000000  001b98bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001c33e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801587c 	.word	0x0801587c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0801587c 	.word	0x0801587c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_ldivmod>:
 8000b98:	b97b      	cbnz	r3, 8000bba <__aeabi_ldivmod+0x22>
 8000b9a:	b972      	cbnz	r2, 8000bba <__aeabi_ldivmod+0x22>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bfbe      	ittt	lt
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ba6:	e006      	blt.n	8000bb6 <__aeabi_ldivmod+0x1e>
 8000ba8:	bf08      	it	eq
 8000baa:	2800      	cmpeq	r0, #0
 8000bac:	bf1c      	itt	ne
 8000bae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb6:	f000 b9b5 	b.w	8000f24 <__aeabi_idiv0>
 8000bba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	db09      	blt.n	8000bda <__aeabi_ldivmod+0x42>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db1a      	blt.n	8000c00 <__aeabi_ldivmod+0x68>
 8000bca:	f000 f84d 	bl	8000c68 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db1b      	blt.n	8000c1c <__aeabi_ldivmod+0x84>
 8000be4:	f000 f840 	bl	8000c68 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	4770      	bx	lr
 8000c00:	4252      	negs	r2, r2
 8000c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c06:	f000 f82f 	bl	8000c68 <__udivmoddi4>
 8000c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c12:	b004      	add	sp, #16
 8000c14:	4240      	negs	r0, r0
 8000c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f821 	bl	8000c68 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <bmp280_init_default_params+0x38>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <bmp280_init_default_params+0x38>)
 8000f36:	2204      	movs	r2, #4
 8000f38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <bmp280_init_default_params+0x38>)
 8000f3e:	2205      	movs	r2, #5
 8000f40:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <bmp280_init_default_params+0x38>)
 8000f46:	2205      	movs	r2, #5
 8000f48:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <bmp280_init_default_params+0x38>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000013c 	.word	0x2000013c

08000f64 <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <read_register16+0x5c>)
 8000f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <read_register16+0x5c>)
 8000f7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	89f9      	ldrh	r1, [r7, #14]
 8000f82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	f007 fc0a 	bl	80087ac <HAL_I2C_Mem_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10b      	bne.n	8000fb6 <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	801a      	strh	r2, [r3, #0]
		return true;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <read_register16+0x54>
	} else
		return false;
 8000fb6:	2300      	movs	r3, #0

}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000013c 	.word	0x2000013c

08000fc4 <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <read_data+0x4c>)
 8000fd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <read_data+0x4c>)
 8000fde:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	89f9      	ldrh	r1, [r7, #14]
 8000fea:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000fee:	9402      	str	r4, [sp, #8]
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f007 fbd8 	bl	80087ac <HAL_I2C_Mem_Read>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <read_data+0x42>
		return 0;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <read_data+0x44>
	else
		return 1;
 8001006:	2301      	movs	r3, #1

}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	2000013c 	.word	0x2000013c

08001014 <read_calibration_data>:

static bool read_calibration_data() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 8001018:	492c      	ldr	r1, [pc, #176]	@ (80010cc <read_calibration_data+0xb8>)
 800101a:	2088      	movs	r0, #136	@ 0x88
 800101c:	f7ff ffa2 	bl	8000f64 <read_register16>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04e      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 8001026:	492a      	ldr	r1, [pc, #168]	@ (80010d0 <read_calibration_data+0xbc>)
 8001028:	208a      	movs	r0, #138	@ 0x8a
 800102a:	f7ff ff9b 	bl	8000f64 <read_register16>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d047      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 8001034:	4927      	ldr	r1, [pc, #156]	@ (80010d4 <read_calibration_data+0xc0>)
 8001036:	208c      	movs	r0, #140	@ 0x8c
 8001038:	f7ff ff94 	bl	8000f64 <read_register16>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d040      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 8001042:	4925      	ldr	r1, [pc, #148]	@ (80010d8 <read_calibration_data+0xc4>)
 8001044:	208e      	movs	r0, #142	@ 0x8e
 8001046:	f7ff ff8d 	bl	8000f64 <read_register16>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d039      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8001050:	4922      	ldr	r1, [pc, #136]	@ (80010dc <read_calibration_data+0xc8>)
 8001052:	2090      	movs	r0, #144	@ 0x90
 8001054:	f7ff ff86 	bl	8000f64 <read_register16>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d032      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 800105e:	4920      	ldr	r1, [pc, #128]	@ (80010e0 <read_calibration_data+0xcc>)
 8001060:	2092      	movs	r0, #146	@ 0x92
 8001062:	f7ff ff7f 	bl	8000f64 <read_register16>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d02b      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 800106c:	491d      	ldr	r1, [pc, #116]	@ (80010e4 <read_calibration_data+0xd0>)
 800106e:	2094      	movs	r0, #148	@ 0x94
 8001070:	f7ff ff78 	bl	8000f64 <read_register16>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d024      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 800107a:	491b      	ldr	r1, [pc, #108]	@ (80010e8 <read_calibration_data+0xd4>)
 800107c:	2096      	movs	r0, #150	@ 0x96
 800107e:	f7ff ff71 	bl	8000f64 <read_register16>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01d      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 8001088:	4918      	ldr	r1, [pc, #96]	@ (80010ec <read_calibration_data+0xd8>)
 800108a:	2098      	movs	r0, #152	@ 0x98
 800108c:	f7ff ff6a 	bl	8000f64 <read_register16>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d016      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 8001096:	4916      	ldr	r1, [pc, #88]	@ (80010f0 <read_calibration_data+0xdc>)
 8001098:	209a      	movs	r0, #154	@ 0x9a
 800109a:	f7ff ff63 	bl	8000f64 <read_register16>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00f      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 80010a4:	4913      	ldr	r1, [pc, #76]	@ (80010f4 <read_calibration_data+0xe0>)
 80010a6:	209c      	movs	r0, #156	@ 0x9c
 80010a8:	f7ff ff5c 	bl	8000f64 <read_register16>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d008      	beq.n	80010c4 <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 80010b2:	4911      	ldr	r1, [pc, #68]	@ (80010f8 <read_calibration_data+0xe4>)
 80010b4:	209e      	movs	r0, #158	@ 0x9e
 80010b6:	f7ff ff55 	bl	8000f64 <read_register16>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <read_calibration_data+0xb0>
			{

		return true;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <read_calibration_data+0xb2>
	}

	return false;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000013c 	.word	0x2000013c
 80010d0:	2000013e 	.word	0x2000013e
 80010d4:	20000140 	.word	0x20000140
 80010d8:	20000142 	.word	0x20000142
 80010dc:	20000144 	.word	0x20000144
 80010e0:	20000146 	.word	0x20000146
 80010e4:	20000148 	.word	0x20000148
 80010e8:	2000014a 	.word	0x2000014a
 80010ec:	2000014c 	.word	0x2000014c
 80010f0:	2000014e 	.word	0x2000014e
 80010f4:	20000150 	.word	0x20000150
 80010f8:	20000152 	.word	0x20000152

080010fc <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <write_register8+0x4c>)
 800110e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <write_register8+0x4c>)
 8001116:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	b29a      	uxth	r2, r3
 800111c:	89f9      	ldrh	r1, [r7, #14]
 800111e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	f007 fa43 	bl	80085b8 <HAL_I2C_Mem_Write>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <write_register8+0x40>
		return false;
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <write_register8+0x42>
	else
		return true;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000013c 	.word	0x2000013c

0800114c <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 8001154:	4b49      	ldr	r3, [pc, #292]	@ (800127c <bmp280_init+0x130>)
 8001156:	2276      	movs	r2, #118	@ 0x76
 8001158:	849a      	strh	r2, [r3, #36]	@ 0x24
	devv.i2c  = i2c;
 800115a:	4a48      	ldr	r2, [pc, #288]	@ (800127c <bmp280_init+0x130>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6293      	str	r3, [r2, #40]	@ 0x28
	bmp280_init_default_params();
 8001160:	f7ff fee2 	bl	8000f28 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 8001164:	4b45      	ldr	r3, [pc, #276]	@ (800127c <bmp280_init+0x130>)
 8001166:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001168:	2b76      	cmp	r3, #118	@ 0x76
 800116a:	d005      	beq.n	8001178 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 800116c:	4b43      	ldr	r3, [pc, #268]	@ (800127c <bmp280_init+0x130>)
 800116e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001170:	2b77      	cmp	r3, #119	@ 0x77
 8001172:	d001      	beq.n	8001178 <bmp280_init+0x2c>

		return false;
 8001174:	2300      	movs	r3, #0
 8001176:	e07d      	b.n	8001274 <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 8001178:	2201      	movs	r2, #1
 800117a:	4941      	ldr	r1, [pc, #260]	@ (8001280 <bmp280_init+0x134>)
 800117c:	20d0      	movs	r0, #208	@ 0xd0
 800117e:	f7ff ff21 	bl	8000fc4 <read_data>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <bmp280_init+0x40>
		return false;
 8001188:	2300      	movs	r3, #0
 800118a:	e073      	b.n	8001274 <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 800118c:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <bmp280_init+0x130>)
 800118e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001192:	2b58      	cmp	r3, #88	@ 0x58
 8001194:	d006      	beq.n	80011a4 <bmp280_init+0x58>
 8001196:	4b39      	ldr	r3, [pc, #228]	@ (800127c <bmp280_init+0x130>)
 8001198:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800119c:	2b60      	cmp	r3, #96	@ 0x60
 800119e:	d001      	beq.n	80011a4 <bmp280_init+0x58>

		return false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e067      	b.n	8001274 <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80011a4:	21b6      	movs	r1, #182	@ 0xb6
 80011a6:	20e0      	movs	r0, #224	@ 0xe0
 80011a8:	f7ff ffa8 	bl	80010fc <write_register8>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <bmp280_init+0x6a>
		return false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e05e      	b.n	8001274 <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 80011b6:	f107 030d 	add.w	r3, r7, #13
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	20f3      	movs	r0, #243	@ 0xf3
 80011c0:	f7ff ff00 	bl	8000fc4 <read_data>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f5      	bne.n	80011b6 <bmp280_init+0x6a>
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 80011d4:	f7ff ff1e 	bl	8001014 <read_calibration_data>
 80011d8:	4603      	mov	r3, r0
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d100      	bne.n	80011e6 <bmp280_init+0x9a>
 80011e4:	e001      	b.n	80011ea <bmp280_init+0x9e>
		return false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e044      	b.n	8001274 <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <bmp280_init+0x130>)
 80011ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80011f0:	2b60      	cmp	r3, #96	@ 0x60
 80011f2:	d101      	bne.n	80011f8 <bmp280_init+0xac>
		return false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e03d      	b.n	8001274 <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <bmp280_init+0x130>)
 80011fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011fe:	015b      	lsls	r3, r3, #5
 8001200:	b25a      	sxtb	r2, r3
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <bmp280_init+0x130>)
 8001204:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b25b      	sxtb	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b25b      	sxtb	r3, r3
 8001210:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4619      	mov	r1, r3
 8001216:	20f5      	movs	r0, #245	@ 0xf5
 8001218:	f7ff ff70 	bl	80010fc <write_register8>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <bmp280_init+0xda>
		return false;
 8001222:	2300      	movs	r3, #0
 8001224:	e026      	b.n	8001274 <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <bmp280_init+0x130>)
 8001228:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800122c:	2b01      	cmp	r3, #1
 800122e:	d103      	bne.n	8001238 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <bmp280_init+0x130>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <bmp280_init+0x130>)
 800123a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800123e:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 8001240:	b25a      	sxtb	r2, r3
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <bmp280_init+0x130>)
 8001244:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b25a      	sxtb	r2, r3
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <bmp280_init+0x130>)
 8001252:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001256:	b25b      	sxtb	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 800125c:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	4619      	mov	r1, r3
 8001262:	20f4      	movs	r0, #244	@ 0xf4
 8001264:	f7ff ff4a 	bl	80010fc <write_register8>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <bmp280_init+0x126>
		return false;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <bmp280_init+0x128>
	}

	return true;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000013c 	.word	0x2000013c
 8001280:	2000016d 	.word	0x2000016d

08001284 <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	10da      	asrs	r2, r3, #3
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <compensate_temperature+0x70>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 800129a:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <compensate_temperature+0x70>)
 800129c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 80012a4:	12db      	asrs	r3, r3, #11
 80012a6:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	111b      	asrs	r3, r3, #4
 80012ac:	4a11      	ldr	r2, [pc, #68]	@ (80012f4 <compensate_temperature+0x70>)
 80012ae:	8812      	ldrh	r2, [r2, #0]
 80012b0:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	1112      	asrs	r2, r2, #4
 80012b6:	490f      	ldr	r1, [pc, #60]	@ (80012f4 <compensate_temperature+0x70>)
 80012b8:	8809      	ldrh	r1, [r1, #0]
 80012ba:	1a52      	subs	r2, r2, r1
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 80012c2:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <compensate_temperature+0x70>)
 80012c4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 80012cc:	139b      	asrs	r3, r3, #14
 80012ce:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	441a      	add	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3380      	adds	r3, #128	@ 0x80
 80012e6:	121b      	asrs	r3, r3, #8
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	2000013c 	.word	0x2000013c

080012f8 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 80012f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012fc:	b0cc      	sub	sp, #304	@ 0x130
 80012fe:	af00      	add	r7, sp, #0
 8001300:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001304:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001308:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	461c      	mov	r4, r3
 8001310:	4615      	mov	r5, r2
 8001312:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001316:	f145 3bff 	adc.w	fp, r5, #4294967295
 800131a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 800131e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001322:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001326:	fb03 f102 	mul.w	r1, r3, r2
 800132a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800132e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	18ca      	adds	r2, r1, r3
 8001338:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800133c:	fba3 8903 	umull	r8, r9, r3, r3
 8001340:	eb02 0309 	add.w	r3, r2, r9
 8001344:	4699      	mov	r9, r3
 8001346:	4ba0      	ldr	r3, [pc, #640]	@ (80015c8 <compensate_pressure+0x2d0>)
 8001348:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800134c:	b21b      	sxth	r3, r3
 800134e:	17da      	asrs	r2, r3, #31
 8001350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001358:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800135c:	4603      	mov	r3, r0
 800135e:	fb03 f209 	mul.w	r2, r3, r9
 8001362:	460b      	mov	r3, r1
 8001364:	fb08 f303 	mul.w	r3, r8, r3
 8001368:	4413      	add	r3, r2
 800136a:	4602      	mov	r2, r0
 800136c:	fba8 1202 	umull	r1, r2, r8, r2
 8001370:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001374:	460a      	mov	r2, r1
 8001376:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800137a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800137e:	4413      	add	r3, r2
 8001380:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001384:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8001388:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800138c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 8001390:	4b8d      	ldr	r3, [pc, #564]	@ (80015c8 <compensate_pressure+0x2d0>)
 8001392:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001396:	b21b      	sxth	r3, r3
 8001398:	17da      	asrs	r2, r3, #31
 800139a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800139e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80013a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013a6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80013aa:	462a      	mov	r2, r5
 80013ac:	fb02 f203 	mul.w	r2, r2, r3
 80013b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013b4:	4621      	mov	r1, r4
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	441a      	add	r2, r3
 80013bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013c0:	4621      	mov	r1, r4
 80013c2:	fba3 1301 	umull	r1, r3, r3, r1
 80013c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80013ca:	460b      	mov	r3, r1
 80013cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80013d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80013da:	f04f 0000 	mov.w	r0, #0
 80013de:	f04f 0100 	mov.w	r1, #0
 80013e2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80013e6:	462b      	mov	r3, r5
 80013e8:	0459      	lsls	r1, r3, #17
 80013ea:	4623      	mov	r3, r4
 80013ec:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80013f0:	4623      	mov	r3, r4
 80013f2:	0458      	lsls	r0, r3, #17
 80013f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80013f8:	1814      	adds	r4, r2, r0
 80013fa:	64bc      	str	r4, [r7, #72]	@ 0x48
 80013fc:	414b      	adcs	r3, r1
 80013fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001400:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001404:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 8001408:	4b6f      	ldr	r3, [pc, #444]	@ (80015c8 <compensate_pressure+0x2d0>)
 800140a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800140e:	b21b      	sxth	r3, r3
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001416:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800141a:	f04f 0000 	mov.w	r0, #0
 800141e:	f04f 0100 	mov.w	r1, #0
 8001422:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001426:	00d9      	lsls	r1, r3, #3
 8001428:	2000      	movs	r0, #0
 800142a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800142e:	1814      	adds	r4, r2, r0
 8001430:	643c      	str	r4, [r7, #64]	@ 0x40
 8001432:	414b      	adcs	r3, r1
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44
 8001436:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800143a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 800143e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001442:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001446:	fb03 f102 	mul.w	r1, r3, r2
 800144a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800144e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	18ca      	adds	r2, r1, r3
 8001458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800145c:	fba3 1303 	umull	r1, r3, r3, r3
 8001460:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001464:	460b      	mov	r3, r1
 8001466:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800146a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001474:	4b54      	ldr	r3, [pc, #336]	@ (80015c8 <compensate_pressure+0x2d0>)
 8001476:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800147a:	b21b      	sxth	r3, r3
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001482:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001486:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800148a:	462b      	mov	r3, r5
 800148c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001490:	4642      	mov	r2, r8
 8001492:	fb02 f203 	mul.w	r2, r2, r3
 8001496:	464b      	mov	r3, r9
 8001498:	4621      	mov	r1, r4
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	4622      	mov	r2, r4
 80014a2:	4641      	mov	r1, r8
 80014a4:	fba2 1201 	umull	r1, r2, r2, r1
 80014a8:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80014ac:	460a      	mov	r2, r1
 80014ae:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80014b2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80014b6:	4413      	add	r3, r2
 80014b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014bc:	f04f 0000 	mov.w	r0, #0
 80014c0:	f04f 0100 	mov.w	r1, #0
 80014c4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80014c8:	4623      	mov	r3, r4
 80014ca:	0a18      	lsrs	r0, r3, #8
 80014cc:	462b      	mov	r3, r5
 80014ce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80014d2:	462b      	mov	r3, r5
 80014d4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 80014d6:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <compensate_pressure+0x2d0>)
 80014d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	17da      	asrs	r2, r3, #31
 80014e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80014e4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80014e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ec:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80014f0:	464a      	mov	r2, r9
 80014f2:	fb02 f203 	mul.w	r2, r2, r3
 80014f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014fa:	4644      	mov	r4, r8
 80014fc:	fb04 f303 	mul.w	r3, r4, r3
 8001500:	441a      	add	r2, r3
 8001502:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001506:	4644      	mov	r4, r8
 8001508:	fba3 4304 	umull	r4, r3, r3, r4
 800150c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001510:	4623      	mov	r3, r4
 8001512:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800151a:	18d3      	adds	r3, r2, r3
 800151c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800152c:	464c      	mov	r4, r9
 800152e:	0323      	lsls	r3, r4, #12
 8001530:	4644      	mov	r4, r8
 8001532:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001536:	4644      	mov	r4, r8
 8001538:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 800153a:	1884      	adds	r4, r0, r2
 800153c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800153e:	eb41 0303 	adc.w	r3, r1, r3
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001544:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001548:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 800154c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001550:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001554:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001558:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <compensate_pressure+0x2d0>)
 800155e:	88db      	ldrh	r3, [r3, #6]
 8001560:	b29b      	uxth	r3, r3
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001568:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800156c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001570:	462b      	mov	r3, r5
 8001572:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001576:	4642      	mov	r2, r8
 8001578:	fb02 f203 	mul.w	r2, r2, r3
 800157c:	464b      	mov	r3, r9
 800157e:	4621      	mov	r1, r4
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	4622      	mov	r2, r4
 8001588:	4641      	mov	r1, r8
 800158a:	fba2 1201 	umull	r1, r2, r2, r1
 800158e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001592:	460a      	mov	r2, r1
 8001594:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001598:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800159c:	4413      	add	r3, r2
 800159e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80015ae:	4629      	mov	r1, r5
 80015b0:	104a      	asrs	r2, r1, #1
 80015b2:	4629      	mov	r1, r5
 80015b4:	17cb      	asrs	r3, r1, #31
 80015b6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80015ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80015be:	4313      	orrs	r3, r2
 80015c0:	d104      	bne.n	80015cc <compensate_pressure+0x2d4>
		return 0;  // avoid exception caused by division by zero
 80015c2:	2300      	movs	r3, #0
 80015c4:	e15f      	b.n	8001886 <compensate_pressure+0x58e>
 80015c6:	bf00      	nop
 80015c8:	2000013c 	.word	0x2000013c
	}

	p = 1048576 - adc_press;
 80015cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015d0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80015d4:	17da      	asrs	r2, r3, #31
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80015d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80015da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80015de:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80015e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80015e6:	105b      	asrs	r3, r3, #1
 80015e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80015ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80015f0:	07db      	lsls	r3, r3, #31
 80015f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015f6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015fa:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80015fe:	4621      	mov	r1, r4
 8001600:	1a89      	subs	r1, r1, r2
 8001602:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001606:	4629      	mov	r1, r5
 8001608:	eb61 0303 	sbc.w	r3, r1, r3
 800160c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001610:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001614:	4622      	mov	r2, r4
 8001616:	462b      	mov	r3, r5
 8001618:	1891      	adds	r1, r2, r2
 800161a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800161c:	415b      	adcs	r3, r3
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001624:	4621      	mov	r1, r4
 8001626:	1851      	adds	r1, r2, r1
 8001628:	6239      	str	r1, [r7, #32]
 800162a:	4629      	mov	r1, r5
 800162c:	414b      	adcs	r3, r1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800163c:	4649      	mov	r1, r9
 800163e:	018b      	lsls	r3, r1, #6
 8001640:	4641      	mov	r1, r8
 8001642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001646:	4641      	mov	r1, r8
 8001648:	018a      	lsls	r2, r1, #6
 800164a:	4641      	mov	r1, r8
 800164c:	1889      	adds	r1, r1, r2
 800164e:	61b9      	str	r1, [r7, #24]
 8001650:	4649      	mov	r1, r9
 8001652:	eb43 0101 	adc.w	r1, r3, r1
 8001656:	61f9      	str	r1, [r7, #28]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001664:	4649      	mov	r1, r9
 8001666:	008b      	lsls	r3, r1, #2
 8001668:	4641      	mov	r1, r8
 800166a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800166e:	4641      	mov	r1, r8
 8001670:	008a      	lsls	r2, r1, #2
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	4603      	mov	r3, r0
 8001678:	4622      	mov	r2, r4
 800167a:	189b      	adds	r3, r3, r2
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	460b      	mov	r3, r1
 8001680:	462a      	mov	r2, r5
 8001682:	eb42 0303 	adc.w	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001694:	4649      	mov	r1, r9
 8001696:	008b      	lsls	r3, r1, #2
 8001698:	4641      	mov	r1, r8
 800169a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800169e:	4641      	mov	r1, r8
 80016a0:	008a      	lsls	r2, r1, #2
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	4622      	mov	r2, r4
 80016aa:	189b      	adds	r3, r3, r2
 80016ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016ae:	462b      	mov	r3, r5
 80016b0:	460a      	mov	r2, r1
 80016b2:	eb42 0303 	adc.w	r3, r2, r3
 80016b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80016bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016c0:	f7ff fa6a 	bl	8000b98 <__aeabi_ldivmod>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80016cc:	4b71      	ldr	r3, [pc, #452]	@ (8001894 <compensate_pressure+0x59c>)
 80016ce:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80016d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80016da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016de:	f04f 0000 	mov.w	r0, #0
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	0b50      	lsrs	r0, r2, #13
 80016e8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016ec:	1359      	asrs	r1, r3, #13
 80016ee:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80016f2:	462b      	mov	r3, r5
 80016f4:	fb00 f203 	mul.w	r2, r0, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	fb03 f301 	mul.w	r3, r3, r1
 80016fe:	4413      	add	r3, r2
 8001700:	4622      	mov	r2, r4
 8001702:	fba2 1200 	umull	r1, r2, r2, r0
 8001706:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800170a:	460a      	mov	r2, r1
 800170c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001710:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001714:	4413      	add	r3, r2
 8001716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800171a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0b50      	lsrs	r0, r2, #13
 8001728:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800172c:	1359      	asrs	r1, r3, #13
 800172e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001732:	462b      	mov	r3, r5
 8001734:	fb00 f203 	mul.w	r2, r0, r3
 8001738:	4623      	mov	r3, r4
 800173a:	fb03 f301 	mul.w	r3, r3, r1
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	fba2 1200 	umull	r1, r2, r2, r0
 8001746:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800174a:	460a      	mov	r2, r1
 800174c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001750:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001754:	4413      	add	r3, r2
 8001756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001766:	4621      	mov	r1, r4
 8001768:	0e4a      	lsrs	r2, r1, #25
 800176a:	4629      	mov	r1, r5
 800176c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001770:	4629      	mov	r1, r5
 8001772:	164b      	asrs	r3, r1, #25
 8001774:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001778:	4b46      	ldr	r3, [pc, #280]	@ (8001894 <compensate_pressure+0x59c>)
 800177a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800177e:	b21b      	sxth	r3, r3
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001784:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001786:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800178a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800178e:	462a      	mov	r2, r5
 8001790:	fb02 f203 	mul.w	r2, r2, r3
 8001794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001798:	4621      	mov	r1, r4
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	441a      	add	r2, r3
 80017a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017a4:	4621      	mov	r1, r4
 80017a6:	fba3 1301 	umull	r1, r3, r3, r1
 80017aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80017ae:	460b      	mov	r3, r1
 80017b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80017b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80017ca:	4621      	mov	r1, r4
 80017cc:	0cca      	lsrs	r2, r1, #19
 80017ce:	4629      	mov	r1, r5
 80017d0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017d4:	4629      	mov	r1, r5
 80017d6:	14cb      	asrs	r3, r1, #19
 80017d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 80017dc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80017e0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017e4:	1884      	adds	r4, r0, r2
 80017e6:	663c      	str	r4, [r7, #96]	@ 0x60
 80017e8:	eb41 0303 	adc.w	r3, r1, r3
 80017ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80017ee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017f6:	4621      	mov	r1, r4
 80017f8:	1889      	adds	r1, r1, r2
 80017fa:	65b9      	str	r1, [r7, #88]	@ 0x58
 80017fc:	4629      	mov	r1, r5
 80017fe:	eb43 0101 	adc.w	r1, r3, r1
 8001802:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001810:	4623      	mov	r3, r4
 8001812:	0a18      	lsrs	r0, r3, #8
 8001814:	462b      	mov	r3, r5
 8001816:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800181a:	462b      	mov	r3, r5
 800181c:	1219      	asrs	r1, r3, #8
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <compensate_pressure+0x59c>)
 8001820:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001824:	b21b      	sxth	r3, r3
 8001826:	17da      	asrs	r2, r3, #31
 8001828:	653b      	str	r3, [r7, #80]	@ 0x50
 800182a:	657a      	str	r2, [r7, #84]	@ 0x54
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001838:	464c      	mov	r4, r9
 800183a:	0123      	lsls	r3, r4, #4
 800183c:	4644      	mov	r4, r8
 800183e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001842:	4644      	mov	r4, r8
 8001844:	0122      	lsls	r2, r4, #4
 8001846:	1884      	adds	r4, r0, r2
 8001848:	60bc      	str	r4, [r7, #8]
 800184a:	eb41 0303 	adc.w	r3, r1, r3
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001854:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p/256;
 8001858:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800185c:	2b00      	cmp	r3, #0
 800185e:	da07      	bge.n	8001870 <compensate_pressure+0x578>
 8001860:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	f143 0300 	adc.w	r3, r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	0a10      	lsrs	r0, r2, #8
 800187a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800187e:	1219      	asrs	r1, r3, #8
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4613      	mov	r3, r2
}
 8001886:	4618      	mov	r0, r3
 8001888:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800188c:	46bd      	mov	sp, r7
 800188e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001892:	bf00      	nop
 8001894:	2000013c 	.word	0x2000013c

08001898 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 800189e:	463b      	mov	r3, r7
 80018a0:	2203      	movs	r2, #3
 80018a2:	4619      	mov	r1, r3
 80018a4:	20f7      	movs	r0, #247	@ 0xf7
 80018a6:	f7ff fb8d 	bl	8000fc4 <read_data>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <bmp280_read_fixed+0x1c>
		return false;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e075      	b.n	80019a0 <bmp280_read_fixed+0x108>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80018b4:	783b      	ldrb	r3, [r7, #0]
 80018b6:	031a      	lsls	r2, r3, #12
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4313      	orrs	r3, r2
 80018be:	78ba      	ldrb	r2, [r7, #2]
 80018c0:	0912      	lsrs	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	4313      	orrs	r3, r2
 80018c6:	4a3c      	ldr	r2, [pc, #240]	@ (80019b8 <bmp280_read_fixed+0x120>)
 80018c8:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 80018ca:	463b      	mov	r3, r7
 80018cc:	2203      	movs	r2, #3
 80018ce:	4619      	mov	r1, r3
 80018d0:	20fa      	movs	r0, #250	@ 0xfa
 80018d2:	f7ff fb77 	bl	8000fc4 <read_data>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <bmp280_read_fixed+0x48>
		return false;
 80018dc:	2300      	movs	r3, #0
 80018de:	e05f      	b.n	80019a0 <bmp280_read_fixed+0x108>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80018e0:	783b      	ldrb	r3, [r7, #0]
 80018e2:	031a      	lsls	r2, r3, #12
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4313      	orrs	r3, r2
 80018ea:	78ba      	ldrb	r2, [r7, #2]
 80018ec:	0912      	lsrs	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	4313      	orrs	r3, r2
 80018f2:	4a32      	ldr	r2, [pc, #200]	@ (80019bc <bmp280_read_fixed+0x124>)
 80018f4:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <bmp280_read_fixed+0x124>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4931      	ldr	r1, [pc, #196]	@ (80019c0 <bmp280_read_fixed+0x128>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fcc1 	bl	8001284 <compensate_temperature>
 8001902:	4603      	mov	r3, r0
 8001904:	4a2f      	ldr	r2, [pc, #188]	@ (80019c4 <bmp280_read_fixed+0x12c>)
 8001906:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <bmp280_read_fixed+0x120>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2c      	ldr	r2, [pc, #176]	@ (80019c0 <bmp280_read_fixed+0x128>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fcf0 	bl	80012f8 <compensate_pressure>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <bmp280_read_fixed+0x130>)
 800191e:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001920:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <bmp280_read_fixed+0x130>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80019cc <bmp280_read_fixed+0x134>
 8001930:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001934:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80019d0 <bmp280_read_fixed+0x138>
 8001938:	eeb0 0a47 	vmov.f32	s0, s14
 800193c:	f013 fadc 	bl	8014ef8 <powf>
 8001940:	ee10 3a10 	vmov	r3, s0
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fda7 	bl	8000498 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	4920      	ldr	r1, [pc, #128]	@ (80019d4 <bmp280_read_fixed+0x13c>)
 8001954:	f7fe fc40 	bl	80001d8 <__aeabi_dsub>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	a311      	add	r3, pc, #68	@ (adr r3, 80019a8 <bmp280_read_fixed+0x110>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fdef 	bl	8000548 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <bmp280_read_fixed+0x140>)
 8001978:	f7fe fde6 	bl	8000548 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a30a      	add	r3, pc, #40	@ (adr r3, 80019b0 <bmp280_read_fixed+0x118>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fc25 	bl	80001d8 <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f887 	bl	8000aa8 <__aeabi_d2iz>
 800199a:	4603      	mov	r3, r0
 800199c:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 800199e:	687b      	ldr	r3, [r7, #4]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40e5a540 	.word	0x40e5a540
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40f86a00 	.word	0x40f86a00
 80019b8:	20000170 	.word	0x20000170
 80019bc:	20000174 	.word	0x20000174
 80019c0:	20000178 	.word	0x20000178
 80019c4:	2000017c 	.word	0x2000017c
 80019c8:	20000180 	.word	0x20000180
 80019cc:	47c80800 	.word	0x47c80800
 80019d0:	3e42de01 	.word	0x3e42de01
 80019d4:	3ff00000 	.word	0x3ff00000
 80019d8:	40590000 	.word	0x40590000

080019dc <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <ibus_init+0x54>)
 80019e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80019ea:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <ibus_init+0x54>)
 80019ee:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80019f2:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 80019f4:	2302      	movs	r3, #2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e008      	b.n	8001a0c <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 80019fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <ibus_init+0x54>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b0d      	cmp	r3, #13
 8001a10:	ddf3      	ble.n	80019fa <ibus_init+0x1e>
    }
	uart = uartt;
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <ibus_init+0x58>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <ibus_init+0x58>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4906      	ldr	r1, [pc, #24]	@ (8001a38 <ibus_init+0x5c>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00a fe2c 	bl	800c67e <HAL_UART_Receive_IT>
#endif
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000188 	.word	0x20000188
 8001a34:	200001e4 	.word	0x200001e4
 8001a38:	200001e0 	.word	0x200001e0

08001a3c <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
   return uart;
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <ibus_uart_port+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200001e4 	.word	0x200001e4

08001a54 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <ibus_calback+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f80d 	bl	8001a7c <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <ibus_calback+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4902      	ldr	r1, [pc, #8]	@ (8001a74 <ibus_calback+0x20>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00a fe07 	bl	800c67e <HAL_UART_Receive_IT>
#endif

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001e0 	.word	0x200001e0
 8001a78:	200001e4 	.word	0x200001e4

08001a7c <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <ibusDataReceive+0x7c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <ibusDataReceive+0x80>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <ibusDataReceive+0x84>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d902      	bls.n	8001aac <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <ibusDataReceive+0x88>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001aac:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <ibusDataReceive+0x84>)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <ibusDataReceive+0x88>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <ibusDataReceive+0x44>
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d114      	bne.n	8001aea <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <ibusDataReceive+0x88>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <ibusDataReceive+0x8c>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <ibusDataReceive+0x88>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b1f      	cmp	r3, #31
 8001ad2:	d103      	bne.n	8001adc <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <ibusDataReceive+0x90>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e007      	b.n	8001aec <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <ibusDataReceive+0x88>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <ibusDataReceive+0x88>)
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e000      	b.n	8001aec <ibusDataReceive+0x70>
        return;
 8001aea:	bf00      	nop
    }
}
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000724 	.word	0x20000724
 8001afc:	20000728 	.word	0x20000728
 8001b00:	200001e8 	.word	0x200001e8
 8001b04:	200001ec 	.word	0x200001ec
 8001b08:	200001c0 	.word	0x200001c0
 8001b0c:	20000184 	.word	0x20000184

08001b10 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 8001b16:	4b63      	ldr	r3, [pc, #396]	@ (8001ca4 <ibusFrameComplete+0x194>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80bb 	beq.w	8001c96 <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 8001b20:	4b60      	ldr	r3, [pc, #384]	@ (8001ca4 <ibusFrameComplete+0x194>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 8001b26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b2a:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e009      	b.n	8001b46 <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	3301      	adds	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b1d      	cmp	r3, #29
 8001b4a:	d9f2      	bls.n	8001b32 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8001b4c:	4b56      	ldr	r3, [pc, #344]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b4e:	7f9b      	ldrb	r3, [r3, #30]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b55      	ldr	r3, [pc, #340]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b54:	7fdb      	ldrb	r3, [r3, #31]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8001b5e:	89ba      	ldrh	r2, [r7, #12]
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	f040 8097 	bne.w	8001c96 <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8001b68:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b6a:	78db      	ldrb	r3, [r3, #3]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b70:	7892      	ldrb	r2, [r2, #2]
 8001b72:	4413      	add	r3, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b4d      	ldr	r3, [pc, #308]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001b78:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8001b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	4a49      	ldr	r2, [pc, #292]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b82:	7912      	ldrb	r2, [r2, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001b8a:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8001b8c:	4b46      	ldr	r3, [pc, #280]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b8e:	79db      	ldrb	r3, [r3, #7]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001b94:	7992      	ldrb	r2, [r2, #6]
 8001b96:	4413      	add	r3, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001b9c:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001b9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001ba0:	7a5b      	ldrb	r3, [r3, #9]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	4a40      	ldr	r2, [pc, #256]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001ba6:	7a12      	ldrb	r2, [r2, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001bae:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bb2:	7adb      	ldrb	r3, [r3, #11]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bb8:	7a92      	ldrb	r2, [r2, #10]
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001bc0:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001bc2:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bc4:	7b5b      	ldrb	r3, [r3, #13]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	4a37      	ldr	r2, [pc, #220]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bca:	7b12      	ldrb	r2, [r2, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001bd2:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bd6:	7bdb      	ldrb	r3, [r3, #15]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bdc:	7b92      	ldrb	r2, [r2, #14]
 8001bde:	4413      	add	r3, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001be4:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8001be6:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001be8:	7c5b      	ldrb	r3, [r3, #17]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bee:	7c12      	ldrb	r2, [r2, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001bf6:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001bfa:	7cdb      	ldrb	r3, [r3, #19]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c00:	7c92      	ldrb	r2, [r2, #18]
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c08:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 8001c0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c0c:	7d5b      	ldrb	r3, [r3, #21]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c12:	7d12      	ldrb	r2, [r2, #20]
 8001c14:	4413      	add	r3, r2
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c1e:	7ddb      	ldrb	r3, [r3, #23]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	4a21      	ldr	r2, [pc, #132]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c24:	7d92      	ldrb	r2, [r2, #22]
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c30:	7e5b      	ldrb	r3, [r3, #25]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c36:	7e12      	ldrb	r2, [r2, #24]
 8001c38:	4413      	add	r3, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c42:	7edb      	ldrb	r3, [r3, #27]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c48:	7e92      	ldrb	r2, [r2, #26]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c54:	7f5b      	ldrb	r3, [r3, #29]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <ibusFrameComplete+0x198>)
 8001c5a:	7f12      	ldrb	r2, [r2, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c62:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	e010      	b.n	8001c8c <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 8001c6a:	4a10      	ldr	r2, [pc, #64]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	f640 0234 	movw	r2, #2100	@ 0x834
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d905      	bls.n	8001c86 <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <ibusFrameComplete+0x19c>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b0d      	cmp	r3, #13
 8001c90:	ddeb      	ble.n	8001c6a <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000184 	.word	0x20000184
 8001ca8:	200001c0 	.word	0x200001c0
 8001cac:	20000188 	.word	0x20000188

08001cb0 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <mpu6050Connection+0x24>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	2305      	movs	r3, #5
 8001cba:	2203      	movs	r2, #3
 8001cbc:	21d0      	movs	r1, #208	@ 0xd0
 8001cbe:	f006 ffa7 	bl	8008c10 <HAL_I2C_IsDeviceReady>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b25a      	sxtb	r2, r3
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <mpu6050Connection+0x28>)
 8001cc8:	701a      	strb	r2, [r3, #0]
    return isConnected;
 8001cca:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <mpu6050Connection+0x28>)
 8001ccc:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200001f0 	.word	0x200001f0
 8001cd8:	200001f4 	.word	0x200001f4

08001cdc <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001ce4:	4a25      	ldr	r2, [pc, #148]	@ (8001d7c <mpu6050_init+0xa0>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8001cea:	f7ff ffe1 	bl	8001cb0 <mpu6050Connection>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13a      	bne.n	8001d70 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 8001cfa:	236b      	movs	r3, #107	@ 0x6b
 8001cfc:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <mpu6050_init+0xa0>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	f107 0208 	add.w	r2, r7, #8
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	21d0      	movs	r1, #208	@ 0xd0
 8001d12:	f006 f921 	bl	8007f58 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 8001d16:	231b      	movs	r3, #27
 8001d18:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001d1e:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <mpu6050_init+0xa0>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 0208 	add.w	r2, r7, #8
 8001d26:	2301      	movs	r3, #1
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	21d0      	movs	r1, #208	@ 0xd0
 8001d2e:	f006 f913 	bl	8007f58 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 8001d32:	231c      	movs	r3, #28
 8001d34:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 8001d36:	2318      	movs	r3, #24
 8001d38:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <mpu6050_init+0xa0>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f107 0208 	add.w	r2, r7, #8
 8001d42:	2301      	movs	r3, #1
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2302      	movs	r3, #2
 8001d48:	21d0      	movs	r1, #208	@ 0xd0
 8001d4a:	f006 f905 	bl	8007f58 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8001d4e:	2337      	movs	r3, #55	@ 0x37
 8001d50:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 8001d52:	7a7b      	ldrb	r3, [r7, #9]
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <mpu6050_init+0xa0>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	f107 0208 	add.w	r2, r7, #8
 8001d64:	2301      	movs	r3, #1
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	21d0      	movs	r1, #208	@ 0xd0
 8001d6c:	f006 f8f4 	bl	8007f58 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200001f0 	.word	0x200001f0

08001d80 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8001d88:	2343      	movs	r3, #67	@ 0x43
 8001d8a:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <mpu6050_gyro_get_raw+0x74>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	f107 0208 	add.w	r2, r7, #8
 8001d94:	2301      	movs	r3, #1
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	21d0      	movs	r1, #208	@ 0xd0
 8001d9c:	f006 f8dc 	bl	8007f58 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001da0:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <mpu6050_gyro_get_raw+0x74>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	2301      	movs	r3, #1
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2306      	movs	r3, #6
 8001dae:	21d0      	movs	r1, #208	@ 0xd0
 8001db0:	f006 f9d0 	bl	8008154 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001db4:	7a3b      	ldrb	r3, [r7, #8]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	7a7b      	ldrb	r3, [r7, #9]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 8001dc6:	7abb      	ldrb	r3, [r7, #10]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 8001dd8:	7b3b      	ldrb	r3, [r7, #12]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	7b7b      	ldrb	r3, [r7, #13]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	809a      	strh	r2, [r3, #4]
	}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200001f0 	.word	0x200001f0

08001df8 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	6810      	ldr	r0, [r2, #0]
 8001e08:	6018      	str	r0, [r3, #0]
 8001e0a:	8892      	ldrh	r2, [r2, #4]
 8001e0c:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001e0e:	233b      	movs	r3, #59	@ 0x3b
 8001e10:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <mpu6050_acc_get_raw+0x80>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	f107 0208 	add.w	r2, r7, #8
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	21d0      	movs	r1, #208	@ 0xd0
 8001e22:	f006 f899 	bl	8007f58 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <mpu6050_acc_get_raw+0x80>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	f107 0208 	add.w	r2, r7, #8
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2306      	movs	r3, #6
 8001e34:	21d0      	movs	r1, #208	@ 0xd0
 8001e36:	f006 f98d 	bl	8008154 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8001e3a:	7a3b      	ldrb	r3, [r7, #8]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	7a7b      	ldrb	r3, [r7, #9]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8001e4c:	7abb      	ldrb	r3, [r7, #10]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001e5e:	7b3b      	ldrb	r3, [r7, #12]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	809a      	strh	r2, [r3, #4]
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200001f0 	.word	0x200001f0

08001e7c <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 8001e84:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <qmc5883_init+0x54>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8001e8a:	230b      	movs	r3, #11
 8001e8c:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <qmc5883_init+0x54>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	231a      	movs	r3, #26
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f107 020c 	add.w	r2, r7, #12
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f006 f858 	bl	8007f58 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8001ea8:	2309      	movs	r3, #9
 8001eaa:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001eac:	231d      	movs	r3, #29
 8001eae:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <qmc5883_init+0x54>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	231a      	movs	r3, #26
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f107 020c 	add.w	r2, r7, #12
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f006 f849 	bl	8007f58 <HAL_I2C_Master_Transmit>
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200001f8 	.word	0x200001f8

08001ed4 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <qmc_get_raw+0x6c>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	231a      	movs	r3, #26
 8001eea:	4619      	mov	r1, r3
 8001eec:	2301      	movs	r3, #1
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	2306      	movs	r3, #6
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	2200      	movs	r2, #0
 8001efe:	f006 fc55 	bl	80087ac <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 8001f02:	7a7b      	ldrb	r3, [r7, #9]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	7a3b      	ldrb	r3, [r7, #8]
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	7abb      	ldrb	r3, [r7, #10]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 8001f26:	7b7b      	ldrb	r3, [r7, #13]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	7b3b      	ldrb	r3, [r7, #12]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	809a      	strh	r2, [r3, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200001f8 	.word	0x200001f8

08001f44 <baro_init>:
//#define MS5611

int8_t baro_calib;
int32_t alt_offset;

void baro_init(){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <baro_init+0x40>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <baro_init+0x44>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 8001f56:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <baro_init+0x48>)
 8001f58:	f7ff f8f8 	bl	800114c <bmp280_init>
    for(int i=0; i< 100; i++){
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	e007      	b.n	8001f72 <baro_init+0x2e>
    	bmp280_read_fixed();
 8001f62:	f7ff fc99 	bl	8001898 <bmp280_read_fixed>
    	HAL_Delay(5);
 8001f66:	2005      	movs	r0, #5
 8001f68:	f004 ffb6 	bl	8006ed8 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b63      	cmp	r3, #99	@ 0x63
 8001f76:	ddf4      	ble.n	8001f62 <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200001fc 	.word	0x200001fc
 8001f88:	20000200 	.word	0x20000200
 8001f8c:	200007bc 	.word	0x200007bc

08001f90 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 8001f9a:	f7ff fc7d 	bl	8001898 <bmp280_read_fixed>
 8001f9e:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <baro_zero_calibrate+0x60>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <baro_zero_calibrate+0x60>)
 8001faa:	6013      	str	r3, [r2, #0]
    count ++;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <baro_zero_calibrate+0x64>)
 8001fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <baro_zero_calibrate+0x64>)
 8001fbc:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <baro_zero_calibrate+0x64>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	2b64      	cmp	r3, #100	@ 0x64
 8001fc6:	dd0f      	ble.n	8001fe8 <baro_zero_calibrate+0x58>
        alt_offset /= 100;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <baro_zero_calibrate+0x60>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <baro_zero_calibrate+0x68>)
 8001fce:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd2:	1152      	asrs	r2, r2, #5
 8001fd4:	17db      	asrs	r3, r3, #31
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <baro_zero_calibrate+0x60>)
 8001fda:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <baro_zero_calibrate+0x6c>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
        count = 101;
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <baro_zero_calibrate+0x64>)
 8001fe4:	2265      	movs	r2, #101	@ 0x65
 8001fe6:	801a      	strh	r2, [r3, #0]
    }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000200 	.word	0x20000200
 8001ff4:	20000204 	.word	0x20000204
 8001ff8:	51eb851f 	.word	0x51eb851f
 8001ffc:	200001fc 	.word	0x200001fc

08002000 <is_baro_calibration>:

int8_t is_baro_calibration(){
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
      return baro_calib;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <is_baro_calibration+0x14>)
 8002006:	f993 3000 	ldrsb.w	r3, [r3]
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	200001fc 	.word	0x200001fc

08002018 <baro_get_altitude>:

int32_t baro_get_altitude(){
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
     if(baro_calib){
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <baro_get_altitude+0x2c>)
 8002020:	f993 3000 	ldrsb.w	r3, [r3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <baro_get_altitude+0x22>
        int32_t alt = bmp280_read_fixed() - alt_offset;
 8002028:	f7ff fc36 	bl	8001898 <bmp280_read_fixed>
 800202c:	4602      	mov	r2, r0
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <baro_get_altitude+0x30>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	607b      	str	r3, [r7, #4]
        return alt;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	e000      	b.n	800203c <baro_get_altitude+0x24>
     }
     return 0;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200001fc 	.word	0x200001fc
 8002048:	20000200 	.word	0x20000200

0800204c <black_box_init>:
int32_t puts_state;

/*
 * init black box
 */
void black_box_init(){
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8002050:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <black_box_init+0x40>)
 8002052:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <black_box_init+0x44>)
 8002054:	605a      	str	r2, [r3, #4]
    //SDFile.fs->id = 1;
    //SDFile.id = 1;
    mount_state = f_mount(&SDFatFS,"",1);
 8002056:	2201      	movs	r2, #1
 8002058:	490e      	ldr	r1, [pc, #56]	@ (8002094 <black_box_init+0x48>)
 800205a:	480f      	ldr	r0, [pc, #60]	@ (8002098 <black_box_init+0x4c>)
 800205c:	f00e fd26 	bl	8010aac <f_mount>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <black_box_init+0x50>)
 8002066:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002068:	2213      	movs	r2, #19
 800206a:	490d      	ldr	r1, [pc, #52]	@ (80020a0 <black_box_init+0x54>)
 800206c:	4808      	ldr	r0, [pc, #32]	@ (8002090 <black_box_init+0x44>)
 800206e:	f00e fd81 	bl	8010b74 <f_open>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <black_box_init+0x58>)
 8002078:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.obj.objsize);
 800207a:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <black_box_init+0x44>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4619      	mov	r1, r3
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <black_box_init+0x44>)
 8002082:	f00f fa5f 	bl	8011544 <f_lseek>
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000208 	.word	0x20000208
 8002090:	20000e90 	.word	0x20000e90
 8002094:	08015894 	.word	0x08015894
 8002098:	20000c58 	.word	0x20000c58
 800209c:	20000414 	.word	0x20000414
 80020a0:	08015898 	.word	0x08015898
 80020a4:	20000415 	.word	0x20000415

080020a8 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	@ 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 80020b0:	4b48      	ldr	r3, [pc, #288]	@ (80021d4 <black_box_pack_int+0x12c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	220b      	movs	r2, #11
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f012 fe9a 	bl	8014dfc <memset>
	if(val != 0){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d02a      	beq.n	8002124 <black_box_pack_int+0x7c>
		val = abs(val);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bfb8      	it	lt
 80020d4:	425b      	neglt	r3, r3
 80020d6:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	2200      	movs	r2, #0
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f91f 	bl	8002324 <intToStr>
 80020e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da2a      	bge.n	8002144 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 80020ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020f2:	e00e      	b.n	8002112 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 80020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	3330      	adds	r3, #48	@ 0x30
 80020fa:	443b      	add	r3, r7
 80020fc:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	4413      	add	r3, r2
 8002108:	460a      	mov	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	3b01      	subs	r3, #1
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	dced      	bgt.n	80020f4 <black_box_pack_int+0x4c>
			}
			len_str ++;
 8002118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211a:	3301      	adds	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 800211e:	232d      	movs	r3, #45	@ 0x2d
 8002120:	723b      	strb	r3, [r7, #8]
 8002122:	e00f      	b.n	8002144 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 8002124:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <black_box_pack_int+0x12c>)
 8002126:	891b      	ldrh	r3, [r3, #8]
 8002128:	461a      	mov	r2, r3
 800212a:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <black_box_pack_int+0x12c>)
 800212c:	4413      	add	r3, r2
 800212e:	2230      	movs	r2, #48	@ 0x30
 8002130:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 8002136:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <black_box_pack_int+0x12c>)
 8002138:	891b      	ldrh	r3, [r3, #8]
 800213a:	3301      	adds	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <black_box_pack_int+0x12c>)
 8002140:	811a      	strh	r2, [r3, #8]
 8002142:	e044      	b.n	80021ce <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <black_box_pack_int+0x12c>)
 800214a:	891b      	ldrh	r3, [r3, #8]
 800214c:	461a      	mov	r2, r3
 800214e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002150:	4413      	add	r3, r2
 8002152:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215a:	dc08      	bgt.n	800216e <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <black_box_pack_int+0x12c>)
 800215e:	891b      	ldrh	r3, [r3, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002164:	4413      	add	r3, r2
 8002166:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	e004      	b.n	8002178 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 800216e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002172:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002178:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <black_box_pack_int+0x12c>)
 800217a:	891b      	ldrh	r3, [r3, #8]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e00f      	b.n	80021a0 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	627a      	str	r2, [r7, #36]	@ 0x24
 8002186:	3330      	adds	r3, #48	@ 0x30
 8002188:	443b      	add	r3, r7
 800218a:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800218e:	4a11      	ldr	r2, [pc, #68]	@ (80021d4 <black_box_pack_int+0x12c>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	4413      	add	r3, r2
 8002194:	330a      	adds	r3, #10
 8002196:	460a      	mov	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3301      	adds	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbeb      	blt.n	8002180 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <black_box_pack_int+0x12c>)
 80021b0:	891a      	ldrh	r2, [r3, #8]
 80021b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <black_box_pack_int+0x12c>)
 80021bc:	811a      	strh	r2, [r3, #8]
 80021be:	e006      	b.n	80021ce <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 80021c0:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <black_box_pack_int+0x12c>)
 80021c2:	891b      	ldrh	r3, [r3, #8]
 80021c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b02      	ldr	r3, [pc, #8]	@ (80021d4 <black_box_pack_int+0x12c>)
 80021cc:	811a      	strh	r2, [r3, #8]
	}
}
 80021ce:	3730      	adds	r7, #48	@ 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000208 	.word	0x20000208

080021d8 <black_box_pack_str>:


void black_box_pack_str(char *c){
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

    int i = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80021e4:	e01c      	b.n	8002220 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80021e6:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <black_box_pack_str+0x70>)
 80021e8:	891b      	ldrh	r3, [r3, #8]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f4:	dd04      	ble.n	8002200 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <black_box_pack_str+0x70>)
 80021f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021fc:	811a      	strh	r2, [r3, #8]
                return;
 80021fe:	e01d      	b.n	800223c <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	441a      	add	r2, r3
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <black_box_pack_str+0x70>)
 8002208:	891b      	ldrh	r3, [r3, #8]
 800220a:	4619      	mov	r1, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	440b      	add	r3, r1
 8002210:	7811      	ldrb	r1, [r2, #0]
 8002212:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <black_box_pack_str+0x70>)
 8002214:	4413      	add	r3, r2
 8002216:	460a      	mov	r2, r1
 8002218:	729a      	strb	r2, [r3, #10]
        i ++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3301      	adds	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1dc      	bne.n	80021e6 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <black_box_pack_str+0x70>)
 800222e:	891a      	ldrh	r2, [r3, #8]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4413      	add	r3, r2
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <black_box_pack_str+0x70>)
 800223a:	811a      	strh	r2, [r3, #8]
}
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000208 	.word	0x20000208

0800224c <black_box_pack_char>:

void black_box_pack_char(char c){
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <black_box_pack_char+0x30>)
 8002258:	891b      	ldrh	r3, [r3, #8]
 800225a:	461a      	mov	r2, r3
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <black_box_pack_char+0x30>)
 800225e:	4413      	add	r3, r2
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002264:	4b05      	ldr	r3, [pc, #20]	@ (800227c <black_box_pack_char+0x30>)
 8002266:	891b      	ldrh	r3, [r3, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <black_box_pack_char+0x30>)
 800226e:	811a      	strh	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000208 	.word	0x20000208

08002280 <black_box_load>:



void black_box_load()
 {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <black_box_load+0x38>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4619      	mov	r1, r3
 800228a:	480c      	ldr	r0, [pc, #48]	@ (80022bc <black_box_load+0x3c>)
 800228c:	f00f fc24 	bl	8011ad8 <f_puts>
 8002290:	4603      	mov	r3, r0
 8002292:	4a0b      	ldr	r2, [pc, #44]	@ (80022c0 <black_box_load+0x40>)
 8002294:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <black_box_load+0x38>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	f00f f8c9 	bl	8011432 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 80022a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a4:	2100      	movs	r1, #0
 80022a6:	4805      	ldr	r0, [pc, #20]	@ (80022bc <black_box_load+0x3c>)
 80022a8:	f012 fda8 	bl	8014dfc <memset>
      fs.buffer_index = 0;
 80022ac:	4b02      	ldr	r3, [pc, #8]	@ (80022b8 <black_box_load+0x38>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	811a      	strh	r2, [r3, #8]
 }
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000208 	.word	0x20000208
 80022bc:	20000212 	.word	0x20000212
 80022c0:	20000418 	.word	0x20000418

080022c4 <reverse>:




static void reverse( char *str, int len)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80022d8:	e018      	b.n	800230c <reverse+0x48>
        temp = str[i];
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	441a      	add	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	440b      	add	r3, r1
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
        i++;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
        j--;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3b01      	subs	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbe2      	blt.n	80022da <reverse+0x16>
    }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
    while (x) {
 8002330:	e01f      	b.n	8002372 <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <intToStr+0x8c>)
 8002336:	fb83 1302 	smull	r1, r3, r3, r2
 800233a:	1099      	asrs	r1, r3, #2
 800233c:	17d3      	asrs	r3, r2, #31
 800233e:	1ac9      	subs	r1, r1, r3
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	1ad1      	subs	r1, r2, r3
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <intToStr+0x90>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c59      	adds	r1, r3, #1
 8002352:	4818      	ldr	r0, [pc, #96]	@ (80023b4 <intToStr+0x90>)
 8002354:	6001      	str	r1, [r0, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	440b      	add	r3, r1
 800235c:	3230      	adds	r2, #48	@ 0x30
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <intToStr+0x8c>)
 8002366:	fb82 1203 	smull	r1, r2, r2, r3
 800236a:	1092      	asrs	r2, r2, #2
 800236c:	17db      	asrs	r3, r3, #31
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1dc      	bne.n	8002332 <intToStr+0xe>
    }

    while (fs.indexx < d)
 8002378:	e009      	b.n	800238e <intToStr+0x6a>
        str[fs.indexx++] = '0';
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <intToStr+0x90>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	490c      	ldr	r1, [pc, #48]	@ (80023b4 <intToStr+0x90>)
 8002382:	600a      	str	r2, [r1, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	2230      	movs	r2, #48	@ 0x30
 800238c:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <intToStr+0x90>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dcf0      	bgt.n	800237a <intToStr+0x56>
    reverse(str,fs.indexx);
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <intToStr+0x90>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	68b8      	ldr	r0, [r7, #8]
 80023a0:	f7ff ff90 	bl	80022c4 <reverse>
    return fs.indexx;
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <intToStr+0x90>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	66666667 	.word	0x66666667
 80023b4:	20000208 	.word	0x20000208

080023b8 <compassInit>:
int8_t file_open = 0;

 AT24Cxx_devices_t device_array;
/*  Init compass
 */
void compassInit(){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0

  calibrate_value.scale_factor_axis[X] = 1.0f;
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <compassInit+0x64>)
 80023be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023c2:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <compassInit+0x64>)
 80023c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ca:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <compassInit+0x64>)
 80023ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023d2:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <compassInit+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <compassInit+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <compassInit+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]

  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 80023e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <compassInit+0x68>)
 80023e8:	2100      	movs	r1, #0
 80023ea:	480e      	ldr	r0, [pc, #56]	@ (8002424 <compassInit+0x6c>)
 80023ec:	f003 fe38 	bl	8006060 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 80023f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002420 <compassInit+0x68>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	480b      	ldr	r0, [pc, #44]	@ (8002424 <compassInit+0x6c>)
 80023f6:	f003 fe73 	bl	80060e0 <AT24Cxx_add_dev>

#ifdef QMC5883
  qmc5883_init(&hi2c1);
 80023fa:	480b      	ldr	r0, [pc, #44]	@ (8002428 <compassInit+0x70>)
 80023fc:	f7ff fd3e 	bl	8001e7c <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8002400:	2120      	movs	r1, #32
 8002402:	480a      	ldr	r0, [pc, #40]	@ (800242c <compassInit+0x74>)
 8002404:	f005 fc18 	bl	8007c38 <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <compassInit+0x5c>
      compass_calibrate();
 800240e:	f000 f8eb 	bl	80025e8 <compass_calibrate>

    calibrate_value.hard_iron_calibrate_value[X] = 500;
    calibrate_value.hard_iron_calibrate_value[Y] = 20;
    calibrate_value.hard_iron_calibrate_value[Z] = 20;
*/
}
 8002412:	e001      	b.n	8002418 <compassInit+0x60>
      read_calibrate_file();
 8002414:	f000 f876 	bl	8002504 <read_calibrate_file>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000420 	.word	0x20000420
 8002420:	200007bc 	.word	0x200007bc
 8002424:	20000440 	.word	0x20000440
 8002428:	20000768 	.word	0x20000768
 800242c:	40020400 	.word	0x40020400

08002430 <compass_get>:

void compass_get(axis3_t *out){
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fd49 	bl	8001ed4 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8002442:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002446:	b29a      	uxth	r2, r3
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <compass_get+0xd0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	b21a      	sxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002458:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <compass_get+0xd0>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	b29b      	uxth	r3, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 800246e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <compass_get+0xd0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	b29b      	uxth	r3, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	b29b      	uxth	r3, r3
 800247e:	b21a      	sxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002492:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <compass_get+0xd0>)
 8002494:	edd3 7a03 	vldr	s15, [r3, #12]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a0:	ee17 3a90 	vmov	r3, s15
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <compass_get+0xd0>)
 80024ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c6:	ee17 3a90 	vmov	r3, s15
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <compass_get+0xd0>)
 80024e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ec:	ee17 3a90 	vmov	r3, s15
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	809a      	strh	r2, [r3, #4]
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000420 	.word	0x20000420

08002504 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 800250e:	4b32      	ldr	r3, [pc, #200]	@ (80025d8 <read_calibrate_file+0xd4>)
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	231c      	movs	r3, #28
 8002514:	2210      	movs	r2, #16
 8002516:	4931      	ldr	r1, [pc, #196]	@ (80025dc <read_calibrate_file+0xd8>)
 8002518:	f003 ff3b 	bl	8006392 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <read_calibrate_file+0xd8>)
 8002528:	edd3 7a03 	vldr	s15, [r3, #12]
 800252c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002534:	ee17 3a90 	vmov	r3, s15
 8002538:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <read_calibrate_file+0xd8>)
 8002546:	edd3 7a04 	vldr	s15, [r3, #16]
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002552:	ee17 3a90 	vmov	r3, s15
 8002556:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <read_calibrate_file+0xd8>)
 8002564:	edd3 7a05 	vldr	s15, [r3, #20]
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002570:	ee17 3a90 	vmov	r3, s15
 8002574:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002576:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <read_calibrate_file+0xd8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8002580:	4b16      	ldr	r3, [pc, #88]	@ (80025dc <read_calibrate_file+0xd8>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 800258a:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <read_calibrate_file+0xd8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	607b      	str	r3, [r7, #4]
    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <read_calibrate_file+0xd8>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bfb8      	it	lt
 80025a4:	425b      	neglt	r3, r3
 80025a6:	2b28      	cmp	r3, #40	@ 0x28
 80025a8:	dd11      	ble.n	80025ce <read_calibrate_file+0xca>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80025aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ae:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <read_calibrate_file+0xdc>)
 80025b0:	f005 fb73 	bl	8007c9a <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80025b4:	2120      	movs	r1, #32
 80025b6:	480b      	ldr	r0, [pc, #44]	@ (80025e4 <read_calibrate_file+0xe0>)
 80025b8:	f005 fb6f 	bl	8007c9a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80025bc:	2110      	movs	r1, #16
 80025be:	4809      	ldr	r0, [pc, #36]	@ (80025e4 <read_calibrate_file+0xe0>)
 80025c0:	f005 fb6b 	bl	8007c9a <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 80025c4:	2032      	movs	r0, #50	@ 0x32
 80025c6:	f004 fc87 	bl	8006ed8 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80025ca:	bf00      	nop
 80025cc:	e7ed      	b.n	80025aa <read_calibrate_file+0xa6>
      }
    }
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000440 	.word	0x20000440
 80025dc:	20000420 	.word	0x20000420
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020000 	.word	0x40020000

080025e8 <compass_calibrate>:

/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	@ 0x30
 80025ec:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 80025ee:	4a9d      	ldr	r2, [pc, #628]	@ (8002864 <compass_calibrate+0x27c>)
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025f8:	6018      	str	r0, [r3, #0]
 80025fa:	3304      	adds	r3, #4
 80025fc:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 80025fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002868 <compass_calibrate+0x280>)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002608:	6018      	str	r0, [r3, #0]
 800260a:	3304      	adds	r3, #4
 800260c:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    static cali_mag_t calibrate_temp;
    ignore_data = 0;
 8002614:	4b95      	ldr	r3, [pc, #596]	@ (800286c <compass_calibrate+0x284>)
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 800261a:	e0b1      	b.n	8002780 <compass_calibrate+0x198>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 800261c:	463b      	mov	r3, r7
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fc58 	bl	8001ed4 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8002624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 800262c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002630:	813b      	strh	r3, [r7, #8]
          last_axis[Y] = as.y;
 8002632:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002636:	817b      	strh	r3, [r7, #10]
          last_axis[Z] = as.z;
 8002638:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800263c:	81bb      	strh	r3, [r7, #12]
          fist_data = FALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          continue;
 8002644:	e09c      	b.n	8002780 <compass_calibrate+0x198>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8002646:	f9b7 3000 	ldrsh.w	r3, [r7]
 800264a:	b29a      	uxth	r2, r3
 800264c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002650:	b29b      	uxth	r3, r3
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	b29b      	uxth	r3, r3
 8002656:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002658:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800265c:	b29a      	uxth	r2, r3
 800265e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002662:	b29b      	uxth	r3, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	b29b      	uxth	r3, r3
 8002668:	853b      	strh	r3, [r7, #40]	@ 0x28
        int16_t delta_z_ = as.z -  last_axis[Z];
 800266a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800266e:	b29a      	uxth	r2, r3
 8002670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002674:	b29b      	uxth	r3, r3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 800267c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002680:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8002684:	fb03 f202 	mul.w	r2, r3, r2
 8002688:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800268c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	441a      	add	r2, r3
 8002696:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800269a:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fee5 	bl	8000474 <__aeabi_i2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	ec43 2b10 	vmov	d0, r2, r3
 80026b2:	f012 fbf5 	bl	8014ea0 <sqrt>
 80026b6:	ec53 2b10 	vmov	r2, r3, d0
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe f9f3 	bl	8000aa8 <__aeabi_d2iz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if(ckec > max_change){
 80026c6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80026ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80026ce:	4293      	cmp	r3, r2
 80026d0:	dd09      	ble.n	80026e6 <compass_calibrate+0xfe>
            fist_data = TRUE; 
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            ignore_data ++;
 80026d8:	4b64      	ldr	r3, [pc, #400]	@ (800286c <compass_calibrate+0x284>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b62      	ldr	r3, [pc, #392]	@ (800286c <compass_calibrate+0x284>)
 80026e2:	801a      	strh	r2, [r3, #0]
            continue;
 80026e4:	e04c      	b.n	8002780 <compass_calibrate+0x198>
        }
        last_axis[X] = as.x;
 80026e6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026ea:	813b      	strh	r3, [r7, #8]
        last_axis[Y] = as.y;
 80026ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026f0:	817b      	strh	r3, [r7, #10]
        last_axis[Z] = as.z;
 80026f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026f6:	81bb      	strh	r3, [r7, #12]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 80026f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80026fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002700:	429a      	cmp	r2, r3
 8002702:	dd02      	ble.n	800270a <compass_calibrate+0x122>
 8002704:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002708:	833b      	strh	r3, [r7, #24]
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 800270a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800270e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002712:	429a      	cmp	r2, r3
 8002714:	dd02      	ble.n	800271c <compass_calibrate+0x134>
 8002716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800271a:	837b      	strh	r3, [r7, #26]
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 800271c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002720:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002724:	429a      	cmp	r2, r3
 8002726:	dd02      	ble.n	800272e <compass_calibrate+0x146>
 8002728:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800272c:	83bb      	strh	r3, [r7, #28]

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 800272e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002732:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002736:	429a      	cmp	r2, r3
 8002738:	da02      	bge.n	8002740 <compass_calibrate+0x158>
 800273a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800273e:	823b      	strh	r3, [r7, #16]
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8002740:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002744:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002748:	429a      	cmp	r2, r3
 800274a:	da02      	bge.n	8002752 <compass_calibrate+0x16a>
 800274c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002750:	827b      	strh	r3, [r7, #18]
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8002752:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002756:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800275a:	429a      	cmp	r2, r3
 800275c:	da02      	bge.n	8002764 <compass_calibrate+0x17c>
 800275e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002762:	82bb      	strh	r3, [r7, #20]
		
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002764:	2120      	movs	r1, #32
 8002766:	4842      	ldr	r0, [pc, #264]	@ (8002870 <compass_calibrate+0x288>)
 8002768:	f005 fa97 	bl	8007c9a <HAL_GPIO_TogglePin>
        HAL_Delay(50); // 10 Hz loop
 800276c:	2032      	movs	r0, #50	@ 0x32
 800276e:	f004 fbb3 	bl	8006ed8 <HAL_Delay>

       if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8002772:	2120      	movs	r1, #32
 8002774:	483f      	ldr	r0, [pc, #252]	@ (8002874 <compass_calibrate+0x28c>)
 8002776:	f005 fa5f 	bl	8007c38 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <compass_calibrate+0x1a6>
	while(!file_open){
 8002780:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <compass_calibrate+0x290>)
 8002782:	f993 3000 	ldrsb.w	r3, [r3]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f43f af48 	beq.w	800261c <compass_calibrate+0x34>
 800278c:	e000      	b.n	8002790 <compass_calibrate+0x1a8>
              break;
 800278e:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002790:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	dc02      	bgt.n	800279e <compass_calibrate+0x1b6>
 8002798:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800279c:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 800279e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db02      	blt.n	80027ac <compass_calibrate+0x1c4>
 80027a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027aa:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 80027ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027b0:	461a      	mov	r2, r3
 80027b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	0fda      	lsrs	r2, r3, #31
 80027ba:	4413      	add	r3, r2
 80027bc:	105b      	asrs	r3, r3, #1
 80027be:	461a      	mov	r2, r3
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <compass_calibrate+0x294>)
 80027c2:	601a      	str	r2, [r3, #0]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 80027c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027ce:	4413      	add	r3, r2
 80027d0:	0fda      	lsrs	r2, r3, #31
 80027d2:	4413      	add	r3, r2
 80027d4:	105b      	asrs	r3, r3, #1
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <compass_calibrate+0x294>)
 80027da:	605a      	str	r2, [r3, #4]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 80027dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027e0:	461a      	mov	r2, r3
 80027e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027e6:	4413      	add	r3, r2
 80027e8:	0fda      	lsrs	r2, r3, #31
 80027ea:	4413      	add	r3, r2
 80027ec:	105b      	asrs	r3, r3, #1
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b22      	ldr	r3, [pc, #136]	@ (800287c <compass_calibrate+0x294>)
 80027f2:	609a      	str	r2, [r3, #8]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 80027f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bfb8      	it	lt
 80027fc:	425b      	neglt	r3, r3
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	bfb8      	it	lt
 8002808:	425b      	neglt	r3, r3
 800280a:	b29b      	uxth	r3, r3
 800280c:	4413      	add	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8002812:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002816:	2b00      	cmp	r3, #0
 8002818:	bfb8      	it	lt
 800281a:	425b      	neglt	r3, r3
 800281c:	b29a      	uxth	r2, r3
 800281e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002822:	2b00      	cmp	r3, #0
 8002824:	bfb8      	it	lt
 8002826:	425b      	neglt	r3, r3
 8002828:	b29b      	uxth	r3, r3
 800282a:	4413      	add	r3, r2
 800282c:	b29b      	uxth	r3, r3
 800282e:	843b      	strh	r3, [r7, #32]
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8002830:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002834:	2b00      	cmp	r3, #0
 8002836:	bfb8      	it	lt
 8002838:	425b      	neglt	r3, r3
 800283a:	b29a      	uxth	r2, r3
 800283c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	bfb8      	it	lt
 8002844:	425b      	neglt	r3, r3
 8002846:	b29b      	uxth	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	83fb      	strh	r3, [r7, #30]

    // get largest value
    int16_t max_value = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if(x_ > y_)
 8002852:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800285a:	429a      	cmp	r2, r3
 800285c:	dd10      	ble.n	8002880 <compass_calibrate+0x298>
        max_value = x_;
 800285e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002860:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002862:	e00f      	b.n	8002884 <compass_calibrate+0x29c>
 8002864:	080158a4 	.word	0x080158a4
 8002868:	080158ac 	.word	0x080158ac
 800286c:	2000041c 	.word	0x2000041c
 8002870:	40020000 	.word	0x40020000
 8002874:	40020400 	.word	0x40020400
 8002878:	2000043c 	.word	0x2000043c
 800287c:	20000464 	.word	0x20000464
    else
        max_value = y_;
 8002880:	8c3b      	ldrh	r3, [r7, #32]
 8002882:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if(max_value < z_)
 8002884:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8002888:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800288c:	429a      	cmp	r2, r3
 800288e:	da01      	bge.n	8002894 <compass_calibrate+0x2ac>
        max_value = z_;
 8002890:	8bfb      	ldrh	r3, [r7, #30]
 8002892:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002894:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b0:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <compass_calibrate+0x3cc>)
 80028b2:	edc3 7a03 	vstr	s15, [r3, #12]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 80028b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028c2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <compass_calibrate+0x3cc>)
 80028d4:	edc3 7a04 	vstr	s15, [r3, #16]
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 80028d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028e4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f4:	4b2f      	ldr	r3, [pc, #188]	@ (80029b4 <compass_calibrate+0x3cc>)
 80028f6:	edc3 7a05 	vstr	s15, [r3, #20]

    calibrate_temp.sum_all_value = 0;
 80028fa:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <compass_calibrate+0x3cc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002900:	4b2c      	ldr	r3, [pc, #176]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <compass_calibrate+0x3cc>)
 800290e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800291a:	ee17 2a90 	vmov	r2, s15
 800291e:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002920:	619a      	str	r2, [r3, #24]
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292e:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002930:	edd3 7a04 	vldr	s15, [r3, #16]
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293c:	ee17 2a90 	vmov	r2, s15
 8002940:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002942:	619a      	str	r2, [r3, #24]
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002950:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002952:	edd3 7a05 	vldr	s15, [r3, #20]
 8002956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295e:	ee17 2a90 	vmov	r2, s15
 8002962:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002964:	619a      	str	r2, [r3, #24]

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8002966:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <compass_calibrate+0x3cc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002972:	6193      	str	r3, [r2, #24]
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 8002974:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <compass_calibrate+0x3cc>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002980:	6193      	str	r3, [r2, #24]
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <compass_calibrate+0x3cc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4413      	add	r3, r2
 800298c:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <compass_calibrate+0x3cc>)
 800298e:	6193      	str	r3, [r2, #24]
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <compass_calibrate+0x3d0>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	231c      	movs	r3, #28
 8002996:	2210      	movs	r2, #16
 8002998:	4906      	ldr	r1, [pc, #24]	@ (80029b4 <compass_calibrate+0x3cc>)
 800299a:	f003 fbf8 	bl	800618e <AT24Cxx_write_byte_buffer>
	while(1){
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800299e:	2110      	movs	r1, #16
 80029a0:	4806      	ldr	r0, [pc, #24]	@ (80029bc <compass_calibrate+0x3d4>)
 80029a2:	f005 f97a 	bl	8007c9a <HAL_GPIO_TogglePin>
       HAL_Delay(1000); // 10 Hz loop
 80029a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029aa:	f004 fa95 	bl	8006ed8 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80029ae:	bf00      	nop
 80029b0:	e7f5      	b.n	800299e <compass_calibrate+0x3b6>
 80029b2:	bf00      	nop
 80029b4:	20000464 	.word	0x20000464
 80029b8:	20000440 	.word	0x20000440
 80029bc:	40020000 	.word	0x40020000

080029c0 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    offset_alt = 0;
 80029ca:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <gps_init+0xe4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
    gps_alt_zero_calibrate = FALSE;
 80029d0:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <gps_init+0xe8>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	_gpsUartPort = uart;
 80029d6:	4a35      	ldr	r2, [pc, #212]	@ (8002aac <gps_init+0xec>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 80029dc:	4b34      	ldr	r3, [pc, #208]	@ (8002ab0 <gps_init+0xf0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e4:	4b33      	ldr	r3, [pc, #204]	@ (8002ab4 <gps_init+0xf4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a33      	ldr	r2, [pc, #204]	@ (8002ab8 <gps_init+0xf8>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	4a32      	ldr	r2, [pc, #200]	@ (8002abc <gps_init+0xfc>)
 80029f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 80029f6:	4b32      	ldr	r3, [pc, #200]	@ (8002ac0 <gps_init+0x100>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 80029fc:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <gps_init+0x104>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 8002a02:	4b31      	ldr	r3, [pc, #196]	@ (8002ac8 <gps_init+0x108>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <gps_init+0xec>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort);
 8002a10:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <gps_init+0xec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f009 fd57 	bl	800c4c8 <HAL_UART_Init>
    HAL_Delay(1000);
 8002a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a1e:	f004 fa5b 	bl	8006ed8 <HAL_Delay>
    /* disable NMEA */
    for(int i = 0;i< 3; i++){
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e00d      	b.n	8002a44 <gps_init+0x84>
    	HAL_UART_Transmit(_gpsUartPort,disable_NMEA_MSG,sizeof(disable_NMEA_MSG),1000);
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <gps_init+0xec>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a30:	224d      	movs	r2, #77	@ 0x4d
 8002a32:	4926      	ldr	r1, [pc, #152]	@ (8002acc <gps_init+0x10c>)
 8002a34:	f009 fd98 	bl	800c568 <HAL_UART_Transmit>
    	HAL_Delay(10);
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f004 fa4d 	bl	8006ed8 <HAL_Delay>
    for(int i = 0;i< 3; i++){
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	ddee      	ble.n	8002a28 <gps_init+0x68>
    }

    /* enable UBX */
    for(int i = 0;i< 3; i++){
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e00d      	b.n	8002a6c <gps_init+0xac>
        HAL_UART_Transmit(_gpsUartPort,enable_UBX_MSG,sizeof(enable_UBX_MSG),1000);
 8002a50:	4b16      	ldr	r3, [pc, #88]	@ (8002aac <gps_init+0xec>)
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a58:	222c      	movs	r2, #44	@ 0x2c
 8002a5a:	491d      	ldr	r1, [pc, #116]	@ (8002ad0 <gps_init+0x110>)
 8002a5c:	f009 fd84 	bl	800c568 <HAL_UART_Transmit>
        HAL_Delay(10);
 8002a60:	200a      	movs	r0, #10
 8002a62:	f004 fa39 	bl	8006ed8 <HAL_Delay>
    for(int i = 0;i< 3; i++){
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	ddee      	ble.n	8002a50 <gps_init+0x90>
    }

     /* set max rate */
    //HAL_UART_Transmit(_gpsUartPort,set_rate_10hz,sizeof(set_rate_10hz),1000);
    //HAL_Delay(2);
    for(int i = 0;i< 3; i++){
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e00d      	b.n	8002a94 <gps_init+0xd4>
    	HAL_UART_Transmit(_gpsUartPort,set_rate_50hz,sizeof(set_rate_50hz),1000);
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <gps_init+0xec>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a80:	220e      	movs	r2, #14
 8002a82:	4914      	ldr	r1, [pc, #80]	@ (8002ad4 <gps_init+0x114>)
 8002a84:	f009 fd70 	bl	800c568 <HAL_UART_Transmit>
    	HAL_Delay(10);
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f004 fa25 	bl	8006ed8 <HAL_Delay>
    for(int i = 0;i< 3; i++){
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3301      	adds	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	ddee      	ble.n	8002a78 <gps_init+0xb8>
    }
    // read gps using interrup
	//HAL_UART_Receive_IT(_gpsUartPort, &_char,1);
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000590 	.word	0x20000590
 8002aa8:	20000594 	.word	0x20000594
 8002aac:	200004bc 	.word	0x200004bc
 8002ab0:	20000724 	.word	0x20000724
 8002ab4:	20000728 	.word	0x20000728
 8002ab8:	10624dd3 	.word	0x10624dd3
 8002abc:	20000480 	.word	0x20000480
 8002ac0:	200004c2 	.word	0x200004c2
 8002ac4:	200004c4 	.word	0x200004c4
 8002ac8:	200004c0 	.word	0x200004c0
 8002acc:	08015a30 	.word	0x08015a30
 8002ad0:	08015a80 	.word	0x08015a80
 8002ad4:	08015aac 	.word	0x08015aac

08002ad8 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 8002adc:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <gps_uart_port+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200004bc 	.word	0x200004bc

08002af0 <gps_readout>:
uint8_t gps_thread_count;
uint32_t ms_gps_thread;
/*
* Parse gps buffer read by DMA
**/
void gps_readout(){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
    uint8_t buffer_index = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]
    gps_thread_count ++;
 8002afa:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <gps_readout+0x58>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <gps_readout+0x58>)
 8002b04:	701a      	strb	r2, [r3, #0]
    if(receive_cplt){
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <gps_readout+0x5c>)
 8002b08:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <gps_readout+0x50>
        while(1){
            newdata(gps_buffer[buffer_index++]);
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	71fa      	strb	r2, [r7, #7]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <gps_readout+0x60>)
 8002b1a:	5c9b      	ldrb	r3, [r3, r2]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f9a1 	bl	8002e64 <newdata>
            if(buffer_index >= UBLOX_BUFFER_SIZE){
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b26:	d800      	bhi.n	8002b2a <gps_readout+0x3a>
            newdata(gps_buffer[buffer_index++]);
 8002b28:	e7f2      	b.n	8002b10 <gps_readout+0x20>
            	 break;
 8002b2a:	bf00      	nop
            }
        }
        HAL_UART_Receive_DMA(_gpsUartPort,gps_buffer,UBLOX_BUFFER_SIZE);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <gps_readout+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	22c8      	movs	r2, #200	@ 0xc8
 8002b32:	4907      	ldr	r1, [pc, #28]	@ (8002b50 <gps_readout+0x60>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 fdc7 	bl	800c6c8 <HAL_UART_Receive_DMA>
        receive_cplt = 0;
 8002b3a:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <gps_readout+0x5c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
    }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000660 	.word	0x20000660
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	200004c8 	.word	0x200004c8
 8002b54:	200004bc 	.word	0x200004bc

08002b58 <gps_DMA_callback>:

uint8_t gps_count_ = 0;  // check call interrupt
void gps_DMA_callback()
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
    static uint32_t last_call;
    ms_gps_thread = millis() - last_call;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <gps_DMA_callback+0x5c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b64:	4b14      	ldr	r3, [pc, #80]	@ (8002bb8 <gps_DMA_callback+0x60>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <gps_DMA_callback+0x64>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	099a      	lsrs	r2, r3, #6
 8002b72:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <gps_DMA_callback+0x68>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <gps_DMA_callback+0x6c>)
 8002b7a:	6013      	str	r3, [r2, #0]
    last_call = millis();
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <gps_DMA_callback+0x5c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <gps_DMA_callback+0x60>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <gps_DMA_callback+0x64>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <gps_DMA_callback+0x68>)
 8002b94:	6013      	str	r3, [r2, #0]
	gps_count_ ++;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <gps_DMA_callback+0x70>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <gps_DMA_callback+0x70>)
 8002ba0:	701a      	strb	r2, [r3, #0]
    receive_cplt = 1;
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <gps_DMA_callback+0x74>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000724 	.word	0x20000724
 8002bb8:	20000728 	.word	0x20000728
 8002bbc:	10624dd3 	.word	0x10624dd3
 8002bc0:	20000678 	.word	0x20000678
 8002bc4:	20000664 	.word	0x20000664
 8002bc8:	20000668 	.word	0x20000668
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <parse_msg>:

uint32_t ms_posllh;
uint32_t ms_status;
uint32_t ms_velned;

static uint8_t parse_msg(){
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    static uint8_t gps_cali_count = 0;
    switch (_msg_id) {
 8002bd4:	4b90      	ldr	r3, [pc, #576]	@ (8002e18 <parse_msg+0x248>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b30      	cmp	r3, #48	@ 0x30
 8002bda:	f000 8104 	beq.w	8002de6 <parse_msg+0x216>
 8002bde:	2b30      	cmp	r3, #48	@ 0x30
 8002be0:	f300 80ff 	bgt.w	8002de2 <parse_msg+0x212>
 8002be4:	2b12      	cmp	r3, #18
 8002be6:	f000 80bb 	beq.w	8002d60 <parse_msg+0x190>
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	f300 80f9 	bgt.w	8002de2 <parse_msg+0x212>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d003      	beq.n	8002bfc <parse_msg+0x2c>
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	f000 8090 	beq.w	8002d1a <parse_msg+0x14a>
 8002bfa:	e0f2      	b.n	8002de2 <parse_msg+0x212>
        case MSG_POSLLH:
        	 static uint32_t c_time_ms_posllh = 0;
        	 ms_posllh = millis() - c_time_ms_posllh;
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <parse_msg+0x24c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c04:	4b86      	ldr	r3, [pc, #536]	@ (8002e20 <parse_msg+0x250>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a86      	ldr	r2, [pc, #536]	@ (8002e24 <parse_msg+0x254>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099a      	lsrs	r2, r3, #6
 8002c12:	4b85      	ldr	r3, [pc, #532]	@ (8002e28 <parse_msg+0x258>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a84      	ldr	r2, [pc, #528]	@ (8002e2c <parse_msg+0x25c>)
 8002c1a:	6013      	str	r3, [r2, #0]
        	 c_time_ms_posllh = millis();
 8002c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e1c <parse_msg+0x24c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c24:	4b7e      	ldr	r3, [pc, #504]	@ (8002e20 <parse_msg+0x250>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e24 <parse_msg+0x254>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	4a7d      	ldr	r2, [pc, #500]	@ (8002e28 <parse_msg+0x258>)
 8002c34:	6013      	str	r3, [r2, #0]
            _gps.position[LON] = _buffer.posllh.longitude;
 8002c36:	4b7e      	ldr	r3, [pc, #504]	@ (8002e30 <parse_msg+0x260>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e34 <parse_msg+0x264>)
 8002c3c:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e30 <parse_msg+0x260>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	4a7c      	ldr	r2, [pc, #496]	@ (8002e34 <parse_msg+0x264>)
 8002c44:	6053      	str	r3, [r2, #4]
            if(gps_alt_zero_calibrate == FALSE){
 8002c46:	4b7c      	ldr	r3, [pc, #496]	@ (8002e38 <parse_msg+0x268>)
 8002c48:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <parse_msg+0xac>
                if(gps_cali_count < 20){
 8002c50:	4b7a      	ldr	r3, [pc, #488]	@ (8002e3c <parse_msg+0x26c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b13      	cmp	r3, #19
 8002c56:	d80d      	bhi.n	8002c74 <parse_msg+0xa4>
                    offset_alt += _buffer.posllh.altitude_msl;
 8002c58:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <parse_msg+0x260>)
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	4b78      	ldr	r3, [pc, #480]	@ (8002e40 <parse_msg+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a77      	ldr	r2, [pc, #476]	@ (8002e40 <parse_msg+0x270>)
 8002c64:	6013      	str	r3, [r2, #0]
                    gps_cali_count ++;
 8002c66:	4b75      	ldr	r3, [pc, #468]	@ (8002e3c <parse_msg+0x26c>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <parse_msg+0x26c>)
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e010      	b.n	8002c96 <parse_msg+0xc6>
                }
                else{
                    gps_alt_zero_calibrate = TRUE;
 8002c74:	4b70      	ldr	r3, [pc, #448]	@ (8002e38 <parse_msg+0x268>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e00c      	b.n	8002c96 <parse_msg+0xc6>
                }
            }
            else{
               _gps.altitude_mgl = _buffer.posllh.altitude_msl - offset_alt/20; 
 8002c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e30 <parse_msg+0x260>)
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	4b6f      	ldr	r3, [pc, #444]	@ (8002e40 <parse_msg+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	496f      	ldr	r1, [pc, #444]	@ (8002e44 <parse_msg+0x274>)
 8002c86:	fb81 0103 	smull	r0, r1, r1, r3
 8002c8a:	10c9      	asrs	r1, r1, #3
 8002c8c:	17db      	asrs	r3, r3, #31
 8002c8e:	1a5b      	subs	r3, r3, r1
 8002c90:	4413      	add	r3, r2
 8002c92:	4a68      	ldr	r2, [pc, #416]	@ (8002e34 <parse_msg+0x264>)
 8002c94:	6353      	str	r3, [r2, #52]	@ 0x34
            }
            _gps.altitude_msl = _buffer.posllh.altitude_msl - offset_alt; 
 8002c96:	4b66      	ldr	r3, [pc, #408]	@ (8002e30 <parse_msg+0x260>)
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <parse_msg+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a64      	ldr	r2, [pc, #400]	@ (8002e34 <parse_msg+0x264>)
 8002ca2:	6313      	str	r3, [r2, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8002ca4:	4b62      	ldr	r3, [pc, #392]	@ (8002e30 <parse_msg+0x260>)
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	4a62      	ldr	r2, [pc, #392]	@ (8002e34 <parse_msg+0x264>)
 8002caa:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 8002cac:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <parse_msg+0x260>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a60      	ldr	r2, [pc, #384]	@ (8002e34 <parse_msg+0x264>)
 8002cb2:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8002cb4:	4b64      	ldr	r3, [pc, #400]	@ (8002e48 <parse_msg+0x278>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <parse_msg+0x108>
                lastPosUpdateTime = millis();
 8002cbc:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <parse_msg+0x24c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc4:	4b56      	ldr	r3, [pc, #344]	@ (8002e20 <parse_msg+0x250>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a56      	ldr	r2, [pc, #344]	@ (8002e24 <parse_msg+0x254>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e48 <parse_msg+0x278>)
 8002cd4:	6013      	str	r3, [r2, #0]
                break;
 8002cd6:	e087      	b.n	8002de8 <parse_msg+0x218>
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 8002cd8:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <parse_msg+0x24c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e20 <parse_msg+0x250>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a4f      	ldr	r2, [pc, #316]	@ (8002e24 <parse_msg+0x254>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	099a      	lsrs	r2, r3, #6
 8002cee:	4b56      	ldr	r3, [pc, #344]	@ (8002e48 <parse_msg+0x278>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e34 <parse_msg+0x264>)
 8002cf6:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 8002cf8:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <parse_msg+0x24c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d00:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <parse_msg+0x250>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a47      	ldr	r2, [pc, #284]	@ (8002e24 <parse_msg+0x254>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e48 <parse_msg+0x278>)
 8002d10:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002d12:	4b4e      	ldr	r3, [pc, #312]	@ (8002e4c <parse_msg+0x27c>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
            break;
 8002d18:	e066      	b.n	8002de8 <parse_msg+0x218>
        case MSG_STATUS:
			static uint32_t c_time_ms_status = 0;
			ms_status = millis() - c_time_ms_status;
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <parse_msg+0x24c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d22:	4b3f      	ldr	r3, [pc, #252]	@ (8002e20 <parse_msg+0x250>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	4a3e      	ldr	r2, [pc, #248]	@ (8002e24 <parse_msg+0x254>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	099a      	lsrs	r2, r3, #6
 8002d30:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <parse_msg+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	4a47      	ldr	r2, [pc, #284]	@ (8002e54 <parse_msg+0x284>)
 8002d38:	6013      	str	r3, [r2, #0]
			c_time_ms_status = millis();
 8002d3a:	4b38      	ldr	r3, [pc, #224]	@ (8002e1c <parse_msg+0x24c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d42:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <parse_msg+0x250>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	4a36      	ldr	r2, [pc, #216]	@ (8002e24 <parse_msg+0x254>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	4a3f      	ldr	r2, [pc, #252]	@ (8002e50 <parse_msg+0x280>)
 8002d52:	6013      	str	r3, [r2, #0]
            //next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002d54:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <parse_msg+0x260>)
 8002d56:	791a      	ldrb	r2, [r3, #4]
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <parse_msg+0x264>)
 8002d5a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            break;
 8002d5e:	e043      	b.n	8002de8 <parse_msg+0x218>
            _gps.numSat = _buffer.solution.satellites; -------------------------------------------------------------------------------------
            break;
        */
        case MSG_VELNED:
			 static uint32_t c_time_ms_velned = 0;
			 ms_velned = millis() - c_time_ms_velned;
 8002d60:	4b2e      	ldr	r3, [pc, #184]	@ (8002e1c <parse_msg+0x24c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d68:	4b2d      	ldr	r3, [pc, #180]	@ (8002e20 <parse_msg+0x250>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <parse_msg+0x254>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	099a      	lsrs	r2, r3, #6
 8002d76:	4b38      	ldr	r3, [pc, #224]	@ (8002e58 <parse_msg+0x288>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4a37      	ldr	r2, [pc, #220]	@ (8002e5c <parse_msg+0x28c>)
 8002d7e:	6013      	str	r3, [r2, #0]
			 c_time_ms_velned = millis();
 8002d80:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <parse_msg+0x24c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d88:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <parse_msg+0x250>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a25      	ldr	r2, [pc, #148]	@ (8002e24 <parse_msg+0x254>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	4a30      	ldr	r2, [pc, #192]	@ (8002e58 <parse_msg+0x288>)
 8002d98:	6013      	str	r3, [r2, #0]
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 8002d9a:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <parse_msg+0x260>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a25      	ldr	r2, [pc, #148]	@ (8002e34 <parse_msg+0x264>)
 8002da0:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8002da2:	4b23      	ldr	r3, [pc, #140]	@ (8002e30 <parse_msg+0x260>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4a23      	ldr	r2, [pc, #140]	@ (8002e34 <parse_msg+0x264>)
 8002da8:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 8002daa:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <parse_msg+0x260>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <parse_msg+0x264>)
 8002db0:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8002db2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <parse_msg+0x260>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <parse_msg+0x264>)
 8002dba:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <parse_msg+0x260>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <parse_msg+0x264>)
 8002dc4:	871a      	strh	r2, [r3, #56]	@ 0x38
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <parse_msg+0x260>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <parse_msg+0x264>)
 8002dce:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8002dd0:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <parse_msg+0x260>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <parse_msg+0x264>)
 8002dd8:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8002dda:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <parse_msg+0x290>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
            break;
 8002de0:	e002      	b.n	8002de8 <parse_msg+0x218>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e012      	b.n	8002e0c <parse_msg+0x23c>
            break;
 8002de6:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <parse_msg+0x27c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <parse_msg+0x23a>
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <parse_msg+0x290>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <parse_msg+0x23a>
        _new_speed = _new_position = FALSE;
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <parse_msg+0x27c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <parse_msg+0x27c>)
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <parse_msg+0x290>)
 8002e04:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <parse_msg+0x23c>
    }
    return FALSE;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200004c0 	.word	0x200004c0
 8002e1c:	20000724 	.word	0x20000724
 8002e20:	20000728 	.word	0x20000728
 8002e24:	10624dd3 	.word	0x10624dd3
 8002e28:	2000067c 	.word	0x2000067c
 8002e2c:	2000066c 	.word	0x2000066c
 8002e30:	20000598 	.word	0x20000598
 8002e34:	20000480 	.word	0x20000480
 8002e38:	20000594 	.word	0x20000594
 8002e3c:	20000680 	.word	0x20000680
 8002e40:	20000590 	.word	0x20000590
 8002e44:	66666667 	.word	0x66666667
 8002e48:	20000684 	.word	0x20000684
 8002e4c:	20000688 	.word	0x20000688
 8002e50:	2000068c 	.word	0x2000068c
 8002e54:	20000670 	.word	0x20000670
 8002e58:	20000690 	.word	0x20000690
 8002e5c:	20000674 	.word	0x20000674
 8002e60:	20000694 	.word	0x20000694

08002e64 <newdata>:

static uint8_t newdata(uint8_t data){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    switch (_step) {
 8002e72:	4b7a      	ldr	r3, [pc, #488]	@ (800305c <newdata+0x1f8>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	f200 80eb 	bhi.w	8003052 <newdata+0x1ee>
 8002e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <newdata+0x20>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ebf 	.word	0x08002ebf
 8002e8c:	08002ed3 	.word	0x08002ed3
 8002e90:	08002eef 	.word	0x08002eef
 8002e94:	08002f21 	.word	0x08002f21
 8002e98:	08002f55 	.word	0x08002f55
 8002e9c:	08002faf 	.word	0x08002faf
 8002ea0:	08003007 	.word	0x08003007
 8002ea4:	08003025 	.word	0x08003025
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	2bb5      	cmp	r3, #181	@ 0xb5
 8002eac:	f040 80ca 	bne.w	8003044 <newdata+0x1e0>
                _step++;
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800305c <newdata+0x1f8>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b68      	ldr	r3, [pc, #416]	@ (800305c <newdata+0x1f8>)
 8002eba:	701a      	strb	r2, [r3, #0]
            break;
 8002ebc:	e0c2      	b.n	8003044 <newdata+0x1e0>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b62      	cmp	r3, #98	@ 0x62
 8002ec2:	d106      	bne.n	8002ed2 <newdata+0x6e>
                _step++;
 8002ec4:	4b65      	ldr	r3, [pc, #404]	@ (800305c <newdata+0x1f8>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	4b63      	ldr	r3, [pc, #396]	@ (800305c <newdata+0x1f8>)
 8002ece:	701a      	strb	r2, [r3, #0]
                break;
 8002ed0:	e0bf      	b.n	8003052 <newdata+0x1ee>
            }
        case 2: // Class
            _step++;
 8002ed2:	4b62      	ldr	r3, [pc, #392]	@ (800305c <newdata+0x1f8>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b60      	ldr	r3, [pc, #384]	@ (800305c <newdata+0x1f8>)
 8002edc:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 8002ede:	4a60      	ldr	r2, [pc, #384]	@ (8003060 <newdata+0x1fc>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	7013      	strb	r3, [r2, #0]
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8003060 <newdata+0x1fc>)
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8003064 <newdata+0x200>)
 8002eea:	701a      	strb	r2, [r3, #0]
            break;
 8002eec:	e0b1      	b.n	8003052 <newdata+0x1ee>
        case 3: // ID
            _step++;
 8002eee:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <newdata+0x1f8>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b59      	ldr	r3, [pc, #356]	@ (800305c <newdata+0x1f8>)
 8002ef8:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002efa:	4b59      	ldr	r3, [pc, #356]	@ (8003060 <newdata+0x1fc>)
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4413      	add	r3, r2
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b56      	ldr	r3, [pc, #344]	@ (8003060 <newdata+0x1fc>)
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	4b55      	ldr	r3, [pc, #340]	@ (8003060 <newdata+0x1fc>)
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	4b55      	ldr	r3, [pc, #340]	@ (8003064 <newdata+0x200>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <newdata+0x200>)
 8002f16:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8002f18:	4a53      	ldr	r2, [pc, #332]	@ (8003068 <newdata+0x204>)
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	7013      	strb	r3, [r2, #0]
            break;
 8002f1e:	e098      	b.n	8003052 <newdata+0x1ee>
        case 4: 
            _step++;
 8002f20:	4b4e      	ldr	r3, [pc, #312]	@ (800305c <newdata+0x1f8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <newdata+0x1f8>)
 8002f2a:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003060 <newdata+0x1fc>)
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	4413      	add	r3, r2
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <newdata+0x1fc>)
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	4b49      	ldr	r3, [pc, #292]	@ (8003060 <newdata+0x1fc>)
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	4b49      	ldr	r3, [pc, #292]	@ (8003064 <newdata+0x200>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <newdata+0x200>)
 8002f48:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	4b47      	ldr	r3, [pc, #284]	@ (800306c <newdata+0x208>)
 8002f50:	801a      	strh	r2, [r3, #0]
            break;
 8002f52:	e07e      	b.n	8003052 <newdata+0x1ee>
        case 5: 
            _step++;
 8002f54:	4b41      	ldr	r3, [pc, #260]	@ (800305c <newdata+0x1f8>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800305c <newdata+0x1f8>)
 8002f5e:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002f60:	4b3f      	ldr	r3, [pc, #252]	@ (8003060 <newdata+0x1fc>)
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	4413      	add	r3, r2
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003060 <newdata+0x1fc>)
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003060 <newdata+0x1fc>)
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	4b3c      	ldr	r3, [pc, #240]	@ (8003064 <newdata+0x200>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <newdata+0x200>)
 8002f7c:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	4b39      	ldr	r3, [pc, #228]	@ (800306c <newdata+0x208>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b37      	ldr	r3, [pc, #220]	@ (800306c <newdata+0x208>)
 8002f90:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002f92:	4b36      	ldr	r3, [pc, #216]	@ (800306c <newdata+0x208>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f98:	d905      	bls.n	8002fa6 <newdata+0x142>
                _payload_length = 0;
 8002f9a:	4b34      	ldr	r3, [pc, #208]	@ (800306c <newdata+0x208>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800305c <newdata+0x1f8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 8002fa6:	4b32      	ldr	r3, [pc, #200]	@ (8003070 <newdata+0x20c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	801a      	strh	r2, [r3, #0]
            break;
 8002fac:	e051      	b.n	8003052 <newdata+0x1ee>
        case 6:
            _ck_b += (_ck_a += data);     
 8002fae:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <newdata+0x1fc>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <newdata+0x1fc>)
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <newdata+0x1fc>)
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <newdata+0x200>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <newdata+0x200>)
 8002fca:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8002fcc:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <newdata+0x20c>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fd2:	d805      	bhi.n	8002fe0 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8002fd4:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <newdata+0x20c>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4a26      	ldr	r2, [pc, #152]	@ (8003074 <newdata+0x210>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8002fe0:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <newdata+0x20c>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <newdata+0x20c>)
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <newdata+0x20c>)
 8002fee:	881a      	ldrh	r2, [r3, #0]
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <newdata+0x208>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d127      	bne.n	8003048 <newdata+0x1e4>
                _step++;
 8002ff8:	4b18      	ldr	r3, [pc, #96]	@ (800305c <newdata+0x1f8>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b16      	ldr	r3, [pc, #88]	@ (800305c <newdata+0x1f8>)
 8003002:	701a      	strb	r2, [r3, #0]
            break;
 8003004:	e020      	b.n	8003048 <newdata+0x1e4>
        case 7:
            _step++;
 8003006:	4b15      	ldr	r3, [pc, #84]	@ (800305c <newdata+0x1f8>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <newdata+0x1f8>)
 8003010:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <newdata+0x1fc>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	429a      	cmp	r2, r3
 800301a:	d017      	beq.n	800304c <newdata+0x1e8>
                _step = 0;         
 800301c:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <newdata+0x1f8>)
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
            break;
 8003022:	e013      	b.n	800304c <newdata+0x1e8>
        case 8:
            _step = 0;
 8003024:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <newdata+0x1f8>)
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 800302a:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <newdata+0x200>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	79fa      	ldrb	r2, [r7, #7]
 8003030:	429a      	cmp	r2, r3
 8003032:	d10d      	bne.n	8003050 <newdata+0x1ec>
                break;   
            if(parse_msg())
 8003034:	f7ff fdcc 	bl	8002bd0 <parse_msg>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <newdata+0x1ee>
            {
                parsed = TRUE;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e006      	b.n	8003052 <newdata+0x1ee>
            break;
 8003044:	bf00      	nop
 8003046:	e004      	b.n	8003052 <newdata+0x1ee>
            break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <newdata+0x1ee>
            break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <newdata+0x1ee>
                break;   
 8003050:	bf00      	nop
            }
    } 
    return parsed;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000695 	.word	0x20000695
 8003060:	20000696 	.word	0x20000696
 8003064:	20000697 	.word	0x20000697
 8003068:	200004c0 	.word	0x200004c0
 800306c:	200004c2 	.word	0x200004c2
 8003070:	200004c4 	.word	0x200004c4
 8003074:	20000598 	.word	0x20000598

08003078 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 8003084:	4b32      	ldr	r3, [pc, #200]	@ (8003150 <imu_calibrate+0xd8>)
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 800308c:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <imu_calibrate+0xdc>)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8003094:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <imu_calibrate+0xe0>)
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	e01f      	b.n	80030e2 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe6a 	bl	8001d80 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 80030ac:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <imu_calibrate+0xe4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030b4:	4413      	add	r3, r2
 80030b6:	4a29      	ldr	r2, [pc, #164]	@ (800315c <imu_calibrate+0xe4>)
 80030b8:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 80030ba:	4b28      	ldr	r3, [pc, #160]	@ (800315c <imu_calibrate+0xe4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a25      	ldr	r2, [pc, #148]	@ (800315c <imu_calibrate+0xe4>)
 80030c6:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 80030c8:	4b24      	ldr	r3, [pc, #144]	@ (800315c <imu_calibrate+0xe4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a22      	ldr	r2, [pc, #136]	@ (800315c <imu_calibrate+0xe4>)
 80030d4:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 80030d6:	2001      	movs	r0, #1
 80030d8:	f003 fefe 	bl	8006ed8 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030e8:	dbdb      	blt.n	80030a2 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <imu_calibrate+0xe4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <imu_calibrate+0xe8>)
 80030f0:	fb82 1203 	smull	r1, r2, r2, r3
 80030f4:	1192      	asrs	r2, r2, #6
 80030f6:	17db      	asrs	r3, r3, #31
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8003100:	4b16      	ldr	r3, [pc, #88]	@ (800315c <imu_calibrate+0xe4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <imu_calibrate+0xe8>)
 8003106:	fb82 1203 	smull	r1, r2, r2, r3
 800310a:	1192      	asrs	r2, r2, #6
 800310c:	17db      	asrs	r3, r3, #31
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b21a      	sxth	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8003116:	4b11      	ldr	r3, [pc, #68]	@ (800315c <imu_calibrate+0xe4>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4a11      	ldr	r2, [pc, #68]	@ (8003160 <imu_calibrate+0xe8>)
 800311c:	fb82 1203 	smull	r1, r2, r2, r3
 8003120:	1192      	asrs	r2, r2, #6
 8003122:	17db      	asrs	r3, r3, #31
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	b21a      	sxth	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <imu_calibrate+0xec>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <imu_calibrate+0xf0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4413      	add	r3, r2
 800313a:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <imu_calibrate+0xe8>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <imu_calibrate+0xf4>)
 8003144:	6013      	str	r3, [r2, #0]
}
 8003146:	bf00      	nop
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200006b8 	.word	0x200006b8
 8003154:	200006bc 	.word	0x200006bc
 8003158:	200006c0 	.word	0x200006c0
 800315c:	20000704 	.word	0x20000704
 8003160:	10624dd3 	.word	0x10624dd3
 8003164:	20000724 	.word	0x20000724
 8003168:	20000728 	.word	0x20000728
 800316c:	20000700 	.word	0x20000700

08003170 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,const float dt){
 8003170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003174:	ed2d 8b02 	vpush	{d8}
 8003178:	b0a8      	sub	sp, #160	@ 0xa0
 800317a:	af00      	add	r7, sp, #0
 800317c:	4604      	mov	r4, r0
 800317e:	4608      	mov	r0, r1
 8003180:	4611      	mov	r1, r2
 8003182:	461a      	mov	r2, r3
 8003184:	ed87 0a01 	vstr	s0, [r7, #4]
 8003188:	4623      	mov	r3, r4
 800318a:	81fb      	strh	r3, [r7, #14]
 800318c:	4603      	mov	r3, r0
 800318e:	81bb      	strh	r3, [r7, #12]
 8003190:	460b      	mov	r3, r1
 8003192:	817b      	strh	r3, [r7, #10]
 8003194:	4613      	mov	r3, r2
 8003196:	813b      	strh	r3, [r7, #8]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;


	gx = (gx_/config.gyr_lsb) * RAD;
 8003198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031a4:	4be5      	ldr	r3, [pc, #916]	@ (800353c <update_ahrs+0x3cc>)
 80031a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80031aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ae:	ed9f 7ae4 	vldr	s14, [pc, #912]	@ 8003540 <update_ahrs+0x3d0>
 80031b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	gy = (gy_/config.gyr_lsb) * RAD;
 80031ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031c6:	4bdd      	ldr	r3, [pc, #884]	@ (800353c <update_ahrs+0x3cc>)
 80031c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80031cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d0:	ed9f 7adb 	vldr	s14, [pc, #876]	@ 8003540 <update_ahrs+0x3d0>
 80031d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d8:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	gz = (gz_/config.gyr_lsb) * RAD;
 80031dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031e8:	4bd4      	ldr	r3, [pc, #848]	@ (800353c <update_ahrs+0x3cc>)
 80031ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80031ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f2:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8003540 <update_ahrs+0x3d0>
 80031f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031fa:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 80031fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <update_ahrs+0xa8>
 8003206:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <update_ahrs+0xa8>
 800320e:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 820f 	beq.w	8003636 <update_ahrs+0x4c6>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 8003218:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800321c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003220:	fb03 f202 	mul.w	r2, r3, r2
 8003224:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003228:	f9b7 10c0 	ldrsh.w	r1, [r7, #192]	@ 0xc0
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	441a      	add	r2, r3
 8003232:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003236:	f9b7 10c4 	ldrsh.w	r1, [r7, #196]	@ 0xc4
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	eeb0 0a67 	vmov.f32	s0, s15
 800324c:	f000 fed8 	bl	8004000 <invSqrt_>
 8003250:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
		acc_x = (float)accx_ * norm;
 8003254:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003260:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		acc_y = (float)accy_ * norm;
 800326c:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003278:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800327c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003280:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		acc_z = (float)accz_ * norm;
 8003284:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003290:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003298:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

		if(reset_state){
 800329c:	4ba9      	ldr	r3, [pc, #676]	@ (8003544 <update_ahrs+0x3d4>)
 800329e:	f993 3000 	ldrsb.w	r3, [r3]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <update_ahrs+0x154>
			dcm[0][2] = acc_x;
 80032a6:	4aa8      	ldr	r2, [pc, #672]	@ (8003548 <update_ahrs+0x3d8>)
 80032a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ac:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 80032ae:	4aa6      	ldr	r2, [pc, #664]	@ (8003548 <update_ahrs+0x3d8>)
 80032b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032b4:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 80032b6:	4aa4      	ldr	r2, [pc, #656]	@ (8003548 <update_ahrs+0x3d8>)
 80032b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032bc:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 80032be:	4ba1      	ldr	r3, [pc, #644]	@ (8003544 <update_ahrs+0x3d4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 80032c4:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 80032c8:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	@ 0xc8
 80032cc:	fb03 f202 	mul.w	r2, r3, r2
 80032d0:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 80032d4:	f9b7 10cc 	ldrsh.w	r1, [r7, #204]	@ 0xcc
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	441a      	add	r2, r3
 80032de:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80032e2:	f9b7 10d0 	ldrsh.w	r1, [r7, #208]	@ 0xd0
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	ee07 3a90 	vmov	s15, r3
 80032f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	f000 fe82 	bl	8004000 <invSqrt_>
 80032fc:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
			mx = magx * norm;
 8003300:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003314:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
			my = magy * norm;
 8003318:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003324:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
			mz = magz * norm;
 8003330:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800333c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003344:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 8003348:	4b7f      	ldr	r3, [pc, #508]	@ (8003548 <update_ahrs+0x3d8>)
 800334a:	ed93 7a00 	vldr	s14, [r3]
 800334e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003356:	4b7c      	ldr	r3, [pc, #496]	@ (8003548 <update_ahrs+0x3d8>)
 8003358:	edd3 6a03 	vldr	s13, [r3, #12]
 800335c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003368:	4b77      	ldr	r3, [pc, #476]	@ (8003548 <update_ahrs+0x3d8>)
 800336a:	edd3 6a06 	vldr	s13, [r3, #24]
 800336e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 800337e:	4b72      	ldr	r3, [pc, #456]	@ (8003548 <update_ahrs+0x3d8>)
 8003380:	ed93 7a01 	vldr	s14, [r3, #4]
 8003384:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800338c:	4b6e      	ldr	r3, [pc, #440]	@ (8003548 <update_ahrs+0x3d8>)
 800338e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003392:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800339a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339e:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <update_ahrs+0x3d8>)
 80033a0:	edd3 6a07 	vldr	s13, [r3, #28]
 80033a4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80033a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <update_ahrs+0x3d8>)
 80033b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80033ba:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80033be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c2:	4b61      	ldr	r3, [pc, #388]	@ (8003548 <update_ahrs+0x3d8>)
 80033c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80033c8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80033cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <update_ahrs+0x3d8>)
 80033d6:	edd3 6a08 	vldr	s13, [r3, #32]
 80033da:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80033de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

			bx = sqrtf(hx * hx + hy * hy);
 80033ea:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80033ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80033f2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80033f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003402:	f011 fdd1 	bl	8014fa8 <sqrtf>
 8003406:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 800340a:	4b4f      	ldr	r3, [pc, #316]	@ (8003548 <update_ahrs+0x3d8>)
 800340c:	ed93 7a00 	vldr	s14, [r3]
 8003410:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003418:	4b4b      	ldr	r3, [pc, #300]	@ (8003548 <update_ahrs+0x3d8>)
 800341a:	edd3 6a02 	vldr	s13, [r3, #8]
 800341e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 800342e:	4b46      	ldr	r3, [pc, #280]	@ (8003548 <update_ahrs+0x3d8>)
 8003430:	ed93 7a03 	vldr	s14, [r3, #12]
 8003434:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800343c:	4b42      	ldr	r3, [pc, #264]	@ (8003548 <update_ahrs+0x3d8>)
 800343e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003442:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			emz = mx * wy - my * wx;
 8003452:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003456:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800345a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345e:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8003462:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800346a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800346e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8003472:	4b35      	ldr	r3, [pc, #212]	@ (8003548 <update_ahrs+0x3d8>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	657b      	str	r3, [r7, #84]	@ 0x54
		vy = dcm[1][2];
 8003478:	4b33      	ldr	r3, [pc, #204]	@ (8003548 <update_ahrs+0x3d8>)
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	653b      	str	r3, [r7, #80]	@ 0x50
		vz = dcm[2][2];
 800347e:	4b32      	ldr	r3, [pc, #200]	@ (8003548 <update_ahrs+0x3d8>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c

		ex = acc_y * vz - acc_z * vy;
 8003484:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8003488:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800348c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003490:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8003494:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800349c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		ey = acc_z * vx - acc_x * vz;
 80034a4:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80034a8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80034ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b0:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80034b4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80034b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		ez = acc_x * vy - acc_y * vx;
 80034c4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80034c8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80034cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d0:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80034d4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80034d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

		if( Ki_imu  > 0.0f) {
 80034e4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003554 <update_ahrs+0x3e4>
 80034e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	dd66      	ble.n	80035c0 <update_ahrs+0x450>
			integralFBx +=  Ki_imu  * ex * dt;
 80034f2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003554 <update_ahrs+0x3e4>
 80034f6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80034fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003506:	4b11      	ldr	r3, [pc, #68]	@ (800354c <update_ahrs+0x3dc>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003510:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <update_ahrs+0x3dc>)
 8003512:	edc3 7a00 	vstr	s15, [r3]
			integralFBy +=  Ki_imu  * ey * dt;
 8003516:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003554 <update_ahrs+0x3e4>
 800351a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800351e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003522:	edd7 7a01 	vldr	s15, [r7, #4]
 8003526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352a:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <update_ahrs+0x3e0>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <update_ahrs+0x3e0>)
 8003536:	edc3 7a00 	vstr	s15, [r3]
 800353a:	e00d      	b.n	8003558 <update_ahrs+0x3e8>
 800353c:	2000000c 	.word	0x2000000c
 8003540:	3c8efa35 	.word	0x3c8efa35
 8003544:	20000018 	.word	0x20000018
 8003548:	200006dc 	.word	0x200006dc
 800354c:	200006b8 	.word	0x200006b8
 8003550:	200006bc 	.word	0x200006bc
 8003554:	00000000 	.word	0x00000000
			integralFBz +=  Ki_imu  * ez * dt;
 8003558:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8003554 <update_ahrs+0x3e4>
 800355c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003564:	edd7 7a01 	vldr	s15, [r7, #4]
 8003568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <update_ahrs+0x444>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003576:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <update_ahrs+0x444>)
 8003578:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;
 800357c:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <update_ahrs+0x448>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8003586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
			gy += integralFBy;
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <update_ahrs+0x44c>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
			gz += integralFBz;
 80035a0:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <update_ahrs+0x444>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80035aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ae:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80035b2:	e011      	b.n	80035d8 <update_ahrs+0x468>
 80035b4:	200006c0 	.word	0x200006c0
 80035b8:	200006b8 	.word	0x200006b8
 80035bc:	200006bc 	.word	0x200006bc
		} else {
			integralFBx = 0.0f;
 80035c0:	4bdc      	ldr	r3, [pc, #880]	@ (8003934 <update_ahrs+0x7c4>)
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80035c8:	4bdb      	ldr	r3, [pc, #876]	@ (8003938 <update_ahrs+0x7c8>)
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80035d0:	4bda      	ldr	r3, [pc, #872]	@ (800393c <update_ahrs+0x7cc>)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 80035d8:	4bd9      	ldr	r3, [pc, #868]	@ (8003940 <update_ahrs+0x7d0>)
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80035e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e6:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80035ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ee:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		gy += Kp_imu * ey;
 80035f2:	4bd3      	ldr	r3, [pc, #844]	@ (8003940 <update_ahrs+0x7d0>)
 80035f4:	ed93 7a00 	vldr	s14, [r3]
 80035f8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80035fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003600:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003608:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		gz += Kp_imu * ez + emz * Kp_mag;
 800360c:	4bcc      	ldr	r3, [pc, #816]	@ (8003940 <update_ahrs+0x7d0>)
 800360e:	ed93 7a00 	vldr	s14, [r3]
 8003612:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800361a:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800361e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800362e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003632:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	}

	gx *= (0.5f * dt);
 8003636:	edd7 7a01 	vldr	s15, [r7, #4]
 800363a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800363e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003642:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	gy *= (0.5f * dt);
 800364e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003652:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800365a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003662:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	gz *= (0.5f * dt);
 8003666:	edd7 7a01 	vldr	s15, [r7, #4]
 800366a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800366e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003672:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 800367e:	4bb1      	ldr	r3, [pc, #708]	@ (8003944 <update_ahrs+0x7d4>)
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	eeb1 7a67 	vneg.f32	s14, s15
 8003688:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800368c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003690:	4bad      	ldr	r3, [pc, #692]	@ (8003948 <update_ahrs+0x7d8>)
 8003692:	edd3 6a00 	vldr	s13, [r3]
 8003696:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800369a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800369e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a2:	4baa      	ldr	r3, [pc, #680]	@ (800394c <update_ahrs+0x7dc>)
 80036a4:	edd3 6a00 	vldr	s13, [r3]
 80036a8:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80036ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b4:	4ba6      	ldr	r3, [pc, #664]	@ (8003950 <update_ahrs+0x7e0>)
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036be:	4ba4      	ldr	r3, [pc, #656]	@ (8003950 <update_ahrs+0x7e0>)
 80036c0:	edc3 7a00 	vstr	s15, [r3]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 80036c4:	4ba2      	ldr	r3, [pc, #648]	@ (8003950 <update_ahrs+0x7e0>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80036ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d2:	4b9d      	ldr	r3, [pc, #628]	@ (8003948 <update_ahrs+0x7d8>)
 80036d4:	edd3 6a00 	vldr	s13, [r3]
 80036d8:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80036dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036e4:	4b99      	ldr	r3, [pc, #612]	@ (800394c <update_ahrs+0x7dc>)
 80036e6:	edd3 6a00 	vldr	s13, [r3]
 80036ea:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80036ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f6:	4b93      	ldr	r3, [pc, #588]	@ (8003944 <update_ahrs+0x7d4>)
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003700:	4b90      	ldr	r3, [pc, #576]	@ (8003944 <update_ahrs+0x7d4>)
 8003702:	edc3 7a00 	vstr	s15, [r3]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8003706:	4b92      	ldr	r3, [pc, #584]	@ (8003950 <update_ahrs+0x7e0>)
 8003708:	ed93 7a00 	vldr	s14, [r3]
 800370c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003714:	4b8b      	ldr	r3, [pc, #556]	@ (8003944 <update_ahrs+0x7d4>)
 8003716:	edd3 6a00 	vldr	s13, [r3]
 800371a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800371e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003726:	4b89      	ldr	r3, [pc, #548]	@ (800394c <update_ahrs+0x7dc>)
 8003728:	edd3 6a00 	vldr	s13, [r3]
 800372c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003738:	4b83      	ldr	r3, [pc, #524]	@ (8003948 <update_ahrs+0x7d8>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003742:	4b81      	ldr	r3, [pc, #516]	@ (8003948 <update_ahrs+0x7d8>)
 8003744:	edc3 7a00 	vstr	s15, [r3]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8003748:	4b81      	ldr	r3, [pc, #516]	@ (8003950 <update_ahrs+0x7e0>)
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003756:	4b7b      	ldr	r3, [pc, #492]	@ (8003944 <update_ahrs+0x7d4>)
 8003758:	edd3 6a00 	vldr	s13, [r3]
 800375c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003768:	4b77      	ldr	r3, [pc, #476]	@ (8003948 <update_ahrs+0x7d8>)
 800376a:	edd3 6a00 	vldr	s13, [r3]
 800376e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003776:	ee37 7a67 	vsub.f32	s14, s14, s15
 800377a:	4b74      	ldr	r3, [pc, #464]	@ (800394c <update_ahrs+0x7dc>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003784:	4b71      	ldr	r3, [pc, #452]	@ (800394c <update_ahrs+0x7dc>)
 8003786:	edc3 7a00 	vstr	s15, [r3]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800378a:	4b71      	ldr	r3, [pc, #452]	@ (8003950 <update_ahrs+0x7e0>)
 800378c:	ed93 7a00 	vldr	s14, [r3]
 8003790:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <update_ahrs+0x7e0>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800379a:	4b6a      	ldr	r3, [pc, #424]	@ (8003944 <update_ahrs+0x7d4>)
 800379c:	edd3 6a00 	vldr	s13, [r3]
 80037a0:	4b68      	ldr	r3, [pc, #416]	@ (8003944 <update_ahrs+0x7d4>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ae:	4b66      	ldr	r3, [pc, #408]	@ (8003948 <update_ahrs+0x7d8>)
 80037b0:	edd3 6a00 	vldr	s13, [r3]
 80037b4:	4b64      	ldr	r3, [pc, #400]	@ (8003948 <update_ahrs+0x7d8>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c2:	4b62      	ldr	r3, [pc, #392]	@ (800394c <update_ahrs+0x7dc>)
 80037c4:	edd3 6a00 	vldr	s13, [r3]
 80037c8:	4b60      	ldr	r3, [pc, #384]	@ (800394c <update_ahrs+0x7dc>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	eeb0 0a67 	vmov.f32	s0, s15
 80037da:	f000 fc11 	bl	8004000 <invSqrt_>
 80037de:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
	q0 *= norm;
 80037e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003950 <update_ahrs+0x7e0>)
 80037e4:	ed93 7a00 	vldr	s14, [r3]
 80037e8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	4b57      	ldr	r3, [pc, #348]	@ (8003950 <update_ahrs+0x7e0>)
 80037f2:	edc3 7a00 	vstr	s15, [r3]
	q1 *= norm;
 80037f6:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <update_ahrs+0x7d4>)
 80037f8:	ed93 7a00 	vldr	s14, [r3]
 80037fc:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003804:	4b4f      	ldr	r3, [pc, #316]	@ (8003944 <update_ahrs+0x7d4>)
 8003806:	edc3 7a00 	vstr	s15, [r3]
	q2 *= norm;
 800380a:	4b4f      	ldr	r3, [pc, #316]	@ (8003948 <update_ahrs+0x7d8>)
 800380c:	ed93 7a00 	vldr	s14, [r3]
 8003810:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003818:	4b4b      	ldr	r3, [pc, #300]	@ (8003948 <update_ahrs+0x7d8>)
 800381a:	edc3 7a00 	vstr	s15, [r3]
	q3 *= norm;
 800381e:	4b4b      	ldr	r3, [pc, #300]	@ (800394c <update_ahrs+0x7dc>)
 8003820:	ed93 7a00 	vldr	s14, [r3]
 8003824:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382c:	4b47      	ldr	r3, [pc, #284]	@ (800394c <update_ahrs+0x7dc>)
 800382e:	edc3 7a00 	vstr	s15, [r3]
	
	float q0q1 = q0*q1;
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <update_ahrs+0x7e0>)
 8003834:	ed93 7a00 	vldr	s14, [r3]
 8003838:	4b42      	ldr	r3, [pc, #264]	@ (8003944 <update_ahrs+0x7d4>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float q0q2 = q0*q2;
 8003846:	4b42      	ldr	r3, [pc, #264]	@ (8003950 <update_ahrs+0x7e0>)
 8003848:	ed93 7a00 	vldr	s14, [r3]
 800384c:	4b3e      	ldr	r3, [pc, #248]	@ (8003948 <update_ahrs+0x7d8>)
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	float q0q3 = q0*q3;
 800385a:	4b3d      	ldr	r3, [pc, #244]	@ (8003950 <update_ahrs+0x7e0>)
 800385c:	ed93 7a00 	vldr	s14, [r3]
 8003860:	4b3a      	ldr	r3, [pc, #232]	@ (800394c <update_ahrs+0x7dc>)
 8003862:	edd3 7a00 	vldr	s15, [r3]
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float q1q1 = q1*q1;
 800386e:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <update_ahrs+0x7d4>)
 8003870:	ed93 7a00 	vldr	s14, [r3]
 8003874:	4b33      	ldr	r3, [pc, #204]	@ (8003944 <update_ahrs+0x7d4>)
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float q1q2 = q1*q2;
 8003882:	4b30      	ldr	r3, [pc, #192]	@ (8003944 <update_ahrs+0x7d4>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <update_ahrs+0x7d8>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003892:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float q1q3 = q1*q3;
 8003896:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <update_ahrs+0x7d4>)
 8003898:	ed93 7a00 	vldr	s14, [r3]
 800389c:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <update_ahrs+0x7dc>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float q2q2 = q2*q2;
 80038aa:	4b27      	ldr	r3, [pc, #156]	@ (8003948 <update_ahrs+0x7d8>)
 80038ac:	ed93 7a00 	vldr	s14, [r3]
 80038b0:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <update_ahrs+0x7d8>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float q2q3 = q2*q3;
 80038be:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <update_ahrs+0x7d8>)
 80038c0:	ed93 7a00 	vldr	s14, [r3]
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <update_ahrs+0x7dc>)
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a08 	vstr	s15, [r7, #32]
	float q3q3 = q3*q3;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <update_ahrs+0x7dc>)
 80038d4:	ed93 7a00 	vldr	s14, [r3]
 80038d8:	4b1c      	ldr	r3, [pc, #112]	@ (800394c <update_ahrs+0x7dc>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e2:	edc7 7a07 	vstr	s15, [r7, #28]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 80038e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80038f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <update_ahrs+0x7e4>)
 8003900:	edc3 7a00 	vstr	s15, [r3]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8003904:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003908:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800390c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003910:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003914:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <update_ahrs+0x7e4>)
 8003916:	edc3 7a03 	vstr	s15, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 800391a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800391e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003926:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <update_ahrs+0x7e4>)
 800392c:	edc3 7a06 	vstr	s15, [r3, #24]
 8003930:	e012      	b.n	8003958 <update_ahrs+0x7e8>
 8003932:	bf00      	nop
 8003934:	200006b8 	.word	0x200006b8
 8003938:	200006bc 	.word	0x200006bc
 800393c:	200006c0 	.word	0x200006c0
 8003940:	20000004 	.word	0x20000004
 8003944:	200006d0 	.word	0x200006d0
 8003948:	200006d4 	.word	0x200006d4
 800394c:	200006d8 	.word	0x200006d8
 8003950:	20000008 	.word	0x20000008
 8003954:	200006dc 	.word	0x200006dc
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8003958:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800395c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003964:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003968:	4bd9      	ldr	r3, [pc, #868]	@ (8003cd0 <update_ahrs+0xb60>)
 800396a:	edc3 7a01 	vstr	s15, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 800396e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003972:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003976:	ee37 7a67 	vsub.f32	s14, s14, s15
 800397a:	edd7 7a07 	vldr	s15, [r7, #28]
 800397e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003982:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003986:	4bd2      	ldr	r3, [pc, #840]	@ (8003cd0 <update_ahrs+0xb60>)
 8003988:	edc3 7a04 	vstr	s15, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800398c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003990:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003998:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800399c:	4bcc      	ldr	r3, [pc, #816]	@ (8003cd0 <update_ahrs+0xb60>)
 800399e:	edc3 7a07 	vstr	s15, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 80039a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80039a6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80039aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039b2:	4bc7      	ldr	r3, [pc, #796]	@ (8003cd0 <update_ahrs+0xb60>)
 80039b4:	edc3 7a02 	vstr	s15, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 80039b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80039bc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039c8:	4bc1      	ldr	r3, [pc, #772]	@ (8003cd0 <update_ahrs+0xb60>)
 80039ca:	edc3 7a05 	vstr	s15, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 80039ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039d2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80039d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039da:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80039de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039e6:	4bba      	ldr	r3, [pc, #744]	@ (8003cd0 <update_ahrs+0xb60>)
 80039e8:	edc3 7a08 	vstr	s15, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 80039ec:	4bb8      	ldr	r3, [pc, #736]	@ (8003cd0 <update_ahrs+0xb60>)
 80039ee:	ed93 7a00 	vldr	s14, [r3]
 80039f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a02:	4bb3      	ldr	r3, [pc, #716]	@ (8003cd0 <update_ahrs+0xb60>)
 8003a04:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a08:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a1c:	4bac      	ldr	r3, [pc, #688]	@ (8003cd0 <update_ahrs+0xb60>)
 8003a1e:	edd3 6a06 	vldr	s13, [r3, #24]
 8003a22:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a3a:	ee17 3a90 	vmov	r3, s15
 8003a3e:	837b      	strh	r3, [r7, #26]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 8003a40:	4ba3      	ldr	r3, [pc, #652]	@ (8003cd0 <update_ahrs+0xb60>)
 8003a42:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a56:	4b9e      	ldr	r3, [pc, #632]	@ (8003cd0 <update_ahrs+0xb60>)
 8003a58:	edd3 6a04 	vldr	s13, [r3, #16]
 8003a5c:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a70:	4b97      	ldr	r3, [pc, #604]	@ (8003cd0 <update_ahrs+0xb60>)
 8003a72:	edd3 6a07 	vldr	s13, [r3, #28]
 8003a76:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a8e:	ee17 3a90 	vmov	r3, s15
 8003a92:	833b      	strh	r3, [r7, #24]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 8003a94:	4b8e      	ldr	r3, [pc, #568]	@ (8003cd0 <update_ahrs+0xb60>)
 8003a96:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aaa:	4b89      	ldr	r3, [pc, #548]	@ (8003cd0 <update_ahrs+0xb60>)
 8003aac:	edd3 6a05 	vldr	s13, [r3, #20]
 8003ab0:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ac4:	4b82      	ldr	r3, [pc, #520]	@ (8003cd0 <update_ahrs+0xb60>)
 8003ac6:	edd3 6a08 	vldr	s13, [r3, #32]
 8003aca:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae2:	ee17 3a90 	vmov	r3, s15
 8003ae6:	82fb      	strh	r3, [r7, #22]
	acc_Eframez -= 2000;
 8003ae8:	8afb      	ldrh	r3, [r7, #22]
 8003aea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	82fb      	strh	r3, [r7, #22]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 8003af2:	4b78      	ldr	r3, [pc, #480]	@ (8003cd4 <update_ahrs+0xb64>)
 8003af4:	613b      	str	r3, [r7, #16]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 8003af6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b02:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0a:	4b73      	ldr	r3, [pc, #460]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b0c:	edc3 7a00 	vstr	s15, [r3]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 8003b10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b26:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 8003b2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b36:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b40:	edc3 7a02 	vstr	s15, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 8003b44:	4b64      	ldr	r3, [pc, #400]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8003cdc <update_ahrs+0xb6c>
 8003b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b52:	f000 fa23 	bl	8003f9c <fapplyDeadband>
 8003b56:	eef0 7a40 	vmov.f32	s15, s0
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b5c:	edc3 7a00 	vstr	s15, [r3]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 8003b60:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b66:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8003cdc <update_ahrs+0xb6c>
 8003b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6e:	f000 fa15 	bl	8003f9c <fapplyDeadband>
 8003b72:	eef0 7a40 	vmov.f32	s15, s0
 8003b76:	4b58      	ldr	r3, [pc, #352]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b78:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 8003b7c:	4b56      	ldr	r3, [pc, #344]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b82:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8003cdc <update_ahrs+0xb6c>
 8003b86:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8a:	f000 fa07 	bl	8003f9c <fapplyDeadband>
 8003b8e:	eef0 7a40 	vmov.f32	s15, s0
 8003b92:	4b51      	ldr	r3, [pc, #324]	@ (8003cd8 <update_ahrs+0xb68>)
 8003b94:	edc3 7a02 	vstr	s15, [r3, #8]

    if(millis() - init_us < 5000){
 8003b98:	4b51      	ldr	r3, [pc, #324]	@ (8003ce0 <update_ahrs+0xb70>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ba0:	4b50      	ldr	r3, [pc, #320]	@ (8003ce4 <update_ahrs+0xb74>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a50      	ldr	r2, [pc, #320]	@ (8003ce8 <update_ahrs+0xb78>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	099a      	lsrs	r2, r3, #6
 8003bae:	4b4f      	ldr	r3, [pc, #316]	@ (8003cec <update_ahrs+0xb7c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d80b      	bhi.n	8003bd4 <update_ahrs+0xa64>
    	acc_Eframe[X] = 0;
 8003bbc:	4b46      	ldr	r3, [pc, #280]	@ (8003cd8 <update_ahrs+0xb68>)
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 8003bc4:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <update_ahrs+0xb68>)
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 8003bcc:	4b42      	ldr	r3, [pc, #264]	@ (8003cd8 <update_ahrs+0xb68>)
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
    }

	position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;
 8003bd4:	4b46      	ldr	r3, [pc, #280]	@ (8003cf0 <update_ahrs+0xb80>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fc5d 	bl	8000498 <__aeabi_f2d>
 8003bde:	4604      	mov	r4, r0
 8003be0:	460d      	mov	r5, r1
 8003be2:	4b44      	ldr	r3, [pc, #272]	@ (8003cf4 <update_ahrs+0xb84>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003cf8 <update_ahrs+0xb88>
 8003bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf0:	ee17 0a90 	vmov	r0, s15
 8003bf4:	f7fc fc50 	bl	8000498 <__aeabi_f2d>
 8003bf8:	4680      	mov	r8, r0
 8003bfa:	4689      	mov	r9, r1
 8003bfc:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <update_ahrs+0xb68>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fc49 	bl	8000498 <__aeabi_f2d>
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003cfc <update_ahrs+0xb8c>)
 8003c0c:	f7fc fc9c 	bl	8000548 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	a32b      	add	r3, pc, #172	@ (adr r3, 8003cc8 <update_ahrs+0xb58>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f7fc fc93 	bl	8000548 <__aeabi_dmul>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	a327      	add	r3, pc, #156	@ (adr r3, 8003cc8 <update_ahrs+0xb58>)
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f7fc fc8a 	bl	8000548 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4640      	mov	r0, r8
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	f7fc face 	bl	80001dc <__adddf3>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	f7fc fac8 	bl	80001dc <__adddf3>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	f7fc ff50 	bl	8000af8 <__aeabi_d2f>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a25      	ldr	r2, [pc, #148]	@ (8003cf0 <update_ahrs+0xb80>)
 8003c5c:	6013      	str	r3, [r2, #0]
	velocity_test += acc_Eframe[Z]*0.01f;
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <update_ahrs+0xb68>)
 8003c60:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c64:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003cf8 <update_ahrs+0xb88>
 8003c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c6c:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <update_ahrs+0xb84>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c76:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <update_ahrs+0xb84>)
 8003c78:	edc3 7a00 	vstr	s15, [r3]

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;// - pitch_trim_imu;
 8003c7c:	4b14      	ldr	r3, [pc, #80]	@ (8003cd0 <update_ahrs+0xb60>)
 8003c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c82:	eeb1 8a67 	vneg.f32	s16, s15
 8003c86:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <update_ahrs+0xb60>)
 8003c88:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c8c:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <update_ahrs+0xb60>)
 8003c8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	f011 f981 	bl	8014fa8 <sqrtf>
 8003ca6:	eef0 7a40 	vmov.f32	s15, s0
 8003caa:	eef0 0a67 	vmov.f32	s1, s15
 8003cae:	eeb0 0a48 	vmov.f32	s0, s16
 8003cb2:	f000 f8a9 	bl	8003e08 <atan2_approx>
 8003cb6:	eef0 7a40 	vmov.f32	s15, s0
 8003cba:	eef1 7a67 	vneg.f32	s15, s15
 8003cbe:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003d00 <update_ahrs+0xb90>
 8003cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc6:	e01d      	b.n	8003d04 <update_ahrs+0xb94>
 8003cc8:	40000000 	.word	0x40000000
 8003ccc:	3f847ae1 	.word	0x3f847ae1
 8003cd0:	200006dc 	.word	0x200006dc
 8003cd4:	3ba0ba20 	.word	0x3ba0ba20
 8003cd8:	200006c4 	.word	0x200006c4
 8003cdc:	3ca3d70a 	.word	0x3ca3d70a
 8003ce0:	20000724 	.word	0x20000724
 8003ce4:	20000728 	.word	0x20000728
 8003ce8:	10624dd3 	.word	0x10624dd3
 8003cec:	20000700 	.word	0x20000700
 8003cf0:	2000069c 	.word	0x2000069c
 8003cf4:	20000698 	.word	0x20000698
 8003cf8:	3c23d70a 	.word	0x3c23d70a
 8003cfc:	3fe00000 	.word	0x3fe00000
 8003d00:	42652ee0 	.word	0x42652ee0
 8003d04:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <update_ahrs+0xc84>)
 8003d06:	edc3 7a01 	vstr	s15, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;//  - roll_trim_imu;
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <update_ahrs+0xc88>)
 8003d0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d10:	eef1 7a67 	vneg.f32	s15, s15
 8003d14:	4b38      	ldr	r3, [pc, #224]	@ (8003df8 <update_ahrs+0xc88>)
 8003d16:	ed93 7a08 	vldr	s14, [r3, #32]
 8003d1a:	eef0 0a47 	vmov.f32	s1, s14
 8003d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d22:	f000 f871 	bl	8003e08 <atan2_approx>
 8003d26:	eef0 7a40 	vmov.f32	s15, s0
 8003d2a:	eef1 7a67 	vneg.f32	s15, s15
 8003d2e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003dfc <update_ahrs+0xc8c>
 8003d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d36:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <update_ahrs+0xc84>)
 8003d38:	edc3 7a00 	vstr	s15, [r3]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <update_ahrs+0xc88>)
 8003d3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d42:	4b2d      	ldr	r3, [pc, #180]	@ (8003df8 <update_ahrs+0xc88>)
 8003d44:	ed93 7a00 	vldr	s14, [r3]
 8003d48:	eef0 0a47 	vmov.f32	s1, s14
 8003d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d50:	f000 f85a 	bl	8003e08 <atan2_approx>
 8003d54:	eef0 7a40 	vmov.f32	s15, s0
 8003d58:	eef1 7a67 	vneg.f32	s15, s15
 8003d5c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003dfc <update_ahrs+0xc8c>
 8003d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d64:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	if(yaw_ < 0){
 8003d68:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	d507      	bpl.n	8003d86 <update_ahrs+0xc16>
		 yaw_ = 360 + yaw_;
 8003d76:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d7a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003e00 <update_ahrs+0xc90>
 8003d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d82:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	}
	AHRS.yaw =  yaw_;
 8003d86:	4a1b      	ldr	r2, [pc, #108]	@ (8003df4 <update_ahrs+0xc84>)
 8003d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d8c:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 8003d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <update_ahrs+0xc94>)
 8003d9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <update_ahrs+0xc84>)
 8003da6:	edc3 7a03 	vstr	s15, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 8003daa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dae:	425b      	negs	r3, r3
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <update_ahrs+0xc94>)
 8003dba:	ed93 7a02 	vldr	s14, [r3, #8]
 8003dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <update_ahrs+0xc84>)
 8003dc4:	edc3 7a04 	vstr	s15, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8003dc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dcc:	425b      	negs	r3, r3
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <update_ahrs+0xc94>)
 8003dd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de0:	4b04      	ldr	r3, [pc, #16]	@ (8003df4 <update_ahrs+0xc84>)
 8003de2:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8003de6:	bf00      	nop
 8003de8:	37a0      	adds	r7, #160	@ 0xa0
 8003dea:	46bd      	mov	sp, r7
 8003dec:	ecbd 8b02 	vpop	{d8}
 8003df0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003df4:	200006a0 	.word	0x200006a0
 8003df8:	200006dc 	.word	0x200006dc
 8003dfc:	42652ee0 	.word	0x42652ee0
 8003e00:	43b40000 	.word	0x43b40000
 8003e04:	2000000c 	.word	0x2000000c

08003e08 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b08b      	sub	sp, #44	@ 0x2c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e12:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8003e16:	edd7 7a00 	vldr	s15, [r7]
 8003e1a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e1e:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 8003e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e26:	eef0 7ae7 	vabs.f32	s15, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	dd01      	ble.n	8003e4c <atan2_approx+0x44>
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	e000      	b.n	8003e4e <atan2_approx+0x46>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8003e50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5c:	d018      	beq.n	8003e90 <atan2_approx+0x88>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	d502      	bpl.n	8003e7e <atan2_approx+0x76>
 8003e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e7c:	e001      	b.n	8003e82 <atan2_approx+0x7a>
 8003e7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003e86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e8a:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8003e8e:	e002      	b.n	8003e96 <atan2_approx+0x8e>
    else res = 0.0f;
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8003e96:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e9a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003f78 <atan2_approx+0x170>
 8003e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea2:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8003f7c <atan2_approx+0x174>
 8003ea6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003eaa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003f80 <atan2_approx+0x178>
 8003eb6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003eba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003f84 <atan2_approx+0x17c>
 8003ec6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003eca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003f88 <atan2_approx+0x180>
 8003ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eda:	eef1 6a67 	vneg.f32	s13, s15
 8003ede:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ee2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003f8c <atan2_approx+0x184>
 8003ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eea:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003f90 <atan2_approx+0x188>
 8003eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003f0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1a:	dd07      	ble.n	8003f2c <atan2_approx+0x124>
 8003f1c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003f94 <atan2_approx+0x18c>
 8003f20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 8003f2c:	edd7 7a00 	vldr	s15, [r7]
 8003f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	d507      	bpl.n	8003f4a <atan2_approx+0x142>
 8003f3a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003f98 <atan2_approx+0x190>
 8003f3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 8003f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d505      	bpl.n	8003f64 <atan2_approx+0x15c>
 8003f58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f5c:	eef1 7a67 	vneg.f32	s15, s15
 8003f60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	ee07 3a90 	vmov	s15, r3
}
 8003f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6e:	372c      	adds	r7, #44	@ 0x2c
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	3d4e0939 	.word	0x3d4e0939
 8003f7c:	3e9eb5e3 	.word	0x3e9eb5e3
 8003f80:	3e16fa88 	.word	0x3e16fa88
 8003f84:	3f7ffe45 	.word	0x3f7ffe45
 8003f88:	34a8dfa7 	.word	0x34a8dfa7
 8003f8c:	3f24fb99 	.word	0x3f24fb99
 8003f90:	3e16a269 	.word	0x3e16a269
 8003f94:	3fc90fdb 	.word	0x3fc90fdb
 8003f98:	40490fdb 	.word	0x40490fdb

08003f9c <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fa6:	edc7 0a00 	vstr	s1, [r7]
    if (fabsf(value) < deadband) {
 8003faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fae:	eef0 7ae7 	vabs.f32	s15, s15
 8003fb2:	ed97 7a00 	vldr	s14, [r7]
 8003fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	dd02      	ble.n	8003fc6 <fapplyDeadband+0x2a>
        return 0;
 8003fc0:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003ffc <fapplyDeadband+0x60>
 8003fc4:	e013      	b.n	8003fee <fapplyDeadband+0x52>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8003fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd2:	db06      	blt.n	8003fe2 <fapplyDeadband+0x46>
 8003fd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fd8:	edd7 7a00 	vldr	s15, [r7]
 8003fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fe0:	e005      	b.n	8003fee <fapplyDeadband+0x52>
 8003fe2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fe6:	edd7 7a00 	vldr	s15, [r7]
 8003fea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003fee:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	00000000 	.word	0x00000000

08004000 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800400a:	edd7 7a01 	vldr	s15, [r7, #4]
 800400e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004016:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800401e:	f107 0310 	add.w	r3, r7, #16
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	105a      	asrs	r2, r3, #1
 800402a:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <invSqrt_+0x74>)
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8004038:	ed97 7a04 	vldr	s14, [r7, #16]
 800403c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004044:	edd7 7a04 	vldr	s15, [r7, #16]
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004050:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004054:	edd7 7a04 	vldr	s15, [r7, #16]
 8004058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405c:	edc7 7a04 	vstr	s15, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	ee07 3a90 	vmov	s15, r3
}
 8004066:	eeb0 0a67 	vmov.f32	s0, s15
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	5f3759df 	.word	0x5f3759df

08004078 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004082:	edc7 0a02 	vstr	s1, [r7, #8]
 8004086:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 800408a:	ed97 7a03 	vldr	s14, [r7, #12]
 800408e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	d501      	bpl.n	80040a0 <constrainf+0x28>
        return low;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	e00b      	b.n	80040b8 <constrainf+0x40>
    else if (amt > high)
 80040a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80040a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b0:	dd01      	ble.n	80040b6 <constrainf+0x3e>
        return high;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	e000      	b.n	80040b8 <constrainf+0x40>
    else
        return amt;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eeb0 0a67 	vmov.f32	s0, s15
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80040d6:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 80040da:	edd7 7a01 	vldr	s15, [r7, #4]
 80040de:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004118 <pt1FilterGain+0x4c>
 80040e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ee:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 80040f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80040f6:	edd7 7a00 	vldr	s15, [r7]
 80040fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fe:	ed97 7a00 	vldr	s14, [r7]
 8004102:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004106:	eef0 7a66 	vmov.f32	s15, s13
}
 800410a:	eeb0 0a67 	vmov.f32	s0, s15
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40c90fdb 	.word	0x40c90fdb

0800411c <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_t  *pid_in,float kp, float ki, float kd,float f_cut_err, float f_cut_D, float maxI){
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	61f8      	str	r0, [r7, #28]
 8004124:	ed87 0a06 	vstr	s0, [r7, #24]
 8004128:	edc7 0a05 	vstr	s1, [r7, #20]
 800412c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004130:	edc7 1a03 	vstr	s3, [r7, #12]
 8004134:	ed87 2a02 	vstr	s4, [r7, #8]
 8004138:	edc7 2a01 	vstr	s5, [r7, #4]
  memset(pid_in,0,sizeof(pid_t));
 800413c:	222c      	movs	r2, #44	@ 0x2c
 800413e:	2100      	movs	r1, #0
 8004140:	69f8      	ldr	r0, [r7, #28]
 8004142:	f010 fe5b 	bl	8014dfc <memset>
  pid_in->err = 0.0f;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
  pid_in->err_fcut = f_cut_err;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]
  pid_in->kp = kp;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	609a      	str	r2, [r3, #8]
  pid_in->ki = ki;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	60da      	str	r2, [r3, #12]
  pid_in->kd = kd;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	611a      	str	r2, [r3, #16]
  pid_in->f_cut_D = f_cut_D;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_in->I_range = maxI;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]
  pid_in->last_input = 0;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	619a      	str	r2, [r3, #24]
  pid_in->D_filted = 0;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  pid_in->init = 1;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 800418a:	bf00      	nop
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <pid_calculate>:

float pid_calculate(pid_t *pid_in,float measurement, float setpoint,float scaler,float dt){
 8004192:	b580      	push	{r7, lr}
 8004194:	b08a      	sub	sp, #40	@ 0x28
 8004196:	af00      	add	r7, sp, #0
 8004198:	6178      	str	r0, [r7, #20]
 800419a:	ed87 0a04 	vstr	s0, [r7, #16]
 800419e:	edc7 0a03 	vstr	s1, [r7, #12]
 80041a2:	ed87 1a02 	vstr	s2, [r7, #8]
 80041a6:	edc7 1a01 	vstr	s3, [r7, #4]
   if(pid_in->init){
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <pid_calculate+0x36>
       pid_in->last_input = measurement;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	619a      	str	r2, [r3, #24]
       pid_in->init = 0;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
       return 0.0f;
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e0b5      	b.n	8004334 <pid_calculate+0x1a2>
   }
   // Caculate P term
   float error = setpoint - measurement;
 80041c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80041cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80041d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d4:	edc7 7a08 	vstr	s15, [r7, #32]
   pid_in->err += pt1FilterGain(pid_in->err_fcut,dt)*(error - pid_in->err);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	edd3 7a01 	vldr	s15, [r3, #4]
 80041de:	edd7 0a01 	vldr	s1, [r7, #4]
 80041e2:	eeb0 0a67 	vmov.f32	s0, s15
 80041e6:	f7ff ff71 	bl	80040cc <pt1FilterGain>
 80041ea:	eef0 6a40 	vmov.f32	s13, s0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	edd3 7a00 	vldr	s15, [r3]
 80041f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80041f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	edc3 7a00 	vstr	s15, [r3]
   float output = pid_in->err*pid_in->kp*scaler;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	ed93 7a00 	vldr	s14, [r3]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	edd3 7a02 	vldr	s15, [r3, #8]
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	ed97 7a02 	vldr	s14, [r7, #8]
 8004224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004228:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // Caculate I term
   if(pid_in->ki > 0){
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	dd34      	ble.n	80042a6 <pid_calculate+0x114>
      pid_in->i_term += pid_in->err *pid_in->ki *dt;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	edd3 6a00 	vldr	s13, [r3]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	edd3 7a03 	vldr	s15, [r3, #12]
 800424e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004252:	edd7 7a01 	vldr	s15, [r7, #4]
 8004256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800425a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	edc3 7a05 	vstr	s15, [r3, #20]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	ed93 7a05 	vldr	s14, [r3, #20]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004270:	eef1 7a67 	vneg.f32	s15, s15
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	edd3 6a08 	vldr	s13, [r3, #32]
 800427a:	eeb0 1a66 	vmov.f32	s2, s13
 800427e:	eef0 0a67 	vmov.f32	s1, s15
 8004282:	eeb0 0a47 	vmov.f32	s0, s14
 8004286:	f7ff fef7 	bl	8004078 <constrainf>
 800428a:	eef0 7a40 	vmov.f32	s15, s0
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	edc3 7a05 	vstr	s15, [r3, #20]
      output += pid_in->i_term;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	edd3 7a05 	vldr	s15, [r3, #20]
 800429a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800429e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
   }
   // Caculate D term
   if(pid_in->kd > 0){
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80042ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b4:	dd3d      	ble.n	8004332 <pid_calculate+0x1a0>
        float delta =  (measurement - pid_in->last_input)*pid_in->kd/dt;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80042bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80042c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80042ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80042ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80042d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d6:	edc7 7a07 	vstr	s15, [r7, #28]
        pid_in->last_input = measurement;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
        // low pass filter
        pid_in->D_filted += pt1FilterGain(pid_in->f_cut_D,dt)*(delta - pid_in->D_filted);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80042e6:	edd7 0a01 	vldr	s1, [r7, #4]
 80042ea:	eeb0 0a67 	vmov.f32	s0, s15
 80042ee:	f7ff feed 	bl	80040cc <pt1FilterGain>
 80042f2:	eef0 6a40 	vmov.f32	s13, s0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80042fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8004300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004304:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	edd3 7a07 	vldr	s15, [r3, #28]
 800430e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	edc3 7a07 	vstr	s15, [r3, #28]
        output -= pid_in->D_filted*scaler;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	ed93 7a07 	vldr	s14, [r3, #28]
 800431e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800432a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
   }
   return output;
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eeb0 0a67 	vmov.f32	s0, s15
 800433c:	3728      	adds	r7, #40	@ 0x28
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <constrain>:
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	da01      	bge.n	800435a <constrain+0x18>
        return low;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	e006      	b.n	8004368 <constrain+0x26>
    else if (amt > high)
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	dd01      	ble.n	8004366 <constrain+0x24>
        return high;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	e000      	b.n	8004368 <constrain+0x26>
        return amt;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	htimm = htim;
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <initPWM+0x7c>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8004382:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <initPWM+0x80>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8004388:	4b1b      	ldr	r3, [pc, #108]	@ (80043f8 <initPWM+0x84>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 800438e:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <initPWM+0x88>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8004394:	2100      	movs	r1, #0
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f007 f980 	bl	800b69c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 800439c:	2104      	movs	r1, #4
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f007 f97c 	bl	800b69c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80043a4:	2108      	movs	r1, #8
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f007 f978 	bl	800b69c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80043ac:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <initPWM+0x7c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043b8:	4b0d      	ldr	r3, [pc, #52]	@ (80043f0 <initPWM+0x7c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80043c0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <initPWM+0x7c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043cc:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80043ce:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <initPWM+0x7c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80043d8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <initPWM+0x7c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80043e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000710 	.word	0x20000710
 80043f4:	20000718 	.word	0x20000718
 80043f8:	20000719 	.word	0x20000719
 80043fc:	20000714 	.word	0x20000714

08004400 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
 8004410:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <writePwm+0x2c>
	    dulty -= 1000;
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800441e:	b29b      	uxth	r3, r3
 8004420:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8004428:	b29b      	uxth	r3, r3
 800442a:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 800442c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004430:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004434:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff82 	bl	8004342 <constrain>
 800443e:	4603      	mov	r3, r0
 8004440:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <writePwm+0x56>
 8004448:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <writePwm+0x94>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004452:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004454:	e019      	b.n	800448a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d106      	bne.n	800446a <writePwm+0x6a>
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <writePwm+0x94>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004466:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004468:	e00f      	b.n	800448a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d106      	bne.n	800447e <writePwm+0x7e>
 8004470:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <writePwm+0x94>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800447a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800447c:	e005      	b.n	800448a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <writePwm+0x94>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004488:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000710 	.word	0x20000710

08004498 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
 80044a2:	460b      	mov	r3, r1
 80044a4:	80bb      	strh	r3, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 80044aa:	4b17      	ldr	r3, [pc, #92]	@ (8004508 <write_pwm_ctrl+0x70>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <write_pwm_ctrl+0x22>
 80044b2:	4b16      	ldr	r3, [pc, #88]	@ (800450c <write_pwm_ctrl+0x74>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 80044ba:	f002 fd01 	bl	8006ec0 <HAL_GetTick>
 80044be:	4603      	mov	r3, r0
 80044c0:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <write_pwm_ctrl+0x78>)
 80044c2:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 80044c4:	4b10      	ldr	r3, [pc, #64]	@ (8004508 <write_pwm_ctrl+0x70>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
		   return;
 80044ca:	e019      	b.n	8004500 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 80044cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4619      	mov	r1, r3
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7ff ff93 	bl	8004400 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 80044da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	4619      	mov	r1, r3
 80044e2:	2004      	movs	r0, #4
 80044e4:	f7ff ff8c 	bl	8004400 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 80044e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044ec:	2200      	movs	r2, #0
 80044ee:	4619      	mov	r1, r3
 80044f0:	2008      	movs	r0, #8
 80044f2:	f7ff ff85 	bl	8004400 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 80044f6:	f002 fce3 	bl	8006ec0 <HAL_GetTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <write_pwm_ctrl+0x78>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000718 	.word	0x20000718
 800450c:	20000719 	.word	0x20000719
 8004510:	20000714 	.word	0x20000714

08004514 <i2cDectect>:
uint8_t sensor_[SENSOR_COUNT];
/*
 * Scan i2c address 0 to 127
 * Return number of sensor
 */
void i2cDectect(I2C_HandleTypeDef *i2c){
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	uint8_t sensor_count = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	75fb      	strb	r3, [r7, #23]

	for(int i=0; i<128; i++){
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e03b      	b.n	800459e <i2cDectect+0x8a>
		uint8_t temp = HAL_I2C_IsDeviceReady(i2c,(uint16_t)(i<<1), 3,1000);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	b29b      	uxth	r3, r3
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	b299      	uxth	r1, r3
 800452e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004532:	2203      	movs	r2, #3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f004 fb6b 	bl	8008c10 <HAL_I2C_IsDeviceReady>
 800453a:	4603      	mov	r3, r0
 800453c:	72fb      	strb	r3, [r7, #11]
		if(temp == HAL_OK){
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d129      	bne.n	8004598 <i2cDectect+0x84>
            for(int j = 0; j < SENSOR_COUNT;j ++){
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e018      	b.n	800457c <i2cDectect+0x68>
                if(sensor_list[j].addr == i){
 800454a:	4919      	ldr	r1, [pc, #100]	@ (80045b0 <i2cDectect+0x9c>)
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4293      	cmp	r3, r2
 8004560:	d109      	bne.n	8004576 <i2cDectect+0x62>
                    sensor_list[j].valid = 0;
 8004562:	4913      	ldr	r1, [pc, #76]	@ (80045b0 <i2cDectect+0x9c>)
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3308      	adds	r3, #8
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
            for(int j = 0; j < SENSOR_COUNT;j ++){
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3301      	adds	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b05      	cmp	r3, #5
 8004580:	dde3      	ble.n	800454a <i2cDectect+0x36>
                }
            }
			sensor_[sensor_count] = i;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	b2d1      	uxtb	r1, r2
 8004588:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <i2cDectect+0xa0>)
 800458a:	54d1      	strb	r1, [r2, r3]
			sensor_count ++;
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	3301      	adds	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
			if(sensor_count == SENSOR_COUNT){
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d006      	beq.n	80045a6 <i2cDectect+0x92>
	for(int i=0; i<128; i++){
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3301      	adds	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80045a2:	ddc0      	ble.n	8004526 <i2cDectect+0x12>
			     break;
			}
		}
	}
	
}
 80045a4:	e000      	b.n	80045a8 <i2cDectect+0x94>
			     break;
 80045a6:	bf00      	nop
}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000001c 	.word	0x2000001c
 80045b4:	2000071c 	.word	0x2000071c

080045b8 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 80045c0:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <timer_start+0x20>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 80045c6:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <timer_start+0x20>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f006 ff9c 	bl	800b508 <HAL_TIM_Base_Start_IT>
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000724 	.word	0x20000724

080045dc <timer_name>:
     {
      /* code */
     }
}

TIM_HandleTypeDef *timer_name(){
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return htimmz;
 80045e0:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <timer_name+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000724 	.word	0x20000724

080045f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <MX_DMA_Init+0x78>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	4a1a      	ldr	r2, [pc, #104]	@ (800466c <MX_DMA_Init+0x78>)
 8004604:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004608:	6313      	str	r3, [r2, #48]	@ 0x30
 800460a:	4b18      	ldr	r3, [pc, #96]	@ (800466c <MX_DMA_Init+0x78>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4b14      	ldr	r3, [pc, #80]	@ (800466c <MX_DMA_Init+0x78>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	4a13      	ldr	r2, [pc, #76]	@ (800466c <MX_DMA_Init+0x78>)
 8004620:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004624:	6313      	str	r3, [r2, #48]	@ 0x30
 8004626:	4b11      	ldr	r3, [pc, #68]	@ (800466c <MX_DMA_Init+0x78>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	210a      	movs	r1, #10
 8004636:	200c      	movs	r0, #12
 8004638:	f002 fd2a 	bl	8007090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800463c:	200c      	movs	r0, #12
 800463e:	f002 fd43 	bl	80070c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2105      	movs	r1, #5
 8004646:	203b      	movs	r0, #59	@ 0x3b
 8004648:	f002 fd22 	bl	8007090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800464c:	203b      	movs	r0, #59	@ 0x3b
 800464e:	f002 fd3b 	bl	80070c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	2105      	movs	r1, #5
 8004656:	2045      	movs	r0, #69	@ 0x45
 8004658:	f002 fd1a 	bl	8007090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800465c:	2045      	movs	r0, #69	@ 0x45
 800465e:	f002 fd33 	bl	80070c8 <HAL_NVIC_EnableIRQ>

}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8004678:	f7fd f9e0 	bl	8001a3c <ibus_uart_port>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4293      	cmp	r3, r2
 8004682:	d102      	bne.n	800468a <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8004684:	f7fd f9e6 	bl	8001a54 <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_DMA_callback();
    	//gps_callback();
    }
}
 8004688:	e007      	b.n	800469a <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 800468a:	f7fe fa25 	bl	8002ad8 <gps_uart_port>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_UART_RxCpltCallback+0x2a>
        gps_DMA_callback();
 8004696:	f7fe fa5f 	bl	8002b58 <gps_DMA_callback>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a04      	ldr	r2, [pc, #16]	@ (80046c0 <HAL_UART_TxCpltCallback+0x1c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 80046b4:	f002 fbc2 	bl	8006e3c <mavlink_tx_cpl_callback>
    }
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000a30 	.word	0x20000a30

080046c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80046c4:	b5b0      	push	{r4, r5, r7, lr}
 80046c6:	b094      	sub	sp, #80	@ 0x50
 80046c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  timer_start(&htim4);
 80046ca:	4827      	ldr	r0, [pc, #156]	@ (8004768 <MX_FREERTOS_Init+0xa4>)
 80046cc:	f7ff ff74 	bl	80045b8 <timer_start>
  gps_init(&huart3,115200);
 80046d0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80046d4:	4825      	ldr	r0, [pc, #148]	@ (800476c <MX_FREERTOS_Init+0xa8>)
 80046d6:	f7fe f973 	bl	80029c0 <gps_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, blackbox_task, osPriorityLow, 0, 512);
 80046da:	4b25      	ldr	r3, [pc, #148]	@ (8004770 <MX_FREERTOS_Init+0xac>)
 80046dc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80046e0:	461d      	mov	r5, r3
 80046e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	6023      	str	r3, [r4, #0]
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80046ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f00d fbce 	bl	8011e92 <osThreadCreate>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <MX_FREERTOS_Init+0xb0>)
 80046fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, ahrs_ctrl_task, osPriorityHigh, 0, 256);
 80046fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <MX_FREERTOS_Init+0xb4>)
 80046fe:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004702:	461d      	mov	r5, r3
 8004704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	6023      	str	r3, [r4, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800470c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f00d fbbd 	bl	8011e92 <osThreadCreate>
 8004718:	4603      	mov	r3, r0
 800471a:	4a18      	ldr	r2, [pc, #96]	@ (800477c <MX_FREERTOS_Init+0xb8>)
 800471c:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, imu_sensor_task, osPriorityRealtime, 0, 128);
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <MX_FREERTOS_Init+0xbc>)
 8004720:	f107 0414 	add.w	r4, r7, #20
 8004724:	461d      	mov	r5, r3
 8004726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800472a:	682b      	ldr	r3, [r5, #0]
 800472c:	6023      	str	r3, [r4, #0]
  task3Handle = osThreadCreate(osThread(task3), NULL);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f00d fbac 	bl	8011e92 <osThreadCreate>
 800473a:	4603      	mov	r3, r0
 800473c:	4a11      	ldr	r2, [pc, #68]	@ (8004784 <MX_FREERTOS_Init+0xc0>)
 800473e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, osd_task, osPriorityLow, 0, 128);
 8004740:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <MX_FREERTOS_Init+0xc4>)
 8004742:	463c      	mov	r4, r7
 8004744:	461d      	mov	r5, r3
 8004746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	6023      	str	r3, [r4, #0]
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800474e:	463b      	mov	r3, r7
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f00d fb9d 	bl	8011e92 <osThreadCreate>
 8004758:	4603      	mov	r3, r0
 800475a:	4a0c      	ldr	r2, [pc, #48]	@ (800478c <MX_FREERTOS_Init+0xc8>)
 800475c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800475e:	bf00      	nop
 8004760:	3750      	adds	r7, #80	@ 0x50
 8004762:	46bd      	mov	sp, r7
 8004764:	bdb0      	pop	{r4, r5, r7, pc}
 8004766:	bf00      	nop
 8004768:	200009e8 	.word	0x200009e8
 800476c:	20000ac0 	.word	0x20000ac0
 8004770:	08015908 	.word	0x08015908
 8004774:	2000072c 	.word	0x2000072c
 8004778:	08015924 	.word	0x08015924
 800477c:	20000730 	.word	0x20000730
 8004780:	08015940 	.word	0x08015940
 8004784:	20000734 	.word	0x20000734
 8004788:	0801595c 	.word	0x0801595c
 800478c:	20000738 	.word	0x20000738

08004790 <blackbox_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blackbox_task */
void blackbox_task(void const * argument)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	@ 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox_task */
  /* Infinite loop */
	//vTaskSuspend(NULL);
	black_box_init();
 8004798:	f7fd fc58 	bl	800204c <black_box_init>
	black_box_reset = TRUE;
 800479c:	4bcc      	ldr	r3, [pc, #816]	@ (8004ad0 <blackbox_task+0x340>)
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;  // 25 ms
 80047a2:	2364      	movs	r3, #100	@ 0x64
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
	xLastWakeTime = xTaskGetTickCount();
 80047a6:	f00f f8bf 	bl	8013928 <xTaskGetTickCount>
 80047aa:	4603      	mov	r3, r0
 80047ac:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
		static uint32_t start_time_ms;
		if(black_box_reset){
 80047ae:	4bc8      	ldr	r3, [pc, #800]	@ (8004ad0 <blackbox_task+0x340>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <blackbox_task+0x4c>
			black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 80047b6:	48c7      	ldr	r0, [pc, #796]	@ (8004ad4 <blackbox_task+0x344>)
 80047b8:	f7fd fd0e 	bl	80021d8 <black_box_pack_str>
			black_box_reset = FALSE;
 80047bc:	4bc4      	ldr	r3, [pc, #784]	@ (8004ad0 <blackbox_task+0x340>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
			start_time_ms = millis();
 80047c2:	4bc5      	ldr	r3, [pc, #788]	@ (8004ad8 <blackbox_task+0x348>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ca:	4bc4      	ldr	r3, [pc, #784]	@ (8004adc <blackbox_task+0x34c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	4ac3      	ldr	r2, [pc, #780]	@ (8004ae0 <blackbox_task+0x350>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	4ac2      	ldr	r2, [pc, #776]	@ (8004ae4 <blackbox_task+0x354>)
 80047da:	6013      	str	r3, [r2, #0]
		}
		uint32_t time_ms =  millis() - start_time_ms;
 80047dc:	4bbe      	ldr	r3, [pc, #760]	@ (8004ad8 <blackbox_task+0x348>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e4:	4bbd      	ldr	r3, [pc, #756]	@ (8004adc <blackbox_task+0x34c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	4abd      	ldr	r2, [pc, #756]	@ (8004ae0 <blackbox_task+0x350>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	099a      	lsrs	r2, r3, #6
 80047f2:	4bbc      	ldr	r3, [pc, #752]	@ (8004ae4 <blackbox_task+0x354>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	623b      	str	r3, [r7, #32]
		// control thortle 0 -> 100%
		int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 80047fa:	4bbb      	ldr	r3, [pc, #748]	@ (8004ae8 <blackbox_task+0x358>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004802:	4618      	mov	r0, r3
 8004804:	f7fb fe36 	bl	8000474 <__aeabi_i2d>
 8004808:	a3af      	add	r3, pc, #700	@ (adr r3, 8004ac8 <blackbox_task+0x338>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb fe9b 	bl	8000548 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f7fc f945 	bl	8000aa8 <__aeabi_d2iz>
 800481e:	4603      	mov	r3, r0
 8004820:	61fb      	str	r3, [r7, #28]

		// tx signal 0 -> 100 %
		int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 8004822:	4bb1      	ldr	r3, [pc, #708]	@ (8004ae8 <blackbox_task+0x358>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fe22 	bl	8000474 <__aeabi_i2d>
 8004830:	a3a5      	add	r3, pc, #660	@ (adr r3, 8004ac8 <blackbox_task+0x338>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f7fb fe87 	bl	8000548 <__aeabi_dmul>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	f7fc f931 	bl	8000aa8 <__aeabi_d2iz>
 8004846:	4603      	mov	r3, r0
 8004848:	61bb      	str	r3, [r7, #24]

		/*** write time  ***/
		black_box_pack_int(time_ms);
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd fc2b 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004852:	2020      	movs	r0, #32
 8004854:	f7fd fcfa 	bl	800224c <black_box_pack_char>

		/*---- control parameters ---*/
		black_box_pack_int((int)servoL);
 8004858:	4ba4      	ldr	r3, [pc, #656]	@ (8004aec <blackbox_task+0x35c>)
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd fc23 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004862:	2020      	movs	r0, #32
 8004864:	f7fd fcf2 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)servoR);
 8004868:	4ba1      	ldr	r3, [pc, #644]	@ (8004af0 <blackbox_task+0x360>)
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fd fc1b 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004872:	2020      	movs	r0, #32
 8004874:	f7fd fcea 	bl	800224c <black_box_pack_char>
		black_box_pack_int(throtle);
 8004878:	69f8      	ldr	r0, [r7, #28]
 800487a:	f7fd fc15 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 800487e:	2020      	movs	r0, #32
 8004880:	f7fd fce4 	bl	800224c <black_box_pack_char>
		black_box_pack_int(srri);
 8004884:	69b8      	ldr	r0, [r7, #24]
 8004886:	f7fd fc0f 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 800488a:	2020      	movs	r0, #32
 800488c:	f7fd fcde 	bl	800224c <black_box_pack_char>

		/*----- atitude ---------------------*/
		black_box_pack_int((int)(AHRS.roll*100));
 8004890:	4b98      	ldr	r3, [pc, #608]	@ (8004af4 <blackbox_task+0x364>)
 8004892:	edd3 7a00 	vldr	s15, [r3]
 8004896:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8004af8 <blackbox_task+0x368>
 800489a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048a2:	ee17 0a90 	vmov	r0, s15
 80048a6:	f7fd fbff 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80048aa:	2020      	movs	r0, #32
 80048ac:	f7fd fcce 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(roll_desired*100));
 80048b0:	4b92      	ldr	r3, [pc, #584]	@ (8004afc <blackbox_task+0x36c>)
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8004af8 <blackbox_task+0x368>
 80048ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c2:	ee17 0a90 	vmov	r0, s15
 80048c6:	f7fd fbef 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80048ca:	2020      	movs	r0, #32
 80048cc:	f7fd fcbe 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(AHRS.pitch*100));// cm
 80048d0:	4b88      	ldr	r3, [pc, #544]	@ (8004af4 <blackbox_task+0x364>)
 80048d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80048d6:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004af8 <blackbox_task+0x368>
 80048da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e2:	ee17 0a90 	vmov	r0, s15
 80048e6:	f7fd fbdf 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80048ea:	2020      	movs	r0, #32
 80048ec:	f7fd fcae 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(pitch_desired*100));
 80048f0:	4b83      	ldr	r3, [pc, #524]	@ (8004b00 <blackbox_task+0x370>)
 80048f2:	edd3 7a00 	vldr	s15, [r3]
 80048f6:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004af8 <blackbox_task+0x368>
 80048fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004902:	ee17 0a90 	vmov	r0, s15
 8004906:	f7fd fbcf 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 800490a:	2020      	movs	r0, #32
 800490c:	f7fd fc9e 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(AHRS.yaw*100));
 8004910:	4b78      	ldr	r3, [pc, #480]	@ (8004af4 <blackbox_task+0x364>)
 8004912:	edd3 7a02 	vldr	s15, [r3, #8]
 8004916:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8004af8 <blackbox_task+0x368>
 800491a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800491e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004922:	ee17 0a90 	vmov	r0, s15
 8004926:	f7fd fbbf 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 800492a:	2020      	movs	r0, #32
 800492c:	f7fd fc8e 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(AHRS.yaw_rate*100));
 8004930:	4b70      	ldr	r3, [pc, #448]	@ (8004af4 <blackbox_task+0x364>)
 8004932:	edd3 7a05 	vldr	s15, [r3, #20]
 8004936:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8004af8 <blackbox_task+0x368>
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004942:	ee17 0a90 	vmov	r0, s15
 8004946:	f7fd fbaf 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 800494a:	2020      	movs	r0, #32
 800494c:	f7fd fc7e 	bl	800224c <black_box_pack_char>

		/*------- GPS ----------------------*/
		int16_t vx = _gps.velocity[0];  // cm/s
 8004950:	4b6c      	ldr	r3, [pc, #432]	@ (8004b04 <blackbox_task+0x374>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	82fb      	strh	r3, [r7, #22]
		int16_t vy = _gps.velocity[1];  // cm/s
 8004956:	4b6b      	ldr	r3, [pc, #428]	@ (8004b04 <blackbox_task+0x374>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	82bb      	strh	r3, [r7, #20]
		int16_t vz = _gps.velocity[2];  // cm/s
 800495c:	4b69      	ldr	r3, [pc, #420]	@ (8004b04 <blackbox_task+0x374>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	827b      	strh	r3, [r7, #18]
		int32_t ground_speed = sqrt(sq(vx) + sq(vy) + sq(vz)) ;
 8004962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004966:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800496a:	fb03 f202 	mul.w	r2, r3, r2
 800496e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004972:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	441a      	add	r2, r3
 800497c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004980:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fd72 	bl	8000474 <__aeabi_i2d>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	ec43 2b10 	vmov	d0, r2, r3
 8004998:	f010 fa82 	bl	8014ea0 <sqrt>
 800499c:	ec53 2b10 	vmov	r2, r3, d0
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f7fc f880 	bl	8000aa8 <__aeabi_d2iz>
 80049a8:	4603      	mov	r3, r0
 80049aa:	60fb      	str	r3, [r7, #12]

		black_box_pack_int(_gps.position[0]);
 80049ac:	4b55      	ldr	r3, [pc, #340]	@ (8004b04 <blackbox_task+0x374>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fd fb79 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80049b6:	2020      	movs	r0, #32
 80049b8:	f7fd fc48 	bl	800224c <black_box_pack_char>
		black_box_pack_int(_gps.position[1]);
 80049bc:	4b51      	ldr	r3, [pc, #324]	@ (8004b04 <blackbox_task+0x374>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fd fb71 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80049c6:	2020      	movs	r0, #32
 80049c8:	f7fd fc40 	bl	800224c <black_box_pack_char>
		black_box_pack_int(_gps.altitude_msl);
 80049cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004b04 <blackbox_task+0x374>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fd fb69 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80049d6:	2020      	movs	r0, #32
 80049d8:	f7fd fc38 	bl	800224c <black_box_pack_char>
		black_box_pack_int(_gps.altitude_mgl);
 80049dc:	4b49      	ldr	r3, [pc, #292]	@ (8004b04 <blackbox_task+0x374>)
 80049de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fd fb61 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80049e6:	2020      	movs	r0, #32
 80049e8:	f7fd fc30 	bl	800224c <black_box_pack_char>
		//black_box_pack_int(_gps.numSat);
		//lack_box_pack_char(' ');
		black_box_pack_int(_gps.fix);
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <blackbox_task+0x374>)
 80049ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fb58 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 80049f8:	2020      	movs	r0, #32
 80049fa:	f7fd fc27 	bl	800224c <black_box_pack_char>
		black_box_pack_int(ground_speed);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fd fb52 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004a04:	2020      	movs	r0, #32
 8004a06:	f7fd fc21 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(pid_velo_scale*1000));   // cm
 8004a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b08 <blackbox_task+0x378>)
 8004a0c:	edd3 7a00 	vldr	s15, [r3]
 8004a10:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8004b0c <blackbox_task+0x37c>
 8004a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a1c:	ee17 0a90 	vmov	r0, s15
 8004a20:	f7fd fb42 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004a24:	2020      	movs	r0, #32
 8004a26:	f7fd fc11 	bl	800224c <black_box_pack_char>
		black_box_pack_int(vz);
 8004a2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fd fb3a 	bl	80020a8 <black_box_pack_int>

		/*---- estimate ---------------------------*/
		black_box_pack_char(' ');
 8004a34:	2020      	movs	r0, #32
 8004a36:	f7fd fc09 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(position_test*100)); //cm
 8004a3a:	4b35      	ldr	r3, [pc, #212]	@ (8004b10 <blackbox_task+0x380>)
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004af8 <blackbox_task+0x368>
 8004a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a4c:	ee17 0a90 	vmov	r0, s15
 8004a50:	f7fd fb2a 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004a54:	2020      	movs	r0, #32
 8004a56:	f7fd fbf9 	bl	800224c <black_box_pack_char>
		black_box_pack_int((int)(velocity_test*100));   // cm/s
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004b14 <blackbox_task+0x384>)
 8004a5c:	edd3 7a00 	vldr	s15, [r3]
 8004a60:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004af8 <blackbox_task+0x368>
 8004a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6c:	ee17 0a90 	vmov	r0, s15
 8004a70:	f7fd fb1a 	bl	80020a8 <black_box_pack_int>
		black_box_pack_char(' ');
 8004a74:	2020      	movs	r0, #32
 8004a76:	f7fd fbe9 	bl	800224c <black_box_pack_char>
		black_box_pack_int(alt_baro);   // cm
 8004a7a:	4b27      	ldr	r3, [pc, #156]	@ (8004b18 <blackbox_task+0x388>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd fb12 	bl	80020a8 <black_box_pack_int>
		//black_box_pack_char(' ');
		//black_box_pack_int((int)(velocity_abs*100));   // cm

		/*----- end line && load data to sd card- -----*/
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004a84:	2110      	movs	r1, #16
 8004a86:	4825      	ldr	r0, [pc, #148]	@ (8004b1c <blackbox_task+0x38c>)
 8004a88:	f003 f907 	bl	8007c9a <HAL_GPIO_TogglePin>
		//sdcard_fsize = black_box_get_file_size();
		black_box_pack_char('\n');
 8004a8c:	200a      	movs	r0, #10
 8004a8e:	f7fd fbdd 	bl	800224c <black_box_pack_char>
		black_box_load();
 8004a92:	f7fd fbf5 	bl	8002280 <black_box_load>

		if(puts_state != -1){
 8004a96:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <blackbox_task+0x390>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d003      	beq.n	8004aa8 <blackbox_task+0x318>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	481e      	ldr	r0, [pc, #120]	@ (8004b1c <blackbox_task+0x38c>)
 8004aa4:	f003 f8f9 	bl	8007c9a <HAL_GPIO_TogglePin>
		}
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8004aa8:	f107 0308 	add.w	r3, r7, #8
 8004aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f00e fc6c 	bl	801338c <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f00f fa21 	bl	8013efc <uxTaskGetStackHighWaterMark>
 8004aba:	4603      	mov	r3, r0
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <blackbox_task+0x394>)
 8004ac0:	801a      	strh	r2, [r3, #0]
  {
 8004ac2:	e674      	b.n	80047ae <blackbox_task+0x1e>
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	9999999a 	.word	0x9999999a
 8004acc:	3fb99999 	.word	0x3fb99999
 8004ad0:	20000744 	.word	0x20000744
 8004ad4:	08015970 	.word	0x08015970
 8004ad8:	20000724 	.word	0x20000724
 8004adc:	20000728 	.word	0x20000728
 8004ae0:	10624dd3 	.word	0x10624dd3
 8004ae4:	20000764 	.word	0x20000764
 8004ae8:	20000188 	.word	0x20000188
 8004aec:	20000b70 	.word	0x20000b70
 8004af0:	20000b74 	.word	0x20000b74
 8004af4:	200006a0 	.word	0x200006a0
 8004af8:	42c80000 	.word	0x42c80000
 8004afc:	20000b68 	.word	0x20000b68
 8004b00:	20000b6c 	.word	0x20000b6c
 8004b04:	20000480 	.word	0x20000480
 8004b08:	20000c3c 	.word	0x20000c3c
 8004b0c:	447a0000 	.word	0x447a0000
 8004b10:	2000069c 	.word	0x2000069c
 8004b14:	20000698 	.word	0x20000698
 8004b18:	20000748 	.word	0x20000748
 8004b1c:	40020000 	.word	0x40020000
 8004b20:	20000418 	.word	0x20000418
 8004b24:	20000742 	.word	0x20000742

08004b28 <ahrs_ctrl_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ahrs_ctrl_task */
void ahrs_ctrl_task(void const * argument)
{
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2a:	b08d      	sub	sp, #52	@ 0x34
 8004b2c:	af06      	add	r7, sp, #24
 8004b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_ctrl_task */
  /* Infinite loop */
    ibus_init(&huart2);
 8004b30:	4869      	ldr	r0, [pc, #420]	@ (8004cd8 <ahrs_ctrl_task+0x1b0>)
 8004b32:	f7fc ff53 	bl	80019dc <ibus_init>
	attitude_ctrl_init();
 8004b36:	f001 fcb5 	bl	80064a4 <attitude_ctrl_init>
	initPWM(&htim3);
 8004b3a:	4868      	ldr	r0, [pc, #416]	@ (8004cdc <ahrs_ctrl_task+0x1b4>)
 8004b3c:	f7ff fc1a 	bl	8004374 <initPWM>
	compassInit();
 8004b40:	f7fd fc3a 	bl	80023b8 <compassInit>
	baro_init();
 8004b44:	f7fd f9fe 	bl	8001f44 <baro_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8004b48:	230a      	movs	r3, #10
 8004b4a:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8004b4c:	f00e feec 	bl	8013928 <xTaskGetTickCount>
 8004b50:	4603      	mov	r3, r0
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	//timer_calculate_boottime();
	if(is_baro_calibration() == FALSE){
 8004b54:	f7fd fa54 	bl	8002000 <is_baro_calibration>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <ahrs_ctrl_task+0x3a>
		baro_zero_calibrate();
 8004b5e:	f7fd fa17 	bl	8001f90 <baro_zero_calibrate>
	}
	alt_baro = baro_get_altitude();
 8004b62:	f7fd fa59 	bl	8002018 <baro_get_altitude>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4a5d      	ldr	r2, [pc, #372]	@ (8004ce0 <ahrs_ctrl_task+0x1b8>)
 8004b6a:	6013      	str	r3, [r2, #0]
	position_test += 0.02*(alt_baro - position_test);
 8004b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce4 <ahrs_ctrl_task+0x1bc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fc91 	bl	8000498 <__aeabi_f2d>
 8004b76:	4604      	mov	r4, r0
 8004b78:	460d      	mov	r5, r1
 8004b7a:	4b59      	ldr	r3, [pc, #356]	@ (8004ce0 <ahrs_ctrl_task+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b86:	4b57      	ldr	r3, [pc, #348]	@ (8004ce4 <ahrs_ctrl_task+0x1bc>)
 8004b88:	edd3 7a00 	vldr	s15, [r3]
 8004b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b90:	ee17 0a90 	vmov	r0, s15
 8004b94:	f7fb fc80 	bl	8000498 <__aeabi_f2d>
 8004b98:	a34d      	add	r3, pc, #308	@ (adr r3, 8004cd0 <ahrs_ctrl_task+0x1a8>)
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f7fb fcd3 	bl	8000548 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb fb17 	bl	80001dc <__adddf3>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f7fb ff9f 	bl	8000af8 <__aeabi_d2f>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4a49      	ldr	r2, [pc, #292]	@ (8004ce4 <ahrs_ctrl_task+0x1bc>)
 8004bbe:	6013      	str	r3, [r2, #0]
	float vz =_gps.velocity[2]/100.0f;
 8004bc0:	4b49      	ldr	r3, [pc, #292]	@ (8004ce8 <ahrs_ctrl_task+0x1c0>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bcc:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8004cec <ahrs_ctrl_task+0x1c4>
 8004bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bd4:	edc7 7a04 	vstr	s15, [r7, #16]
	velocity_test += 0.02*(vz - velocity_test);
 8004bd8:	4b45      	ldr	r3, [pc, #276]	@ (8004cf0 <ahrs_ctrl_task+0x1c8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fb fc5b 	bl	8000498 <__aeabi_f2d>
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <ahrs_ctrl_task+0x1c8>)
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bf4:	ee17 0a90 	vmov	r0, s15
 8004bf8:	f7fb fc4e 	bl	8000498 <__aeabi_f2d>
 8004bfc:	a334      	add	r3, pc, #208	@ (adr r3, 8004cd0 <ahrs_ctrl_task+0x1a8>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fca1 	bl	8000548 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7fb fae5 	bl	80001dc <__adddf3>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fb ff6d 	bl	8000af8 <__aeabi_d2f>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4a33      	ldr	r2, [pc, #204]	@ (8004cf0 <ahrs_ctrl_task+0x1c8>)
 8004c22:	6013      	str	r3, [r2, #0]
	ibusFrameComplete();
 8004c24:	f7fc ff74 	bl	8001b10 <ibusFrameComplete>
	gps_readout();
 8004c28:	f7fd ff62 	bl	8002af0 <gps_readout>
	update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],0.01);
 8004c2c:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <ahrs_ctrl_task+0x1cc>)
 8004c2e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c32:	4b30      	ldr	r3, [pc, #192]	@ (8004cf4 <ahrs_ctrl_task+0x1cc>)
 8004c34:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8004c38:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf4 <ahrs_ctrl_task+0x1cc>)
 8004c3a:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf8 <ahrs_ctrl_task+0x1d0>)
 8004c40:	f9b3 e000 	ldrsh.w	lr, [r3]
 8004c44:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf8 <ahrs_ctrl_task+0x1d0>)
 8004c46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf8 <ahrs_ctrl_task+0x1d0>)
 8004c4c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004c50:	492a      	ldr	r1, [pc, #168]	@ (8004cfc <ahrs_ctrl_task+0x1d4>)
 8004c52:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004c56:	4829      	ldr	r0, [pc, #164]	@ (8004cfc <ahrs_ctrl_task+0x1d4>)
 8004c58:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8004c5c:	4c27      	ldr	r4, [pc, #156]	@ (8004cfc <ahrs_ctrl_task+0x1d4>)
 8004c5e:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8004c62:	9404      	str	r4, [sp, #16]
 8004c64:	9003      	str	r0, [sp, #12]
 8004c66:	9102      	str	r1, [sp, #8]
 8004c68:	9201      	str	r2, [sp, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8004d00 <ahrs_ctrl_task+0x1d8>
 8004c70:	4673      	mov	r3, lr
 8004c72:	4662      	mov	r2, ip
 8004c74:	4631      	mov	r1, r6
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7fe fa7a 	bl	8003170 <update_ahrs>
	attitude_ctrl(0.01);
 8004c7c:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8004d00 <ahrs_ctrl_task+0x1d8>
 8004c80:	f001 fcaa 	bl	80065d8 <attitude_ctrl>

	if(ibusChannelData[CH6] < CHANNEL_HIGH ){
 8004c84:	4b1f      	ldr	r3, [pc, #124]	@ (8004d04 <ahrs_ctrl_task+0x1dc>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d808      	bhi.n	8004ca2 <ahrs_ctrl_task+0x17a>
    	vTaskSuspend(task1Handle);
 8004c90:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <ahrs_ctrl_task+0x1e0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f00e fc2f 	bl	80134f8 <vTaskSuspend>
    	black_box_reset = TRUE;
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d0c <ahrs_ctrl_task+0x1e4>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e004      	b.n	8004cac <ahrs_ctrl_task+0x184>
    }
    else{
    	vTaskResume(task1Handle);
 8004ca2:	4b19      	ldr	r3, [pc, #100]	@ (8004d08 <ahrs_ctrl_task+0x1e0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f00e fcec 	bl	8013684 <vTaskResume>
    }

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8004cac:	2110      	movs	r1, #16
 8004cae:	4818      	ldr	r0, [pc, #96]	@ (8004d10 <ahrs_ctrl_task+0x1e8>)
 8004cb0:	f002 fff3 	bl	8007c9a <HAL_GPIO_TogglePin>
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	6979      	ldr	r1, [r7, #20]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f00e fb66 	bl	801338c <vTaskDelayUntil>
#ifdef STACK_DEBUG
	stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f00f f91b 	bl	8013efc <uxTaskGetStackHighWaterMark>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <ahrs_ctrl_task+0x1ec>)
 8004ccc:	801a      	strh	r2, [r3, #0]
  {
 8004cce:	e741      	b.n	8004b54 <ahrs_ctrl_task+0x2c>
 8004cd0:	47ae147b 	.word	0x47ae147b
 8004cd4:	3f947ae1 	.word	0x3f947ae1
 8004cd8:	20000a78 	.word	0x20000a78
 8004cdc:	200009a0 	.word	0x200009a0
 8004ce0:	20000748 	.word	0x20000748
 8004ce4:	2000069c 	.word	0x2000069c
 8004ce8:	20000480 	.word	0x20000480
 8004cec:	42c80000 	.word	0x42c80000
 8004cf0:	20000698 	.word	0x20000698
 8004cf4:	2000074c 	.word	0x2000074c
 8004cf8:	20000754 	.word	0x20000754
 8004cfc:	2000075c 	.word	0x2000075c
 8004d00:	3c23d70a 	.word	0x3c23d70a
 8004d04:	20000188 	.word	0x20000188
 8004d08:	2000072c 	.word	0x2000072c
 8004d0c:	20000744 	.word	0x20000744
 8004d10:	40020400 	.word	0x40020400
 8004d14:	2000073c 	.word	0x2000073c

08004d18 <imu_sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_sensor_task */
void imu_sensor_task(void const * argument)
{
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b08e      	sub	sp, #56	@ 0x38
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_sensor_task */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 8004d20:	2300      	movs	r3, #0
 8004d22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004d24:	2300      	movs	r3, #0
 8004d26:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004d28:	2300      	movs	r3, #0
 8004d2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	2300      	movs	r3, #0
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 8004d44:	f7fd fb38 	bl	80023b8 <compassInit>
	mpu6050_init(&hi2c2);
 8004d48:	4893      	ldr	r0, [pc, #588]	@ (8004f98 <imu_sensor_task+0x280>)
 8004d4a:	f7fc ffc7 	bl	8001cdc <mpu6050_init>
	i2cDectect(&hi2c2);
 8004d4e:	4892      	ldr	r0, [pc, #584]	@ (8004f98 <imu_sensor_task+0x280>)
 8004d50:	f7ff fbe0 	bl	8004514 <i2cDectect>
	HAL_Delay(2000);
 8004d54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004d58:	f002 f8be 	bl	8006ed8 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8004d5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d66:	1c99      	adds	r1, r3, #2
 8004d68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe f983 	bl	8003078 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 8004d72:	2302      	movs	r3, #2
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8004d76:	f00e fdd7 	bl	8013928 <xTaskGetTickCount>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8004d7e:	f107 0320 	add.w	r3, r7, #32
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc fffc 	bl	8001d80 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004d94:	1acb      	subs	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004da0:	4619      	mov	r1, r3
 8004da2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8004da6:	1acb      	subs	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004db2:	4619      	mov	r1, r3
 8004db4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004db8:	1acb      	subs	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8004dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(sample_count >= 5){
 8004dc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d937      	bls.n	8004e40 <imu_sensor_task+0x128>
		   axis3_t mag;
		   compass_get(&mag);
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fd fb2b 	bl	8002430 <compass_get>
		   mag_raw[0] = mag.x;
 8004dda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004dde:	4b6f      	ldr	r3, [pc, #444]	@ (8004f9c <imu_sensor_task+0x284>)
 8004de0:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 8004de2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004de6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f9c <imu_sensor_task+0x284>)
 8004de8:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 8004dea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004dee:	4b6b      	ldr	r3, [pc, #428]	@ (8004f9c <imu_sensor_task+0x284>)
 8004df0:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa0 <imu_sensor_task+0x288>)
 8004df6:	fb82 1203 	smull	r1, r2, r2, r3
 8004dfa:	1052      	asrs	r2, r2, #1
 8004dfc:	17db      	asrs	r3, r3, #31
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	b21a      	sxth	r2, r3
 8004e02:	4b68      	ldr	r3, [pc, #416]	@ (8004fa4 <imu_sensor_task+0x28c>)
 8004e04:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4a65      	ldr	r2, [pc, #404]	@ (8004fa0 <imu_sensor_task+0x288>)
 8004e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8004e0e:	1052      	asrs	r2, r2, #1
 8004e10:	17db      	asrs	r3, r3, #31
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	b21a      	sxth	r2, r3
 8004e16:	4b63      	ldr	r3, [pc, #396]	@ (8004fa4 <imu_sensor_task+0x28c>)
 8004e18:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4a60      	ldr	r2, [pc, #384]	@ (8004fa0 <imu_sensor_task+0x288>)
 8004e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8004e22:	1052      	asrs	r2, r2, #1
 8004e24:	17db      	asrs	r3, r3, #31
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	b21a      	sxth	r2, r3
 8004e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8004fa4 <imu_sensor_task+0x28c>)
 8004e2c:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		raw.x = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 8004e4c:	f107 0320 	add.w	r3, r7, #32
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fc ffd1 	bl	8001df8 <mpu6050_acc_get_raw>
		if(first_loop){
 8004e56:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00e      	beq.n	8004e7c <imu_sensor_task+0x164>
			acc_imu[0] = raw.x;
 8004e5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e62:	4b51      	ldr	r3, [pc, #324]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004e64:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8004e66:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004e6c:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8004e6e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8004e72:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004e74:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8004e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb faf6 	bl	8000474 <__aeabi_i2d>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b45      	ldr	r3, [pc, #276]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb faea 	bl	8000474 <__aeabi_i2d>
 8004ea0:	a33b      	add	r3, pc, #236	@ (adr r3, 8004f90 <imu_sensor_task+0x278>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fb4f 	bl	8000548 <__aeabi_dmul>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb f993 	bl	80001dc <__adddf3>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f7fb fdf3 	bl	8000aa8 <__aeabi_d2iz>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	b21a      	sxth	r2, r3
 8004ec6:	4b38      	ldr	r3, [pc, #224]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004ec8:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8004eca:	4b37      	ldr	r3, [pc, #220]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fb facf 	bl	8000474 <__aeabi_i2d>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	460d      	mov	r5, r1
 8004eda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004ee2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fac3 	bl	8000474 <__aeabi_i2d>
 8004eee:	a328      	add	r3, pc, #160	@ (adr r3, 8004f90 <imu_sensor_task+0x278>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fb28 	bl	8000548 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4620      	mov	r0, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb f96c 	bl	80001dc <__adddf3>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f7fb fdcc 	bl	8000aa8 <__aeabi_d2iz>
 8004f10:	4603      	mov	r3, r0
 8004f12:	b21a      	sxth	r2, r3
 8004f14:	4b24      	ldr	r3, [pc, #144]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004f16:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 8004f18:	4b23      	ldr	r3, [pc, #140]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004f1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb faa8 	bl	8000474 <__aeabi_i2d>
 8004f24:	4604      	mov	r4, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fb fa9c 	bl	8000474 <__aeabi_i2d>
 8004f3c:	a314      	add	r3, pc, #80	@ (adr r3, 8004f90 <imu_sensor_task+0x278>)
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f7fb fb01 	bl	8000548 <__aeabi_dmul>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f7fb f945 	bl	80001dc <__adddf3>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f7fb fda5 	bl	8000aa8 <__aeabi_d2iz>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	b21a      	sxth	r2, r3
 8004f62:	4b11      	ldr	r3, [pc, #68]	@ (8004fa8 <imu_sensor_task+0x290>)
 8004f64:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004f66:	2108      	movs	r1, #8
 8004f68:	4810      	ldr	r0, [pc, #64]	@ (8004fac <imu_sensor_task+0x294>)
 8004f6a:	f002 fe96 	bl	8007c9a <HAL_GPIO_TogglePin>
#ifdef STACK_DEBUG
		stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f00e ffc4 	bl	8013efc <uxTaskGetStackHighWaterMark>
 8004f74:	4603      	mov	r3, r0
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <imu_sensor_task+0x298>)
 8004f7a:	801a      	strh	r2, [r3, #0]
#endif
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f82:	4618      	mov	r0, r3
 8004f84:	f00e fa02 	bl	801338c <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 8004f88:	e6f9      	b.n	8004d7e <imu_sensor_task+0x66>
 8004f8a:	bf00      	nop
 8004f8c:	f3af 8000 	nop.w
 8004f90:	9999999a 	.word	0x9999999a
 8004f94:	3fb99999 	.word	0x3fb99999
 8004f98:	200007bc 	.word	0x200007bc
 8004f9c:	2000075c 	.word	0x2000075c
 8004fa0:	66666667 	.word	0x66666667
 8004fa4:	2000074c 	.word	0x2000074c
 8004fa8:	20000754 	.word	0x20000754
 8004fac:	40020400 	.word	0x40020400
 8004fb0:	2000073e 	.word	0x2000073e

08004fb4 <osd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_osd_task */
void osd_task(void const * argument)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN osd_task */
  /* Infinite loop */
  for(;;)
  {
	if(_gps.fix > 1){
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <osd_task+0x3c>)
 8004fbe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d903      	bls.n	8004fce <osd_task+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004fc6:	2120      	movs	r1, #32
 8004fc8:	480a      	ldr	r0, [pc, #40]	@ (8004ff4 <osd_task+0x40>)
 8004fca:	f002 fe66 	bl	8007c9a <HAL_GPIO_TogglePin>
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004fce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fd2:	4809      	ldr	r0, [pc, #36]	@ (8004ff8 <osd_task+0x44>)
 8004fd4:	f002 fe61 	bl	8007c9a <HAL_GPIO_TogglePin>
    osDelay(100);
 8004fd8:	2064      	movs	r0, #100	@ 0x64
 8004fda:	f00c ff81 	bl	8011ee0 <osDelay>
#ifdef STACK_DEBUG
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f00e ff8c 	bl	8013efc <uxTaskGetStackHighWaterMark>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	4b04      	ldr	r3, [pc, #16]	@ (8004ffc <osd_task+0x48>)
 8004fea:	801a      	strh	r2, [r3, #0]
	if(_gps.fix > 1){
 8004fec:	e7e6      	b.n	8004fbc <osd_task+0x8>
 8004fee:	bf00      	nop
 8004ff0:	20000480 	.word	0x20000480
 8004ff4:	40020000 	.word	0x40020000
 8004ff8:	40020800 	.word	0x40020800
 8004ffc:	20000740 	.word	0x20000740

08005000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	60da      	str	r2, [r3, #12]
 8005014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	4b51      	ldr	r3, [pc, #324]	@ (8005160 <MX_GPIO_Init+0x160>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	4a50      	ldr	r2, [pc, #320]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005020:	f043 0304 	orr.w	r3, r3, #4
 8005024:	6313      	str	r3, [r2, #48]	@ 0x30
 8005026:	4b4e      	ldr	r3, [pc, #312]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	4b4a      	ldr	r3, [pc, #296]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	4a49      	ldr	r2, [pc, #292]	@ (8005160 <MX_GPIO_Init+0x160>)
 800503c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005040:	6313      	str	r3, [r2, #48]	@ 0x30
 8005042:	4b47      	ldr	r3, [pc, #284]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b43      	ldr	r3, [pc, #268]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	4a42      	ldr	r2, [pc, #264]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6313      	str	r3, [r2, #48]	@ 0x30
 800505e:	4b40      	ldr	r3, [pc, #256]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	4b3c      	ldr	r3, [pc, #240]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	4a3b      	ldr	r2, [pc, #236]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	6313      	str	r3, [r2, #48]	@ 0x30
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <MX_GPIO_Init+0x160>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <MX_GPIO_Init+0x160>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	4a34      	ldr	r2, [pc, #208]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005090:	f043 0308 	orr.w	r3, r3, #8
 8005094:	6313      	str	r3, [r2, #48]	@ 0x30
 8005096:	4b32      	ldr	r3, [pc, #200]	@ (8005160 <MX_GPIO_Init+0x160>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050a8:	482e      	ldr	r0, [pc, #184]	@ (8005164 <MX_GPIO_Init+0x164>)
 80050aa:	f002 fddd 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80050ae:	2200      	movs	r2, #0
 80050b0:	2130      	movs	r1, #48	@ 0x30
 80050b2:	482d      	ldr	r0, [pc, #180]	@ (8005168 <MX_GPIO_Init+0x168>)
 80050b4:	f002 fdd8 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	@ 0x80
 80050bc:	482b      	ldr	r0, [pc, #172]	@ (800516c <MX_GPIO_Init+0x16c>)
 80050be:	f002 fdd3 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2118      	movs	r1, #24
 80050c6:	482a      	ldr	r0, [pc, #168]	@ (8005170 <MX_GPIO_Init+0x170>)
 80050c8:	f002 fdce 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80050cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050d2:	2301      	movs	r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050da:	2300      	movs	r3, #0
 80050dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	4619      	mov	r1, r3
 80050e4:	481f      	ldr	r0, [pc, #124]	@ (8005164 <MX_GPIO_Init+0x164>)
 80050e6:	f002 fc0b 	bl	8007900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80050ea:	2330      	movs	r3, #48	@ 0x30
 80050ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f6:	2300      	movs	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	4619      	mov	r1, r3
 8005100:	4819      	ldr	r0, [pc, #100]	@ (8005168 <MX_GPIO_Init+0x168>)
 8005102:	f002 fbfd 	bl	8007900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005106:	2380      	movs	r3, #128	@ 0x80
 8005108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510a:	2301      	movs	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005112:	2300      	movs	r3, #0
 8005114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005116:	f107 0314 	add.w	r3, r7, #20
 800511a:	4619      	mov	r1, r3
 800511c:	4813      	ldr	r0, [pc, #76]	@ (800516c <MX_GPIO_Init+0x16c>)
 800511e:	f002 fbef 	bl	8007900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005122:	2318      	movs	r3, #24
 8005124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005126:	2301      	movs	r3, #1
 8005128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800512e:	2300      	movs	r3, #0
 8005130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	480d      	ldr	r0, [pc, #52]	@ (8005170 <MX_GPIO_Init+0x170>)
 800513a:	f002 fbe1 	bl	8007900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800513e:	2320      	movs	r3, #32
 8005140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005146:	2302      	movs	r3, #2
 8005148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	4619      	mov	r1, r3
 8005150:	4807      	ldr	r0, [pc, #28]	@ (8005170 <MX_GPIO_Init+0x170>)
 8005152:	f002 fbd5 	bl	8007900 <HAL_GPIO_Init>

}
 8005156:	bf00      	nop
 8005158:	3728      	adds	r7, #40	@ 0x28
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800
 8005164:	40020800 	.word	0x40020800
 8005168:	40020000 	.word	0x40020000
 800516c:	40020c00 	.word	0x40020c00
 8005170:	40020400 	.word	0x40020400

08005174 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005178:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <MX_I2C1_Init+0x50>)
 800517a:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <MX_I2C1_Init+0x54>)
 800517c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800517e:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <MX_I2C1_Init+0x50>)
 8005180:	4a12      	ldr	r2, [pc, #72]	@ (80051cc <MX_I2C1_Init+0x58>)
 8005182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005184:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <MX_I2C1_Init+0x50>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800518a:	4b0e      	ldr	r3, [pc, #56]	@ (80051c4 <MX_I2C1_Init+0x50>)
 800518c:	2200      	movs	r2, #0
 800518e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005190:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <MX_I2C1_Init+0x50>)
 8005192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005198:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <MX_I2C1_Init+0x50>)
 800519a:	2200      	movs	r2, #0
 800519c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800519e:	4b09      	ldr	r3, [pc, #36]	@ (80051c4 <MX_I2C1_Init+0x50>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051a4:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <MX_I2C1_Init+0x50>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <MX_I2C1_Init+0x50>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051b0:	4804      	ldr	r0, [pc, #16]	@ (80051c4 <MX_I2C1_Init+0x50>)
 80051b2:	f002 fd8d 	bl	8007cd0 <HAL_I2C_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80051bc:	f000 f95c 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000768 	.word	0x20000768
 80051c8:	40005400 	.word	0x40005400
 80051cc:	00061a80 	.word	0x00061a80

080051d0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051d6:	4a13      	ldr	r2, [pc, #76]	@ (8005224 <MX_I2C2_Init+0x54>)
 80051d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80051da:	4b11      	ldr	r3, [pc, #68]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051dc:	4a12      	ldr	r2, [pc, #72]	@ (8005228 <MX_I2C2_Init+0x58>)
 80051de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80051e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80051fa:	4b09      	ldr	r3, [pc, #36]	@ (8005220 <MX_I2C2_Init+0x50>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005200:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <MX_I2C2_Init+0x50>)
 8005202:	2200      	movs	r2, #0
 8005204:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <MX_I2C2_Init+0x50>)
 8005208:	2200      	movs	r2, #0
 800520a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800520c:	4804      	ldr	r0, [pc, #16]	@ (8005220 <MX_I2C2_Init+0x50>)
 800520e:	f002 fd5f 	bl	8007cd0 <HAL_I2C_Init>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005218:	f000 f92e 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800521c:	bf00      	nop
 800521e:	bd80      	pop	{r7, pc}
 8005220:	200007bc 	.word	0x200007bc
 8005224:	40005800 	.word	0x40005800
 8005228:	00061a80 	.word	0x00061a80

0800522c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	@ 0x30
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a32      	ldr	r2, [pc, #200]	@ (8005314 <HAL_I2C_MspInit+0xe8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d12c      	bne.n	80052a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	6313      	str	r3, [r2, #48]	@ 0x30
 800525e:	4b2e      	ldr	r3, [pc, #184]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800526a:	23c0      	movs	r3, #192	@ 0xc0
 800526c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800526e:	2312      	movs	r3, #18
 8005270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005276:	2303      	movs	r3, #3
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800527a:	2304      	movs	r3, #4
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527e:	f107 031c 	add.w	r3, r7, #28
 8005282:	4619      	mov	r1, r3
 8005284:	4825      	ldr	r0, [pc, #148]	@ (800531c <HAL_I2C_MspInit+0xf0>)
 8005286:	f002 fb3b 	bl	8007900 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 8005294:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005298:	6413      	str	r3, [r2, #64]	@ 0x40
 800529a:	4b1f      	ldr	r3, [pc, #124]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80052a6:	e031      	b.n	800530c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005320 <HAL_I2C_MspInit+0xf4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d12c      	bne.n	800530c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	4b18      	ldr	r3, [pc, #96]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ba:	4a17      	ldr	r2, [pc, #92]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80052c2:	4b15      	ldr	r3, [pc, #84]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80052d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052d4:	2312      	movs	r3, #18
 80052d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052dc:	2303      	movs	r3, #3
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80052e0:	2304      	movs	r3, #4
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e4:	f107 031c 	add.w	r3, r7, #28
 80052e8:	4619      	mov	r1, r3
 80052ea:	480c      	ldr	r0, [pc, #48]	@ (800531c <HAL_I2C_MspInit+0xf0>)
 80052ec:	f002 fb08 	bl	8007900 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	4b08      	ldr	r3, [pc, #32]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	4a07      	ldr	r2, [pc, #28]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 80052fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <HAL_I2C_MspInit+0xec>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	bf00      	nop
 800530e:	3730      	adds	r7, #48	@ 0x30
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40005400 	.word	0x40005400
 8005318:	40023800 	.word	0x40023800
 800531c:	40020400 	.word	0x40020400
 8005320:	40005800 	.word	0x40005800

08005324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005328:	f001 fd94 	bl	8006e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800532c:	f000 f81c 	bl	8005368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005330:	f7ff fe66 	bl	8005000 <MX_GPIO_Init>
  MX_DMA_Init();
 8005334:	f7ff f95e 	bl	80045f4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8005338:	f000 f8a4 	bl	8005484 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800533c:	f009 f834 	bl	800e3a8 <MX_FATFS_Init>
  MX_I2C1_Init();
 8005340:	f7ff ff18 	bl	8005174 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005344:	f7ff ff44 	bl	80051d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8005348:	f000 fc88 	bl	8005c5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800534c:	f000 fcb0 	bl	8005cb0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005350:	f000 fcd8 	bl	8005d04 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8005354:	f000 fb10 	bl	8005978 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005358:	f000 fb9a 	bl	8005a90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800535c:	f7ff f9b2 	bl	80046c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005360:	f00c fd74 	bl	8011e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <main+0x40>

08005368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b094      	sub	sp, #80	@ 0x50
 800536c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800536e:	f107 0320 	add.w	r3, r7, #32
 8005372:	2230      	movs	r2, #48	@ 0x30
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f00f fd40 	bl	8014dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800537c:	f107 030c 	add.w	r3, r7, #12
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	4b28      	ldr	r3, [pc, #160]	@ (8005434 <SystemClock_Config+0xcc>)
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	4a27      	ldr	r2, [pc, #156]	@ (8005434 <SystemClock_Config+0xcc>)
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800539a:	6413      	str	r3, [r2, #64]	@ 0x40
 800539c:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <SystemClock_Config+0xcc>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053a8:	2300      	movs	r3, #0
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	4b22      	ldr	r3, [pc, #136]	@ (8005438 <SystemClock_Config+0xd0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <SystemClock_Config+0xd0>)
 80053b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005438 <SystemClock_Config+0xd0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053ce:	2302      	movs	r3, #2
 80053d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80053d8:	2304      	movs	r3, #4
 80053da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80053dc:	23a8      	movs	r3, #168	@ 0xa8
 80053de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053e0:	2302      	movs	r3, #2
 80053e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80053e4:	2307      	movs	r3, #7
 80053e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053e8:	f107 0320 	add.w	r3, r7, #32
 80053ec:	4618      	mov	r0, r3
 80053ee:	f004 fa41 	bl	8009874 <HAL_RCC_OscConfig>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80053f8:	f000 f83e 	bl	8005478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053fc:	230f      	movs	r3, #15
 80053fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005400:	2302      	movs	r3, #2
 8005402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005408:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800540c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800540e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005412:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005414:	f107 030c 	add.w	r3, r7, #12
 8005418:	2105      	movs	r1, #5
 800541a:	4618      	mov	r0, r3
 800541c:	f004 fca2 	bl	8009d64 <HAL_RCC_ClockConfig>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005426:	f000 f827 	bl	8005478 <Error_Handler>
  }
}
 800542a:	bf00      	nop
 800542c:	3750      	adds	r7, #80	@ 0x50
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	40007000 	.word	0x40007000

0800543c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800544e:	f001 fd23 	bl	8006e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
 if(htim == timer_name())
 8005452:	f7ff f8c3 	bl	80045dc <timer_name>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4293      	cmp	r3, r2
 800545c:	d106      	bne.n	800546c <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIMER_CALLBACK();
 800545e:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8005466:	33ff      	adds	r3, #255	@ 0xff
 8005468:	4a02      	ldr	r2, [pc, #8]	@ (8005474 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800546a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000728 	.word	0x20000728

08005478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800547c:	b672      	cpsid	i
}
 800547e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <Error_Handler+0x8>

08005484 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005488:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 800548a:	4a0f      	ldr	r2, [pc, #60]	@ (80054c8 <MX_SDIO_SD_Init+0x44>)
 800548c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 8005490:	2200      	movs	r2, #0
 8005492:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 8005496:	2200      	movs	r2, #0
 8005498:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 800549c:	2200      	movs	r2, #0
 800549e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80054a0:	4b08      	ldr	r3, [pc, #32]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 80054ae:	2204      	movs	r2, #4
 80054b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 4;
 80054b2:	4b04      	ldr	r3, [pc, #16]	@ (80054c4 <MX_SDIO_SD_Init+0x40>)
 80054b4:	2204      	movs	r2, #4
 80054b6:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000810 	.word	0x20000810
 80054c8:	40012c00 	.word	0x40012c00

080054cc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	@ 0x28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a68      	ldr	r2, [pc, #416]	@ (800568c <HAL_SD_MspInit+0x1c0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f040 80c9 	bne.w	8005682 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	4b66      	ldr	r3, [pc, #408]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 80054f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f8:	4a65      	ldr	r2, [pc, #404]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 80054fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8005500:	4b63      	ldr	r3, [pc, #396]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 8005502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	4b5f      	ldr	r3, [pc, #380]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	4a5e      	ldr	r2, [pc, #376]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	6313      	str	r3, [r2, #48]	@ 0x30
 800551c:	4b5c      	ldr	r3, [pc, #368]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	4b58      	ldr	r3, [pc, #352]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005530:	4a57      	ldr	r2, [pc, #348]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 8005532:	f043 0308 	orr.w	r3, r3, #8
 8005536:	6313      	str	r3, [r2, #48]	@ 0x30
 8005538:	4b55      	ldr	r3, [pc, #340]	@ (8005690 <HAL_SD_MspInit+0x1c4>)
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005544:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	2303      	movs	r3, #3
 8005554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005556:	230c      	movs	r3, #12
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800555a:	f107 0314 	add.w	r3, r7, #20
 800555e:	4619      	mov	r1, r3
 8005560:	484c      	ldr	r0, [pc, #304]	@ (8005694 <HAL_SD_MspInit+0x1c8>)
 8005562:	f002 f9cd 	bl	8007900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005566:	2304      	movs	r3, #4
 8005568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800556a:	2302      	movs	r3, #2
 800556c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005572:	2303      	movs	r3, #3
 8005574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005576:	230c      	movs	r3, #12
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4619      	mov	r1, r3
 8005580:	4845      	ldr	r0, [pc, #276]	@ (8005698 <HAL_SD_MspInit+0x1cc>)
 8005582:	f002 f9bd 	bl	8007900 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005586:	4b45      	ldr	r3, [pc, #276]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 8005588:	4a45      	ldr	r2, [pc, #276]	@ (80056a0 <HAL_SD_MspInit+0x1d4>)
 800558a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800558c:	4b43      	ldr	r3, [pc, #268]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 800558e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005592:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005594:	4b41      	ldr	r3, [pc, #260]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 8005596:	2200      	movs	r2, #0
 8005598:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800559a:	4b40      	ldr	r3, [pc, #256]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 800559c:	2200      	movs	r2, #0
 800559e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055a0:	4b3e      	ldr	r3, [pc, #248]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80055a8:	4b3c      	ldr	r3, [pc, #240]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80055ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055b0:	4b3a      	ldr	r3, [pc, #232]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80055b8:	4b38      	ldr	r3, [pc, #224]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055ba:	2220      	movs	r2, #32
 80055bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055be:	4b37      	ldr	r3, [pc, #220]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80055c4:	4b35      	ldr	r3, [pc, #212]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055c6:	2204      	movs	r2, #4
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80055ca:	4b34      	ldr	r3, [pc, #208]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055cc:	2203      	movs	r2, #3
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80055d0:	4b32      	ldr	r3, [pc, #200]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80055d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80055d8:	4b30      	ldr	r3, [pc, #192]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80055de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80055e0:	482e      	ldr	r0, [pc, #184]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055e2:	f001 fd7f 	bl	80070e4 <HAL_DMA_Init>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80055ec:	f7ff ff44 	bl	8005478 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80055f6:	4a29      	ldr	r2, [pc, #164]	@ (800569c <HAL_SD_MspInit+0x1d0>)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80055fc:	4b29      	ldr	r3, [pc, #164]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 80055fe:	4a2a      	ldr	r2, [pc, #168]	@ (80056a8 <HAL_SD_MspInit+0x1dc>)
 8005600:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005602:	4b28      	ldr	r3, [pc, #160]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005604:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005608:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800560a:	4b26      	ldr	r3, [pc, #152]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 800560c:	2240      	movs	r2, #64	@ 0x40
 800560e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005610:	4b24      	ldr	r3, [pc, #144]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005616:	4b23      	ldr	r3, [pc, #140]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800561c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800561e:	4b21      	ldr	r3, [pc, #132]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005620:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005624:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005626:	4b1f      	ldr	r3, [pc, #124]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005628:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800562c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800562e:	4b1d      	ldr	r3, [pc, #116]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005630:	2220      	movs	r2, #32
 8005632:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005634:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005636:	2200      	movs	r2, #0
 8005638:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800563a:	4b1a      	ldr	r3, [pc, #104]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 800563c:	2204      	movs	r2, #4
 800563e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005640:	4b18      	ldr	r3, [pc, #96]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005642:	2203      	movs	r2, #3
 8005644:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005646:	4b17      	ldr	r3, [pc, #92]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005648:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800564c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800564e:	4b15      	ldr	r3, [pc, #84]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005650:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005654:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005656:	4813      	ldr	r0, [pc, #76]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 8005658:	f001 fd44 	bl	80070e4 <HAL_DMA_Init>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8005662:	f7ff ff09 	bl	8005478 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a0e      	ldr	r2, [pc, #56]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 800566a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800566c:	4a0d      	ldr	r2, [pc, #52]	@ (80056a4 <HAL_SD_MspInit+0x1d8>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8005672:	2200      	movs	r2, #0
 8005674:	2105      	movs	r1, #5
 8005676:	2031      	movs	r0, #49	@ 0x31
 8005678:	f001 fd0a 	bl	8007090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800567c:	2031      	movs	r0, #49	@ 0x31
 800567e:	f001 fd23 	bl	80070c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005682:	bf00      	nop
 8005684:	3728      	adds	r7, #40	@ 0x28
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40023800 	.word	0x40023800
 8005694:	40020800 	.word	0x40020800
 8005698:	40020c00 	.word	0x40020c00
 800569c:	20000894 	.word	0x20000894
 80056a0:	40026458 	.word	0x40026458
 80056a4:	200008f4 	.word	0x200008f4
 80056a8:	400264a0 	.word	0x400264a0

080056ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <HAL_MspInit+0x54>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	4a11      	ldr	r2, [pc, #68]	@ (8005700 <HAL_MspInit+0x54>)
 80056bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80056c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <HAL_MspInit+0x54>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_MspInit+0x54>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005700 <HAL_MspInit+0x54>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056de:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <HAL_MspInit+0x54>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056ea:	2200      	movs	r2, #0
 80056ec:	210f      	movs	r1, #15
 80056ee:	f06f 0001 	mvn.w	r0, #1
 80056f2:	f001 fccd 	bl	8007090 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800

08005704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08e      	sub	sp, #56	@ 0x38
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	4b34      	ldr	r3, [pc, #208]	@ (80057ec <HAL_InitTick+0xe8>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	4a33      	ldr	r2, [pc, #204]	@ (80057ec <HAL_InitTick+0xe8>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6413      	str	r3, [r2, #64]	@ 0x40
 8005724:	4b31      	ldr	r3, [pc, #196]	@ (80057ec <HAL_InitTick+0xe8>)
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005730:	f107 0210 	add.w	r2, r7, #16
 8005734:	f107 0314 	add.w	r3, r7, #20
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f004 fd32 	bl	800a1a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800574a:	f004 fd03 	bl	800a154 <HAL_RCC_GetPCLK1Freq>
 800574e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005750:	e004      	b.n	800575c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005752:	f004 fcff 	bl	800a154 <HAL_RCC_GetPCLK1Freq>
 8005756:	4603      	mov	r3, r0
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800575c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575e:	4a24      	ldr	r2, [pc, #144]	@ (80057f0 <HAL_InitTick+0xec>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	0c9b      	lsrs	r3, r3, #18
 8005766:	3b01      	subs	r3, #1
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800576a:	4b22      	ldr	r3, [pc, #136]	@ (80057f4 <HAL_InitTick+0xf0>)
 800576c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005772:	4b20      	ldr	r3, [pc, #128]	@ (80057f4 <HAL_InitTick+0xf0>)
 8005774:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005778:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800577a:	4a1e      	ldr	r2, [pc, #120]	@ (80057f4 <HAL_InitTick+0xf0>)
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005780:	4b1c      	ldr	r3, [pc, #112]	@ (80057f4 <HAL_InitTick+0xf0>)
 8005782:	2200      	movs	r2, #0
 8005784:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005786:	4b1b      	ldr	r3, [pc, #108]	@ (80057f4 <HAL_InitTick+0xf0>)
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800578c:	4b19      	ldr	r3, [pc, #100]	@ (80057f4 <HAL_InitTick+0xf0>)
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8005792:	4818      	ldr	r0, [pc, #96]	@ (80057f4 <HAL_InitTick+0xf0>)
 8005794:	f005 fe68 	bl	800b468 <HAL_TIM_Base_Init>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800579e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d11b      	bne.n	80057de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80057a6:	4813      	ldr	r0, [pc, #76]	@ (80057f4 <HAL_InitTick+0xf0>)
 80057a8:	f005 feae 	bl	800b508 <HAL_TIM_Base_Start_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80057b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d111      	bne.n	80057de <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80057ba:	201c      	movs	r0, #28
 80057bc:	f001 fc84 	bl	80070c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d808      	bhi.n	80057d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80057c6:	2200      	movs	r2, #0
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	201c      	movs	r0, #28
 80057cc:	f001 fc60 	bl	8007090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057d0:	4a09      	ldr	r2, [pc, #36]	@ (80057f8 <HAL_InitTick+0xf4>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e002      	b.n	80057de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80057de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3738      	adds	r7, #56	@ 0x38
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800
 80057f0:	431bde83 	.word	0x431bde83
 80057f4:	20000954 	.word	0x20000954
 80057f8:	200000b4 	.word	0x200000b4

080057fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <NMI_Handler+0x4>

08005804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <HardFault_Handler+0x4>

0800580c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <MemManage_Handler+0x4>

08005814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <BusFault_Handler+0x4>

0800581c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <UsageFault_Handler+0x4>

08005824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005838:	4802      	ldr	r0, [pc, #8]	@ (8005844 <DMA1_Stream1_IRQHandler+0x10>)
 800583a:	f001 fdeb 	bl	8007414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000b08 	.word	0x20000b08

08005848 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800584c:	4802      	ldr	r0, [pc, #8]	@ (8005858 <TIM2_IRQHandler+0x10>)
 800584e:	f005 ffed 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000954 	.word	0x20000954

0800585c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005860:	4802      	ldr	r0, [pc, #8]	@ (800586c <TIM4_IRQHandler+0x10>)
 8005862:	f005 ffe3 	bl	800b82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200009e8 	.word	0x200009e8

08005870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005874:	4802      	ldr	r0, [pc, #8]	@ (8005880 <USART1_IRQHandler+0x10>)
 8005876:	f006 ff4d 	bl	800c714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000a30 	.word	0x20000a30

08005884 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005888:	4802      	ldr	r0, [pc, #8]	@ (8005894 <USART2_IRQHandler+0x10>)
 800588a:	f006 ff43 	bl	800c714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000a78 	.word	0x20000a78

08005898 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800589c:	4802      	ldr	r0, [pc, #8]	@ (80058a8 <USART3_IRQHandler+0x10>)
 800589e:	f006 ff39 	bl	800c714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000ac0 	.word	0x20000ac0

080058ac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80058b0:	4802      	ldr	r0, [pc, #8]	@ (80058bc <SDIO_IRQHandler+0x10>)
 80058b2:	f004 ff21 	bl	800a6f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000810 	.word	0x20000810

080058c0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80058c4:	4802      	ldr	r0, [pc, #8]	@ (80058d0 <DMA2_Stream3_IRQHandler+0x10>)
 80058c6:	f001 fda5 	bl	8007414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000894 	.word	0x20000894

080058d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80058d8:	4802      	ldr	r0, [pc, #8]	@ (80058e4 <DMA2_Stream6_IRQHandler+0x10>)
 80058da:	f001 fd9b 	bl	8007414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	200008f4 	.word	0x200008f4

080058e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058f0:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <_sbrk+0x5c>)
 80058f2:	4b15      	ldr	r3, [pc, #84]	@ (8005948 <_sbrk+0x60>)
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058fc:	4b13      	ldr	r3, [pc, #76]	@ (800594c <_sbrk+0x64>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005904:	4b11      	ldr	r3, [pc, #68]	@ (800594c <_sbrk+0x64>)
 8005906:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <_sbrk+0x68>)
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800590a:	4b10      	ldr	r3, [pc, #64]	@ (800594c <_sbrk+0x64>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d207      	bcs.n	8005928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005918:	f00f fa88 	bl	8014e2c <__errno>
 800591c:	4603      	mov	r3, r0
 800591e:	220c      	movs	r2, #12
 8005920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	e009      	b.n	800593c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005928:	4b08      	ldr	r3, [pc, #32]	@ (800594c <_sbrk+0x64>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800592e:	4b07      	ldr	r3, [pc, #28]	@ (800594c <_sbrk+0x64>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	4a05      	ldr	r2, [pc, #20]	@ (800594c <_sbrk+0x64>)
 8005938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20020000 	.word	0x20020000
 8005948:	00004000 	.word	0x00004000
 800594c:	2000099c 	.word	0x2000099c
 8005950:	200033d8 	.word	0x200033d8

08005954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <SystemInit+0x20>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	4a05      	ldr	r2, [pc, #20]	@ (8005974 <SystemInit+0x20>)
 8005960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	@ 0x38
 800597c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800597e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	609a      	str	r2, [r3, #8]
 800598a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800598c:	f107 0320 	add.w	r3, r7, #32
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]
 80059a4:	615a      	str	r2, [r3, #20]
 80059a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059a8:	4b37      	ldr	r3, [pc, #220]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059aa:	4a38      	ldr	r2, [pc, #224]	@ (8005a8c <MX_TIM3_Init+0x114>)
 80059ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80059ae:	4b36      	ldr	r3, [pc, #216]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059b0:	2247      	movs	r2, #71	@ 0x47
 80059b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059b4:	4b34      	ldr	r3, [pc, #208]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80059ba:	4b33      	ldr	r3, [pc, #204]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059c2:	4b31      	ldr	r3, [pc, #196]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059ca:	2280      	movs	r2, #128	@ 0x80
 80059cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80059ce:	482e      	ldr	r0, [pc, #184]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059d0:	f005 fd4a 	bl	800b468 <HAL_TIM_Base_Init>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80059da:	f7ff fd4d 	bl	8005478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80059e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80059e8:	4619      	mov	r1, r3
 80059ea:	4827      	ldr	r0, [pc, #156]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059ec:	f006 f8d0 	bl	800bb90 <HAL_TIM_ConfigClockSource>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80059f6:	f7ff fd3f 	bl	8005478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80059fa:	4823      	ldr	r0, [pc, #140]	@ (8005a88 <MX_TIM3_Init+0x110>)
 80059fc:	f005 fdf4 	bl	800b5e8 <HAL_TIM_PWM_Init>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005a06:	f7ff fd37 	bl	8005478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a12:	f107 0320 	add.w	r3, r7, #32
 8005a16:	4619      	mov	r1, r3
 8005a18:	481b      	ldr	r0, [pc, #108]	@ (8005a88 <MX_TIM3_Init+0x110>)
 8005a1a:	f006 fcc5 	bl	800c3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005a24:	f7ff fd28 	bl	8005478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a28:	2360      	movs	r3, #96	@ 0x60
 8005a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4812      	ldr	r0, [pc, #72]	@ (8005a88 <MX_TIM3_Init+0x110>)
 8005a40:	f005 ffe4 	bl	800ba0c <HAL_TIM_PWM_ConfigChannel>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005a4a:	f7ff fd15 	bl	8005478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	2204      	movs	r2, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	480c      	ldr	r0, [pc, #48]	@ (8005a88 <MX_TIM3_Init+0x110>)
 8005a56:	f005 ffd9 	bl	800ba0c <HAL_TIM_PWM_ConfigChannel>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005a60:	f7ff fd0a 	bl	8005478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	2208      	movs	r2, #8
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4807      	ldr	r0, [pc, #28]	@ (8005a88 <MX_TIM3_Init+0x110>)
 8005a6c:	f005 ffce 	bl	800ba0c <HAL_TIM_PWM_ConfigChannel>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005a76:	f7ff fcff 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a7a:	4803      	ldr	r0, [pc, #12]	@ (8005a88 <MX_TIM3_Init+0x110>)
 8005a7c:	f000 f894 	bl	8005ba8 <HAL_TIM_MspPostInit>

}
 8005a80:	bf00      	nop
 8005a82:	3738      	adds	r7, #56	@ 0x38
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200009a0 	.word	0x200009a0
 8005a8c:	40000400 	.word	0x40000400

08005a90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005aac:	4b1d      	ldr	r3, [pc, #116]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005aae:	4a1e      	ldr	r2, [pc, #120]	@ (8005b28 <MX_TIM4_Init+0x98>)
 8005ab0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005ab4:	2247      	movs	r2, #71	@ 0x47
 8005ab6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005abe:	4b19      	ldr	r3, [pc, #100]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005ac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ac4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac6:	4b17      	ldr	r3, [pc, #92]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005acc:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005ad2:	4814      	ldr	r0, [pc, #80]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005ad4:	f005 fcc8 	bl	800b468 <HAL_TIM_Base_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005ade:	f7ff fccb 	bl	8005478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ae8:	f107 0308 	add.w	r3, r7, #8
 8005aec:	4619      	mov	r1, r3
 8005aee:	480d      	ldr	r0, [pc, #52]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005af0:	f006 f84e 	bl	800bb90 <HAL_TIM_ConfigClockSource>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005afa:	f7ff fcbd 	bl	8005478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005afe:	2300      	movs	r3, #0
 8005b00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005b06:	463b      	mov	r3, r7
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4806      	ldr	r0, [pc, #24]	@ (8005b24 <MX_TIM4_Init+0x94>)
 8005b0c:	f006 fc4c 	bl	800c3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005b16:	f7ff fcaf 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	200009e8 	.word	0x200009e8
 8005b28:	40000800 	.word	0x40000800

08005b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a18      	ldr	r2, [pc, #96]	@ (8005b9c <HAL_TIM_Base_MspInit+0x70>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	4b17      	ldr	r3, [pc, #92]	@ (8005ba0 <HAL_TIM_Base_MspInit+0x74>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	4a16      	ldr	r2, [pc, #88]	@ (8005ba0 <HAL_TIM_Base_MspInit+0x74>)
 8005b48:	f043 0302 	orr.w	r3, r3, #2
 8005b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b4e:	4b14      	ldr	r3, [pc, #80]	@ (8005ba0 <HAL_TIM_Base_MspInit+0x74>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005b5a:	e01a      	b.n	8005b92 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a10      	ldr	r2, [pc, #64]	@ (8005ba4 <HAL_TIM_Base_MspInit+0x78>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d115      	bne.n	8005b92 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <HAL_TIM_Base_MspInit+0x74>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba0 <HAL_TIM_Base_MspInit+0x74>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <HAL_TIM_Base_MspInit+0x74>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2106      	movs	r1, #6
 8005b86:	201e      	movs	r0, #30
 8005b88:	f001 fa82 	bl	8007090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005b8c:	201e      	movs	r0, #30
 8005b8e:	f001 fa9b 	bl	80070c8 <HAL_NVIC_EnableIRQ>
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40000800 	.word	0x40000800

08005ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	@ 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a21      	ldr	r2, [pc, #132]	@ (8005c4c <HAL_TIM_MspPostInit+0xa4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d13b      	bne.n	8005c42 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <HAL_TIM_MspPostInit+0xa8>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c50 <HAL_TIM_MspPostInit+0xa8>)
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bda:	4b1d      	ldr	r3, [pc, #116]	@ (8005c50 <HAL_TIM_MspPostInit+0xa8>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4b19      	ldr	r3, [pc, #100]	@ (8005c50 <HAL_TIM_MspPostInit+0xa8>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	4a18      	ldr	r2, [pc, #96]	@ (8005c50 <HAL_TIM_MspPostInit+0xa8>)
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bf6:	4b16      	ldr	r3, [pc, #88]	@ (8005c50 <HAL_TIM_MspPostInit+0xa8>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c02:	23c0      	movs	r3, #192	@ 0xc0
 8005c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c06:	2302      	movs	r3, #2
 8005c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c12:	2302      	movs	r3, #2
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	480d      	ldr	r0, [pc, #52]	@ (8005c54 <HAL_TIM_MspPostInit+0xac>)
 8005c1e:	f001 fe6f 	bl	8007900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005c22:	2301      	movs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c26:	2302      	movs	r3, #2
 8005c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c32:	2302      	movs	r3, #2
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c36:	f107 0314 	add.w	r3, r7, #20
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4806      	ldr	r0, [pc, #24]	@ (8005c58 <HAL_TIM_MspPostInit+0xb0>)
 8005c3e:	f001 fe5f 	bl	8007900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005c42:	bf00      	nop
 8005c44:	3728      	adds	r7, #40	@ 0x28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40020400 	.word	0x40020400

08005c5c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c60:	4b11      	ldr	r3, [pc, #68]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c62:	4a12      	ldr	r2, [pc, #72]	@ (8005cac <MX_USART1_UART_Init+0x50>)
 8005c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c66:	4b10      	ldr	r3, [pc, #64]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c80:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c82:	220c      	movs	r2, #12
 8005c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c86:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c92:	4805      	ldr	r0, [pc, #20]	@ (8005ca8 <MX_USART1_UART_Init+0x4c>)
 8005c94:	f006 fc18 	bl	800c4c8 <HAL_UART_Init>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005c9e:	f7ff fbeb 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000a30 	.word	0x20000a30
 8005cac:	40011000 	.word	0x40011000

08005cb0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005cb4:	4b11      	ldr	r3, [pc, #68]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cb6:	4a12      	ldr	r2, [pc, #72]	@ (8005d00 <MX_USART2_UART_Init+0x50>)
 8005cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005cba:	4b10      	ldr	r3, [pc, #64]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005cce:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005cd4:	4b09      	ldr	r3, [pc, #36]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cd6:	220c      	movs	r2, #12
 8005cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cda:	4b08      	ldr	r3, [pc, #32]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ce0:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ce6:	4805      	ldr	r0, [pc, #20]	@ (8005cfc <MX_USART2_UART_Init+0x4c>)
 8005ce8:	f006 fbee 	bl	800c4c8 <HAL_UART_Init>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005cf2:	f7ff fbc1 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005cf6:	bf00      	nop
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000a78 	.word	0x20000a78
 8005d00:	40004400 	.word	0x40004400

08005d04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005d08:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d0a:	4a12      	ldr	r2, [pc, #72]	@ (8005d54 <MX_USART3_UART_Init+0x50>)
 8005d0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005d0e:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005d14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d16:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d22:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d2a:	220c      	movs	r2, #12
 8005d2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d2e:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d3a:	4805      	ldr	r0, [pc, #20]	@ (8005d50 <MX_USART3_UART_Init+0x4c>)
 8005d3c:	f006 fbc4 	bl	800c4c8 <HAL_UART_Init>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005d46:	f7ff fb97 	bl	8005478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005d4a:	bf00      	nop
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000ac0 	.word	0x20000ac0
 8005d54:	40004800 	.word	0x40004800

08005d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08e      	sub	sp, #56	@ 0x38
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	60da      	str	r2, [r3, #12]
 8005d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a6f      	ldr	r2, [pc, #444]	@ (8005f34 <HAL_UART_MspInit+0x1dc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d135      	bne.n	8005de6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d82:	4a6d      	ldr	r2, [pc, #436]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005d84:	f043 0310 	orr.w	r3, r3, #16
 8005d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d8a:	4b6b      	ldr	r3, [pc, #428]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	4b67      	ldr	r3, [pc, #412]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	4a66      	ldr	r2, [pc, #408]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005da6:	4b64      	ldr	r3, [pc, #400]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005db2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db8:	2302      	movs	r3, #2
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dc4:	2307      	movs	r3, #7
 8005dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dcc:	4619      	mov	r1, r3
 8005dce:	485b      	ldr	r0, [pc, #364]	@ (8005f3c <HAL_UART_MspInit+0x1e4>)
 8005dd0:	f001 fd96 	bl	8007900 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2105      	movs	r1, #5
 8005dd8:	2025      	movs	r0, #37	@ 0x25
 8005dda:	f001 f959 	bl	8007090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005dde:	2025      	movs	r0, #37	@ 0x25
 8005de0:	f001 f972 	bl	80070c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005de4:	e0a1      	b.n	8005f2a <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART2)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a55      	ldr	r2, [pc, #340]	@ (8005f40 <HAL_UART_MspInit+0x1e8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d134      	bne.n	8005e5a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	4b50      	ldr	r3, [pc, #320]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	4a4f      	ldr	r2, [pc, #316]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e00:	4b4d      	ldr	r3, [pc, #308]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	4b49      	ldr	r3, [pc, #292]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e14:	4a48      	ldr	r2, [pc, #288]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e1c:	4b46      	ldr	r3, [pc, #280]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e28:	230c      	movs	r3, #12
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e34:	2303      	movs	r3, #3
 8005e36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e38:	2307      	movs	r3, #7
 8005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e40:	4619      	mov	r1, r3
 8005e42:	483e      	ldr	r0, [pc, #248]	@ (8005f3c <HAL_UART_MspInit+0x1e4>)
 8005e44:	f001 fd5c 	bl	8007900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2105      	movs	r1, #5
 8005e4c:	2026      	movs	r0, #38	@ 0x26
 8005e4e:	f001 f91f 	bl	8007090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e52:	2026      	movs	r0, #38	@ 0x26
 8005e54:	f001 f938 	bl	80070c8 <HAL_NVIC_EnableIRQ>
}
 8005e58:	e067      	b.n	8005f2a <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART3)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a39      	ldr	r2, [pc, #228]	@ (8005f44 <HAL_UART_MspInit+0x1ec>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d162      	bne.n	8005f2a <HAL_UART_MspInit+0x1d2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	4b33      	ldr	r3, [pc, #204]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	4a32      	ldr	r2, [pc, #200]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e74:	4b30      	ldr	r3, [pc, #192]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	4b2c      	ldr	r3, [pc, #176]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	4a2b      	ldr	r2, [pc, #172]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e8a:	f043 0308 	orr.w	r3, r3, #8
 8005e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e90:	4b29      	ldr	r3, [pc, #164]	@ (8005f38 <HAL_UART_MspInit+0x1e0>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005eae:	2307      	movs	r3, #7
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4823      	ldr	r0, [pc, #140]	@ (8005f48 <HAL_UART_MspInit+0x1f0>)
 8005eba:	f001 fd21 	bl	8007900 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005ebe:	4b23      	ldr	r3, [pc, #140]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ec0:	4a23      	ldr	r2, [pc, #140]	@ (8005f50 <HAL_UART_MspInit+0x1f8>)
 8005ec2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005ec4:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ec6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005eca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ede:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ee6:	4b19      	ldr	r3, [pc, #100]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005eec:	4b17      	ldr	r3, [pc, #92]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ef2:	4b16      	ldr	r3, [pc, #88]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef8:	4b14      	ldr	r3, [pc, #80]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005efe:	4813      	ldr	r0, [pc, #76]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005f00:	f001 f8f0 	bl	80070e4 <HAL_DMA_Init>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8005f0a:	f7ff fab5 	bl	8005478 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a0e      	ldr	r2, [pc, #56]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005f12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f14:	4a0d      	ldr	r2, [pc, #52]	@ (8005f4c <HAL_UART_MspInit+0x1f4>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2105      	movs	r1, #5
 8005f1e:	2027      	movs	r0, #39	@ 0x27
 8005f20:	f001 f8b6 	bl	8007090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005f24:	2027      	movs	r0, #39	@ 0x27
 8005f26:	f001 f8cf 	bl	80070c8 <HAL_NVIC_EnableIRQ>
}
 8005f2a:	bf00      	nop
 8005f2c:	3738      	adds	r7, #56	@ 0x38
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40011000 	.word	0x40011000
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	40020000 	.word	0x40020000
 8005f40:	40004400 	.word	0x40004400
 8005f44:	40004800 	.word	0x40004800
 8005f48:	40020c00 	.word	0x40020c00
 8005f4c:	20000b08 	.word	0x20000b08
 8005f50:	40026028 	.word	0x40026028

08005f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005f8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005f58:	f7ff fcfc 	bl	8005954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f5c:	480c      	ldr	r0, [pc, #48]	@ (8005f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f5e:	490d      	ldr	r1, [pc, #52]	@ (8005f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f60:	4a0d      	ldr	r2, [pc, #52]	@ (8005f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f64:	e002      	b.n	8005f6c <LoopCopyDataInit>

08005f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f6a:	3304      	adds	r3, #4

08005f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f70:	d3f9      	bcc.n	8005f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f72:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f74:	4c0a      	ldr	r4, [pc, #40]	@ (8005fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f78:	e001      	b.n	8005f7e <LoopFillZerobss>

08005f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f7c:	3204      	adds	r2, #4

08005f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f80:	d3fb      	bcc.n	8005f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f82:	f00e ff59 	bl	8014e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f86:	f7ff f9cd 	bl	8005324 <main>
  bx  lr    
 8005f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f94:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8005f98:	08015f58 	.word	0x08015f58
  ldr r2, =_sbss
 8005f9c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8005fa0:	200033d4 	.word	0x200033d4

08005fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fa4:	e7fe      	b.n	8005fa4 <ADC_IRQHandler>
	...

08005fa8 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d820      	bhi.n	8005ffa <AT24Cxx_get_max_addr+0x52>
 8005fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <AT24Cxx_get_max_addr+0x18>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005fd9 	.word	0x08005fd9
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fe3 	.word	0x08005fe3
 8005fcc:	08005fe9 	.word	0x08005fe9
 8005fd0:	08005fef 	.word	0x08005fef
 8005fd4:	08005ff5 	.word	0x08005ff5
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8005fd8:	237f      	movs	r3, #127	@ 0x7f
 8005fda:	e00f      	b.n	8005ffc <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8005fdc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005fe0:	e00c      	b.n	8005ffc <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8005fe2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8005fe6:	e009      	b.n	8005ffc <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8005fe8:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8005fec:	e006      	b.n	8005ffc <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8005fee:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005ff2:	e003      	b.n	8005ffc <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8005ff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ff8:	e000      	b.n	8005ffc <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8005ffa:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	791b      	ldrb	r3, [r3, #4]
 8006014:	2b05      	cmp	r3, #5
 8006016:	d81b      	bhi.n	8006050 <AT24Cxx_get_pg_size+0x48>
 8006018:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <AT24Cxx_get_pg_size+0x18>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006039 	.word	0x08006039
 8006024:	0800603d 	.word	0x0800603d
 8006028:	08006041 	.word	0x08006041
 800602c:	08006045 	.word	0x08006045
 8006030:	08006049 	.word	0x08006049
 8006034:	0800604d 	.word	0x0800604d
	case AT24C01:
		return AT24C01_PG_SIZE;
 8006038:	2308      	movs	r3, #8
 800603a:	e00a      	b.n	8006052 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 800603c:	2320      	movs	r3, #32
 800603e:	e008      	b.n	8006052 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8006040:	2320      	movs	r3, #32
 8006042:	e006      	b.n	8006052 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8006044:	2340      	movs	r3, #64	@ 0x40
 8006046:	e004      	b.n	8006052 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8006048:	2340      	movs	r3, #64	@ 0x40
 800604a:	e002      	b.n	8006052 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	e000      	b.n	8006052 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8006050:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	460b      	mov	r3, r1
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800606e:	2114      	movs	r1, #20
 8006070:	2001      	movs	r0, #1
 8006072:	f00e fdf9 	bl	8014c68 <calloc>
 8006076:	4603      	mov	r3, r0
 8006078:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <AT24Cxx_init+0x26>
		return at_init_err;
 8006080:	f04f 33ff 	mov.w	r3, #4294967295
 8006084:	e028      	b.n	80060d8 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
 800608a:	e007      	b.n	800609c <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 800608c:	7dfa      	ldrb	r2, [r7, #23]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2100      	movs	r1, #0
 8006092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	3301      	adds	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b07      	cmp	r3, #7
 80060a0:	d9f4      	bls.n	800608c <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2200      	movs	r2, #0
 80060ae:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2204      	movs	r2, #4
 80060ba:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2201      	movs	r2, #1
 80060c6:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	601a      	str	r2, [r3, #0]

	return at_ok;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	460b      	mov	r3, r1
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <AT24Cxx_add_dev+0x22>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d902      	bls.n	8006108 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8006102:	f06f 0301 	mvn.w	r3, #1
 8006106:	e03e      	b.n	8006186 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8006108:	2114      	movs	r1, #20
 800610a:	2001      	movs	r0, #1
 800610c:	f00e fdac 	bl	8014c68 <calloc>
 8006110:	4603      	mov	r3, r0
 8006112:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800611a:	f06f 0301 	mvn.w	r3, #1
 800611e:	e032      	b.n	8006186 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8006120:	7afb      	ldrb	r3, [r7, #11]
 8006122:	b29a      	uxth	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006134:	1e5a      	subs	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2204      	movs	r2, #4
 8006144:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2201      	movs	r2, #1
 8006150:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006158:	3301      	adds	r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006178:	1e9a      	subs	r2, r3, #2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	60da      	str	r2, [r3, #12]
	return at_ok;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 800618e:	b5b0      	push	{r4, r5, r7, lr}
 8006190:	b08a      	sub	sp, #40	@ 0x28
 8006192:	af04      	add	r7, sp, #16
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	4611      	mov	r1, r2
 800619a:	461a      	mov	r2, r3
 800619c:	460b      	mov	r3, r1
 800619e:	80fb      	strh	r3, [r7, #6]
 80061a0:	4613      	mov	r3, r2
 80061a2:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff ff2f 	bl	8006008 <AT24Cxx_get_pg_size>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	7dba      	ldrb	r2, [r7, #22]
 80061b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80061b6:	fb01 f202 	mul.w	r2, r1, r2
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	7dba      	ldrb	r2, [r7, #22]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 80061c4:	88ba      	ldrh	r2, [r7, #4]
 80061c6:	7d7b      	ldrb	r3, [r7, #21]
 80061c8:	1ad2      	subs	r2, r2, r3
 80061ca:	7dbb      	ldrb	r3, [r7, #22]
 80061cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80061d0:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 80061d2:	88ba      	ldrh	r2, [r7, #4]
 80061d4:	7d7b      	ldrb	r3, [r7, #21]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	7dba      	ldrb	r2, [r7, #22]
 80061da:	fb93 f1f2 	sdiv	r1, r3, r2
 80061de:	fb01 f202 	mul.w	r2, r1, r2
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	7d7b      	ldrb	r3, [r7, #21]
 80061ea:	4413      	add	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	dd23      	ble.n	8006238 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	7d7b      	ldrb	r3, [r7, #21]
 80061f4:	18d4      	adds	r4, r2, r3
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fed6 	bl	8005fa8 <AT24Cxx_get_max_addr>
 80061fc:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 80061fe:	429c      	cmp	r4, r3
 8006200:	da1a      	bge.n	8006238 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006202:	bf00      	nop
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	b21b      	sxth	r3, r3
 8006210:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006214:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006216:	b299      	uxth	r1, r3
 8006218:	7d7b      	ldrb	r3, [r7, #21]
 800621a:	b29b      	uxth	r3, r3
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006222:	9402      	str	r4, [sp, #8]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2310      	movs	r3, #16
 800622c:	f002 f9c4 	bl	80085b8 <HAL_I2C_Mem_Write>
 8006230:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e6      	bne.n	8006204 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8006236:	e002      	b.n	800623e <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8006238:	f06f 0304 	mvn.w	r3, #4
 800623c:	e0a5      	b.n	800638a <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
 8006242:	e04e      	b.n	80062e2 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	7d7b      	ldrb	r3, [r7, #21]
 8006248:	441a      	add	r2, r3
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	7db9      	ldrb	r1, [r7, #22]
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd3e      	ble.n	80062d6 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	7d7b      	ldrb	r3, [r7, #21]
 800625c:	441a      	add	r2, r3
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	7db9      	ldrb	r1, [r7, #22]
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	18d4      	adds	r4, r2, r3
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fe9d 	bl	8005fa8 <AT24Cxx_get_max_addr>
 800626e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006270:	429c      	cmp	r4, r3
 8006272:	da30      	bge.n	80062d6 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006274:	bf00      	nop
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	88db      	ldrh	r3, [r3, #6]
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	b21b      	sxth	r3, r3
 8006282:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006286:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006288:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800628a:	7d7b      	ldrb	r3, [r7, #21]
 800628c:	b29a      	uxth	r2, r3
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	4413      	add	r3, r2
 8006292:	b29a      	uxth	r2, r3
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	b299      	uxth	r1, r3
 8006298:	7dbb      	ldrb	r3, [r7, #22]
 800629a:	b29b      	uxth	r3, r3
 800629c:	fb11 f303 	smulbb	r3, r1, r3
 80062a0:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80062a2:	4413      	add	r3, r2
 80062a4:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 80062a6:	7d7b      	ldrb	r3, [r7, #21]
 80062a8:	7dfa      	ldrb	r2, [r7, #23]
 80062aa:	7db9      	ldrb	r1, [r7, #22]
 80062ac:	fb01 f202 	mul.w	r2, r1, r2
 80062b0:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	7dba      	ldrb	r2, [r7, #22]
 80062b8:	b292      	uxth	r2, r2
 80062ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80062be:	9102      	str	r1, [sp, #8]
 80062c0:	9201      	str	r2, [sp, #4]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2310      	movs	r3, #16
 80062c6:	462a      	mov	r2, r5
 80062c8:	4621      	mov	r1, r4
 80062ca:	f002 f975 	bl	80085b8 <HAL_I2C_Mem_Write>
 80062ce:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1d0      	bne.n	8006276 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80062d4:	e002      	b.n	80062dc <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 80062d6:	f06f 0304 	mvn.w	r3, #4
 80062da:	e056      	b.n	800638a <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	3301      	adds	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
 80062e2:	7dfa      	ldrb	r2, [r7, #23]
 80062e4:	7d3b      	ldrb	r3, [r7, #20]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3ac      	bcc.n	8006244 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 80062ea:	7cfb      	ldrb	r3, [r7, #19]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d04b      	beq.n	8006388 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	7d7b      	ldrb	r3, [r7, #21]
 80062f4:	441a      	add	r2, r3
 80062f6:	7d3b      	ldrb	r3, [r7, #20]
 80062f8:	7db9      	ldrb	r1, [r7, #22]
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	4413      	add	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd3e      	ble.n	8006382 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006304:	88fa      	ldrh	r2, [r7, #6]
 8006306:	7d7b      	ldrb	r3, [r7, #21]
 8006308:	441a      	add	r2, r3
 800630a:	7d3b      	ldrb	r3, [r7, #20]
 800630c:	7db9      	ldrb	r1, [r7, #22]
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	18d4      	adds	r4, r2, r3
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fe47 	bl	8005fa8 <AT24Cxx_get_max_addr>
 800631a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 800631c:	429c      	cmp	r4, r3
 800631e:	da30      	bge.n	8006382 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006320:	bf00      	nop
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	88db      	ldrh	r3, [r3, #6]
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	b21b      	sxth	r3, r3
 800632e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006332:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006334:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8006336:	7d7b      	ldrb	r3, [r7, #21]
 8006338:	b29a      	uxth	r2, r3
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	4413      	add	r3, r2
 800633e:	b29a      	uxth	r2, r3
 8006340:	7d3b      	ldrb	r3, [r7, #20]
 8006342:	b299      	uxth	r1, r3
 8006344:	7dbb      	ldrb	r3, [r7, #22]
 8006346:	b29b      	uxth	r3, r3
 8006348:	fb11 f303 	smulbb	r3, r1, r3
 800634c:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800634e:	4413      	add	r3, r2
 8006350:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8006352:	7d7b      	ldrb	r3, [r7, #21]
 8006354:	7d3a      	ldrb	r2, [r7, #20]
 8006356:	7db9      	ldrb	r1, [r7, #22]
 8006358:	fb01 f202 	mul.w	r2, r1, r2
 800635c:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	7cfa      	ldrb	r2, [r7, #19]
 8006364:	b292      	uxth	r2, r2
 8006366:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800636a:	9102      	str	r1, [sp, #8]
 800636c:	9201      	str	r2, [sp, #4]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2310      	movs	r3, #16
 8006372:	462a      	mov	r2, r5
 8006374:	4621      	mov	r1, r4
 8006376:	f002 f91f 	bl	80085b8 <HAL_I2C_Mem_Write>
 800637a:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1d0      	bne.n	8006322 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006380:	e002      	b.n	8006388 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8006382:	f06f 0304 	mvn.w	r3, #4
 8006386:	e000      	b.n	800638a <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bdb0      	pop	{r4, r5, r7, pc}

08006392 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b088      	sub	sp, #32
 8006396:	af04      	add	r7, sp, #16
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	4611      	mov	r1, r2
 800639e:	461a      	mov	r2, r3
 80063a0:	460b      	mov	r3, r1
 80063a2:	80fb      	strh	r3, [r7, #6]
 80063a4:	4613      	mov	r3, r2
 80063a6:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d022      	beq.n	80063f4 <AT24Cxx_read_byte_buffer+0x62>
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fdfa 	bl	8005fa8 <AT24Cxx_get_max_addr>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d21a      	bcs.n	80063f4 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80063be:	bf00      	nop
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88db      	ldrh	r3, [r3, #6]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 80063d0:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80063d2:	b299      	uxth	r1, r3
 80063d4:	88fa      	ldrh	r2, [r7, #6]
 80063d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80063da:	9302      	str	r3, [sp, #8]
 80063dc:	88bb      	ldrh	r3, [r7, #4]
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2310      	movs	r3, #16
 80063e6:	f002 f9e1 	bl	80087ac <HAL_I2C_Mem_Read>
 80063ea:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e7      	bne.n	80063c0 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e001      	b.n	80063f8 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 80063f4:	f06f 0306 	mvn.w	r3, #6
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	ed87 0a03 	vstr	s0, [r7, #12]
 800640a:	edc7 0a02 	vstr	s1, [r7, #8]
 800640e:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8006412:	ed97 7a03 	vldr	s14, [r7, #12]
 8006416:	edd7 7a02 	vldr	s15, [r7, #8]
 800641a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006422:	d501      	bpl.n	8006428 <constrainf+0x28>
        return low;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	e00b      	b.n	8006440 <constrainf+0x40>
    else if (amt > high)
 8006428:	ed97 7a03 	vldr	s14, [r7, #12]
 800642c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006438:	dd01      	ble.n	800643e <constrainf+0x3e>
        return high;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	e000      	b.n	8006440 <constrainf+0x40>
    else
        return amt;
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eeb0 0a67 	vmov.f32	s0, s15
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
	...

08006454 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	ed87 0a01 	vstr	s0, [r7, #4]
 800645e:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8006462:	edd7 7a01 	vldr	s15, [r7, #4]
 8006466:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80064a0 <pt1FilterGain+0x4c>
 800646a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800646e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006476:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT/ (RC + dT);
 800647a:	ed97 7a03 	vldr	s14, [r7, #12]
 800647e:	edd7 7a00 	vldr	s15, [r7]
 8006482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006486:	ed97 7a00 	vldr	s14, [r7]
 800648a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800648e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006492:	eeb0 0a67 	vmov.f32	s0, s15
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40c90fdb 	.word	0x40c90fdb

080064a4 <attitude_ctrl_init>:
float pid_velo_scale;

/*
 *  init pid controller
 **/
void attitude_ctrl_init(){
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
   speed_filter_reset = TRUE;
 80064a8:	4b42      	ldr	r3, [pc, #264]	@ (80065b4 <attitude_ctrl_init+0x110>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 80064ae:	4b42      	ldr	r3, [pc, #264]	@ (80065b8 <attitude_ctrl_init+0x114>)
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
   // init roll pid 
   pid_init(&roll_angle_pid, pid_profile_1.roll_angle_Kp,0,0,10,0,0);
 80064b6:	4b41      	ldr	r3, [pc, #260]	@ (80065bc <attitude_ctrl_init+0x118>)
 80064b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80064bc:	eddf 2a40 	vldr	s5, [pc, #256]	@ 80065c0 <attitude_ctrl_init+0x11c>
 80064c0:	ed9f 2a3f 	vldr	s4, [pc, #252]	@ 80065c0 <attitude_ctrl_init+0x11c>
 80064c4:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 80064c8:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 80065c0 <attitude_ctrl_init+0x11c>
 80064cc:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80065c0 <attitude_ctrl_init+0x11c>
 80064d0:	eeb0 0a67 	vmov.f32	s0, s15
 80064d4:	483b      	ldr	r0, [pc, #236]	@ (80065c4 <attitude_ctrl_init+0x120>)
 80064d6:	f7fd fe21 	bl	800411c <pid_init>
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 80064da:	4b38      	ldr	r3, [pc, #224]	@ (80065bc <attitude_ctrl_init+0x118>)
 80064dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80064e0:	4b36      	ldr	r3, [pc, #216]	@ (80065bc <attitude_ctrl_init+0x118>)
 80064e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80064e6:	4b35      	ldr	r3, [pc, #212]	@ (80065bc <attitude_ctrl_init+0x118>)
 80064e8:	edd3 6a07 	vldr	s13, [r3, #28]
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 80064ec:	4b33      	ldr	r3, [pc, #204]	@ (80065bc <attitude_ctrl_init+0x118>)
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 80064f0:	ee06 3a10 	vmov	s12, r3
 80064f4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 80064f8:	4b30      	ldr	r3, [pc, #192]	@ (80065bc <attitude_ctrl_init+0x118>)
 80064fa:	f993 3020 	ldrsb.w	r3, [r3, #32]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 80064fe:	ee05 3a90 	vmov	s11, r3
 8006502:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8006506:	4b2d      	ldr	r3, [pc, #180]	@ (80065bc <attitude_ctrl_init+0x118>)
 8006508:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 800650c:	ee05 3a10 	vmov	s10, r3
 8006510:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8006514:	eef0 2a45 	vmov.f32	s5, s10
 8006518:	eeb0 2a65 	vmov.f32	s4, s11
 800651c:	eef0 1a46 	vmov.f32	s3, s12
 8006520:	eeb0 1a66 	vmov.f32	s2, s13
 8006524:	eef0 0a47 	vmov.f32	s1, s14
 8006528:	eeb0 0a67 	vmov.f32	s0, s15
 800652c:	4826      	ldr	r0, [pc, #152]	@ (80065c8 <attitude_ctrl_init+0x124>)
 800652e:	f7fd fdf5 	bl	800411c <pid_init>
   // init roll pid 
   pid_init(&pitch_angle_pid, pid_profile_1.pitch_angle_Kp,0,0,10,0,0);
 8006532:	4b22      	ldr	r3, [pc, #136]	@ (80065bc <attitude_ctrl_init+0x118>)
 8006534:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8006538:	eddf 2a21 	vldr	s5, [pc, #132]	@ 80065c0 <attitude_ctrl_init+0x11c>
 800653c:	ed9f 2a20 	vldr	s4, [pc, #128]	@ 80065c0 <attitude_ctrl_init+0x11c>
 8006540:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 8006544:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 80065c0 <attitude_ctrl_init+0x11c>
 8006548:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80065c0 <attitude_ctrl_init+0x11c>
 800654c:	eeb0 0a67 	vmov.f32	s0, s15
 8006550:	481e      	ldr	r0, [pc, #120]	@ (80065cc <attitude_ctrl_init+0x128>)
 8006552:	f7fd fde3 	bl	800411c <pid_init>
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006556:	4b19      	ldr	r3, [pc, #100]	@ (80065bc <attitude_ctrl_init+0x118>)
 8006558:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800655c:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <attitude_ctrl_init+0x118>)
 800655e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8006562:	4b16      	ldr	r3, [pc, #88]	@ (80065bc <attitude_ctrl_init+0x118>)
 8006564:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 8006568:	4b14      	ldr	r3, [pc, #80]	@ (80065bc <attitude_ctrl_init+0x118>)
 800656a:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 800656c:	ee06 3a10 	vmov	s12, r3
 8006570:	eeb8 6a46 	vcvt.f32.u32	s12, s12
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 8006574:	4b11      	ldr	r3, [pc, #68]	@ (80065bc <attitude_ctrl_init+0x118>)
 8006576:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 800657a:	ee05 3a90 	vmov	s11, r3
 800657e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 8006582:	4b0e      	ldr	r3, [pc, #56]	@ (80065bc <attitude_ctrl_init+0x118>)
 8006584:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006588:	ee05 3a10 	vmov	s10, r3
 800658c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8006590:	eef0 2a45 	vmov.f32	s5, s10
 8006594:	eeb0 2a65 	vmov.f32	s4, s11
 8006598:	eef0 1a46 	vmov.f32	s3, s12
 800659c:	eeb0 1a66 	vmov.f32	s2, s13
 80065a0:	eef0 0a47 	vmov.f32	s1, s14
 80065a4:	eeb0 0a67 	vmov.f32	s0, s15
 80065a8:	4809      	ldr	r0, [pc, #36]	@ (80065d0 <attitude_ctrl_init+0x12c>)
 80065aa:	f7fd fdb7 	bl	800411c <pid_init>
}
 80065ae:	bf00      	nop
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000b78 	.word	0x20000b78
 80065b8:	20000c38 	.word	0x20000c38
 80065bc:	20000068 	.word	0x20000068
 80065c0:	00000000 	.word	0x00000000
 80065c4:	20000bd4 	.word	0x20000bd4
 80065c8:	20000b7c 	.word	0x20000b7c
 80065cc:	20000c00 	.word	0x20000c00
 80065d0:	20000ba8 	.word	0x20000ba8
 80065d4:	00000000 	.word	0x00000000

080065d8 <attitude_ctrl>:

void attitude_ctrl(const float dt){
 80065d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065dc:	b096      	sub	sp, #88	@ 0x58
 80065de:	af00      	add	r7, sp, #0
 80065e0:	ed87 0a01 	vstr	s0, [r7, #4]
    static float roll_pid_smooth = 0.0f;
    static float pitch_pid_smooth = 0.0f;

    if(dt < 0 || dt > MAX_WAIT_TIME){
 80065e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80065e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	f100 8407 	bmi.w	8006e02 <attitude_ctrl+0x82a>
 80065f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80065f8:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8006870 <attitude_ctrl+0x298>
 80065fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006604:	f300 83fd 	bgt.w	8006e02 <attitude_ctrl+0x82a>
        return;
    }

  roll_trim = ((int)ibusChannelData[CH8] - 1500);
 8006608:	4b9a      	ldr	r3, [pc, #616]	@ (8006874 <attitude_ctrl+0x29c>)
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006618:	4b97      	ldr	r3, [pc, #604]	@ (8006878 <attitude_ctrl+0x2a0>)
 800661a:	edc3 7a00 	vstr	s15, [r3]
  pitch_trim = ((int)ibusChannelData[CH7] - 1500);
 800661e:	4b95      	ldr	r3, [pc, #596]	@ (8006874 <attitude_ctrl+0x29c>)
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800662e:	4b93      	ldr	r3, [pc, #588]	@ (800687c <attitude_ctrl+0x2a4>)
 8006630:	edc3 7a00 	vstr	s15, [r3]
        // stabilize mode
   if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8006634:	4b8f      	ldr	r3, [pc, #572]	@ (8006874 <attitude_ctrl+0x29c>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800663c:	4293      	cmp	r3, r2
 800663e:	f240 832e 	bls.w	8006c9e <attitude_ctrl+0x6c6>
        /* calculate roll && pitch desired */
        roll_desired = ((int)ibusChannelData[0] - 1500)*0.15f ;   /*  -50 <-  -> +50  */
 8006642:	4b8c      	ldr	r3, [pc, #560]	@ (8006874 <attitude_ctrl+0x29c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006652:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8006880 <attitude_ctrl+0x2a8>
 8006656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800665a:	4b8a      	ldr	r3, [pc, #552]	@ (8006884 <attitude_ctrl+0x2ac>)
 800665c:	edc3 7a00 	vstr	s15, [r3]
        pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f;  /*  -75 <-  -> +75  */
 8006660:	4b84      	ldr	r3, [pc, #528]	@ (8006874 <attitude_ctrl+0x29c>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006668:	ee07 3a90 	vmov	s15, r3
 800666c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006670:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8006888 <attitude_ctrl+0x2b0>
 8006674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006678:	4b84      	ldr	r3, [pc, #528]	@ (800688c <attitude_ctrl+0x2b4>)
 800667a:	edc3 7a00 	vstr	s15, [r3]

        /*---- pid scale with velocity  -----*/
        if(_gps.fix > 1){
 800667e:	4b84      	ldr	r3, [pc, #528]	@ (8006890 <attitude_ctrl+0x2b8>)
 8006680:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006684:	2b01      	cmp	r3, #1
 8006686:	f240 8081 	bls.w	800678c <attitude_ctrl+0x1b4>
            float vn = (float)_gps.velocity[0]/100;  // m
 800668a:	4b81      	ldr	r3, [pc, #516]	@ (8006890 <attitude_ctrl+0x2b8>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006696:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006894 <attitude_ctrl+0x2bc>
 800669a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800669e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
            float ve = (float)_gps.velocity[1]/100;  // m
 80066a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006890 <attitude_ctrl+0x2b8>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ae:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006894 <attitude_ctrl+0x2bc>
 80066b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066b6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            //float vd = (float)_gps.velocity[2]/100;  // m

            float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 80066ba:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80066be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80066c2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80066c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ce:	eeb0 0a67 	vmov.f32	s0, s15
 80066d2:	f00e fc69 	bl	8014fa8 <sqrtf>
 80066d6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
            absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 80066da:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 80066de:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8006898 <attitude_ctrl+0x2c0>
 80066e2:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80066e6:	f7ff fe8b 	bl	8006400 <constrainf>
 80066ea:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
            if(speed_filter_reset){
 80066ee:	4b6b      	ldr	r3, [pc, #428]	@ (800689c <attitude_ctrl+0x2c4>)
 80066f0:	f993 3000 	ldrsb.w	r3, [r3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <attitude_ctrl+0x12c>
                ab_speed_filted = absolute_velocity;
 80066f8:	4a69      	ldr	r2, [pc, #420]	@ (80068a0 <attitude_ctrl+0x2c8>)
 80066fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066fc:	6013      	str	r3, [r2, #0]
                speed_filter_reset = FALSE;
 80066fe:	4b67      	ldr	r3, [pc, #412]	@ (800689c <attitude_ctrl+0x2c4>)
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
            }
            ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8006704:	edd7 0a01 	vldr	s1, [r7, #4]
 8006708:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800670c:	f7ff fea2 	bl	8006454 <pt1FilterGain>
 8006710:	eef0 6a40 	vmov.f32	s13, s0
 8006714:	4b62      	ldr	r3, [pc, #392]	@ (80068a0 <attitude_ctrl+0x2c8>)
 8006716:	edd3 7a00 	vldr	s15, [r3]
 800671a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800671e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006722:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006726:	4b5e      	ldr	r3, [pc, #376]	@ (80068a0 <attitude_ctrl+0x2c8>)
 8006728:	edd3 7a00 	vldr	s15, [r3]
 800672c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006730:	4b5b      	ldr	r3, [pc, #364]	@ (80068a0 <attitude_ctrl+0x2c8>)
 8006732:	edc3 7a00 	vstr	s15, [r3]
            float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 8006736:	4b5a      	ldr	r3, [pc, #360]	@ (80068a0 <attitude_ctrl+0x2c8>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 80068a4 <attitude_ctrl+0x2cc>
 8006740:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8006744:	eeb0 0a67 	vmov.f32	s0, s15
 8006748:	f7ff fe5a 	bl	8006400 <constrainf>
 800674c:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
            pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.09f);
 8006750:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006754:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8006758:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800675c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006760:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8006764:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80068a8 <attitude_ctrl+0x2d0>
 8006770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006774:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8006778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800677c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8006780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006784:	4b49      	ldr	r3, [pc, #292]	@ (80068ac <attitude_ctrl+0x2d4>)
 8006786:	edc3 7a00 	vstr	s15, [r3]
 800678a:	e005      	b.n	8006798 <attitude_ctrl+0x1c0>
        }
        else{
            speed_filter_reset = TRUE;
 800678c:	4b43      	ldr	r3, [pc, #268]	@ (800689c <attitude_ctrl+0x2c4>)
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
            pid_velo_scale = (MIN_PID_SPEED_SCALE + MAX_PID_SPEED_SCALE)/2.0f;
 8006792:	4b46      	ldr	r3, [pc, #280]	@ (80068ac <attitude_ctrl+0x2d4>)
 8006794:	4a46      	ldr	r2, [pc, #280]	@ (80068b0 <attitude_ctrl+0x2d8>)
 8006796:	601a      	str	r2, [r3, #0]
        if(delta_yaw > 180.0f){
             delta_yaw = delta_yaw - 360.0f;
        }

        */
        const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006798:	4b44      	ldr	r3, [pc, #272]	@ (80068ac <attitude_ctrl+0x2d4>)
 800679a:	edd3 7a00 	vldr	s15, [r3]
 800679e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80067a2:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80068b4 <attitude_ctrl+0x2dc>
 80067a6:	eeb0 0a67 	vmov.f32	s0, s15
 80067aa:	f7ff fe29 	bl	8006400 <constrainf>
 80067ae:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
        const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 80067b2:	4b3e      	ldr	r3, [pc, #248]	@ (80068ac <attitude_ctrl+0x2d4>)
 80067b4:	edd3 7a00 	vldr	s15, [r3]
 80067b8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80067bc:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80068b4 <attitude_ctrl+0x2dc>
 80067c0:	eeb0 0a67 	vmov.f32	s0, s15
 80067c4:	f7ff fe1c 	bl	8006400 <constrainf>
 80067c8:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

        /*----- roll axis pid   -----*/
        const float roll_measurement = AHRS.roll;
 80067cc:	4b3a      	ldr	r3, [pc, #232]	@ (80068b8 <attitude_ctrl+0x2e0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
        const float roll_rate_measurement = AHRS.roll_rate;
 80067d2:	4b39      	ldr	r3, [pc, #228]	@ (80068b8 <attitude_ctrl+0x2e0>)
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	633b      	str	r3, [r7, #48]	@ 0x30
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired,1.0f,dt);
 80067d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006884 <attitude_ctrl+0x2ac>)
 80067da:	edd3 7a00 	vldr	s15, [r3]
 80067de:	edd7 1a01 	vldr	s3, [r7, #4]
 80067e2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80067e6:	eef0 0a67 	vmov.f32	s1, s15
 80067ea:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80067ee:	4833      	ldr	r0, [pc, #204]	@ (80068bc <attitude_ctrl+0x2e4>)
 80067f0:	f7fd fccf 	bl	8004192 <pid_calculate>
 80067f4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        // limit rate
        roll_rate_desired = constrainf(roll_rate_desired, -pid_profile_1.roll_rate_limit, pid_profile_1.roll_rate_limit);
 80067f8:	4b31      	ldr	r3, [pc, #196]	@ (80068c0 <attitude_ctrl+0x2e8>)
 80067fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80067fe:	425b      	negs	r3, r3
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006808:	4b2d      	ldr	r3, [pc, #180]	@ (80068c0 <attitude_ctrl+0x2e8>)
 800680a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800680e:	ee07 3a10 	vmov	s14, r3
 8006812:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006816:	eeb0 1a47 	vmov.f32	s2, s14
 800681a:	eef0 0a67 	vmov.f32	s1, s15
 800681e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8006822:	f7ff fded 	bl	8006400 <constrainf>
 8006826:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 800682a:	edd7 1a01 	vldr	s3, [r7, #4]
 800682e:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 8006832:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8006836:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 800683a:	4822      	ldr	r0, [pc, #136]	@ (80068c4 <attitude_ctrl+0x2ec>)
 800683c:	f7fd fca9 	bl	8004192 <pid_calculate>
 8006840:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        // reset I term
        if(abs(roll_angle_pid.err) < ERROR_RESET_I_TERM){
 8006844:	4b1d      	ldr	r3, [pc, #116]	@ (80068bc <attitude_ctrl+0x2e4>)
 8006846:	edd3 7a00 	vldr	s15, [r3]
 800684a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006852:	dd39      	ble.n	80068c8 <attitude_ctrl+0x2f0>
 8006854:	4b19      	ldr	r3, [pc, #100]	@ (80068bc <attitude_ctrl+0x2e4>)
 8006856:	edd3 7a00 	vldr	s15, [r3]
 800685a:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800685e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006866:	bf4c      	ite	mi
 8006868:	2301      	movmi	r3, #1
 800686a:	2300      	movpl	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e038      	b.n	80068e2 <attitude_ctrl+0x30a>
 8006870:	3dcccccd 	.word	0x3dcccccd
 8006874:	20000188 	.word	0x20000188
 8006878:	20000c30 	.word	0x20000c30
 800687c:	20000c34 	.word	0x20000c34
 8006880:	3e19999a 	.word	0x3e19999a
 8006884:	20000b68 	.word	0x20000b68
 8006888:	be19999a 	.word	0xbe19999a
 800688c:	20000b6c 	.word	0x20000b6c
 8006890:	20000480 	.word	0x20000480
 8006894:	42c80000 	.word	0x42c80000
 8006898:	00000000 	.word	0x00000000
 800689c:	20000b78 	.word	0x20000b78
 80068a0:	20000c38 	.word	0x20000c38
 80068a4:	42040000 	.word	0x42040000
 80068a8:	3db851ec 	.word	0x3db851ec
 80068ac:	20000c3c 	.word	0x20000c3c
 80068b0:	3f266666 	.word	0x3f266666
 80068b4:	3e99999a 	.word	0x3e99999a
 80068b8:	200006a0 	.word	0x200006a0
 80068bc:	20000bd4 	.word	0x20000bd4
 80068c0:	20000068 	.word	0x20000068
 80068c4:	20000b7c 	.word	0x20000b7c
 80068c8:	4b9c      	ldr	r3, [pc, #624]	@ (8006b3c <attitude_ctrl+0x564>)
 80068ca:	edd3 7a00 	vldr	s15, [r3]
 80068ce:	eeb8 7a04 	vmov.f32	s14, #132	@ 0xc0200000 -2.5
 80068d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	bfcc      	ite	gt
 80068dc:	2301      	movgt	r3, #1
 80068de:	2300      	movle	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <attitude_ctrl+0x316>
            roll_rate_pid.i_term = 0.0f;
 80068e6:	4b96      	ldr	r3, [pc, #600]	@ (8006b40 <attitude_ctrl+0x568>)
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	615a      	str	r2, [r3, #20]
        }
        // feed forward
        float FF_roll = roll_rate_desired*pid_profile_1.roll_FF_gain;
 80068ee:	4b95      	ldr	r3, [pc, #596]	@ (8006b44 <attitude_ctrl+0x56c>)
 80068f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80068f4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80068f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        r_rate_pid = r_rate_pid + FF_roll;
 8006900:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006904:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800690c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        r_rate_pid = constrainf(r_rate_pid, -pid_profile_1.roll_max_pid, pid_profile_1.roll_max_pid);
 8006910:	4b8c      	ldr	r3, [pc, #560]	@ (8006b44 <attitude_ctrl+0x56c>)
 8006912:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8006916:	425b      	negs	r3, r3
 8006918:	ee07 3a90 	vmov	s15, r3
 800691c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006920:	4b88      	ldr	r3, [pc, #544]	@ (8006b44 <attitude_ctrl+0x56c>)
 8006922:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8006926:	ee07 3a10 	vmov	s14, r3
 800692a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800692e:	eeb0 1a47 	vmov.f32	s2, s14
 8006932:	eef0 0a67 	vmov.f32	s1, s15
 8006936:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800693a:	f7ff fd61 	bl	8006400 <constrainf>
 800693e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        // filter pid  LPF
        roll_pid_smooth += pt1FilterGain(pid_profile_1.roll_pid_fcut,dt)*(r_rate_pid - roll_pid_smooth);
 8006942:	4b80      	ldr	r3, [pc, #512]	@ (8006b44 <attitude_ctrl+0x56c>)
 8006944:	f993 3024 	ldrsb.w	r3, [r3, #36]	@ 0x24
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006950:	edd7 0a01 	vldr	s1, [r7, #4]
 8006954:	eeb0 0a67 	vmov.f32	s0, s15
 8006958:	f7ff fd7c 	bl	8006454 <pt1FilterGain>
 800695c:	eef0 6a40 	vmov.f32	s13, s0
 8006960:	4b79      	ldr	r3, [pc, #484]	@ (8006b48 <attitude_ctrl+0x570>)
 8006962:	edd3 7a00 	vldr	s15, [r3]
 8006966:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800696a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800696e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006972:	4b75      	ldr	r3, [pc, #468]	@ (8006b48 <attitude_ctrl+0x570>)
 8006974:	edd3 7a00 	vldr	s15, [r3]
 8006978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800697c:	4b72      	ldr	r3, [pc, #456]	@ (8006b48 <attitude_ctrl+0x570>)
 800697e:	edc3 7a00 	vstr	s15, [r3]


        /*-----  pitch axis pid  ---------*/
        const float pitch_measurement = AHRS.pitch;
 8006982:	4b72      	ldr	r3, [pc, #456]	@ (8006b4c <attitude_ctrl+0x574>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	623b      	str	r3, [r7, #32]
        const float pitch_rate_measurement = AHRS.pitch_rate;
 8006988:	4b70      	ldr	r3, [pc, #448]	@ (8006b4c <attitude_ctrl+0x574>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	61fb      	str	r3, [r7, #28]
        float pitch_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired,1.0f,dt);
 800698e:	4b70      	ldr	r3, [pc, #448]	@ (8006b50 <attitude_ctrl+0x578>)
 8006990:	edd3 7a00 	vldr	s15, [r3]
 8006994:	edd7 1a01 	vldr	s3, [r7, #4]
 8006998:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800699c:	eef0 0a67 	vmov.f32	s1, s15
 80069a0:	ed97 0a08 	vldr	s0, [r7, #32]
 80069a4:	486b      	ldr	r0, [pc, #428]	@ (8006b54 <attitude_ctrl+0x57c>)
 80069a6:	f7fd fbf4 	bl	8004192 <pid_calculate>
 80069aa:	ed87 0a06 	vstr	s0, [r7, #24]
        // limit rate
        pitch_rate_desired = constrainf(pitch_rate_desired, -pid_profile_1.pitch_rate_limit, pid_profile_1.pitch_rate_limit);
 80069ae:	4b65      	ldr	r3, [pc, #404]	@ (8006b44 <attitude_ctrl+0x56c>)
 80069b0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80069b4:	425b      	negs	r3, r3
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069be:	4b61      	ldr	r3, [pc, #388]	@ (8006b44 <attitude_ctrl+0x56c>)
 80069c0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80069c4:	ee07 3a10 	vmov	s14, r3
 80069c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80069cc:	eeb0 1a47 	vmov.f32	s2, s14
 80069d0:	eef0 0a67 	vmov.f32	s1, s15
 80069d4:	ed97 0a06 	vldr	s0, [r7, #24]
 80069d8:	f7ff fd12 	bl	8006400 <constrainf>
 80069dc:	ed87 0a06 	vstr	s0, [r7, #24]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitch_rate_desired,pid_pitch_vel_scale ,dt);
 80069e0:	edd7 1a01 	vldr	s3, [r7, #4]
 80069e4:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 80069e8:	edd7 0a06 	vldr	s1, [r7, #24]
 80069ec:	ed97 0a07 	vldr	s0, [r7, #28]
 80069f0:	4859      	ldr	r0, [pc, #356]	@ (8006b58 <attitude_ctrl+0x580>)
 80069f2:	f7fd fbce 	bl	8004192 <pid_calculate>
 80069f6:	ed87 0a05 	vstr	s0, [r7, #20]
        // reset I term
        //if(abs(pitch_angle_pid.err) < ERROR_RESET_I_TERM){
        //    pitch_rate_pid.i_term = 0.0f;
        //}
        // feed forward
        float FF_pitch = pitch_rate_desired*pid_profile_1.pitch_FF_gain;;
 80069fa:	4b52      	ldr	r3, [pc, #328]	@ (8006b44 <attitude_ctrl+0x56c>)
 80069fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006a00:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a08:	edc7 7a04 	vstr	s15, [r7, #16]
        p_rate_pid = p_rate_pid + FF_pitch;
 8006a0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a10:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a18:	edc7 7a05 	vstr	s15, [r7, #20]
        p_rate_pid = constrainf(p_rate_pid,- pid_profile_1.pitch_max_pid, pid_profile_1.pitch_max_pid);
 8006a1c:	4b49      	ldr	r3, [pc, #292]	@ (8006b44 <attitude_ctrl+0x56c>)
 8006a1e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8006a22:	425b      	negs	r3, r3
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2c:	4b45      	ldr	r3, [pc, #276]	@ (8006b44 <attitude_ctrl+0x56c>)
 8006a2e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8006a32:	ee07 3a10 	vmov	s14, r3
 8006a36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a3a:	eeb0 1a47 	vmov.f32	s2, s14
 8006a3e:	eef0 0a67 	vmov.f32	s1, s15
 8006a42:	ed97 0a05 	vldr	s0, [r7, #20]
 8006a46:	f7ff fcdb 	bl	8006400 <constrainf>
 8006a4a:	ed87 0a05 	vstr	s0, [r7, #20]
        // filter pid  LPF
        pitch_pid_smooth += pt1FilterGain(pid_profile_1.pitch_pid_fcut,dt)*(p_rate_pid - pitch_pid_smooth);
 8006a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b44 <attitude_ctrl+0x56c>)
 8006a50:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a5c:	edd7 0a01 	vldr	s1, [r7, #4]
 8006a60:	eeb0 0a67 	vmov.f32	s0, s15
 8006a64:	f7ff fcf6 	bl	8006454 <pt1FilterGain>
 8006a68:	eef0 6a40 	vmov.f32	s13, s0
 8006a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b5c <attitude_ctrl+0x584>)
 8006a6e:	edd3 7a00 	vldr	s15, [r3]
 8006a72:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a7a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006a7e:	4b37      	ldr	r3, [pc, #220]	@ (8006b5c <attitude_ctrl+0x584>)
 8006a80:	edd3 7a00 	vldr	s15, [r3]
 8006a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a88:	4b34      	ldr	r3, [pc, #208]	@ (8006b5c <attitude_ctrl+0x584>)
 8006a8a:	edc3 7a00 	vstr	s15, [r3]
        
        // enable && disable I term, for test only
		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 8006a8e:	4b34      	ldr	r3, [pc, #208]	@ (8006b60 <attitude_ctrl+0x588>)
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d907      	bls.n	8006aaa <attitude_ctrl+0x4d2>
			pitch_rate_pid.i_term = 0;
 8006a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b58 <attitude_ctrl+0x580>)
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	615a      	str	r2, [r3, #20]
			roll_rate_pid.i_term = 0;
 8006aa2:	4b27      	ldr	r3, [pc, #156]	@ (8006b40 <attitude_ctrl+0x568>)
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	615a      	str	r2, [r3, #20]
		}

        /*-------------- mix channel --------------------------*/
		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8006b60 <attitude_ctrl+0x588>)
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d960      	bls.n	8006b78 <attitude_ctrl+0x5a0>
                // roll stabilize
				int pitch_rc = 1500 - ibusChannelData[CH2];
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b60 <attitude_ctrl+0x588>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006abe:	3304      	adds	r3, #4
 8006ac0:	60bb      	str	r3, [r7, #8]
				servoL = 1500 - roll_pid_smooth + pitch_rc + roll_trim  + pitch_trim;
 8006ac2:	4b21      	ldr	r3, [pc, #132]	@ (8006b48 <attitude_ctrl+0x570>)
 8006ac4:	edd3 7a00 	vldr	s15, [r3]
 8006ac8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006b64 <attitude_ctrl+0x58c>
 8006acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ade:	4b22      	ldr	r3, [pc, #136]	@ (8006b68 <attitude_ctrl+0x590>)
 8006ae0:	edd3 7a00 	vldr	s15, [r3]
 8006ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ae8:	4b20      	ldr	r3, [pc, #128]	@ (8006b6c <attitude_ctrl+0x594>)
 8006aea:	edd3 7a00 	vldr	s15, [r3]
 8006aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af6:	ee17 2a90 	vmov	r2, s15
 8006afa:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <attitude_ctrl+0x598>)
 8006afc:	601a      	str	r2, [r3, #0]
				servoR = 1500 + roll_pid_smooth + pitch_rc - roll_trim  + pitch_trim;
 8006afe:	4b12      	ldr	r3, [pc, #72]	@ (8006b48 <attitude_ctrl+0x570>)
 8006b00:	edd3 7a00 	vldr	s15, [r3]
 8006b04:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006b64 <attitude_ctrl+0x58c>
 8006b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b1a:	4b13      	ldr	r3, [pc, #76]	@ (8006b68 <attitude_ctrl+0x590>)
 8006b1c:	edd3 7a00 	vldr	s15, [r3]
 8006b20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b24:	4b11      	ldr	r3, [pc, #68]	@ (8006b6c <attitude_ctrl+0x594>)
 8006b26:	edd3 7a00 	vldr	s15, [r3]
 8006b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b32:	ee17 2a90 	vmov	r2, s15
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <attitude_ctrl+0x59c>)
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e156      	b.n	8006dea <attitude_ctrl+0x812>
 8006b3c:	20000bd4 	.word	0x20000bd4
 8006b40:	20000b7c 	.word	0x20000b7c
 8006b44:	20000068 	.word	0x20000068
 8006b48:	20000c40 	.word	0x20000c40
 8006b4c:	200006a0 	.word	0x200006a0
 8006b50:	20000b6c 	.word	0x20000b6c
 8006b54:	20000c00 	.word	0x20000c00
 8006b58:	20000ba8 	.word	0x20000ba8
 8006b5c:	20000c44 	.word	0x20000c44
 8006b60:	20000188 	.word	0x20000188
 8006b64:	44bb8000 	.word	0x44bb8000
 8006b68:	20000c30 	.word	0x20000c30
 8006b6c:	20000c34 	.word	0x20000c34
 8006b70:	20000b70 	.word	0x20000b70
 8006b74:	20000b74 	.word	0x20000b74
		}else{
               // pitch stabilize
				int roll_rc = 1500 - ibusChannelData[CH1];
 8006b78:	4ba7      	ldr	r3, [pc, #668]	@ (8006e18 <attitude_ctrl+0x840>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006b80:	3304      	adds	r3, #4
 8006b82:	60fb      	str	r3, [r7, #12]
				servoL = 1500 +  roll_rc*0.5 - pitch_pid_smooth    + roll_trim  + pitch_trim;
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7f9 fc75 	bl	8000474 <__aeabi_i2d>
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	4ba3      	ldr	r3, [pc, #652]	@ (8006e1c <attitude_ctrl+0x844>)
 8006b90:	f7f9 fcda 	bl	8000548 <__aeabi_dmul>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006e10 <attitude_ctrl+0x838>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb1b 	bl	80001dc <__adddf3>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4614      	mov	r4, r2
 8006bac:	461d      	mov	r5, r3
 8006bae:	4b9c      	ldr	r3, [pc, #624]	@ (8006e20 <attitude_ctrl+0x848>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fc70 	bl	8000498 <__aeabi_f2d>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	f7f9 fb0a 	bl	80001d8 <__aeabi_dsub>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	4b95      	ldr	r3, [pc, #596]	@ (8006e24 <attitude_ctrl+0x84c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7f9 fc61 	bl	8000498 <__aeabi_f2d>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4629      	mov	r1, r5
 8006bde:	f7f9 fafd 	bl	80001dc <__adddf3>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4614      	mov	r4, r2
 8006be8:	461d      	mov	r5, r3
 8006bea:	4b8f      	ldr	r3, [pc, #572]	@ (8006e28 <attitude_ctrl+0x850>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7f9 fc52 	bl	8000498 <__aeabi_f2d>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 faee 	bl	80001dc <__adddf3>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4610      	mov	r0, r2
 8006c06:	4619      	mov	r1, r3
 8006c08:	f7f9 ff4e 	bl	8000aa8 <__aeabi_d2iz>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	4a87      	ldr	r2, [pc, #540]	@ (8006e2c <attitude_ctrl+0x854>)
 8006c10:	6013      	str	r3, [r2, #0]
				servoR = 1500 -  roll_rc*0.5 - pitch_pid_smooth    - roll_trim  + pitch_trim;
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7f9 fc2e 	bl	8000474 <__aeabi_i2d>
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8006e1c <attitude_ctrl+0x844>)
 8006c1e:	f7f9 fc93 	bl	8000548 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	a17a      	add	r1, pc, #488	@ (adr r1, 8006e10 <attitude_ctrl+0x838>)
 8006c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2c:	f7f9 fad4 	bl	80001d8 <__aeabi_dsub>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	461d      	mov	r5, r3
 8006c38:	4b79      	ldr	r3, [pc, #484]	@ (8006e20 <attitude_ctrl+0x848>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7f9 fc2b 	bl	8000498 <__aeabi_f2d>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fac5 	bl	80001d8 <__aeabi_dsub>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4614      	mov	r4, r2
 8006c54:	461d      	mov	r5, r3
 8006c56:	4b73      	ldr	r3, [pc, #460]	@ (8006e24 <attitude_ctrl+0x84c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7f9 fc1c 	bl	8000498 <__aeabi_f2d>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fab6 	bl	80001d8 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	461d      	mov	r5, r3
 8006c74:	4b6c      	ldr	r3, [pc, #432]	@ (8006e28 <attitude_ctrl+0x850>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7f9 fc0d 	bl	8000498 <__aeabi_f2d>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4620      	mov	r0, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	f7f9 faa9 	bl	80001dc <__adddf3>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	f7f9 ff09 	bl	8000aa8 <__aeabi_d2iz>
 8006c96:	4603      	mov	r3, r0
 8006c98:	4a65      	ldr	r2, [pc, #404]	@ (8006e30 <attitude_ctrl+0x858>)
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	e0a5      	b.n	8006dea <attitude_ctrl+0x812>
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 8006c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8006e18 <attitude_ctrl+0x840>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	657b      	str	r3, [r7, #84]	@ 0x54
        int s2 = 1500 - ibusChannelData[CH2];
 8006caa:	4b5b      	ldr	r3, [pc, #364]	@ (8006e18 <attitude_ctrl+0x840>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	653b      	str	r3, [r7, #80]	@ 0x50

        smooth_ch1 += 0.5*(s1*0.5 - smooth_ch1);
 8006cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8006e34 <attitude_ctrl+0x85c>)
 8006cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7f9 fbd9 	bl	8000474 <__aeabi_i2d>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006cc8:	f7f9 fbd4 	bl	8000474 <__aeabi_i2d>
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	4b52      	ldr	r3, [pc, #328]	@ (8006e1c <attitude_ctrl+0x844>)
 8006cd2:	f7f9 fc39 	bl	8000548 <__aeabi_dmul>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4690      	mov	r8, r2
 8006cdc:	4699      	mov	r9, r3
 8006cde:	4b55      	ldr	r3, [pc, #340]	@ (8006e34 <attitude_ctrl+0x85c>)
 8006ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7f9 fbc5 	bl	8000474 <__aeabi_i2d>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 fa71 	bl	80001d8 <__aeabi_dsub>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	4b46      	ldr	r3, [pc, #280]	@ (8006e1c <attitude_ctrl+0x844>)
 8006d04:	f7f9 fc20 	bl	8000548 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fa64 	bl	80001dc <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f7f9 fec4 	bl	8000aa8 <__aeabi_d2iz>
 8006d20:	4603      	mov	r3, r0
 8006d22:	b21a      	sxth	r2, r3
 8006d24:	4b43      	ldr	r3, [pc, #268]	@ (8006e34 <attitude_ctrl+0x85c>)
 8006d26:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.5*(s2 - smooth_ch2);
 8006d28:	4b43      	ldr	r3, [pc, #268]	@ (8006e38 <attitude_ctrl+0x860>)
 8006d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7f9 fba0 	bl	8000474 <__aeabi_i2d>
 8006d34:	4604      	mov	r4, r0
 8006d36:	460d      	mov	r5, r1
 8006d38:	4b3f      	ldr	r3, [pc, #252]	@ (8006e38 <attitude_ctrl+0x860>)
 8006d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7f9 fb95 	bl	8000474 <__aeabi_i2d>
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	4b33      	ldr	r3, [pc, #204]	@ (8006e1c <attitude_ctrl+0x844>)
 8006d50:	f7f9 fbfa 	bl	8000548 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4620      	mov	r0, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	f7f9 fa3e 	bl	80001dc <__adddf3>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4610      	mov	r0, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	f7f9 fe9e 	bl	8000aa8 <__aeabi_d2iz>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	b21a      	sxth	r2, r3
 8006d70:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <attitude_ctrl+0x860>)
 8006d72:	801a      	strh	r2, [r3, #0]

        servoL = 1500 + smooth_ch1 - smooth_ch2  + roll_trim  + pitch_trim;
 8006d74:	4b2f      	ldr	r3, [pc, #188]	@ (8006e34 <attitude_ctrl+0x85c>)
 8006d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d7a:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8006d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8006e38 <attitude_ctrl+0x860>)
 8006d80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d8e:	4b25      	ldr	r3, [pc, #148]	@ (8006e24 <attitude_ctrl+0x84c>)
 8006d90:	edd3 7a00 	vldr	s15, [r3]
 8006d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d98:	4b23      	ldr	r3, [pc, #140]	@ (8006e28 <attitude_ctrl+0x850>)
 8006d9a:	edd3 7a00 	vldr	s15, [r3]
 8006d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	4b20      	ldr	r3, [pc, #128]	@ (8006e2c <attitude_ctrl+0x854>)
 8006dac:	601a      	str	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 - smooth_ch2  - roll_trim  + pitch_trim;
 8006dae:	4b21      	ldr	r3, [pc, #132]	@ (8006e34 <attitude_ctrl+0x85c>)
 8006db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006db4:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006db8:	3304      	adds	r3, #4
 8006dba:	4a1f      	ldr	r2, [pc, #124]	@ (8006e38 <attitude_ctrl+0x860>)
 8006dbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dca:	4b16      	ldr	r3, [pc, #88]	@ (8006e24 <attitude_ctrl+0x84c>)
 8006dcc:	edd3 7a00 	vldr	s15, [r3]
 8006dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006dd4:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <attitude_ctrl+0x850>)
 8006dd6:	edd3 7a00 	vldr	s15, [r3]
 8006dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de2:	ee17 2a90 	vmov	r2, s15
 8006de6:	4b12      	ldr	r3, [pc, #72]	@ (8006e30 <attitude_ctrl+0x858>)
 8006de8:	601a      	str	r2, [r3, #0]
    }
   write_pwm_ctrl(1000,servoL,servoR);
 8006dea:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <attitude_ctrl+0x854>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4a0f      	ldr	r2, [pc, #60]	@ (8006e30 <attitude_ctrl+0x858>)
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	b292      	uxth	r2, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006dfc:	f7fd fb4c 	bl	8004498 <write_pwm_ctrl>
 8006e00:	e000      	b.n	8006e04 <attitude_ctrl+0x82c>
        return;
 8006e02:	bf00      	nop
}
 8006e04:	3758      	adds	r7, #88	@ 0x58
 8006e06:	46bd      	mov	sp, r7
 8006e08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e0c:	f3af 8000 	nop.w
 8006e10:	00000000 	.word	0x00000000
 8006e14:	40977000 	.word	0x40977000
 8006e18:	20000188 	.word	0x20000188
 8006e1c:	3fe00000 	.word	0x3fe00000
 8006e20:	20000c44 	.word	0x20000c44
 8006e24:	20000c30 	.word	0x20000c30
 8006e28:	20000c34 	.word	0x20000c34
 8006e2c:	20000b70 	.word	0x20000b70
 8006e30:	20000b74 	.word	0x20000b74
 8006e34:	20000c2c 	.word	0x20000c2c
 8006e38:	20000c2e 	.word	0x20000c2e

08006e3c <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 8006e40:	4b03      	ldr	r3, [pc, #12]	@ (8006e50 <mavlink_tx_cpl_callback+0x14>)
 8006e42:	2201      	movs	r2, #1
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	bf00      	nop
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000c48 	.word	0x20000c48

08006e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e58:	4b0e      	ldr	r3, [pc, #56]	@ (8006e94 <HAL_Init+0x40>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e94 <HAL_Init+0x40>)
 8006e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e64:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <HAL_Init+0x40>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a0a      	ldr	r2, [pc, #40]	@ (8006e94 <HAL_Init+0x40>)
 8006e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e70:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <HAL_Init+0x40>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a07      	ldr	r2, [pc, #28]	@ (8006e94 <HAL_Init+0x40>)
 8006e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e7c:	2003      	movs	r0, #3
 8006e7e:	f000 f8fc 	bl	800707a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e82:	200f      	movs	r0, #15
 8006e84:	f7fe fc3e 	bl	8005704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e88:	f7fe fc10 	bl	80056ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40023c00 	.word	0x40023c00

08006e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_IncTick+0x20>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <HAL_IncTick+0x24>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	4a04      	ldr	r2, [pc, #16]	@ (8006ebc <HAL_IncTick+0x24>)
 8006eaa:	6013      	str	r3, [r2, #0]
}
 8006eac:	bf00      	nop
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	200000b8 	.word	0x200000b8
 8006ebc:	20000c4c 	.word	0x20000c4c

08006ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8006ec4:	4b03      	ldr	r3, [pc, #12]	@ (8006ed4 <HAL_GetTick+0x14>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000c4c 	.word	0x20000c4c

08006ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ee0:	f7ff ffee 	bl	8006ec0 <HAL_GetTick>
 8006ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d005      	beq.n	8006efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <HAL_Delay+0x44>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006efe:	bf00      	nop
 8006f00:	f7ff ffde 	bl	8006ec0 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d8f7      	bhi.n	8006f00 <HAL_Delay+0x28>
  {
  }
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200000b8 	.word	0x200000b8

08006f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f30:	4b0c      	ldr	r3, [pc, #48]	@ (8006f64 <__NVIC_SetPriorityGrouping+0x44>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f52:	4a04      	ldr	r2, [pc, #16]	@ (8006f64 <__NVIC_SetPriorityGrouping+0x44>)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	60d3      	str	r3, [r2, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	e000ed00 	.word	0xe000ed00

08006f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f6c:	4b04      	ldr	r3, [pc, #16]	@ (8006f80 <__NVIC_GetPriorityGrouping+0x18>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	0a1b      	lsrs	r3, r3, #8
 8006f72:	f003 0307 	and.w	r3, r3, #7
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	db0b      	blt.n	8006fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	f003 021f 	and.w	r2, r3, #31
 8006f9c:	4907      	ldr	r1, [pc, #28]	@ (8006fbc <__NVIC_EnableIRQ+0x38>)
 8006f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2001      	movs	r0, #1
 8006fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8006faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	e000e100 	.word	0xe000e100

08006fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db0a      	blt.n	8006fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	490c      	ldr	r1, [pc, #48]	@ (800700c <__NVIC_SetPriority+0x4c>)
 8006fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fde:	0112      	lsls	r2, r2, #4
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fe8:	e00a      	b.n	8007000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4908      	ldr	r1, [pc, #32]	@ (8007010 <__NVIC_SetPriority+0x50>)
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	0112      	lsls	r2, r2, #4
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	761a      	strb	r2, [r3, #24]
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	e000e100 	.word	0xe000e100
 8007010:	e000ed00 	.word	0xe000ed00

08007014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007014:	b480      	push	{r7}
 8007016:	b089      	sub	sp, #36	@ 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f1c3 0307 	rsb	r3, r3, #7
 800702e:	2b04      	cmp	r3, #4
 8007030:	bf28      	it	cs
 8007032:	2304      	movcs	r3, #4
 8007034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3304      	adds	r3, #4
 800703a:	2b06      	cmp	r3, #6
 800703c:	d902      	bls.n	8007044 <NVIC_EncodePriority+0x30>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3b03      	subs	r3, #3
 8007042:	e000      	b.n	8007046 <NVIC_EncodePriority+0x32>
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007048:	f04f 32ff 	mov.w	r2, #4294967295
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43da      	mvns	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	401a      	ands	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800705c:	f04f 31ff 	mov.w	r1, #4294967295
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	43d9      	mvns	r1, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	4313      	orrs	r3, r2
         );
}
 800706e:	4618      	mov	r0, r3
 8007070:	3724      	adds	r7, #36	@ 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff4c 	bl	8006f20 <__NVIC_SetPriorityGrouping>
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80070a2:	f7ff ff61 	bl	8006f68 <__NVIC_GetPriorityGrouping>
 80070a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	6978      	ldr	r0, [r7, #20]
 80070ae:	f7ff ffb1 	bl	8007014 <NVIC_EncodePriority>
 80070b2:	4602      	mov	r2, r0
 80070b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff ff80 	bl	8006fc0 <__NVIC_SetPriority>
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff54 	bl	8006f84 <__NVIC_EnableIRQ>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070f0:	f7ff fee6 	bl	8006ec0 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e099      	b.n	8007234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0201 	bic.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007120:	e00f      	b.n	8007142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007122:	f7ff fecd 	bl	8006ec0 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b05      	cmp	r3, #5
 800712e:	d908      	bls.n	8007142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2203      	movs	r2, #3
 800713a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e078      	b.n	8007234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e8      	bne.n	8007122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4b38      	ldr	r3, [pc, #224]	@ (800723c <HAL_DMA_Init+0x158>)
 800715c:	4013      	ands	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800716e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800717a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007198:	2b04      	cmp	r3, #4
 800719a:	d107      	bne.n	80071ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a4:	4313      	orrs	r3, r2
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f023 0307 	bic.w	r3, r3, #7
 80071c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d117      	bne.n	8007206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00e      	beq.n	8007206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb0d 	bl	8007808 <DMA_CheckFifoParam>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2240      	movs	r2, #64	@ 0x40
 80071f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007202:	2301      	movs	r3, #1
 8007204:	e016      	b.n	8007234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fac4 	bl	800779c <DMA_CalcBaseAndBitshift>
 8007214:	4603      	mov	r3, r0
 8007216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800721c:	223f      	movs	r2, #63	@ 0x3f
 800721e:	409a      	lsls	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	f010803f 	.word	0xf010803f

08007240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007256:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_DMA_Start_IT+0x26>
 8007262:	2302      	movs	r3, #2
 8007264:	e040      	b.n	80072e8 <HAL_DMA_Start_IT+0xa8>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	d12f      	bne.n	80072da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fa56 	bl	8007740 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007298:	223f      	movs	r2, #63	@ 0x3f
 800729a:	409a      	lsls	r2, r3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0216 	orr.w	r2, r2, #22
 80072ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d007      	beq.n	80072c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0208 	orr.w	r2, r2, #8
 80072c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	e005      	b.n	80072e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072e2:	2302      	movs	r3, #2
 80072e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072fe:	f7ff fddf 	bl	8006ec0 <HAL_GetTick>
 8007302:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d008      	beq.n	8007322 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2280      	movs	r2, #128	@ 0x80
 8007314:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e052      	b.n	80073c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0216 	bic.w	r2, r2, #22
 8007330:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695a      	ldr	r2, [r3, #20]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007340:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d103      	bne.n	8007352 <HAL_DMA_Abort+0x62>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734e:	2b00      	cmp	r3, #0
 8007350:	d007      	beq.n	8007362 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0208 	bic.w	r2, r2, #8
 8007360:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007372:	e013      	b.n	800739c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007374:	f7ff fda4 	bl	8006ec0 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b05      	cmp	r3, #5
 8007380:	d90c      	bls.n	800739c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2203      	movs	r2, #3
 800738c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e015      	b.n	80073c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e4      	bne.n	8007374 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ae:	223f      	movs	r2, #63	@ 0x3f
 80073b0:	409a      	lsls	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d004      	beq.n	80073ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2280      	movs	r2, #128	@ 0x80
 80073e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e00c      	b.n	8007408 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2205      	movs	r2, #5
 80073f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007420:	4b8e      	ldr	r3, [pc, #568]	@ (800765c <HAL_DMA_IRQHandler+0x248>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a8e      	ldr	r2, [pc, #568]	@ (8007660 <HAL_DMA_IRQHandler+0x24c>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	0a9b      	lsrs	r3, r3, #10
 800742c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007432:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743e:	2208      	movs	r2, #8
 8007440:	409a      	lsls	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4013      	ands	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01a      	beq.n	8007480 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d013      	beq.n	8007480 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0204 	bic.w	r2, r2, #4
 8007466:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746c:	2208      	movs	r2, #8
 800746e:	409a      	lsls	r2, r3
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007478:	f043 0201 	orr.w	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007484:	2201      	movs	r2, #1
 8007486:	409a      	lsls	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d012      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a2:	2201      	movs	r2, #1
 80074a4:	409a      	lsls	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ae:	f043 0202 	orr.w	r2, r3, #2
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ba:	2204      	movs	r2, #4
 80074bc:	409a      	lsls	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d012      	beq.n	80074ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d8:	2204      	movs	r2, #4
 80074da:	409a      	lsls	r2, r3
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	f043 0204 	orr.w	r2, r3, #4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f0:	2210      	movs	r2, #16
 80074f2:	409a      	lsls	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d043      	beq.n	8007584 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d03c      	beq.n	8007584 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750e:	2210      	movs	r2, #16
 8007510:	409a      	lsls	r2, r3
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d018      	beq.n	8007556 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d108      	bne.n	8007544 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	2b00      	cmp	r3, #0
 8007538:	d024      	beq.n	8007584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
 8007542:	e01f      	b.n	8007584 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01b      	beq.n	8007584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
 8007554:	e016      	b.n	8007584 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d107      	bne.n	8007574 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0208 	bic.w	r2, r2, #8
 8007572:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007588:	2220      	movs	r2, #32
 800758a:	409a      	lsls	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 808f 	beq.w	80076b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8087 	beq.w	80076b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075aa:	2220      	movs	r2, #32
 80075ac:	409a      	lsls	r2, r3
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	d136      	bne.n	800762c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0216 	bic.w	r2, r2, #22
 80075cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695a      	ldr	r2, [r3, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d103      	bne.n	80075ee <HAL_DMA_IRQHandler+0x1da>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0208 	bic.w	r2, r2, #8
 80075fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007602:	223f      	movs	r2, #63	@ 0x3f
 8007604:	409a      	lsls	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761e:	2b00      	cmp	r3, #0
 8007620:	d07e      	beq.n	8007720 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
        }
        return;
 800762a:	e079      	b.n	8007720 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01d      	beq.n	8007676 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10d      	bne.n	8007664 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764c:	2b00      	cmp	r3, #0
 800764e:	d031      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
 8007658:	e02c      	b.n	80076b4 <HAL_DMA_IRQHandler+0x2a0>
 800765a:	bf00      	nop
 800765c:	20000064 	.word	0x20000064
 8007660:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d023      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
 8007674:	e01e      	b.n	80076b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0210 	bic.w	r2, r2, #16
 8007692:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d032      	beq.n	8007722 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d022      	beq.n	800770e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2205      	movs	r2, #5
 80076cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60bb      	str	r3, [r7, #8]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d307      	bcc.n	80076fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f2      	bne.n	80076e0 <HAL_DMA_IRQHandler+0x2cc>
 80076fa:	e000      	b.n	80076fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80076fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
 800771e:	e000      	b.n	8007722 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007720:	bf00      	nop
    }
  }
}
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800775c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b40      	cmp	r3, #64	@ 0x40
 800776c:	d108      	bne.n	8007780 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800777e:	e007      	b.n	8007790 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	60da      	str	r2, [r3, #12]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	3b10      	subs	r3, #16
 80077ac:	4a14      	ldr	r2, [pc, #80]	@ (8007800 <DMA_CalcBaseAndBitshift+0x64>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	091b      	lsrs	r3, r3, #4
 80077b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077b6:	4a13      	ldr	r2, [pc, #76]	@ (8007804 <DMA_CalcBaseAndBitshift+0x68>)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d909      	bls.n	80077de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	659a      	str	r2, [r3, #88]	@ 0x58
 80077dc:	e007      	b.n	80077ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80077e6:	f023 0303 	bic.w	r3, r3, #3
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	aaaaaaab 	.word	0xaaaaaaab
 8007804:	08015ad4 	.word	0x08015ad4

08007808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d11f      	bne.n	8007862 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d856      	bhi.n	80078d6 <DMA_CheckFifoParam+0xce>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <DMA_CheckFifoParam+0x28>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007841 	.word	0x08007841
 8007834:	08007853 	.word	0x08007853
 8007838:	08007841 	.word	0x08007841
 800783c:	080078d7 	.word	0x080078d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d046      	beq.n	80078da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007850:	e043      	b.n	80078da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800785a:	d140      	bne.n	80078de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007860:	e03d      	b.n	80078de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800786a:	d121      	bne.n	80078b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b03      	cmp	r3, #3
 8007870:	d837      	bhi.n	80078e2 <DMA_CheckFifoParam+0xda>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <DMA_CheckFifoParam+0x70>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	08007889 	.word	0x08007889
 800787c:	0800788f 	.word	0x0800788f
 8007880:	08007889 	.word	0x08007889
 8007884:	080078a1 	.word	0x080078a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
      break;
 800788c:	e030      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d025      	beq.n	80078e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800789e:	e022      	b.n	80078e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078a8:	d11f      	bne.n	80078ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078ae:	e01c      	b.n	80078ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d903      	bls.n	80078be <DMA_CheckFifoParam+0xb6>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d003      	beq.n	80078c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078bc:	e018      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
      break;
 80078c2:	e015      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00e      	beq.n	80078ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e00b      	b.n	80078ee <DMA_CheckFifoParam+0xe6>
      break;
 80078d6:	bf00      	nop
 80078d8:	e00a      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      break;
 80078da:	bf00      	nop
 80078dc:	e008      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      break;
 80078de:	bf00      	nop
 80078e0:	e006      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      break;
 80078e2:	bf00      	nop
 80078e4:	e004      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      break;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <DMA_CheckFifoParam+0xe8>
      break;
 80078ee:	bf00      	nop
    }
  } 
  
  return status; 
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop

08007900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	@ 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800790a:	2300      	movs	r3, #0
 800790c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007912:	2300      	movs	r3, #0
 8007914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	e16b      	b.n	8007bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800791c:	2201      	movs	r2, #1
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4013      	ands	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	429a      	cmp	r2, r3
 8007936:	f040 815a 	bne.w	8007bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	2b01      	cmp	r3, #1
 8007944:	d005      	beq.n	8007952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800794e:	2b02      	cmp	r3, #2
 8007950:	d130      	bne.n	80079b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	2203      	movs	r2, #3
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	43db      	mvns	r3, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4013      	ands	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4313      	orrs	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007988:	2201      	movs	r2, #1
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	43db      	mvns	r3, r3
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	4013      	ands	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 0201 	and.w	r2, r3, #1
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d017      	beq.n	80079f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	2203      	movs	r2, #3
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	4013      	ands	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d123      	bne.n	8007a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	08da      	lsrs	r2, r3, #3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3208      	adds	r2, #8
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	220f      	movs	r2, #15
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	08da      	lsrs	r2, r3, #3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3208      	adds	r2, #8
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	2203      	movs	r2, #3
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	43db      	mvns	r3, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f003 0203 	and.w	r2, r3, #3
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80b4 	beq.w	8007bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	4b60      	ldr	r3, [pc, #384]	@ (8007c0c <HAL_GPIO_Init+0x30c>)
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8007c0c <HAL_GPIO_Init+0x30c>)
 8007a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a96:	4b5d      	ldr	r3, [pc, #372]	@ (8007c0c <HAL_GPIO_Init+0x30c>)
 8007a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8007c10 <HAL_GPIO_Init+0x310>)
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	220f      	movs	r2, #15
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a52      	ldr	r2, [pc, #328]	@ (8007c14 <HAL_GPIO_Init+0x314>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d02b      	beq.n	8007b26 <HAL_GPIO_Init+0x226>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a51      	ldr	r2, [pc, #324]	@ (8007c18 <HAL_GPIO_Init+0x318>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d025      	beq.n	8007b22 <HAL_GPIO_Init+0x222>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a50      	ldr	r2, [pc, #320]	@ (8007c1c <HAL_GPIO_Init+0x31c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01f      	beq.n	8007b1e <HAL_GPIO_Init+0x21e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8007c20 <HAL_GPIO_Init+0x320>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d019      	beq.n	8007b1a <HAL_GPIO_Init+0x21a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8007c24 <HAL_GPIO_Init+0x324>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d013      	beq.n	8007b16 <HAL_GPIO_Init+0x216>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a4d      	ldr	r2, [pc, #308]	@ (8007c28 <HAL_GPIO_Init+0x328>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00d      	beq.n	8007b12 <HAL_GPIO_Init+0x212>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a4c      	ldr	r2, [pc, #304]	@ (8007c2c <HAL_GPIO_Init+0x32c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d007      	beq.n	8007b0e <HAL_GPIO_Init+0x20e>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a4b      	ldr	r2, [pc, #300]	@ (8007c30 <HAL_GPIO_Init+0x330>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d101      	bne.n	8007b0a <HAL_GPIO_Init+0x20a>
 8007b06:	2307      	movs	r3, #7
 8007b08:	e00e      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	e00c      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b0e:	2306      	movs	r3, #6
 8007b10:	e00a      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b12:	2305      	movs	r3, #5
 8007b14:	e008      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b16:	2304      	movs	r3, #4
 8007b18:	e006      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e004      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e002      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <HAL_GPIO_Init+0x228>
 8007b26:	2300      	movs	r3, #0
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	f002 0203 	and.w	r2, r2, #3
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	4093      	lsls	r3, r2
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b38:	4935      	ldr	r1, [pc, #212]	@ (8007c10 <HAL_GPIO_Init+0x310>)
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	089b      	lsrs	r3, r3, #2
 8007b3e:	3302      	adds	r3, #2
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b46:	4b3b      	ldr	r3, [pc, #236]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4013      	ands	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b6a:	4a32      	ldr	r2, [pc, #200]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b70:	4b30      	ldr	r3, [pc, #192]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b94:	4a27      	ldr	r2, [pc, #156]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007b9a:	4b26      	ldr	r3, [pc, #152]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007be8:	4a12      	ldr	r2, [pc, #72]	@ (8007c34 <HAL_GPIO_Init+0x334>)
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	f67f ae90 	bls.w	800791c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3724      	adds	r7, #36	@ 0x24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	40013800 	.word	0x40013800
 8007c14:	40020000 	.word	0x40020000
 8007c18:	40020400 	.word	0x40020400
 8007c1c:	40020800 	.word	0x40020800
 8007c20:	40020c00 	.word	0x40020c00
 8007c24:	40021000 	.word	0x40021000
 8007c28:	40021400 	.word	0x40021400
 8007c2c:	40021800 	.word	0x40021800
 8007c30:	40021c00 	.word	0x40021c00
 8007c34:	40013c00 	.word	0x40013c00

08007c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	887b      	ldrh	r3, [r7, #2]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
 8007c54:	e001      	b.n	8007c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
 8007c74:	4613      	mov	r3, r2
 8007c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c78:	787b      	ldrb	r3, [r7, #1]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c7e:	887a      	ldrh	r2, [r7, #2]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c84:	e003      	b.n	8007c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c86:	887b      	ldrh	r3, [r7, #2]
 8007c88:	041a      	lsls	r2, r3, #16
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	619a      	str	r2, [r3, #24]
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007cac:	887a      	ldrh	r2, [r7, #2]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	041a      	lsls	r2, r3, #16
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	43d9      	mvns	r1, r3
 8007cb8:	887b      	ldrh	r3, [r7, #2]
 8007cba:	400b      	ands	r3, r1
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	619a      	str	r2, [r3, #24]
}
 8007cc2:	bf00      	nop
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e12b      	b.n	8007f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fd fa98 	bl	800522c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2224      	movs	r2, #36	@ 0x24
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0201 	bic.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d34:	f002 fa0e 	bl	800a154 <HAL_RCC_GetPCLK1Freq>
 8007d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4a81      	ldr	r2, [pc, #516]	@ (8007f44 <HAL_I2C_Init+0x274>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d807      	bhi.n	8007d54 <HAL_I2C_Init+0x84>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a80      	ldr	r2, [pc, #512]	@ (8007f48 <HAL_I2C_Init+0x278>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	bf94      	ite	ls
 8007d4c:	2301      	movls	r3, #1
 8007d4e:	2300      	movhi	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	e006      	b.n	8007d62 <HAL_I2C_Init+0x92>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4a7d      	ldr	r2, [pc, #500]	@ (8007f4c <HAL_I2C_Init+0x27c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	bf94      	ite	ls
 8007d5c:	2301      	movls	r3, #1
 8007d5e:	2300      	movhi	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e0e7      	b.n	8007f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4a78      	ldr	r2, [pc, #480]	@ (8007f50 <HAL_I2C_Init+0x280>)
 8007d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d72:	0c9b      	lsrs	r3, r3, #18
 8007d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4a6a      	ldr	r2, [pc, #424]	@ (8007f44 <HAL_I2C_Init+0x274>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d802      	bhi.n	8007da4 <HAL_I2C_Init+0xd4>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	3301      	adds	r3, #1
 8007da2:	e009      	b.n	8007db8 <HAL_I2C_Init+0xe8>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	4a69      	ldr	r2, [pc, #420]	@ (8007f54 <HAL_I2C_Init+0x284>)
 8007db0:	fba2 2303 	umull	r2, r3, r2, r3
 8007db4:	099b      	lsrs	r3, r3, #6
 8007db6:	3301      	adds	r3, #1
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007dca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	495c      	ldr	r1, [pc, #368]	@ (8007f44 <HAL_I2C_Init+0x274>)
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	d819      	bhi.n	8007e0c <HAL_I2C_Init+0x13c>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	1e59      	subs	r1, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007de6:	1c59      	adds	r1, r3, #1
 8007de8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007dec:	400b      	ands	r3, r1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_I2C_Init+0x138>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1e59      	subs	r1, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e00:	3301      	adds	r3, #1
 8007e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e06:	e051      	b.n	8007eac <HAL_I2C_Init+0x1dc>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	e04f      	b.n	8007eac <HAL_I2C_Init+0x1dc>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d111      	bne.n	8007e38 <HAL_I2C_Init+0x168>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	1e58      	subs	r0, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6859      	ldr	r1, [r3, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	440b      	add	r3, r1
 8007e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e26:	3301      	adds	r3, #1
 8007e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	e012      	b.n	8007e5e <HAL_I2C_Init+0x18e>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	1e58      	subs	r0, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6859      	ldr	r1, [r3, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	0099      	lsls	r1, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e4e:	3301      	adds	r3, #1
 8007e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <HAL_I2C_Init+0x196>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e022      	b.n	8007eac <HAL_I2C_Init+0x1dc>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10e      	bne.n	8007e8c <HAL_I2C_Init+0x1bc>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1e58      	subs	r0, r3, #1
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6859      	ldr	r1, [r3, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	440b      	add	r3, r1
 8007e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e80:	3301      	adds	r3, #1
 8007e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e8a:	e00f      	b.n	8007eac <HAL_I2C_Init+0x1dc>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	1e58      	subs	r0, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6859      	ldr	r1, [r3, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	0099      	lsls	r1, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	6809      	ldr	r1, [r1, #0]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69da      	ldr	r2, [r3, #28]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007eda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6911      	ldr	r1, [r2, #16]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	68d2      	ldr	r2, [r2, #12]
 8007ee6:	4311      	orrs	r1, r2
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0201 	orr.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	000186a0 	.word	0x000186a0
 8007f48:	001e847f 	.word	0x001e847f
 8007f4c:	003d08ff 	.word	0x003d08ff
 8007f50:	431bde83 	.word	0x431bde83
 8007f54:	10624dd3 	.word	0x10624dd3

08007f58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	461a      	mov	r2, r3
 8007f64:	460b      	mov	r3, r1
 8007f66:	817b      	strh	r3, [r7, #10]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f6c:	f7fe ffa8 	bl	8006ec0 <HAL_GetTick>
 8007f70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	f040 80e0 	bne.w	8008140 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2319      	movs	r3, #25
 8007f86:	2201      	movs	r2, #1
 8007f88:	4970      	ldr	r1, [pc, #448]	@ (800814c <HAL_I2C_Master_Transmit+0x1f4>)
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f001 fa3c 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0d3      	b.n	8008142 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_I2C_Master_Transmit+0x50>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e0cc      	b.n	8008142 <HAL_I2C_Master_Transmit+0x1ea>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d007      	beq.n	8007fce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2221      	movs	r2, #33	@ 0x21
 8007fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2210      	movs	r2, #16
 8007fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	893a      	ldrh	r2, [r7, #8]
 8007ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4a50      	ldr	r2, [pc, #320]	@ (8008150 <HAL_I2C_Master_Transmit+0x1f8>)
 800800e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008010:	8979      	ldrh	r1, [r7, #10]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 ff28 	bl	8008e6c <I2C_MasterRequestWrite>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e08d      	b.n	8008142 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800803c:	e066      	b.n	800810c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	6a39      	ldr	r1, [r7, #32]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f001 fafa 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008052:	2b04      	cmp	r3, #4
 8008054:	d107      	bne.n	8008066 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008064:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e06b      	b.n	8008142 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806e:	781a      	ldrb	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d11b      	bne.n	80080e0 <HAL_I2C_Master_Transmit+0x188>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d017      	beq.n	80080e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	6a39      	ldr	r1, [r7, #32]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f001 faf1 	bl	80096cc <I2C_WaitOnBTFFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00d      	beq.n	800810c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d107      	bne.n	8008108 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008106:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e01a      	b.n	8008142 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008110:	2b00      	cmp	r3, #0
 8008112:	d194      	bne.n	800803e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	e000      	b.n	8008142 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008140:	2302      	movs	r3, #2
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	00100002 	.word	0x00100002
 8008150:	ffff0000 	.word	0xffff0000

08008154 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08c      	sub	sp, #48	@ 0x30
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	461a      	mov	r2, r3
 8008160:	460b      	mov	r3, r1
 8008162:	817b      	strh	r3, [r7, #10]
 8008164:	4613      	mov	r3, r2
 8008166:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008168:	f7fe feaa 	bl	8006ec0 <HAL_GetTick>
 800816c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b20      	cmp	r3, #32
 8008178:	f040 8217 	bne.w	80085aa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2319      	movs	r3, #25
 8008182:	2201      	movs	r2, #1
 8008184:	497c      	ldr	r1, [pc, #496]	@ (8008378 <HAL_I2C_Master_Receive+0x224>)
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f001 f93e 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
 8008194:	e20a      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_I2C_Master_Receive+0x50>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e203      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d007      	beq.n	80081ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2222      	movs	r2, #34	@ 0x22
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2210      	movs	r2, #16
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	893a      	ldrh	r2, [r7, #8]
 80081fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a5c      	ldr	r2, [pc, #368]	@ (800837c <HAL_I2C_Master_Receive+0x228>)
 800820a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800820c:	8979      	ldrh	r1, [r7, #10]
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 feac 	bl	8008f70 <I2C_MasterRequestRead>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e1c4      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d113      	bne.n	8008252 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800822a:	2300      	movs	r3, #0
 800822c:	623b      	str	r3, [r7, #32]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	623b      	str	r3, [r7, #32]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	e198      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008256:	2b01      	cmp	r3, #1
 8008258:	d11b      	bne.n	8008292 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800826a:	2300      	movs	r3, #0
 800826c:	61fb      	str	r3, [r7, #28]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e178      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008296:	2b02      	cmp	r3, #2
 8008298:	d11b      	bne.n	80082d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	e158      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80082f8:	e144      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082fe:	2b03      	cmp	r3, #3
 8008300:	f200 80f1 	bhi.w	80084e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008308:	2b01      	cmp	r3, #1
 800830a:	d123      	bne.n	8008354 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800830c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800830e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f001 fa23 	bl	800975c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e145      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691a      	ldr	r2, [r3, #16]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832a:	b2d2      	uxtb	r2, r2
 800832c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008352:	e117      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008358:	2b02      	cmp	r3, #2
 800835a:	d14e      	bne.n	80083fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008362:	2200      	movs	r2, #0
 8008364:	4906      	ldr	r1, [pc, #24]	@ (8008380 <HAL_I2C_Master_Receive+0x22c>)
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f001 f84e 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d008      	beq.n	8008384 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e11a      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
 8008376:	bf00      	nop
 8008378:	00100002 	.word	0x00100002
 800837c:	ffff0000 	.word	0xffff0000
 8008380:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083f8:	e0c4      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	496c      	ldr	r1, [pc, #432]	@ (80085b4 <HAL_I2C_Master_Receive+0x460>)
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 ffff 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0cb      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691a      	ldr	r2, [r3, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008440:	3b01      	subs	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845c:	2200      	movs	r2, #0
 800845e:	4955      	ldr	r1, [pc, #340]	@ (80085b4 <HAL_I2C_Master_Receive+0x460>)
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 ffd1 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e09d      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800847e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80084e4:	e04e      	b.n	8008584 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 f936 	bl	800975c <I2C_WaitOnRXNEFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e058      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008516:	3b01      	subs	r3, #1
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b04      	cmp	r3, #4
 8008538:	d124      	bne.n	8008584 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800853e:	2b03      	cmp	r3, #3
 8008540:	d107      	bne.n	8008552 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008550:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f aeb6 	bne.w	80082fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	e000      	b.n	80085ac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80085aa:	2302      	movs	r3, #2
  }
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3728      	adds	r7, #40	@ 0x28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	00010004 	.word	0x00010004

080085b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af02      	add	r7, sp, #8
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	817b      	strh	r3, [r7, #10]
 80085ca:	460b      	mov	r3, r1
 80085cc:	813b      	strh	r3, [r7, #8]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085d2:	f7fe fc75 	bl	8006ec0 <HAL_GetTick>
 80085d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	f040 80d9 	bne.w	8008798 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	2319      	movs	r3, #25
 80085ec:	2201      	movs	r2, #1
 80085ee:	496d      	ldr	r1, [pc, #436]	@ (80087a4 <HAL_I2C_Mem_Write+0x1ec>)
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 ff09 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80085fc:	2302      	movs	r3, #2
 80085fe:	e0cc      	b.n	800879a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008606:	2b01      	cmp	r3, #1
 8008608:	d101      	bne.n	800860e <HAL_I2C_Mem_Write+0x56>
 800860a:	2302      	movs	r3, #2
 800860c:	e0c5      	b.n	800879a <HAL_I2C_Mem_Write+0x1e2>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b01      	cmp	r3, #1
 8008622:	d007      	beq.n	8008634 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f042 0201 	orr.w	r2, r2, #1
 8008632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2221      	movs	r2, #33	@ 0x21
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2240      	movs	r2, #64	@ 0x40
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a3a      	ldr	r2, [r7, #32]
 800865e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800866a:	b29a      	uxth	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a4d      	ldr	r2, [pc, #308]	@ (80087a8 <HAL_I2C_Mem_Write+0x1f0>)
 8008674:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008676:	88f8      	ldrh	r0, [r7, #6]
 8008678:	893a      	ldrh	r2, [r7, #8]
 800867a:	8979      	ldrh	r1, [r7, #10]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4603      	mov	r3, r0
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fd40 	bl	800910c <I2C_RequestMemoryWrite>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d052      	beq.n	8008738 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e081      	b.n	800879a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 ffce 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00d      	beq.n	80086c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d107      	bne.n	80086be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e06b      	b.n	800879a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d11b      	bne.n	8008738 <HAL_I2C_Mem_Write+0x180>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008704:	2b00      	cmp	r3, #0
 8008706:	d017      	beq.n	8008738 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008722:	3b01      	subs	r3, #1
 8008724:	b29a      	uxth	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800872e:	b29b      	uxth	r3, r3
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1aa      	bne.n	8008696 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 ffc1 	bl	80096cc <I2C_WaitOnBTFFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	2b04      	cmp	r3, #4
 8008756:	d107      	bne.n	8008768 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008766:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e016      	b.n	800879a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800877a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	e000      	b.n	800879a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008798:	2302      	movs	r3, #2
  }
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	00100002 	.word	0x00100002
 80087a8:	ffff0000 	.word	0xffff0000

080087ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08c      	sub	sp, #48	@ 0x30
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	817b      	strh	r3, [r7, #10]
 80087be:	460b      	mov	r3, r1
 80087c0:	813b      	strh	r3, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087c6:	f7fe fb7b 	bl	8006ec0 <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	f040 8214 	bne.w	8008c02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	2319      	movs	r3, #25
 80087e0:	2201      	movs	r2, #1
 80087e2:	497b      	ldr	r1, [pc, #492]	@ (80089d0 <HAL_I2C_Mem_Read+0x224>)
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fe0f 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e207      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_I2C_Mem_Read+0x56>
 80087fe:	2302      	movs	r3, #2
 8008800:	e200      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b01      	cmp	r3, #1
 8008816:	d007      	beq.n	8008828 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0201 	orr.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2222      	movs	r2, #34	@ 0x22
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2240      	movs	r2, #64	@ 0x40
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800885e:	b29a      	uxth	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a5b      	ldr	r2, [pc, #364]	@ (80089d4 <HAL_I2C_Mem_Read+0x228>)
 8008868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800886a:	88f8      	ldrh	r0, [r7, #6]
 800886c:	893a      	ldrh	r2, [r7, #8]
 800886e:	8979      	ldrh	r1, [r7, #10]
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	4603      	mov	r3, r0
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fcdc 	bl	8009238 <I2C_RequestMemoryRead>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e1bc      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d113      	bne.n	80088ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008892:	2300      	movs	r3, #0
 8008894:	623b      	str	r3, [r7, #32]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	623b      	str	r3, [r7, #32]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	623b      	str	r3, [r7, #32]
 80088a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e190      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d11b      	bne.n	80088fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	61fb      	str	r3, [r7, #28]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e170      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d11b      	bne.n	800893a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008910:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008922:	2300      	movs	r3, #0
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	e150      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	617b      	str	r3, [r7, #20]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008950:	e144      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008956:	2b03      	cmp	r3, #3
 8008958:	f200 80f1 	bhi.w	8008b3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008960:	2b01      	cmp	r3, #1
 8008962:	d123      	bne.n	80089ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008966:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fef7 	bl	800975c <I2C_WaitOnRXNEFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e145      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80089aa:	e117      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d14e      	bne.n	8008a52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ba:	2200      	movs	r2, #0
 80089bc:	4906      	ldr	r1, [pc, #24]	@ (80089d8 <HAL_I2C_Mem_Read+0x22c>)
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fd22 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d008      	beq.n	80089dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e11a      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
 80089ce:	bf00      	nop
 80089d0:	00100002 	.word	0x00100002
 80089d4:	ffff0000 	.word	0xffff0000
 80089d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008a50:	e0c4      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a58:	2200      	movs	r2, #0
 8008a5a:	496c      	ldr	r1, [pc, #432]	@ (8008c0c <HAL_I2C_Mem_Read+0x460>)
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fcd3 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0cb      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	b2d2      	uxtb	r2, r2
 8008a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4955      	ldr	r1, [pc, #340]	@ (8008c0c <HAL_I2C_Mem_Read+0x460>)
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fca5 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e09d      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af4:	3b01      	subs	r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	3b01      	subs	r3, #1
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b3c:	e04e      	b.n	8008bdc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 fe0a 	bl	800975c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e058      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	b2d2      	uxtb	r2, r2
 8008b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d124      	bne.n	8008bdc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d107      	bne.n	8008baa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ba8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	b2d2      	uxtb	r2, r2
 8008bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f47f aeb6 	bne.w	8008952 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e000      	b.n	8008c04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008c02:	2302      	movs	r3, #2
  }
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3728      	adds	r7, #40	@ 0x28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	00010004 	.word	0x00010004

08008c10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	@ 0x28
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	603b      	str	r3, [r7, #0]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008c20:	f7fe f94e 	bl	8006ec0 <HAL_GetTick>
 8008c24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	f040 8111 	bne.w	8008e5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	2319      	movs	r3, #25
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4988      	ldr	r1, [pc, #544]	@ (8008e64 <HAL_I2C_IsDeviceReady+0x254>)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fbe0 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e104      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_I2C_IsDeviceReady+0x50>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e0fd      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d007      	beq.n	8008c86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0201 	orr.w	r2, r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2224      	movs	r2, #36	@ 0x24
 8008c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4a70      	ldr	r2, [pc, #448]	@ (8008e68 <HAL_I2C_IsDeviceReady+0x258>)
 8008ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fb9e 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce0:	d103      	bne.n	8008cea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ce8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e0b6      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008cee:	897b      	ldrh	r3, [r7, #10]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008cfc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008cfe:	f7fe f8df 	bl	8006ec0 <HAL_GetTick>
 8008d02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	bf0c      	ite	eq
 8008d12:	2301      	moveq	r3, #1
 8008d14:	2300      	movne	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d28:	bf0c      	ite	eq
 8008d2a:	2301      	moveq	r3, #1
 8008d2c:	2300      	movne	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008d32:	e025      	b.n	8008d80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d34:	f7fe f8c4 	bl	8006ec0 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d302      	bcc.n	8008d4a <HAL_I2C_IsDeviceReady+0x13a>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	22a0      	movs	r2, #160	@ 0xa0
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d76:	bf0c      	ite	eq
 8008d78:	2301      	moveq	r3, #1
 8008d7a:	2300      	movne	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2ba0      	cmp	r3, #160	@ 0xa0
 8008d8a:	d005      	beq.n	8008d98 <HAL_I2C_IsDeviceReady+0x188>
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <HAL_I2C_IsDeviceReady+0x188>
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0cd      	beq.n	8008d34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	f003 0302 	and.w	r3, r3, #2
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d129      	bne.n	8008e02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dbc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	2319      	movs	r3, #25
 8008dda:	2201      	movs	r2, #1
 8008ddc:	4921      	ldr	r1, [pc, #132]	@ (8008e64 <HAL_I2C_IsDeviceReady+0x254>)
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fb12 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e036      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e02c      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008e1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2319      	movs	r3, #25
 8008e22:	2201      	movs	r2, #1
 8008e24:	490f      	ldr	r1, [pc, #60]	@ (8008e64 <HAL_I2C_IsDeviceReady+0x254>)
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 faee 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e012      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	f4ff af32 	bcc.w	8008caa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008e5a:	2302      	movs	r3, #2
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	00100002 	.word	0x00100002
 8008e68:	ffff0000 	.word	0xffff0000

08008e6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d006      	beq.n	8008e96 <I2C_MasterRequestWrite+0x2a>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d003      	beq.n	8008e96 <I2C_MasterRequestWrite+0x2a>
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e94:	d108      	bne.n	8008ea8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e00b      	b.n	8008ec0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eac:	2b12      	cmp	r3, #18
 8008eae:	d107      	bne.n	8008ec0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 fa9b 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00d      	beq.n	8008ef4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee6:	d103      	bne.n	8008ef0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e035      	b.n	8008f60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008efc:	d108      	bne.n	8008f10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008efe:	897b      	ldrh	r3, [r7, #10]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f0c:	611a      	str	r2, [r3, #16]
 8008f0e:	e01b      	b.n	8008f48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f10:	897b      	ldrh	r3, [r7, #10]
 8008f12:	11db      	asrs	r3, r3, #7
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	f003 0306 	and.w	r3, r3, #6
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f063 030f 	orn	r3, r3, #15
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	490e      	ldr	r1, [pc, #56]	@ (8008f68 <I2C_MasterRequestWrite+0xfc>)
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fae4 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e010      	b.n	8008f60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f3e:	897b      	ldrh	r3, [r7, #10]
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4907      	ldr	r1, [pc, #28]	@ (8008f6c <I2C_MasterRequestWrite+0x100>)
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fad4 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	00010008 	.word	0x00010008
 8008f6c:	00010002 	.word	0x00010002

08008f70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d006      	beq.n	8008faa <I2C_MasterRequestRead+0x3a>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d003      	beq.n	8008faa <I2C_MasterRequestRead+0x3a>
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fa8:	d108      	bne.n	8008fbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	e00b      	b.n	8008fd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc0:	2b11      	cmp	r3, #17
 8008fc2:	d107      	bne.n	8008fd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fa11 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ffa:	d103      	bne.n	8009004 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009002:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e079      	b.n	80090fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009010:	d108      	bne.n	8009024 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009012:	897b      	ldrh	r3, [r7, #10]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	611a      	str	r2, [r3, #16]
 8009022:	e05f      	b.n	80090e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009024:	897b      	ldrh	r3, [r7, #10]
 8009026:	11db      	asrs	r3, r3, #7
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f003 0306 	and.w	r3, r3, #6
 800902e:	b2db      	uxtb	r3, r3
 8009030:	f063 030f 	orn	r3, r3, #15
 8009034:	b2da      	uxtb	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	4930      	ldr	r1, [pc, #192]	@ (8009104 <I2C_MasterRequestRead+0x194>)
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fa5a 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e054      	b.n	80090fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009052:	897b      	ldrh	r3, [r7, #10]
 8009054:	b2da      	uxtb	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	4929      	ldr	r1, [pc, #164]	@ (8009108 <I2C_MasterRequestRead+0x198>)
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fa4a 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e044      	b.n	80090fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009096:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f9af 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090be:	d103      	bne.n	80090c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090c6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e017      	b.n	80090fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80090cc:	897b      	ldrh	r3, [r7, #10]
 80090ce:	11db      	asrs	r3, r3, #7
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 0306 	and.w	r3, r3, #6
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f063 030e 	orn	r3, r3, #14
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	4907      	ldr	r1, [pc, #28]	@ (8009108 <I2C_MasterRequestRead+0x198>)
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fa06 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e000      	b.n	80090fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	00010008 	.word	0x00010008
 8009108:	00010002 	.word	0x00010002

0800910c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	4603      	mov	r3, r0
 800911c:	817b      	strh	r3, [r7, #10]
 800911e:	460b      	mov	r3, r1
 8009120:	813b      	strh	r3, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	2200      	movs	r2, #0
 800913e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f960 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00d      	beq.n	800916a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800915c:	d103      	bne.n	8009166 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009164:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e05f      	b.n	800922a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800916a:	897b      	ldrh	r3, [r7, #10]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	461a      	mov	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	6a3a      	ldr	r2, [r7, #32]
 800917e:	492d      	ldr	r1, [pc, #180]	@ (8009234 <I2C_RequestMemoryWrite+0x128>)
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f9bb 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e04c      	b.n	800922a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a8:	6a39      	ldr	r1, [r7, #32]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 fa46 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d107      	bne.n	80091ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e02b      	b.n	800922a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d105      	bne.n	80091e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091d8:	893b      	ldrh	r3, [r7, #8]
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	611a      	str	r2, [r3, #16]
 80091e2:	e021      	b.n	8009228 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80091e4:	893b      	ldrh	r3, [r7, #8]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f4:	6a39      	ldr	r1, [r7, #32]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fa20 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00d      	beq.n	800921e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009206:	2b04      	cmp	r3, #4
 8009208:	d107      	bne.n	800921a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e005      	b.n	800922a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	b2da      	uxtb	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	00010002 	.word	0x00010002

08009238 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	4603      	mov	r3, r0
 8009248:	817b      	strh	r3, [r7, #10]
 800924a:	460b      	mov	r3, r1
 800924c:	813b      	strh	r3, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009260:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	2200      	movs	r2, #0
 800927a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 f8c2 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00d      	beq.n	80092a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009298:	d103      	bne.n	80092a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e0aa      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092a6:	897b      	ldrh	r3, [r7, #10]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80092b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	6a3a      	ldr	r2, [r7, #32]
 80092ba:	4952      	ldr	r1, [pc, #328]	@ (8009404 <I2C_RequestMemoryRead+0x1cc>)
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f91d 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e097      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e4:	6a39      	ldr	r1, [r7, #32]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 f9a8 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00d      	beq.n	800930e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d107      	bne.n	800930a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e076      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800930e:	88fb      	ldrh	r3, [r7, #6]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d105      	bne.n	8009320 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009314:	893b      	ldrh	r3, [r7, #8]
 8009316:	b2da      	uxtb	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	611a      	str	r2, [r3, #16]
 800931e:	e021      	b.n	8009364 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009320:	893b      	ldrh	r3, [r7, #8]
 8009322:	0a1b      	lsrs	r3, r3, #8
 8009324:	b29b      	uxth	r3, r3
 8009326:	b2da      	uxtb	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800932e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009330:	6a39      	ldr	r1, [r7, #32]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f982 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00d      	beq.n	800935a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009342:	2b04      	cmp	r3, #4
 8009344:	d107      	bne.n	8009356 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e050      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800935a:	893b      	ldrh	r3, [r7, #8]
 800935c:	b2da      	uxtb	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009366:	6a39      	ldr	r1, [r7, #32]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f967 	bl	800963c <I2C_WaitOnTXEFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00d      	beq.n	8009390 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009378:	2b04      	cmp	r3, #4
 800937a:	d107      	bne.n	800938c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800938a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e035      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800939e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f82b 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00d      	beq.n	80093d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c6:	d103      	bne.n	80093d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e013      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80093d4:	897b      	ldrh	r3, [r7, #10]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f043 0301 	orr.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	6a3a      	ldr	r2, [r7, #32]
 80093e8:	4906      	ldr	r1, [pc, #24]	@ (8009404 <I2C_RequestMemoryRead+0x1cc>)
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f886 	bl	80094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	00010002 	.word	0x00010002

08009408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	4613      	mov	r3, r2
 8009416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009418:	e048      	b.n	80094ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d044      	beq.n	80094ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009422:	f7fd fd4d 	bl	8006ec0 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d302      	bcc.n	8009438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d139      	bne.n	80094ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b01      	cmp	r3, #1
 8009440:	d10d      	bne.n	800945e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	43da      	mvns	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4013      	ands	r3, r2
 800944e:	b29b      	uxth	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	bf0c      	ite	eq
 8009454:	2301      	moveq	r3, #1
 8009456:	2300      	movne	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	461a      	mov	r2, r3
 800945c:	e00c      	b.n	8009478 <I2C_WaitOnFlagUntilTimeout+0x70>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	43da      	mvns	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4013      	ands	r3, r2
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf0c      	ite	eq
 8009470:	2301      	moveq	r3, #1
 8009472:	2300      	movne	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	461a      	mov	r2, r3
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	429a      	cmp	r2, r3
 800947c:	d116      	bne.n	80094ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009498:	f043 0220 	orr.w	r2, r3, #32
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e023      	b.n	80094f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d10d      	bne.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	43da      	mvns	r2, r3
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	4013      	ands	r3, r2
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf0c      	ite	eq
 80094c8:	2301      	moveq	r3, #1
 80094ca:	2300      	movne	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	e00c      	b.n	80094ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	43da      	mvns	r2, r3
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4013      	ands	r3, r2
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d093      	beq.n	800941a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800950a:	e071      	b.n	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800951a:	d123      	bne.n	8009564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800952a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2220      	movs	r2, #32
 8009540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009550:	f043 0204 	orr.w	r2, r3, #4
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e067      	b.n	8009634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956a:	d041      	beq.n	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800956c:	f7fd fca8 	bl	8006ec0 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	429a      	cmp	r2, r3
 800957a:	d302      	bcc.n	8009582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d136      	bne.n	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	0c1b      	lsrs	r3, r3, #16
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d10c      	bne.n	80095a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	43da      	mvns	r2, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4013      	ands	r3, r2
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	bf14      	ite	ne
 800959e:	2301      	movne	r3, #1
 80095a0:	2300      	moveq	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	e00b      	b.n	80095be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	43da      	mvns	r2, r3
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4013      	ands	r3, r2
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bf14      	ite	ne
 80095b8:	2301      	movne	r3, #1
 80095ba:	2300      	moveq	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d016      	beq.n	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095dc:	f043 0220 	orr.w	r2, r3, #32
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e021      	b.n	8009634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d10c      	bne.n	8009614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	43da      	mvns	r2, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	4013      	ands	r3, r2
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf14      	ite	ne
 800960c:	2301      	movne	r3, #1
 800960e:	2300      	moveq	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	e00b      	b.n	800962c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	43da      	mvns	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	b29b      	uxth	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf14      	ite	ne
 8009626:	2301      	movne	r3, #1
 8009628:	2300      	moveq	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	f47f af6d 	bne.w	800950c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009648:	e034      	b.n	80096b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f000 f8e3 	bl	8009816 <I2C_IsAcknowledgeFailed>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e034      	b.n	80096c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d028      	beq.n	80096b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009662:	f7fd fc2d 	bl	8006ec0 <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	429a      	cmp	r2, r3
 8009670:	d302      	bcc.n	8009678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11d      	bne.n	80096b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009682:	2b80      	cmp	r3, #128	@ 0x80
 8009684:	d016      	beq.n	80096b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e007      	b.n	80096c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096be:	2b80      	cmp	r3, #128	@ 0x80
 80096c0:	d1c3      	bne.n	800964a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096d8:	e034      	b.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f89b 	bl	8009816 <I2C_IsAcknowledgeFailed>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e034      	b.n	8009754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d028      	beq.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f2:	f7fd fbe5 	bl	8006ec0 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d302      	bcc.n	8009708 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11d      	bne.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b04      	cmp	r3, #4
 8009714:	d016      	beq.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2220      	movs	r2, #32
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009730:	f043 0220 	orr.w	r2, r3, #32
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e007      	b.n	8009754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f003 0304 	and.w	r3, r3, #4
 800974e:	2b04      	cmp	r3, #4
 8009750:	d1c3      	bne.n	80096da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009768:	e049      	b.n	80097fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b10      	cmp	r3, #16
 8009776:	d119      	bne.n	80097ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0210 	mvn.w	r2, #16
 8009780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e030      	b.n	800980e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ac:	f7fd fb88 	bl	8006ec0 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d302      	bcc.n	80097c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d11d      	bne.n	80097fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097cc:	2b40      	cmp	r3, #64	@ 0x40
 80097ce:	d016      	beq.n	80097fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2220      	movs	r2, #32
 80097da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ea:	f043 0220 	orr.w	r2, r3, #32
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e007      	b.n	800980e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009808:	2b40      	cmp	r3, #64	@ 0x40
 800980a:	d1ae      	bne.n	800976a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800982c:	d11b      	bne.n	8009866 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009836:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009852:	f043 0204 	orr.w	r2, r3, #4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e267      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d075      	beq.n	800997e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009892:	4b88      	ldr	r3, [pc, #544]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f003 030c 	and.w	r3, r3, #12
 800989a:	2b04      	cmp	r3, #4
 800989c:	d00c      	beq.n	80098b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800989e:	4b85      	ldr	r3, [pc, #532]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d112      	bne.n	80098d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098aa:	4b82      	ldr	r3, [pc, #520]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098b6:	d10b      	bne.n	80098d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098b8:	4b7e      	ldr	r3, [pc, #504]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d05b      	beq.n	800997c <HAL_RCC_OscConfig+0x108>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d157      	bne.n	800997c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e242      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d8:	d106      	bne.n	80098e8 <HAL_RCC_OscConfig+0x74>
 80098da:	4b76      	ldr	r3, [pc, #472]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a75      	ldr	r2, [pc, #468]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e01d      	b.n	8009924 <HAL_RCC_OscConfig+0xb0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098f0:	d10c      	bne.n	800990c <HAL_RCC_OscConfig+0x98>
 80098f2:	4b70      	ldr	r3, [pc, #448]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a6f      	ldr	r2, [pc, #444]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80098f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	4b6d      	ldr	r3, [pc, #436]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a6c      	ldr	r2, [pc, #432]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e00b      	b.n	8009924 <HAL_RCC_OscConfig+0xb0>
 800990c:	4b69      	ldr	r3, [pc, #420]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a68      	ldr	r2, [pc, #416]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	4b66      	ldr	r3, [pc, #408]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a65      	ldr	r2, [pc, #404]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 800991e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d013      	beq.n	8009954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800992c:	f7fd fac8 	bl	8006ec0 <HAL_GetTick>
 8009930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009932:	e008      	b.n	8009946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009934:	f7fd fac4 	bl	8006ec0 <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b64      	cmp	r3, #100	@ 0x64
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e207      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009946:	4b5b      	ldr	r3, [pc, #364]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0f0      	beq.n	8009934 <HAL_RCC_OscConfig+0xc0>
 8009952:	e014      	b.n	800997e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009954:	f7fd fab4 	bl	8006ec0 <HAL_GetTick>
 8009958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800995c:	f7fd fab0 	bl	8006ec0 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b64      	cmp	r3, #100	@ 0x64
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e1f3      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800996e:	4b51      	ldr	r3, [pc, #324]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1f0      	bne.n	800995c <HAL_RCC_OscConfig+0xe8>
 800997a:	e000      	b.n	800997e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800997c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d063      	beq.n	8009a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800998a:	4b4a      	ldr	r3, [pc, #296]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f003 030c 	and.w	r3, r3, #12
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00b      	beq.n	80099ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009996:	4b47      	ldr	r3, [pc, #284]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d11c      	bne.n	80099dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80099a2:	4b44      	ldr	r3, [pc, #272]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d116      	bne.n	80099dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099ae:	4b41      	ldr	r3, [pc, #260]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <HAL_RCC_OscConfig+0x152>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d001      	beq.n	80099c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e1c7      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	4937      	ldr	r1, [pc, #220]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099da:	e03a      	b.n	8009a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d020      	beq.n	8009a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099e4:	4b34      	ldr	r3, [pc, #208]	@ (8009ab8 <HAL_RCC_OscConfig+0x244>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ea:	f7fd fa69 	bl	8006ec0 <HAL_GetTick>
 80099ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099f0:	e008      	b.n	8009a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099f2:	f7fd fa65 	bl	8006ec0 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e1a8      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a04:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d0f0      	beq.n	80099f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a10:	4b28      	ldr	r3, [pc, #160]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	4925      	ldr	r1, [pc, #148]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	e015      	b.n	8009a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a26:	4b24      	ldr	r3, [pc, #144]	@ (8009ab8 <HAL_RCC_OscConfig+0x244>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2c:	f7fd fa48 	bl	8006ec0 <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a34:	f7fd fa44 	bl	8006ec0 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e187      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a46:	4b1b      	ldr	r3, [pc, #108]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1f0      	bne.n	8009a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d036      	beq.n	8009acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d016      	beq.n	8009a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a66:	4b15      	ldr	r3, [pc, #84]	@ (8009abc <HAL_RCC_OscConfig+0x248>)
 8009a68:	2201      	movs	r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a6c:	f7fd fa28 	bl	8006ec0 <HAL_GetTick>
 8009a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a72:	e008      	b.n	8009a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a74:	f7fd fa24 	bl	8006ec0 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d901      	bls.n	8009a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e167      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a86:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab4 <HAL_RCC_OscConfig+0x240>)
 8009a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0f0      	beq.n	8009a74 <HAL_RCC_OscConfig+0x200>
 8009a92:	e01b      	b.n	8009acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a94:	4b09      	ldr	r3, [pc, #36]	@ (8009abc <HAL_RCC_OscConfig+0x248>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a9a:	f7fd fa11 	bl	8006ec0 <HAL_GetTick>
 8009a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aa0:	e00e      	b.n	8009ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009aa2:	f7fd fa0d 	bl	8006ec0 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d907      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e150      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
 8009ab4:	40023800 	.word	0x40023800
 8009ab8:	42470000 	.word	0x42470000
 8009abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ac0:	4b88      	ldr	r3, [pc, #544]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1ea      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8097 	beq.w	8009c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ada:	2300      	movs	r3, #0
 8009adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ade:	4b81      	ldr	r3, [pc, #516]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10f      	bne.n	8009b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aea:	2300      	movs	r3, #0
 8009aec:	60bb      	str	r3, [r7, #8]
 8009aee:	4b7d      	ldr	r3, [pc, #500]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af2:	4a7c      	ldr	r2, [pc, #496]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8009afa:	4b7a      	ldr	r3, [pc, #488]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b02:	60bb      	str	r3, [r7, #8]
 8009b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b06:	2301      	movs	r3, #1
 8009b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b0a:	4b77      	ldr	r3, [pc, #476]	@ (8009ce8 <HAL_RCC_OscConfig+0x474>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d118      	bne.n	8009b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b16:	4b74      	ldr	r3, [pc, #464]	@ (8009ce8 <HAL_RCC_OscConfig+0x474>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a73      	ldr	r2, [pc, #460]	@ (8009ce8 <HAL_RCC_OscConfig+0x474>)
 8009b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b22:	f7fd f9cd 	bl	8006ec0 <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b2a:	f7fd f9c9 	bl	8006ec0 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e10c      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8009ce8 <HAL_RCC_OscConfig+0x474>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f0      	beq.n	8009b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d106      	bne.n	8009b5e <HAL_RCC_OscConfig+0x2ea>
 8009b50:	4b64      	ldr	r3, [pc, #400]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b54:	4a63      	ldr	r2, [pc, #396]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b5c:	e01c      	b.n	8009b98 <HAL_RCC_OscConfig+0x324>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	2b05      	cmp	r3, #5
 8009b64:	d10c      	bne.n	8009b80 <HAL_RCC_OscConfig+0x30c>
 8009b66:	4b5f      	ldr	r3, [pc, #380]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b6c:	f043 0304 	orr.w	r3, r3, #4
 8009b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b72:	4b5c      	ldr	r3, [pc, #368]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b76:	4a5b      	ldr	r2, [pc, #364]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b78:	f043 0301 	orr.w	r3, r3, #1
 8009b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b7e:	e00b      	b.n	8009b98 <HAL_RCC_OscConfig+0x324>
 8009b80:	4b58      	ldr	r3, [pc, #352]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b84:	4a57      	ldr	r2, [pc, #348]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b86:	f023 0301 	bic.w	r3, r3, #1
 8009b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b8c:	4b55      	ldr	r3, [pc, #340]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b90:	4a54      	ldr	r2, [pc, #336]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009b92:	f023 0304 	bic.w	r3, r3, #4
 8009b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d015      	beq.n	8009bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ba0:	f7fd f98e 	bl	8006ec0 <HAL_GetTick>
 8009ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ba6:	e00a      	b.n	8009bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ba8:	f7fd f98a 	bl	8006ec0 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e0cb      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bbe:	4b49      	ldr	r3, [pc, #292]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0ee      	beq.n	8009ba8 <HAL_RCC_OscConfig+0x334>
 8009bca:	e014      	b.n	8009bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bcc:	f7fd f978 	bl	8006ec0 <HAL_GetTick>
 8009bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bd2:	e00a      	b.n	8009bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bd4:	f7fd f974 	bl	8006ec0 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e0b5      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bea:	4b3e      	ldr	r3, [pc, #248]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1ee      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d105      	bne.n	8009c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bfc:	4b39      	ldr	r3, [pc, #228]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c00:	4a38      	ldr	r2, [pc, #224]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80a1 	beq.w	8009d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c12:	4b34      	ldr	r3, [pc, #208]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f003 030c 	and.w	r3, r3, #12
 8009c1a:	2b08      	cmp	r3, #8
 8009c1c:	d05c      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d141      	bne.n	8009caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c26:	4b31      	ldr	r3, [pc, #196]	@ (8009cec <HAL_RCC_OscConfig+0x478>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c2c:	f7fd f948 	bl	8006ec0 <HAL_GetTick>
 8009c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c34:	f7fd f944 	bl	8006ec0 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e087      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c46:	4b27      	ldr	r3, [pc, #156]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f0      	bne.n	8009c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	69da      	ldr	r2, [r3, #28]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	019b      	lsls	r3, r3, #6
 8009c62:	431a      	orrs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	085b      	lsrs	r3, r3, #1
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	041b      	lsls	r3, r3, #16
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c74:	061b      	lsls	r3, r3, #24
 8009c76:	491b      	ldr	r1, [pc, #108]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009cec <HAL_RCC_OscConfig+0x478>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c82:	f7fd f91d 	bl	8006ec0 <HAL_GetTick>
 8009c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c88:	e008      	b.n	8009c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c8a:	f7fd f919 	bl	8006ec0 <HAL_GetTick>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d901      	bls.n	8009c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e05c      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0f0      	beq.n	8009c8a <HAL_RCC_OscConfig+0x416>
 8009ca8:	e054      	b.n	8009d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009caa:	4b10      	ldr	r3, [pc, #64]	@ (8009cec <HAL_RCC_OscConfig+0x478>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb0:	f7fd f906 	bl	8006ec0 <HAL_GetTick>
 8009cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cb6:	e008      	b.n	8009cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cb8:	f7fd f902 	bl	8006ec0 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d901      	bls.n	8009cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e045      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cca:	4b06      	ldr	r3, [pc, #24]	@ (8009ce4 <HAL_RCC_OscConfig+0x470>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1f0      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x444>
 8009cd6:	e03d      	b.n	8009d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d107      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e038      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
 8009ce4:	40023800 	.word	0x40023800
 8009ce8:	40007000 	.word	0x40007000
 8009cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d60 <HAL_RCC_OscConfig+0x4ec>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d028      	beq.n	8009d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d121      	bne.n	8009d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d11a      	bne.n	8009d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009d20:	4013      	ands	r3, r2
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d111      	bne.n	8009d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d36:	085b      	lsrs	r3, r3, #1
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d107      	bne.n	8009d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d001      	beq.n	8009d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40023800 	.word	0x40023800

08009d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e0cc      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d78:	4b68      	ldr	r3, [pc, #416]	@ (8009f1c <HAL_RCC_ClockConfig+0x1b8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0307 	and.w	r3, r3, #7
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d90c      	bls.n	8009da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d86:	4b65      	ldr	r3, [pc, #404]	@ (8009f1c <HAL_RCC_ClockConfig+0x1b8>)
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d8e:	4b63      	ldr	r3, [pc, #396]	@ (8009f1c <HAL_RCC_ClockConfig+0x1b8>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d001      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e0b8      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0302 	and.w	r3, r3, #2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d020      	beq.n	8009dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d005      	beq.n	8009dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009db8:	4b59      	ldr	r3, [pc, #356]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	4a58      	ldr	r2, [pc, #352]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0308 	and.w	r3, r3, #8
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009dd0:	4b53      	ldr	r3, [pc, #332]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	4a52      	ldr	r2, [pc, #328]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ddc:	4b50      	ldr	r3, [pc, #320]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	494d      	ldr	r1, [pc, #308]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d044      	beq.n	8009e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d107      	bne.n	8009e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e02:	4b47      	ldr	r3, [pc, #284]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d119      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e07f      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d003      	beq.n	8009e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d107      	bne.n	8009e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e22:	4b3f      	ldr	r3, [pc, #252]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e06f      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e32:	4b3b      	ldr	r3, [pc, #236]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e067      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e42:	4b37      	ldr	r3, [pc, #220]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f023 0203 	bic.w	r2, r3, #3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	4934      	ldr	r1, [pc, #208]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e54:	f7fd f834 	bl	8006ec0 <HAL_GetTick>
 8009e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e5a:	e00a      	b.n	8009e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e5c:	f7fd f830 	bl	8006ec0 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e04f      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e72:	4b2b      	ldr	r3, [pc, #172]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 020c 	and.w	r2, r3, #12
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d1eb      	bne.n	8009e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e84:	4b25      	ldr	r3, [pc, #148]	@ (8009f1c <HAL_RCC_ClockConfig+0x1b8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d20c      	bcs.n	8009eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e92:	4b22      	ldr	r3, [pc, #136]	@ (8009f1c <HAL_RCC_ClockConfig+0x1b8>)
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	b2d2      	uxtb	r2, r2
 8009e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e9a:	4b20      	ldr	r3, [pc, #128]	@ (8009f1c <HAL_RCC_ClockConfig+0x1b8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0307 	and.w	r3, r3, #7
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d001      	beq.n	8009eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e032      	b.n	8009f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009eb8:	4b19      	ldr	r3, [pc, #100]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	4916      	ldr	r1, [pc, #88]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ed6:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	00db      	lsls	r3, r3, #3
 8009ee4:	490e      	ldr	r1, [pc, #56]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009eea:	f000 f821 	bl	8009f30 <HAL_RCC_GetSysClockFreq>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f20 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	091b      	lsrs	r3, r3, #4
 8009ef6:	f003 030f 	and.w	r3, r3, #15
 8009efa:	490a      	ldr	r1, [pc, #40]	@ (8009f24 <HAL_RCC_ClockConfig+0x1c0>)
 8009efc:	5ccb      	ldrb	r3, [r1, r3]
 8009efe:	fa22 f303 	lsr.w	r3, r2, r3
 8009f02:	4a09      	ldr	r2, [pc, #36]	@ (8009f28 <HAL_RCC_ClockConfig+0x1c4>)
 8009f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f06:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <HAL_RCC_ClockConfig+0x1c8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fb fbfa 	bl	8005704 <HAL_InitTick>

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	40023c00 	.word	0x40023c00
 8009f20:	40023800 	.word	0x40023800
 8009f24:	08015abc 	.word	0x08015abc
 8009f28:	20000064 	.word	0x20000064
 8009f2c:	200000b4 	.word	0x200000b4

08009f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f34:	b094      	sub	sp, #80	@ 0x50
 8009f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f40:	2300      	movs	r3, #0
 8009f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f48:	4b79      	ldr	r3, [pc, #484]	@ (800a130 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f003 030c 	and.w	r3, r3, #12
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d00d      	beq.n	8009f70 <HAL_RCC_GetSysClockFreq+0x40>
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	f200 80e1 	bhi.w	800a11c <HAL_RCC_GetSysClockFreq+0x1ec>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <HAL_RCC_GetSysClockFreq+0x34>
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d003      	beq.n	8009f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8009f62:	e0db      	b.n	800a11c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f64:	4b73      	ldr	r3, [pc, #460]	@ (800a134 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f66:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009f68:	e0db      	b.n	800a122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f6a:	4b73      	ldr	r3, [pc, #460]	@ (800a138 <HAL_RCC_GetSysClockFreq+0x208>)
 8009f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009f6e:	e0d8      	b.n	800a122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f70:	4b6f      	ldr	r3, [pc, #444]	@ (800a130 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f7a:	4b6d      	ldr	r3, [pc, #436]	@ (800a130 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d063      	beq.n	800a04e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f86:	4b6a      	ldr	r3, [pc, #424]	@ (800a130 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	099b      	lsrs	r3, r3, #6
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	f04f 0000 	mov.w	r0, #0
 8009faa:	f04f 0100 	mov.w	r1, #0
 8009fae:	0159      	lsls	r1, r3, #5
 8009fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fb4:	0150      	lsls	r0, r2, #5
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4621      	mov	r1, r4
 8009fbc:	1a51      	subs	r1, r2, r1
 8009fbe:	6139      	str	r1, [r7, #16]
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	018b      	lsls	r3, r1, #6
 8009fd8:	4651      	mov	r1, sl
 8009fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009fde:	4651      	mov	r1, sl
 8009fe0:	018a      	lsls	r2, r1, #6
 8009fe2:	4651      	mov	r1, sl
 8009fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8009fe8:	4659      	mov	r1, fp
 8009fea:	eb63 0901 	sbc.w	r9, r3, r1
 8009fee:	f04f 0200 	mov.w	r2, #0
 8009ff2:	f04f 0300 	mov.w	r3, #0
 8009ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a002:	4690      	mov	r8, r2
 800a004:	4699      	mov	r9, r3
 800a006:	4623      	mov	r3, r4
 800a008:	eb18 0303 	adds.w	r3, r8, r3
 800a00c:	60bb      	str	r3, [r7, #8]
 800a00e:	462b      	mov	r3, r5
 800a010:	eb49 0303 	adc.w	r3, r9, r3
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a022:	4629      	mov	r1, r5
 800a024:	024b      	lsls	r3, r1, #9
 800a026:	4621      	mov	r1, r4
 800a028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a02c:	4621      	mov	r1, r4
 800a02e:	024a      	lsls	r2, r1, #9
 800a030:	4610      	mov	r0, r2
 800a032:	4619      	mov	r1, r3
 800a034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a036:	2200      	movs	r2, #0
 800a038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a03a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a03c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a040:	f7f6 fdfa 	bl	8000c38 <__aeabi_uldivmod>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4613      	mov	r3, r2
 800a04a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a04c:	e058      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a04e:	4b38      	ldr	r3, [pc, #224]	@ (800a130 <HAL_RCC_GetSysClockFreq+0x200>)
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	099b      	lsrs	r3, r3, #6
 800a054:	2200      	movs	r2, #0
 800a056:	4618      	mov	r0, r3
 800a058:	4611      	mov	r1, r2
 800a05a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a05e:	623b      	str	r3, [r7, #32]
 800a060:	2300      	movs	r3, #0
 800a062:	627b      	str	r3, [r7, #36]	@ 0x24
 800a064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	f04f 0000 	mov.w	r0, #0
 800a070:	f04f 0100 	mov.w	r1, #0
 800a074:	0159      	lsls	r1, r3, #5
 800a076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a07a:	0150      	lsls	r0, r2, #5
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4641      	mov	r1, r8
 800a082:	ebb2 0a01 	subs.w	sl, r2, r1
 800a086:	4649      	mov	r1, r9
 800a088:	eb63 0b01 	sbc.w	fp, r3, r1
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a09c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a0a0:	ebb2 040a 	subs.w	r4, r2, sl
 800a0a4:	eb63 050b 	sbc.w	r5, r3, fp
 800a0a8:	f04f 0200 	mov.w	r2, #0
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	00eb      	lsls	r3, r5, #3
 800a0b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0b6:	00e2      	lsls	r2, r4, #3
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	4643      	mov	r3, r8
 800a0be:	18e3      	adds	r3, r4, r3
 800a0c0:	603b      	str	r3, [r7, #0]
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	eb45 0303 	adc.w	r3, r5, r3
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	f04f 0300 	mov.w	r3, #0
 800a0d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	028b      	lsls	r3, r1, #10
 800a0da:	4621      	mov	r1, r4
 800a0dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	028a      	lsls	r2, r1, #10
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	61bb      	str	r3, [r7, #24]
 800a0ee:	61fa      	str	r2, [r7, #28]
 800a0f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0f4:	f7f6 fda0 	bl	8000c38 <__aeabi_uldivmod>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a100:	4b0b      	ldr	r3, [pc, #44]	@ (800a130 <HAL_RCC_GetSysClockFreq+0x200>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	0c1b      	lsrs	r3, r3, #16
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	3301      	adds	r3, #1
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800a110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a114:	fbb2 f3f3 	udiv	r3, r2, r3
 800a118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a11a:	e002      	b.n	800a122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a11c:	4b05      	ldr	r3, [pc, #20]	@ (800a134 <HAL_RCC_GetSysClockFreq+0x204>)
 800a11e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a120:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a124:	4618      	mov	r0, r3
 800a126:	3750      	adds	r7, #80	@ 0x50
 800a128:	46bd      	mov	sp, r7
 800a12a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a12e:	bf00      	nop
 800a130:	40023800 	.word	0x40023800
 800a134:	00f42400 	.word	0x00f42400
 800a138:	007a1200 	.word	0x007a1200

0800a13c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a140:	4b03      	ldr	r3, [pc, #12]	@ (800a150 <HAL_RCC_GetHCLKFreq+0x14>)
 800a142:	681b      	ldr	r3, [r3, #0]
}
 800a144:	4618      	mov	r0, r3
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20000064 	.word	0x20000064

0800a154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a158:	f7ff fff0 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 800a15c:	4602      	mov	r2, r0
 800a15e:	4b05      	ldr	r3, [pc, #20]	@ (800a174 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	0a9b      	lsrs	r3, r3, #10
 800a164:	f003 0307 	and.w	r3, r3, #7
 800a168:	4903      	ldr	r1, [pc, #12]	@ (800a178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a16a:	5ccb      	ldrb	r3, [r1, r3]
 800a16c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a170:	4618      	mov	r0, r3
 800a172:	bd80      	pop	{r7, pc}
 800a174:	40023800 	.word	0x40023800
 800a178:	08015acc 	.word	0x08015acc

0800a17c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a180:	f7ff ffdc 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 800a184:	4602      	mov	r2, r0
 800a186:	4b05      	ldr	r3, [pc, #20]	@ (800a19c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	0b5b      	lsrs	r3, r3, #13
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	4903      	ldr	r1, [pc, #12]	@ (800a1a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a192:	5ccb      	ldrb	r3, [r1, r3]
 800a194:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a198:	4618      	mov	r0, r3
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	40023800 	.word	0x40023800
 800a1a0:	08015acc 	.word	0x08015acc

0800a1a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	220f      	movs	r2, #15
 800a1b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a1b4:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <HAL_RCC_GetClockConfig+0x5c>)
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f003 0203 	and.w	r2, r3, #3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a1c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a200 <HAL_RCC_GetClockConfig+0x5c>)
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <HAL_RCC_GetClockConfig+0x5c>)
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a1d8:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <HAL_RCC_GetClockConfig+0x5c>)
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	08db      	lsrs	r3, r3, #3
 800a1de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a1e6:	4b07      	ldr	r3, [pc, #28]	@ (800a204 <HAL_RCC_GetClockConfig+0x60>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0207 	and.w	r2, r3, #7
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	601a      	str	r2, [r3, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40023800 	.word	0x40023800
 800a204:	40023c00 	.word	0x40023c00

0800a208 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e022      	b.n	800a260 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7fb f94d 	bl	80054cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2203      	movs	r2, #3
 800a236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f814 	bl	800a268 <HAL_SD_InitCard>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e00a      	b.n	800a260 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a268:	b5b0      	push	{r4, r5, r7, lr}
 800a26a:	b08e      	sub	sp, #56	@ 0x38
 800a26c:	af04      	add	r7, sp, #16
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a270:	2300      	movs	r3, #0
 800a272:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a280:	2300      	movs	r3, #0
 800a282:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a284:	2376      	movs	r3, #118	@ 0x76
 800a286:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681d      	ldr	r5, [r3, #0]
 800a28c:	466c      	mov	r4, sp
 800a28e:	f107 0314 	add.w	r3, r7, #20
 800a292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f003 fb4f 	bl	800d944 <SDIO_Init>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e04f      	b.n	800a358 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a2b8:	4b29      	ldr	r3, [pc, #164]	@ (800a360 <HAL_SD_InitCard+0xf8>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f003 fb87 	bl	800d9d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a2c8:	4b25      	ldr	r3, [pc, #148]	@ (800a360 <HAL_SD_InitCard+0xf8>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a2ce:	2002      	movs	r0, #2
 800a2d0:	f7fc fe02 	bl	8006ed8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 ff6b 	bl	800b1b0 <SD_PowerON>
 800a2da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00b      	beq.n	800a2fa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e02e      	b.n	800a358 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fe8a 	bl	800b014 <SD_InitCard>
 800a300:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e01b      	b.n	800a358 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a328:	4618      	mov	r0, r3
 800a32a:	f003 fbe6 	bl	800dafa <SDMMC_CmdBlockLength>
 800a32e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00f      	beq.n	800a356 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a0a      	ldr	r2, [pc, #40]	@ (800a364 <HAL_SD_InitCard+0xfc>)
 800a33c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3728      	adds	r7, #40	@ 0x28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bdb0      	pop	{r4, r5, r7, pc}
 800a360:	422580a0 	.word	0x422580a0
 800a364:	004005ff 	.word	0x004005ff

0800a368 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08c      	sub	sp, #48	@ 0x30
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d107      	bne.n	800a390 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a384:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e0c0      	b.n	800a512 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b01      	cmp	r3, #1
 800a39a:	f040 80b9 	bne.w	800a510 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	441a      	add	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d907      	bls.n	800a3c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e0a7      	b.n	800a512 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	6812      	ldr	r2, [r2, #0]
 800a3dc:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800a3e0:	f043 0302 	orr.w	r3, r3, #2
 800a3e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ea:	4a4c      	ldr	r2, [pc, #304]	@ (800a51c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a3ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f2:	4a4b      	ldr	r2, [pc, #300]	@ (800a520 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a3f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a402:	2200      	movs	r2, #0
 800a404:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3380      	adds	r3, #128	@ 0x80
 800a42c:	4619      	mov	r1, r3
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	025b      	lsls	r3, r3, #9
 800a434:	089b      	lsrs	r3, r3, #2
 800a436:	f7fc ff03 	bl	8007240 <HAL_DMA_Start_IT>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d017      	beq.n	800a470 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a44e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a33      	ldr	r2, [pc, #204]	@ (800a524 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e050      	b.n	800a512 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a470:	4b2d      	ldr	r3, [pc, #180]	@ (800a528 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a472:	2201      	movs	r2, #1
 800a474:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d002      	beq.n	800a484 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	025b      	lsls	r3, r3, #9
 800a482:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a484:	f04f 33ff 	mov.w	r3, #4294967295
 800a488:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	025b      	lsls	r3, r3, #9
 800a48e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a490:	2390      	movs	r3, #144	@ 0x90
 800a492:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a494:	2302      	movs	r3, #2
 800a496:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a498:	2300      	movs	r3, #0
 800a49a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a49c:	2301      	movs	r3, #1
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f107 0210 	add.w	r2, r7, #16
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f003 faf9 	bl	800daa2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d90a      	bls.n	800a4cc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2282      	movs	r2, #130	@ 0x82
 800a4ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f003 fb5d 	bl	800db82 <SDMMC_CmdReadMultiBlock>
 800a4c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a4ca:	e009      	b.n	800a4e0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2281      	movs	r2, #129	@ 0x81
 800a4d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f003 fb30 	bl	800db3e <SDMMC_CmdReadSingleBlock>
 800a4de:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d012      	beq.n	800a50c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a524 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a4ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e002      	b.n	800a512 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e000      	b.n	800a512 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a510:	2302      	movs	r3, #2
  }
}
 800a512:	4618      	mov	r0, r3
 800a514:	3730      	adds	r7, #48	@ 0x30
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	0800ae23 	.word	0x0800ae23
 800a520:	0800ae95 	.word	0x0800ae95
 800a524:	004005ff 	.word	0x004005ff
 800a528:	4225858c 	.word	0x4225858c

0800a52c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08c      	sub	sp, #48	@ 0x30
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
 800a538:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d107      	bne.n	800a554 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a548:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e0c5      	b.n	800a6e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	f040 80be 	bne.w	800a6de <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	441a      	add	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a572:	429a      	cmp	r2, r3
 800a574:	d907      	bls.n	800a586 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e0ac      	b.n	800a6e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2203      	movs	r2, #3
 800a58a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2200      	movs	r2, #0
 800a594:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 800a5a4:	f043 0302 	orr.w	r3, r3, #2
 800a5a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ae:	4a4e      	ldr	r2, [pc, #312]	@ (800a6e8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a5b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5b6:	4a4d      	ldr	r2, [pc, #308]	@ (800a6ec <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a5b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5be:	2200      	movs	r2, #0
 800a5c0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d002      	beq.n	800a5d0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5cc:	025b      	lsls	r3, r3, #9
 800a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d90a      	bls.n	800a5ec <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	22a0      	movs	r2, #160	@ 0xa0
 800a5da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f003 fb11 	bl	800dc0a <SDMMC_CmdWriteMultiBlock>
 800a5e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a5ea:	e009      	b.n	800a600 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2290      	movs	r2, #144	@ 0x90
 800a5f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f003 fae4 	bl	800dbc6 <SDMMC_CmdWriteSingleBlock>
 800a5fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d012      	beq.n	800a62c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a39      	ldr	r2, [pc, #228]	@ (800a6f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a60c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a614:	431a      	orrs	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e059      	b.n	800a6e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a62c:	4b31      	ldr	r3, [pc, #196]	@ (800a6f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a62e:	2201      	movs	r2, #1
 800a630:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a636:	2240      	movs	r2, #64	@ 0x40
 800a638:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3380      	adds	r3, #128	@ 0x80
 800a662:	461a      	mov	r2, r3
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	025b      	lsls	r3, r3, #9
 800a668:	089b      	lsrs	r3, r3, #2
 800a66a:	f7fc fde9 	bl	8007240 <HAL_DMA_Start_IT>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01c      	beq.n	800a6ae <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800a682:	f023 0302 	bic.w	r3, r3, #2
 800a686:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a68e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a694:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e018      	b.n	800a6e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	025b      	lsls	r3, r3, #9
 800a6b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a6ba:	2390      	movs	r3, #144	@ 0x90
 800a6bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f107 0210 	add.w	r2, r7, #16
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f003 f9e4 	bl	800daa2 <SDIO_ConfigData>

      return HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e000      	b.n	800a6e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a6de:	2302      	movs	r3, #2
  }
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3730      	adds	r7, #48	@ 0x30
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	0800adf9 	.word	0x0800adf9
 800a6ec:	0800ae95 	.word	0x0800ae95
 800a6f0:	004005ff 	.word	0x004005ff
 800a6f4:	4225858c 	.word	0x4225858c

0800a6f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a704:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a70c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <HAL_SD_IRQHandler+0x2e>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fdfc 	bl	800b31c <SD_Read_IT>
 800a724:	e165      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 808f 	beq.w	800a854 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a73e:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6812      	ldr	r2, [r2, #0]
 800a74a:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800a74e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800a752:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f003 0308 	and.w	r3, r3, #8
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d039      	beq.n	800a7e2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d104      	bne.n	800a782 <HAL_SD_IRQHandler+0x8a>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f003 0320 	and.w	r3, r3, #32
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d011      	beq.n	800a7a6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f003 fa62 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800a78c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 f92f 	bl	800aa04 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a7ae:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <HAL_SD_IRQHandler+0xda>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f003 fe80 	bl	800e4d8 <HAL_SD_RxCpltCallback>
 800a7d8:	e10b      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f003 fe72 	bl	800e4c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7e0:	e107      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8102 	beq.w	800a9f2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 0320 	and.w	r3, r3, #32
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d011      	beq.n	800a81c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f003 fa27 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800a802:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f8f4 	bl	800aa04 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	f040 80e5 	bne.w	800a9f2 <HAL_SD_IRQHandler+0x2fa>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f040 80df 	bne.w	800a9f2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f022 0208 	bic.w	r2, r2, #8
 800a842:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f003 fe39 	bl	800e4c4 <HAL_SD_TxCpltCallback>
}
 800a852:	e0ce      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d008      	beq.n	800a874 <HAL_SD_IRQHandler+0x17c>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f003 0308 	and.w	r3, r3, #8
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fda6 	bl	800b3be <SD_Write_IT>
 800a872:	e0be      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a87a:	f240 233a 	movw	r3, #570	@ 0x23a
 800a87e:	4013      	ands	r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 80b6 	beq.w	800a9f2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a88c:	f003 0302 	and.w	r3, r3, #2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a898:	f043 0202 	orr.w	r2, r3, #2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d005      	beq.n	800a8ba <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b2:	f043 0208 	orr.w	r2, r3, #8
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c0:	f003 0320 	and.w	r3, r3, #32
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8cc:	f043 0220 	orr.w	r2, r3, #32
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8da:	f003 0310 	and.w	r3, r3, #16
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d005      	beq.n	800a8ee <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e6:	f043 0210 	orr.w	r2, r3, #16
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d005      	beq.n	800a908 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a900:	f043 0208 	orr.w	r2, r3, #8
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f240 723a 	movw	r2, #1850	@ 0x73a
 800a910:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	6812      	ldr	r2, [r2, #0]
 800a91c:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 800a920:	f023 0302 	bic.w	r3, r3, #2
 800a924:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f003 f990 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800a930:	4602      	mov	r2, r0
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f003 0308 	and.w	r3, r3, #8
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f855 	bl	800aa04 <HAL_SD_ErrorCallback>
}
 800a95a:	e04a      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a962:	2b00      	cmp	r3, #0
 800a964:	d045      	beq.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d104      	bne.n	800a97a <HAL_SD_IRQHandler+0x282>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b00      	cmp	r3, #0
 800a978:	d011      	beq.n	800a99e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9fc <HAL_SD_IRQHandler+0x304>)
 800a980:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc fd22 	bl	80073d0 <HAL_DMA_Abort_IT>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d02f      	beq.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a996:	4618      	mov	r0, r3
 800a998:	f000 face 	bl	800af38 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a99c:	e029      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d104      	bne.n	800a9b2 <HAL_SD_IRQHandler+0x2ba>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d011      	beq.n	800a9d6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b6:	4a12      	ldr	r2, [pc, #72]	@ (800aa00 <HAL_SD_IRQHandler+0x308>)
 800a9b8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fc fd06 	bl	80073d0 <HAL_DMA_Abort_IT>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d013      	beq.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fae9 	bl	800afa6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a9d4:	e00d      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f003 fd60 	bl	800e4b0 <HAL_SD_AbortCallback>
}
 800a9f0:	e7ff      	b.n	800a9f2 <HAL_SD_IRQHandler+0x2fa>
 800a9f2:	bf00      	nop
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	0800af39 	.word	0x0800af39
 800aa00:	0800afa7 	.word	0x0800afa7

0800aa04 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa26:	0f9b      	lsrs	r3, r3, #30
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa32:	0e9b      	lsrs	r3, r3, #26
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 030f 	and.w	r3, r3, #15
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa44:	0e1b      	lsrs	r3, r3, #24
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa56:	0c1b      	lsrs	r3, r3, #16
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa78:	0d1b      	lsrs	r3, r3, #20
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa84:	0c1b      	lsrs	r3, r3, #16
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa96:	0bdb      	lsrs	r3, r3, #15
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaa8:	0b9b      	lsrs	r3, r3, #14
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaba:	0b5b      	lsrs	r3, r3, #13
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aacc:	0b1b      	lsrs	r3, r3, #12
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2200      	movs	r2, #0
 800aade:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d163      	bne.n	800abb0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaec:	009a      	lsls	r2, r3, #2
 800aaee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aaf8:	0f92      	lsrs	r2, r2, #30
 800aafa:	431a      	orrs	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab04:	0edb      	lsrs	r3, r3, #27
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab16:	0e1b      	lsrs	r3, r3, #24
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab28:	0d5b      	lsrs	r3, r3, #21
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0307 	and.w	r3, r3, #7
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3a:	0c9b      	lsrs	r3, r3, #18
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0307 	and.w	r3, r3, #7
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab4c:	0bdb      	lsrs	r3, r3, #15
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	7e1b      	ldrb	r3, [r3, #24]
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	3302      	adds	r3, #2
 800ab70:	2201      	movs	r2, #1
 800ab72:	fa02 f303 	lsl.w	r3, r2, r3
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ab7a:	fb03 f202 	mul.w	r2, r3, r2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	7a1b      	ldrb	r3, [r3, #8]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	409a      	lsls	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ab9c:	0a52      	lsrs	r2, r2, #9
 800ab9e:	fb03 f202 	mul.w	r2, r3, r2
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abac:	661a      	str	r2, [r3, #96]	@ 0x60
 800abae:	e031      	b.n	800ac14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d11d      	bne.n	800abf4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abbc:	041b      	lsls	r3, r3, #16
 800abbe:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abc6:	0c1b      	lsrs	r3, r3, #16
 800abc8:	431a      	orrs	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	3301      	adds	r3, #1
 800abd4:	029a      	lsls	r2, r3, #10
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abe8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	661a      	str	r2, [r3, #96]	@ 0x60
 800abf2:	e00f      	b.n	800ac14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a58      	ldr	r2, [pc, #352]	@ (800ad5c <HAL_SD_GetCardCSD+0x344>)
 800abfa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e09d      	b.n	800ad50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac18:	0b9b      	lsrs	r3, r3, #14
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac2a:	09db      	lsrs	r3, r3, #7
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac4c:	0fdb      	lsrs	r3, r3, #31
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac58:	0f5b      	lsrs	r3, r3, #29
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	f003 0303 	and.w	r3, r3, #3
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac6a:	0e9b      	lsrs	r3, r3, #26
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0307 	and.w	r3, r3, #7
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac7c:	0d9b      	lsrs	r3, r3, #22
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac8e:	0d5b      	lsrs	r3, r3, #21
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acaa:	0c1b      	lsrs	r3, r3, #16
 800acac:	b2db      	uxtb	r3, r3
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acbe:	0bdb      	lsrs	r3, r3, #15
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	f003 0301 	and.w	r3, r3, #1
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acd2:	0b9b      	lsrs	r3, r3, #14
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ace6:	0b5b      	lsrs	r3, r3, #13
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acfa:	0b1b      	lsrs	r3, r3, #12
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad0e:	0a9b      	lsrs	r3, r3, #10
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	f003 0303 	and.w	r3, r3, #3
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad22:	0a1b      	lsrs	r3, r3, #8
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad36:	085b      	lsrs	r3, r3, #1
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	004005ff 	.word	0x004005ff

0800ad60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800adc4:	f107 030c 	add.w	r3, r7, #12
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa7e 	bl	800b2cc <SD_SendStatus>
 800add0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	0a5b      	lsrs	r3, r3, #9
 800ade8:	f003 030f 	and.w	r3, r3, #15
 800adec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800adee:	693b      	ldr	r3, [r7, #16]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae14:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae2e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae34:	2b82      	cmp	r3, #130	@ 0x82
 800ae36:	d111      	bne.n	800ae5c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f002 ff07 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800ae42:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d008      	beq.n	800ae5c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	431a      	orrs	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff fdd4 	bl	800aa04 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 0208 	bic.w	r2, r2, #8
 800ae6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ae74:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f003 fb27 	bl	800e4d8 <HAL_SD_RxCpltCallback>
#endif
}
 800ae8a:	bf00      	nop
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fc fc40 	bl	8007728 <HAL_DMA_GetError>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d03e      	beq.n	800af2c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aebc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d002      	beq.n	800aeca <SD_DMAError+0x36>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d12d      	bne.n	800af26 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a19      	ldr	r2, [pc, #100]	@ (800af34 <SD_DMAError+0xa0>)
 800aed0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800aee0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aeee:	6978      	ldr	r0, [r7, #20]
 800aef0:	f7ff ff62 	bl	800adb8 <HAL_SD_GetCardState>
 800aef4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b06      	cmp	r3, #6
 800aefa:	d002      	beq.n	800af02 <SD_DMAError+0x6e>
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b05      	cmp	r3, #5
 800af00:	d10a      	bne.n	800af18 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f002 fea2 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800af0c:	4602      	mov	r2, r0
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af12:	431a      	orrs	r2, r3
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2200      	movs	r2, #0
 800af24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f7ff fd6c 	bl	800aa04 <HAL_SD_ErrorCallback>
#endif
  }
}
 800af2c:	bf00      	nop
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	004005ff 	.word	0x004005ff

0800af38 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af44:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800af4e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff ff31 	bl	800adb8 <HAL_SD_GetCardState>
 800af56:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b06      	cmp	r3, #6
 800af6a:	d002      	beq.n	800af72 <SD_DMATxAbort+0x3a>
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b05      	cmp	r3, #5
 800af70:	d10a      	bne.n	800af88 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f002 fe6a 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800af7c:	4602      	mov	r2, r0
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af82:	431a      	orrs	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f003 fa8d 	bl	800e4b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800af96:	e002      	b.n	800af9e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7ff fd33 	bl	800aa04 <HAL_SD_ErrorCallback>
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800afbc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff fefa 	bl	800adb8 <HAL_SD_GetCardState>
 800afc4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2b06      	cmp	r3, #6
 800afd8:	d002      	beq.n	800afe0 <SD_DMARxAbort+0x3a>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b05      	cmp	r3, #5
 800afde:	d10a      	bne.n	800aff6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f002 fe33 	bl	800dc50 <SDMMC_CmdStopTransfer>
 800afea:	4602      	mov	r2, r0
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff0:	431a      	orrs	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affa:	2b00      	cmp	r3, #0
 800affc:	d103      	bne.n	800b006 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f003 fa56 	bl	800e4b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b004:	e002      	b.n	800b00c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7ff fcfc 	bl	800aa04 <HAL_SD_ErrorCallback>
}
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b014:	b5b0      	push	{r4, r5, r7, lr}
 800b016:	b094      	sub	sp, #80	@ 0x50
 800b018:	af04      	add	r7, sp, #16
 800b01a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b01c:	2301      	movs	r3, #1
 800b01e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f002 fce4 	bl	800d9f2 <SDIO_GetPowerState>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b030:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b034:	e0b8      	b.n	800b1a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d02f      	beq.n	800b09e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f002 fecb 	bl	800ddde <SDMMC_CmdSendCID>
 800b048:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <SD_InitCard+0x40>
    {
      return errorstate;
 800b050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b052:	e0a9      	b.n	800b1a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2100      	movs	r1, #0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f002 fd0e 	bl	800da7c <SDIO_GetResponse>
 800b060:	4602      	mov	r2, r0
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2104      	movs	r1, #4
 800b06c:	4618      	mov	r0, r3
 800b06e:	f002 fd05 	bl	800da7c <SDIO_GetResponse>
 800b072:	4602      	mov	r2, r0
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2108      	movs	r1, #8
 800b07e:	4618      	mov	r0, r3
 800b080:	f002 fcfc 	bl	800da7c <SDIO_GetResponse>
 800b084:	4602      	mov	r2, r0
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	210c      	movs	r1, #12
 800b090:	4618      	mov	r0, r3
 800b092:	f002 fcf3 	bl	800da7c <SDIO_GetResponse>
 800b096:	4602      	mov	r2, r0
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d00d      	beq.n	800b0c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f107 020e 	add.w	r2, r7, #14
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f002 fed1 	bl	800de58 <SDMMC_CmdSetRelAdd>
 800b0b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c0:	e072      	b.n	800b1a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d036      	beq.n	800b138 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b0ca:	89fb      	ldrh	r3, [r7, #14]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f002 fe9b 	bl	800de1a <SDMMC_CmdSendCSD>
 800b0e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ee:	e05b      	b.n	800b1a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f002 fcc0 	bl	800da7c <SDIO_GetResponse>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2104      	movs	r1, #4
 800b108:	4618      	mov	r0, r3
 800b10a:	f002 fcb7 	bl	800da7c <SDIO_GetResponse>
 800b10e:	4602      	mov	r2, r0
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2108      	movs	r1, #8
 800b11a:	4618      	mov	r0, r3
 800b11c:	f002 fcae 	bl	800da7c <SDIO_GetResponse>
 800b120:	4602      	mov	r2, r0
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	210c      	movs	r1, #12
 800b12c:	4618      	mov	r0, r3
 800b12e:	f002 fca5 	bl	800da7c <SDIO_GetResponse>
 800b132:	4602      	mov	r2, r0
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2104      	movs	r1, #4
 800b13e:	4618      	mov	r0, r3
 800b140:	f002 fc9c 	bl	800da7c <SDIO_GetResponse>
 800b144:	4603      	mov	r3, r0
 800b146:	0d1a      	lsrs	r2, r3, #20
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b14c:	f107 0310 	add.w	r3, r7, #16
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff fc60 	bl	800aa18 <HAL_SD_GetCardCSD>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d002      	beq.n	800b164 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b15e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b162:	e021      	b.n	800b1a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6819      	ldr	r1, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b16c:	041b      	lsls	r3, r3, #16
 800b16e:	2200      	movs	r2, #0
 800b170:	461c      	mov	r4, r3
 800b172:	4615      	mov	r5, r2
 800b174:	4622      	mov	r2, r4
 800b176:	462b      	mov	r3, r5
 800b178:	4608      	mov	r0, r1
 800b17a:	f002 fd8b 	bl	800dc94 <SDMMC_CmdSelDesel>
 800b17e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <SD_InitCard+0x176>
  {
    return errorstate;
 800b186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b188:	e00e      	b.n	800b1a8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681d      	ldr	r5, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	466c      	mov	r4, sp
 800b192:	f103 0210 	add.w	r2, r3, #16
 800b196:	ca07      	ldmia	r2, {r0, r1, r2}
 800b198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b19c:	3304      	adds	r3, #4
 800b19e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f002 fbcf 	bl	800d944 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3740      	adds	r7, #64	@ 0x40
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bdb0      	pop	{r4, r5, r7, pc}

0800b1b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f002 fd86 	bl	800dcda <SDMMC_CmdGoIdleState>
 800b1ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <SD_PowerON+0x2a>
  {
    return errorstate;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	e072      	b.n	800b2c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f002 fd99 	bl	800dd16 <SDMMC_CmdOperCond>
 800b1e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00d      	beq.n	800b208 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f002 fd6f 	bl	800dcda <SDMMC_CmdGoIdleState>
 800b1fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	e05b      	b.n	800b2c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b212:	2b01      	cmp	r3, #1
 800b214:	d137      	bne.n	800b286 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2100      	movs	r1, #0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f002 fd99 	bl	800dd54 <SDMMC_CmdAppCommand>
 800b222:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d02d      	beq.n	800b286 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b22a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b22e:	e047      	b.n	800b2c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2100      	movs	r1, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f002 fd8c 	bl	800dd54 <SDMMC_CmdAppCommand>
 800b23c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <SD_PowerON+0x98>
    {
      return errorstate;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	e03b      	b.n	800b2c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	491e      	ldr	r1, [pc, #120]	@ (800b2c8 <SD_PowerON+0x118>)
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 fda2 	bl	800dd98 <SDMMC_CmdAppOperCommand>
 800b254:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b25c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b260:	e02e      	b.n	800b2c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2100      	movs	r1, #0
 800b268:	4618      	mov	r0, r3
 800b26a:	f002 fc07 	bl	800da7c <SDIO_GetResponse>
 800b26e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	0fdb      	lsrs	r3, r3, #31
 800b274:	2b01      	cmp	r3, #1
 800b276:	d101      	bne.n	800b27c <SD_PowerON+0xcc>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <SD_PowerON+0xce>
 800b27c:	2300      	movs	r3, #0
 800b27e:	613b      	str	r3, [r7, #16]

    count++;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	3301      	adds	r3, #1
 800b284:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d802      	bhi.n	800b296 <SD_PowerON+0xe6>
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0cc      	beq.n	800b230 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d902      	bls.n	800b2a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2a4:	e00c      	b.n	800b2c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	645a      	str	r2, [r3, #68]	@ 0x44
 800b2b6:	e002      	b.n	800b2be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	c1100000 	.word	0xc1100000

0800b2cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b2dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b2e0:	e018      	b.n	800b314 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ea:	041b      	lsls	r3, r3, #16
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	f002 fdd3 	bl	800de9a <SDMMC_CmdSendStatus>
 800b2f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	e009      	b.n	800b314 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2100      	movs	r1, #0
 800b306:	4618      	mov	r0, r3
 800b308:	f002 fbb8 	bl	800da7c <SDIO_GetResponse>
 800b30c:	4602      	mov	r2, r0
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b328:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d03f      	beq.n	800b3b6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b336:	2300      	movs	r3, #0
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	e033      	b.n	800b3a4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4618      	mov	r0, r3
 800b342:	f002 fb2a 	bl	800d99a <SDIO_ReadFIFO>
 800b346:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3301      	adds	r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	3b01      	subs	r3, #1
 800b35a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	0a1b      	lsrs	r3, r3, #8
 800b360:	b2da      	uxtb	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3301      	adds	r3, #1
 800b36a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	3b01      	subs	r3, #1
 800b370:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	0c1b      	lsrs	r3, r3, #16
 800b376:	b2da      	uxtb	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	3b01      	subs	r3, #1
 800b386:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	0e1b      	lsrs	r3, r3, #24
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3301      	adds	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b07      	cmp	r3, #7
 800b3a8:	d9c8      	bls.n	800b33c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b086      	sub	sp, #24
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d043      	beq.n	800b460 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	e037      	b.n	800b44e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	021a      	lsls	r2, r3, #8
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	3b01      	subs	r3, #1
 800b406:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	041a      	lsls	r2, r3, #16
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4313      	orrs	r3, r2
 800b412:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3301      	adds	r3, #1
 800b418:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	061a      	lsls	r2, r3, #24
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	4313      	orrs	r3, r2
 800b42a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	3b01      	subs	r3, #1
 800b436:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f107 0208 	add.w	r2, r7, #8
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f002 fab6 	bl	800d9b4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	3301      	adds	r3, #1
 800b44c:	617b      	str	r3, [r7, #20]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2b07      	cmp	r3, #7
 800b452:	d9c4      	bls.n	800b3de <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800b460:	bf00      	nop
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e041      	b.n	800b4fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d106      	bne.n	800b494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7fa fb4c 	bl	8005b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f000 fc62 	bl	800bd70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d001      	beq.n	800b520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e04e      	b.n	800b5be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68da      	ldr	r2, [r3, #12]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f042 0201 	orr.w	r2, r2, #1
 800b536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a23      	ldr	r2, [pc, #140]	@ (800b5cc <HAL_TIM_Base_Start_IT+0xc4>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d022      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b54a:	d01d      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d018      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d013      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a1c      	ldr	r2, [pc, #112]	@ (800b5d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d00e      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a1b      	ldr	r2, [pc, #108]	@ (800b5dc <HAL_TIM_Base_Start_IT+0xd4>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d009      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a19      	ldr	r2, [pc, #100]	@ (800b5e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d004      	beq.n	800b588 <HAL_TIM_Base_Start_IT+0x80>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a18      	ldr	r2, [pc, #96]	@ (800b5e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d111      	bne.n	800b5ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b06      	cmp	r3, #6
 800b598:	d010      	beq.n	800b5bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f042 0201 	orr.w	r2, r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5aa:	e007      	b.n	800b5bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f042 0201 	orr.w	r2, r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40010000 	.word	0x40010000
 800b5d0:	40000400 	.word	0x40000400
 800b5d4:	40000800 	.word	0x40000800
 800b5d8:	40000c00 	.word	0x40000c00
 800b5dc:	40010400 	.word	0x40010400
 800b5e0:	40014000 	.word	0x40014000
 800b5e4:	40001800 	.word	0x40001800

0800b5e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e041      	b.n	800b67e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f839 	bl	800b686 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f000 fba2 	bl	800bd70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <HAL_TIM_PWM_Start+0x24>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	e022      	b.n	800b706 <HAL_TIM_PWM_Start+0x6a>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	d109      	bne.n	800b6da <HAL_TIM_PWM_Start+0x3e>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	bf14      	ite	ne
 800b6d2:	2301      	movne	r3, #1
 800b6d4:	2300      	moveq	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	e015      	b.n	800b706 <HAL_TIM_PWM_Start+0x6a>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d109      	bne.n	800b6f4 <HAL_TIM_PWM_Start+0x58>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	bf14      	ite	ne
 800b6ec:	2301      	movne	r3, #1
 800b6ee:	2300      	moveq	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	e008      	b.n	800b706 <HAL_TIM_PWM_Start+0x6a>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e07c      	b.n	800b808 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <HAL_TIM_PWM_Start+0x82>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b71c:	e013      	b.n	800b746 <HAL_TIM_PWM_Start+0xaa>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d104      	bne.n	800b72e <HAL_TIM_PWM_Start+0x92>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b72c:	e00b      	b.n	800b746 <HAL_TIM_PWM_Start+0xaa>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b08      	cmp	r3, #8
 800b732:	d104      	bne.n	800b73e <HAL_TIM_PWM_Start+0xa2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b73c:	e003      	b.n	800b746 <HAL_TIM_PWM_Start+0xaa>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2202      	movs	r2, #2
 800b742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2201      	movs	r2, #1
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fe04 	bl	800c35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a2d      	ldr	r2, [pc, #180]	@ (800b810 <HAL_TIM_PWM_Start+0x174>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <HAL_TIM_PWM_Start+0xcc>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a2c      	ldr	r2, [pc, #176]	@ (800b814 <HAL_TIM_PWM_Start+0x178>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d101      	bne.n	800b76c <HAL_TIM_PWM_Start+0xd0>
 800b768:	2301      	movs	r3, #1
 800b76a:	e000      	b.n	800b76e <HAL_TIM_PWM_Start+0xd2>
 800b76c:	2300      	movs	r3, #0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b780:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a22      	ldr	r2, [pc, #136]	@ (800b810 <HAL_TIM_PWM_Start+0x174>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d022      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b794:	d01d      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a1f      	ldr	r2, [pc, #124]	@ (800b818 <HAL_TIM_PWM_Start+0x17c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d018      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800b81c <HAL_TIM_PWM_Start+0x180>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d013      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a1c      	ldr	r2, [pc, #112]	@ (800b820 <HAL_TIM_PWM_Start+0x184>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d00e      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a16      	ldr	r2, [pc, #88]	@ (800b814 <HAL_TIM_PWM_Start+0x178>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d009      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a18      	ldr	r2, [pc, #96]	@ (800b824 <HAL_TIM_PWM_Start+0x188>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d004      	beq.n	800b7d2 <HAL_TIM_PWM_Start+0x136>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a16      	ldr	r2, [pc, #88]	@ (800b828 <HAL_TIM_PWM_Start+0x18c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d111      	bne.n	800b7f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f003 0307 	and.w	r3, r3, #7
 800b7dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b06      	cmp	r3, #6
 800b7e2:	d010      	beq.n	800b806 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0201 	orr.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7f4:	e007      	b.n	800b806 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f042 0201 	orr.w	r2, r2, #1
 800b804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	40010000 	.word	0x40010000
 800b814:	40010400 	.word	0x40010400
 800b818:	40000400 	.word	0x40000400
 800b81c:	40000800 	.word	0x40000800
 800b820:	40000c00 	.word	0x40000c00
 800b824:	40014000 	.word	0x40014000
 800b828:	40001800 	.word	0x40001800

0800b82c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d020      	beq.n	800b890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01b      	beq.n	800b890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f06f 0202 	mvn.w	r2, #2
 800b860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	f003 0303 	and.w	r3, r3, #3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d003      	beq.n	800b87e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fa5b 	bl	800bd32 <HAL_TIM_IC_CaptureCallback>
 800b87c:	e005      	b.n	800b88a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa4d 	bl	800bd1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fa5e 	bl	800bd46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d020      	beq.n	800b8dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d01b      	beq.n	800b8dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f06f 0204 	mvn.w	r2, #4
 800b8ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa35 	bl	800bd32 <HAL_TIM_IC_CaptureCallback>
 800b8c8:	e005      	b.n	800b8d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa27 	bl	800bd1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fa38 	bl	800bd46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	f003 0308 	and.w	r3, r3, #8
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d020      	beq.n	800b928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f003 0308 	and.w	r3, r3, #8
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01b      	beq.n	800b928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f06f 0208 	mvn.w	r2, #8
 800b8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2204      	movs	r2, #4
 800b8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa0f 	bl	800bd32 <HAL_TIM_IC_CaptureCallback>
 800b914:	e005      	b.n	800b922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa01 	bl	800bd1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fa12 	bl	800bd46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f003 0310 	and.w	r3, r3, #16
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d020      	beq.n	800b974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f003 0310 	and.w	r3, r3, #16
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d01b      	beq.n	800b974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f06f 0210 	mvn.w	r2, #16
 800b944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2208      	movs	r2, #8
 800b94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f9e9 	bl	800bd32 <HAL_TIM_IC_CaptureCallback>
 800b960:	e005      	b.n	800b96e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f9db 	bl	800bd1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f9ec 	bl	800bd46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00c      	beq.n	800b998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	d007      	beq.n	800b998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f06f 0201 	mvn.w	r2, #1
 800b990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7f9 fd52 	bl	800543c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00c      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fd7c 	bl	800c4b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f9bd 	bl	800bd5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 0320 	and.w	r3, r3, #32
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f003 0320 	and.w	r3, r3, #32
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f06f 0220 	mvn.w	r2, #32
 800b9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fd4e 	bl	800c4a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d101      	bne.n	800ba2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba26:	2302      	movs	r3, #2
 800ba28:	e0ae      	b.n	800bb88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b0c      	cmp	r3, #12
 800ba36:	f200 809f 	bhi.w	800bb78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800ba75 	.word	0x0800ba75
 800ba44:	0800bb79 	.word	0x0800bb79
 800ba48:	0800bb79 	.word	0x0800bb79
 800ba4c:	0800bb79 	.word	0x0800bb79
 800ba50:	0800bab5 	.word	0x0800bab5
 800ba54:	0800bb79 	.word	0x0800bb79
 800ba58:	0800bb79 	.word	0x0800bb79
 800ba5c:	0800bb79 	.word	0x0800bb79
 800ba60:	0800baf7 	.word	0x0800baf7
 800ba64:	0800bb79 	.word	0x0800bb79
 800ba68:	0800bb79 	.word	0x0800bb79
 800ba6c:	0800bb79 	.word	0x0800bb79
 800ba70:	0800bb37 	.word	0x0800bb37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68b9      	ldr	r1, [r7, #8]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fa24 	bl	800bec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	699a      	ldr	r2, [r3, #24]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f042 0208 	orr.w	r2, r2, #8
 800ba8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	699a      	ldr	r2, [r3, #24]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f022 0204 	bic.w	r2, r2, #4
 800ba9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6999      	ldr	r1, [r3, #24]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	691a      	ldr	r2, [r3, #16]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	619a      	str	r2, [r3, #24]
      break;
 800bab2:	e064      	b.n	800bb7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68b9      	ldr	r1, [r7, #8]
 800baba:	4618      	mov	r0, r3
 800babc:	f000 fa74 	bl	800bfa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	699a      	ldr	r2, [r3, #24]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	699a      	ldr	r2, [r3, #24]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6999      	ldr	r1, [r3, #24]
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	021a      	lsls	r2, r3, #8
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	619a      	str	r2, [r3, #24]
      break;
 800baf4:	e043      	b.n	800bb7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 fac9 	bl	800c094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	69da      	ldr	r2, [r3, #28]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0208 	orr.w	r2, r2, #8
 800bb10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	69da      	ldr	r2, [r3, #28]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f022 0204 	bic.w	r2, r2, #4
 800bb20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69d9      	ldr	r1, [r3, #28]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	61da      	str	r2, [r3, #28]
      break;
 800bb34:	e023      	b.n	800bb7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68b9      	ldr	r1, [r7, #8]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fb1d 	bl	800c17c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	69da      	ldr	r2, [r3, #28]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69da      	ldr	r2, [r3, #28]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69d9      	ldr	r1, [r3, #28]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	021a      	lsls	r2, r3, #8
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	430a      	orrs	r2, r1
 800bb74:	61da      	str	r2, [r3, #28]
      break;
 800bb76:	e002      	b.n	800bb7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d101      	bne.n	800bbac <HAL_TIM_ConfigClockSource+0x1c>
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e0b4      	b.n	800bd16 <HAL_TIM_ConfigClockSource+0x186>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bbca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bbd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbe4:	d03e      	beq.n	800bc64 <HAL_TIM_ConfigClockSource+0xd4>
 800bbe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbea:	f200 8087 	bhi.w	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bbee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbf2:	f000 8086 	beq.w	800bd02 <HAL_TIM_ConfigClockSource+0x172>
 800bbf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbfa:	d87f      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bbfc:	2b70      	cmp	r3, #112	@ 0x70
 800bbfe:	d01a      	beq.n	800bc36 <HAL_TIM_ConfigClockSource+0xa6>
 800bc00:	2b70      	cmp	r3, #112	@ 0x70
 800bc02:	d87b      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bc04:	2b60      	cmp	r3, #96	@ 0x60
 800bc06:	d050      	beq.n	800bcaa <HAL_TIM_ConfigClockSource+0x11a>
 800bc08:	2b60      	cmp	r3, #96	@ 0x60
 800bc0a:	d877      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bc0c:	2b50      	cmp	r3, #80	@ 0x50
 800bc0e:	d03c      	beq.n	800bc8a <HAL_TIM_ConfigClockSource+0xfa>
 800bc10:	2b50      	cmp	r3, #80	@ 0x50
 800bc12:	d873      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bc14:	2b40      	cmp	r3, #64	@ 0x40
 800bc16:	d058      	beq.n	800bcca <HAL_TIM_ConfigClockSource+0x13a>
 800bc18:	2b40      	cmp	r3, #64	@ 0x40
 800bc1a:	d86f      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bc1c:	2b30      	cmp	r3, #48	@ 0x30
 800bc1e:	d064      	beq.n	800bcea <HAL_TIM_ConfigClockSource+0x15a>
 800bc20:	2b30      	cmp	r3, #48	@ 0x30
 800bc22:	d86b      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bc24:	2b20      	cmp	r3, #32
 800bc26:	d060      	beq.n	800bcea <HAL_TIM_ConfigClockSource+0x15a>
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	d867      	bhi.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d05c      	beq.n	800bcea <HAL_TIM_ConfigClockSource+0x15a>
 800bc30:	2b10      	cmp	r3, #16
 800bc32:	d05a      	beq.n	800bcea <HAL_TIM_ConfigClockSource+0x15a>
 800bc34:	e062      	b.n	800bcfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc46:	f000 fb69 	bl	800c31c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bc58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	609a      	str	r2, [r3, #8]
      break;
 800bc62:	e04f      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc74:	f000 fb52 	bl	800c31c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689a      	ldr	r2, [r3, #8]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc86:	609a      	str	r2, [r3, #8]
      break;
 800bc88:	e03c      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc96:	461a      	mov	r2, r3
 800bc98:	f000 fac6 	bl	800c228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2150      	movs	r1, #80	@ 0x50
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fb1f 	bl	800c2e6 <TIM_ITRx_SetConfig>
      break;
 800bca8:	e02c      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f000 fae5 	bl	800c286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2160      	movs	r1, #96	@ 0x60
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 fb0f 	bl	800c2e6 <TIM_ITRx_SetConfig>
      break;
 800bcc8:	e01c      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f000 faa6 	bl	800c228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2140      	movs	r1, #64	@ 0x40
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 faff 	bl	800c2e6 <TIM_ITRx_SetConfig>
      break;
 800bce8:	e00c      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	f000 faf6 	bl	800c2e6 <TIM_ITRx_SetConfig>
      break;
 800bcfa:	e003      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	73fb      	strb	r3, [r7, #15]
      break;
 800bd00:	e000      	b.n	800bd04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd62:	bf00      	nop
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
	...

0800bd70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a46      	ldr	r2, [pc, #280]	@ (800be9c <TIM_Base_SetConfig+0x12c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d013      	beq.n	800bdb0 <TIM_Base_SetConfig+0x40>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd8e:	d00f      	beq.n	800bdb0 <TIM_Base_SetConfig+0x40>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a43      	ldr	r2, [pc, #268]	@ (800bea0 <TIM_Base_SetConfig+0x130>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d00b      	beq.n	800bdb0 <TIM_Base_SetConfig+0x40>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a42      	ldr	r2, [pc, #264]	@ (800bea4 <TIM_Base_SetConfig+0x134>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d007      	beq.n	800bdb0 <TIM_Base_SetConfig+0x40>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a41      	ldr	r2, [pc, #260]	@ (800bea8 <TIM_Base_SetConfig+0x138>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d003      	beq.n	800bdb0 <TIM_Base_SetConfig+0x40>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a40      	ldr	r2, [pc, #256]	@ (800beac <TIM_Base_SetConfig+0x13c>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d108      	bne.n	800bdc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a35      	ldr	r2, [pc, #212]	@ (800be9c <TIM_Base_SetConfig+0x12c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d02b      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdd0:	d027      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a32      	ldr	r2, [pc, #200]	@ (800bea0 <TIM_Base_SetConfig+0x130>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d023      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a31      	ldr	r2, [pc, #196]	@ (800bea4 <TIM_Base_SetConfig+0x134>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d01f      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a30      	ldr	r2, [pc, #192]	@ (800bea8 <TIM_Base_SetConfig+0x138>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d01b      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a2f      	ldr	r2, [pc, #188]	@ (800beac <TIM_Base_SetConfig+0x13c>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d017      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a2e      	ldr	r2, [pc, #184]	@ (800beb0 <TIM_Base_SetConfig+0x140>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d013      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a2d      	ldr	r2, [pc, #180]	@ (800beb4 <TIM_Base_SetConfig+0x144>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d00f      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a2c      	ldr	r2, [pc, #176]	@ (800beb8 <TIM_Base_SetConfig+0x148>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d00b      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a2b      	ldr	r2, [pc, #172]	@ (800bebc <TIM_Base_SetConfig+0x14c>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d007      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a2a      	ldr	r2, [pc, #168]	@ (800bec0 <TIM_Base_SetConfig+0x150>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d003      	beq.n	800be22 <TIM_Base_SetConfig+0xb2>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a29      	ldr	r2, [pc, #164]	@ (800bec4 <TIM_Base_SetConfig+0x154>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d108      	bne.n	800be34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4313      	orrs	r3, r2
 800be32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	4313      	orrs	r3, r2
 800be40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a10      	ldr	r2, [pc, #64]	@ (800be9c <TIM_Base_SetConfig+0x12c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d003      	beq.n	800be68 <TIM_Base_SetConfig+0xf8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a12      	ldr	r2, [pc, #72]	@ (800beac <TIM_Base_SetConfig+0x13c>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d103      	bne.n	800be70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	691a      	ldr	r2, [r3, #16]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d105      	bne.n	800be8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f023 0201 	bic.w	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	611a      	str	r2, [r3, #16]
  }
}
 800be8e:	bf00      	nop
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	40010000 	.word	0x40010000
 800bea0:	40000400 	.word	0x40000400
 800bea4:	40000800 	.word	0x40000800
 800bea8:	40000c00 	.word	0x40000c00
 800beac:	40010400 	.word	0x40010400
 800beb0:	40014000 	.word	0x40014000
 800beb4:	40014400 	.word	0x40014400
 800beb8:	40014800 	.word	0x40014800
 800bebc:	40001800 	.word	0x40001800
 800bec0:	40001c00 	.word	0x40001c00
 800bec4:	40002000 	.word	0x40002000

0800bec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bec8:	b480      	push	{r7}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	f023 0201 	bic.w	r2, r3, #1
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0303 	bic.w	r3, r3, #3
 800befe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f023 0302 	bic.w	r3, r3, #2
 800bf10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a20      	ldr	r2, [pc, #128]	@ (800bfa0 <TIM_OC1_SetConfig+0xd8>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_OC1_SetConfig+0x64>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a1f      	ldr	r2, [pc, #124]	@ (800bfa4 <TIM_OC1_SetConfig+0xdc>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d10c      	bne.n	800bf46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f023 0308 	bic.w	r3, r3, #8
 800bf32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f023 0304 	bic.w	r3, r3, #4
 800bf44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a15      	ldr	r2, [pc, #84]	@ (800bfa0 <TIM_OC1_SetConfig+0xd8>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d003      	beq.n	800bf56 <TIM_OC1_SetConfig+0x8e>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a14      	ldr	r2, [pc, #80]	@ (800bfa4 <TIM_OC1_SetConfig+0xdc>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d111      	bne.n	800bf7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	621a      	str	r2, [r3, #32]
}
 800bf94:	bf00      	nop
 800bf96:	371c      	adds	r7, #28
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	40010000 	.word	0x40010000
 800bfa4:	40010400 	.word	0x40010400

0800bfa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a1b      	ldr	r3, [r3, #32]
 800bfbc:	f023 0210 	bic.w	r2, r3, #16
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f023 0320 	bic.w	r3, r3, #32
 800bff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	011b      	lsls	r3, r3, #4
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a22      	ldr	r2, [pc, #136]	@ (800c08c <TIM_OC2_SetConfig+0xe4>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d003      	beq.n	800c010 <TIM_OC2_SetConfig+0x68>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a21      	ldr	r2, [pc, #132]	@ (800c090 <TIM_OC2_SetConfig+0xe8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10d      	bne.n	800c02c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4313      	orrs	r3, r2
 800c022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c02a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a17      	ldr	r2, [pc, #92]	@ (800c08c <TIM_OC2_SetConfig+0xe4>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d003      	beq.n	800c03c <TIM_OC2_SetConfig+0x94>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a16      	ldr	r2, [pc, #88]	@ (800c090 <TIM_OC2_SetConfig+0xe8>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d113      	bne.n	800c064 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c04a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	4313      	orrs	r3, r2
 800c056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	4313      	orrs	r3, r2
 800c062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	693a      	ldr	r2, [r7, #16]
 800c068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	621a      	str	r2, [r3, #32]
}
 800c07e:	bf00      	nop
 800c080:	371c      	adds	r7, #28
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	40010000 	.word	0x40010000
 800c090:	40010400 	.word	0x40010400

0800c094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f023 0303 	bic.w	r3, r3, #3
 800c0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	021b      	lsls	r3, r3, #8
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a21      	ldr	r2, [pc, #132]	@ (800c174 <TIM_OC3_SetConfig+0xe0>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d003      	beq.n	800c0fa <TIM_OC3_SetConfig+0x66>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a20      	ldr	r2, [pc, #128]	@ (800c178 <TIM_OC3_SetConfig+0xe4>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d10d      	bne.n	800c116 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a16      	ldr	r2, [pc, #88]	@ (800c174 <TIM_OC3_SetConfig+0xe0>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d003      	beq.n	800c126 <TIM_OC3_SetConfig+0x92>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a15      	ldr	r2, [pc, #84]	@ (800c178 <TIM_OC3_SetConfig+0xe4>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d113      	bne.n	800c14e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c12c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	4313      	orrs	r3, r2
 800c140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	621a      	str	r2, [r3, #32]
}
 800c168:	bf00      	nop
 800c16a:	371c      	adds	r7, #28
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	40010000 	.word	0x40010000
 800c178:	40010400 	.word	0x40010400

0800c17c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	021b      	lsls	r3, r3, #8
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	031b      	lsls	r3, r3, #12
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a12      	ldr	r2, [pc, #72]	@ (800c220 <TIM_OC4_SetConfig+0xa4>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_OC4_SetConfig+0x68>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a11      	ldr	r2, [pc, #68]	@ (800c224 <TIM_OC4_SetConfig+0xa8>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d109      	bne.n	800c1f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	695b      	ldr	r3, [r3, #20]
 800c1f0:	019b      	lsls	r3, r3, #6
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	621a      	str	r2, [r3, #32]
}
 800c212:	bf00      	nop
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	40010000 	.word	0x40010000
 800c224:	40010400 	.word	0x40010400

0800c228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	f023 0201 	bic.w	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f023 030a 	bic.w	r3, r3, #10
 800c264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	621a      	str	r2, [r3, #32]
}
 800c27a:	bf00      	nop
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c286:	b480      	push	{r7}
 800c288:	b087      	sub	sp, #28
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	60b9      	str	r1, [r7, #8]
 800c290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6a1b      	ldr	r3, [r3, #32]
 800c29c:	f023 0210 	bic.w	r2, r3, #16
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c2b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	031b      	lsls	r3, r3, #12
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	011b      	lsls	r3, r3, #4
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	621a      	str	r2, [r3, #32]
}
 800c2da:	bf00      	nop
 800c2dc:	371c      	adds	r7, #28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b085      	sub	sp, #20
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4313      	orrs	r3, r2
 800c304:	f043 0307 	orr.w	r3, r3, #7
 800c308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	609a      	str	r2, [r3, #8]
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	021a      	lsls	r2, r3, #8
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	431a      	orrs	r2, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	4313      	orrs	r3, r2
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	4313      	orrs	r3, r2
 800c348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	609a      	str	r2, [r3, #8]
}
 800c350:	bf00      	nop
 800c352:	371c      	adds	r7, #28
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	2201      	movs	r2, #1
 800c370:	fa02 f303 	lsl.w	r3, r2, r3
 800c374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6a1a      	ldr	r2, [r3, #32]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	43db      	mvns	r3, r3
 800c37e:	401a      	ands	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f003 031f 	and.w	r3, r3, #31
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	fa01 f303 	lsl.w	r3, r1, r3
 800c394:	431a      	orrs	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	621a      	str	r2, [r3, #32]
}
 800c39a:	bf00      	nop
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
	...

0800c3a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d101      	bne.n	800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3bc:	2302      	movs	r3, #2
 800c3be:	e05a      	b.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a21      	ldr	r2, [pc, #132]	@ (800c484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d022      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c40c:	d01d      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a1d      	ldr	r2, [pc, #116]	@ (800c488 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d018      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a1b      	ldr	r2, [pc, #108]	@ (800c48c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d013      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a1a      	ldr	r2, [pc, #104]	@ (800c490 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00e      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a18      	ldr	r2, [pc, #96]	@ (800c494 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d009      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a17      	ldr	r2, [pc, #92]	@ (800c498 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d004      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a15      	ldr	r2, [pc, #84]	@ (800c49c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d10c      	bne.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	40010000 	.word	0x40010000
 800c488:	40000400 	.word	0x40000400
 800c48c:	40000800 	.word	0x40000800
 800c490:	40000c00 	.word	0x40000c00
 800c494:	40010400 	.word	0x40010400
 800c498:	40014000 	.word	0x40014000
 800c49c:	40001800 	.word	0x40001800

0800c4a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e042      	b.n	800c560 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7f9 fc32 	bl	8005d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2224      	movs	r2, #36	@ 0x24
 800c4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c50a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 ffa5 	bl	800d45c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	691a      	ldr	r2, [r3, #16]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	695a      	ldr	r2, [r3, #20]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68da      	ldr	r2, [r3, #12]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	@ 0x28
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	4613      	mov	r3, r2
 800c576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c578:	2300      	movs	r3, #0
 800c57a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b20      	cmp	r3, #32
 800c586:	d175      	bne.n	800c674 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d002      	beq.n	800c594 <HAL_UART_Transmit+0x2c>
 800c58e:	88fb      	ldrh	r3, [r7, #6]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	e06e      	b.n	800c676 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2221      	movs	r2, #33	@ 0x21
 800c5a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5a6:	f7fa fc8b 	bl	8006ec0 <HAL_GetTick>
 800c5aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	88fa      	ldrh	r2, [r7, #6]
 800c5b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	88fa      	ldrh	r2, [r7, #6]
 800c5b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5c0:	d108      	bne.n	800c5d4 <HAL_UART_Transmit+0x6c>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d104      	bne.n	800c5d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	61bb      	str	r3, [r7, #24]
 800c5d2:	e003      	b.n	800c5dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c5dc:	e02e      	b.n	800c63c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2180      	movs	r1, #128	@ 0x80
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 fc43 	bl	800ce74 <UART_WaitOnFlagUntilTimeout>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d005      	beq.n	800c600 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e03a      	b.n	800c676 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10b      	bne.n	800c61e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	881b      	ldrh	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	3302      	adds	r3, #2
 800c61a:	61bb      	str	r3, [r7, #24]
 800c61c:	e007      	b.n	800c62e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	781a      	ldrb	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	3301      	adds	r3, #1
 800c62c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c632:	b29b      	uxth	r3, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	b29a      	uxth	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c640:	b29b      	uxth	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1cb      	bne.n	800c5de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2200      	movs	r2, #0
 800c64e:	2140      	movs	r1, #64	@ 0x40
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 fc0f 	bl	800ce74 <UART_WaitOnFlagUntilTimeout>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2220      	movs	r2, #32
 800c660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e006      	b.n	800c676 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2220      	movs	r2, #32
 800c66c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	e000      	b.n	800c676 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c674:	2302      	movs	r3, #2
  }
}
 800c676:	4618      	mov	r0, r3
 800c678:	3720      	adds	r7, #32
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	4613      	mov	r3, r2
 800c68a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b20      	cmp	r3, #32
 800c696:	d112      	bne.n	800c6be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <HAL_UART_Receive_IT+0x26>
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e00b      	b.n	800c6c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c6ae:	88fb      	ldrh	r3, [r7, #6]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	68b9      	ldr	r1, [r7, #8]
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 fc36 	bl	800cf26 <UART_Start_Receive_IT>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	e000      	b.n	800c6c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c6be:	2302      	movs	r3, #2
  }
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b20      	cmp	r3, #32
 800c6e0:	d112      	bne.n	800c708 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d002      	beq.n	800c6ee <HAL_UART_Receive_DMA+0x26>
 800c6e8:	88fb      	ldrh	r3, [r7, #6]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d101      	bne.n	800c6f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e00b      	b.n	800c70a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c6f8:	88fb      	ldrh	r3, [r7, #6]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	68b9      	ldr	r1, [r7, #8]
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f000 fc4c 	bl	800cf9c <UART_Start_Receive_DMA>
 800c704:	4603      	mov	r3, r0
 800c706:	e000      	b.n	800c70a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c708:	2302      	movs	r3, #2
  }
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b0ba      	sub	sp, #232	@ 0xe8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c740:	2300      	movs	r3, #0
 800c742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c74a:	f003 030f 	and.w	r3, r3, #15
 800c74e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10f      	bne.n	800c77a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c75e:	f003 0320 	and.w	r3, r3, #32
 800c762:	2b00      	cmp	r3, #0
 800c764:	d009      	beq.n	800c77a <HAL_UART_IRQHandler+0x66>
 800c766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c76a:	f003 0320 	and.w	r3, r3, #32
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fdb3 	bl	800d2de <UART_Receive_IT>
      return;
 800c778:	e25b      	b.n	800cc32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c77a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 80de 	beq.w	800c940 <HAL_UART_IRQHandler+0x22c>
 800c784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d106      	bne.n	800c79e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c794:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 80d1 	beq.w	800c940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00b      	beq.n	800c7c2 <HAL_UART_IRQHandler+0xae>
 800c7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d005      	beq.n	800c7c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7ba:	f043 0201 	orr.w	r2, r3, #1
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c6:	f003 0304 	and.w	r3, r3, #4
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00b      	beq.n	800c7e6 <HAL_UART_IRQHandler+0xd2>
 800c7ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7de:	f043 0202 	orr.w	r2, r3, #2
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00b      	beq.n	800c80a <HAL_UART_IRQHandler+0xf6>
 800c7f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d005      	beq.n	800c80a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c802:	f043 0204 	orr.w	r2, r3, #4
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c80e:	f003 0308 	and.w	r3, r3, #8
 800c812:	2b00      	cmp	r3, #0
 800c814:	d011      	beq.n	800c83a <HAL_UART_IRQHandler+0x126>
 800c816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c81a:	f003 0320 	and.w	r3, r3, #32
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d105      	bne.n	800c82e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d005      	beq.n	800c83a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c832:	f043 0208 	orr.w	r2, r3, #8
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 81f2 	beq.w	800cc28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c848:	f003 0320 	and.w	r3, r3, #32
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d008      	beq.n	800c862 <HAL_UART_IRQHandler+0x14e>
 800c850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c854:	f003 0320 	and.w	r3, r3, #32
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fd3e 	bl	800d2de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c86c:	2b40      	cmp	r3, #64	@ 0x40
 800c86e:	bf0c      	ite	eq
 800c870:	2301      	moveq	r3, #1
 800c872:	2300      	movne	r3, #0
 800c874:	b2db      	uxtb	r3, r3
 800c876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c87e:	f003 0308 	and.w	r3, r3, #8
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <HAL_UART_IRQHandler+0x17a>
 800c886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d04f      	beq.n	800c92e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fc46 	bl	800d120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c89e:	2b40      	cmp	r3, #64	@ 0x40
 800c8a0:	d141      	bne.n	800c926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3314      	adds	r3, #20
 800c8a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c8b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3314      	adds	r3, #20
 800c8ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c8ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c8d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c8da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c8e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1d9      	bne.n	800c8a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d013      	beq.n	800c91e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8fa:	4a7e      	ldr	r2, [pc, #504]	@ (800caf4 <HAL_UART_IRQHandler+0x3e0>)
 800c8fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c902:	4618      	mov	r0, r3
 800c904:	f7fa fd64 	bl	80073d0 <HAL_DMA_Abort_IT>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d016      	beq.n	800c93c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c91c:	e00e      	b.n	800c93c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f994 	bl	800cc4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c924:	e00a      	b.n	800c93c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f990 	bl	800cc4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c92c:	e006      	b.n	800c93c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f98c 	bl	800cc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c93a:	e175      	b.n	800cc28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c93c:	bf00      	nop
    return;
 800c93e:	e173      	b.n	800cc28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c944:	2b01      	cmp	r3, #1
 800c946:	f040 814f 	bne.w	800cbe8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c94e:	f003 0310 	and.w	r3, r3, #16
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 8148 	beq.w	800cbe8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c95c:	f003 0310 	and.w	r3, r3, #16
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 8141 	beq.w	800cbe8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c966:	2300      	movs	r3, #0
 800c968:	60bb      	str	r3, [r7, #8]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	60bb      	str	r3, [r7, #8]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	60bb      	str	r3, [r7, #8]
 800c97a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c986:	2b40      	cmp	r3, #64	@ 0x40
 800c988:	f040 80b6 	bne.w	800caf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 8145 	beq.w	800cc2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c9a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	f080 813e 	bcs.w	800cc2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9c2:	f000 8088 	beq.w	800cad6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	330c      	adds	r3, #12
 800c9cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9d4:	e853 3f00 	ldrex	r3, [r3]
 800c9d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c9dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	330c      	adds	r3, #12
 800c9ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c9f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c9f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c9fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca02:	e841 2300 	strex	r3, r2, [r1]
 800ca06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1d9      	bne.n	800c9c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3314      	adds	r3, #20
 800ca18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca24:	f023 0301 	bic.w	r3, r3, #1
 800ca28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	3314      	adds	r3, #20
 800ca32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca42:	e841 2300 	strex	r3, r2, [r1]
 800ca46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1e1      	bne.n	800ca12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3314      	adds	r3, #20
 800ca54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca58:	e853 3f00 	ldrex	r3, [r3]
 800ca5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3314      	adds	r3, #20
 800ca6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca7a:	e841 2300 	strex	r3, r2, [r1]
 800ca7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1e3      	bne.n	800ca4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	330c      	adds	r3, #12
 800ca9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca9e:	e853 3f00 	ldrex	r3, [r3]
 800caa2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800caa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caa6:	f023 0310 	bic.w	r3, r3, #16
 800caaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	330c      	adds	r3, #12
 800cab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cab8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800caba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cabe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cac0:	e841 2300 	strex	r3, r2, [r1]
 800cac4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e3      	bne.n	800ca94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fa fc0d 	bl	80072f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2202      	movs	r2, #2
 800cada:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	b29b      	uxth	r3, r3
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f8b7 	bl	800cc60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800caf2:	e09b      	b.n	800cc2c <HAL_UART_IRQHandler+0x518>
 800caf4:	0800d1e7 	.word	0x0800d1e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	1ad3      	subs	r3, r2, r3
 800cb04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 808e 	beq.w	800cc30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cb14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f000 8089 	beq.w	800cc30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	330c      	adds	r3, #12
 800cb24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb28:	e853 3f00 	ldrex	r3, [r3]
 800cb2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	330c      	adds	r3, #12
 800cb3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cb42:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb4a:	e841 2300 	strex	r3, r2, [r1]
 800cb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1e3      	bne.n	800cb1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3314      	adds	r3, #20
 800cb5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb60:	e853 3f00 	ldrex	r3, [r3]
 800cb64:	623b      	str	r3, [r7, #32]
   return(result);
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	f023 0301 	bic.w	r3, r3, #1
 800cb6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3314      	adds	r3, #20
 800cb76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb82:	e841 2300 	strex	r3, r2, [r1]
 800cb86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1e3      	bne.n	800cb56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2220      	movs	r2, #32
 800cb92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	330c      	adds	r3, #12
 800cba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f023 0310 	bic.w	r3, r3, #16
 800cbb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	330c      	adds	r3, #12
 800cbbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cbc0:	61fa      	str	r2, [r7, #28]
 800cbc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc4:	69b9      	ldr	r1, [r7, #24]
 800cbc6:	69fa      	ldr	r2, [r7, #28]
 800cbc8:	e841 2300 	strex	r3, r2, [r1]
 800cbcc:	617b      	str	r3, [r7, #20]
   return(result);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1e3      	bne.n	800cb9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f83d 	bl	800cc60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbe6:	e023      	b.n	800cc30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cbe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <HAL_UART_IRQHandler+0x4f4>
 800cbf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fb04 	bl	800d20e <UART_Transmit_IT>
    return;
 800cc06:	e014      	b.n	800cc32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00e      	beq.n	800cc32 <HAL_UART_IRQHandler+0x51e>
 800cc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d008      	beq.n	800cc32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fb44 	bl	800d2ae <UART_EndTransmit_IT>
    return;
 800cc26:	e004      	b.n	800cc32 <HAL_UART_IRQHandler+0x51e>
    return;
 800cc28:	bf00      	nop
 800cc2a:	e002      	b.n	800cc32 <HAL_UART_IRQHandler+0x51e>
      return;
 800cc2c:	bf00      	nop
 800cc2e:	e000      	b.n	800cc32 <HAL_UART_IRQHandler+0x51e>
      return;
 800cc30:	bf00      	nop
  }
}
 800cc32:	37e8      	adds	r7, #232	@ 0xe8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b09c      	sub	sp, #112	@ 0x70
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc84:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d172      	bne.n	800cd7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cc94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc96:	2200      	movs	r2, #0
 800cc98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	330c      	adds	r3, #12
 800cca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca4:	e853 3f00 	ldrex	r3, [r3]
 800cca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	330c      	adds	r3, #12
 800ccb8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ccba:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ccbc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ccc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccc2:	e841 2300 	strex	r3, r2, [r1]
 800ccc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e5      	bne.n	800cc9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3314      	adds	r3, #20
 800ccd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd8:	e853 3f00 	ldrex	r3, [r3]
 800ccdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce0:	f023 0301 	bic.w	r3, r3, #1
 800cce4:	667b      	str	r3, [r7, #100]	@ 0x64
 800cce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3314      	adds	r3, #20
 800ccec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccee:	647a      	str	r2, [r7, #68]	@ 0x44
 800ccf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccf6:	e841 2300 	strex	r3, r2, [r1]
 800ccfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e5      	bne.n	800ccce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3314      	adds	r3, #20
 800cd08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	623b      	str	r3, [r7, #32]
   return(result);
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd18:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3314      	adds	r3, #20
 800cd20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cd22:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e5      	bne.n	800cd02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d119      	bne.n	800cd7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	330c      	adds	r3, #12
 800cd4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	e853 3f00 	ldrex	r3, [r3]
 800cd54:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f023 0310 	bic.w	r3, r3, #16
 800cd5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	330c      	adds	r3, #12
 800cd64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cd66:	61fa      	str	r2, [r7, #28]
 800cd68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	69b9      	ldr	r1, [r7, #24]
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	617b      	str	r3, [r7, #20]
   return(result);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e5      	bne.n	800cd46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d106      	bne.n	800cd96 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd90:	f7ff ff66 	bl	800cc60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd94:	e002      	b.n	800cd9c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cd96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd98:	f7f7 fc6a 	bl	8004670 <HAL_UART_RxCpltCallback>
}
 800cd9c:	bf00      	nop
 800cd9e:	3770      	adds	r7, #112	@ 0x70
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d108      	bne.n	800cdd2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdc4:	085b      	lsrs	r3, r3, #1
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	4619      	mov	r1, r3
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7ff ff48 	bl	800cc60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdd0:	e002      	b.n	800cdd8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7ff ff30 	bl	800cc38 <HAL_UART_RxHalfCpltCallback>
}
 800cdd8:	bf00      	nop
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdf0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdfc:	2b80      	cmp	r3, #128	@ 0x80
 800cdfe:	bf0c      	ite	eq
 800ce00:	2301      	moveq	r3, #1
 800ce02:	2300      	movne	r3, #0
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b21      	cmp	r3, #33	@ 0x21
 800ce12:	d108      	bne.n	800ce26 <UART_DMAError+0x46>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ce20:	68b8      	ldr	r0, [r7, #8]
 800ce22:	f000 f955 	bl	800d0d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce30:	2b40      	cmp	r3, #64	@ 0x40
 800ce32:	bf0c      	ite	eq
 800ce34:	2301      	moveq	r3, #1
 800ce36:	2300      	movne	r3, #0
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b22      	cmp	r3, #34	@ 0x22
 800ce46:	d108      	bne.n	800ce5a <UART_DMAError+0x7a>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	2200      	movs	r2, #0
 800ce52:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ce54:	68b8      	ldr	r0, [r7, #8]
 800ce56:	f000 f963 	bl	800d120 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5e:	f043 0210 	orr.w	r2, r3, #16
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce66:	68b8      	ldr	r0, [r7, #8]
 800ce68:	f7ff fef0 	bl	800cc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce6c:	bf00      	nop
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	4613      	mov	r3, r2
 800ce82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce84:	e03b      	b.n	800cefe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8c:	d037      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce8e:	f7fa f817 	bl	8006ec0 <HAL_GetTick>
 800ce92:	4602      	mov	r2, r0
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	6a3a      	ldr	r2, [r7, #32]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d302      	bcc.n	800cea4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d101      	bne.n	800cea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cea4:	2303      	movs	r3, #3
 800cea6:	e03a      	b.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	f003 0304 	and.w	r3, r3, #4
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d023      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x8a>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b80      	cmp	r3, #128	@ 0x80
 800ceba:	d020      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x8a>
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2b40      	cmp	r3, #64	@ 0x40
 800cec0:	d01d      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f003 0308 	and.w	r3, r3, #8
 800cecc:	2b08      	cmp	r3, #8
 800cece:	d116      	bne.n	800cefe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	617b      	str	r3, [r7, #20]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	617b      	str	r3, [r7, #20]
 800cee4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f000 f91a 	bl	800d120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2208      	movs	r2, #8
 800cef0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e00f      	b.n	800cf1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	4013      	ands	r3, r2
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	bf0c      	ite	eq
 800cf0e:	2301      	moveq	r3, #1
 800cf10:	2300      	movne	r3, #0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	461a      	mov	r2, r3
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d0b4      	beq.n	800ce86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3718      	adds	r7, #24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b085      	sub	sp, #20
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	4613      	mov	r3, r2
 800cf32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	88fa      	ldrh	r2, [r7, #6]
 800cf3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	88fa      	ldrh	r2, [r7, #6]
 800cf44:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2222      	movs	r2, #34	@ 0x22
 800cf50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d007      	beq.n	800cf6c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68da      	ldr	r2, [r3, #12]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	695a      	ldr	r2, [r3, #20]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f042 0201 	orr.w	r2, r2, #1
 800cf7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f042 0220 	orr.w	r2, r2, #32
 800cf8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3714      	adds	r7, #20
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
	...

0800cf9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b098      	sub	sp, #96	@ 0x60
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	88fa      	ldrh	r2, [r7, #6]
 800cfb4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2222      	movs	r2, #34	@ 0x22
 800cfc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc8:	4a3e      	ldr	r2, [pc, #248]	@ (800d0c4 <UART_Start_Receive_DMA+0x128>)
 800cfca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd0:	4a3d      	ldr	r2, [pc, #244]	@ (800d0c8 <UART_Start_Receive_DMA+0x12c>)
 800cfd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd8:	4a3c      	ldr	r2, [pc, #240]	@ (800d0cc <UART_Start_Receive_DMA+0x130>)
 800cfda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800cfe4:	f107 0308 	add.w	r3, r7, #8
 800cfe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	3304      	adds	r3, #4
 800cff4:	4619      	mov	r1, r3
 800cff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	88fb      	ldrh	r3, [r7, #6]
 800cffc:	f7fa f920 	bl	8007240 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d000:	2300      	movs	r3, #0
 800d002:	613b      	str	r3, [r7, #16]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	613b      	str	r3, [r7, #16]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	613b      	str	r3, [r7, #16]
 800d014:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d019      	beq.n	800d052 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	330c      	adds	r3, #12
 800d024:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d028:	e853 3f00 	ldrex	r3, [r3]
 800d02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d034:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	330c      	adds	r3, #12
 800d03c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d03e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d040:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d042:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d046:	e841 2300 	strex	r3, r2, [r1]
 800d04a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d04c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1e5      	bne.n	800d01e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3314      	adds	r3, #20
 800d058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05c:	e853 3f00 	ldrex	r3, [r3]
 800d060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d064:	f043 0301 	orr.w	r3, r3, #1
 800d068:	657b      	str	r3, [r7, #84]	@ 0x54
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3314      	adds	r3, #20
 800d070:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d072:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d076:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d07a:	e841 2300 	strex	r3, r2, [r1]
 800d07e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1e5      	bne.n	800d052 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	3314      	adds	r3, #20
 800d08c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	e853 3f00 	ldrex	r3, [r3]
 800d094:	617b      	str	r3, [r7, #20]
   return(result);
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d09c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3314      	adds	r3, #20
 800d0a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d0a6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d0a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	6a39      	ldr	r1, [r7, #32]
 800d0ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1e5      	bne.n	800d086 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3760      	adds	r7, #96	@ 0x60
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	0800cc79 	.word	0x0800cc79
 800d0c8:	0800cda5 	.word	0x0800cda5
 800d0cc:	0800cde1 	.word	0x0800cde1

0800d0d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b089      	sub	sp, #36	@ 0x24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	330c      	adds	r3, #12
 800d0de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	e853 3f00 	ldrex	r3, [r3]
 800d0e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d0ee:	61fb      	str	r3, [r7, #28]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	330c      	adds	r3, #12
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	61ba      	str	r2, [r7, #24]
 800d0fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fc:	6979      	ldr	r1, [r7, #20]
 800d0fe:	69ba      	ldr	r2, [r7, #24]
 800d100:	e841 2300 	strex	r3, r2, [r1]
 800d104:	613b      	str	r3, [r7, #16]
   return(result);
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1e5      	bne.n	800d0d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2220      	movs	r2, #32
 800d110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d114:	bf00      	nop
 800d116:	3724      	adds	r7, #36	@ 0x24
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d120:	b480      	push	{r7}
 800d122:	b095      	sub	sp, #84	@ 0x54
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	330c      	adds	r3, #12
 800d12e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d132:	e853 3f00 	ldrex	r3, [r3]
 800d136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	330c      	adds	r3, #12
 800d146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d148:	643a      	str	r2, [r7, #64]	@ 0x40
 800d14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d14c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d14e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d150:	e841 2300 	strex	r3, r2, [r1]
 800d154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1e5      	bne.n	800d128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	3314      	adds	r3, #20
 800d162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	e853 3f00 	ldrex	r3, [r3]
 800d16a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f023 0301 	bic.w	r3, r3, #1
 800d172:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3314      	adds	r3, #20
 800d17a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d17c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d17e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d184:	e841 2300 	strex	r3, r2, [r1]
 800d188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d1e5      	bne.n	800d15c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d194:	2b01      	cmp	r3, #1
 800d196:	d119      	bne.n	800d1cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	330c      	adds	r3, #12
 800d19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	e853 3f00 	ldrex	r3, [r3]
 800d1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	f023 0310 	bic.w	r3, r3, #16
 800d1ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	330c      	adds	r3, #12
 800d1b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1b8:	61ba      	str	r2, [r7, #24]
 800d1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1bc:	6979      	ldr	r1, [r7, #20]
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	e841 2300 	strex	r3, r2, [r1]
 800d1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1e5      	bne.n	800d198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2220      	movs	r2, #32
 800d1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d1da:	bf00      	nop
 800d1dc:	3754      	adds	r7, #84	@ 0x54
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f7ff fd23 	bl	800cc4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d206:	bf00      	nop
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d20e:	b480      	push	{r7}
 800d210:	b085      	sub	sp, #20
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	2b21      	cmp	r3, #33	@ 0x21
 800d220:	d13e      	bne.n	800d2a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d22a:	d114      	bne.n	800d256 <UART_Transmit_IT+0x48>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d110      	bne.n	800d256 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a1b      	ldr	r3, [r3, #32]
 800d238:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d248:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	1c9a      	adds	r2, r3, #2
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	621a      	str	r2, [r3, #32]
 800d254:	e008      	b.n	800d268 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	1c59      	adds	r1, r3, #1
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	6211      	str	r1, [r2, #32]
 800d260:	781a      	ldrb	r2, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	3b01      	subs	r3, #1
 800d270:	b29b      	uxth	r3, r3
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	4619      	mov	r1, r3
 800d276:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10f      	bne.n	800d29c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68da      	ldr	r2, [r3, #12]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d28a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68da      	ldr	r2, [r3, #12]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d29a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	e000      	b.n	800d2a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d2a0:	2302      	movs	r3, #2
  }
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3714      	adds	r7, #20
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d2c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7f7 f9e8 	bl	80046a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b08c      	sub	sp, #48	@ 0x30
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b22      	cmp	r3, #34	@ 0x22
 800d2f0:	f040 80ae 	bne.w	800d450 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2fc:	d117      	bne.n	800d32e <UART_Receive_IT+0x50>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d113      	bne.n	800d32e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d306:	2300      	movs	r3, #0
 800d308:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	b29b      	uxth	r3, r3
 800d318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d326:	1c9a      	adds	r2, r3, #2
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d32c:	e026      	b.n	800d37c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d332:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d334:	2300      	movs	r3, #0
 800d336:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d340:	d007      	beq.n	800d352 <UART_Receive_IT+0x74>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10a      	bne.n	800d360 <UART_Receive_IT+0x82>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d106      	bne.n	800d360 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35c:	701a      	strb	r2, [r3, #0]
 800d35e:	e008      	b.n	800d372 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	b2db      	uxtb	r3, r3
 800d368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d370:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d380:	b29b      	uxth	r3, r3
 800d382:	3b01      	subs	r3, #1
 800d384:	b29b      	uxth	r3, r3
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	4619      	mov	r1, r3
 800d38a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d15d      	bne.n	800d44c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68da      	ldr	r2, [r3, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f022 0220 	bic.w	r2, r2, #32
 800d39e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68da      	ldr	r2, [r3, #12]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d3ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	695a      	ldr	r2, [r3, #20]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f022 0201 	bic.w	r2, r2, #1
 800d3be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2220      	movs	r2, #32
 800d3c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d135      	bne.n	800d442 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	330c      	adds	r3, #12
 800d3e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	e853 3f00 	ldrex	r3, [r3]
 800d3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f023 0310 	bic.w	r3, r3, #16
 800d3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	330c      	adds	r3, #12
 800d3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3fc:	623a      	str	r2, [r7, #32]
 800d3fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d400:	69f9      	ldr	r1, [r7, #28]
 800d402:	6a3a      	ldr	r2, [r7, #32]
 800d404:	e841 2300 	strex	r3, r2, [r1]
 800d408:	61bb      	str	r3, [r7, #24]
   return(result);
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1e5      	bne.n	800d3dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 0310 	and.w	r3, r3, #16
 800d41a:	2b10      	cmp	r3, #16
 800d41c:	d10a      	bne.n	800d434 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d41e:	2300      	movs	r3, #0
 800d420:	60fb      	str	r3, [r7, #12]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	60fb      	str	r3, [r7, #12]
 800d432:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff fc10 	bl	800cc60 <HAL_UARTEx_RxEventCallback>
 800d440:	e002      	b.n	800d448 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7f7 f914 	bl	8004670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d448:	2300      	movs	r3, #0
 800d44a:	e002      	b.n	800d452 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	e000      	b.n	800d452 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d450:	2302      	movs	r3, #2
  }
}
 800d452:	4618      	mov	r0, r3
 800d454:	3730      	adds	r7, #48	@ 0x30
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d45c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d460:	b0c0      	sub	sp, #256	@ 0x100
 800d462:	af00      	add	r7, sp, #0
 800d464:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d478:	68d9      	ldr	r1, [r3, #12]
 800d47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	ea40 0301 	orr.w	r3, r0, r1
 800d484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d48a:	689a      	ldr	r2, [r3, #8]
 800d48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	431a      	orrs	r2, r3
 800d494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	431a      	orrs	r2, r3
 800d49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4a0:	69db      	ldr	r3, [r3, #28]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d4a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d4b4:	f021 010c 	bic.w	r1, r1, #12
 800d4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d4c2:	430b      	orrs	r3, r1
 800d4c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d4d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4d6:	6999      	ldr	r1, [r3, #24]
 800d4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	ea40 0301 	orr.w	r3, r0, r1
 800d4e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	4b8f      	ldr	r3, [pc, #572]	@ (800d728 <UART_SetConfig+0x2cc>)
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d005      	beq.n	800d4fc <UART_SetConfig+0xa0>
 800d4f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	4b8d      	ldr	r3, [pc, #564]	@ (800d72c <UART_SetConfig+0x2d0>)
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d104      	bne.n	800d506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d4fc:	f7fc fe3e 	bl	800a17c <HAL_RCC_GetPCLK2Freq>
 800d500:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d504:	e003      	b.n	800d50e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d506:	f7fc fe25 	bl	800a154 <HAL_RCC_GetPCLK1Freq>
 800d50a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d512:	69db      	ldr	r3, [r3, #28]
 800d514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d518:	f040 810c 	bne.w	800d734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d51c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d520:	2200      	movs	r2, #0
 800d522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d526:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d52a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d52e:	4622      	mov	r2, r4
 800d530:	462b      	mov	r3, r5
 800d532:	1891      	adds	r1, r2, r2
 800d534:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d536:	415b      	adcs	r3, r3
 800d538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d53a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d53e:	4621      	mov	r1, r4
 800d540:	eb12 0801 	adds.w	r8, r2, r1
 800d544:	4629      	mov	r1, r5
 800d546:	eb43 0901 	adc.w	r9, r3, r1
 800d54a:	f04f 0200 	mov.w	r2, #0
 800d54e:	f04f 0300 	mov.w	r3, #0
 800d552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d55a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d55e:	4690      	mov	r8, r2
 800d560:	4699      	mov	r9, r3
 800d562:	4623      	mov	r3, r4
 800d564:	eb18 0303 	adds.w	r3, r8, r3
 800d568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d56c:	462b      	mov	r3, r5
 800d56e:	eb49 0303 	adc.w	r3, r9, r3
 800d572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d582:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d58a:	460b      	mov	r3, r1
 800d58c:	18db      	adds	r3, r3, r3
 800d58e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d590:	4613      	mov	r3, r2
 800d592:	eb42 0303 	adc.w	r3, r2, r3
 800d596:	657b      	str	r3, [r7, #84]	@ 0x54
 800d598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d59c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d5a0:	f7f3 fb4a 	bl	8000c38 <__aeabi_uldivmod>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4b61      	ldr	r3, [pc, #388]	@ (800d730 <UART_SetConfig+0x2d4>)
 800d5aa:	fba3 2302 	umull	r2, r3, r3, r2
 800d5ae:	095b      	lsrs	r3, r3, #5
 800d5b0:	011c      	lsls	r4, r3, #4
 800d5b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d5bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d5c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d5c4:	4642      	mov	r2, r8
 800d5c6:	464b      	mov	r3, r9
 800d5c8:	1891      	adds	r1, r2, r2
 800d5ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d5cc:	415b      	adcs	r3, r3
 800d5ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d5d4:	4641      	mov	r1, r8
 800d5d6:	eb12 0a01 	adds.w	sl, r2, r1
 800d5da:	4649      	mov	r1, r9
 800d5dc:	eb43 0b01 	adc.w	fp, r3, r1
 800d5e0:	f04f 0200 	mov.w	r2, #0
 800d5e4:	f04f 0300 	mov.w	r3, #0
 800d5e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d5ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d5f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5f4:	4692      	mov	sl, r2
 800d5f6:	469b      	mov	fp, r3
 800d5f8:	4643      	mov	r3, r8
 800d5fa:	eb1a 0303 	adds.w	r3, sl, r3
 800d5fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d602:	464b      	mov	r3, r9
 800d604:	eb4b 0303 	adc.w	r3, fp, r3
 800d608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d618:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d61c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d620:	460b      	mov	r3, r1
 800d622:	18db      	adds	r3, r3, r3
 800d624:	643b      	str	r3, [r7, #64]	@ 0x40
 800d626:	4613      	mov	r3, r2
 800d628:	eb42 0303 	adc.w	r3, r2, r3
 800d62c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d62e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d636:	f7f3 faff 	bl	8000c38 <__aeabi_uldivmod>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	4611      	mov	r1, r2
 800d640:	4b3b      	ldr	r3, [pc, #236]	@ (800d730 <UART_SetConfig+0x2d4>)
 800d642:	fba3 2301 	umull	r2, r3, r3, r1
 800d646:	095b      	lsrs	r3, r3, #5
 800d648:	2264      	movs	r2, #100	@ 0x64
 800d64a:	fb02 f303 	mul.w	r3, r2, r3
 800d64e:	1acb      	subs	r3, r1, r3
 800d650:	00db      	lsls	r3, r3, #3
 800d652:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d656:	4b36      	ldr	r3, [pc, #216]	@ (800d730 <UART_SetConfig+0x2d4>)
 800d658:	fba3 2302 	umull	r2, r3, r3, r2
 800d65c:	095b      	lsrs	r3, r3, #5
 800d65e:	005b      	lsls	r3, r3, #1
 800d660:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d664:	441c      	add	r4, r3
 800d666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d670:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d678:	4642      	mov	r2, r8
 800d67a:	464b      	mov	r3, r9
 800d67c:	1891      	adds	r1, r2, r2
 800d67e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d680:	415b      	adcs	r3, r3
 800d682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d688:	4641      	mov	r1, r8
 800d68a:	1851      	adds	r1, r2, r1
 800d68c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d68e:	4649      	mov	r1, r9
 800d690:	414b      	adcs	r3, r1
 800d692:	637b      	str	r3, [r7, #52]	@ 0x34
 800d694:	f04f 0200 	mov.w	r2, #0
 800d698:	f04f 0300 	mov.w	r3, #0
 800d69c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d6a0:	4659      	mov	r1, fp
 800d6a2:	00cb      	lsls	r3, r1, #3
 800d6a4:	4651      	mov	r1, sl
 800d6a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6aa:	4651      	mov	r1, sl
 800d6ac:	00ca      	lsls	r2, r1, #3
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	4642      	mov	r2, r8
 800d6b6:	189b      	adds	r3, r3, r2
 800d6b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d6bc:	464b      	mov	r3, r9
 800d6be:	460a      	mov	r2, r1
 800d6c0:	eb42 0303 	adc.w	r3, r2, r3
 800d6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d6c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d6d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d6d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d6dc:	460b      	mov	r3, r1
 800d6de:	18db      	adds	r3, r3, r3
 800d6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	eb42 0303 	adc.w	r3, r2, r3
 800d6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d6ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d6f2:	f7f3 faa1 	bl	8000c38 <__aeabi_uldivmod>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d730 <UART_SetConfig+0x2d4>)
 800d6fc:	fba3 1302 	umull	r1, r3, r3, r2
 800d700:	095b      	lsrs	r3, r3, #5
 800d702:	2164      	movs	r1, #100	@ 0x64
 800d704:	fb01 f303 	mul.w	r3, r1, r3
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	3332      	adds	r3, #50	@ 0x32
 800d70e:	4a08      	ldr	r2, [pc, #32]	@ (800d730 <UART_SetConfig+0x2d4>)
 800d710:	fba2 2303 	umull	r2, r3, r2, r3
 800d714:	095b      	lsrs	r3, r3, #5
 800d716:	f003 0207 	and.w	r2, r3, #7
 800d71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4422      	add	r2, r4
 800d722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d724:	e106      	b.n	800d934 <UART_SetConfig+0x4d8>
 800d726:	bf00      	nop
 800d728:	40011000 	.word	0x40011000
 800d72c:	40011400 	.word	0x40011400
 800d730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d738:	2200      	movs	r2, #0
 800d73a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d73e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d746:	4642      	mov	r2, r8
 800d748:	464b      	mov	r3, r9
 800d74a:	1891      	adds	r1, r2, r2
 800d74c:	6239      	str	r1, [r7, #32]
 800d74e:	415b      	adcs	r3, r3
 800d750:	627b      	str	r3, [r7, #36]	@ 0x24
 800d752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d756:	4641      	mov	r1, r8
 800d758:	1854      	adds	r4, r2, r1
 800d75a:	4649      	mov	r1, r9
 800d75c:	eb43 0501 	adc.w	r5, r3, r1
 800d760:	f04f 0200 	mov.w	r2, #0
 800d764:	f04f 0300 	mov.w	r3, #0
 800d768:	00eb      	lsls	r3, r5, #3
 800d76a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d76e:	00e2      	lsls	r2, r4, #3
 800d770:	4614      	mov	r4, r2
 800d772:	461d      	mov	r5, r3
 800d774:	4643      	mov	r3, r8
 800d776:	18e3      	adds	r3, r4, r3
 800d778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d77c:	464b      	mov	r3, r9
 800d77e:	eb45 0303 	adc.w	r3, r5, r3
 800d782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d796:	f04f 0200 	mov.w	r2, #0
 800d79a:	f04f 0300 	mov.w	r3, #0
 800d79e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	008b      	lsls	r3, r1, #2
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	008a      	lsls	r2, r1, #2
 800d7b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d7b4:	f7f3 fa40 	bl	8000c38 <__aeabi_uldivmod>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4b60      	ldr	r3, [pc, #384]	@ (800d940 <UART_SetConfig+0x4e4>)
 800d7be:	fba3 2302 	umull	r2, r3, r3, r2
 800d7c2:	095b      	lsrs	r3, r3, #5
 800d7c4:	011c      	lsls	r4, r3, #4
 800d7c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d7d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d7d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d7d8:	4642      	mov	r2, r8
 800d7da:	464b      	mov	r3, r9
 800d7dc:	1891      	adds	r1, r2, r2
 800d7de:	61b9      	str	r1, [r7, #24]
 800d7e0:	415b      	adcs	r3, r3
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d7e8:	4641      	mov	r1, r8
 800d7ea:	1851      	adds	r1, r2, r1
 800d7ec:	6139      	str	r1, [r7, #16]
 800d7ee:	4649      	mov	r1, r9
 800d7f0:	414b      	adcs	r3, r1
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	f04f 0200 	mov.w	r2, #0
 800d7f8:	f04f 0300 	mov.w	r3, #0
 800d7fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d800:	4659      	mov	r1, fp
 800d802:	00cb      	lsls	r3, r1, #3
 800d804:	4651      	mov	r1, sl
 800d806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d80a:	4651      	mov	r1, sl
 800d80c:	00ca      	lsls	r2, r1, #3
 800d80e:	4610      	mov	r0, r2
 800d810:	4619      	mov	r1, r3
 800d812:	4603      	mov	r3, r0
 800d814:	4642      	mov	r2, r8
 800d816:	189b      	adds	r3, r3, r2
 800d818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d81c:	464b      	mov	r3, r9
 800d81e:	460a      	mov	r2, r1
 800d820:	eb42 0303 	adc.w	r3, r2, r3
 800d824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d832:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d834:	f04f 0200 	mov.w	r2, #0
 800d838:	f04f 0300 	mov.w	r3, #0
 800d83c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d840:	4649      	mov	r1, r9
 800d842:	008b      	lsls	r3, r1, #2
 800d844:	4641      	mov	r1, r8
 800d846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d84a:	4641      	mov	r1, r8
 800d84c:	008a      	lsls	r2, r1, #2
 800d84e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d852:	f7f3 f9f1 	bl	8000c38 <__aeabi_uldivmod>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	4611      	mov	r1, r2
 800d85c:	4b38      	ldr	r3, [pc, #224]	@ (800d940 <UART_SetConfig+0x4e4>)
 800d85e:	fba3 2301 	umull	r2, r3, r3, r1
 800d862:	095b      	lsrs	r3, r3, #5
 800d864:	2264      	movs	r2, #100	@ 0x64
 800d866:	fb02 f303 	mul.w	r3, r2, r3
 800d86a:	1acb      	subs	r3, r1, r3
 800d86c:	011b      	lsls	r3, r3, #4
 800d86e:	3332      	adds	r3, #50	@ 0x32
 800d870:	4a33      	ldr	r2, [pc, #204]	@ (800d940 <UART_SetConfig+0x4e4>)
 800d872:	fba2 2303 	umull	r2, r3, r2, r3
 800d876:	095b      	lsrs	r3, r3, #5
 800d878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d87c:	441c      	add	r4, r3
 800d87e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d882:	2200      	movs	r2, #0
 800d884:	673b      	str	r3, [r7, #112]	@ 0x70
 800d886:	677a      	str	r2, [r7, #116]	@ 0x74
 800d888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d88c:	4642      	mov	r2, r8
 800d88e:	464b      	mov	r3, r9
 800d890:	1891      	adds	r1, r2, r2
 800d892:	60b9      	str	r1, [r7, #8]
 800d894:	415b      	adcs	r3, r3
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d89c:	4641      	mov	r1, r8
 800d89e:	1851      	adds	r1, r2, r1
 800d8a0:	6039      	str	r1, [r7, #0]
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	414b      	adcs	r3, r1
 800d8a6:	607b      	str	r3, [r7, #4]
 800d8a8:	f04f 0200 	mov.w	r2, #0
 800d8ac:	f04f 0300 	mov.w	r3, #0
 800d8b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d8b4:	4659      	mov	r1, fp
 800d8b6:	00cb      	lsls	r3, r1, #3
 800d8b8:	4651      	mov	r1, sl
 800d8ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d8be:	4651      	mov	r1, sl
 800d8c0:	00ca      	lsls	r2, r1, #3
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	4642      	mov	r2, r8
 800d8ca:	189b      	adds	r3, r3, r2
 800d8cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8ce:	464b      	mov	r3, r9
 800d8d0:	460a      	mov	r2, r1
 800d8d2:	eb42 0303 	adc.w	r3, r2, r3
 800d8d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8e2:	667a      	str	r2, [r7, #100]	@ 0x64
 800d8e4:	f04f 0200 	mov.w	r2, #0
 800d8e8:	f04f 0300 	mov.w	r3, #0
 800d8ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	008b      	lsls	r3, r1, #2
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8fa:	4641      	mov	r1, r8
 800d8fc:	008a      	lsls	r2, r1, #2
 800d8fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d902:	f7f3 f999 	bl	8000c38 <__aeabi_uldivmod>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4b0d      	ldr	r3, [pc, #52]	@ (800d940 <UART_SetConfig+0x4e4>)
 800d90c:	fba3 1302 	umull	r1, r3, r3, r2
 800d910:	095b      	lsrs	r3, r3, #5
 800d912:	2164      	movs	r1, #100	@ 0x64
 800d914:	fb01 f303 	mul.w	r3, r1, r3
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	011b      	lsls	r3, r3, #4
 800d91c:	3332      	adds	r3, #50	@ 0x32
 800d91e:	4a08      	ldr	r2, [pc, #32]	@ (800d940 <UART_SetConfig+0x4e4>)
 800d920:	fba2 2303 	umull	r2, r3, r2, r3
 800d924:	095b      	lsrs	r3, r3, #5
 800d926:	f003 020f 	and.w	r2, r3, #15
 800d92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4422      	add	r2, r4
 800d932:	609a      	str	r2, [r3, #8]
}
 800d934:	bf00      	nop
 800d936:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d93a:	46bd      	mov	sp, r7
 800d93c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d940:	51eb851f 	.word	0x51eb851f

0800d944 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d944:	b084      	sub	sp, #16
 800d946:	b480      	push	{r7}
 800d948:	b085      	sub	sp, #20
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	f107 001c 	add.w	r0, r7, #28
 800d952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d95a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d95c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d95e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d962:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d966:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d96a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d96e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	4313      	orrs	r3, r2
 800d974:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d97e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	431a      	orrs	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	b004      	add	sp, #16
 800d998:	4770      	bx	lr

0800d99a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b083      	sub	sp, #12
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d9d6:	b480      	push	{r7}
 800d9d8:	b083      	sub	sp, #12
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2203      	movs	r2, #3
 800d9e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f003 0303 	and.w	r3, r3, #3
}
 800da02:	4618      	mov	r0, r3
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da2c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800da32:	431a      	orrs	r2, r3
                       Command->CPSM);
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800da38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	4313      	orrs	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800da48:	f023 030f 	bic.w	r3, r3, #15
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	431a      	orrs	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3714      	adds	r7, #20
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800da62:	b480      	push	{r7}
 800da64:	b083      	sub	sp, #12
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	b2db      	uxtb	r3, r3
}
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	3314      	adds	r3, #20
 800da8a:	461a      	mov	r2, r3
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	4413      	add	r3, r2
 800da90:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
}  
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b085      	sub	sp, #20
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dac8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dace:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dad4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	4313      	orrs	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	431a      	orrs	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800daec:	2300      	movs	r3, #0

}
 800daee:	4618      	mov	r0, r3
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b088      	sub	sp, #32
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db08:	2310      	movs	r3, #16
 800db0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db0c:	2340      	movs	r3, #64	@ 0x40
 800db0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db10:	2300      	movs	r3, #0
 800db12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db1a:	f107 0308 	add.w	r3, r7, #8
 800db1e:	4619      	mov	r1, r3
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7ff ff74 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800db26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db2a:	2110      	movs	r1, #16
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f9d7 	bl	800dee0 <SDMMC_GetCmdResp1>
 800db32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db34:	69fb      	ldr	r3, [r7, #28]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3720      	adds	r7, #32
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b088      	sub	sp, #32
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800db4c:	2311      	movs	r3, #17
 800db4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db50:	2340      	movs	r3, #64	@ 0x40
 800db52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db54:	2300      	movs	r3, #0
 800db56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db5e:	f107 0308 	add.w	r3, r7, #8
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff52 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800db6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db6e:	2111      	movs	r1, #17
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 f9b5 	bl	800dee0 <SDMMC_GetCmdResp1>
 800db76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db78:	69fb      	ldr	r3, [r7, #28]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3720      	adds	r7, #32
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b088      	sub	sp, #32
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800db90:	2312      	movs	r3, #18
 800db92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db94:	2340      	movs	r3, #64	@ 0x40
 800db96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db98:	2300      	movs	r3, #0
 800db9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dba0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dba2:	f107 0308 	add.w	r3, r7, #8
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff ff30 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dbae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbb2:	2112      	movs	r1, #18
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f993 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dbba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbbc:	69fb      	ldr	r3, [r7, #28]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b088      	sub	sp, #32
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dbd4:	2318      	movs	r3, #24
 800dbd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbd8:	2340      	movs	r3, #64	@ 0x40
 800dbda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbe6:	f107 0308 	add.w	r3, r7, #8
 800dbea:	4619      	mov	r1, r3
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff ff0e 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dbf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbf6:	2118      	movs	r1, #24
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f971 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dbfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc00:	69fb      	ldr	r3, [r7, #28]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3720      	adds	r7, #32
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b088      	sub	sp, #32
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dc18:	2319      	movs	r3, #25
 800dc1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc1c:	2340      	movs	r3, #64	@ 0x40
 800dc1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc20:	2300      	movs	r3, #0
 800dc22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc2a:	f107 0308 	add.w	r3, r7, #8
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff feec 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dc36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc3a:	2119      	movs	r1, #25
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f94f 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dc42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc44:	69fb      	ldr	r3, [r7, #28]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3720      	adds	r7, #32
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
	...

0800dc50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dc5c:	230c      	movs	r3, #12
 800dc5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc60:	2340      	movs	r3, #64	@ 0x40
 800dc62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc64:	2300      	movs	r3, #0
 800dc66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc6e:	f107 0308 	add.w	r3, r7, #8
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff feca 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dc7a:	4a05      	ldr	r2, [pc, #20]	@ (800dc90 <SDMMC_CmdStopTransfer+0x40>)
 800dc7c:	210c      	movs	r1, #12
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f92e 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dc84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc86:	69fb      	ldr	r3, [r7, #28]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3720      	adds	r7, #32
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	05f5e100 	.word	0x05f5e100

0800dc94 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	@ 0x28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dca4:	2307      	movs	r3, #7
 800dca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dca8:	2340      	movs	r3, #64	@ 0x40
 800dcaa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcac:	2300      	movs	r3, #0
 800dcae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcb4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcb6:	f107 0310 	add.w	r3, r7, #16
 800dcba:	4619      	mov	r1, r3
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff fea6 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dcc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcc6:	2107      	movs	r1, #7
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 f909 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dcce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3728      	adds	r7, #40	@ 0x28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b088      	sub	sp, #32
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dce2:	2300      	movs	r3, #0
 800dce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dcea:	2300      	movs	r3, #0
 800dcec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff fe85 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fb23 	bl	800e350 <SDMMC_GetCmdError>
 800dd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd0c:	69fb      	ldr	r3, [r7, #28]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3720      	adds	r7, #32
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b088      	sub	sp, #32
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dd1e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800dd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dd24:	2308      	movs	r3, #8
 800dd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd28:	2340      	movs	r3, #64	@ 0x40
 800dd2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd36:	f107 0308 	add.w	r3, r7, #8
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff fe66 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fab6 	bl	800e2b4 <SDMMC_GetCmdResp7>
 800dd48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd4a:	69fb      	ldr	r3, [r7, #28]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3720      	adds	r7, #32
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b088      	sub	sp, #32
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dd62:	2337      	movs	r3, #55	@ 0x37
 800dd64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd66:	2340      	movs	r3, #64	@ 0x40
 800dd68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd74:	f107 0308 	add.w	r3, r7, #8
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff fe47 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dd80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd84:	2137      	movs	r1, #55	@ 0x37
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f8aa 	bl	800dee0 <SDMMC_GetCmdResp1>
 800dd8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3720      	adds	r7, #32
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dda8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ddae:	2329      	movs	r3, #41	@ 0x29
 800ddb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddb2:	2340      	movs	r3, #64	@ 0x40
 800ddb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddc0:	f107 0308 	add.w	r3, r7, #8
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fe21 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f9bd 	bl	800e14c <SDMMC_GetCmdResp3>
 800ddd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b088      	sub	sp, #32
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dde6:	2300      	movs	r3, #0
 800dde8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ddea:	2302      	movs	r3, #2
 800ddec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ddee:	23c0      	movs	r3, #192	@ 0xc0
 800ddf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddfc:	f107 0308 	add.w	r3, r7, #8
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7ff fe03 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f957 	bl	800e0bc <SDMMC_GetCmdResp2>
 800de0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de10:	69fb      	ldr	r3, [r7, #28]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3720      	adds	r7, #32
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b088      	sub	sp, #32
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800de28:	2309      	movs	r3, #9
 800de2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800de2c:	23c0      	movs	r3, #192	@ 0xc0
 800de2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de3a:	f107 0308 	add.w	r3, r7, #8
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff fde4 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f938 	bl	800e0bc <SDMMC_GetCmdResp2>
 800de4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de4e:	69fb      	ldr	r3, [r7, #28]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3720      	adds	r7, #32
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b088      	sub	sp, #32
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de62:	2300      	movs	r3, #0
 800de64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de66:	2303      	movs	r3, #3
 800de68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de6a:	2340      	movs	r3, #64	@ 0x40
 800de6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de6e:	2300      	movs	r3, #0
 800de70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de78:	f107 0308 	add.w	r3, r7, #8
 800de7c:	4619      	mov	r1, r3
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff fdc5 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de84:	683a      	ldr	r2, [r7, #0]
 800de86:	2103      	movs	r1, #3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f99d 	bl	800e1c8 <SDMMC_GetCmdResp6>
 800de8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de90:	69fb      	ldr	r3, [r7, #28]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3720      	adds	r7, #32
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b088      	sub	sp, #32
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dea8:	230d      	movs	r3, #13
 800deaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800deac:	2340      	movs	r3, #64	@ 0x40
 800deae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800deb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800deb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800deba:	f107 0308 	add.w	r3, r7, #8
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff fda4 	bl	800da0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800deca:	210d      	movs	r1, #13
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f807 	bl	800dee0 <SDMMC_GetCmdResp1>
 800ded2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ded4:	69fb      	ldr	r3, [r7, #28]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3720      	adds	r7, #32
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	460b      	mov	r3, r1
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800deee:	4b70      	ldr	r3, [pc, #448]	@ (800e0b0 <SDMMC_GetCmdResp1+0x1d0>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a70      	ldr	r2, [pc, #448]	@ (800e0b4 <SDMMC_GetCmdResp1+0x1d4>)
 800def4:	fba2 2303 	umull	r2, r3, r2, r3
 800def8:	0a5a      	lsrs	r2, r3, #9
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	fb02 f303 	mul.w	r3, r2, r3
 800df00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	61fa      	str	r2, [r7, #28]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800df10:	e0c9      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d0ef      	beq.n	800df02 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1ea      	bne.n	800df02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df30:	f003 0304 	and.w	r3, r3, #4
 800df34:	2b00      	cmp	r3, #0
 800df36:	d004      	beq.n	800df42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2204      	movs	r2, #4
 800df3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df3e:	2304      	movs	r3, #4
 800df40:	e0b1      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2201      	movs	r2, #1
 800df52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df54:	2301      	movs	r3, #1
 800df56:	e0a6      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	22c5      	movs	r2, #197	@ 0xc5
 800df5c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f7ff fd7f 	bl	800da62 <SDIO_GetCommandResponse>
 800df64:	4603      	mov	r3, r0
 800df66:	461a      	mov	r2, r3
 800df68:	7afb      	ldrb	r3, [r7, #11]
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d001      	beq.n	800df72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df6e:	2301      	movs	r3, #1
 800df70:	e099      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800df72:	2100      	movs	r1, #0
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff fd81 	bl	800da7c <SDIO_GetResponse>
 800df7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df7c:	697a      	ldr	r2, [r7, #20]
 800df7e:	4b4e      	ldr	r3, [pc, #312]	@ (800e0b8 <SDMMC_GetCmdResp1+0x1d8>)
 800df80:	4013      	ands	r3, r2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df86:	2300      	movs	r3, #0
 800df88:	e08d      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	da02      	bge.n	800df96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df94:	e087      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dfa0:	2340      	movs	r3, #64	@ 0x40
 800dfa2:	e080      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dfae:	2380      	movs	r3, #128	@ 0x80
 800dfb0:	e079      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dfbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfc0:	e071      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfd0:	e069      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfe0:	e061      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dff0:	e059      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e000:	e051      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e00c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e010:	e049      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e01c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e020:	e041      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e02c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e030:	e039      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e03c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e040:	e031      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e04c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e050:	e029      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e05c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e060:	e021      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e06c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e070:	e019      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d002      	beq.n	800e082 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e07c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e080:	e011      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e08c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e090:	e009      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f003 0308 	and.w	r3, r3, #8
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e09c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e0a0:	e001      	b.n	800e0a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20000064 	.word	0x20000064
 800e0b4:	10624dd3 	.word	0x10624dd3
 800e0b8:	fdffe008 	.word	0xfdffe008

0800e0bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0c4:	4b1f      	ldr	r3, [pc, #124]	@ (800e144 <SDMMC_GetCmdResp2+0x88>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a1f      	ldr	r2, [pc, #124]	@ (800e148 <SDMMC_GetCmdResp2+0x8c>)
 800e0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ce:	0a5b      	lsrs	r3, r3, #9
 800e0d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0d4:	fb02 f303 	mul.w	r3, r2, r3
 800e0d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	1e5a      	subs	r2, r3, #1
 800e0de:	60fa      	str	r2, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d102      	bne.n	800e0ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e0e8:	e026      	b.n	800e138 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d0ef      	beq.n	800e0da <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1ea      	bne.n	800e0da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d004      	beq.n	800e11a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2204      	movs	r2, #4
 800e114:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e116:	2304      	movs	r3, #4
 800e118:	e00e      	b.n	800e138 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	2b00      	cmp	r3, #0
 800e124:	d004      	beq.n	800e130 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e12c:	2301      	movs	r3, #1
 800e12e:	e003      	b.n	800e138 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	22c5      	movs	r2, #197	@ 0xc5
 800e134:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	20000064 	.word	0x20000064
 800e148:	10624dd3 	.word	0x10624dd3

0800e14c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e154:	4b1a      	ldr	r3, [pc, #104]	@ (800e1c0 <SDMMC_GetCmdResp3+0x74>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a1a      	ldr	r2, [pc, #104]	@ (800e1c4 <SDMMC_GetCmdResp3+0x78>)
 800e15a:	fba2 2303 	umull	r2, r3, r2, r3
 800e15e:	0a5b      	lsrs	r3, r3, #9
 800e160:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e164:	fb02 f303 	mul.w	r3, r2, r3
 800e168:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	1e5a      	subs	r2, r3, #1
 800e16e:	60fa      	str	r2, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d102      	bne.n	800e17a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e174:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e178:	e01b      	b.n	800e1b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e17e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e186:	2b00      	cmp	r3, #0
 800e188:	d0ef      	beq.n	800e16a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1ea      	bne.n	800e16a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e198:	f003 0304 	and.w	r3, r3, #4
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d004      	beq.n	800e1aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1a6:	2304      	movs	r3, #4
 800e1a8:	e003      	b.n	800e1b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	22c5      	movs	r2, #197	@ 0xc5
 800e1ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e1b0:	2300      	movs	r3, #0
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	20000064 	.word	0x20000064
 800e1c4:	10624dd3 	.word	0x10624dd3

0800e1c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1d6:	4b35      	ldr	r3, [pc, #212]	@ (800e2ac <SDMMC_GetCmdResp6+0xe4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a35      	ldr	r2, [pc, #212]	@ (800e2b0 <SDMMC_GetCmdResp6+0xe8>)
 800e1dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e1e0:	0a5b      	lsrs	r3, r3, #9
 800e1e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1e6:	fb02 f303 	mul.w	r3, r2, r3
 800e1ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	1e5a      	subs	r2, r3, #1
 800e1f0:	61fa      	str	r2, [r7, #28]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d102      	bne.n	800e1fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e1fa:	e052      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e200:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0ef      	beq.n	800e1ec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1ea      	bne.n	800e1ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e21a:	f003 0304 	and.w	r3, r3, #4
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d004      	beq.n	800e22c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2204      	movs	r2, #4
 800e226:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e228:	2304      	movs	r3, #4
 800e22a:	e03a      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e230:	f003 0301 	and.w	r3, r3, #1
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2201      	movs	r2, #1
 800e23c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e23e:	2301      	movs	r3, #1
 800e240:	e02f      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7ff fc0d 	bl	800da62 <SDIO_GetCommandResponse>
 800e248:	4603      	mov	r3, r0
 800e24a:	461a      	mov	r2, r3
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	4293      	cmp	r3, r2
 800e250:	d001      	beq.n	800e256 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e252:	2301      	movs	r3, #1
 800e254:	e025      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	22c5      	movs	r2, #197	@ 0xc5
 800e25a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e25c:	2100      	movs	r1, #0
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7ff fc0c 	bl	800da7c <SDIO_GetResponse>
 800e264:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d106      	bne.n	800e27e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	0c1b      	lsrs	r3, r3, #16
 800e274:	b29a      	uxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e011      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e288:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e28c:	e009      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e29c:	e001      	b.n	800e2a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e29e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20000064 	.word	0x20000064
 800e2b0:	10624dd3 	.word	0x10624dd3

0800e2b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2bc:	4b22      	ldr	r3, [pc, #136]	@ (800e348 <SDMMC_GetCmdResp7+0x94>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a22      	ldr	r2, [pc, #136]	@ (800e34c <SDMMC_GetCmdResp7+0x98>)
 800e2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2c6:	0a5b      	lsrs	r3, r3, #9
 800e2c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2cc:	fb02 f303 	mul.w	r3, r2, r3
 800e2d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	1e5a      	subs	r2, r3, #1
 800e2d6:	60fa      	str	r2, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e2e0:	e02c      	b.n	800e33c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d0ef      	beq.n	800e2d2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1ea      	bne.n	800e2d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e300:	f003 0304 	and.w	r3, r3, #4
 800e304:	2b00      	cmp	r3, #0
 800e306:	d004      	beq.n	800e312 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2204      	movs	r2, #4
 800e30c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e30e:	2304      	movs	r3, #4
 800e310:	e014      	b.n	800e33c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e316:	f003 0301 	and.w	r3, r3, #1
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d004      	beq.n	800e328 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2201      	movs	r2, #1
 800e322:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e324:	2301      	movs	r3, #1
 800e326:	e009      	b.n	800e33c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e32c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2240      	movs	r2, #64	@ 0x40
 800e338:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e33a:	2300      	movs	r3, #0
  
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	20000064 	.word	0x20000064
 800e34c:	10624dd3 	.word	0x10624dd3

0800e350 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e358:	4b11      	ldr	r3, [pc, #68]	@ (800e3a0 <SDMMC_GetCmdError+0x50>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a11      	ldr	r2, [pc, #68]	@ (800e3a4 <SDMMC_GetCmdError+0x54>)
 800e35e:	fba2 2303 	umull	r2, r3, r2, r3
 800e362:	0a5b      	lsrs	r3, r3, #9
 800e364:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e368:	fb02 f303 	mul.w	r3, r2, r3
 800e36c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	1e5a      	subs	r2, r3, #1
 800e372:	60fa      	str	r2, [r7, #12]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d102      	bne.n	800e37e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e378:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e37c:	e009      	b.n	800e392 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e386:	2b00      	cmp	r3, #0
 800e388:	d0f1      	beq.n	800e36e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	22c5      	movs	r2, #197	@ 0xc5
 800e38e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e390:	2300      	movs	r3, #0
}
 800e392:	4618      	mov	r0, r3
 800e394:	3714      	adds	r7, #20
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	20000064 	.word	0x20000064
 800e3a4:	10624dd3 	.word	0x10624dd3

0800e3a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e3ac:	4904      	ldr	r1, [pc, #16]	@ (800e3c0 <MX_FATFS_Init+0x18>)
 800e3ae:	4805      	ldr	r0, [pc, #20]	@ (800e3c4 <MX_FATFS_Init+0x1c>)
 800e3b0:	f003 fc02 	bl	8011bb8 <FATFS_LinkDriver>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4b03      	ldr	r3, [pc, #12]	@ (800e3c8 <MX_FATFS_Init+0x20>)
 800e3ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e3bc:	bf00      	nop
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20000c54 	.word	0x20000c54
 800e3c4:	08015adc 	.word	0x08015adc
 800e3c8:	20000c50 	.word	0x20000c50

0800e3cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e3d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e3e6:	f000 f888 	bl	800e4fa <BSP_SD_IsDetected>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d001      	beq.n	800e3f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e005      	b.n	800e400 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e3f4:	4804      	ldr	r0, [pc, #16]	@ (800e408 <BSP_SD_Init+0x2c>)
 800e3f6:	f7fb ff07 	bl	800a208 <HAL_SD_Init>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	20000810 	.word	0x20000810

0800e40c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	68f9      	ldr	r1, [r7, #12]
 800e422:	4806      	ldr	r0, [pc, #24]	@ (800e43c <BSP_SD_ReadBlocks_DMA+0x30>)
 800e424:	f7fb ffa0 	bl	800a368 <HAL_SD_ReadBlocks_DMA>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d001      	beq.n	800e432 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e432:	7dfb      	ldrb	r3, [r7, #23]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	20000810 	.word	0x20000810

0800e440 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	68f9      	ldr	r1, [r7, #12]
 800e456:	4806      	ldr	r0, [pc, #24]	@ (800e470 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e458:	f7fc f868 	bl	800a52c <HAL_SD_WriteBlocks_DMA>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e466:	7dfb      	ldrb	r3, [r7, #23]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3718      	adds	r7, #24
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	20000810 	.word	0x20000810

0800e474 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e478:	4805      	ldr	r0, [pc, #20]	@ (800e490 <BSP_SD_GetCardState+0x1c>)
 800e47a:	f7fc fc9d 	bl	800adb8 <HAL_SD_GetCardState>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b04      	cmp	r3, #4
 800e482:	bf14      	ite	ne
 800e484:	2301      	movne	r3, #1
 800e486:	2300      	moveq	r3, #0
 800e488:	b2db      	uxtb	r3, r3
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	20000810 	.word	0x20000810

0800e494 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e49c:	6879      	ldr	r1, [r7, #4]
 800e49e:	4803      	ldr	r0, [pc, #12]	@ (800e4ac <BSP_SD_GetCardInfo+0x18>)
 800e4a0:	f7fc fc5e 	bl	800ad60 <HAL_SD_GetCardInfo>
}
 800e4a4:	bf00      	nop
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	20000810 	.word	0x20000810

0800e4b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e4b8:	f000 f818 	bl	800e4ec <BSP_SD_AbortCallback>
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e4cc:	f000 f9a8 	bl	800e820 <BSP_SD_WriteCpltCallback>
}
 800e4d0:	bf00      	nop
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e4e0:	f000 f9ac 	bl	800e83c <BSP_SD_ReadCpltCallback>
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0

}
 800e4f0:	bf00      	nop
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b083      	sub	sp, #12
 800e4fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e500:	2301      	movs	r3, #1
 800e502:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	b2db      	uxtb	r3, r3
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e51c:	f003 fca9 	bl	8011e72 <osKernelSysTick>
 800e520:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e522:	e006      	b.n	800e532 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e524:	f7ff ffa6 	bl	800e474 <BSP_SD_GetCardState>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	e009      	b.n	800e546 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e532:	f003 fc9e 	bl	8011e72 <osKernelSysTick>
 800e536:	4602      	mov	r2, r0
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d8f0      	bhi.n	800e524 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e542:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e55a:	4b0b      	ldr	r3, [pc, #44]	@ (800e588 <SD_CheckStatus+0x38>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e560:	f7ff ff88 	bl	800e474 <BSP_SD_GetCardState>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d107      	bne.n	800e57a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e56a:	4b07      	ldr	r3, [pc, #28]	@ (800e588 <SD_CheckStatus+0x38>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	f023 0301 	bic.w	r3, r3, #1
 800e574:	b2da      	uxtb	r2, r3
 800e576:	4b04      	ldr	r3, [pc, #16]	@ (800e588 <SD_CheckStatus+0x38>)
 800e578:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e57a:	4b03      	ldr	r3, [pc, #12]	@ (800e588 <SD_CheckStatus+0x38>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	b2db      	uxtb	r3, r3
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	200000b9 	.word	0x200000b9

0800e58c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	4603      	mov	r3, r0
 800e594:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e596:	4b20      	ldr	r3, [pc, #128]	@ (800e618 <SD_initialize+0x8c>)
 800e598:	2201      	movs	r2, #1
 800e59a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e59c:	f003 fc5d 	bl	8011e5a <osKernelRunning>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d031      	beq.n	800e60a <SD_initialize+0x7e>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e5a6:	f7ff ff19 	bl	800e3dc <BSP_SD_Init>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d107      	bne.n	800e5c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e5b0:	79fb      	ldrb	r3, [r7, #7]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff ffcc 	bl	800e550 <SD_CheckStatus>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	4b16      	ldr	r3, [pc, #88]	@ (800e618 <SD_initialize+0x8c>)
 800e5be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e5c0:	4b15      	ldr	r3, [pc, #84]	@ (800e618 <SD_initialize+0x8c>)
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d01f      	beq.n	800e60a <SD_initialize+0x7e>
    {
      if (SDQueueID == NULL)
 800e5ca:	4b14      	ldr	r3, [pc, #80]	@ (800e61c <SD_initialize+0x90>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10f      	bne.n	800e5f2 <SD_initialize+0x66>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e5d2:	4a13      	ldr	r2, [pc, #76]	@ (800e620 <SD_initialize+0x94>)
 800e5d4:	f107 0308 	add.w	r3, r7, #8
 800e5d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5dc:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e5e0:	f107 0308 	add.w	r3, r7, #8
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f003 fd43 	bl	8012072 <osMessageCreate>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	4a0b      	ldr	r2, [pc, #44]	@ (800e61c <SD_initialize+0x90>)
 800e5f0:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800e5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e61c <SD_initialize+0x90>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d107      	bne.n	800e60a <SD_initialize+0x7e>
      {
        Stat |= STA_NOINIT;
 800e5fa:	4b07      	ldr	r3, [pc, #28]	@ (800e618 <SD_initialize+0x8c>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	f043 0301 	orr.w	r3, r3, #1
 800e604:	b2da      	uxtb	r2, r3
 800e606:	4b04      	ldr	r3, [pc, #16]	@ (800e618 <SD_initialize+0x8c>)
 800e608:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e60a:	4b03      	ldr	r3, [pc, #12]	@ (800e618 <SD_initialize+0x8c>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	b2db      	uxtb	r3, r3
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	200000b9 	.word	0x200000b9
 800e61c:	200010c0 	.word	0x200010c0
 800e620:	080159d8 	.word	0x080159d8

0800e624 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e62e:	79fb      	ldrb	r3, [r7, #7]
 800e630:	4618      	mov	r0, r3
 800e632:	f7ff ff8d 	bl	800e550 <SD_CheckStatus>
 800e636:	4603      	mov	r3, r0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b08a      	sub	sp, #40	@ 0x28
 800e644:	af00      	add	r7, sp, #0
 800e646:	60b9      	str	r1, [r7, #8]
 800e648:	607a      	str	r2, [r7, #4]
 800e64a:	603b      	str	r3, [r7, #0]
 800e64c:	4603      	mov	r3, r0
 800e64e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e656:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e65a:	f7ff ff5b 	bl	800e514 <SD_CheckStatusWithTimeout>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	da02      	bge.n	800e66a <SD_read+0x2a>
  {
    return res;
 800e664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e668:	e032      	b.n	800e6d0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	68b8      	ldr	r0, [r7, #8]
 800e670:	f7ff fecc 	bl	800e40c <BSP_SD_ReadBlocks_DMA>
 800e674:	4603      	mov	r3, r0
 800e676:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800e67a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d124      	bne.n	800e6cc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e682:	4b15      	ldr	r3, [pc, #84]	@ (800e6d8 <SD_read+0x98>)
 800e684:	6819      	ldr	r1, [r3, #0]
 800e686:	f107 0314 	add.w	r3, r7, #20
 800e68a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800e68e:	4618      	mov	r0, r3
 800e690:	f003 fd42 	bl	8012118 <osMessageGet>

    if (event.status == osEventMessage)
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	2b10      	cmp	r3, #16
 800e698:	d118      	bne.n	800e6cc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d115      	bne.n	800e6cc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800e6a0:	f003 fbe7 	bl	8011e72 <osKernelSysTick>
 800e6a4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e6a6:	e008      	b.n	800e6ba <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6a8:	f7ff fee4 	bl	800e474 <BSP_SD_GetCardState>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d103      	bne.n	800e6ba <SD_read+0x7a>
              {
                res = RES_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e6b8:	e008      	b.n	800e6cc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800e6ba:	f003 fbda 	bl	8011e72 <osKernelSysTick>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	6a3b      	ldr	r3, [r7, #32]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d9ed      	bls.n	800e6a8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3728      	adds	r7, #40	@ 0x28
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	200010c0 	.word	0x200010c0

0800e6dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b08a      	sub	sp, #40	@ 0x28
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	607a      	str	r2, [r7, #4]
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e6f2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e6f6:	f7ff ff0d 	bl	800e514 <SD_CheckStatusWithTimeout>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	da02      	bge.n	800e706 <SD_write+0x2a>
  {
    return res;
 800e700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e704:	e02e      	b.n	800e764 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	6879      	ldr	r1, [r7, #4]
 800e70a:	68b8      	ldr	r0, [r7, #8]
 800e70c:	f7ff fe98 	bl	800e440 <BSP_SD_WriteBlocks_DMA>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d124      	bne.n	800e760 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e716:	4b15      	ldr	r3, [pc, #84]	@ (800e76c <SD_write+0x90>)
 800e718:	6819      	ldr	r1, [r3, #0]
 800e71a:	f107 0314 	add.w	r3, r7, #20
 800e71e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800e722:	4618      	mov	r0, r3
 800e724:	f003 fcf8 	bl	8012118 <osMessageGet>

    if (event.status == osEventMessage)
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	2b10      	cmp	r3, #16
 800e72c:	d118      	bne.n	800e760 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b02      	cmp	r3, #2
 800e732:	d115      	bne.n	800e760 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e734:	f003 fb9d 	bl	8011e72 <osKernelSysTick>
 800e738:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e73a:	e008      	b.n	800e74e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e73c:	f7ff fe9a 	bl	800e474 <BSP_SD_GetCardState>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d103      	bne.n	800e74e <SD_write+0x72>
          {
            res = RES_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e74c:	e008      	b.n	800e760 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e74e:	f003 fb90 	bl	8011e72 <osKernelSysTick>
 800e752:	4602      	mov	r2, r0
 800e754:	6a3b      	ldr	r3, [r7, #32]
 800e756:	1ad3      	subs	r3, r2, r3
 800e758:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d9ed      	bls.n	800e73c <SD_write+0x60>
    }

  }
#endif

  return res;
 800e760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e764:	4618      	mov	r0, r3
 800e766:	3728      	adds	r7, #40	@ 0x28
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	200010c0 	.word	0x200010c0

0800e770 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b08c      	sub	sp, #48	@ 0x30
 800e774:	af00      	add	r7, sp, #0
 800e776:	4603      	mov	r3, r0
 800e778:	603a      	str	r2, [r7, #0]
 800e77a:	71fb      	strb	r3, [r7, #7]
 800e77c:	460b      	mov	r3, r1
 800e77e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e786:	4b25      	ldr	r3, [pc, #148]	@ (800e81c <SD_ioctl+0xac>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	f003 0301 	and.w	r3, r3, #1
 800e790:	2b00      	cmp	r3, #0
 800e792:	d001      	beq.n	800e798 <SD_ioctl+0x28>
 800e794:	2303      	movs	r3, #3
 800e796:	e03c      	b.n	800e812 <SD_ioctl+0xa2>

  switch (cmd)
 800e798:	79bb      	ldrb	r3, [r7, #6]
 800e79a:	2b03      	cmp	r3, #3
 800e79c:	d834      	bhi.n	800e808 <SD_ioctl+0x98>
 800e79e:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a4 <SD_ioctl+0x34>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7b5 	.word	0x0800e7b5
 800e7a8:	0800e7bd 	.word	0x0800e7bd
 800e7ac:	0800e7d5 	.word	0x0800e7d5
 800e7b0:	0800e7ef 	.word	0x0800e7ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e7ba:	e028      	b.n	800e80e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7bc:	f107 030c 	add.w	r3, r7, #12
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff fe67 	bl	800e494 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e7c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e7d2:	e01c      	b.n	800e80e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7d4:	f107 030c 	add.w	r3, r7, #12
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fe5b 	bl	800e494 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e7ec:	e00f      	b.n	800e80e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7ee:	f107 030c 	add.w	r3, r7, #12
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff fe4e 	bl	800e494 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7fa:	0a5a      	lsrs	r2, r3, #9
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e806:	e002      	b.n	800e80e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e808:	2304      	movs	r3, #4
 800e80a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e80e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e812:	4618      	mov	r0, r3
 800e814:	3730      	adds	r7, #48	@ 0x30
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	200000b9 	.word	0x200000b9

0800e820 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e824:	4b04      	ldr	r3, [pc, #16]	@ (800e838 <BSP_SD_WriteCpltCallback+0x18>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	2200      	movs	r2, #0
 800e82a:	2102      	movs	r1, #2
 800e82c:	4618      	mov	r0, r3
 800e82e:	f003 fc33 	bl	8012098 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800e832:	bf00      	nop
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	200010c0 	.word	0x200010c0

0800e83c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e840:	4b04      	ldr	r3, [pc, #16]	@ (800e854 <BSP_SD_ReadCpltCallback+0x18>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2200      	movs	r2, #0
 800e846:	2101      	movs	r1, #1
 800e848:	4618      	mov	r0, r3
 800e84a:	f003 fc25 	bl	8012098 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800e84e:	bf00      	nop
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	200010c0 	.word	0x200010c0

0800e858 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	4603      	mov	r3, r0
 800e860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e862:	79fb      	ldrb	r3, [r7, #7]
 800e864:	4a08      	ldr	r2, [pc, #32]	@ (800e888 <disk_status+0x30>)
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	79fa      	ldrb	r2, [r7, #7]
 800e870:	4905      	ldr	r1, [pc, #20]	@ (800e888 <disk_status+0x30>)
 800e872:	440a      	add	r2, r1
 800e874:	7a12      	ldrb	r2, [r2, #8]
 800e876:	4610      	mov	r0, r2
 800e878:	4798      	blx	r3
 800e87a:	4603      	mov	r3, r0
 800e87c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	200010ec 	.word	0x200010ec

0800e88c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d8 <disk_initialize+0x4c>)
 800e89e:	5cd3      	ldrb	r3, [r2, r3]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d114      	bne.n	800e8ce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d8 <disk_initialize+0x4c>)
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	4413      	add	r3, r2
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	79fa      	ldrb	r2, [r7, #7]
 800e8b2:	4909      	ldr	r1, [pc, #36]	@ (800e8d8 <disk_initialize+0x4c>)
 800e8b4:	440a      	add	r2, r1
 800e8b6:	7a12      	ldrb	r2, [r2, #8]
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	4798      	blx	r3
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e8c0:	7bfb      	ldrb	r3, [r7, #15]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d103      	bne.n	800e8ce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	4a03      	ldr	r2, [pc, #12]	@ (800e8d8 <disk_initialize+0x4c>)
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3710      	adds	r7, #16
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	200010ec 	.word	0x200010ec

0800e8dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e8dc:	b590      	push	{r4, r7, lr}
 800e8de:	b087      	sub	sp, #28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60b9      	str	r1, [r7, #8]
 800e8e4:	607a      	str	r2, [r7, #4]
 800e8e6:	603b      	str	r3, [r7, #0]
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	4a0a      	ldr	r2, [pc, #40]	@ (800e918 <disk_read+0x3c>)
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	689c      	ldr	r4, [r3, #8]
 800e8f8:	7bfb      	ldrb	r3, [r7, #15]
 800e8fa:	4a07      	ldr	r2, [pc, #28]	@ (800e918 <disk_read+0x3c>)
 800e8fc:	4413      	add	r3, r2
 800e8fe:	7a18      	ldrb	r0, [r3, #8]
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	68b9      	ldr	r1, [r7, #8]
 800e906:	47a0      	blx	r4
 800e908:	4603      	mov	r3, r0
 800e90a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	bd90      	pop	{r4, r7, pc}
 800e916:	bf00      	nop
 800e918:	200010ec 	.word	0x200010ec

0800e91c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e91c:	b590      	push	{r4, r7, lr}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	4603      	mov	r3, r0
 800e92a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	4a0a      	ldr	r2, [pc, #40]	@ (800e958 <disk_write+0x3c>)
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4413      	add	r3, r2
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	68dc      	ldr	r4, [r3, #12]
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	4a07      	ldr	r2, [pc, #28]	@ (800e958 <disk_write+0x3c>)
 800e93c:	4413      	add	r3, r2
 800e93e:	7a18      	ldrb	r0, [r3, #8]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	68b9      	ldr	r1, [r7, #8]
 800e946:	47a0      	blx	r4
 800e948:	4603      	mov	r3, r0
 800e94a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	371c      	adds	r7, #28
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}
 800e956:	bf00      	nop
 800e958:	200010ec 	.word	0x200010ec

0800e95c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	603a      	str	r2, [r7, #0]
 800e966:	71fb      	strb	r3, [r7, #7]
 800e968:	460b      	mov	r3, r1
 800e96a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e96c:	79fb      	ldrb	r3, [r7, #7]
 800e96e:	4a09      	ldr	r2, [pc, #36]	@ (800e994 <disk_ioctl+0x38>)
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	79fa      	ldrb	r2, [r7, #7]
 800e97a:	4906      	ldr	r1, [pc, #24]	@ (800e994 <disk_ioctl+0x38>)
 800e97c:	440a      	add	r2, r1
 800e97e:	7a10      	ldrb	r0, [r2, #8]
 800e980:	79b9      	ldrb	r1, [r7, #6]
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	4798      	blx	r3
 800e986:	4603      	mov	r3, r0
 800e988:	73fb      	strb	r3, [r7, #15]
  return res;
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	200010ec 	.word	0x200010ec

0800e998 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e9a8:	89fb      	ldrh	r3, [r7, #14]
 800e9aa:	021b      	lsls	r3, r3, #8
 800e9ac:	b21a      	sxth	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	b21b      	sxth	r3, r3
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	b21b      	sxth	r3, r3
 800e9b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e9ba:	89fb      	ldrh	r3, [r7, #14]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	3303      	adds	r3, #3
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	021b      	lsls	r3, r3, #8
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	3202      	adds	r2, #2
 800e9e0:	7812      	ldrb	r2, [r2, #0]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	021b      	lsls	r3, r3, #8
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	7812      	ldrb	r2, [r2, #0]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	021b      	lsls	r3, r3, #8
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea00:	68fb      	ldr	r3, [r7, #12]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	607a      	str	r2, [r7, #4]
 800ea20:	887a      	ldrh	r2, [r7, #2]
 800ea22:	b2d2      	uxtb	r2, r2
 800ea24:	701a      	strb	r2, [r3, #0]
 800ea26:	887b      	ldrh	r3, [r7, #2]
 800ea28:	0a1b      	lsrs	r3, r3, #8
 800ea2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	607a      	str	r2, [r7, #4]
 800ea32:	887a      	ldrh	r2, [r7, #2]
 800ea34:	b2d2      	uxtb	r2, r2
 800ea36:	701a      	strb	r2, [r3, #0]
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	607a      	str	r2, [r7, #4]
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	b2d2      	uxtb	r2, r2
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	0a1b      	lsrs	r3, r3, #8
 800ea5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	1c5a      	adds	r2, r3, #1
 800ea64:	607a      	str	r2, [r7, #4]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	701a      	strb	r2, [r3, #0]
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	0a1b      	lsrs	r3, r3, #8
 800ea70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	701a      	strb	r2, [r3, #0]
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	b2d2      	uxtb	r2, r2
 800ea8e:	701a      	strb	r2, [r3, #0]
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea9c:	b480      	push	{r7}
 800ea9e:	b087      	sub	sp, #28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00d      	beq.n	800ead2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	1c53      	adds	r3, r2, #1
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	1c59      	adds	r1, r3, #1
 800eac0:	6179      	str	r1, [r7, #20]
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	607b      	str	r3, [r7, #4]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1f1      	bne.n	800eab6 <mem_cpy+0x1a>
	}
}
 800ead2:	bf00      	nop
 800ead4:	371c      	adds	r7, #28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eade:	b480      	push	{r7}
 800eae0:	b087      	sub	sp, #28
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	60f8      	str	r0, [r7, #12]
 800eae6:	60b9      	str	r1, [r7, #8]
 800eae8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	617a      	str	r2, [r7, #20]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	607b      	str	r3, [r7, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1f3      	bne.n	800eaee <mem_set+0x10>
}
 800eb06:	bf00      	nop
 800eb08:	bf00      	nop
 800eb0a:	371c      	adds	r7, #28
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eb14:	b480      	push	{r7}
 800eb16:	b089      	sub	sp, #36	@ 0x24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	61fb      	str	r3, [r7, #28]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	1c5a      	adds	r2, r3, #1
 800eb30:	61fa      	str	r2, [r7, #28]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	4619      	mov	r1, r3
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	61ba      	str	r2, [r7, #24]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	1acb      	subs	r3, r1, r3
 800eb40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	607b      	str	r3, [r7, #4]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <mem_cmp+0x40>
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d0eb      	beq.n	800eb2c <mem_cmp+0x18>

	return r;
 800eb54:	697b      	ldr	r3, [r7, #20]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3724      	adds	r7, #36	@ 0x24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eb62:	b480      	push	{r7}
 800eb64:	b083      	sub	sp, #12
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eb6c:	e002      	b.n	800eb74 <chk_chr+0x12>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3301      	adds	r3, #1
 800eb72:	607b      	str	r3, [r7, #4]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d005      	beq.n	800eb88 <chk_chr+0x26>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	461a      	mov	r2, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d1f2      	bne.n	800eb6e <chk_chr+0xc>
	return *str;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d009      	beq.n	800ebba <lock_fs+0x22>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f003 f904 	bl	8011db8 <ff_req_grant>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <lock_fs+0x22>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <lock_fs+0x24>
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00d      	beq.n	800ebf2 <unlock_fs+0x2e>
 800ebd6:	78fb      	ldrb	r3, [r7, #3]
 800ebd8:	2b0c      	cmp	r3, #12
 800ebda:	d00a      	beq.n	800ebf2 <unlock_fs+0x2e>
 800ebdc:	78fb      	ldrb	r3, [r7, #3]
 800ebde:	2b0b      	cmp	r3, #11
 800ebe0:	d007      	beq.n	800ebf2 <unlock_fs+0x2e>
 800ebe2:	78fb      	ldrb	r3, [r7, #3]
 800ebe4:	2b0f      	cmp	r3, #15
 800ebe6:	d004      	beq.n	800ebf2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f003 f8f8 	bl	8011de2 <ff_rel_grant>
	}
}
 800ebf2:	bf00      	nop
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec06:	2300      	movs	r3, #0
 800ec08:	60bb      	str	r3, [r7, #8]
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	e029      	b.n	800ec64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ec10:	4a27      	ldr	r2, [pc, #156]	@ (800ecb0 <chk_lock+0xb4>)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	011b      	lsls	r3, r3, #4
 800ec16:	4413      	add	r3, r2
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d01d      	beq.n	800ec5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec1e:	4a24      	ldr	r2, [pc, #144]	@ (800ecb0 <chk_lock+0xb4>)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	011b      	lsls	r3, r3, #4
 800ec24:	4413      	add	r3, r2
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d116      	bne.n	800ec5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec30:	4a1f      	ldr	r2, [pc, #124]	@ (800ecb0 <chk_lock+0xb4>)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	011b      	lsls	r3, r3, #4
 800ec36:	4413      	add	r3, r2
 800ec38:	3304      	adds	r3, #4
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d10c      	bne.n	800ec5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec44:	4a1a      	ldr	r2, [pc, #104]	@ (800ecb0 <chk_lock+0xb4>)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	011b      	lsls	r3, r3, #4
 800ec4a:	4413      	add	r3, r2
 800ec4c:	3308      	adds	r3, #8
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d102      	bne.n	800ec5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec58:	e007      	b.n	800ec6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3301      	adds	r3, #1
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d9d2      	bls.n	800ec10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b02      	cmp	r3, #2
 800ec6e:	d109      	bne.n	800ec84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d102      	bne.n	800ec7c <chk_lock+0x80>
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d101      	bne.n	800ec80 <chk_lock+0x84>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e010      	b.n	800eca2 <chk_lock+0xa6>
 800ec80:	2312      	movs	r3, #18
 800ec82:	e00e      	b.n	800eca2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d108      	bne.n	800ec9c <chk_lock+0xa0>
 800ec8a:	4a09      	ldr	r2, [pc, #36]	@ (800ecb0 <chk_lock+0xb4>)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	011b      	lsls	r3, r3, #4
 800ec90:	4413      	add	r3, r2
 800ec92:	330c      	adds	r3, #12
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec9a:	d101      	bne.n	800eca0 <chk_lock+0xa4>
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	e000      	b.n	800eca2 <chk_lock+0xa6>
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	200010cc 	.word	0x200010cc

0800ecb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	607b      	str	r3, [r7, #4]
 800ecbe:	e002      	b.n	800ecc6 <enq_lock+0x12>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d806      	bhi.n	800ecda <enq_lock+0x26>
 800eccc:	4a09      	ldr	r2, [pc, #36]	@ (800ecf4 <enq_lock+0x40>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	011b      	lsls	r3, r3, #4
 800ecd2:	4413      	add	r3, r2
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d1f2      	bne.n	800ecc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	bf14      	ite	ne
 800ece0:	2301      	movne	r3, #1
 800ece2:	2300      	moveq	r3, #0
 800ece4:	b2db      	uxtb	r3, r3
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	370c      	adds	r7, #12
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	200010cc 	.word	0x200010cc

0800ecf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed02:	2300      	movs	r3, #0
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	e01f      	b.n	800ed48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ed08:	4a41      	ldr	r2, [pc, #260]	@ (800ee10 <inc_lock+0x118>)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	011b      	lsls	r3, r3, #4
 800ed0e:	4413      	add	r3, r2
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d113      	bne.n	800ed42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ed1a:	4a3d      	ldr	r2, [pc, #244]	@ (800ee10 <inc_lock+0x118>)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	011b      	lsls	r3, r3, #4
 800ed20:	4413      	add	r3, r2
 800ed22:	3304      	adds	r3, #4
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d109      	bne.n	800ed42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ed2e:	4a38      	ldr	r2, [pc, #224]	@ (800ee10 <inc_lock+0x118>)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	011b      	lsls	r3, r3, #4
 800ed34:	4413      	add	r3, r2
 800ed36:	3308      	adds	r3, #8
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d006      	beq.n	800ed50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3301      	adds	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d9dc      	bls.n	800ed08 <inc_lock+0x10>
 800ed4e:	e000      	b.n	800ed52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ed50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d132      	bne.n	800edbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	60fb      	str	r3, [r7, #12]
 800ed5c:	e002      	b.n	800ed64 <inc_lock+0x6c>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3301      	adds	r3, #1
 800ed62:	60fb      	str	r3, [r7, #12]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d806      	bhi.n	800ed78 <inc_lock+0x80>
 800ed6a:	4a29      	ldr	r2, [pc, #164]	@ (800ee10 <inc_lock+0x118>)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	011b      	lsls	r3, r3, #4
 800ed70:	4413      	add	r3, r2
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1f2      	bne.n	800ed5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d101      	bne.n	800ed82 <inc_lock+0x8a>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e040      	b.n	800ee04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	4922      	ldr	r1, [pc, #136]	@ (800ee10 <inc_lock+0x118>)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	011b      	lsls	r3, r3, #4
 800ed8c:	440b      	add	r3, r1
 800ed8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689a      	ldr	r2, [r3, #8]
 800ed94:	491e      	ldr	r1, [pc, #120]	@ (800ee10 <inc_lock+0x118>)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	011b      	lsls	r3, r3, #4
 800ed9a:	440b      	add	r3, r1
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	695a      	ldr	r2, [r3, #20]
 800eda4:	491a      	ldr	r1, [pc, #104]	@ (800ee10 <inc_lock+0x118>)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	011b      	lsls	r3, r3, #4
 800edaa:	440b      	add	r3, r1
 800edac:	3308      	adds	r3, #8
 800edae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800edb0:	4a17      	ldr	r2, [pc, #92]	@ (800ee10 <inc_lock+0x118>)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	011b      	lsls	r3, r3, #4
 800edb6:	4413      	add	r3, r2
 800edb8:	330c      	adds	r3, #12
 800edba:	2200      	movs	r2, #0
 800edbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d009      	beq.n	800edd8 <inc_lock+0xe0>
 800edc4:	4a12      	ldr	r2, [pc, #72]	@ (800ee10 <inc_lock+0x118>)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	4413      	add	r3, r2
 800edcc:	330c      	adds	r3, #12
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <inc_lock+0xe0>
 800edd4:	2300      	movs	r3, #0
 800edd6:	e015      	b.n	800ee04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d108      	bne.n	800edf0 <inc_lock+0xf8>
 800edde:	4a0c      	ldr	r2, [pc, #48]	@ (800ee10 <inc_lock+0x118>)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	011b      	lsls	r3, r3, #4
 800ede4:	4413      	add	r3, r2
 800ede6:	330c      	adds	r3, #12
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	3301      	adds	r3, #1
 800edec:	b29a      	uxth	r2, r3
 800edee:	e001      	b.n	800edf4 <inc_lock+0xfc>
 800edf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edf4:	4906      	ldr	r1, [pc, #24]	@ (800ee10 <inc_lock+0x118>)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	011b      	lsls	r3, r3, #4
 800edfa:	440b      	add	r3, r1
 800edfc:	330c      	adds	r3, #12
 800edfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	3301      	adds	r3, #1
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	200010cc 	.word	0x200010cc

0800ee14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b085      	sub	sp, #20
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	e010      	b.n	800ee44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee22:	4a0d      	ldr	r2, [pc, #52]	@ (800ee58 <clear_lock+0x44>)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	011b      	lsls	r3, r3, #4
 800ee28:	4413      	add	r3, r2
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d105      	bne.n	800ee3e <clear_lock+0x2a>
 800ee32:	4a09      	ldr	r2, [pc, #36]	@ (800ee58 <clear_lock+0x44>)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	011b      	lsls	r3, r3, #4
 800ee38:	4413      	add	r3, r2
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	3301      	adds	r3, #1
 800ee42:	60fb      	str	r3, [r7, #12]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d9eb      	bls.n	800ee22 <clear_lock+0xe>
	}
}
 800ee4a:	bf00      	nop
 800ee4c:	bf00      	nop
 800ee4e:	3714      	adds	r7, #20
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	200010cc 	.word	0x200010cc

0800ee5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	78db      	ldrb	r3, [r3, #3]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d034      	beq.n	800eeda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	7858      	ldrb	r0, [r3, #1]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ee80:	2301      	movs	r3, #1
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	f7ff fd4a 	bl	800e91c <disk_write>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d002      	beq.n	800ee94 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	73fb      	strb	r3, [r7, #15]
 800ee92:	e022      	b.n	800eeda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	1ad2      	subs	r2, r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a1b      	ldr	r3, [r3, #32]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d217      	bcs.n	800eeda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	789b      	ldrb	r3, [r3, #2]
 800eeae:	613b      	str	r3, [r7, #16]
 800eeb0:	e010      	b.n	800eed4 <sync_window+0x78>
					wsect += fs->fsize;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	697a      	ldr	r2, [r7, #20]
 800eeb8:	4413      	add	r3, r2
 800eeba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7858      	ldrb	r0, [r3, #1]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800eec6:	2301      	movs	r3, #1
 800eec8:	697a      	ldr	r2, [r7, #20]
 800eeca:	f7ff fd27 	bl	800e91c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	613b      	str	r3, [r7, #16]
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d8eb      	bhi.n	800eeb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d01b      	beq.n	800ef34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7ff ffad 	bl	800ee5c <sync_window>
 800ef02:	4603      	mov	r3, r0
 800ef04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d113      	bne.n	800ef34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	7858      	ldrb	r0, [r3, #1]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ef16:	2301      	movs	r3, #1
 800ef18:	683a      	ldr	r2, [r7, #0]
 800ef1a:	f7ff fcdf 	bl	800e8dc <disk_read>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d004      	beq.n	800ef2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef24:	f04f 33ff 	mov.w	r3, #4294967295
 800ef28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	683a      	ldr	r2, [r7, #0]
 800ef32:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
	...

0800ef40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f7ff ff87 	bl	800ee5c <sync_window>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ef52:	7bfb      	ldrb	r3, [r7, #15]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d158      	bne.n	800f00a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d148      	bne.n	800eff2 <sync_fs+0xb2>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	791b      	ldrb	r3, [r3, #4]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d144      	bne.n	800eff2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3338      	adds	r3, #56	@ 0x38
 800ef6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef70:	2100      	movs	r1, #0
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff fdb3 	bl	800eade <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3338      	adds	r3, #56	@ 0x38
 800ef7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ef80:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7ff fd42 	bl	800ea0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	3338      	adds	r3, #56	@ 0x38
 800ef8e:	4921      	ldr	r1, [pc, #132]	@ (800f014 <sync_fs+0xd4>)
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff fd57 	bl	800ea44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3338      	adds	r3, #56	@ 0x38
 800ef9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ef9e:	491e      	ldr	r1, [pc, #120]	@ (800f018 <sync_fs+0xd8>)
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff fd4f 	bl	800ea44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	3338      	adds	r3, #56	@ 0x38
 800efaa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	699b      	ldr	r3, [r3, #24]
 800efb2:	4619      	mov	r1, r3
 800efb4:	4610      	mov	r0, r2
 800efb6:	f7ff fd45 	bl	800ea44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3338      	adds	r3, #56	@ 0x38
 800efbe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	4619      	mov	r1, r3
 800efc8:	4610      	mov	r0, r2
 800efca:	f7ff fd3b 	bl	800ea44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7858      	ldrb	r0, [r3, #1]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efe6:	2301      	movs	r3, #1
 800efe8:	f7ff fc98 	bl	800e91c <disk_write>
			fs->fsi_flag = 0;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	785b      	ldrb	r3, [r3, #1]
 800eff6:	2200      	movs	r2, #0
 800eff8:	2100      	movs	r1, #0
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff fcae 	bl	800e95c <disk_ioctl>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <sync_fs+0xca>
 800f006:	2301      	movs	r3, #1
 800f008:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	41615252 	.word	0x41615252
 800f018:	61417272 	.word	0x61417272

0800f01c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	3b02      	subs	r3, #2
 800f02a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	3b02      	subs	r3, #2
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	429a      	cmp	r2, r3
 800f036:	d301      	bcc.n	800f03c <clust2sect+0x20>
 800f038:	2300      	movs	r3, #0
 800f03a:	e008      	b.n	800f04e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	895b      	ldrh	r3, [r3, #10]
 800f040:	461a      	mov	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	fb03 f202 	mul.w	r2, r3, r2
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f04c:	4413      	add	r3, r2
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b086      	sub	sp, #24
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d904      	bls.n	800f07a <get_fat+0x20>
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	69db      	ldr	r3, [r3, #28]
 800f074:	683a      	ldr	r2, [r7, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	d302      	bcc.n	800f080 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f07a:	2301      	movs	r3, #1
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	e08e      	b.n	800f19e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f080:	f04f 33ff 	mov.w	r3, #4294967295
 800f084:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d061      	beq.n	800f152 <get_fat+0xf8>
 800f08e:	2b03      	cmp	r3, #3
 800f090:	dc7b      	bgt.n	800f18a <get_fat+0x130>
 800f092:	2b01      	cmp	r3, #1
 800f094:	d002      	beq.n	800f09c <get_fat+0x42>
 800f096:	2b02      	cmp	r3, #2
 800f098:	d041      	beq.n	800f11e <get_fat+0xc4>
 800f09a:	e076      	b.n	800f18a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	60fb      	str	r3, [r7, #12]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	085b      	lsrs	r3, r3, #1
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	0a5b      	lsrs	r3, r3, #9
 800f0b2:	4413      	add	r3, r2
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	6938      	ldr	r0, [r7, #16]
 800f0b8:	f7ff ff14 	bl	800eee4 <move_window>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d166      	bne.n	800f190 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	1c5a      	adds	r2, r3, #1
 800f0c6:	60fa      	str	r2, [r7, #12]
 800f0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0cc:	693a      	ldr	r2, [r7, #16]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f0d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	0a5b      	lsrs	r3, r3, #9
 800f0de:	4413      	add	r3, r2
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	6938      	ldr	r0, [r7, #16]
 800f0e4:	f7ff fefe 	bl	800eee4 <move_window>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d152      	bne.n	800f194 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f0fc:	021b      	lsls	r3, r3, #8
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	4313      	orrs	r3, r2
 800f102:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d002      	beq.n	800f114 <get_fat+0xba>
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	091b      	lsrs	r3, r3, #4
 800f112:	e002      	b.n	800f11a <get_fat+0xc0>
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f11a:	617b      	str	r3, [r7, #20]
			break;
 800f11c:	e03f      	b.n	800f19e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	0a1b      	lsrs	r3, r3, #8
 800f126:	4413      	add	r3, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	6938      	ldr	r0, [r7, #16]
 800f12c:	f7ff feda 	bl	800eee4 <move_window>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d130      	bne.n	800f198 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	005b      	lsls	r3, r3, #1
 800f140:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f144:	4413      	add	r3, r2
 800f146:	4618      	mov	r0, r3
 800f148:	f7ff fc26 	bl	800e998 <ld_word>
 800f14c:	4603      	mov	r3, r0
 800f14e:	617b      	str	r3, [r7, #20]
			break;
 800f150:	e025      	b.n	800f19e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	09db      	lsrs	r3, r3, #7
 800f15a:	4413      	add	r3, r2
 800f15c:	4619      	mov	r1, r3
 800f15e:	6938      	ldr	r0, [r7, #16]
 800f160:	f7ff fec0 	bl	800eee4 <move_window>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d118      	bne.n	800f19c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f178:	4413      	add	r3, r2
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff fc24 	bl	800e9c8 <ld_dword>
 800f180:	4603      	mov	r3, r0
 800f182:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f186:	617b      	str	r3, [r7, #20]
			break;
 800f188:	e009      	b.n	800f19e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f18a:	2301      	movs	r3, #1
 800f18c:	617b      	str	r3, [r7, #20]
 800f18e:	e006      	b.n	800f19e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f190:	bf00      	nop
 800f192:	e004      	b.n	800f19e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f194:	bf00      	nop
 800f196:	e002      	b.n	800f19e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f198:	bf00      	nop
 800f19a:	e000      	b.n	800f19e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f19c:	bf00      	nop
		}
	}

	return val;
 800f19e:	697b      	ldr	r3, [r7, #20]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	b089      	sub	sp, #36	@ 0x24
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	f240 80d9 	bls.w	800f372 <put_fat+0x1ca>
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	f080 80d3 	bcs.w	800f372 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	f000 8096 	beq.w	800f302 <put_fat+0x15a>
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	f300 80cb 	bgt.w	800f372 <put_fat+0x1ca>
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d002      	beq.n	800f1e6 <put_fat+0x3e>
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d06e      	beq.n	800f2c2 <put_fat+0x11a>
 800f1e4:	e0c5      	b.n	800f372 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	61bb      	str	r3, [r7, #24]
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	085b      	lsrs	r3, r3, #1
 800f1ee:	69ba      	ldr	r2, [r7, #24]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	0a5b      	lsrs	r3, r3, #9
 800f1fc:	4413      	add	r3, r2
 800f1fe:	4619      	mov	r1, r3
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f7ff fe6f 	bl	800eee4 <move_window>
 800f206:	4603      	mov	r3, r0
 800f208:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f20a:	7ffb      	ldrb	r3, [r7, #31]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f040 80a9 	bne.w	800f364 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	1c59      	adds	r1, r3, #1
 800f21c:	61b9      	str	r1, [r7, #24]
 800f21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f222:	4413      	add	r3, r2
 800f224:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00d      	beq.n	800f24c <put_fat+0xa4>
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	b25b      	sxtb	r3, r3
 800f236:	f003 030f 	and.w	r3, r3, #15
 800f23a:	b25a      	sxtb	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	011b      	lsls	r3, r3, #4
 800f242:	b25b      	sxtb	r3, r3
 800f244:	4313      	orrs	r3, r2
 800f246:	b25b      	sxtb	r3, r3
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	e001      	b.n	800f250 <put_fat+0xa8>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	697a      	ldr	r2, [r7, #20]
 800f252:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2201      	movs	r2, #1
 800f258:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	0a5b      	lsrs	r3, r3, #9
 800f262:	4413      	add	r3, r2
 800f264:	4619      	mov	r1, r3
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f7ff fe3c 	bl	800eee4 <move_window>
 800f26c:	4603      	mov	r3, r0
 800f26e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f270:	7ffb      	ldrb	r3, [r7, #31]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d178      	bne.n	800f368 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f282:	4413      	add	r3, r2
 800f284:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f003 0301 	and.w	r3, r3, #1
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d003      	beq.n	800f298 <put_fat+0xf0>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	091b      	lsrs	r3, r3, #4
 800f294:	b2db      	uxtb	r3, r3
 800f296:	e00e      	b.n	800f2b6 <put_fat+0x10e>
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	b25b      	sxtb	r3, r3
 800f29e:	f023 030f 	bic.w	r3, r3, #15
 800f2a2:	b25a      	sxtb	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	0a1b      	lsrs	r3, r3, #8
 800f2a8:	b25b      	sxtb	r3, r3
 800f2aa:	f003 030f 	and.w	r3, r3, #15
 800f2ae:	b25b      	sxtb	r3, r3
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	b25b      	sxtb	r3, r3
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	70da      	strb	r2, [r3, #3]
			break;
 800f2c0:	e057      	b.n	800f372 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	0a1b      	lsrs	r3, r3, #8
 800f2ca:	4413      	add	r3, r2
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f7ff fe08 	bl	800eee4 <move_window>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2d8:	7ffb      	ldrb	r3, [r7, #31]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d146      	bne.n	800f36c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f2ec:	4413      	add	r3, r2
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	b292      	uxth	r2, r2
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff fb8a 	bl	800ea0e <st_word>
			fs->wflag = 1;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	70da      	strb	r2, [r3, #3]
			break;
 800f300:	e037      	b.n	800f372 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	09db      	lsrs	r3, r3, #7
 800f30a:	4413      	add	r3, r2
 800f30c:	4619      	mov	r1, r3
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f7ff fde8 	bl	800eee4 <move_window>
 800f314:	4603      	mov	r3, r0
 800f316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f318:	7ffb      	ldrb	r3, [r7, #31]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d128      	bne.n	800f370 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f332:	4413      	add	r3, r2
 800f334:	4618      	mov	r0, r3
 800f336:	f7ff fb47 	bl	800e9c8 <ld_dword>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f340:	4323      	orrs	r3, r4
 800f342:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f352:	4413      	add	r3, r2
 800f354:	6879      	ldr	r1, [r7, #4]
 800f356:	4618      	mov	r0, r3
 800f358:	f7ff fb74 	bl	800ea44 <st_dword>
			fs->wflag = 1;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2201      	movs	r2, #1
 800f360:	70da      	strb	r2, [r3, #3]
			break;
 800f362:	e006      	b.n	800f372 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f364:	bf00      	nop
 800f366:	e004      	b.n	800f372 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f368:	bf00      	nop
 800f36a:	e002      	b.n	800f372 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f36c:	bf00      	nop
 800f36e:	e000      	b.n	800f372 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f370:	bf00      	nop
		}
	}
	return res;
 800f372:	7ffb      	ldrb	r3, [r7, #31]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3724      	adds	r7, #36	@ 0x24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd90      	pop	{r4, r7, pc}

0800f37c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b088      	sub	sp, #32
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f388:	2300      	movs	r3, #0
 800f38a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d904      	bls.n	800f3a2 <remove_chain+0x26>
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d301      	bcc.n	800f3a6 <remove_chain+0x2a>
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	e04b      	b.n	800f43e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00c      	beq.n	800f3c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b0:	6879      	ldr	r1, [r7, #4]
 800f3b2:	69b8      	ldr	r0, [r7, #24]
 800f3b4:	f7ff fef8 	bl	800f1a8 <put_fat>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f3bc:	7ffb      	ldrb	r3, [r7, #31]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <remove_chain+0x4a>
 800f3c2:	7ffb      	ldrb	r3, [r7, #31]
 800f3c4:	e03b      	b.n	800f43e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f7ff fe46 	bl	800f05a <get_fat>
 800f3ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d031      	beq.n	800f43a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d101      	bne.n	800f3e0 <remove_chain+0x64>
 800f3dc:	2302      	movs	r3, #2
 800f3de:	e02e      	b.n	800f43e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e6:	d101      	bne.n	800f3ec <remove_chain+0x70>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e028      	b.n	800f43e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	68b9      	ldr	r1, [r7, #8]
 800f3f0:	69b8      	ldr	r0, [r7, #24]
 800f3f2:	f7ff fed9 	bl	800f1a8 <put_fat>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f3fa:	7ffb      	ldrb	r3, [r7, #31]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <remove_chain+0x88>
 800f400:	7ffb      	ldrb	r3, [r7, #31]
 800f402:	e01c      	b.n	800f43e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f404:	69bb      	ldr	r3, [r7, #24]
 800f406:	699a      	ldr	r2, [r3, #24]
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	69db      	ldr	r3, [r3, #28]
 800f40c:	3b02      	subs	r3, #2
 800f40e:	429a      	cmp	r2, r3
 800f410:	d20b      	bcs.n	800f42a <remove_chain+0xae>
			fs->free_clst++;
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	699b      	ldr	r3, [r3, #24]
 800f416:	1c5a      	adds	r2, r3, #1
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	791b      	ldrb	r3, [r3, #4]
 800f420:	f043 0301 	orr.w	r3, r3, #1
 800f424:	b2da      	uxtb	r2, r3
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	429a      	cmp	r2, r3
 800f436:	d3c6      	bcc.n	800f3c6 <remove_chain+0x4a>
 800f438:	e000      	b.n	800f43c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f43a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f43c:	2300      	movs	r3, #0
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b088      	sub	sp, #32
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10d      	bne.n	800f478 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	695b      	ldr	r3, [r3, #20]
 800f460:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f462:	69bb      	ldr	r3, [r7, #24]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d004      	beq.n	800f472 <create_chain+0x2c>
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	69db      	ldr	r3, [r3, #28]
 800f46c:	69ba      	ldr	r2, [r7, #24]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d31b      	bcc.n	800f4aa <create_chain+0x64>
 800f472:	2301      	movs	r3, #1
 800f474:	61bb      	str	r3, [r7, #24]
 800f476:	e018      	b.n	800f4aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff fded 	bl	800f05a <get_fat>
 800f480:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d801      	bhi.n	800f48c <create_chain+0x46>
 800f488:	2301      	movs	r3, #1
 800f48a:	e070      	b.n	800f56e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d101      	bne.n	800f498 <create_chain+0x52>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	e06a      	b.n	800f56e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	69db      	ldr	r3, [r3, #28]
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d201      	bcs.n	800f4a6 <create_chain+0x60>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	e063      	b.n	800f56e <create_chain+0x128>
		scl = clst;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	69db      	ldr	r3, [r3, #28]
 800f4b8:	69fa      	ldr	r2, [r7, #28]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d307      	bcc.n	800f4ce <create_chain+0x88>
				ncl = 2;
 800f4be:	2302      	movs	r3, #2
 800f4c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f4c2:	69fa      	ldr	r2, [r7, #28]
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d901      	bls.n	800f4ce <create_chain+0x88>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e04f      	b.n	800f56e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f4ce:	69f9      	ldr	r1, [r7, #28]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff fdc2 	bl	800f05a <get_fat>
 800f4d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00e      	beq.n	800f4fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d003      	beq.n	800f4ec <create_chain+0xa6>
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ea:	d101      	bne.n	800f4f0 <create_chain+0xaa>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	e03e      	b.n	800f56e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f4f0:	69fa      	ldr	r2, [r7, #28]
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d1da      	bne.n	800f4ae <create_chain+0x68>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	e038      	b.n	800f56e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f4fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f502:	69f9      	ldr	r1, [r7, #28]
 800f504:	6938      	ldr	r0, [r7, #16]
 800f506:	f7ff fe4f 	bl	800f1a8 <put_fat>
 800f50a:	4603      	mov	r3, r0
 800f50c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f50e:	7dfb      	ldrb	r3, [r7, #23]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d109      	bne.n	800f528 <create_chain+0xe2>
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d006      	beq.n	800f528 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f51a:	69fa      	ldr	r2, [r7, #28]
 800f51c:	6839      	ldr	r1, [r7, #0]
 800f51e:	6938      	ldr	r0, [r7, #16]
 800f520:	f7ff fe42 	bl	800f1a8 <put_fat>
 800f524:	4603      	mov	r3, r0
 800f526:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d116      	bne.n	800f55c <create_chain+0x116>
		fs->last_clst = ncl;
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	69fa      	ldr	r2, [r7, #28]
 800f532:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	699a      	ldr	r2, [r3, #24]
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	3b02      	subs	r3, #2
 800f53e:	429a      	cmp	r2, r3
 800f540:	d804      	bhi.n	800f54c <create_chain+0x106>
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	699b      	ldr	r3, [r3, #24]
 800f546:	1e5a      	subs	r2, r3, #1
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	791b      	ldrb	r3, [r3, #4]
 800f550:	f043 0301 	orr.w	r3, r3, #1
 800f554:	b2da      	uxtb	r2, r3
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	711a      	strb	r2, [r3, #4]
 800f55a:	e007      	b.n	800f56c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d102      	bne.n	800f568 <create_chain+0x122>
 800f562:	f04f 33ff 	mov.w	r3, #4294967295
 800f566:	e000      	b.n	800f56a <create_chain+0x124>
 800f568:	2301      	movs	r3, #1
 800f56a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f56c:	69fb      	ldr	r3, [r7, #28]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3720      	adds	r7, #32
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f576:	b480      	push	{r7}
 800f578:	b087      	sub	sp, #28
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f58a:	3304      	adds	r3, #4
 800f58c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	0a5b      	lsrs	r3, r3, #9
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	8952      	ldrh	r2, [r2, #10]
 800f596:	fbb3 f3f2 	udiv	r3, r3, r2
 800f59a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	1d1a      	adds	r2, r3, #4
 800f5a0:	613a      	str	r2, [r7, #16]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d101      	bne.n	800f5b0 <clmt_clust+0x3a>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	e010      	b.n	800f5d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f5b0:	697a      	ldr	r2, [r7, #20]
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d307      	bcc.n	800f5c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f5b8:	697a      	ldr	r2, [r7, #20]
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	617b      	str	r3, [r7, #20]
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5c6:	e7e9      	b.n	800f59c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f5c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	4413      	add	r3, r2
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	371c      	adds	r7, #28
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr

0800f5de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f5f4:	d204      	bcs.n	800f600 <dir_sdi+0x22>
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	f003 031f 	and.w	r3, r3, #31
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d001      	beq.n	800f604 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f600:	2302      	movs	r3, #2
 800f602:	e063      	b.n	800f6cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d106      	bne.n	800f624 <dir_sdi+0x46>
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	d902      	bls.n	800f624 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f622:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10c      	bne.n	800f644 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	095b      	lsrs	r3, r3, #5
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	8912      	ldrh	r2, [r2, #8]
 800f632:	4293      	cmp	r3, r2
 800f634:	d301      	bcc.n	800f63a <dir_sdi+0x5c>
 800f636:	2302      	movs	r3, #2
 800f638:	e048      	b.n	800f6cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	61da      	str	r2, [r3, #28]
 800f642:	e029      	b.n	800f698 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	895b      	ldrh	r3, [r3, #10]
 800f648:	025b      	lsls	r3, r3, #9
 800f64a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f64c:	e019      	b.n	800f682 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6979      	ldr	r1, [r7, #20]
 800f652:	4618      	mov	r0, r3
 800f654:	f7ff fd01 	bl	800f05a <get_fat>
 800f658:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f660:	d101      	bne.n	800f666 <dir_sdi+0x88>
 800f662:	2301      	movs	r3, #1
 800f664:	e032      	b.n	800f6cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d904      	bls.n	800f676 <dir_sdi+0x98>
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	69db      	ldr	r3, [r3, #28]
 800f670:	697a      	ldr	r2, [r7, #20]
 800f672:	429a      	cmp	r2, r3
 800f674:	d301      	bcc.n	800f67a <dir_sdi+0x9c>
 800f676:	2302      	movs	r3, #2
 800f678:	e028      	b.n	800f6cc <dir_sdi+0xee>
			ofs -= csz;
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	429a      	cmp	r2, r3
 800f688:	d2e1      	bcs.n	800f64e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f68a:	6979      	ldr	r1, [r7, #20]
 800f68c:	6938      	ldr	r0, [r7, #16]
 800f68e:	f7ff fcc5 	bl	800f01c <clust2sect>
 800f692:	4602      	mov	r2, r0
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	69db      	ldr	r3, [r3, #28]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d101      	bne.n	800f6aa <dir_sdi+0xcc>
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	e010      	b.n	800f6cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	69da      	ldr	r2, [r3, #28]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	0a5b      	lsrs	r3, r3, #9
 800f6b2:	441a      	add	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6c4:	441a      	add	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	695b      	ldr	r3, [r3, #20]
 800f6e8:	3320      	adds	r3, #32
 800f6ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	69db      	ldr	r3, [r3, #28]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <dir_next+0x28>
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f6fa:	d301      	bcc.n	800f700 <dir_next+0x2c>
 800f6fc:	2304      	movs	r3, #4
 800f6fe:	e0aa      	b.n	800f856 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f706:	2b00      	cmp	r3, #0
 800f708:	f040 8098 	bne.w	800f83c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	69db      	ldr	r3, [r3, #28]
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d10b      	bne.n	800f736 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	095b      	lsrs	r3, r3, #5
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	8912      	ldrh	r2, [r2, #8]
 800f726:	4293      	cmp	r3, r2
 800f728:	f0c0 8088 	bcc.w	800f83c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	61da      	str	r2, [r3, #28]
 800f732:	2304      	movs	r3, #4
 800f734:	e08f      	b.n	800f856 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	0a5b      	lsrs	r3, r3, #9
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	8952      	ldrh	r2, [r2, #10]
 800f73e:	3a01      	subs	r2, #1
 800f740:	4013      	ands	r3, r2
 800f742:	2b00      	cmp	r3, #0
 800f744:	d17a      	bne.n	800f83c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	4619      	mov	r1, r3
 800f74e:	4610      	mov	r0, r2
 800f750:	f7ff fc83 	bl	800f05a <get_fat>
 800f754:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d801      	bhi.n	800f760 <dir_next+0x8c>
 800f75c:	2302      	movs	r3, #2
 800f75e:	e07a      	b.n	800f856 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f766:	d101      	bne.n	800f76c <dir_next+0x98>
 800f768:	2301      	movs	r3, #1
 800f76a:	e074      	b.n	800f856 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	69db      	ldr	r3, [r3, #28]
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	429a      	cmp	r2, r3
 800f774:	d358      	bcc.n	800f828 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d104      	bne.n	800f786 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	61da      	str	r2, [r3, #28]
 800f782:	2304      	movs	r3, #4
 800f784:	e067      	b.n	800f856 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	4619      	mov	r1, r3
 800f78e:	4610      	mov	r0, r2
 800f790:	f7ff fe59 	bl	800f446 <create_chain>
 800f794:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d101      	bne.n	800f7a0 <dir_next+0xcc>
 800f79c:	2307      	movs	r3, #7
 800f79e:	e05a      	b.n	800f856 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d101      	bne.n	800f7aa <dir_next+0xd6>
 800f7a6:	2302      	movs	r3, #2
 800f7a8:	e055      	b.n	800f856 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b0:	d101      	bne.n	800f7b6 <dir_next+0xe2>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e04f      	b.n	800f856 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f7ff fb50 	bl	800ee5c <sync_window>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d001      	beq.n	800f7c6 <dir_next+0xf2>
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e047      	b.n	800f856 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	3338      	adds	r3, #56	@ 0x38
 800f7ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff f984 	bl	800eade <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	613b      	str	r3, [r7, #16]
 800f7da:	6979      	ldr	r1, [r7, #20]
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	f7ff fc1d 	bl	800f01c <clust2sect>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	635a      	str	r2, [r3, #52]	@ 0x34
 800f7e8:	e012      	b.n	800f810 <dir_next+0x13c>
						fs->wflag = 1;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7ff fb33 	bl	800ee5c <sync_window>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d001      	beq.n	800f800 <dir_next+0x12c>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e02a      	b.n	800f856 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	3301      	adds	r3, #1
 800f804:	613b      	str	r3, [r7, #16]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f80a:	1c5a      	adds	r2, r3, #1
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	635a      	str	r2, [r3, #52]	@ 0x34
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	895b      	ldrh	r3, [r3, #10]
 800f814:	461a      	mov	r2, r3
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	4293      	cmp	r3, r2
 800f81a:	d3e6      	bcc.n	800f7ea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	1ad2      	subs	r2, r2, r3
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	697a      	ldr	r2, [r7, #20]
 800f82c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f82e:	6979      	ldr	r1, [r7, #20]
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f7ff fbf3 	bl	800f01c <clust2sect>
 800f836:	4602      	mov	r2, r0
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	68ba      	ldr	r2, [r7, #8]
 800f840:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f84e:	441a      	add	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3718      	adds	r7, #24
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b086      	sub	sp, #24
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f86e:	2100      	movs	r1, #0
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f7ff feb4 	bl	800f5de <dir_sdi>
 800f876:	4603      	mov	r3, r0
 800f878:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f87a:	7dfb      	ldrb	r3, [r7, #23]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d12b      	bne.n	800f8d8 <dir_alloc+0x7a>
		n = 0;
 800f880:	2300      	movs	r3, #0
 800f882:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	69db      	ldr	r3, [r3, #28]
 800f888:	4619      	mov	r1, r3
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f7ff fb2a 	bl	800eee4 <move_window>
 800f890:	4603      	mov	r3, r0
 800f892:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f894:	7dfb      	ldrb	r3, [r7, #23]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d11d      	bne.n	800f8d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2be5      	cmp	r3, #229	@ 0xe5
 800f8a2:	d004      	beq.n	800f8ae <dir_alloc+0x50>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6a1b      	ldr	r3, [r3, #32]
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d107      	bne.n	800f8be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	613b      	str	r3, [r7, #16]
 800f8b4:	693a      	ldr	r2, [r7, #16]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d102      	bne.n	800f8c2 <dir_alloc+0x64>
 800f8bc:	e00c      	b.n	800f8d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f8be:	2300      	movs	r3, #0
 800f8c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff ff05 	bl	800f6d4 <dir_next>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f8ce:	7dfb      	ldrb	r3, [r7, #23]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d0d7      	beq.n	800f884 <dir_alloc+0x26>
 800f8d4:	e000      	b.n	800f8d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f8d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f8d8:	7dfb      	ldrb	r3, [r7, #23]
 800f8da:	2b04      	cmp	r3, #4
 800f8dc:	d101      	bne.n	800f8e2 <dir_alloc+0x84>
 800f8de:	2307      	movs	r3, #7
 800f8e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800f8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	331a      	adds	r3, #26
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff f84c 	bl	800e998 <ld_word>
 800f900:	4603      	mov	r3, r0
 800f902:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b03      	cmp	r3, #3
 800f90a:	d109      	bne.n	800f920 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	3314      	adds	r3, #20
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff f841 	bl	800e998 <ld_word>
 800f916:	4603      	mov	r3, r0
 800f918:	041b      	lsls	r3, r3, #16
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f920:	68fb      	ldr	r3, [r7, #12]
}
 800f922:	4618      	mov	r0, r3
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b084      	sub	sp, #16
 800f92e:	af00      	add	r7, sp, #0
 800f930:	60f8      	str	r0, [r7, #12]
 800f932:	60b9      	str	r1, [r7, #8]
 800f934:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	331a      	adds	r3, #26
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	b292      	uxth	r2, r2
 800f93e:	4611      	mov	r1, r2
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff f864 	bl	800ea0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b03      	cmp	r3, #3
 800f94c:	d109      	bne.n	800f962 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	f103 0214 	add.w	r2, r3, #20
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	0c1b      	lsrs	r3, r3, #16
 800f958:	b29b      	uxth	r3, r3
 800f95a:	4619      	mov	r1, r3
 800f95c:	4610      	mov	r0, r2
 800f95e:	f7ff f856 	bl	800ea0e <st_word>
	}
}
 800f962:	bf00      	nop
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f96c:	b590      	push	{r4, r7, lr}
 800f96e:	b087      	sub	sp, #28
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	331a      	adds	r3, #26
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff f80c 	bl	800e998 <ld_word>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <cmp_lfn+0x1e>
 800f986:	2300      	movs	r3, #0
 800f988:	e059      	b.n	800fa3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f992:	1e5a      	subs	r2, r3, #1
 800f994:	4613      	mov	r3, r2
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	4413      	add	r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	81fb      	strh	r3, [r7, #14]
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	613b      	str	r3, [r7, #16]
 800f9a8:	e033      	b.n	800fa12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f9aa:	4a27      	ldr	r2, [pc, #156]	@ (800fa48 <cmp_lfn+0xdc>)
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	4413      	add	r3, r2
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe ffed 	bl	800e998 <ld_word>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f9c2:	89fb      	ldrh	r3, [r7, #14]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d01a      	beq.n	800f9fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2bfe      	cmp	r3, #254	@ 0xfe
 800f9cc:	d812      	bhi.n	800f9f4 <cmp_lfn+0x88>
 800f9ce:	89bb      	ldrh	r3, [r7, #12]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f002 f93d 	bl	8011c50 <ff_wtoupper>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	461c      	mov	r4, r3
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	1c5a      	adds	r2, r3, #1
 800f9de:	617a      	str	r2, [r7, #20]
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f002 f931 	bl	8011c50 <ff_wtoupper>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	429c      	cmp	r4, r3
 800f9f2:	d001      	beq.n	800f9f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	e022      	b.n	800fa3e <cmp_lfn+0xd2>
			}
			wc = uc;
 800f9f8:	89bb      	ldrh	r3, [r7, #12]
 800f9fa:	81fb      	strh	r3, [r7, #14]
 800f9fc:	e006      	b.n	800fa0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9fe:	89bb      	ldrh	r3, [r7, #12]
 800fa00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d001      	beq.n	800fa0c <cmp_lfn+0xa0>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	e018      	b.n	800fa3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	613b      	str	r3, [r7, #16]
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	2b0c      	cmp	r3, #12
 800fa16:	d9c8      	bls.n	800f9aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d00b      	beq.n	800fa3c <cmp_lfn+0xd0>
 800fa24:	89fb      	ldrh	r3, [r7, #14]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d008      	beq.n	800fa3c <cmp_lfn+0xd0>
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	005b      	lsls	r3, r3, #1
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	4413      	add	r3, r2
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <cmp_lfn+0xd0>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	e000      	b.n	800fa3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fa3c:	2301      	movs	r3, #1
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	371c      	adds	r7, #28
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd90      	pop	{r4, r7, pc}
 800fa46:	bf00      	nop
 800fa48:	08015b70 	.word	0x08015b70

0800fa4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b088      	sub	sp, #32
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	4611      	mov	r1, r2
 800fa58:	461a      	mov	r2, r3
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	71fb      	strb	r3, [r7, #7]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	330d      	adds	r3, #13
 800fa66:	79ba      	ldrb	r2, [r7, #6]
 800fa68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	330b      	adds	r3, #11
 800fa6e:	220f      	movs	r2, #15
 800fa70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	330c      	adds	r3, #12
 800fa76:	2200      	movs	r2, #0
 800fa78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	331a      	adds	r3, #26
 800fa7e:	2100      	movs	r1, #0
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fe ffc4 	bl	800ea0e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fa86:	79fb      	ldrb	r3, [r7, #7]
 800fa88:	1e5a      	subs	r2, r3, #1
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	005b      	lsls	r3, r3, #1
 800fa8e:	4413      	add	r3, r2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4413      	add	r3, r2
 800fa94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	82fb      	strh	r3, [r7, #22]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fa9e:	8afb      	ldrh	r3, [r7, #22]
 800faa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d007      	beq.n	800fab8 <put_lfn+0x6c>
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	61fa      	str	r2, [r7, #28]
 800faae:	005b      	lsls	r3, r3, #1
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	4413      	add	r3, r2
 800fab4:	881b      	ldrh	r3, [r3, #0]
 800fab6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fab8:	4a17      	ldr	r2, [pc, #92]	@ (800fb18 <put_lfn+0xcc>)
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	4413      	add	r3, r2
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	461a      	mov	r2, r3
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	4413      	add	r3, r2
 800fac6:	8afa      	ldrh	r2, [r7, #22]
 800fac8:	4611      	mov	r1, r2
 800faca:	4618      	mov	r0, r3
 800facc:	f7fe ff9f 	bl	800ea0e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fad0:	8afb      	ldrh	r3, [r7, #22]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d102      	bne.n	800fadc <put_lfn+0x90>
 800fad6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fada:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	3301      	adds	r3, #1
 800fae0:	61bb      	str	r3, [r7, #24]
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	2b0c      	cmp	r3, #12
 800fae6:	d9da      	bls.n	800fa9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fae8:	8afb      	ldrh	r3, [r7, #22]
 800faea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800faee:	4293      	cmp	r3, r2
 800faf0:	d006      	beq.n	800fb00 <put_lfn+0xb4>
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	4413      	add	r3, r2
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d103      	bne.n	800fb08 <put_lfn+0xbc>
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	79fa      	ldrb	r2, [r7, #7]
 800fb0c:	701a      	strb	r2, [r3, #0]
}
 800fb0e:	bf00      	nop
 800fb10:	3720      	adds	r7, #32
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	08015b70 	.word	0x08015b70

0800fb1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08c      	sub	sp, #48	@ 0x30
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
 800fb28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fb2a:	220b      	movs	r2, #11
 800fb2c:	68b9      	ldr	r1, [r7, #8]
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f7fe ffb4 	bl	800ea9c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2b05      	cmp	r3, #5
 800fb38:	d92b      	bls.n	800fb92 <gen_numname+0x76>
		sr = seq;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fb3e:	e022      	b.n	800fb86 <gen_numname+0x6a>
			wc = *lfn++;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	1c9a      	adds	r2, r3, #2
 800fb44:	607a      	str	r2, [r7, #4]
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb4e:	e017      	b.n	800fb80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	005a      	lsls	r2, r3, #1
 800fb54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb56:	f003 0301 	and.w	r3, r3, #1
 800fb5a:	4413      	add	r3, r2
 800fb5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fb5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb60:	085b      	lsrs	r3, r3, #1
 800fb62:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d005      	beq.n	800fb7a <gen_numname+0x5e>
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800fb74:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800fb78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb82:	2b0f      	cmp	r3, #15
 800fb84:	d9e4      	bls.n	800fb50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1d8      	bne.n	800fb40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fb92:	2307      	movs	r3, #7
 800fb94:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	f003 030f 	and.w	r3, r3, #15
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	3330      	adds	r3, #48	@ 0x30
 800fba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbaa:	2b39      	cmp	r3, #57	@ 0x39
 800fbac:	d904      	bls.n	800fbb8 <gen_numname+0x9c>
 800fbae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbb2:	3307      	adds	r3, #7
 800fbb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbba:	1e5a      	subs	r2, r3, #1
 800fbbc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fbbe:	3330      	adds	r3, #48	@ 0x30
 800fbc0:	443b      	add	r3, r7
 800fbc2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fbc6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	091b      	lsrs	r3, r3, #4
 800fbce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d1df      	bne.n	800fb96 <gen_numname+0x7a>
	ns[i] = '~';
 800fbd6:	f107 0214 	add.w	r2, r7, #20
 800fbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbdc:	4413      	add	r3, r2
 800fbde:	227e      	movs	r2, #126	@ 0x7e
 800fbe0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbe6:	e002      	b.n	800fbee <gen_numname+0xd2>
 800fbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbea:	3301      	adds	r3, #1
 800fbec:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d205      	bcs.n	800fc02 <gen_numname+0xe6>
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbfa:	4413      	add	r3, r2
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	2b20      	cmp	r3, #32
 800fc00:	d1f2      	bne.n	800fbe8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc04:	2b07      	cmp	r3, #7
 800fc06:	d807      	bhi.n	800fc18 <gen_numname+0xfc>
 800fc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fc0e:	3330      	adds	r3, #48	@ 0x30
 800fc10:	443b      	add	r3, r7
 800fc12:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fc16:	e000      	b.n	800fc1a <gen_numname+0xfe>
 800fc18:	2120      	movs	r1, #32
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	4413      	add	r3, r2
 800fc24:	460a      	mov	r2, r1
 800fc26:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc2a:	2b07      	cmp	r3, #7
 800fc2c:	d9e9      	bls.n	800fc02 <gen_numname+0xe6>
}
 800fc2e:	bf00      	nop
 800fc30:	bf00      	nop
 800fc32:	3730      	adds	r7, #48	@ 0x30
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fc40:	2300      	movs	r3, #0
 800fc42:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fc44:	230b      	movs	r3, #11
 800fc46:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	0852      	lsrs	r2, r2, #1
 800fc4e:	01db      	lsls	r3, r3, #7
 800fc50:	4313      	orrs	r3, r2
 800fc52:	b2da      	uxtb	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	1c59      	adds	r1, r3, #1
 800fc58:	6079      	str	r1, [r7, #4]
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	3b01      	subs	r3, #1
 800fc64:	60bb      	str	r3, [r7, #8]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1ed      	bne.n	800fc48 <sum_sfn+0x10>
	return sum;
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3714      	adds	r7, #20
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b086      	sub	sp, #24
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fc88:	2100      	movs	r1, #0
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff fca7 	bl	800f5de <dir_sdi>
 800fc90:	4603      	mov	r3, r0
 800fc92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <dir_find+0x24>
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	e0a9      	b.n	800fdf2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fc9e:	23ff      	movs	r3, #255	@ 0xff
 800fca0:	753b      	strb	r3, [r7, #20]
 800fca2:	7d3b      	ldrb	r3, [r7, #20]
 800fca4:	757b      	strb	r3, [r7, #21]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	6938      	ldr	r0, [r7, #16]
 800fcb6:	f7ff f915 	bl	800eee4 <move_window>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f040 8090 	bne.w	800fde6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6a1b      	ldr	r3, [r3, #32]
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fcce:	7dbb      	ldrb	r3, [r7, #22]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d102      	bne.n	800fcda <dir_find+0x60>
 800fcd4:	2304      	movs	r3, #4
 800fcd6:	75fb      	strb	r3, [r7, #23]
 800fcd8:	e08a      	b.n	800fdf0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a1b      	ldr	r3, [r3, #32]
 800fcde:	330b      	adds	r3, #11
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fce6:	73fb      	strb	r3, [r7, #15]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7bfa      	ldrb	r2, [r7, #15]
 800fcec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fcee:	7dbb      	ldrb	r3, [r7, #22]
 800fcf0:	2be5      	cmp	r3, #229	@ 0xe5
 800fcf2:	d007      	beq.n	800fd04 <dir_find+0x8a>
 800fcf4:	7bfb      	ldrb	r3, [r7, #15]
 800fcf6:	f003 0308 	and.w	r3, r3, #8
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d009      	beq.n	800fd12 <dir_find+0x98>
 800fcfe:	7bfb      	ldrb	r3, [r7, #15]
 800fd00:	2b0f      	cmp	r3, #15
 800fd02:	d006      	beq.n	800fd12 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fd04:	23ff      	movs	r3, #255	@ 0xff
 800fd06:	757b      	strb	r3, [r7, #21]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd10:	e05e      	b.n	800fdd0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
 800fd14:	2b0f      	cmp	r3, #15
 800fd16:	d136      	bne.n	800fd86 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fd1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d154      	bne.n	800fdd0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fd26:	7dbb      	ldrb	r3, [r7, #22]
 800fd28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00d      	beq.n	800fd4c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6a1b      	ldr	r3, [r3, #32]
 800fd34:	7b5b      	ldrb	r3, [r3, #13]
 800fd36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fd38:	7dbb      	ldrb	r3, [r7, #22]
 800fd3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd3e:	75bb      	strb	r3, [r7, #22]
 800fd40:	7dbb      	ldrb	r3, [r7, #22]
 800fd42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	695a      	ldr	r2, [r3, #20]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fd4c:	7dba      	ldrb	r2, [r7, #22]
 800fd4e:	7d7b      	ldrb	r3, [r7, #21]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d115      	bne.n	800fd80 <dir_find+0x106>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a1b      	ldr	r3, [r3, #32]
 800fd58:	330d      	adds	r3, #13
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	7d3a      	ldrb	r2, [r7, #20]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d10e      	bne.n	800fd80 <dir_find+0x106>
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	68da      	ldr	r2, [r3, #12]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	f7ff fdfd 	bl	800f96c <cmp_lfn>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d003      	beq.n	800fd80 <dir_find+0x106>
 800fd78:	7d7b      	ldrb	r3, [r7, #21]
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	e000      	b.n	800fd82 <dir_find+0x108>
 800fd80:	23ff      	movs	r3, #255	@ 0xff
 800fd82:	757b      	strb	r3, [r7, #21]
 800fd84:	e024      	b.n	800fdd0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fd86:	7d7b      	ldrb	r3, [r7, #21]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d109      	bne.n	800fda0 <dir_find+0x126>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6a1b      	ldr	r3, [r3, #32]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7ff ff51 	bl	800fc38 <sum_sfn>
 800fd96:	4603      	mov	r3, r0
 800fd98:	461a      	mov	r2, r3
 800fd9a:	7d3b      	ldrb	r3, [r7, #20]
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d024      	beq.n	800fdea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fda6:	f003 0301 	and.w	r3, r3, #1
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10a      	bne.n	800fdc4 <dir_find+0x14a>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a18      	ldr	r0, [r3, #32]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	3324      	adds	r3, #36	@ 0x24
 800fdb6:	220b      	movs	r2, #11
 800fdb8:	4619      	mov	r1, r3
 800fdba:	f7fe feab 	bl	800eb14 <mem_cmp>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d014      	beq.n	800fdee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fdc4:	23ff      	movs	r3, #255	@ 0xff
 800fdc6:	757b      	strb	r3, [r7, #21]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f04f 32ff 	mov.w	r2, #4294967295
 800fdce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff fc7e 	bl	800f6d4 <dir_next>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f43f af65 	beq.w	800fcae <dir_find+0x34>
 800fde4:	e004      	b.n	800fdf0 <dir_find+0x176>
		if (res != FR_OK) break;
 800fde6:	bf00      	nop
 800fde8:	e002      	b.n	800fdf0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fdea:	bf00      	nop
 800fdec:	e000      	b.n	800fdf0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fdee:	bf00      	nop

	return res;
 800fdf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3718      	adds	r7, #24
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
	...

0800fdfc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08c      	sub	sp, #48	@ 0x30
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fe10:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <dir_register+0x20>
 800fe18:	2306      	movs	r3, #6
 800fe1a:	e0e0      	b.n	800ffde <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe20:	e002      	b.n	800fe28 <dir_register+0x2c>
 800fe22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe24:	3301      	adds	r3, #1
 800fe26:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	68da      	ldr	r2, [r3, #12]
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2e:	005b      	lsls	r3, r3, #1
 800fe30:	4413      	add	r3, r2
 800fe32:	881b      	ldrh	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1f4      	bne.n	800fe22 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800fe3e:	f107 030c 	add.w	r3, r7, #12
 800fe42:	220c      	movs	r2, #12
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fe fe29 	bl	800ea9c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fe4a:	7dfb      	ldrb	r3, [r7, #23]
 800fe4c:	f003 0301 	and.w	r3, r3, #1
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d032      	beq.n	800feba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2240      	movs	r2, #64	@ 0x40
 800fe58:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe60:	e016      	b.n	800fe90 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	68da      	ldr	r2, [r3, #12]
 800fe6c:	f107 010c 	add.w	r1, r7, #12
 800fe70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe72:	f7ff fe53 	bl	800fb1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7ff feff 	bl	800fc7a <dir_find>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800fe82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d106      	bne.n	800fe98 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fe8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe92:	2b63      	cmp	r3, #99	@ 0x63
 800fe94:	d9e5      	bls.n	800fe62 <dir_register+0x66>
 800fe96:	e000      	b.n	800fe9a <dir_register+0x9e>
			if (res != FR_OK) break;
 800fe98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fe9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe9c:	2b64      	cmp	r3, #100	@ 0x64
 800fe9e:	d101      	bne.n	800fea4 <dir_register+0xa8>
 800fea0:	2307      	movs	r3, #7
 800fea2:	e09c      	b.n	800ffde <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fea8:	2b04      	cmp	r3, #4
 800feaa:	d002      	beq.n	800feb2 <dir_register+0xb6>
 800feac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800feb0:	e095      	b.n	800ffde <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800feb2:	7dfa      	ldrb	r2, [r7, #23]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800feba:	7dfb      	ldrb	r3, [r7, #23]
 800febc:	f003 0302 	and.w	r3, r3, #2
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d007      	beq.n	800fed4 <dir_register+0xd8>
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec6:	330c      	adds	r3, #12
 800fec8:	4a47      	ldr	r2, [pc, #284]	@ (800ffe8 <dir_register+0x1ec>)
 800feca:	fba2 2303 	umull	r2, r3, r2, r3
 800fece:	089b      	lsrs	r3, r3, #2
 800fed0:	3301      	adds	r3, #1
 800fed2:	e000      	b.n	800fed6 <dir_register+0xda>
 800fed4:	2301      	movs	r3, #1
 800fed6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fed8:	6a39      	ldr	r1, [r7, #32]
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7ff fcbf 	bl	800f85e <dir_alloc>
 800fee0:	4603      	mov	r3, r0
 800fee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800feea:	2b00      	cmp	r3, #0
 800feec:	d148      	bne.n	800ff80 <dir_register+0x184>
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	3b01      	subs	r3, #1
 800fef2:	623b      	str	r3, [r7, #32]
 800fef4:	6a3b      	ldr	r3, [r7, #32]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d042      	beq.n	800ff80 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	695a      	ldr	r2, [r3, #20]
 800fefe:	6a3b      	ldr	r3, [r7, #32]
 800ff00:	015b      	lsls	r3, r3, #5
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7ff fb69 	bl	800f5de <dir_sdi>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ff12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d132      	bne.n	800ff80 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	3324      	adds	r3, #36	@ 0x24
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7ff fe8a 	bl	800fc38 <sum_sfn>
 800ff24:	4603      	mov	r3, r0
 800ff26:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	69db      	ldr	r3, [r3, #28]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	69f8      	ldr	r0, [r7, #28]
 800ff30:	f7fe ffd8 	bl	800eee4 <move_window>
 800ff34:	4603      	mov	r3, r0
 800ff36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ff3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d11d      	bne.n	800ff7e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	68d8      	ldr	r0, [r3, #12]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a19      	ldr	r1, [r3, #32]
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	b2da      	uxtb	r2, r3
 800ff4e:	7efb      	ldrb	r3, [r7, #27]
 800ff50:	f7ff fd7c 	bl	800fa4c <put_lfn>
				fs->wflag = 1;
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	2201      	movs	r2, #1
 800ff58:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7ff fbb9 	bl	800f6d4 <dir_next>
 800ff62:	4603      	mov	r3, r0
 800ff64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ff68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d107      	bne.n	800ff80 <dir_register+0x184>
 800ff70:	6a3b      	ldr	r3, [r7, #32]
 800ff72:	3b01      	subs	r3, #1
 800ff74:	623b      	str	r3, [r7, #32]
 800ff76:	6a3b      	ldr	r3, [r7, #32]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1d5      	bne.n	800ff28 <dir_register+0x12c>
 800ff7c:	e000      	b.n	800ff80 <dir_register+0x184>
				if (res != FR_OK) break;
 800ff7e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ff80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d128      	bne.n	800ffda <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	69db      	ldr	r3, [r3, #28]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	69f8      	ldr	r0, [r7, #28]
 800ff90:	f7fe ffa8 	bl	800eee4 <move_window>
 800ff94:	4603      	mov	r3, r0
 800ff96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ff9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d11b      	bne.n	800ffda <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6a1b      	ldr	r3, [r3, #32]
 800ffa6:	2220      	movs	r2, #32
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fe fd97 	bl	800eade <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a18      	ldr	r0, [r3, #32]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3324      	adds	r3, #36	@ 0x24
 800ffb8:	220b      	movs	r2, #11
 800ffba:	4619      	mov	r1, r3
 800ffbc:	f7fe fd6e 	bl	800ea9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	330c      	adds	r3, #12
 800ffcc:	f002 0218 	and.w	r2, r2, #24
 800ffd0:	b2d2      	uxtb	r2, r2
 800ffd2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ffda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3730      	adds	r7, #48	@ 0x30
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	4ec4ec4f 	.word	0x4ec4ec4f

0800ffec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b08a      	sub	sp, #40	@ 0x28
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	613b      	str	r3, [r7, #16]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	60fb      	str	r3, [r7, #12]
 8010004:	2300      	movs	r3, #0
 8010006:	617b      	str	r3, [r7, #20]
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801000c:	69bb      	ldr	r3, [r7, #24]
 801000e:	1c5a      	adds	r2, r3, #1
 8010010:	61ba      	str	r2, [r7, #24]
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	4413      	add	r3, r2
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801001a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801001c:	2b1f      	cmp	r3, #31
 801001e:	d940      	bls.n	80100a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010022:	2b2f      	cmp	r3, #47	@ 0x2f
 8010024:	d006      	beq.n	8010034 <create_name+0x48>
 8010026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010028:	2b5c      	cmp	r3, #92	@ 0x5c
 801002a:	d110      	bne.n	801004e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801002c:	e002      	b.n	8010034 <create_name+0x48>
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	3301      	adds	r3, #1
 8010032:	61bb      	str	r3, [r7, #24]
 8010034:	693a      	ldr	r2, [r7, #16]
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	4413      	add	r3, r2
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2b2f      	cmp	r3, #47	@ 0x2f
 801003e:	d0f6      	beq.n	801002e <create_name+0x42>
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	4413      	add	r3, r2
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	2b5c      	cmp	r3, #92	@ 0x5c
 801004a:	d0f0      	beq.n	801002e <create_name+0x42>
			break;
 801004c:	e02a      	b.n	80100a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	2bfe      	cmp	r3, #254	@ 0xfe
 8010052:	d901      	bls.n	8010058 <create_name+0x6c>
 8010054:	2306      	movs	r3, #6
 8010056:	e17d      	b.n	8010354 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801005a:	b2db      	uxtb	r3, r3
 801005c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801005e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010060:	2101      	movs	r1, #1
 8010062:	4618      	mov	r0, r3
 8010064:	f001 fdb8 	bl	8011bd8 <ff_convert>
 8010068:	4603      	mov	r3, r0
 801006a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801006c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801006e:	2b00      	cmp	r3, #0
 8010070:	d101      	bne.n	8010076 <create_name+0x8a>
 8010072:	2306      	movs	r3, #6
 8010074:	e16e      	b.n	8010354 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010078:	2b7f      	cmp	r3, #127	@ 0x7f
 801007a:	d809      	bhi.n	8010090 <create_name+0xa4>
 801007c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801007e:	4619      	mov	r1, r3
 8010080:	488d      	ldr	r0, [pc, #564]	@ (80102b8 <create_name+0x2cc>)
 8010082:	f7fe fd6e 	bl	800eb62 <chk_chr>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d001      	beq.n	8010090 <create_name+0xa4>
 801008c:	2306      	movs	r3, #6
 801008e:	e161      	b.n	8010354 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	617a      	str	r2, [r7, #20]
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	4413      	add	r3, r2
 801009c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801009e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80100a0:	e7b4      	b.n	801000c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80100a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80100a4:	693a      	ldr	r2, [r7, #16]
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	441a      	add	r2, r3
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80100ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100b0:	2b1f      	cmp	r3, #31
 80100b2:	d801      	bhi.n	80100b8 <create_name+0xcc>
 80100b4:	2304      	movs	r3, #4
 80100b6:	e000      	b.n	80100ba <create_name+0xce>
 80100b8:	2300      	movs	r3, #0
 80100ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80100be:	e011      	b.n	80100e4 <create_name+0xf8>
		w = lfn[di - 1];
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80100c6:	3b01      	subs	r3, #1
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	4413      	add	r3, r2
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80100d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100d4:	2b20      	cmp	r3, #32
 80100d6:	d002      	beq.n	80100de <create_name+0xf2>
 80100d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100da:	2b2e      	cmp	r3, #46	@ 0x2e
 80100dc:	d106      	bne.n	80100ec <create_name+0x100>
		di--;
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	3b01      	subs	r3, #1
 80100e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1ea      	bne.n	80100c0 <create_name+0xd4>
 80100ea:	e000      	b.n	80100ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80100ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	4413      	add	r3, r2
 80100f6:	2200      	movs	r2, #0
 80100f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <create_name+0x118>
 8010100:	2306      	movs	r3, #6
 8010102:	e127      	b.n	8010354 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	3324      	adds	r3, #36	@ 0x24
 8010108:	220b      	movs	r2, #11
 801010a:	2120      	movs	r1, #32
 801010c:	4618      	mov	r0, r3
 801010e:	f7fe fce6 	bl	800eade <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010112:	2300      	movs	r3, #0
 8010114:	61bb      	str	r3, [r7, #24]
 8010116:	e002      	b.n	801011e <create_name+0x132>
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	3301      	adds	r3, #1
 801011c:	61bb      	str	r3, [r7, #24]
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	4413      	add	r3, r2
 8010126:	881b      	ldrh	r3, [r3, #0]
 8010128:	2b20      	cmp	r3, #32
 801012a:	d0f5      	beq.n	8010118 <create_name+0x12c>
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	005b      	lsls	r3, r3, #1
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	4413      	add	r3, r2
 8010134:	881b      	ldrh	r3, [r3, #0]
 8010136:	2b2e      	cmp	r3, #46	@ 0x2e
 8010138:	d0ee      	beq.n	8010118 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d009      	beq.n	8010154 <create_name+0x168>
 8010140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010144:	f043 0303 	orr.w	r3, r3, #3
 8010148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801014c:	e002      	b.n	8010154 <create_name+0x168>
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	3b01      	subs	r3, #1
 8010152:	617b      	str	r3, [r7, #20]
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d009      	beq.n	801016e <create_name+0x182>
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010160:	3b01      	subs	r3, #1
 8010162:	005b      	lsls	r3, r3, #1
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	4413      	add	r3, r2
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	2b2e      	cmp	r3, #46	@ 0x2e
 801016c:	d1ef      	bne.n	801014e <create_name+0x162>

	i = b = 0; ni = 8;
 801016e:	2300      	movs	r3, #0
 8010170:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010174:	2300      	movs	r3, #0
 8010176:	623b      	str	r3, [r7, #32]
 8010178:	2308      	movs	r3, #8
 801017a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	1c5a      	adds	r2, r3, #1
 8010180:	61ba      	str	r2, [r7, #24]
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	4413      	add	r3, r2
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801018c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801018e:	2b00      	cmp	r3, #0
 8010190:	f000 8090 	beq.w	80102b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010196:	2b20      	cmp	r3, #32
 8010198:	d006      	beq.n	80101a8 <create_name+0x1bc>
 801019a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801019c:	2b2e      	cmp	r3, #46	@ 0x2e
 801019e:	d10a      	bne.n	80101b6 <create_name+0x1ca>
 80101a0:	69ba      	ldr	r2, [r7, #24]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d006      	beq.n	80101b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80101a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101ac:	f043 0303 	orr.w	r3, r3, #3
 80101b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101b4:	e07d      	b.n	80102b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80101b6:	6a3a      	ldr	r2, [r7, #32]
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d203      	bcs.n	80101c6 <create_name+0x1da>
 80101be:	69ba      	ldr	r2, [r7, #24]
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d123      	bne.n	801020e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	2b0b      	cmp	r3, #11
 80101ca:	d106      	bne.n	80101da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80101cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101d0:	f043 0303 	orr.w	r3, r3, #3
 80101d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80101d8:	e075      	b.n	80102c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80101da:	69ba      	ldr	r2, [r7, #24]
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d005      	beq.n	80101ee <create_name+0x202>
 80101e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101e6:	f043 0303 	orr.w	r3, r3, #3
 80101ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80101ee:	69ba      	ldr	r2, [r7, #24]
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d866      	bhi.n	80102c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	61bb      	str	r3, [r7, #24]
 80101fa:	2308      	movs	r3, #8
 80101fc:	623b      	str	r3, [r7, #32]
 80101fe:	230b      	movs	r3, #11
 8010200:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010202:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801020c:	e051      	b.n	80102b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801020e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010210:	2b7f      	cmp	r3, #127	@ 0x7f
 8010212:	d914      	bls.n	801023e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010214:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010216:	2100      	movs	r1, #0
 8010218:	4618      	mov	r0, r3
 801021a:	f001 fcdd 	bl	8011bd8 <ff_convert>
 801021e:	4603      	mov	r3, r0
 8010220:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010224:	2b00      	cmp	r3, #0
 8010226:	d004      	beq.n	8010232 <create_name+0x246>
 8010228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801022a:	3b80      	subs	r3, #128	@ 0x80
 801022c:	4a23      	ldr	r2, [pc, #140]	@ (80102bc <create_name+0x2d0>)
 801022e:	5cd3      	ldrb	r3, [r2, r3]
 8010230:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010236:	f043 0302 	orr.w	r3, r3, #2
 801023a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801023e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010240:	2b00      	cmp	r3, #0
 8010242:	d007      	beq.n	8010254 <create_name+0x268>
 8010244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010246:	4619      	mov	r1, r3
 8010248:	481d      	ldr	r0, [pc, #116]	@ (80102c0 <create_name+0x2d4>)
 801024a:	f7fe fc8a 	bl	800eb62 <chk_chr>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d008      	beq.n	8010266 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010254:	235f      	movs	r3, #95	@ 0x5f
 8010256:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801025c:	f043 0303 	orr.w	r3, r3, #3
 8010260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010264:	e01b      	b.n	801029e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010268:	2b40      	cmp	r3, #64	@ 0x40
 801026a:	d909      	bls.n	8010280 <create_name+0x294>
 801026c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801026e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010270:	d806      	bhi.n	8010280 <create_name+0x294>
					b |= 2;
 8010272:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010276:	f043 0302 	orr.w	r3, r3, #2
 801027a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801027e:	e00e      	b.n	801029e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010280:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010282:	2b60      	cmp	r3, #96	@ 0x60
 8010284:	d90b      	bls.n	801029e <create_name+0x2b2>
 8010286:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010288:	2b7a      	cmp	r3, #122	@ 0x7a
 801028a:	d808      	bhi.n	801029e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801028c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010290:	f043 0301 	orr.w	r3, r3, #1
 8010294:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801029a:	3b20      	subs	r3, #32
 801029c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801029e:	6a3b      	ldr	r3, [r7, #32]
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	623a      	str	r2, [r7, #32]
 80102a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80102a6:	b2d1      	uxtb	r1, r2
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	4413      	add	r3, r2
 80102ac:	460a      	mov	r2, r1
 80102ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80102b2:	e763      	b.n	801017c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80102b4:	bf00      	nop
 80102b6:	e006      	b.n	80102c6 <create_name+0x2da>
 80102b8:	080159e0 	.word	0x080159e0
 80102bc:	08015af0 	.word	0x08015af0
 80102c0:	080159ec 	.word	0x080159ec
			if (si > di) break;			/* No extension */
 80102c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80102cc:	2be5      	cmp	r3, #229	@ 0xe5
 80102ce:	d103      	bne.n	80102d8 <create_name+0x2ec>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2205      	movs	r2, #5
 80102d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	2b08      	cmp	r3, #8
 80102dc:	d104      	bne.n	80102e8 <create_name+0x2fc>
 80102de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80102e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102ec:	f003 030c 	and.w	r3, r3, #12
 80102f0:	2b0c      	cmp	r3, #12
 80102f2:	d005      	beq.n	8010300 <create_name+0x314>
 80102f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80102f8:	f003 0303 	and.w	r3, r3, #3
 80102fc:	2b03      	cmp	r3, #3
 80102fe:	d105      	bne.n	801030c <create_name+0x320>
 8010300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010304:	f043 0302 	orr.w	r3, r3, #2
 8010308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801030c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010310:	f003 0302 	and.w	r3, r3, #2
 8010314:	2b00      	cmp	r3, #0
 8010316:	d117      	bne.n	8010348 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801031c:	f003 0303 	and.w	r3, r3, #3
 8010320:	2b01      	cmp	r3, #1
 8010322:	d105      	bne.n	8010330 <create_name+0x344>
 8010324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010328:	f043 0310 	orr.w	r3, r3, #16
 801032c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010334:	f003 030c 	and.w	r3, r3, #12
 8010338:	2b04      	cmp	r3, #4
 801033a:	d105      	bne.n	8010348 <create_name+0x35c>
 801033c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010340:	f043 0308 	orr.w	r3, r3, #8
 8010344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801034e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010352:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010354:	4618      	mov	r0, r3
 8010356:	3728      	adds	r7, #40	@ 0x28
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010370:	e002      	b.n	8010378 <follow_path+0x1c>
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	3301      	adds	r3, #1
 8010376:	603b      	str	r3, [r7, #0]
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	2b2f      	cmp	r3, #47	@ 0x2f
 801037e:	d0f8      	beq.n	8010372 <follow_path+0x16>
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b5c      	cmp	r3, #92	@ 0x5c
 8010386:	d0f4      	beq.n	8010372 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	2200      	movs	r2, #0
 801038c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	2b1f      	cmp	r3, #31
 8010394:	d80a      	bhi.n	80103ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2280      	movs	r2, #128	@ 0x80
 801039a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801039e:	2100      	movs	r1, #0
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7ff f91c 	bl	800f5de <dir_sdi>
 80103a6:	4603      	mov	r3, r0
 80103a8:	75fb      	strb	r3, [r7, #23]
 80103aa:	e043      	b.n	8010434 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80103ac:	463b      	mov	r3, r7
 80103ae:	4619      	mov	r1, r3
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f7ff fe1b 	bl	800ffec <create_name>
 80103b6:	4603      	mov	r3, r0
 80103b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103ba:	7dfb      	ldrb	r3, [r7, #23]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d134      	bne.n	801042a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7ff fc5a 	bl	800fc7a <dir_find>
 80103c6:	4603      	mov	r3, r0
 80103c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80103d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d00a      	beq.n	80103ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80103d8:	7dfb      	ldrb	r3, [r7, #23]
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d127      	bne.n	801042e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80103de:	7afb      	ldrb	r3, [r7, #11]
 80103e0:	f003 0304 	and.w	r3, r3, #4
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d122      	bne.n	801042e <follow_path+0xd2>
 80103e8:	2305      	movs	r3, #5
 80103ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80103ec:	e01f      	b.n	801042e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80103ee:	7afb      	ldrb	r3, [r7, #11]
 80103f0:	f003 0304 	and.w	r3, r3, #4
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d11c      	bne.n	8010432 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	799b      	ldrb	r3, [r3, #6]
 80103fc:	f003 0310 	and.w	r3, r3, #16
 8010400:	2b00      	cmp	r3, #0
 8010402:	d102      	bne.n	801040a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010404:	2305      	movs	r3, #5
 8010406:	75fb      	strb	r3, [r7, #23]
 8010408:	e014      	b.n	8010434 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010418:	4413      	add	r3, r2
 801041a:	4619      	mov	r1, r3
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f7ff fa65 	bl	800f8ec <ld_clust>
 8010422:	4602      	mov	r2, r0
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010428:	e7c0      	b.n	80103ac <follow_path+0x50>
			if (res != FR_OK) break;
 801042a:	bf00      	nop
 801042c:	e002      	b.n	8010434 <follow_path+0xd8>
				break;
 801042e:	bf00      	nop
 8010430:	e000      	b.n	8010434 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010432:	bf00      	nop
			}
		}
	}

	return res;
 8010434:	7dfb      	ldrb	r3, [r7, #23]
}
 8010436:	4618      	mov	r0, r3
 8010438:	3718      	adds	r7, #24
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801043e:	b480      	push	{r7}
 8010440:	b087      	sub	sp, #28
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010446:	f04f 33ff 	mov.w	r3, #4294967295
 801044a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d031      	beq.n	80104b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	617b      	str	r3, [r7, #20]
 801045a:	e002      	b.n	8010462 <get_ldnumber+0x24>
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	3301      	adds	r3, #1
 8010460:	617b      	str	r3, [r7, #20]
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b1f      	cmp	r3, #31
 8010468:	d903      	bls.n	8010472 <get_ldnumber+0x34>
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010470:	d1f4      	bne.n	801045c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b3a      	cmp	r3, #58	@ 0x3a
 8010478:	d11c      	bne.n	80104b4 <get_ldnumber+0x76>
			tp = *path;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	60fa      	str	r2, [r7, #12]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	3b30      	subs	r3, #48	@ 0x30
 801048a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	2b09      	cmp	r3, #9
 8010490:	d80e      	bhi.n	80104b0 <get_ldnumber+0x72>
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	429a      	cmp	r2, r3
 8010498:	d10a      	bne.n	80104b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d107      	bne.n	80104b0 <get_ldnumber+0x72>
					vol = (int)i;
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	3301      	adds	r3, #1
 80104a8:	617b      	str	r3, [r7, #20]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	e002      	b.n	80104ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80104b4:	2300      	movs	r3, #0
 80104b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80104b8:	693b      	ldr	r3, [r7, #16]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	371c      	adds	r7, #28
 80104be:	46bd      	mov	sp, r7
 80104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c4:	4770      	bx	lr
	...

080104c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	70da      	strb	r2, [r3, #3]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f04f 32ff 	mov.w	r2, #4294967295
 80104de:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7fe fcfe 	bl	800eee4 <move_window>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d001      	beq.n	80104f2 <check_fs+0x2a>
 80104ee:	2304      	movs	r3, #4
 80104f0:	e038      	b.n	8010564 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	3338      	adds	r3, #56	@ 0x38
 80104f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fe fa4c 	bl	800e998 <ld_word>
 8010500:	4603      	mov	r3, r0
 8010502:	461a      	mov	r2, r3
 8010504:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010508:	429a      	cmp	r2, r3
 801050a:	d001      	beq.n	8010510 <check_fs+0x48>
 801050c:	2303      	movs	r3, #3
 801050e:	e029      	b.n	8010564 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010516:	2be9      	cmp	r3, #233	@ 0xe9
 8010518:	d009      	beq.n	801052e <check_fs+0x66>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010520:	2beb      	cmp	r3, #235	@ 0xeb
 8010522:	d11e      	bne.n	8010562 <check_fs+0x9a>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801052a:	2b90      	cmp	r3, #144	@ 0x90
 801052c:	d119      	bne.n	8010562 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	3338      	adds	r3, #56	@ 0x38
 8010532:	3336      	adds	r3, #54	@ 0x36
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe fa47 	bl	800e9c8 <ld_dword>
 801053a:	4603      	mov	r3, r0
 801053c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010540:	4a0a      	ldr	r2, [pc, #40]	@ (801056c <check_fs+0xa4>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d101      	bne.n	801054a <check_fs+0x82>
 8010546:	2300      	movs	r3, #0
 8010548:	e00c      	b.n	8010564 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	3338      	adds	r3, #56	@ 0x38
 801054e:	3352      	adds	r3, #82	@ 0x52
 8010550:	4618      	mov	r0, r3
 8010552:	f7fe fa39 	bl	800e9c8 <ld_dword>
 8010556:	4603      	mov	r3, r0
 8010558:	4a05      	ldr	r2, [pc, #20]	@ (8010570 <check_fs+0xa8>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d101      	bne.n	8010562 <check_fs+0x9a>
 801055e:	2300      	movs	r3, #0
 8010560:	e000      	b.n	8010564 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010562:	2302      	movs	r3, #2
}
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	00544146 	.word	0x00544146
 8010570:	33544146 	.word	0x33544146

08010574 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b096      	sub	sp, #88	@ 0x58
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	4613      	mov	r3, r2
 8010580:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	2200      	movs	r2, #0
 8010586:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f7ff ff58 	bl	801043e <get_ldnumber>
 801058e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010592:	2b00      	cmp	r3, #0
 8010594:	da01      	bge.n	801059a <find_volume+0x26>
 8010596:	230b      	movs	r3, #11
 8010598:	e235      	b.n	8010a06 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801059a:	4aa5      	ldr	r2, [pc, #660]	@ (8010830 <find_volume+0x2bc>)
 801059c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801059e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80105a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <find_volume+0x3a>
 80105aa:	230c      	movs	r3, #12
 80105ac:	e22b      	b.n	8010a06 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80105ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80105b0:	f7fe faf2 	bl	800eb98 <lock_fs>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d101      	bne.n	80105be <find_volume+0x4a>
 80105ba:	230f      	movs	r3, #15
 80105bc:	e223      	b.n	8010a06 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80105c4:	79fb      	ldrb	r3, [r7, #7]
 80105c6:	f023 0301 	bic.w	r3, r3, #1
 80105ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80105cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d01a      	beq.n	801060a <find_volume+0x96>
		stat = disk_status(fs->drv);
 80105d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d6:	785b      	ldrb	r3, [r3, #1]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fe f93d 	bl	800e858 <disk_status>
 80105de:	4603      	mov	r3, r0
 80105e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80105e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d10c      	bne.n	801060a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d007      	beq.n	8010606 <find_volume+0x92>
 80105f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105fa:	f003 0304 	and.w	r3, r3, #4
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010602:	230a      	movs	r3, #10
 8010604:	e1ff      	b.n	8010a06 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010606:	2300      	movs	r3, #0
 8010608:	e1fd      	b.n	8010a06 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801060a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801060c:	2200      	movs	r2, #0
 801060e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010612:	b2da      	uxtb	r2, r3
 8010614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010616:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801061a:	785b      	ldrb	r3, [r3, #1]
 801061c:	4618      	mov	r0, r3
 801061e:	f7fe f935 	bl	800e88c <disk_initialize>
 8010622:	4603      	mov	r3, r0
 8010624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010628:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801062c:	f003 0301 	and.w	r3, r3, #1
 8010630:	2b00      	cmp	r3, #0
 8010632:	d001      	beq.n	8010638 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010634:	2303      	movs	r3, #3
 8010636:	e1e6      	b.n	8010a06 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010638:	79fb      	ldrb	r3, [r7, #7]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d007      	beq.n	801064e <find_volume+0xda>
 801063e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010642:	f003 0304 	and.w	r3, r3, #4
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801064a:	230a      	movs	r3, #10
 801064c:	e1db      	b.n	8010a06 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801064e:	2300      	movs	r3, #0
 8010650:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010652:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010654:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010656:	f7ff ff37 	bl	80104c8 <check_fs>
 801065a:	4603      	mov	r3, r0
 801065c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010660:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010664:	2b02      	cmp	r3, #2
 8010666:	d149      	bne.n	80106fc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010668:	2300      	movs	r3, #0
 801066a:	643b      	str	r3, [r7, #64]	@ 0x40
 801066c:	e01e      	b.n	80106ac <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801066e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010670:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010676:	011b      	lsls	r3, r3, #4
 8010678:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801067c:	4413      	add	r3, r2
 801067e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010682:	3304      	adds	r3, #4
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d006      	beq.n	8010698 <find_volume+0x124>
 801068a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801068c:	3308      	adds	r3, #8
 801068e:	4618      	mov	r0, r3
 8010690:	f7fe f99a 	bl	800e9c8 <ld_dword>
 8010694:	4602      	mov	r2, r0
 8010696:	e000      	b.n	801069a <find_volume+0x126>
 8010698:	2200      	movs	r2, #0
 801069a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	3358      	adds	r3, #88	@ 0x58
 80106a0:	443b      	add	r3, r7
 80106a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80106a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106a8:	3301      	adds	r3, #1
 80106aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80106ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106ae:	2b03      	cmp	r3, #3
 80106b0:	d9dd      	bls.n	801066e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80106b2:	2300      	movs	r3, #0
 80106b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80106b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <find_volume+0x14e>
 80106bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106be:	3b01      	subs	r3, #1
 80106c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80106c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	3358      	adds	r3, #88	@ 0x58
 80106c8:	443b      	add	r3, r7
 80106ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80106ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80106d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d005      	beq.n	80106e2 <find_volume+0x16e>
 80106d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80106d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80106da:	f7ff fef5 	bl	80104c8 <check_fs>
 80106de:	4603      	mov	r3, r0
 80106e0:	e000      	b.n	80106e4 <find_volume+0x170>
 80106e2:	2303      	movs	r3, #3
 80106e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80106e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d905      	bls.n	80106fc <find_volume+0x188>
 80106f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106f2:	3301      	adds	r3, #1
 80106f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80106f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106f8:	2b03      	cmp	r3, #3
 80106fa:	d9e2      	bls.n	80106c2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80106fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010700:	2b04      	cmp	r3, #4
 8010702:	d101      	bne.n	8010708 <find_volume+0x194>
 8010704:	2301      	movs	r3, #1
 8010706:	e17e      	b.n	8010a06 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801070c:	2b01      	cmp	r3, #1
 801070e:	d901      	bls.n	8010714 <find_volume+0x1a0>
 8010710:	230d      	movs	r3, #13
 8010712:	e178      	b.n	8010a06 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010716:	3338      	adds	r3, #56	@ 0x38
 8010718:	330b      	adds	r3, #11
 801071a:	4618      	mov	r0, r3
 801071c:	f7fe f93c 	bl	800e998 <ld_word>
 8010720:	4603      	mov	r3, r0
 8010722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010726:	d001      	beq.n	801072c <find_volume+0x1b8>
 8010728:	230d      	movs	r3, #13
 801072a:	e16c      	b.n	8010a06 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801072c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072e:	3338      	adds	r3, #56	@ 0x38
 8010730:	3316      	adds	r3, #22
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe f930 	bl	800e998 <ld_word>
 8010738:	4603      	mov	r3, r0
 801073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801073c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801073e:	2b00      	cmp	r3, #0
 8010740:	d106      	bne.n	8010750 <find_volume+0x1dc>
 8010742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010744:	3338      	adds	r3, #56	@ 0x38
 8010746:	3324      	adds	r3, #36	@ 0x24
 8010748:	4618      	mov	r0, r3
 801074a:	f7fe f93d 	bl	800e9c8 <ld_dword>
 801074e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010752:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010754:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010758:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801075c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801075e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010762:	789b      	ldrb	r3, [r3, #2]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d005      	beq.n	8010774 <find_volume+0x200>
 8010768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801076a:	789b      	ldrb	r3, [r3, #2]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d001      	beq.n	8010774 <find_volume+0x200>
 8010770:	230d      	movs	r3, #13
 8010772:	e148      	b.n	8010a06 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010776:	789b      	ldrb	r3, [r3, #2]
 8010778:	461a      	mov	r2, r3
 801077a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801077c:	fb02 f303 	mul.w	r3, r2, r3
 8010780:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010788:	461a      	mov	r2, r3
 801078a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801078c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801078e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010790:	895b      	ldrh	r3, [r3, #10]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d008      	beq.n	80107a8 <find_volume+0x234>
 8010796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010798:	895b      	ldrh	r3, [r3, #10]
 801079a:	461a      	mov	r2, r3
 801079c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079e:	895b      	ldrh	r3, [r3, #10]
 80107a0:	3b01      	subs	r3, #1
 80107a2:	4013      	ands	r3, r2
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <find_volume+0x238>
 80107a8:	230d      	movs	r3, #13
 80107aa:	e12c      	b.n	8010a06 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80107ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ae:	3338      	adds	r3, #56	@ 0x38
 80107b0:	3311      	adds	r3, #17
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe f8f0 	bl	800e998 <ld_word>
 80107b8:	4603      	mov	r3, r0
 80107ba:	461a      	mov	r2, r3
 80107bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80107c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107c2:	891b      	ldrh	r3, [r3, #8]
 80107c4:	f003 030f 	and.w	r3, r3, #15
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d001      	beq.n	80107d2 <find_volume+0x25e>
 80107ce:	230d      	movs	r3, #13
 80107d0:	e119      	b.n	8010a06 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80107d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107d4:	3338      	adds	r3, #56	@ 0x38
 80107d6:	3313      	adds	r3, #19
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe f8dd 	bl	800e998 <ld_word>
 80107de:	4603      	mov	r3, r0
 80107e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80107e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d106      	bne.n	80107f6 <find_volume+0x282>
 80107e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ea:	3338      	adds	r3, #56	@ 0x38
 80107ec:	3320      	adds	r3, #32
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fe f8ea 	bl	800e9c8 <ld_dword>
 80107f4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80107f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f8:	3338      	adds	r3, #56	@ 0x38
 80107fa:	330e      	adds	r3, #14
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7fe f8cb 	bl	800e998 <ld_word>
 8010802:	4603      	mov	r3, r0
 8010804:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010806:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010808:	2b00      	cmp	r3, #0
 801080a:	d101      	bne.n	8010810 <find_volume+0x29c>
 801080c:	230d      	movs	r3, #13
 801080e:	e0fa      	b.n	8010a06 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010810:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010814:	4413      	add	r3, r2
 8010816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010818:	8912      	ldrh	r2, [r2, #8]
 801081a:	0912      	lsrs	r2, r2, #4
 801081c:	b292      	uxth	r2, r2
 801081e:	4413      	add	r3, r2
 8010820:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010826:	429a      	cmp	r2, r3
 8010828:	d204      	bcs.n	8010834 <find_volume+0x2c0>
 801082a:	230d      	movs	r3, #13
 801082c:	e0eb      	b.n	8010a06 <find_volume+0x492>
 801082e:	bf00      	nop
 8010830:	200010c4 	.word	0x200010c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010834:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010838:	1ad3      	subs	r3, r2, r3
 801083a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801083c:	8952      	ldrh	r2, [r2, #10]
 801083e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010842:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <find_volume+0x2da>
 801084a:	230d      	movs	r3, #13
 801084c:	e0db      	b.n	8010a06 <find_volume+0x492>
		fmt = FS_FAT32;
 801084e:	2303      	movs	r3, #3
 8010850:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010856:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801085a:	4293      	cmp	r3, r2
 801085c:	d802      	bhi.n	8010864 <find_volume+0x2f0>
 801085e:	2302      	movs	r3, #2
 8010860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010866:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801086a:	4293      	cmp	r3, r2
 801086c:	d802      	bhi.n	8010874 <find_volume+0x300>
 801086e:	2301      	movs	r3, #1
 8010870:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010876:	1c9a      	adds	r2, r3, #2
 8010878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801087c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010880:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010882:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010886:	441a      	add	r2, r3
 8010888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801088a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801088c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010890:	441a      	add	r2, r3
 8010892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010894:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8010896:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801089a:	2b03      	cmp	r3, #3
 801089c:	d11e      	bne.n	80108dc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801089e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108a0:	3338      	adds	r3, #56	@ 0x38
 80108a2:	332a      	adds	r3, #42	@ 0x2a
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fe f877 	bl	800e998 <ld_word>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d001      	beq.n	80108b4 <find_volume+0x340>
 80108b0:	230d      	movs	r3, #13
 80108b2:	e0a8      	b.n	8010a06 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80108b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b6:	891b      	ldrh	r3, [r3, #8]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d001      	beq.n	80108c0 <find_volume+0x34c>
 80108bc:	230d      	movs	r3, #13
 80108be:	e0a2      	b.n	8010a06 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80108c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c2:	3338      	adds	r3, #56	@ 0x38
 80108c4:	332c      	adds	r3, #44	@ 0x2c
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe f87e 	bl	800e9c8 <ld_dword>
 80108cc:	4602      	mov	r2, r0
 80108ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80108d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d4:	69db      	ldr	r3, [r3, #28]
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80108da:	e01f      	b.n	801091c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80108dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108de:	891b      	ldrh	r3, [r3, #8]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <find_volume+0x374>
 80108e4:	230d      	movs	r3, #13
 80108e6:	e08e      	b.n	8010a06 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80108e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108ee:	441a      	add	r2, r3
 80108f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80108f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	d103      	bne.n	8010904 <find_volume+0x390>
 80108fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fe:	69db      	ldr	r3, [r3, #28]
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	e00a      	b.n	801091a <find_volume+0x3a6>
 8010904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010906:	69da      	ldr	r2, [r3, #28]
 8010908:	4613      	mov	r3, r2
 801090a:	005b      	lsls	r3, r3, #1
 801090c:	4413      	add	r3, r2
 801090e:	085a      	lsrs	r2, r3, #1
 8010910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010912:	69db      	ldr	r3, [r3, #28]
 8010914:	f003 0301 	and.w	r3, r3, #1
 8010918:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801091a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801091c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801091e:	6a1a      	ldr	r2, [r3, #32]
 8010920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010922:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010926:	0a5b      	lsrs	r3, r3, #9
 8010928:	429a      	cmp	r2, r3
 801092a:	d201      	bcs.n	8010930 <find_volume+0x3bc>
 801092c:	230d      	movs	r3, #13
 801092e:	e06a      	b.n	8010a06 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010932:	f04f 32ff 	mov.w	r2, #4294967295
 8010936:	619a      	str	r2, [r3, #24]
 8010938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093a:	699a      	ldr	r2, [r3, #24]
 801093c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010942:	2280      	movs	r2, #128	@ 0x80
 8010944:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010946:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801094a:	2b03      	cmp	r3, #3
 801094c:	d149      	bne.n	80109e2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801094e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010950:	3338      	adds	r3, #56	@ 0x38
 8010952:	3330      	adds	r3, #48	@ 0x30
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe f81f 	bl	800e998 <ld_word>
 801095a:	4603      	mov	r3, r0
 801095c:	2b01      	cmp	r3, #1
 801095e:	d140      	bne.n	80109e2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010962:	3301      	adds	r3, #1
 8010964:	4619      	mov	r1, r3
 8010966:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010968:	f7fe fabc 	bl	800eee4 <move_window>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d137      	bne.n	80109e2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010974:	2200      	movs	r2, #0
 8010976:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801097a:	3338      	adds	r3, #56	@ 0x38
 801097c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010980:	4618      	mov	r0, r3
 8010982:	f7fe f809 	bl	800e998 <ld_word>
 8010986:	4603      	mov	r3, r0
 8010988:	461a      	mov	r2, r3
 801098a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801098e:	429a      	cmp	r2, r3
 8010990:	d127      	bne.n	80109e2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010994:	3338      	adds	r3, #56	@ 0x38
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe f816 	bl	800e9c8 <ld_dword>
 801099c:	4603      	mov	r3, r0
 801099e:	4a1c      	ldr	r2, [pc, #112]	@ (8010a10 <find_volume+0x49c>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d11e      	bne.n	80109e2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80109a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a6:	3338      	adds	r3, #56	@ 0x38
 80109a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fe f80b 	bl	800e9c8 <ld_dword>
 80109b2:	4603      	mov	r3, r0
 80109b4:	4a17      	ldr	r2, [pc, #92]	@ (8010a14 <find_volume+0x4a0>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d113      	bne.n	80109e2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80109ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109bc:	3338      	adds	r3, #56	@ 0x38
 80109be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe f800 	bl	800e9c8 <ld_dword>
 80109c8:	4602      	mov	r2, r0
 80109ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109cc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80109ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d0:	3338      	adds	r3, #56	@ 0x38
 80109d2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fd fff6 	bl	800e9c8 <ld_dword>
 80109dc:	4602      	mov	r2, r0
 80109de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80109e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80109e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80109ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010a18 <find_volume+0x4a4>)
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	3301      	adds	r3, #1
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	4b09      	ldr	r3, [pc, #36]	@ (8010a18 <find_volume+0x4a4>)
 80109f4:	801a      	strh	r2, [r3, #0]
 80109f6:	4b08      	ldr	r3, [pc, #32]	@ (8010a18 <find_volume+0x4a4>)
 80109f8:	881a      	ldrh	r2, [r3, #0]
 80109fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80109fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a00:	f7fe fa08 	bl	800ee14 <clear_lock>
#endif
	return FR_OK;
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3758      	adds	r7, #88	@ 0x58
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	41615252 	.word	0x41615252
 8010a14:	61417272 	.word	0x61417272
 8010a18:	200010c8 	.word	0x200010c8

08010a1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010a26:	2309      	movs	r3, #9
 8010a28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d02e      	beq.n	8010a8e <validate+0x72>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d02a      	beq.n	8010a8e <validate+0x72>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d025      	beq.n	8010a8e <validate+0x72>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	889a      	ldrh	r2, [r3, #4]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	88db      	ldrh	r3, [r3, #6]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d11e      	bne.n	8010a8e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fe f89f 	bl	800eb98 <lock_fs>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d014      	beq.n	8010a8a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	785b      	ldrb	r3, [r3, #1]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fd fef6 	bl	800e858 <disk_status>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	f003 0301 	and.w	r3, r3, #1
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d102      	bne.n	8010a7c <validate+0x60>
				res = FR_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	73fb      	strb	r3, [r7, #15]
 8010a7a:	e008      	b.n	8010a8e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2100      	movs	r1, #0
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fe f89e 	bl	800ebc4 <unlock_fs>
 8010a88:	e001      	b.n	8010a8e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010a8a:	230f      	movs	r3, #15
 8010a8c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d102      	bne.n	8010a9a <validate+0x7e>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	e000      	b.n	8010a9c <validate+0x80>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	6013      	str	r3, [r2, #0]
	return res;
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
	...

08010aac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010abe:	f107 0310 	add.w	r3, r7, #16
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff fcbb 	bl	801043e <get_ldnumber>
 8010ac8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	da01      	bge.n	8010ad4 <f_mount+0x28>
 8010ad0:	230b      	movs	r3, #11
 8010ad2:	e048      	b.n	8010b66 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010ad4:	4a26      	ldr	r2, [pc, #152]	@ (8010b70 <f_mount+0xc4>)
 8010ad6:	69fb      	ldr	r3, [r7, #28]
 8010ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010adc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00f      	beq.n	8010b04 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010ae4:	69b8      	ldr	r0, [r7, #24]
 8010ae6:	f7fe f995 	bl	800ee14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010aea:	69bb      	ldr	r3, [r7, #24]
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f001 f956 	bl	8011da0 <ff_del_syncobj>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d101      	bne.n	8010afe <f_mount+0x52>
 8010afa:	2302      	movs	r3, #2
 8010afc:	e033      	b.n	8010b66 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	2200      	movs	r2, #0
 8010b02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d00f      	beq.n	8010b2a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3310      	adds	r3, #16
 8010b18:	4619      	mov	r1, r3
 8010b1a:	4610      	mov	r0, r2
 8010b1c:	f001 f922 	bl	8011d64 <ff_cre_syncobj>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d101      	bne.n	8010b2a <f_mount+0x7e>
 8010b26:	2302      	movs	r3, #2
 8010b28:	e01d      	b.n	8010b66 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	4910      	ldr	r1, [pc, #64]	@ (8010b70 <f_mount+0xc4>)
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d002      	beq.n	8010b40 <f_mount+0x94>
 8010b3a:	79fb      	ldrb	r3, [r7, #7]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d001      	beq.n	8010b44 <f_mount+0x98>
 8010b40:	2300      	movs	r3, #0
 8010b42:	e010      	b.n	8010b66 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010b44:	f107 010c 	add.w	r1, r7, #12
 8010b48:	f107 0308 	add.w	r3, r7, #8
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff fd10 	bl	8010574 <find_volume>
 8010b54:	4603      	mov	r3, r0
 8010b56:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	7dfa      	ldrb	r2, [r7, #23]
 8010b5c:	4611      	mov	r1, r2
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe f830 	bl	800ebc4 <unlock_fs>
 8010b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3720      	adds	r7, #32
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	200010c4 	.word	0x200010c4

08010b74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010b80:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010b84:	6018      	str	r0, [r3, #0]
 8010b86:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010b8a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8010b8e:	6019      	str	r1, [r3, #0]
 8010b90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010b94:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010b98:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010b9a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010b9e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d101      	bne.n	8010bac <f_open+0x38>
 8010ba8:	2309      	movs	r3, #9
 8010baa:	e299      	b.n	80110e0 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010bac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010bb0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010bb4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8010bb8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8010bbc:	7812      	ldrb	r2, [r2, #0]
 8010bbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010bc2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8010bc4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010bc8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010bcc:	781a      	ldrb	r2, [r3, #0]
 8010bce:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8010bd2:	f107 0308 	add.w	r3, r7, #8
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7ff fccc 	bl	8010574 <find_volume>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8010be2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f040 8265 	bne.w	80110b6 <f_open+0x542>
		dj.obj.fs = fs;
 8010bec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010bf0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8010bf4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010bf8:	f107 0214 	add.w	r2, r7, #20
 8010bfc:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010bfe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010c02:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7ff fba4 	bl	801035c <follow_path>
 8010c14:	4603      	mov	r3, r0
 8010c16:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c1a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d11c      	bne.n	8010c5c <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c22:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8010c26:	b25b      	sxtb	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	da03      	bge.n	8010c34 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8010c2c:	2306      	movs	r3, #6
 8010c2e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8010c32:	e013      	b.n	8010c5c <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010c38:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	bf8c      	ite	hi
 8010c42:	2301      	movhi	r3, #1
 8010c44:	2300      	movls	r3, #0
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	461a      	mov	r2, r3
 8010c4a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c4e:	4611      	mov	r1, r2
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fd ffd3 	bl	800ebfc <chk_lock>
 8010c56:	4603      	mov	r3, r0
 8010c58:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010c5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010c60:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	f003 031c 	and.w	r3, r3, #28
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f000 80a7 	beq.w	8010dbe <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8010c70:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d01f      	beq.n	8010cb8 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010c78:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010c7c:	2b04      	cmp	r3, #4
 8010c7e:	d10e      	bne.n	8010c9e <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010c80:	f7fe f818 	bl	800ecb4 <enq_lock>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d006      	beq.n	8010c98 <f_open+0x124>
 8010c8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7ff f8b4 	bl	800fdfc <dir_register>
 8010c94:	4603      	mov	r3, r0
 8010c96:	e000      	b.n	8010c9a <f_open+0x126>
 8010c98:	2312      	movs	r3, #18
 8010c9a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010c9e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010ca2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010ca6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8010caa:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8010cae:	7812      	ldrb	r2, [r2, #0]
 8010cb0:	f042 0208 	orr.w	r2, r2, #8
 8010cb4:	701a      	strb	r2, [r3, #0]
 8010cb6:	e015      	b.n	8010ce4 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010cb8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8010cbc:	f003 0311 	and.w	r3, r3, #17
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d003      	beq.n	8010ccc <f_open+0x158>
					res = FR_DENIED;
 8010cc4:	2307      	movs	r3, #7
 8010cc6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8010cca:	e00b      	b.n	8010ce4 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010ccc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010cd0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	f003 0304 	and.w	r3, r3, #4
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d002      	beq.n	8010ce4 <f_open+0x170>
 8010cde:	2308      	movs	r3, #8
 8010ce0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010ce4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f040 8088 	bne.w	8010dfe <f_open+0x28a>
 8010cee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010cf2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	f003 0308 	and.w	r3, r3, #8
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d07e      	beq.n	8010dfe <f_open+0x28a>
				dw = GET_FATTIME();
 8010d00:	f7fd fb64 	bl	800e3cc <get_fattime>
 8010d04:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d08:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8010d0c:	330e      	adds	r3, #14
 8010d0e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fd fe96 	bl	800ea44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d18:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8010d1c:	3316      	adds	r3, #22
 8010d1e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fd fe8e 	bl	800ea44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d28:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8010d2c:	330b      	adds	r3, #11
 8010d2e:	2220      	movs	r2, #32
 8010d30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d32:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010d36:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fe fdd5 	bl	800f8ec <ld_clust>
 8010d42:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010d4a:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8010d4e:	2200      	movs	r2, #0
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7fe fdea 	bl	800f92a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010d56:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8010d5a:	331c      	adds	r3, #28
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fd fe70 	bl	800ea44 <st_dword>
					fs->wflag = 1;
 8010d64:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010d68:	2201      	movs	r2, #1
 8010d6a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d6c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d044      	beq.n	8010dfe <f_open+0x28a>
						dw = fs->winsect;
 8010d74:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d7a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8010d7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010d82:	2200      	movs	r2, #0
 8010d84:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe faf7 	bl	800f37c <remove_chain>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8010d94:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d130      	bne.n	8010dfe <f_open+0x28a>
							res = move_window(fs, dw);
 8010d9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010da0:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fe f89d 	bl	800eee4 <move_window>
 8010daa:	4603      	mov	r3, r0
 8010dac:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010db0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010db4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8010db8:	3a01      	subs	r2, #1
 8010dba:	615a      	str	r2, [r3, #20]
 8010dbc:	e01f      	b.n	8010dfe <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010dbe:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d11b      	bne.n	8010dfe <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010dc6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8010dca:	f003 0310 	and.w	r3, r3, #16
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <f_open+0x266>
					res = FR_NO_FILE;
 8010dd2:	2304      	movs	r3, #4
 8010dd4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8010dd8:	e011      	b.n	8010dfe <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010dda:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010dde:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	f003 0302 	and.w	r3, r3, #2
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d008      	beq.n	8010dfe <f_open+0x28a>
 8010dec:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8010df0:	f003 0301 	and.w	r3, r3, #1
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <f_open+0x28a>
						res = FR_DENIED;
 8010df8:	2307      	movs	r3, #7
 8010dfa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8010dfe:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d148      	bne.n	8010e98 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e06:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e0a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	f003 0308 	and.w	r3, r3, #8
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00b      	beq.n	8010e30 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8010e18:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e1c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010e20:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8010e24:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8010e28:	7812      	ldrb	r2, [r2, #0]
 8010e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010e2e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e30:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e36:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e3a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010e42:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8010e46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e4a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e52:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e56:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	bf8c      	ite	hi
 8010e60:	2301      	movhi	r3, #1
 8010e62:	2300      	movls	r3, #0
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	461a      	mov	r2, r3
 8010e68:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fd ff42 	bl	800ecf8 <inc_lock>
 8010e74:	4602      	mov	r2, r0
 8010e76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e7a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010e82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010e86:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d102      	bne.n	8010e98 <f_open+0x324>
 8010e92:	2302      	movs	r3, #2
 8010e94:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010e98:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f040 810a 	bne.w	80110b6 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010ea2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010ea6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8010eaa:	4611      	mov	r1, r2
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fe fd1d 	bl	800f8ec <ld_clust>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010eb8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010ec0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8010ec4:	331c      	adds	r3, #28
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fd fd7e 	bl	800e9c8 <ld_dword>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010ed2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010eda:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010ede:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010ee8:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8010eec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010ef0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010ef8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010efc:	88da      	ldrh	r2, [r3, #6]
 8010efe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f02:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010f0a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f0e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8010f18:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8010f1c:	7812      	ldrb	r2, [r2, #0]
 8010f1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010f20:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f24:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010f2e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f32:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010f3c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f40:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2200      	movs	r2, #0
 8010f48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010f4a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f4e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	3330      	adds	r3, #48	@ 0x30
 8010f56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fd fdbe 	bl	800eade <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010f62:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f66:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	f003 0320 	and.w	r3, r3, #32
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f000 80a0 	beq.w	80110b6 <f_open+0x542>
 8010f76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f7a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 8097 	beq.w	80110b6 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010f88:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f8c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	68da      	ldr	r2, [r3, #12]
 8010f94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010f98:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010fa0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8010fa4:	895b      	ldrh	r3, [r3, #10]
 8010fa6:	025b      	lsls	r3, r3, #9
 8010fa8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010fac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fb0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010fbc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fc0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8010fcc:	e021      	b.n	8011012 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 8010fce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8010fd2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fe f83c 	bl	800f05a <get_fat>
 8010fe2:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8010fe6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d802      	bhi.n	8010ff4 <f_open+0x480>
 8010fee:	2302      	movs	r3, #2
 8010ff0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ff4:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8010ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffc:	d102      	bne.n	8011004 <f_open+0x490>
 8010ffe:	2301      	movs	r3, #1
 8011000:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011004:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8011008:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801100c:	1ad3      	subs	r3, r2, r3
 801100e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8011012:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011016:	2b00      	cmp	r3, #0
 8011018:	d105      	bne.n	8011026 <f_open+0x4b2>
 801101a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801101e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8011022:	429a      	cmp	r2, r3
 8011024:	d8d3      	bhi.n	8010fce <f_open+0x45a>
				}
				fp->clust = clst;
 8011026:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801102a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8011034:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011036:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801103a:	2b00      	cmp	r3, #0
 801103c:	d13b      	bne.n	80110b6 <f_open+0x542>
 801103e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8011042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011046:	2b00      	cmp	r3, #0
 8011048:	d035      	beq.n	80110b6 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801104a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801104e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8011052:	4618      	mov	r0, r3
 8011054:	f7fd ffe2 	bl	800f01c <clust2sect>
 8011058:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 801105c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8011060:	2b00      	cmp	r3, #0
 8011062:	d103      	bne.n	801106c <f_open+0x4f8>
						res = FR_INT_ERR;
 8011064:	2302      	movs	r3, #2
 8011066:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801106a:	e024      	b.n	80110b6 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801106c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8011070:	0a5a      	lsrs	r2, r3, #9
 8011072:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8011076:	441a      	add	r2, r3
 8011078:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801107c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011084:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011088:	7858      	ldrb	r0, [r3, #1]
 801108a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801108e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011098:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801109c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	6a1a      	ldr	r2, [r3, #32]
 80110a4:	2301      	movs	r3, #1
 80110a6:	f7fd fc19 	bl	800e8dc <disk_read>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <f_open+0x542>
 80110b0:	2301      	movs	r3, #1
 80110b2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80110b6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d006      	beq.n	80110cc <f_open+0x558>
 80110be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80110c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	2200      	movs	r2, #0
 80110ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80110cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80110d0:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 80110d4:	4611      	mov	r1, r2
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fd fd74 	bl	800ebc4 <unlock_fs>
 80110dc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b08c      	sub	sp, #48	@ 0x30
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	60f8      	str	r0, [r7, #12]
 80110f2:	60b9      	str	r1, [r7, #8]
 80110f4:	607a      	str	r2, [r7, #4]
 80110f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	2200      	movs	r2, #0
 8011100:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f107 0210 	add.w	r2, r7, #16
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff fc86 	bl	8010a1c <validate>
 8011110:	4603      	mov	r3, r0
 8011112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011116:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801111a:	2b00      	cmp	r3, #0
 801111c:	d107      	bne.n	801112e <f_write+0x44>
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7d5b      	ldrb	r3, [r3, #21]
 8011122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801112a:	2b00      	cmp	r3, #0
 801112c:	d009      	beq.n	8011142 <f_write+0x58>
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011134:	4611      	mov	r1, r2
 8011136:	4618      	mov	r0, r3
 8011138:	f7fd fd44 	bl	800ebc4 <unlock_fs>
 801113c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011140:	e173      	b.n	801142a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	7d1b      	ldrb	r3, [r3, #20]
 8011146:	f003 0302 	and.w	r3, r3, #2
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <f_write+0x72>
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	2107      	movs	r1, #7
 8011152:	4618      	mov	r0, r3
 8011154:	f7fd fd36 	bl	800ebc4 <unlock_fs>
 8011158:	2307      	movs	r3, #7
 801115a:	e166      	b.n	801142a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	699a      	ldr	r2, [r3, #24]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	441a      	add	r2, r3
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	429a      	cmp	r2, r3
 801116a:	f080 814b 	bcs.w	8011404 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	699b      	ldr	r3, [r3, #24]
 8011172:	43db      	mvns	r3, r3
 8011174:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011176:	e145      	b.n	8011404 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011180:	2b00      	cmp	r3, #0
 8011182:	f040 8101 	bne.w	8011388 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	699b      	ldr	r3, [r3, #24]
 801118a:	0a5b      	lsrs	r3, r3, #9
 801118c:	693a      	ldr	r2, [r7, #16]
 801118e:	8952      	ldrh	r2, [r2, #10]
 8011190:	3a01      	subs	r2, #1
 8011192:	4013      	ands	r3, r2
 8011194:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d14d      	bne.n	8011238 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	699b      	ldr	r3, [r3, #24]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d10c      	bne.n	80111be <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80111aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d11a      	bne.n	80111e6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2100      	movs	r1, #0
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe f946 	bl	800f446 <create_chain>
 80111ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 80111bc:	e013      	b.n	80111e6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d007      	beq.n	80111d6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	4619      	mov	r1, r3
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f7fe f9d2 	bl	800f576 <clmt_clust>
 80111d2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80111d4:	e007      	b.n	80111e6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	69db      	ldr	r3, [r3, #28]
 80111dc:	4619      	mov	r1, r3
 80111de:	4610      	mov	r0, r2
 80111e0:	f7fe f931 	bl	800f446 <create_chain>
 80111e4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80111e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	f000 8110 	beq.w	801140e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80111ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d109      	bne.n	8011208 <f_write+0x11e>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2202      	movs	r2, #2
 80111f8:	755a      	strb	r2, [r3, #21]
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	2102      	movs	r1, #2
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fd fce0 	bl	800ebc4 <unlock_fs>
 8011204:	2302      	movs	r3, #2
 8011206:	e110      	b.n	801142a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801120a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801120e:	d109      	bne.n	8011224 <f_write+0x13a>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2201      	movs	r2, #1
 8011214:	755a      	strb	r2, [r3, #21]
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	2101      	movs	r1, #1
 801121a:	4618      	mov	r0, r3
 801121c:	f7fd fcd2 	bl	800ebc4 <unlock_fs>
 8011220:	2301      	movs	r3, #1
 8011222:	e102      	b.n	801142a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011228:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	689b      	ldr	r3, [r3, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d102      	bne.n	8011238 <f_write+0x14e>
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011236:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	7d1b      	ldrb	r3, [r3, #20]
 801123c:	b25b      	sxtb	r3, r3
 801123e:	2b00      	cmp	r3, #0
 8011240:	da1d      	bge.n	801127e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	7858      	ldrb	r0, [r3, #1]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6a1a      	ldr	r2, [r3, #32]
 8011250:	2301      	movs	r3, #1
 8011252:	f7fd fb63 	bl	800e91c <disk_write>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d009      	beq.n	8011270 <f_write+0x186>
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2201      	movs	r2, #1
 8011260:	755a      	strb	r2, [r3, #21]
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	2101      	movs	r1, #1
 8011266:	4618      	mov	r0, r3
 8011268:	f7fd fcac 	bl	800ebc4 <unlock_fs>
 801126c:	2301      	movs	r3, #1
 801126e:	e0dc      	b.n	801142a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	7d1b      	ldrb	r3, [r3, #20]
 8011274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011278:	b2da      	uxtb	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801127e:	693a      	ldr	r2, [r7, #16]
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	4619      	mov	r1, r3
 8011286:	4610      	mov	r0, r2
 8011288:	f7fd fec8 	bl	800f01c <clust2sect>
 801128c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d109      	bne.n	80112a8 <f_write+0x1be>
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2202      	movs	r2, #2
 8011298:	755a      	strb	r2, [r3, #21]
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	2102      	movs	r1, #2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fd fc90 	bl	800ebc4 <unlock_fs>
 80112a4:	2302      	movs	r3, #2
 80112a6:	e0c0      	b.n	801142a <f_write+0x340>
			sect += csect;
 80112a8:	697a      	ldr	r2, [r7, #20]
 80112aa:	69bb      	ldr	r3, [r7, #24]
 80112ac:	4413      	add	r3, r2
 80112ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	0a5b      	lsrs	r3, r3, #9
 80112b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d041      	beq.n	8011340 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80112bc:	69ba      	ldr	r2, [r7, #24]
 80112be:	6a3b      	ldr	r3, [r7, #32]
 80112c0:	4413      	add	r3, r2
 80112c2:	693a      	ldr	r2, [r7, #16]
 80112c4:	8952      	ldrh	r2, [r2, #10]
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d905      	bls.n	80112d6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	895b      	ldrh	r3, [r3, #10]
 80112ce:	461a      	mov	r2, r3
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	7858      	ldrb	r0, [r3, #1]
 80112da:	6a3b      	ldr	r3, [r7, #32]
 80112dc:	697a      	ldr	r2, [r7, #20]
 80112de:	69f9      	ldr	r1, [r7, #28]
 80112e0:	f7fd fb1c 	bl	800e91c <disk_write>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d009      	beq.n	80112fe <f_write+0x214>
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2201      	movs	r2, #1
 80112ee:	755a      	strb	r2, [r3, #21]
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	2101      	movs	r1, #1
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fd fc65 	bl	800ebc4 <unlock_fs>
 80112fa:	2301      	movs	r3, #1
 80112fc:	e095      	b.n	801142a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6a1a      	ldr	r2, [r3, #32]
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	6a3a      	ldr	r2, [r7, #32]
 8011308:	429a      	cmp	r2, r3
 801130a:	d915      	bls.n	8011338 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	6a1a      	ldr	r2, [r3, #32]
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	025b      	lsls	r3, r3, #9
 801131c:	69fa      	ldr	r2, [r7, #28]
 801131e:	4413      	add	r3, r2
 8011320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011324:	4619      	mov	r1, r3
 8011326:	f7fd fbb9 	bl	800ea9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	7d1b      	ldrb	r3, [r3, #20]
 801132e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011332:	b2da      	uxtb	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011338:	6a3b      	ldr	r3, [r7, #32]
 801133a:	025b      	lsls	r3, r3, #9
 801133c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801133e:	e044      	b.n	80113ca <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6a1b      	ldr	r3, [r3, #32]
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	429a      	cmp	r2, r3
 8011348:	d01b      	beq.n	8011382 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	699a      	ldr	r2, [r3, #24]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011352:	429a      	cmp	r2, r3
 8011354:	d215      	bcs.n	8011382 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	7858      	ldrb	r0, [r3, #1]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011360:	2301      	movs	r3, #1
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	f7fd faba 	bl	800e8dc <disk_read>
 8011368:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801136a:	2b00      	cmp	r3, #0
 801136c:	d009      	beq.n	8011382 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2201      	movs	r2, #1
 8011372:	755a      	strb	r2, [r3, #21]
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	2101      	movs	r1, #1
 8011378:	4618      	mov	r0, r3
 801137a:	f7fd fc23 	bl	800ebc4 <unlock_fs>
 801137e:	2301      	movs	r3, #1
 8011380:	e053      	b.n	801142a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	697a      	ldr	r2, [r7, #20]
 8011386:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011390:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011394:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	429a      	cmp	r2, r3
 801139c:	d901      	bls.n	80113a2 <f_write+0x2b8>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	699b      	ldr	r3, [r3, #24]
 80113ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113b0:	4413      	add	r3, r2
 80113b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113b4:	69f9      	ldr	r1, [r7, #28]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fd fb70 	bl	800ea9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	7d1b      	ldrb	r3, [r3, #20]
 80113c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80113c4:	b2da      	uxtb	r2, r3
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80113ca:	69fa      	ldr	r2, [r7, #28]
 80113cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ce:	4413      	add	r3, r2
 80113d0:	61fb      	str	r3, [r7, #28]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	699a      	ldr	r2, [r3, #24]
 80113d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d8:	441a      	add	r2, r3
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	619a      	str	r2, [r3, #24]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	68da      	ldr	r2, [r3, #12]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	699b      	ldr	r3, [r3, #24]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	bf38      	it	cc
 80113ea:	461a      	movcc	r2, r3
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	60da      	str	r2, [r3, #12]
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f6:	441a      	add	r2, r3
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011400:	1ad3      	subs	r3, r2, r3
 8011402:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2b00      	cmp	r3, #0
 8011408:	f47f aeb6 	bne.w	8011178 <f_write+0x8e>
 801140c:	e000      	b.n	8011410 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801140e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	7d1b      	ldrb	r3, [r3, #20]
 8011414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011418:	b2da      	uxtb	r2, r3
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	2100      	movs	r1, #0
 8011422:	4618      	mov	r0, r3
 8011424:	f7fd fbce 	bl	800ebc4 <unlock_fs>
 8011428:	2300      	movs	r3, #0
}
 801142a:	4618      	mov	r0, r3
 801142c:	3730      	adds	r7, #48	@ 0x30
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}

08011432 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011432:	b580      	push	{r7, lr}
 8011434:	b086      	sub	sp, #24
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f107 0208 	add.w	r2, r7, #8
 8011440:	4611      	mov	r1, r2
 8011442:	4618      	mov	r0, r3
 8011444:	f7ff faea 	bl	8010a1c <validate>
 8011448:	4603      	mov	r3, r0
 801144a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801144c:	7dfb      	ldrb	r3, [r7, #23]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d16d      	bne.n	801152e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	7d1b      	ldrb	r3, [r3, #20]
 8011456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801145a:	2b00      	cmp	r3, #0
 801145c:	d067      	beq.n	801152e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	7d1b      	ldrb	r3, [r3, #20]
 8011462:	b25b      	sxtb	r3, r3
 8011464:	2b00      	cmp	r3, #0
 8011466:	da1a      	bge.n	801149e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	7858      	ldrb	r0, [r3, #1]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1a      	ldr	r2, [r3, #32]
 8011476:	2301      	movs	r3, #1
 8011478:	f7fd fa50 	bl	800e91c <disk_write>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d006      	beq.n	8011490 <f_sync+0x5e>
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	2101      	movs	r1, #1
 8011486:	4618      	mov	r0, r3
 8011488:	f7fd fb9c 	bl	800ebc4 <unlock_fs>
 801148c:	2301      	movs	r3, #1
 801148e:	e055      	b.n	801153c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	7d1b      	ldrb	r3, [r3, #20]
 8011494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011498:	b2da      	uxtb	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801149e:	f7fc ff95 	bl	800e3cc <get_fattime>
 80114a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80114a4:	68ba      	ldr	r2, [r7, #8]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114aa:	4619      	mov	r1, r3
 80114ac:	4610      	mov	r0, r2
 80114ae:	f7fd fd19 	bl	800eee4 <move_window>
 80114b2:	4603      	mov	r3, r0
 80114b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80114b6:	7dfb      	ldrb	r3, [r7, #23]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d138      	bne.n	801152e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	330b      	adds	r3, #11
 80114c6:	781a      	ldrb	r2, [r3, #0]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	330b      	adds	r3, #11
 80114cc:	f042 0220 	orr.w	r2, r2, #32
 80114d0:	b2d2      	uxtb	r2, r2
 80114d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6818      	ldr	r0, [r3, #0]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	461a      	mov	r2, r3
 80114de:	68f9      	ldr	r1, [r7, #12]
 80114e0:	f7fe fa23 	bl	800f92a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f103 021c 	add.w	r2, r3, #28
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	4619      	mov	r1, r3
 80114f0:	4610      	mov	r0, r2
 80114f2:	f7fd faa7 	bl	800ea44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	3316      	adds	r3, #22
 80114fa:	6939      	ldr	r1, [r7, #16]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fd faa1 	bl	800ea44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	3312      	adds	r3, #18
 8011506:	2100      	movs	r1, #0
 8011508:	4618      	mov	r0, r3
 801150a:	f7fd fa80 	bl	800ea0e <st_word>
					fs->wflag = 1;
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2201      	movs	r2, #1
 8011512:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	4618      	mov	r0, r3
 8011518:	f7fd fd12 	bl	800ef40 <sync_fs>
 801151c:	4603      	mov	r3, r0
 801151e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	7d1b      	ldrb	r3, [r3, #20]
 8011524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011528:	b2da      	uxtb	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	7dfa      	ldrb	r2, [r7, #23]
 8011532:	4611      	mov	r1, r2
 8011534:	4618      	mov	r0, r3
 8011536:	f7fd fb45 	bl	800ebc4 <unlock_fs>
 801153a:	7dfb      	ldrb	r3, [r7, #23]
}
 801153c:	4618      	mov	r0, r3
 801153e:	3718      	adds	r7, #24
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b090      	sub	sp, #64	@ 0x40
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f107 0208 	add.w	r2, r7, #8
 8011554:	4611      	mov	r1, r2
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff fa60 	bl	8010a1c <validate>
 801155c:	4603      	mov	r3, r0
 801155e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011562:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011566:	2b00      	cmp	r3, #0
 8011568:	d103      	bne.n	8011572 <f_lseek+0x2e>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	7d5b      	ldrb	r3, [r3, #21]
 801156e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011572:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011576:	2b00      	cmp	r3, #0
 8011578:	d009      	beq.n	801158e <f_lseek+0x4a>
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7fd fb1e 	bl	800ebc4 <unlock_fs>
 8011588:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801158c:	e229      	b.n	80119e2 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011592:	2b00      	cmp	r3, #0
 8011594:	f000 80ea 	beq.w	801176c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159e:	d164      	bne.n	801166a <f_lseek+0x126>
			tbl = fp->cltbl;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115a4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80115a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a8:	1d1a      	adds	r2, r3, #4
 80115aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	617b      	str	r3, [r7, #20]
 80115b0:	2302      	movs	r3, #2
 80115b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	689b      	ldr	r3, [r3, #8]
 80115b8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80115ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d044      	beq.n	801164a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80115c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c2:	613b      	str	r3, [r7, #16]
 80115c4:	2300      	movs	r3, #0
 80115c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ca:	3302      	adds	r3, #2
 80115cc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80115ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d0:	60fb      	str	r3, [r7, #12]
 80115d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d4:	3301      	adds	r3, #1
 80115d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fd fd3c 	bl	800f05a <get_fat>
 80115e2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80115e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d809      	bhi.n	80115fe <f_lseek+0xba>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2202      	movs	r2, #2
 80115ee:	755a      	strb	r2, [r3, #21]
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	2102      	movs	r1, #2
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fd fae5 	bl	800ebc4 <unlock_fs>
 80115fa:	2302      	movs	r3, #2
 80115fc:	e1f1      	b.n	80119e2 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80115fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011604:	d109      	bne.n	801161a <f_lseek+0xd6>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2201      	movs	r2, #1
 801160a:	755a      	strb	r2, [r3, #21]
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	2101      	movs	r1, #1
 8011610:	4618      	mov	r0, r3
 8011612:	f7fd fad7 	bl	800ebc4 <unlock_fs>
 8011616:	2301      	movs	r3, #1
 8011618:	e1e3      	b.n	80119e2 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	3301      	adds	r3, #1
 801161e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011620:	429a      	cmp	r2, r3
 8011622:	d0d4      	beq.n	80115ce <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	429a      	cmp	r2, r3
 801162a:	d809      	bhi.n	8011640 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162e:	1d1a      	adds	r2, r3, #4
 8011630:	627a      	str	r2, [r7, #36]	@ 0x24
 8011632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011638:	1d1a      	adds	r2, r3, #4
 801163a:	627a      	str	r2, [r7, #36]	@ 0x24
 801163c:	693a      	ldr	r2, [r7, #16]
 801163e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	69db      	ldr	r3, [r3, #28]
 8011644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011646:	429a      	cmp	r2, r3
 8011648:	d3ba      	bcc.n	80115c0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801164e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011650:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	429a      	cmp	r2, r3
 8011658:	d803      	bhi.n	8011662 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165c:	2200      	movs	r2, #0
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	e1b6      	b.n	80119d0 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011662:	2311      	movs	r3, #17
 8011664:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011668:	e1b2      	b.n	80119d0 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	429a      	cmp	r2, r3
 8011672:	d902      	bls.n	801167a <f_lseek+0x136>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	683a      	ldr	r2, [r7, #0]
 801167e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 81a4 	beq.w	80119d0 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	3b01      	subs	r3, #1
 801168c:	4619      	mov	r1, r3
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f7fd ff71 	bl	800f576 <clmt_clust>
 8011694:	4602      	mov	r2, r0
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801169a:	68ba      	ldr	r2, [r7, #8]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	69db      	ldr	r3, [r3, #28]
 80116a0:	4619      	mov	r1, r3
 80116a2:	4610      	mov	r0, r2
 80116a4:	f7fd fcba 	bl	800f01c <clust2sect>
 80116a8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d109      	bne.n	80116c4 <f_lseek+0x180>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2202      	movs	r2, #2
 80116b4:	755a      	strb	r2, [r3, #21]
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2102      	movs	r1, #2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fd fa82 	bl	800ebc4 <unlock_fs>
 80116c0:	2302      	movs	r3, #2
 80116c2:	e18e      	b.n	80119e2 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	3b01      	subs	r3, #1
 80116c8:	0a5b      	lsrs	r3, r3, #9
 80116ca:	68ba      	ldr	r2, [r7, #8]
 80116cc:	8952      	ldrh	r2, [r2, #10]
 80116ce:	3a01      	subs	r2, #1
 80116d0:	4013      	ands	r3, r2
 80116d2:	69ba      	ldr	r2, [r7, #24]
 80116d4:	4413      	add	r3, r2
 80116d6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	699b      	ldr	r3, [r3, #24]
 80116dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8175 	beq.w	80119d0 <f_lseek+0x48c>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6a1b      	ldr	r3, [r3, #32]
 80116ea:	69ba      	ldr	r2, [r7, #24]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	f000 816f 	beq.w	80119d0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	7d1b      	ldrb	r3, [r3, #20]
 80116f6:	b25b      	sxtb	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	da1d      	bge.n	8011738 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	7858      	ldrb	r0, [r3, #1]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a1a      	ldr	r2, [r3, #32]
 801170a:	2301      	movs	r3, #1
 801170c:	f7fd f906 	bl	800e91c <disk_write>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d009      	beq.n	801172a <f_lseek+0x1e6>
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2201      	movs	r2, #1
 801171a:	755a      	strb	r2, [r3, #21]
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	2101      	movs	r1, #1
 8011720:	4618      	mov	r0, r3
 8011722:	f7fd fa4f 	bl	800ebc4 <unlock_fs>
 8011726:	2301      	movs	r3, #1
 8011728:	e15b      	b.n	80119e2 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	7d1b      	ldrb	r3, [r3, #20]
 801172e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011732:	b2da      	uxtb	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	7858      	ldrb	r0, [r3, #1]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011742:	2301      	movs	r3, #1
 8011744:	69ba      	ldr	r2, [r7, #24]
 8011746:	f7fd f8c9 	bl	800e8dc <disk_read>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d009      	beq.n	8011764 <f_lseek+0x220>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2201      	movs	r2, #1
 8011754:	755a      	strb	r2, [r3, #21]
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	2101      	movs	r1, #1
 801175a:	4618      	mov	r0, r3
 801175c:	f7fd fa32 	bl	800ebc4 <unlock_fs>
 8011760:	2301      	movs	r3, #1
 8011762:	e13e      	b.n	80119e2 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	69ba      	ldr	r2, [r7, #24]
 8011768:	621a      	str	r2, [r3, #32]
 801176a:	e131      	b.n	80119d0 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	68db      	ldr	r3, [r3, #12]
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	429a      	cmp	r2, r3
 8011774:	d908      	bls.n	8011788 <f_lseek+0x244>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	7d1b      	ldrb	r3, [r3, #20]
 801177a:	f003 0302 	and.w	r3, r3, #2
 801177e:	2b00      	cmp	r3, #0
 8011780:	d102      	bne.n	8011788 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801178e:	2300      	movs	r3, #0
 8011790:	637b      	str	r3, [r7, #52]	@ 0x34
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011796:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	f000 80c0 	beq.w	8011920 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	895b      	ldrh	r3, [r3, #10]
 80117a4:	025b      	lsls	r3, r3, #9
 80117a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80117a8:	6a3b      	ldr	r3, [r7, #32]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d01b      	beq.n	80117e6 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	1e5a      	subs	r2, r3, #1
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80117b8:	6a3b      	ldr	r3, [r7, #32]
 80117ba:	1e59      	subs	r1, r3, #1
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d30f      	bcc.n	80117e6 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80117c6:	6a3b      	ldr	r3, [r7, #32]
 80117c8:	1e5a      	subs	r2, r3, #1
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	425b      	negs	r3, r3
 80117ce:	401a      	ands	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	699b      	ldr	r3, [r3, #24]
 80117d8:	683a      	ldr	r2, [r7, #0]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	69db      	ldr	r3, [r3, #28]
 80117e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80117e4:	e02c      	b.n	8011840 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80117ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d123      	bne.n	801183a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2100      	movs	r1, #0
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fd fe25 	bl	800f446 <create_chain>
 80117fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80117fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011800:	2b01      	cmp	r3, #1
 8011802:	d109      	bne.n	8011818 <f_lseek+0x2d4>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2202      	movs	r2, #2
 8011808:	755a      	strb	r2, [r3, #21]
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	2102      	movs	r1, #2
 801180e:	4618      	mov	r0, r3
 8011810:	f7fd f9d8 	bl	800ebc4 <unlock_fs>
 8011814:	2302      	movs	r3, #2
 8011816:	e0e4      	b.n	80119e2 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181e:	d109      	bne.n	8011834 <f_lseek+0x2f0>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2201      	movs	r2, #1
 8011824:	755a      	strb	r2, [r3, #21]
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2101      	movs	r1, #1
 801182a:	4618      	mov	r0, r3
 801182c:	f7fd f9ca 	bl	800ebc4 <unlock_fs>
 8011830:	2301      	movs	r3, #1
 8011832:	e0d6      	b.n	80119e2 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011838:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801183e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011842:	2b00      	cmp	r3, #0
 8011844:	d06c      	beq.n	8011920 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8011846:	e044      	b.n	80118d2 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8011848:	683a      	ldr	r2, [r7, #0]
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	1ad3      	subs	r3, r2, r3
 801184e:	603b      	str	r3, [r7, #0]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	699a      	ldr	r2, [r3, #24]
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	441a      	add	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	7d1b      	ldrb	r3, [r3, #20]
 8011860:	f003 0302 	and.w	r3, r3, #2
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00b      	beq.n	8011880 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801186c:	4618      	mov	r0, r3
 801186e:	f7fd fdea 	bl	800f446 <create_chain>
 8011872:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011876:	2b00      	cmp	r3, #0
 8011878:	d108      	bne.n	801188c <f_lseek+0x348>
							ofs = 0; break;
 801187a:	2300      	movs	r3, #0
 801187c:	603b      	str	r3, [r7, #0]
 801187e:	e02c      	b.n	80118da <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd fbe8 	bl	800f05a <get_fat>
 801188a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011892:	d109      	bne.n	80118a8 <f_lseek+0x364>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2201      	movs	r2, #1
 8011898:	755a      	strb	r2, [r3, #21]
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2101      	movs	r1, #1
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fd f990 	bl	800ebc4 <unlock_fs>
 80118a4:	2301      	movs	r3, #1
 80118a6:	e09c      	b.n	80119e2 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80118a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d904      	bls.n	80118b8 <f_lseek+0x374>
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	69db      	ldr	r3, [r3, #28]
 80118b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d309      	bcc.n	80118cc <f_lseek+0x388>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2202      	movs	r2, #2
 80118bc:	755a      	strb	r2, [r3, #21]
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	2102      	movs	r1, #2
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fd f97e 	bl	800ebc4 <unlock_fs>
 80118c8:	2302      	movs	r3, #2
 80118ca:	e08a      	b.n	80119e2 <f_lseek+0x49e>
					fp->clust = clst;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118d0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80118d2:	683a      	ldr	r2, [r7, #0]
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d8b6      	bhi.n	8011848 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	699a      	ldr	r2, [r3, #24]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	441a      	add	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d017      	beq.n	8011920 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fd fb91 	bl	800f01c <clust2sect>
 80118fa:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80118fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d109      	bne.n	8011916 <f_lseek+0x3d2>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2202      	movs	r2, #2
 8011906:	755a      	strb	r2, [r3, #21]
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	2102      	movs	r1, #2
 801190c:	4618      	mov	r0, r3
 801190e:	f7fd f959 	bl	800ebc4 <unlock_fs>
 8011912:	2302      	movs	r3, #2
 8011914:	e065      	b.n	80119e2 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	0a5b      	lsrs	r3, r3, #9
 801191a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801191c:	4413      	add	r3, r2
 801191e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	699a      	ldr	r2, [r3, #24]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	429a      	cmp	r2, r3
 801192a:	d90a      	bls.n	8011942 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	699a      	ldr	r2, [r3, #24]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
 8011938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193c:	b2da      	uxtb	r2, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	699b      	ldr	r3, [r3, #24]
 8011946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801194a:	2b00      	cmp	r3, #0
 801194c:	d040      	beq.n	80119d0 <f_lseek+0x48c>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a1b      	ldr	r3, [r3, #32]
 8011952:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011954:	429a      	cmp	r2, r3
 8011956:	d03b      	beq.n	80119d0 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	7d1b      	ldrb	r3, [r3, #20]
 801195c:	b25b      	sxtb	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	da1d      	bge.n	801199e <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	7858      	ldrb	r0, [r3, #1]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a1a      	ldr	r2, [r3, #32]
 8011970:	2301      	movs	r3, #1
 8011972:	f7fc ffd3 	bl	800e91c <disk_write>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d009      	beq.n	8011990 <f_lseek+0x44c>
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2201      	movs	r2, #1
 8011980:	755a      	strb	r2, [r3, #21]
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2101      	movs	r1, #1
 8011986:	4618      	mov	r0, r3
 8011988:	f7fd f91c 	bl	800ebc4 <unlock_fs>
 801198c:	2301      	movs	r3, #1
 801198e:	e028      	b.n	80119e2 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	7d1b      	ldrb	r3, [r3, #20]
 8011994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011998:	b2da      	uxtb	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	7858      	ldrb	r0, [r3, #1]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80119a8:	2301      	movs	r3, #1
 80119aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119ac:	f7fc ff96 	bl	800e8dc <disk_read>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d009      	beq.n	80119ca <f_lseek+0x486>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2201      	movs	r2, #1
 80119ba:	755a      	strb	r2, [r3, #21]
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2101      	movs	r1, #1
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fd f8ff 	bl	800ebc4 <unlock_fs>
 80119c6:	2301      	movs	r3, #1
 80119c8:	e00b      	b.n	80119e2 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119ce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fd f8f3 	bl	800ebc4 <unlock_fs>
 80119de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3740      	adds	r7, #64	@ 0x40
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b084      	sub	sp, #16
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
 80119f2:	460b      	mov	r3, r1
 80119f4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80119f6:	78fb      	ldrb	r3, [r7, #3]
 80119f8:	2b0a      	cmp	r3, #10
 80119fa:	d103      	bne.n	8011a04 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80119fc:	210d      	movs	r1, #13
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff fff3 	bl	80119ea <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	db25      	blt.n	8011a5c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	60fa      	str	r2, [r7, #12]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	4413      	add	r3, r2
 8011a1a:	78fa      	ldrb	r2, [r7, #3]
 8011a1c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2b3c      	cmp	r3, #60	@ 0x3c
 8011a22:	dd12      	ble.n	8011a4a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6818      	ldr	r0, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f103 010c 	add.w	r1, r3, #12
 8011a2e:	68fa      	ldr	r2, [r7, #12]
 8011a30:	f107 0308 	add.w	r3, r7, #8
 8011a34:	f7ff fb59 	bl	80110ea <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d101      	bne.n	8011a44 <putc_bfd+0x5a>
 8011a40:	2300      	movs	r3, #0
 8011a42:	e001      	b.n	8011a48 <putc_bfd+0x5e>
 8011a44:	f04f 33ff 	mov.w	r3, #4294967295
 8011a48:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	689b      	ldr	r3, [r3, #8]
 8011a54:	1c5a      	adds	r2, r3, #1
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	609a      	str	r2, [r3, #8]
 8011a5a:	e000      	b.n	8011a5e <putc_bfd+0x74>
	if (i < 0) return;
 8011a5c:	bf00      	nop
}
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	db16      	blt.n	8011aa2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6818      	ldr	r0, [r3, #0]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f103 010c 	add.w	r1, r3, #12
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	461a      	mov	r2, r3
 8011a84:	f107 030c 	add.w	r3, r7, #12
 8011a88:	f7ff fb2f 	bl	80110ea <f_write>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d107      	bne.n	8011aa2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d102      	bne.n	8011aa2 <putc_flush+0x3e>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	e001      	b.n	8011aa6 <putc_flush+0x42>
	return EOF;
 8011aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}

08011aae <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011aae:	b480      	push	{r7}
 8011ab0:	b083      	sub	sp, #12
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
 8011ab6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	605a      	str	r2, [r3, #4]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	685a      	ldr	r2, [r3, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	609a      	str	r2, [r3, #8]
}
 8011acc:	bf00      	nop
 8011ace:	370c      	adds	r7, #12
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr

08011ad8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b096      	sub	sp, #88	@ 0x58
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8011ae2:	f107 030c 	add.w	r3, r7, #12
 8011ae6:	6839      	ldr	r1, [r7, #0]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7ff ffe0 	bl	8011aae <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8011aee:	e009      	b.n	8011b04 <f_puts+0x2c>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	1c5a      	adds	r2, r3, #1
 8011af4:	607a      	str	r2, [r7, #4]
 8011af6:	781a      	ldrb	r2, [r3, #0]
 8011af8:	f107 030c 	add.w	r3, r7, #12
 8011afc:	4611      	mov	r1, r2
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff ff73 	bl	80119ea <putc_bfd>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1f1      	bne.n	8011af0 <f_puts+0x18>
	return putc_flush(&pb);
 8011b0c:	f107 030c 	add.w	r3, r7, #12
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff ffa7 	bl	8011a64 <putc_flush>
 8011b16:	4603      	mov	r3, r0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3758      	adds	r7, #88	@ 0x58
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b087      	sub	sp, #28
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011b36:	4b1f      	ldr	r3, [pc, #124]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b38:	7a5b      	ldrb	r3, [r3, #9]
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d131      	bne.n	8011ba4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011b40:	4b1c      	ldr	r3, [pc, #112]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b42:	7a5b      	ldrb	r3, [r3, #9]
 8011b44:	b2db      	uxtb	r3, r3
 8011b46:	461a      	mov	r2, r3
 8011b48:	4b1a      	ldr	r3, [pc, #104]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b4e:	4b19      	ldr	r3, [pc, #100]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b50:	7a5b      	ldrb	r3, [r3, #9]
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	4a17      	ldr	r2, [pc, #92]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	4413      	add	r3, r2
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b5e:	4b15      	ldr	r3, [pc, #84]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b60:	7a5b      	ldrb	r3, [r3, #9]
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	461a      	mov	r2, r3
 8011b66:	4b13      	ldr	r3, [pc, #76]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b68:	4413      	add	r3, r2
 8011b6a:	79fa      	ldrb	r2, [r7, #7]
 8011b6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011b6e:	4b11      	ldr	r3, [pc, #68]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b70:	7a5b      	ldrb	r3, [r3, #9]
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	1c5a      	adds	r2, r3, #1
 8011b76:	b2d1      	uxtb	r1, r2
 8011b78:	4a0e      	ldr	r2, [pc, #56]	@ (8011bb4 <FATFS_LinkDriverEx+0x94>)
 8011b7a:	7251      	strb	r1, [r2, #9]
 8011b7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011b7e:	7dbb      	ldrb	r3, [r7, #22]
 8011b80:	3330      	adds	r3, #48	@ 0x30
 8011b82:	b2da      	uxtb	r2, r3
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	223a      	movs	r2, #58	@ 0x3a
 8011b8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	3302      	adds	r3, #2
 8011b94:	222f      	movs	r2, #47	@ 0x2f
 8011b96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	3303      	adds	r3, #3
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	371c      	adds	r7, #28
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop
 8011bb4:	200010ec 	.word	0x200010ec

08011bb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	6839      	ldr	r1, [r7, #0]
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7ff ffaa 	bl	8011b20 <FATFS_LinkDriverEx>
 8011bcc:	4603      	mov	r3, r0
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
	...

08011bd8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b085      	sub	sp, #20
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	4603      	mov	r3, r0
 8011be0:	6039      	str	r1, [r7, #0]
 8011be2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011be4:	88fb      	ldrh	r3, [r7, #6]
 8011be6:	2b7f      	cmp	r3, #127	@ 0x7f
 8011be8:	d802      	bhi.n	8011bf0 <ff_convert+0x18>
		c = chr;
 8011bea:	88fb      	ldrh	r3, [r7, #6]
 8011bec:	81fb      	strh	r3, [r7, #14]
 8011bee:	e025      	b.n	8011c3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d00b      	beq.n	8011c0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011bf6:	88fb      	ldrh	r3, [r7, #6]
 8011bf8:	2bff      	cmp	r3, #255	@ 0xff
 8011bfa:	d805      	bhi.n	8011c08 <ff_convert+0x30>
 8011bfc:	88fb      	ldrh	r3, [r7, #6]
 8011bfe:	3b80      	subs	r3, #128	@ 0x80
 8011c00:	4a12      	ldr	r2, [pc, #72]	@ (8011c4c <ff_convert+0x74>)
 8011c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c06:	e000      	b.n	8011c0a <ff_convert+0x32>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	81fb      	strh	r3, [r7, #14]
 8011c0c:	e016      	b.n	8011c3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011c0e:	2300      	movs	r3, #0
 8011c10:	81fb      	strh	r3, [r7, #14]
 8011c12:	e009      	b.n	8011c28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011c14:	89fb      	ldrh	r3, [r7, #14]
 8011c16:	4a0d      	ldr	r2, [pc, #52]	@ (8011c4c <ff_convert+0x74>)
 8011c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c1c:	88fa      	ldrh	r2, [r7, #6]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d006      	beq.n	8011c30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011c22:	89fb      	ldrh	r3, [r7, #14]
 8011c24:	3301      	adds	r3, #1
 8011c26:	81fb      	strh	r3, [r7, #14]
 8011c28:	89fb      	ldrh	r3, [r7, #14]
 8011c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011c2c:	d9f2      	bls.n	8011c14 <ff_convert+0x3c>
 8011c2e:	e000      	b.n	8011c32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011c30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011c32:	89fb      	ldrh	r3, [r7, #14]
 8011c34:	3380      	adds	r3, #128	@ 0x80
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011c3c:	89fb      	ldrh	r3, [r7, #14]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3714      	adds	r7, #20
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	08015b80 	.word	0x08015b80

08011c50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	4603      	mov	r3, r0
 8011c58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011c5a:	88fb      	ldrh	r3, [r7, #6]
 8011c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c60:	d201      	bcs.n	8011c66 <ff_wtoupper+0x16>
 8011c62:	4b3e      	ldr	r3, [pc, #248]	@ (8011d5c <ff_wtoupper+0x10c>)
 8011c64:	e000      	b.n	8011c68 <ff_wtoupper+0x18>
 8011c66:	4b3e      	ldr	r3, [pc, #248]	@ (8011d60 <ff_wtoupper+0x110>)
 8011c68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	1c9a      	adds	r2, r3, #2
 8011c6e:	617a      	str	r2, [r7, #20]
 8011c70:	881b      	ldrh	r3, [r3, #0]
 8011c72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011c74:	8a7b      	ldrh	r3, [r7, #18]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d068      	beq.n	8011d4c <ff_wtoupper+0xfc>
 8011c7a:	88fa      	ldrh	r2, [r7, #6]
 8011c7c:	8a7b      	ldrh	r3, [r7, #18]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d364      	bcc.n	8011d4c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	1c9a      	adds	r2, r3, #2
 8011c86:	617a      	str	r2, [r7, #20]
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	823b      	strh	r3, [r7, #16]
 8011c8c:	8a3b      	ldrh	r3, [r7, #16]
 8011c8e:	0a1b      	lsrs	r3, r3, #8
 8011c90:	81fb      	strh	r3, [r7, #14]
 8011c92:	8a3b      	ldrh	r3, [r7, #16]
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011c98:	88fa      	ldrh	r2, [r7, #6]
 8011c9a:	8a79      	ldrh	r1, [r7, #18]
 8011c9c:	8a3b      	ldrh	r3, [r7, #16]
 8011c9e:	440b      	add	r3, r1
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	da49      	bge.n	8011d38 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011ca4:	89fb      	ldrh	r3, [r7, #14]
 8011ca6:	2b08      	cmp	r3, #8
 8011ca8:	d84f      	bhi.n	8011d4a <ff_wtoupper+0xfa>
 8011caa:	a201      	add	r2, pc, #4	@ (adr r2, 8011cb0 <ff_wtoupper+0x60>)
 8011cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb0:	08011cd5 	.word	0x08011cd5
 8011cb4:	08011ce7 	.word	0x08011ce7
 8011cb8:	08011cfd 	.word	0x08011cfd
 8011cbc:	08011d05 	.word	0x08011d05
 8011cc0:	08011d0d 	.word	0x08011d0d
 8011cc4:	08011d15 	.word	0x08011d15
 8011cc8:	08011d1d 	.word	0x08011d1d
 8011ccc:	08011d25 	.word	0x08011d25
 8011cd0:	08011d2d 	.word	0x08011d2d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011cd4:	88fa      	ldrh	r2, [r7, #6]
 8011cd6:	8a7b      	ldrh	r3, [r7, #18]
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	697a      	ldr	r2, [r7, #20]
 8011cde:	4413      	add	r3, r2
 8011ce0:	881b      	ldrh	r3, [r3, #0]
 8011ce2:	80fb      	strh	r3, [r7, #6]
 8011ce4:	e027      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011ce6:	88fa      	ldrh	r2, [r7, #6]
 8011ce8:	8a7b      	ldrh	r3, [r7, #18]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	f003 0301 	and.w	r3, r3, #1
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	88fa      	ldrh	r2, [r7, #6]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	80fb      	strh	r3, [r7, #6]
 8011cfa:	e01c      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011cfc:	88fb      	ldrh	r3, [r7, #6]
 8011cfe:	3b10      	subs	r3, #16
 8011d00:	80fb      	strh	r3, [r7, #6]
 8011d02:	e018      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011d04:	88fb      	ldrh	r3, [r7, #6]
 8011d06:	3b20      	subs	r3, #32
 8011d08:	80fb      	strh	r3, [r7, #6]
 8011d0a:	e014      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011d0c:	88fb      	ldrh	r3, [r7, #6]
 8011d0e:	3b30      	subs	r3, #48	@ 0x30
 8011d10:	80fb      	strh	r3, [r7, #6]
 8011d12:	e010      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011d14:	88fb      	ldrh	r3, [r7, #6]
 8011d16:	3b1a      	subs	r3, #26
 8011d18:	80fb      	strh	r3, [r7, #6]
 8011d1a:	e00c      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011d1c:	88fb      	ldrh	r3, [r7, #6]
 8011d1e:	3308      	adds	r3, #8
 8011d20:	80fb      	strh	r3, [r7, #6]
 8011d22:	e008      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011d24:	88fb      	ldrh	r3, [r7, #6]
 8011d26:	3b50      	subs	r3, #80	@ 0x50
 8011d28:	80fb      	strh	r3, [r7, #6]
 8011d2a:	e004      	b.n	8011d36 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011d2c:	88fb      	ldrh	r3, [r7, #6]
 8011d2e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8011d32:	80fb      	strh	r3, [r7, #6]
 8011d34:	bf00      	nop
			}
			break;
 8011d36:	e008      	b.n	8011d4a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011d38:	89fb      	ldrh	r3, [r7, #14]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d195      	bne.n	8011c6a <ff_wtoupper+0x1a>
 8011d3e:	8a3b      	ldrh	r3, [r7, #16]
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	697a      	ldr	r2, [r7, #20]
 8011d44:	4413      	add	r3, r2
 8011d46:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011d48:	e78f      	b.n	8011c6a <ff_wtoupper+0x1a>
			break;
 8011d4a:	bf00      	nop
	}

	return chr;
 8011d4c:	88fb      	ldrh	r3, [r7, #6]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	371c      	adds	r7, #28
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	08015c80 	.word	0x08015c80
 8011d60:	08015e74 	.word	0x08015e74

08011d64 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	6039      	str	r1, [r7, #0]
 8011d6e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011d70:	2300      	movs	r3, #0
 8011d72:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011d74:	f107 0308 	add.w	r3, r7, #8
 8011d78:	2101      	movs	r1, #1
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 f8c4 	bl	8011f08 <osSemaphoreCreate>
 8011d80:	4602      	mov	r2, r0
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	bf14      	ite	ne
 8011d8e:	2301      	movne	r3, #1
 8011d90:	2300      	moveq	r3, #0
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	60fb      	str	r3, [r7, #12]

    return ret;
 8011d96:	68fb      	ldr	r3, [r7, #12]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3710      	adds	r7, #16
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 f94f 	bl	801204c <osSemaphoreDelete>
#endif
    return 1;
 8011dae:	2301      	movs	r3, #1
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011dc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f000 f8bb 	bl	8011f44 <osSemaphoreWait>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d101      	bne.n	8011dd8 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011de2:	b580      	push	{r7, lr}
 8011de4:	b082      	sub	sp, #8
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f8f8 	bl	8011fe0 <osSemaphoreRelease>
#endif
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	4603      	mov	r3, r0
 8011e00:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011e02:	2300      	movs	r3, #0
 8011e04:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e0a:	2b84      	cmp	r3, #132	@ 0x84
 8011e0c:	d005      	beq.n	8011e1a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011e0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	4413      	add	r3, r2
 8011e16:	3303      	adds	r3, #3
 8011e18:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e2e:	f3ef 8305 	mrs	r3, IPSR
 8011e32:	607b      	str	r3, [r7, #4]
  return(result);
 8011e34:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	bf14      	ite	ne
 8011e3a:	2301      	movne	r3, #1
 8011e3c:	2300      	moveq	r3, #0
 8011e3e:	b2db      	uxtb	r3, r3
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011e50:	f001 fc76 	bl	8013740 <vTaskStartScheduler>
  
  return osOK;
 8011e54:	2300      	movs	r3, #0
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011e5e:	f002 f899 	bl	8013f94 <xTaskGetSchedulerState>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d101      	bne.n	8011e6c <osKernelRunning+0x12>
    return 0;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	e000      	b.n	8011e6e <osKernelRunning+0x14>
  else
    return 1;
 8011e6c:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011e76:	f7ff ffd7 	bl	8011e28 <inHandlerMode>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d003      	beq.n	8011e88 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011e80:	f001 fd62 	bl	8013948 <xTaskGetTickCountFromISR>
 8011e84:	4603      	mov	r3, r0
 8011e86:	e002      	b.n	8011e8e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011e88:	f001 fd4e 	bl	8013928 <xTaskGetTickCount>
 8011e8c:	4603      	mov	r3, r0
  }
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e94:	b087      	sub	sp, #28
 8011e96:	af02      	add	r7, sp, #8
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	685c      	ldr	r4, [r3, #4]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ea8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff ffa1 	bl	8011df8 <makeFreeRtosPriority>
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	f107 030c 	add.w	r3, r7, #12
 8011ebc:	9301      	str	r3, [sp, #4]
 8011ebe:	9200      	str	r2, [sp, #0]
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	4632      	mov	r2, r6
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f001 f924 	bl	8013114 <xTaskCreate>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d001      	beq.n	8011ed6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	e000      	b.n	8011ed8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3714      	adds	r7, #20
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ee0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <osDelay+0x16>
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	e000      	b.n	8011ef8 <osDelay+0x18>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f001 fac7 	bl	801348c <vTaskDelay>
  
  return osOK;
 8011efe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	2b01      	cmp	r3, #1
 8011f16:	d110      	bne.n	8011f3a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011f18:	2203      	movs	r2, #3
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	2001      	movs	r0, #1
 8011f1e:	f000 fa8d 	bl	801243c <xQueueGenericCreate>
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d005      	beq.n	8011f36 <osSemaphoreCreate+0x2e>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2100      	movs	r1, #0
 8011f30:	68f8      	ldr	r0, [r7, #12]
 8011f32:	f000 fad9 	bl	80124e8 <xQueueGenericSend>
    return sema;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	e000      	b.n	8011f3c <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8011f3a:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3710      	adds	r7, #16
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011f4e:	2300      	movs	r3, #0
 8011f50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d101      	bne.n	8011f5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011f58:	2380      	movs	r3, #128	@ 0x80
 8011f5a:	e03a      	b.n	8011fd2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f66:	d103      	bne.n	8011f70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011f68:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	e009      	b.n	8011f84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d006      	beq.n	8011f84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d101      	bne.n	8011f84 <osSemaphoreWait+0x40>
      ticks = 1;
 8011f80:	2301      	movs	r3, #1
 8011f82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011f84:	f7ff ff50 	bl	8011e28 <inHandlerMode>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d017      	beq.n	8011fbe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011f8e:	f107 0308 	add.w	r3, r7, #8
 8011f92:	461a      	mov	r2, r3
 8011f94:	2100      	movs	r1, #0
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fec8 	bl	8012d2c <xQueueReceiveFromISR>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d001      	beq.n	8011fa6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011fa2:	23ff      	movs	r3, #255	@ 0xff
 8011fa4:	e015      	b.n	8011fd2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d011      	beq.n	8011fd0 <osSemaphoreWait+0x8c>
 8011fac:	4b0b      	ldr	r3, [pc, #44]	@ (8011fdc <osSemaphoreWait+0x98>)
 8011fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fb2:	601a      	str	r2, [r3, #0]
 8011fb4:	f3bf 8f4f 	dsb	sy
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	e008      	b.n	8011fd0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011fbe:	68f9      	ldr	r1, [r7, #12]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 fda3 	bl	8012b0c <xQueueSemaphoreTake>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d001      	beq.n	8011fd0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011fcc:	23ff      	movs	r3, #255	@ 0xff
 8011fce:	e000      	b.n	8011fd2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	e000ed04 	.word	0xe000ed04

08011fe0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011fec:	2300      	movs	r3, #0
 8011fee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011ff0:	f7ff ff1a 	bl	8011e28 <inHandlerMode>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d016      	beq.n	8012028 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011ffa:	f107 0308 	add.w	r3, r7, #8
 8011ffe:	4619      	mov	r1, r3
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 fc11 	bl	8012828 <xQueueGiveFromISR>
 8012006:	4603      	mov	r3, r0
 8012008:	2b01      	cmp	r3, #1
 801200a:	d001      	beq.n	8012010 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801200c:	23ff      	movs	r3, #255	@ 0xff
 801200e:	e017      	b.n	8012040 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d013      	beq.n	801203e <osSemaphoreRelease+0x5e>
 8012016:	4b0c      	ldr	r3, [pc, #48]	@ (8012048 <osSemaphoreRelease+0x68>)
 8012018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	f3bf 8f4f 	dsb	sy
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	e00a      	b.n	801203e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012028:	2300      	movs	r3, #0
 801202a:	2200      	movs	r2, #0
 801202c:	2100      	movs	r1, #0
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fa5a 	bl	80124e8 <xQueueGenericSend>
 8012034:	4603      	mov	r3, r0
 8012036:	2b01      	cmp	r3, #1
 8012038:	d001      	beq.n	801203e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801203a:	23ff      	movs	r3, #255	@ 0xff
 801203c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801203e:	68fb      	ldr	r3, [r7, #12]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3710      	adds	r7, #16
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	e000ed04 	.word	0xe000ed04

0801204c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012054:	f7ff fee8 	bl	8011e28 <inHandlerMode>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d001      	beq.n	8012062 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801205e:	2382      	movs	r3, #130	@ 0x82
 8012060:	e003      	b.n	801206a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 fee4 	bl	8012e30 <vQueueDelete>

  return osOK; 
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012072:	b580      	push	{r7, lr}
 8012074:	b082      	sub	sp, #8
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6818      	ldr	r0, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	2200      	movs	r2, #0
 8012086:	4619      	mov	r1, r3
 8012088:	f000 f9d8 	bl	801243c <xQueueGenericCreate>
 801208c:	4603      	mov	r3, r0
#endif
}
 801208e:	4618      	mov	r0, r3
 8012090:	3708      	adds	r7, #8
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
	...

08012098 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b086      	sub	sp, #24
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80120a4:	2300      	movs	r3, #0
 80120a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d101      	bne.n	80120b6 <osMessagePut+0x1e>
    ticks = 1;
 80120b2:	2301      	movs	r3, #1
 80120b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80120b6:	f7ff feb7 	bl	8011e28 <inHandlerMode>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d018      	beq.n	80120f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80120c0:	f107 0210 	add.w	r2, r7, #16
 80120c4:	f107 0108 	add.w	r1, r7, #8
 80120c8:	2300      	movs	r3, #0
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f000 fb0e 	bl	80126ec <xQueueGenericSendFromISR>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d001      	beq.n	80120da <osMessagePut+0x42>
      return osErrorOS;
 80120d6:	23ff      	movs	r3, #255	@ 0xff
 80120d8:	e018      	b.n	801210c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d014      	beq.n	801210a <osMessagePut+0x72>
 80120e0:	4b0c      	ldr	r3, [pc, #48]	@ (8012114 <osMessagePut+0x7c>)
 80120e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120e6:	601a      	str	r2, [r3, #0]
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	f3bf 8f6f 	isb	sy
 80120f0:	e00b      	b.n	801210a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80120f2:	f107 0108 	add.w	r1, r7, #8
 80120f6:	2300      	movs	r3, #0
 80120f8:	697a      	ldr	r2, [r7, #20]
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	f000 f9f4 	bl	80124e8 <xQueueGenericSend>
 8012100:	4603      	mov	r3, r0
 8012102:	2b01      	cmp	r3, #1
 8012104:	d001      	beq.n	801210a <osMessagePut+0x72>
      return osErrorOS;
 8012106:	23ff      	movs	r3, #255	@ 0xff
 8012108:	e000      	b.n	801210c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3718      	adds	r7, #24
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	e000ed04 	.word	0xe000ed04

08012118 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012118:	b590      	push	{r4, r7, lr}
 801211a:	b08b      	sub	sp, #44	@ 0x2c
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012128:	2300      	movs	r3, #0
 801212a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d10a      	bne.n	8012148 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012132:	2380      	movs	r3, #128	@ 0x80
 8012134:	617b      	str	r3, [r7, #20]
    return event;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	461c      	mov	r4, r3
 801213a:	f107 0314 	add.w	r3, r7, #20
 801213e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012146:	e054      	b.n	80121f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012148:	2300      	movs	r3, #0
 801214a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801214c:	2300      	movs	r3, #0
 801214e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012156:	d103      	bne.n	8012160 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012158:	f04f 33ff 	mov.w	r3, #4294967295
 801215c:	627b      	str	r3, [r7, #36]	@ 0x24
 801215e:	e009      	b.n	8012174 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d006      	beq.n	8012174 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216c:	2b00      	cmp	r3, #0
 801216e:	d101      	bne.n	8012174 <osMessageGet+0x5c>
      ticks = 1;
 8012170:	2301      	movs	r3, #1
 8012172:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012174:	f7ff fe58 	bl	8011e28 <inHandlerMode>
 8012178:	4603      	mov	r3, r0
 801217a:	2b00      	cmp	r3, #0
 801217c:	d01c      	beq.n	80121b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801217e:	f107 0220 	add.w	r2, r7, #32
 8012182:	f107 0314 	add.w	r3, r7, #20
 8012186:	3304      	adds	r3, #4
 8012188:	4619      	mov	r1, r3
 801218a:	68b8      	ldr	r0, [r7, #8]
 801218c:	f000 fdce 	bl	8012d2c <xQueueReceiveFromISR>
 8012190:	4603      	mov	r3, r0
 8012192:	2b01      	cmp	r3, #1
 8012194:	d102      	bne.n	801219c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012196:	2310      	movs	r3, #16
 8012198:	617b      	str	r3, [r7, #20]
 801219a:	e001      	b.n	80121a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801219c:	2300      	movs	r3, #0
 801219e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80121a0:	6a3b      	ldr	r3, [r7, #32]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d01d      	beq.n	80121e2 <osMessageGet+0xca>
 80121a6:	4b15      	ldr	r3, [pc, #84]	@ (80121fc <osMessageGet+0xe4>)
 80121a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121ac:	601a      	str	r2, [r3, #0]
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	e014      	b.n	80121e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80121b8:	f107 0314 	add.w	r3, r7, #20
 80121bc:	3304      	adds	r3, #4
 80121be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121c0:	4619      	mov	r1, r3
 80121c2:	68b8      	ldr	r0, [r7, #8]
 80121c4:	f000 fbc0 	bl	8012948 <xQueueReceive>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d102      	bne.n	80121d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80121ce:	2310      	movs	r3, #16
 80121d0:	617b      	str	r3, [r7, #20]
 80121d2:	e006      	b.n	80121e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80121d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d101      	bne.n	80121de <osMessageGet+0xc6>
 80121da:	2300      	movs	r3, #0
 80121dc:	e000      	b.n	80121e0 <osMessageGet+0xc8>
 80121de:	2340      	movs	r3, #64	@ 0x40
 80121e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	461c      	mov	r4, r3
 80121e6:	f107 0314 	add.w	r3, r7, #20
 80121ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80121ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	372c      	adds	r7, #44	@ 0x2c
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd90      	pop	{r4, r7, pc}
 80121fa:	bf00      	nop
 80121fc:	e000ed04 	.word	0xe000ed04

08012200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f103 0208 	add.w	r2, r3, #8
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f04f 32ff 	mov.w	r2, #4294967295
 8012218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f103 0208 	add.w	r2, r3, #8
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f103 0208 	add.w	r2, r3, #8
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2200      	movs	r2, #0
 8012232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2200      	movs	r2, #0
 801224c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801224e:	bf00      	nop
 8012250:	370c      	adds	r7, #12
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr

0801225a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801225a:	b480      	push	{r7}
 801225c:	b085      	sub	sp, #20
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	68fa      	ldr	r2, [r7, #12]
 801226e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	689a      	ldr	r2, [r3, #8]
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	683a      	ldr	r2, [r7, #0]
 8012284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	1c5a      	adds	r2, r3, #1
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	601a      	str	r2, [r3, #0]
}
 8012296:	bf00      	nop
 8012298:	3714      	adds	r7, #20
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr

080122a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122a2:	b480      	push	{r7}
 80122a4:	b085      	sub	sp, #20
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122b8:	d103      	bne.n	80122c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	60fb      	str	r3, [r7, #12]
 80122c0:	e00c      	b.n	80122dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	3308      	adds	r3, #8
 80122c6:	60fb      	str	r3, [r7, #12]
 80122c8:	e002      	b.n	80122d0 <vListInsert+0x2e>
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	60fb      	str	r3, [r7, #12]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68ba      	ldr	r2, [r7, #8]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d2f6      	bcs.n	80122ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	685a      	ldr	r2, [r3, #4]
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	683a      	ldr	r2, [r7, #0]
 80122ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	68fa      	ldr	r2, [r7, #12]
 80122f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	683a      	ldr	r2, [r7, #0]
 80122f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	687a      	ldr	r2, [r7, #4]
 80122fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	1c5a      	adds	r2, r3, #1
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	601a      	str	r2, [r3, #0]
}
 8012308:	bf00      	nop
 801230a:	3714      	adds	r7, #20
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012314:	b480      	push	{r7}
 8012316:	b085      	sub	sp, #20
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	6892      	ldr	r2, [r2, #8]
 801232a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	689b      	ldr	r3, [r3, #8]
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	6852      	ldr	r2, [r2, #4]
 8012334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	687a      	ldr	r2, [r7, #4]
 801233c:	429a      	cmp	r2, r3
 801233e:	d103      	bne.n	8012348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	689a      	ldr	r2, [r3, #8]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	1e5a      	subs	r2, r3, #1
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3714      	adds	r7, #20
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d10b      	bne.n	8012394 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801237c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012380:	f383 8811 	msr	BASEPRI, r3
 8012384:	f3bf 8f6f 	isb	sy
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801238e:	bf00      	nop
 8012390:	bf00      	nop
 8012392:	e7fd      	b.n	8012390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012394:	f002 f958 	bl	8014648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681a      	ldr	r2, [r3, #0]
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123a0:	68f9      	ldr	r1, [r7, #12]
 80123a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80123a4:	fb01 f303 	mul.w	r3, r1, r3
 80123a8:	441a      	add	r2, r3
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2200      	movs	r2, #0
 80123b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123c4:	3b01      	subs	r3, #1
 80123c6:	68f9      	ldr	r1, [r7, #12]
 80123c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80123ca:	fb01 f303 	mul.w	r3, r1, r3
 80123ce:	441a      	add	r2, r3
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	22ff      	movs	r2, #255	@ 0xff
 80123d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	22ff      	movs	r2, #255	@ 0xff
 80123e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d114      	bne.n	8012414 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d01a      	beq.n	8012428 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	3310      	adds	r3, #16
 80123f6:	4618      	mov	r0, r3
 80123f8:	f001 fbf4 	bl	8013be4 <xTaskRemoveFromEventList>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d012      	beq.n	8012428 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012402:	4b0d      	ldr	r3, [pc, #52]	@ (8012438 <xQueueGenericReset+0xd0>)
 8012404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012408:	601a      	str	r2, [r3, #0]
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	f3bf 8f6f 	isb	sy
 8012412:	e009      	b.n	8012428 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	3310      	adds	r3, #16
 8012418:	4618      	mov	r0, r3
 801241a:	f7ff fef1 	bl	8012200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3324      	adds	r3, #36	@ 0x24
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff feec 	bl	8012200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012428:	f002 f940 	bl	80146ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801242c:	2301      	movs	r3, #1
}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	e000ed04 	.word	0xe000ed04

0801243c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801243c:	b580      	push	{r7, lr}
 801243e:	b08a      	sub	sp, #40	@ 0x28
 8012440:	af02      	add	r7, sp, #8
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	4613      	mov	r3, r2
 8012448:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10b      	bne.n	8012468 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012454:	f383 8811 	msr	BASEPRI, r3
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	613b      	str	r3, [r7, #16]
}
 8012462:	bf00      	nop
 8012464:	bf00      	nop
 8012466:	e7fd      	b.n	8012464 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	fb02 f303 	mul.w	r3, r2, r3
 8012470:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012472:	69fb      	ldr	r3, [r7, #28]
 8012474:	3348      	adds	r3, #72	@ 0x48
 8012476:	4618      	mov	r0, r3
 8012478:	f002 fa08 	bl	801488c <pvPortMalloc>
 801247c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00d      	beq.n	80124a0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	3348      	adds	r3, #72	@ 0x48
 801248c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801248e:	79fa      	ldrb	r2, [r7, #7]
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	4613      	mov	r3, r2
 8012496:	697a      	ldr	r2, [r7, #20]
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	f000 f805 	bl	80124aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80124a0:	69bb      	ldr	r3, [r7, #24]
	}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3720      	adds	r7, #32
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b084      	sub	sp, #16
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	60f8      	str	r0, [r7, #12]
 80124b2:	60b9      	str	r1, [r7, #8]
 80124b4:	607a      	str	r2, [r7, #4]
 80124b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d103      	bne.n	80124c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	69ba      	ldr	r2, [r7, #24]
 80124c2:	601a      	str	r2, [r3, #0]
 80124c4:	e002      	b.n	80124cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80124cc:	69bb      	ldr	r3, [r7, #24]
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	68ba      	ldr	r2, [r7, #8]
 80124d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80124d8:	2101      	movs	r1, #1
 80124da:	69b8      	ldr	r0, [r7, #24]
 80124dc:	f7ff ff44 	bl	8012368 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80124e0:	bf00      	nop
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b08e      	sub	sp, #56	@ 0x38
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
 80124f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80124f6:	2300      	movs	r3, #0
 80124f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80124fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012500:	2b00      	cmp	r3, #0
 8012502:	d10b      	bne.n	801251c <xQueueGenericSend+0x34>
	__asm volatile
 8012504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012508:	f383 8811 	msr	BASEPRI, r3
 801250c:	f3bf 8f6f 	isb	sy
 8012510:	f3bf 8f4f 	dsb	sy
 8012514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012516:	bf00      	nop
 8012518:	bf00      	nop
 801251a:	e7fd      	b.n	8012518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d103      	bne.n	801252a <xQueueGenericSend+0x42>
 8012522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012526:	2b00      	cmp	r3, #0
 8012528:	d101      	bne.n	801252e <xQueueGenericSend+0x46>
 801252a:	2301      	movs	r3, #1
 801252c:	e000      	b.n	8012530 <xQueueGenericSend+0x48>
 801252e:	2300      	movs	r3, #0
 8012530:	2b00      	cmp	r3, #0
 8012532:	d10b      	bne.n	801254c <xQueueGenericSend+0x64>
	__asm volatile
 8012534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012538:	f383 8811 	msr	BASEPRI, r3
 801253c:	f3bf 8f6f 	isb	sy
 8012540:	f3bf 8f4f 	dsb	sy
 8012544:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012546:	bf00      	nop
 8012548:	bf00      	nop
 801254a:	e7fd      	b.n	8012548 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b02      	cmp	r3, #2
 8012550:	d103      	bne.n	801255a <xQueueGenericSend+0x72>
 8012552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012556:	2b01      	cmp	r3, #1
 8012558:	d101      	bne.n	801255e <xQueueGenericSend+0x76>
 801255a:	2301      	movs	r3, #1
 801255c:	e000      	b.n	8012560 <xQueueGenericSend+0x78>
 801255e:	2300      	movs	r3, #0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d10b      	bne.n	801257c <xQueueGenericSend+0x94>
	__asm volatile
 8012564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	623b      	str	r3, [r7, #32]
}
 8012576:	bf00      	nop
 8012578:	bf00      	nop
 801257a:	e7fd      	b.n	8012578 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801257c:	f001 fd0a 	bl	8013f94 <xTaskGetSchedulerState>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d102      	bne.n	801258c <xQueueGenericSend+0xa4>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d101      	bne.n	8012590 <xQueueGenericSend+0xa8>
 801258c:	2301      	movs	r3, #1
 801258e:	e000      	b.n	8012592 <xQueueGenericSend+0xaa>
 8012590:	2300      	movs	r3, #0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10b      	bne.n	80125ae <xQueueGenericSend+0xc6>
	__asm volatile
 8012596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801259a:	f383 8811 	msr	BASEPRI, r3
 801259e:	f3bf 8f6f 	isb	sy
 80125a2:	f3bf 8f4f 	dsb	sy
 80125a6:	61fb      	str	r3, [r7, #28]
}
 80125a8:	bf00      	nop
 80125aa:	bf00      	nop
 80125ac:	e7fd      	b.n	80125aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80125ae:	f002 f84b 	bl	8014648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80125b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80125b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d302      	bcc.n	80125c4 <xQueueGenericSend+0xdc>
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	2b02      	cmp	r3, #2
 80125c2:	d129      	bne.n	8012618 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80125c4:	683a      	ldr	r2, [r7, #0]
 80125c6:	68b9      	ldr	r1, [r7, #8]
 80125c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80125ca:	f000 fc68 	bl	8012e9e <prvCopyDataToQueue>
 80125ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80125d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d010      	beq.n	80125fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80125d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125da:	3324      	adds	r3, #36	@ 0x24
 80125dc:	4618      	mov	r0, r3
 80125de:	f001 fb01 	bl	8013be4 <xTaskRemoveFromEventList>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d013      	beq.n	8012610 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80125e8:	4b3f      	ldr	r3, [pc, #252]	@ (80126e8 <xQueueGenericSend+0x200>)
 80125ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	e00a      	b.n	8012610 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80125fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d007      	beq.n	8012610 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012600:	4b39      	ldr	r3, [pc, #228]	@ (80126e8 <xQueueGenericSend+0x200>)
 8012602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012606:	601a      	str	r2, [r3, #0]
 8012608:	f3bf 8f4f 	dsb	sy
 801260c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012610:	f002 f84c 	bl	80146ac <vPortExitCritical>
				return pdPASS;
 8012614:	2301      	movs	r3, #1
 8012616:	e063      	b.n	80126e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d103      	bne.n	8012626 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801261e:	f002 f845 	bl	80146ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012622:	2300      	movs	r3, #0
 8012624:	e05c      	b.n	80126e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012628:	2b00      	cmp	r3, #0
 801262a:	d106      	bne.n	801263a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801262c:	f107 0314 	add.w	r3, r7, #20
 8012630:	4618      	mov	r0, r3
 8012632:	f001 fb3b 	bl	8013cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012636:	2301      	movs	r3, #1
 8012638:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801263a:	f002 f837 	bl	80146ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801263e:	f001 f8c7 	bl	80137d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012642:	f002 f801 	bl	8014648 <vPortEnterCritical>
 8012646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801264c:	b25b      	sxtb	r3, r3
 801264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012652:	d103      	bne.n	801265c <xQueueGenericSend+0x174>
 8012654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012656:	2200      	movs	r2, #0
 8012658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801265c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801265e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012662:	b25b      	sxtb	r3, r3
 8012664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012668:	d103      	bne.n	8012672 <xQueueGenericSend+0x18a>
 801266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801266c:	2200      	movs	r2, #0
 801266e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012672:	f002 f81b 	bl	80146ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012676:	1d3a      	adds	r2, r7, #4
 8012678:	f107 0314 	add.w	r3, r7, #20
 801267c:	4611      	mov	r1, r2
 801267e:	4618      	mov	r0, r3
 8012680:	f001 fb2a 	bl	8013cd8 <xTaskCheckForTimeOut>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	d124      	bne.n	80126d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801268a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801268c:	f000 fcff 	bl	801308e <prvIsQueueFull>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d018      	beq.n	80126c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012698:	3310      	adds	r3, #16
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	4611      	mov	r1, r2
 801269e:	4618      	mov	r0, r3
 80126a0:	f001 fa7a 	bl	8013b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80126a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80126a6:	f000 fc8a 	bl	8012fbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80126aa:	f001 f89f 	bl	80137ec <xTaskResumeAll>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f47f af7c 	bne.w	80125ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80126b6:	4b0c      	ldr	r3, [pc, #48]	@ (80126e8 <xQueueGenericSend+0x200>)
 80126b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126bc:	601a      	str	r2, [r3, #0]
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	e772      	b.n	80125ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80126c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80126ca:	f000 fc78 	bl	8012fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126ce:	f001 f88d 	bl	80137ec <xTaskResumeAll>
 80126d2:	e76c      	b.n	80125ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80126d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80126d6:	f000 fc72 	bl	8012fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126da:	f001 f887 	bl	80137ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80126de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3738      	adds	r7, #56	@ 0x38
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	e000ed04 	.word	0xe000ed04

080126ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b090      	sub	sp, #64	@ 0x40
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
 80126f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80126fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10b      	bne.n	801271c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8012704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012716:	bf00      	nop
 8012718:	bf00      	nop
 801271a:	e7fd      	b.n	8012718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d103      	bne.n	801272a <xQueueGenericSendFromISR+0x3e>
 8012722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012726:	2b00      	cmp	r3, #0
 8012728:	d101      	bne.n	801272e <xQueueGenericSendFromISR+0x42>
 801272a:	2301      	movs	r3, #1
 801272c:	e000      	b.n	8012730 <xQueueGenericSendFromISR+0x44>
 801272e:	2300      	movs	r3, #0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d10b      	bne.n	801274c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8012734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012738:	f383 8811 	msr	BASEPRI, r3
 801273c:	f3bf 8f6f 	isb	sy
 8012740:	f3bf 8f4f 	dsb	sy
 8012744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012746:	bf00      	nop
 8012748:	bf00      	nop
 801274a:	e7fd      	b.n	8012748 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	2b02      	cmp	r3, #2
 8012750:	d103      	bne.n	801275a <xQueueGenericSendFromISR+0x6e>
 8012752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012756:	2b01      	cmp	r3, #1
 8012758:	d101      	bne.n	801275e <xQueueGenericSendFromISR+0x72>
 801275a:	2301      	movs	r3, #1
 801275c:	e000      	b.n	8012760 <xQueueGenericSendFromISR+0x74>
 801275e:	2300      	movs	r3, #0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d10b      	bne.n	801277c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8012764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012768:	f383 8811 	msr	BASEPRI, r3
 801276c:	f3bf 8f6f 	isb	sy
 8012770:	f3bf 8f4f 	dsb	sy
 8012774:	623b      	str	r3, [r7, #32]
}
 8012776:	bf00      	nop
 8012778:	bf00      	nop
 801277a:	e7fd      	b.n	8012778 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801277c:	f002 f844 	bl	8014808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012780:	f3ef 8211 	mrs	r2, BASEPRI
 8012784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012788:	f383 8811 	msr	BASEPRI, r3
 801278c:	f3bf 8f6f 	isb	sy
 8012790:	f3bf 8f4f 	dsb	sy
 8012794:	61fa      	str	r2, [r7, #28]
 8012796:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012798:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801279a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801279e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80127a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d302      	bcc.n	80127ae <xQueueGenericSendFromISR+0xc2>
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2b02      	cmp	r3, #2
 80127ac:	d12f      	bne.n	801280e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80127ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80127b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80127be:	683a      	ldr	r2, [r7, #0]
 80127c0:	68b9      	ldr	r1, [r7, #8]
 80127c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80127c4:	f000 fb6b 	bl	8012e9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80127c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80127cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127d0:	d112      	bne.n	80127f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d016      	beq.n	8012808 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127dc:	3324      	adds	r3, #36	@ 0x24
 80127de:	4618      	mov	r0, r3
 80127e0:	f001 fa00 	bl	8013be4 <xTaskRemoveFromEventList>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00e      	beq.n	8012808 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00b      	beq.n	8012808 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2201      	movs	r2, #1
 80127f4:	601a      	str	r2, [r3, #0]
 80127f6:	e007      	b.n	8012808 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80127f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80127fc:	3301      	adds	r3, #1
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	b25a      	sxtb	r2, r3
 8012802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012808:	2301      	movs	r3, #1
 801280a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801280c:	e001      	b.n	8012812 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801280e:	2300      	movs	r3, #0
 8012810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012814:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801281c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801281e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012820:	4618      	mov	r0, r3
 8012822:	3740      	adds	r7, #64	@ 0x40
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b08e      	sub	sp, #56	@ 0x38
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10b      	bne.n	8012854 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801283c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012840:	f383 8811 	msr	BASEPRI, r3
 8012844:	f3bf 8f6f 	isb	sy
 8012848:	f3bf 8f4f 	dsb	sy
 801284c:	623b      	str	r3, [r7, #32]
}
 801284e:	bf00      	nop
 8012850:	bf00      	nop
 8012852:	e7fd      	b.n	8012850 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00b      	beq.n	8012874 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012860:	f383 8811 	msr	BASEPRI, r3
 8012864:	f3bf 8f6f 	isb	sy
 8012868:	f3bf 8f4f 	dsb	sy
 801286c:	61fb      	str	r3, [r7, #28]
}
 801286e:	bf00      	nop
 8012870:	bf00      	nop
 8012872:	e7fd      	b.n	8012870 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d103      	bne.n	8012884 <xQueueGiveFromISR+0x5c>
 801287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801287e:	689b      	ldr	r3, [r3, #8]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <xQueueGiveFromISR+0x60>
 8012884:	2301      	movs	r3, #1
 8012886:	e000      	b.n	801288a <xQueueGiveFromISR+0x62>
 8012888:	2300      	movs	r3, #0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10b      	bne.n	80128a6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	61bb      	str	r3, [r7, #24]
}
 80128a0:	bf00      	nop
 80128a2:	bf00      	nop
 80128a4:	e7fd      	b.n	80128a2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128a6:	f001 ffaf 	bl	8014808 <vPortValidateInterruptPriority>
	__asm volatile
 80128aa:	f3ef 8211 	mrs	r2, BASEPRI
 80128ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	617a      	str	r2, [r7, #20]
 80128c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80128c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80128cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d22b      	bcs.n	801292e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80128dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e2:	1c5a      	adds	r2, r3, #1
 80128e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80128e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80128ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f0:	d112      	bne.n	8012918 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d016      	beq.n	8012928 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128fc:	3324      	adds	r3, #36	@ 0x24
 80128fe:	4618      	mov	r0, r3
 8012900:	f001 f970 	bl	8013be4 <xTaskRemoveFromEventList>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00e      	beq.n	8012928 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00b      	beq.n	8012928 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	2201      	movs	r2, #1
 8012914:	601a      	str	r2, [r3, #0]
 8012916:	e007      	b.n	8012928 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801291c:	3301      	adds	r3, #1
 801291e:	b2db      	uxtb	r3, r3
 8012920:	b25a      	sxtb	r2, r3
 8012922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012928:	2301      	movs	r3, #1
 801292a:	637b      	str	r3, [r7, #52]	@ 0x34
 801292c:	e001      	b.n	8012932 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801292e:	2300      	movs	r3, #0
 8012930:	637b      	str	r3, [r7, #52]	@ 0x34
 8012932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012934:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f383 8811 	msr	BASEPRI, r3
}
 801293c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801293e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012940:	4618      	mov	r0, r3
 8012942:	3738      	adds	r7, #56	@ 0x38
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b08c      	sub	sp, #48	@ 0x30
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012954:	2300      	movs	r3, #0
 8012956:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10b      	bne.n	801297a <xQueueReceive+0x32>
	__asm volatile
 8012962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012966:	f383 8811 	msr	BASEPRI, r3
 801296a:	f3bf 8f6f 	isb	sy
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	623b      	str	r3, [r7, #32]
}
 8012974:	bf00      	nop
 8012976:	bf00      	nop
 8012978:	e7fd      	b.n	8012976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d103      	bne.n	8012988 <xQueueReceive+0x40>
 8012980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012984:	2b00      	cmp	r3, #0
 8012986:	d101      	bne.n	801298c <xQueueReceive+0x44>
 8012988:	2301      	movs	r3, #1
 801298a:	e000      	b.n	801298e <xQueueReceive+0x46>
 801298c:	2300      	movs	r3, #0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d10b      	bne.n	80129aa <xQueueReceive+0x62>
	__asm volatile
 8012992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012996:	f383 8811 	msr	BASEPRI, r3
 801299a:	f3bf 8f6f 	isb	sy
 801299e:	f3bf 8f4f 	dsb	sy
 80129a2:	61fb      	str	r3, [r7, #28]
}
 80129a4:	bf00      	nop
 80129a6:	bf00      	nop
 80129a8:	e7fd      	b.n	80129a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129aa:	f001 faf3 	bl	8013f94 <xTaskGetSchedulerState>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <xQueueReceive+0x72>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d101      	bne.n	80129be <xQueueReceive+0x76>
 80129ba:	2301      	movs	r3, #1
 80129bc:	e000      	b.n	80129c0 <xQueueReceive+0x78>
 80129be:	2300      	movs	r3, #0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10b      	bne.n	80129dc <xQueueReceive+0x94>
	__asm volatile
 80129c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c8:	f383 8811 	msr	BASEPRI, r3
 80129cc:	f3bf 8f6f 	isb	sy
 80129d0:	f3bf 8f4f 	dsb	sy
 80129d4:	61bb      	str	r3, [r7, #24]
}
 80129d6:	bf00      	nop
 80129d8:	bf00      	nop
 80129da:	e7fd      	b.n	80129d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80129dc:	f001 fe34 	bl	8014648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80129e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80129e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d01f      	beq.n	8012a2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80129ec:	68b9      	ldr	r1, [r7, #8]
 80129ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80129f0:	f000 fabf 	bl	8012f72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80129f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f6:	1e5a      	subs	r2, r3, #1
 80129f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129fe:	691b      	ldr	r3, [r3, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00f      	beq.n	8012a24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a06:	3310      	adds	r3, #16
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f001 f8eb 	bl	8013be4 <xTaskRemoveFromEventList>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d007      	beq.n	8012a24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012a14:	4b3c      	ldr	r3, [pc, #240]	@ (8012b08 <xQueueReceive+0x1c0>)
 8012a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a1a:	601a      	str	r2, [r3, #0]
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a24:	f001 fe42 	bl	80146ac <vPortExitCritical>
				return pdPASS;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	e069      	b.n	8012b00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d103      	bne.n	8012a3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012a32:	f001 fe3b 	bl	80146ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a36:	2300      	movs	r3, #0
 8012a38:	e062      	b.n	8012b00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d106      	bne.n	8012a4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a40:	f107 0310 	add.w	r3, r7, #16
 8012a44:	4618      	mov	r0, r3
 8012a46:	f001 f931 	bl	8013cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a4e:	f001 fe2d 	bl	80146ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a52:	f000 febd 	bl	80137d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a56:	f001 fdf7 	bl	8014648 <vPortEnterCritical>
 8012a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012a60:	b25b      	sxtb	r3, r3
 8012a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a66:	d103      	bne.n	8012a70 <xQueueReceive+0x128>
 8012a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012a76:	b25b      	sxtb	r3, r3
 8012a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a7c:	d103      	bne.n	8012a86 <xQueueReceive+0x13e>
 8012a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a80:	2200      	movs	r2, #0
 8012a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012a86:	f001 fe11 	bl	80146ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a8a:	1d3a      	adds	r2, r7, #4
 8012a8c:	f107 0310 	add.w	r3, r7, #16
 8012a90:	4611      	mov	r1, r2
 8012a92:	4618      	mov	r0, r3
 8012a94:	f001 f920 	bl	8013cd8 <xTaskCheckForTimeOut>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d123      	bne.n	8012ae6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012aa0:	f000 fadf 	bl	8013062 <prvIsQueueEmpty>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d017      	beq.n	8012ada <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aac:	3324      	adds	r3, #36	@ 0x24
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f001 f870 	bl	8013b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012aba:	f000 fa80 	bl	8012fbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012abe:	f000 fe95 	bl	80137ec <xTaskResumeAll>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d189      	bne.n	80129dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8012b08 <xQueueReceive+0x1c0>)
 8012aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ace:	601a      	str	r2, [r3, #0]
 8012ad0:	f3bf 8f4f 	dsb	sy
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	e780      	b.n	80129dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012adc:	f000 fa6f 	bl	8012fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012ae0:	f000 fe84 	bl	80137ec <xTaskResumeAll>
 8012ae4:	e77a      	b.n	80129dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012ae8:	f000 fa69 	bl	8012fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012aec:	f000 fe7e 	bl	80137ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012af2:	f000 fab6 	bl	8013062 <prvIsQueueEmpty>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f43f af6f 	beq.w	80129dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012afe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3730      	adds	r7, #48	@ 0x30
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	e000ed04 	.word	0xe000ed04

08012b0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b08e      	sub	sp, #56	@ 0x38
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b16:	2300      	movs	r3, #0
 8012b18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d10b      	bne.n	8012b40 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8012b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b2c:	f383 8811 	msr	BASEPRI, r3
 8012b30:	f3bf 8f6f 	isb	sy
 8012b34:	f3bf 8f4f 	dsb	sy
 8012b38:	623b      	str	r3, [r7, #32]
}
 8012b3a:	bf00      	nop
 8012b3c:	bf00      	nop
 8012b3e:	e7fd      	b.n	8012b3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d00b      	beq.n	8012b60 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4c:	f383 8811 	msr	BASEPRI, r3
 8012b50:	f3bf 8f6f 	isb	sy
 8012b54:	f3bf 8f4f 	dsb	sy
 8012b58:	61fb      	str	r3, [r7, #28]
}
 8012b5a:	bf00      	nop
 8012b5c:	bf00      	nop
 8012b5e:	e7fd      	b.n	8012b5c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b60:	f001 fa18 	bl	8013f94 <xTaskGetSchedulerState>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d102      	bne.n	8012b70 <xQueueSemaphoreTake+0x64>
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d101      	bne.n	8012b74 <xQueueSemaphoreTake+0x68>
 8012b70:	2301      	movs	r3, #1
 8012b72:	e000      	b.n	8012b76 <xQueueSemaphoreTake+0x6a>
 8012b74:	2300      	movs	r3, #0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10b      	bne.n	8012b92 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7e:	f383 8811 	msr	BASEPRI, r3
 8012b82:	f3bf 8f6f 	isb	sy
 8012b86:	f3bf 8f4f 	dsb	sy
 8012b8a:	61bb      	str	r3, [r7, #24]
}
 8012b8c:	bf00      	nop
 8012b8e:	bf00      	nop
 8012b90:	e7fd      	b.n	8012b8e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b92:	f001 fd59 	bl	8014648 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d024      	beq.n	8012bec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba4:	1e5a      	subs	r2, r3, #1
 8012ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ba8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d104      	bne.n	8012bbc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012bb2:	f001 fb9b 	bl	80142ec <pvTaskIncrementMutexHeldCount>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bbe:	691b      	ldr	r3, [r3, #16]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00f      	beq.n	8012be4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc6:	3310      	adds	r3, #16
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f001 f80b 	bl	8013be4 <xTaskRemoveFromEventList>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d007      	beq.n	8012be4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012bd4:	4b54      	ldr	r3, [pc, #336]	@ (8012d28 <xQueueSemaphoreTake+0x21c>)
 8012bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bda:	601a      	str	r2, [r3, #0]
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012be4:	f001 fd62 	bl	80146ac <vPortExitCritical>
				return pdPASS;
 8012be8:	2301      	movs	r3, #1
 8012bea:	e098      	b.n	8012d1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d112      	bne.n	8012c18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d00b      	beq.n	8012c10 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8012bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bfc:	f383 8811 	msr	BASEPRI, r3
 8012c00:	f3bf 8f6f 	isb	sy
 8012c04:	f3bf 8f4f 	dsb	sy
 8012c08:	617b      	str	r3, [r7, #20]
}
 8012c0a:	bf00      	nop
 8012c0c:	bf00      	nop
 8012c0e:	e7fd      	b.n	8012c0c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012c10:	f001 fd4c 	bl	80146ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c14:	2300      	movs	r3, #0
 8012c16:	e082      	b.n	8012d1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d106      	bne.n	8012c2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c1e:	f107 030c 	add.w	r3, r7, #12
 8012c22:	4618      	mov	r0, r3
 8012c24:	f001 f842 	bl	8013cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c2c:	f001 fd3e 	bl	80146ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c30:	f000 fdce 	bl	80137d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c34:	f001 fd08 	bl	8014648 <vPortEnterCritical>
 8012c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012c3e:	b25b      	sxtb	r3, r3
 8012c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c44:	d103      	bne.n	8012c4e <xQueueSemaphoreTake+0x142>
 8012c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c54:	b25b      	sxtb	r3, r3
 8012c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c5a:	d103      	bne.n	8012c64 <xQueueSemaphoreTake+0x158>
 8012c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012c64:	f001 fd22 	bl	80146ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c68:	463a      	mov	r2, r7
 8012c6a:	f107 030c 	add.w	r3, r7, #12
 8012c6e:	4611      	mov	r1, r2
 8012c70:	4618      	mov	r0, r3
 8012c72:	f001 f831 	bl	8013cd8 <xTaskCheckForTimeOut>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d132      	bne.n	8012ce2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c7e:	f000 f9f0 	bl	8013062 <prvIsQueueEmpty>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d026      	beq.n	8012cd6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d109      	bne.n	8012ca4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012c90:	f001 fcda 	bl	8014648 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f001 f999 	bl	8013fd0 <xTaskPriorityInherit>
 8012c9e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012ca0:	f001 fd04 	bl	80146ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca6:	3324      	adds	r3, #36	@ 0x24
 8012ca8:	683a      	ldr	r2, [r7, #0]
 8012caa:	4611      	mov	r1, r2
 8012cac:	4618      	mov	r0, r3
 8012cae:	f000 ff73 	bl	8013b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012cb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cb4:	f000 f983 	bl	8012fbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012cb8:	f000 fd98 	bl	80137ec <xTaskResumeAll>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f47f af67 	bne.w	8012b92 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012cc4:	4b18      	ldr	r3, [pc, #96]	@ (8012d28 <xQueueSemaphoreTake+0x21c>)
 8012cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cca:	601a      	str	r2, [r3, #0]
 8012ccc:	f3bf 8f4f 	dsb	sy
 8012cd0:	f3bf 8f6f 	isb	sy
 8012cd4:	e75d      	b.n	8012b92 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012cd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cd8:	f000 f971 	bl	8012fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012cdc:	f000 fd86 	bl	80137ec <xTaskResumeAll>
 8012ce0:	e757      	b.n	8012b92 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ce4:	f000 f96b 	bl	8012fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ce8:	f000 fd80 	bl	80137ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cee:	f000 f9b8 	bl	8013062 <prvIsQueueEmpty>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f43f af4c 	beq.w	8012b92 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d00d      	beq.n	8012d1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012d00:	f001 fca2 	bl	8014648 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012d04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d06:	f000 f8b2 	bl	8012e6e <prvGetDisinheritPriorityAfterTimeout>
 8012d0a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012d12:	4618      	mov	r0, r3
 8012d14:	f001 fa5a 	bl	80141cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012d18:	f001 fcc8 	bl	80146ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3738      	adds	r7, #56	@ 0x38
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	e000ed04 	.word	0xe000ed04

08012d2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b08e      	sub	sp, #56	@ 0x38
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d10b      	bne.n	8012d5a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8012d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d46:	f383 8811 	msr	BASEPRI, r3
 8012d4a:	f3bf 8f6f 	isb	sy
 8012d4e:	f3bf 8f4f 	dsb	sy
 8012d52:	623b      	str	r3, [r7, #32]
}
 8012d54:	bf00      	nop
 8012d56:	bf00      	nop
 8012d58:	e7fd      	b.n	8012d56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d103      	bne.n	8012d68 <xQueueReceiveFromISR+0x3c>
 8012d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d101      	bne.n	8012d6c <xQueueReceiveFromISR+0x40>
 8012d68:	2301      	movs	r3, #1
 8012d6a:	e000      	b.n	8012d6e <xQueueReceiveFromISR+0x42>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d10b      	bne.n	8012d8a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8012d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	61fb      	str	r3, [r7, #28]
}
 8012d84:	bf00      	nop
 8012d86:	bf00      	nop
 8012d88:	e7fd      	b.n	8012d86 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d8a:	f001 fd3d 	bl	8014808 <vPortValidateInterruptPriority>
	__asm volatile
 8012d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8012d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d96:	f383 8811 	msr	BASEPRI, r3
 8012d9a:	f3bf 8f6f 	isb	sy
 8012d9e:	f3bf 8f4f 	dsb	sy
 8012da2:	61ba      	str	r2, [r7, #24]
 8012da4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012da6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d02f      	beq.n	8012e16 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012dc0:	68b9      	ldr	r1, [r7, #8]
 8012dc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012dc4:	f000 f8d5 	bl	8012f72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dca:	1e5a      	subs	r2, r3, #1
 8012dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012dd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd8:	d112      	bne.n	8012e00 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ddc:	691b      	ldr	r3, [r3, #16]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d016      	beq.n	8012e10 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de4:	3310      	adds	r3, #16
 8012de6:	4618      	mov	r0, r3
 8012de8:	f000 fefc 	bl	8013be4 <xTaskRemoveFromEventList>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00e      	beq.n	8012e10 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00b      	beq.n	8012e10 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2201      	movs	r2, #1
 8012dfc:	601a      	str	r2, [r3, #0]
 8012dfe:	e007      	b.n	8012e10 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e04:	3301      	adds	r3, #1
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	b25a      	sxtb	r2, r3
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8012e10:	2301      	movs	r3, #1
 8012e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e14:	e001      	b.n	8012e1a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8012e16:	2300      	movs	r3, #0
 8012e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	f383 8811 	msr	BASEPRI, r3
}
 8012e24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3738      	adds	r7, #56	@ 0x38
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b084      	sub	sp, #16
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d10b      	bne.n	8012e5a <vQueueDelete+0x2a>
	__asm volatile
 8012e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e46:	f383 8811 	msr	BASEPRI, r3
 8012e4a:	f3bf 8f6f 	isb	sy
 8012e4e:	f3bf 8f4f 	dsb	sy
 8012e52:	60bb      	str	r3, [r7, #8]
}
 8012e54:	bf00      	nop
 8012e56:	bf00      	nop
 8012e58:	e7fd      	b.n	8012e56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f000 f930 	bl	80130c0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8012e60:	68f8      	ldr	r0, [r7, #12]
 8012e62:	f001 fde1 	bl	8014a28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012e66:	bf00      	nop
 8012e68:	3710      	adds	r7, #16
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e6e:	b480      	push	{r7}
 8012e70:	b085      	sub	sp, #20
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d006      	beq.n	8012e8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	f1c3 0307 	rsb	r3, r3, #7
 8012e88:	60fb      	str	r3, [r7, #12]
 8012e8a:	e001      	b.n	8012e90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012e90:	68fb      	ldr	r3, [r7, #12]
	}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3714      	adds	r7, #20
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr

08012e9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b086      	sub	sp, #24
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	60f8      	str	r0, [r7, #12]
 8012ea6:	60b9      	str	r1, [r7, #8]
 8012ea8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eb2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d10d      	bne.n	8012ed8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d14d      	bne.n	8012f60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f001 f8f7 	bl	80140bc <xTaskPriorityDisinherit>
 8012ece:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	609a      	str	r2, [r3, #8]
 8012ed6:	e043      	b.n	8012f60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d119      	bne.n	8012f12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	6858      	ldr	r0, [r3, #4]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	68b9      	ldr	r1, [r7, #8]
 8012eea:	f001 ffcb 	bl	8014e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	685a      	ldr	r2, [r3, #4]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ef6:	441a      	add	r2, r3
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	685a      	ldr	r2, [r3, #4]
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d32b      	bcc.n	8012f60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	605a      	str	r2, [r3, #4]
 8012f10:	e026      	b.n	8012f60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	68d8      	ldr	r0, [r3, #12]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	68b9      	ldr	r1, [r7, #8]
 8012f1e:	f001 ffb1 	bl	8014e84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	68da      	ldr	r2, [r3, #12]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f2a:	425b      	negs	r3, r3
 8012f2c:	441a      	add	r2, r3
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	68da      	ldr	r2, [r3, #12]
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d207      	bcs.n	8012f4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	689a      	ldr	r2, [r3, #8]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f46:	425b      	negs	r3, r3
 8012f48:	441a      	add	r2, r3
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2b02      	cmp	r3, #2
 8012f52:	d105      	bne.n	8012f60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d002      	beq.n	8012f60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	1c5a      	adds	r2, r3, #1
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012f68:	697b      	ldr	r3, [r7, #20]
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3718      	adds	r7, #24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b082      	sub	sp, #8
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d018      	beq.n	8012fb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	68da      	ldr	r2, [r3, #12]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f8c:	441a      	add	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	68da      	ldr	r2, [r3, #12]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d303      	bcc.n	8012fa6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	68d9      	ldr	r1, [r3, #12]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fae:	461a      	mov	r2, r3
 8012fb0:	6838      	ldr	r0, [r7, #0]
 8012fb2:	f001 ff67 	bl	8014e84 <memcpy>
	}
}
 8012fb6:	bf00      	nop
 8012fb8:	3708      	adds	r7, #8
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b084      	sub	sp, #16
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012fc6:	f001 fb3f 	bl	8014648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012fd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fd2:	e011      	b.n	8012ff8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d012      	beq.n	8013002 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	3324      	adds	r3, #36	@ 0x24
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f000 fdff 	bl	8013be4 <xTaskRemoveFromEventList>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d001      	beq.n	8012ff0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012fec:	f000 fed8 	bl	8013da0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ff0:	7bfb      	ldrb	r3, [r7, #15]
 8012ff2:	3b01      	subs	r3, #1
 8012ff4:	b2db      	uxtb	r3, r3
 8012ff6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	dce9      	bgt.n	8012fd4 <prvUnlockQueue+0x16>
 8013000:	e000      	b.n	8013004 <prvUnlockQueue+0x46>
					break;
 8013002:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	22ff      	movs	r2, #255	@ 0xff
 8013008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801300c:	f001 fb4e 	bl	80146ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013010:	f001 fb1a 	bl	8014648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801301a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801301c:	e011      	b.n	8013042 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d012      	beq.n	801304c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	3310      	adds	r3, #16
 801302a:	4618      	mov	r0, r3
 801302c:	f000 fdda 	bl	8013be4 <xTaskRemoveFromEventList>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013036:	f000 feb3 	bl	8013da0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801303a:	7bbb      	ldrb	r3, [r7, #14]
 801303c:	3b01      	subs	r3, #1
 801303e:	b2db      	uxtb	r3, r3
 8013040:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013046:	2b00      	cmp	r3, #0
 8013048:	dce9      	bgt.n	801301e <prvUnlockQueue+0x60>
 801304a:	e000      	b.n	801304e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801304c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	22ff      	movs	r2, #255	@ 0xff
 8013052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013056:	f001 fb29 	bl	80146ac <vPortExitCritical>
}
 801305a:	bf00      	nop
 801305c:	3710      	adds	r7, #16
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}

08013062 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013062:	b580      	push	{r7, lr}
 8013064:	b084      	sub	sp, #16
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801306a:	f001 faed 	bl	8014648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013072:	2b00      	cmp	r3, #0
 8013074:	d102      	bne.n	801307c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013076:	2301      	movs	r3, #1
 8013078:	60fb      	str	r3, [r7, #12]
 801307a:	e001      	b.n	8013080 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801307c:	2300      	movs	r3, #0
 801307e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013080:	f001 fb14 	bl	80146ac <vPortExitCritical>

	return xReturn;
 8013084:	68fb      	ldr	r3, [r7, #12]
}
 8013086:	4618      	mov	r0, r3
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801308e:	b580      	push	{r7, lr}
 8013090:	b084      	sub	sp, #16
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013096:	f001 fad7 	bl	8014648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d102      	bne.n	80130ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80130a6:	2301      	movs	r3, #1
 80130a8:	60fb      	str	r3, [r7, #12]
 80130aa:	e001      	b.n	80130b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80130ac:	2300      	movs	r3, #0
 80130ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130b0:	f001 fafc 	bl	80146ac <vPortExitCritical>

	return xReturn;
 80130b4:	68fb      	ldr	r3, [r7, #12]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3710      	adds	r7, #16
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
	...

080130c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130c8:	2300      	movs	r3, #0
 80130ca:	60fb      	str	r3, [r7, #12]
 80130cc:	e016      	b.n	80130fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80130ce:	4a10      	ldr	r2, [pc, #64]	@ (8013110 <vQueueUnregisterQueue+0x50>)
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	4413      	add	r3, r2
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d10b      	bne.n	80130f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80130de:	4a0c      	ldr	r2, [pc, #48]	@ (8013110 <vQueueUnregisterQueue+0x50>)
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2100      	movs	r1, #0
 80130e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80130e8:	4a09      	ldr	r2, [pc, #36]	@ (8013110 <vQueueUnregisterQueue+0x50>)
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	00db      	lsls	r3, r3, #3
 80130ee:	4413      	add	r3, r2
 80130f0:	2200      	movs	r2, #0
 80130f2:	605a      	str	r2, [r3, #4]
				break;
 80130f4:	e006      	b.n	8013104 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	3301      	adds	r3, #1
 80130fa:	60fb      	str	r3, [r7, #12]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2b07      	cmp	r3, #7
 8013100:	d9e5      	bls.n	80130ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013102:	bf00      	nop
 8013104:	bf00      	nop
 8013106:	3714      	adds	r7, #20
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr
 8013110:	200010f8 	.word	0x200010f8

08013114 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013114:	b580      	push	{r7, lr}
 8013116:	b08c      	sub	sp, #48	@ 0x30
 8013118:	af04      	add	r7, sp, #16
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	603b      	str	r3, [r7, #0]
 8013120:	4613      	mov	r3, r2
 8013122:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013124:	88fb      	ldrh	r3, [r7, #6]
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4618      	mov	r0, r3
 801312a:	f001 fbaf 	bl	801488c <pvPortMalloc>
 801312e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d00e      	beq.n	8013154 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013136:	2054      	movs	r0, #84	@ 0x54
 8013138:	f001 fba8 	bl	801488c <pvPortMalloc>
 801313c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d003      	beq.n	801314c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013144:	69fb      	ldr	r3, [r7, #28]
 8013146:	697a      	ldr	r2, [r7, #20]
 8013148:	631a      	str	r2, [r3, #48]	@ 0x30
 801314a:	e005      	b.n	8013158 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801314c:	6978      	ldr	r0, [r7, #20]
 801314e:	f001 fc6b 	bl	8014a28 <vPortFree>
 8013152:	e001      	b.n	8013158 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013154:	2300      	movs	r3, #0
 8013156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d013      	beq.n	8013186 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801315e:	88fa      	ldrh	r2, [r7, #6]
 8013160:	2300      	movs	r3, #0
 8013162:	9303      	str	r3, [sp, #12]
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	9302      	str	r3, [sp, #8]
 8013168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316a:	9301      	str	r3, [sp, #4]
 801316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316e:	9300      	str	r3, [sp, #0]
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	68b9      	ldr	r1, [r7, #8]
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f000 f80e 	bl	8013196 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801317a:	69f8      	ldr	r0, [r7, #28]
 801317c:	f000 f89c 	bl	80132b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013180:	2301      	movs	r3, #1
 8013182:	61bb      	str	r3, [r7, #24]
 8013184:	e002      	b.n	801318c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013186:	f04f 33ff 	mov.w	r3, #4294967295
 801318a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801318c:	69bb      	ldr	r3, [r7, #24]
	}
 801318e:	4618      	mov	r0, r3
 8013190:	3720      	adds	r7, #32
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}

08013196 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013196:	b580      	push	{r7, lr}
 8013198:	b088      	sub	sp, #32
 801319a:	af00      	add	r7, sp, #0
 801319c:	60f8      	str	r0, [r7, #12]
 801319e:	60b9      	str	r1, [r7, #8]
 80131a0:	607a      	str	r2, [r7, #4]
 80131a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80131a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	009b      	lsls	r3, r3, #2
 80131ac:	461a      	mov	r2, r3
 80131ae:	21a5      	movs	r1, #165	@ 0xa5
 80131b0:	f001 fe24 	bl	8014dfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80131b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80131be:	3b01      	subs	r3, #1
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	4413      	add	r3, r2
 80131c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	f023 0307 	bic.w	r3, r3, #7
 80131cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80131ce:	69bb      	ldr	r3, [r7, #24]
 80131d0:	f003 0307 	and.w	r3, r3, #7
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00b      	beq.n	80131f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80131d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131dc:	f383 8811 	msr	BASEPRI, r3
 80131e0:	f3bf 8f6f 	isb	sy
 80131e4:	f3bf 8f4f 	dsb	sy
 80131e8:	617b      	str	r3, [r7, #20]
}
 80131ea:	bf00      	nop
 80131ec:	bf00      	nop
 80131ee:	e7fd      	b.n	80131ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d01f      	beq.n	8013236 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131f6:	2300      	movs	r3, #0
 80131f8:	61fb      	str	r3, [r7, #28]
 80131fa:	e012      	b.n	8013222 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80131fc:	68ba      	ldr	r2, [r7, #8]
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	4413      	add	r3, r2
 8013202:	7819      	ldrb	r1, [r3, #0]
 8013204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	4413      	add	r3, r2
 801320a:	3334      	adds	r3, #52	@ 0x34
 801320c:	460a      	mov	r2, r1
 801320e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	4413      	add	r3, r2
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d006      	beq.n	801322a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	3301      	adds	r3, #1
 8013220:	61fb      	str	r3, [r7, #28]
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	2b0f      	cmp	r3, #15
 8013226:	d9e9      	bls.n	80131fc <prvInitialiseNewTask+0x66>
 8013228:	e000      	b.n	801322c <prvInitialiseNewTask+0x96>
			{
				break;
 801322a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801322e:	2200      	movs	r2, #0
 8013230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013234:	e003      	b.n	801323e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013238:	2200      	movs	r2, #0
 801323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013240:	2b06      	cmp	r3, #6
 8013242:	d901      	bls.n	8013248 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013244:	2306      	movs	r3, #6
 8013246:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801324c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013252:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013256:	2200      	movs	r2, #0
 8013258:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801325c:	3304      	adds	r3, #4
 801325e:	4618      	mov	r0, r3
 8013260:	f7fe ffee 	bl	8012240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013266:	3318      	adds	r3, #24
 8013268:	4618      	mov	r0, r3
 801326a:	f7fe ffe9 	bl	8012240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013272:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013276:	f1c3 0207 	rsb	r2, r3, #7
 801327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801327c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013282:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013286:	2200      	movs	r2, #0
 8013288:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801328c:	2200      	movs	r2, #0
 801328e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013292:	683a      	ldr	r2, [r7, #0]
 8013294:	68f9      	ldr	r1, [r7, #12]
 8013296:	69b8      	ldr	r0, [r7, #24]
 8013298:	f001 f8a2 	bl	80143e0 <pxPortInitialiseStack>
 801329c:	4602      	mov	r2, r0
 801329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80132a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80132a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132ae:	bf00      	nop
 80132b0:	3720      	adds	r7, #32
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
	...

080132b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80132c0:	f001 f9c2 	bl	8014648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80132c4:	4b2a      	ldr	r3, [pc, #168]	@ (8013370 <prvAddNewTaskToReadyList+0xb8>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	3301      	adds	r3, #1
 80132ca:	4a29      	ldr	r2, [pc, #164]	@ (8013370 <prvAddNewTaskToReadyList+0xb8>)
 80132cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80132ce:	4b29      	ldr	r3, [pc, #164]	@ (8013374 <prvAddNewTaskToReadyList+0xbc>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d109      	bne.n	80132ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80132d6:	4a27      	ldr	r2, [pc, #156]	@ (8013374 <prvAddNewTaskToReadyList+0xbc>)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80132dc:	4b24      	ldr	r3, [pc, #144]	@ (8013370 <prvAddNewTaskToReadyList+0xb8>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	d110      	bne.n	8013306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80132e4:	f000 fd80 	bl	8013de8 <prvInitialiseTaskLists>
 80132e8:	e00d      	b.n	8013306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80132ea:	4b23      	ldr	r3, [pc, #140]	@ (8013378 <prvAddNewTaskToReadyList+0xc0>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d109      	bne.n	8013306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80132f2:	4b20      	ldr	r3, [pc, #128]	@ (8013374 <prvAddNewTaskToReadyList+0xbc>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d802      	bhi.n	8013306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013300:	4a1c      	ldr	r2, [pc, #112]	@ (8013374 <prvAddNewTaskToReadyList+0xbc>)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013306:	4b1d      	ldr	r3, [pc, #116]	@ (801337c <prvAddNewTaskToReadyList+0xc4>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3301      	adds	r3, #1
 801330c:	4a1b      	ldr	r2, [pc, #108]	@ (801337c <prvAddNewTaskToReadyList+0xc4>)
 801330e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013314:	2201      	movs	r2, #1
 8013316:	409a      	lsls	r2, r3
 8013318:	4b19      	ldr	r3, [pc, #100]	@ (8013380 <prvAddNewTaskToReadyList+0xc8>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4313      	orrs	r3, r2
 801331e:	4a18      	ldr	r2, [pc, #96]	@ (8013380 <prvAddNewTaskToReadyList+0xc8>)
 8013320:	6013      	str	r3, [r2, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013326:	4613      	mov	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	4413      	add	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	4a15      	ldr	r2, [pc, #84]	@ (8013384 <prvAddNewTaskToReadyList+0xcc>)
 8013330:	441a      	add	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	3304      	adds	r3, #4
 8013336:	4619      	mov	r1, r3
 8013338:	4610      	mov	r0, r2
 801333a:	f7fe ff8e 	bl	801225a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801333e:	f001 f9b5 	bl	80146ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013342:	4b0d      	ldr	r3, [pc, #52]	@ (8013378 <prvAddNewTaskToReadyList+0xc0>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d00e      	beq.n	8013368 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801334a:	4b0a      	ldr	r3, [pc, #40]	@ (8013374 <prvAddNewTaskToReadyList+0xbc>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013354:	429a      	cmp	r2, r3
 8013356:	d207      	bcs.n	8013368 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013358:	4b0b      	ldr	r3, [pc, #44]	@ (8013388 <prvAddNewTaskToReadyList+0xd0>)
 801335a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801335e:	601a      	str	r2, [r3, #0]
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013368:	bf00      	nop
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	20001238 	.word	0x20001238
 8013374:	20001138 	.word	0x20001138
 8013378:	20001244 	.word	0x20001244
 801337c:	20001254 	.word	0x20001254
 8013380:	20001240 	.word	0x20001240
 8013384:	2000113c 	.word	0x2000113c
 8013388:	e000ed04 	.word	0xe000ed04

0801338c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08a      	sub	sp, #40	@ 0x28
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013396:	2300      	movs	r3, #0
 8013398:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10b      	bne.n	80133b8 <vTaskDelayUntil+0x2c>
	__asm volatile
 80133a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a4:	f383 8811 	msr	BASEPRI, r3
 80133a8:	f3bf 8f6f 	isb	sy
 80133ac:	f3bf 8f4f 	dsb	sy
 80133b0:	617b      	str	r3, [r7, #20]
}
 80133b2:	bf00      	nop
 80133b4:	bf00      	nop
 80133b6:	e7fd      	b.n	80133b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d10b      	bne.n	80133d6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	613b      	str	r3, [r7, #16]
}
 80133d0:	bf00      	nop
 80133d2:	bf00      	nop
 80133d4:	e7fd      	b.n	80133d2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80133d6:	4b2a      	ldr	r3, [pc, #168]	@ (8013480 <vTaskDelayUntil+0xf4>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00b      	beq.n	80133f6 <vTaskDelayUntil+0x6a>
	__asm volatile
 80133de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	60fb      	str	r3, [r7, #12]
}
 80133f0:	bf00      	nop
 80133f2:	bf00      	nop
 80133f4:	e7fd      	b.n	80133f2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80133f6:	f000 f9eb 	bl	80137d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80133fa:	4b22      	ldr	r3, [pc, #136]	@ (8013484 <vTaskDelayUntil+0xf8>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	683a      	ldr	r2, [r7, #0]
 8013406:	4413      	add	r3, r2
 8013408:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6a3a      	ldr	r2, [r7, #32]
 8013410:	429a      	cmp	r2, r3
 8013412:	d20b      	bcs.n	801342c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	69fa      	ldr	r2, [r7, #28]
 801341a:	429a      	cmp	r2, r3
 801341c:	d211      	bcs.n	8013442 <vTaskDelayUntil+0xb6>
 801341e:	69fa      	ldr	r2, [r7, #28]
 8013420:	6a3b      	ldr	r3, [r7, #32]
 8013422:	429a      	cmp	r2, r3
 8013424:	d90d      	bls.n	8013442 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013426:	2301      	movs	r3, #1
 8013428:	627b      	str	r3, [r7, #36]	@ 0x24
 801342a:	e00a      	b.n	8013442 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	69fa      	ldr	r2, [r7, #28]
 8013432:	429a      	cmp	r2, r3
 8013434:	d303      	bcc.n	801343e <vTaskDelayUntil+0xb2>
 8013436:	69fa      	ldr	r2, [r7, #28]
 8013438:	6a3b      	ldr	r3, [r7, #32]
 801343a:	429a      	cmp	r2, r3
 801343c:	d901      	bls.n	8013442 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801343e:	2301      	movs	r3, #1
 8013440:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	69fa      	ldr	r2, [r7, #28]
 8013446:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344a:	2b00      	cmp	r3, #0
 801344c:	d006      	beq.n	801345c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801344e:	69fa      	ldr	r2, [r7, #28]
 8013450:	6a3b      	ldr	r3, [r7, #32]
 8013452:	1ad3      	subs	r3, r2, r3
 8013454:	2100      	movs	r1, #0
 8013456:	4618      	mov	r0, r3
 8013458:	f000 ff5c 	bl	8014314 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801345c:	f000 f9c6 	bl	80137ec <xTaskResumeAll>
 8013460:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d107      	bne.n	8013478 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013468:	4b07      	ldr	r3, [pc, #28]	@ (8013488 <vTaskDelayUntil+0xfc>)
 801346a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013478:	bf00      	nop
 801347a:	3728      	adds	r7, #40	@ 0x28
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}
 8013480:	20001260 	.word	0x20001260
 8013484:	2000123c 	.word	0x2000123c
 8013488:	e000ed04 	.word	0xe000ed04

0801348c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013494:	2300      	movs	r3, #0
 8013496:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d018      	beq.n	80134d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801349e:	4b14      	ldr	r3, [pc, #80]	@ (80134f0 <vTaskDelay+0x64>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d00b      	beq.n	80134be <vTaskDelay+0x32>
	__asm volatile
 80134a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134aa:	f383 8811 	msr	BASEPRI, r3
 80134ae:	f3bf 8f6f 	isb	sy
 80134b2:	f3bf 8f4f 	dsb	sy
 80134b6:	60bb      	str	r3, [r7, #8]
}
 80134b8:	bf00      	nop
 80134ba:	bf00      	nop
 80134bc:	e7fd      	b.n	80134ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80134be:	f000 f987 	bl	80137d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80134c2:	2100      	movs	r1, #0
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f000 ff25 	bl	8014314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80134ca:	f000 f98f 	bl	80137ec <xTaskResumeAll>
 80134ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d107      	bne.n	80134e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80134d6:	4b07      	ldr	r3, [pc, #28]	@ (80134f4 <vTaskDelay+0x68>)
 80134d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134dc:	601a      	str	r2, [r3, #0]
 80134de:	f3bf 8f4f 	dsb	sy
 80134e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134e6:	bf00      	nop
 80134e8:	3710      	adds	r7, #16
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	20001260 	.word	0x20001260
 80134f4:	e000ed04 	.word	0xe000ed04

080134f8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013500:	f001 f8a2 	bl	8014648 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d102      	bne.n	8013510 <vTaskSuspend+0x18>
 801350a:	4b3d      	ldr	r3, [pc, #244]	@ (8013600 <vTaskSuspend+0x108>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	e000      	b.n	8013512 <vTaskSuspend+0x1a>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	3304      	adds	r3, #4
 8013518:	4618      	mov	r0, r3
 801351a:	f7fe fefb 	bl	8012314 <uxListRemove>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d115      	bne.n	8013550 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013528:	4936      	ldr	r1, [pc, #216]	@ (8013604 <vTaskSuspend+0x10c>)
 801352a:	4613      	mov	r3, r2
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	4413      	add	r3, r2
 8013530:	009b      	lsls	r3, r3, #2
 8013532:	440b      	add	r3, r1
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10a      	bne.n	8013550 <vTaskSuspend+0x58>
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801353e:	2201      	movs	r2, #1
 8013540:	fa02 f303 	lsl.w	r3, r2, r3
 8013544:	43da      	mvns	r2, r3
 8013546:	4b30      	ldr	r3, [pc, #192]	@ (8013608 <vTaskSuspend+0x110>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4013      	ands	r3, r2
 801354c:	4a2e      	ldr	r2, [pc, #184]	@ (8013608 <vTaskSuspend+0x110>)
 801354e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013554:	2b00      	cmp	r3, #0
 8013556:	d004      	beq.n	8013562 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	3318      	adds	r3, #24
 801355c:	4618      	mov	r0, r3
 801355e:	f7fe fed9 	bl	8012314 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	3304      	adds	r3, #4
 8013566:	4619      	mov	r1, r3
 8013568:	4828      	ldr	r0, [pc, #160]	@ (801360c <vTaskSuspend+0x114>)
 801356a:	f7fe fe76 	bl	801225a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8013574:	b2db      	uxtb	r3, r3
 8013576:	2b01      	cmp	r3, #1
 8013578:	d103      	bne.n	8013582 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2200      	movs	r2, #0
 801357e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013582:	f001 f893 	bl	80146ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013586:	4b22      	ldr	r3, [pc, #136]	@ (8013610 <vTaskSuspend+0x118>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d005      	beq.n	801359a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801358e:	f001 f85b 	bl	8014648 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013592:	f000 fcdf 	bl	8013f54 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013596:	f001 f889 	bl	80146ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801359a:	4b19      	ldr	r3, [pc, #100]	@ (8013600 <vTaskSuspend+0x108>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d128      	bne.n	80135f6 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80135a4:	4b1a      	ldr	r3, [pc, #104]	@ (8013610 <vTaskSuspend+0x118>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d018      	beq.n	80135de <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80135ac:	4b19      	ldr	r3, [pc, #100]	@ (8013614 <vTaskSuspend+0x11c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d00b      	beq.n	80135cc <vTaskSuspend+0xd4>
	__asm volatile
 80135b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135b8:	f383 8811 	msr	BASEPRI, r3
 80135bc:	f3bf 8f6f 	isb	sy
 80135c0:	f3bf 8f4f 	dsb	sy
 80135c4:	60bb      	str	r3, [r7, #8]
}
 80135c6:	bf00      	nop
 80135c8:	bf00      	nop
 80135ca:	e7fd      	b.n	80135c8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80135cc:	4b12      	ldr	r3, [pc, #72]	@ (8013618 <vTaskSuspend+0x120>)
 80135ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	f3bf 8f4f 	dsb	sy
 80135d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135dc:	e00b      	b.n	80135f6 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80135de:	4b0b      	ldr	r3, [pc, #44]	@ (801360c <vTaskSuspend+0x114>)
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	4b0e      	ldr	r3, [pc, #56]	@ (801361c <vTaskSuspend+0x124>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d103      	bne.n	80135f2 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80135ea:	4b05      	ldr	r3, [pc, #20]	@ (8013600 <vTaskSuspend+0x108>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	601a      	str	r2, [r3, #0]
	}
 80135f0:	e001      	b.n	80135f6 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80135f2:	f000 fa75 	bl	8013ae0 <vTaskSwitchContext>
	}
 80135f6:	bf00      	nop
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	20001138 	.word	0x20001138
 8013604:	2000113c 	.word	0x2000113c
 8013608:	20001240 	.word	0x20001240
 801360c:	20001224 	.word	0x20001224
 8013610:	20001244 	.word	0x20001244
 8013614:	20001260 	.word	0x20001260
 8013618:	e000ed04 	.word	0xe000ed04
 801361c:	20001238 	.word	0x20001238

08013620 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013620:	b480      	push	{r7}
 8013622:	b087      	sub	sp, #28
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013628:	2300      	movs	r3, #0
 801362a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d10b      	bne.n	801364e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8013636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801363a:	f383 8811 	msr	BASEPRI, r3
 801363e:	f3bf 8f6f 	isb	sy
 8013642:	f3bf 8f4f 	dsb	sy
 8013646:	60fb      	str	r3, [r7, #12]
}
 8013648:	bf00      	nop
 801364a:	bf00      	nop
 801364c:	e7fd      	b.n	801364a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	695b      	ldr	r3, [r3, #20]
 8013652:	4a0a      	ldr	r2, [pc, #40]	@ (801367c <prvTaskIsTaskSuspended+0x5c>)
 8013654:	4293      	cmp	r3, r2
 8013656:	d10a      	bne.n	801366e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801365c:	4a08      	ldr	r2, [pc, #32]	@ (8013680 <prvTaskIsTaskSuspended+0x60>)
 801365e:	4293      	cmp	r3, r2
 8013660:	d005      	beq.n	801366e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013666:	2b00      	cmp	r3, #0
 8013668:	d101      	bne.n	801366e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 801366a:	2301      	movs	r3, #1
 801366c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801366e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013670:	4618      	mov	r0, r3
 8013672:	371c      	adds	r7, #28
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr
 801367c:	20001224 	.word	0x20001224
 8013680:	200011f8 	.word	0x200011f8

08013684 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d10b      	bne.n	80136ae <vTaskResume+0x2a>
	__asm volatile
 8013696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	60bb      	str	r3, [r7, #8]
}
 80136a8:	bf00      	nop
 80136aa:	bf00      	nop
 80136ac:	e7fd      	b.n	80136aa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80136ae:	4b20      	ldr	r3, [pc, #128]	@ (8013730 <vTaskResume+0xac>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	68fa      	ldr	r2, [r7, #12]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d037      	beq.n	8013728 <vTaskResume+0xa4>
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d034      	beq.n	8013728 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80136be:	f000 ffc3 	bl	8014648 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80136c2:	68f8      	ldr	r0, [r7, #12]
 80136c4:	f7ff ffac 	bl	8013620 <prvTaskIsTaskSuspended>
 80136c8:	4603      	mov	r3, r0
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d02a      	beq.n	8013724 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	3304      	adds	r3, #4
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7fe fe1e 	bl	8012314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136dc:	2201      	movs	r2, #1
 80136de:	409a      	lsls	r2, r3
 80136e0:	4b14      	ldr	r3, [pc, #80]	@ (8013734 <vTaskResume+0xb0>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	4313      	orrs	r3, r2
 80136e6:	4a13      	ldr	r2, [pc, #76]	@ (8013734 <vTaskResume+0xb0>)
 80136e8:	6013      	str	r3, [r2, #0]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136ee:	4613      	mov	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	4413      	add	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4a10      	ldr	r2, [pc, #64]	@ (8013738 <vTaskResume+0xb4>)
 80136f8:	441a      	add	r2, r3
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	3304      	adds	r3, #4
 80136fe:	4619      	mov	r1, r3
 8013700:	4610      	mov	r0, r2
 8013702:	f7fe fdaa 	bl	801225a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801370a:	4b09      	ldr	r3, [pc, #36]	@ (8013730 <vTaskResume+0xac>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013710:	429a      	cmp	r2, r3
 8013712:	d307      	bcc.n	8013724 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013714:	4b09      	ldr	r3, [pc, #36]	@ (801373c <vTaskResume+0xb8>)
 8013716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801371a:	601a      	str	r2, [r3, #0]
 801371c:	f3bf 8f4f 	dsb	sy
 8013720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013724:	f000 ffc2 	bl	80146ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013728:	bf00      	nop
 801372a:	3710      	adds	r7, #16
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	20001138 	.word	0x20001138
 8013734:	20001240 	.word	0x20001240
 8013738:	2000113c 	.word	0x2000113c
 801373c:	e000ed04 	.word	0xe000ed04

08013740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b086      	sub	sp, #24
 8013744:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8013746:	4b1c      	ldr	r3, [pc, #112]	@ (80137b8 <vTaskStartScheduler+0x78>)
 8013748:	9301      	str	r3, [sp, #4]
 801374a:	2300      	movs	r3, #0
 801374c:	9300      	str	r3, [sp, #0]
 801374e:	2300      	movs	r3, #0
 8013750:	2280      	movs	r2, #128	@ 0x80
 8013752:	491a      	ldr	r1, [pc, #104]	@ (80137bc <vTaskStartScheduler+0x7c>)
 8013754:	481a      	ldr	r0, [pc, #104]	@ (80137c0 <vTaskStartScheduler+0x80>)
 8013756:	f7ff fcdd 	bl	8013114 <xTaskCreate>
 801375a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	2b01      	cmp	r3, #1
 8013760:	d116      	bne.n	8013790 <vTaskStartScheduler+0x50>
	__asm volatile
 8013762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013766:	f383 8811 	msr	BASEPRI, r3
 801376a:	f3bf 8f6f 	isb	sy
 801376e:	f3bf 8f4f 	dsb	sy
 8013772:	60bb      	str	r3, [r7, #8]
}
 8013774:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013776:	4b13      	ldr	r3, [pc, #76]	@ (80137c4 <vTaskStartScheduler+0x84>)
 8013778:	f04f 32ff 	mov.w	r2, #4294967295
 801377c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801377e:	4b12      	ldr	r3, [pc, #72]	@ (80137c8 <vTaskStartScheduler+0x88>)
 8013780:	2201      	movs	r2, #1
 8013782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013784:	4b11      	ldr	r3, [pc, #68]	@ (80137cc <vTaskStartScheduler+0x8c>)
 8013786:	2200      	movs	r2, #0
 8013788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801378a:	f000 feb9 	bl	8014500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801378e:	e00f      	b.n	80137b0 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013796:	d10b      	bne.n	80137b0 <vTaskStartScheduler+0x70>
	__asm volatile
 8013798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801379c:	f383 8811 	msr	BASEPRI, r3
 80137a0:	f3bf 8f6f 	isb	sy
 80137a4:	f3bf 8f4f 	dsb	sy
 80137a8:	607b      	str	r3, [r7, #4]
}
 80137aa:	bf00      	nop
 80137ac:	bf00      	nop
 80137ae:	e7fd      	b.n	80137ac <vTaskStartScheduler+0x6c>
}
 80137b0:	bf00      	nop
 80137b2:	3710      	adds	r7, #16
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	2000125c 	.word	0x2000125c
 80137bc:	08015a28 	.word	0x08015a28
 80137c0:	08013db9 	.word	0x08013db9
 80137c4:	20001258 	.word	0x20001258
 80137c8:	20001244 	.word	0x20001244
 80137cc:	2000123c 	.word	0x2000123c

080137d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80137d0:	b480      	push	{r7}
 80137d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80137d4:	4b04      	ldr	r3, [pc, #16]	@ (80137e8 <vTaskSuspendAll+0x18>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	3301      	adds	r3, #1
 80137da:	4a03      	ldr	r2, [pc, #12]	@ (80137e8 <vTaskSuspendAll+0x18>)
 80137dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80137de:	bf00      	nop
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20001260 	.word	0x20001260

080137ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80137f2:	2300      	movs	r3, #0
 80137f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80137f6:	2300      	movs	r3, #0
 80137f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80137fa:	4b42      	ldr	r3, [pc, #264]	@ (8013904 <xTaskResumeAll+0x118>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d10b      	bne.n	801381a <xTaskResumeAll+0x2e>
	__asm volatile
 8013802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013806:	f383 8811 	msr	BASEPRI, r3
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	603b      	str	r3, [r7, #0]
}
 8013814:	bf00      	nop
 8013816:	bf00      	nop
 8013818:	e7fd      	b.n	8013816 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801381a:	f000 ff15 	bl	8014648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801381e:	4b39      	ldr	r3, [pc, #228]	@ (8013904 <xTaskResumeAll+0x118>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	3b01      	subs	r3, #1
 8013824:	4a37      	ldr	r2, [pc, #220]	@ (8013904 <xTaskResumeAll+0x118>)
 8013826:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013828:	4b36      	ldr	r3, [pc, #216]	@ (8013904 <xTaskResumeAll+0x118>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d161      	bne.n	80138f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013830:	4b35      	ldr	r3, [pc, #212]	@ (8013908 <xTaskResumeAll+0x11c>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d05d      	beq.n	80138f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013838:	e02e      	b.n	8013898 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801383a:	4b34      	ldr	r3, [pc, #208]	@ (801390c <xTaskResumeAll+0x120>)
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	3318      	adds	r3, #24
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe fd64 	bl	8012314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	3304      	adds	r3, #4
 8013850:	4618      	mov	r0, r3
 8013852:	f7fe fd5f 	bl	8012314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801385a:	2201      	movs	r2, #1
 801385c:	409a      	lsls	r2, r3
 801385e:	4b2c      	ldr	r3, [pc, #176]	@ (8013910 <xTaskResumeAll+0x124>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	4313      	orrs	r3, r2
 8013864:	4a2a      	ldr	r2, [pc, #168]	@ (8013910 <xTaskResumeAll+0x124>)
 8013866:	6013      	str	r3, [r2, #0]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801386c:	4613      	mov	r3, r2
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4413      	add	r3, r2
 8013872:	009b      	lsls	r3, r3, #2
 8013874:	4a27      	ldr	r2, [pc, #156]	@ (8013914 <xTaskResumeAll+0x128>)
 8013876:	441a      	add	r2, r3
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	3304      	adds	r3, #4
 801387c:	4619      	mov	r1, r3
 801387e:	4610      	mov	r0, r2
 8013880:	f7fe fceb 	bl	801225a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013888:	4b23      	ldr	r3, [pc, #140]	@ (8013918 <xTaskResumeAll+0x12c>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801388e:	429a      	cmp	r2, r3
 8013890:	d302      	bcc.n	8013898 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013892:	4b22      	ldr	r3, [pc, #136]	@ (801391c <xTaskResumeAll+0x130>)
 8013894:	2201      	movs	r2, #1
 8013896:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013898:	4b1c      	ldr	r3, [pc, #112]	@ (801390c <xTaskResumeAll+0x120>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d1cc      	bne.n	801383a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d001      	beq.n	80138aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80138a6:	f000 fb55 	bl	8013f54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80138aa:	4b1d      	ldr	r3, [pc, #116]	@ (8013920 <xTaskResumeAll+0x134>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d010      	beq.n	80138d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80138b6:	f000 f859 	bl	801396c <xTaskIncrementTick>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d002      	beq.n	80138c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80138c0:	4b16      	ldr	r3, [pc, #88]	@ (801391c <xTaskResumeAll+0x130>)
 80138c2:	2201      	movs	r2, #1
 80138c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	3b01      	subs	r3, #1
 80138ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d1f1      	bne.n	80138b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80138d2:	4b13      	ldr	r3, [pc, #76]	@ (8013920 <xTaskResumeAll+0x134>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80138d8:	4b10      	ldr	r3, [pc, #64]	@ (801391c <xTaskResumeAll+0x130>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d009      	beq.n	80138f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80138e0:	2301      	movs	r3, #1
 80138e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80138e4:	4b0f      	ldr	r3, [pc, #60]	@ (8013924 <xTaskResumeAll+0x138>)
 80138e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138ea:	601a      	str	r2, [r3, #0]
 80138ec:	f3bf 8f4f 	dsb	sy
 80138f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80138f4:	f000 feda 	bl	80146ac <vPortExitCritical>

	return xAlreadyYielded;
 80138f8:	68bb      	ldr	r3, [r7, #8]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3710      	adds	r7, #16
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	20001260 	.word	0x20001260
 8013908:	20001238 	.word	0x20001238
 801390c:	200011f8 	.word	0x200011f8
 8013910:	20001240 	.word	0x20001240
 8013914:	2000113c 	.word	0x2000113c
 8013918:	20001138 	.word	0x20001138
 801391c:	2000124c 	.word	0x2000124c
 8013920:	20001248 	.word	0x20001248
 8013924:	e000ed04 	.word	0xe000ed04

08013928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801392e:	4b05      	ldr	r3, [pc, #20]	@ (8013944 <xTaskGetTickCount+0x1c>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013934:	687b      	ldr	r3, [r7, #4]
}
 8013936:	4618      	mov	r0, r3
 8013938:	370c      	adds	r7, #12
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop
 8013944:	2000123c 	.word	0x2000123c

08013948 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801394e:	f000 ff5b 	bl	8014808 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013952:	2300      	movs	r3, #0
 8013954:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013956:	4b04      	ldr	r3, [pc, #16]	@ (8013968 <xTaskGetTickCountFromISR+0x20>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801395c:	683b      	ldr	r3, [r7, #0]
}
 801395e:	4618      	mov	r0, r3
 8013960:	3708      	adds	r7, #8
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	2000123c 	.word	0x2000123c

0801396c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b086      	sub	sp, #24
 8013970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013972:	2300      	movs	r3, #0
 8013974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013976:	4b4f      	ldr	r3, [pc, #316]	@ (8013ab4 <xTaskIncrementTick+0x148>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	f040 808f 	bne.w	8013a9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013980:	4b4d      	ldr	r3, [pc, #308]	@ (8013ab8 <xTaskIncrementTick+0x14c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	3301      	adds	r3, #1
 8013986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013988:	4a4b      	ldr	r2, [pc, #300]	@ (8013ab8 <xTaskIncrementTick+0x14c>)
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d121      	bne.n	80139d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013994:	4b49      	ldr	r3, [pc, #292]	@ (8013abc <xTaskIncrementTick+0x150>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00b      	beq.n	80139b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 801399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a2:	f383 8811 	msr	BASEPRI, r3
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	f3bf 8f4f 	dsb	sy
 80139ae:	603b      	str	r3, [r7, #0]
}
 80139b0:	bf00      	nop
 80139b2:	bf00      	nop
 80139b4:	e7fd      	b.n	80139b2 <xTaskIncrementTick+0x46>
 80139b6:	4b41      	ldr	r3, [pc, #260]	@ (8013abc <xTaskIncrementTick+0x150>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	60fb      	str	r3, [r7, #12]
 80139bc:	4b40      	ldr	r3, [pc, #256]	@ (8013ac0 <xTaskIncrementTick+0x154>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	4a3e      	ldr	r2, [pc, #248]	@ (8013abc <xTaskIncrementTick+0x150>)
 80139c2:	6013      	str	r3, [r2, #0]
 80139c4:	4a3e      	ldr	r2, [pc, #248]	@ (8013ac0 <xTaskIncrementTick+0x154>)
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	6013      	str	r3, [r2, #0]
 80139ca:	4b3e      	ldr	r3, [pc, #248]	@ (8013ac4 <xTaskIncrementTick+0x158>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	3301      	adds	r3, #1
 80139d0:	4a3c      	ldr	r2, [pc, #240]	@ (8013ac4 <xTaskIncrementTick+0x158>)
 80139d2:	6013      	str	r3, [r2, #0]
 80139d4:	f000 fabe 	bl	8013f54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80139d8:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac8 <xTaskIncrementTick+0x15c>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	693a      	ldr	r2, [r7, #16]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d348      	bcc.n	8013a74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139e2:	4b36      	ldr	r3, [pc, #216]	@ (8013abc <xTaskIncrementTick+0x150>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d104      	bne.n	80139f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139ec:	4b36      	ldr	r3, [pc, #216]	@ (8013ac8 <xTaskIncrementTick+0x15c>)
 80139ee:	f04f 32ff 	mov.w	r2, #4294967295
 80139f2:	601a      	str	r2, [r3, #0]
					break;
 80139f4:	e03e      	b.n	8013a74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139f6:	4b31      	ldr	r3, [pc, #196]	@ (8013abc <xTaskIncrementTick+0x150>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	68db      	ldr	r3, [r3, #12]
 80139fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013a06:	693a      	ldr	r2, [r7, #16]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d203      	bcs.n	8013a16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8013ac8 <xTaskIncrementTick+0x15c>)
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013a14:	e02e      	b.n	8013a74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	3304      	adds	r3, #4
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fe fc7a 	bl	8012314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d004      	beq.n	8013a32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	3318      	adds	r3, #24
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fe fc71 	bl	8012314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a36:	2201      	movs	r2, #1
 8013a38:	409a      	lsls	r2, r3
 8013a3a:	4b24      	ldr	r3, [pc, #144]	@ (8013acc <xTaskIncrementTick+0x160>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	4a22      	ldr	r2, [pc, #136]	@ (8013acc <xTaskIncrementTick+0x160>)
 8013a42:	6013      	str	r3, [r2, #0]
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a48:	4613      	mov	r3, r2
 8013a4a:	009b      	lsls	r3, r3, #2
 8013a4c:	4413      	add	r3, r2
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	4a1f      	ldr	r2, [pc, #124]	@ (8013ad0 <xTaskIncrementTick+0x164>)
 8013a52:	441a      	add	r2, r3
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	3304      	adds	r3, #4
 8013a58:	4619      	mov	r1, r3
 8013a5a:	4610      	mov	r0, r2
 8013a5c:	f7fe fbfd 	bl	801225a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a64:	4b1b      	ldr	r3, [pc, #108]	@ (8013ad4 <xTaskIncrementTick+0x168>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d3b9      	bcc.n	80139e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a72:	e7b6      	b.n	80139e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013a74:	4b17      	ldr	r3, [pc, #92]	@ (8013ad4 <xTaskIncrementTick+0x168>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a7a:	4915      	ldr	r1, [pc, #84]	@ (8013ad0 <xTaskIncrementTick+0x164>)
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	4413      	add	r3, r2
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	440b      	add	r3, r1
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d901      	bls.n	8013a90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013a90:	4b11      	ldr	r3, [pc, #68]	@ (8013ad8 <xTaskIncrementTick+0x16c>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d007      	beq.n	8013aa8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	617b      	str	r3, [r7, #20]
 8013a9c:	e004      	b.n	8013aa8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8013adc <xTaskIncrementTick+0x170>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8013adc <xTaskIncrementTick+0x170>)
 8013aa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013aa8:	697b      	ldr	r3, [r7, #20]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3718      	adds	r7, #24
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	20001260 	.word	0x20001260
 8013ab8:	2000123c 	.word	0x2000123c
 8013abc:	200011f0 	.word	0x200011f0
 8013ac0:	200011f4 	.word	0x200011f4
 8013ac4:	20001250 	.word	0x20001250
 8013ac8:	20001258 	.word	0x20001258
 8013acc:	20001240 	.word	0x20001240
 8013ad0:	2000113c 	.word	0x2000113c
 8013ad4:	20001138 	.word	0x20001138
 8013ad8:	2000124c 	.word	0x2000124c
 8013adc:	20001248 	.word	0x20001248

08013ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b087      	sub	sp, #28
 8013ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013ae6:	4b27      	ldr	r3, [pc, #156]	@ (8013b84 <vTaskSwitchContext+0xa4>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d003      	beq.n	8013af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013aee:	4b26      	ldr	r3, [pc, #152]	@ (8013b88 <vTaskSwitchContext+0xa8>)
 8013af0:	2201      	movs	r2, #1
 8013af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013af4:	e040      	b.n	8013b78 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8013af6:	4b24      	ldr	r3, [pc, #144]	@ (8013b88 <vTaskSwitchContext+0xa8>)
 8013af8:	2200      	movs	r2, #0
 8013afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013afc:	4b23      	ldr	r3, [pc, #140]	@ (8013b8c <vTaskSwitchContext+0xac>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	fab3 f383 	clz	r3, r3
 8013b08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013b0a:	7afb      	ldrb	r3, [r7, #11]
 8013b0c:	f1c3 031f 	rsb	r3, r3, #31
 8013b10:	617b      	str	r3, [r7, #20]
 8013b12:	491f      	ldr	r1, [pc, #124]	@ (8013b90 <vTaskSwitchContext+0xb0>)
 8013b14:	697a      	ldr	r2, [r7, #20]
 8013b16:	4613      	mov	r3, r2
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	4413      	add	r3, r2
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	440b      	add	r3, r1
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d10b      	bne.n	8013b3e <vTaskSwitchContext+0x5e>
	__asm volatile
 8013b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b2a:	f383 8811 	msr	BASEPRI, r3
 8013b2e:	f3bf 8f6f 	isb	sy
 8013b32:	f3bf 8f4f 	dsb	sy
 8013b36:	607b      	str	r3, [r7, #4]
}
 8013b38:	bf00      	nop
 8013b3a:	bf00      	nop
 8013b3c:	e7fd      	b.n	8013b3a <vTaskSwitchContext+0x5a>
 8013b3e:	697a      	ldr	r2, [r7, #20]
 8013b40:	4613      	mov	r3, r2
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	4413      	add	r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4a11      	ldr	r2, [pc, #68]	@ (8013b90 <vTaskSwitchContext+0xb0>)
 8013b4a:	4413      	add	r3, r2
 8013b4c:	613b      	str	r3, [r7, #16]
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	685a      	ldr	r2, [r3, #4]
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	605a      	str	r2, [r3, #4]
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	685a      	ldr	r2, [r3, #4]
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	3308      	adds	r3, #8
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d104      	bne.n	8013b6e <vTaskSwitchContext+0x8e>
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	685a      	ldr	r2, [r3, #4]
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	605a      	str	r2, [r3, #4]
 8013b6e:	693b      	ldr	r3, [r7, #16]
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	4a07      	ldr	r2, [pc, #28]	@ (8013b94 <vTaskSwitchContext+0xb4>)
 8013b76:	6013      	str	r3, [r2, #0]
}
 8013b78:	bf00      	nop
 8013b7a:	371c      	adds	r7, #28
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr
 8013b84:	20001260 	.word	0x20001260
 8013b88:	2000124c 	.word	0x2000124c
 8013b8c:	20001240 	.word	0x20001240
 8013b90:	2000113c 	.word	0x2000113c
 8013b94:	20001138 	.word	0x20001138

08013b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d10b      	bne.n	8013bc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bac:	f383 8811 	msr	BASEPRI, r3
 8013bb0:	f3bf 8f6f 	isb	sy
 8013bb4:	f3bf 8f4f 	dsb	sy
 8013bb8:	60fb      	str	r3, [r7, #12]
}
 8013bba:	bf00      	nop
 8013bbc:	bf00      	nop
 8013bbe:	e7fd      	b.n	8013bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013bc0:	4b07      	ldr	r3, [pc, #28]	@ (8013be0 <vTaskPlaceOnEventList+0x48>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	3318      	adds	r3, #24
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f7fe fb6a 	bl	80122a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013bce:	2101      	movs	r1, #1
 8013bd0:	6838      	ldr	r0, [r7, #0]
 8013bd2:	f000 fb9f 	bl	8014314 <prvAddCurrentTaskToDelayedList>
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	20001138 	.word	0x20001138

08013be4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10b      	bne.n	8013c12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8013bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	60fb      	str	r3, [r7, #12]
}
 8013c0c:	bf00      	nop
 8013c0e:	bf00      	nop
 8013c10:	e7fd      	b.n	8013c0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	3318      	adds	r3, #24
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fe fb7c 	bl	8012314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8013c94 <xTaskRemoveFromEventList+0xb0>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d11c      	bne.n	8013c5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	3304      	adds	r3, #4
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fe fb73 	bl	8012314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c32:	2201      	movs	r2, #1
 8013c34:	409a      	lsls	r2, r3
 8013c36:	4b18      	ldr	r3, [pc, #96]	@ (8013c98 <xTaskRemoveFromEventList+0xb4>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	4a16      	ldr	r2, [pc, #88]	@ (8013c98 <xTaskRemoveFromEventList+0xb4>)
 8013c3e:	6013      	str	r3, [r2, #0]
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c44:	4613      	mov	r3, r2
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	4413      	add	r3, r2
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4a13      	ldr	r2, [pc, #76]	@ (8013c9c <xTaskRemoveFromEventList+0xb8>)
 8013c4e:	441a      	add	r2, r3
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	3304      	adds	r3, #4
 8013c54:	4619      	mov	r1, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	f7fe faff 	bl	801225a <vListInsertEnd>
 8013c5c:	e005      	b.n	8013c6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	3318      	adds	r3, #24
 8013c62:	4619      	mov	r1, r3
 8013c64:	480e      	ldr	r0, [pc, #56]	@ (8013ca0 <xTaskRemoveFromEventList+0xbc>)
 8013c66:	f7fe faf8 	bl	801225a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca4 <xTaskRemoveFromEventList+0xc0>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d905      	bls.n	8013c84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8013ca8 <xTaskRemoveFromEventList+0xc4>)
 8013c7e:	2201      	movs	r2, #1
 8013c80:	601a      	str	r2, [r3, #0]
 8013c82:	e001      	b.n	8013c88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013c84:	2300      	movs	r3, #0
 8013c86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013c88:	697b      	ldr	r3, [r7, #20]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3718      	adds	r7, #24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	20001260 	.word	0x20001260
 8013c98:	20001240 	.word	0x20001240
 8013c9c:	2000113c 	.word	0x2000113c
 8013ca0:	200011f8 	.word	0x200011f8
 8013ca4:	20001138 	.word	0x20001138
 8013ca8:	2000124c 	.word	0x2000124c

08013cac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013cb4:	4b06      	ldr	r3, [pc, #24]	@ (8013cd0 <vTaskInternalSetTimeOutState+0x24>)
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013cbc:	4b05      	ldr	r3, [pc, #20]	@ (8013cd4 <vTaskInternalSetTimeOutState+0x28>)
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	605a      	str	r2, [r3, #4]
}
 8013cc4:	bf00      	nop
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr
 8013cd0:	20001250 	.word	0x20001250
 8013cd4:	2000123c 	.word	0x2000123c

08013cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b088      	sub	sp, #32
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d10b      	bne.n	8013d00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8013ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cec:	f383 8811 	msr	BASEPRI, r3
 8013cf0:	f3bf 8f6f 	isb	sy
 8013cf4:	f3bf 8f4f 	dsb	sy
 8013cf8:	613b      	str	r3, [r7, #16]
}
 8013cfa:	bf00      	nop
 8013cfc:	bf00      	nop
 8013cfe:	e7fd      	b.n	8013cfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d10b      	bne.n	8013d1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8013d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d0a:	f383 8811 	msr	BASEPRI, r3
 8013d0e:	f3bf 8f6f 	isb	sy
 8013d12:	f3bf 8f4f 	dsb	sy
 8013d16:	60fb      	str	r3, [r7, #12]
}
 8013d18:	bf00      	nop
 8013d1a:	bf00      	nop
 8013d1c:	e7fd      	b.n	8013d1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8013d1e:	f000 fc93 	bl	8014648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013d22:	4b1d      	ldr	r3, [pc, #116]	@ (8013d98 <xTaskCheckForTimeOut+0xc0>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	69ba      	ldr	r2, [r7, #24]
 8013d2e:	1ad3      	subs	r3, r2, r3
 8013d30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3a:	d102      	bne.n	8013d42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	61fb      	str	r3, [r7, #28]
 8013d40:	e023      	b.n	8013d8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	4b15      	ldr	r3, [pc, #84]	@ (8013d9c <xTaskCheckForTimeOut+0xc4>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d007      	beq.n	8013d5e <xTaskCheckForTimeOut+0x86>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	69ba      	ldr	r2, [r7, #24]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d302      	bcc.n	8013d5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	61fb      	str	r3, [r7, #28]
 8013d5c:	e015      	b.n	8013d8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	697a      	ldr	r2, [r7, #20]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d20b      	bcs.n	8013d80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	1ad2      	subs	r2, r2, r3
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f7ff ff99 	bl	8013cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	61fb      	str	r3, [r7, #28]
 8013d7e:	e004      	b.n	8013d8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	2200      	movs	r2, #0
 8013d84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d86:	2301      	movs	r3, #1
 8013d88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d8a:	f000 fc8f 	bl	80146ac <vPortExitCritical>

	return xReturn;
 8013d8e:	69fb      	ldr	r3, [r7, #28]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3720      	adds	r7, #32
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	2000123c 	.word	0x2000123c
 8013d9c:	20001250 	.word	0x20001250

08013da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013da0:	b480      	push	{r7}
 8013da2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013da4:	4b03      	ldr	r3, [pc, #12]	@ (8013db4 <vTaskMissedYield+0x14>)
 8013da6:	2201      	movs	r2, #1
 8013da8:	601a      	str	r2, [r3, #0]
}
 8013daa:	bf00      	nop
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr
 8013db4:	2000124c 	.word	0x2000124c

08013db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013dc0:	f000 f852 	bl	8013e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013dc4:	4b06      	ldr	r3, [pc, #24]	@ (8013de0 <prvIdleTask+0x28>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d9f9      	bls.n	8013dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013dcc:	4b05      	ldr	r3, [pc, #20]	@ (8013de4 <prvIdleTask+0x2c>)
 8013dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013dd2:	601a      	str	r2, [r3, #0]
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013ddc:	e7f0      	b.n	8013dc0 <prvIdleTask+0x8>
 8013dde:	bf00      	nop
 8013de0:	2000113c 	.word	0x2000113c
 8013de4:	e000ed04 	.word	0xe000ed04

08013de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dee:	2300      	movs	r3, #0
 8013df0:	607b      	str	r3, [r7, #4]
 8013df2:	e00c      	b.n	8013e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	4613      	mov	r3, r2
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	4413      	add	r3, r2
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	4a12      	ldr	r2, [pc, #72]	@ (8013e48 <prvInitialiseTaskLists+0x60>)
 8013e00:	4413      	add	r3, r2
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe f9fc 	bl	8012200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	607b      	str	r3, [r7, #4]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2b06      	cmp	r3, #6
 8013e12:	d9ef      	bls.n	8013df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013e14:	480d      	ldr	r0, [pc, #52]	@ (8013e4c <prvInitialiseTaskLists+0x64>)
 8013e16:	f7fe f9f3 	bl	8012200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013e1a:	480d      	ldr	r0, [pc, #52]	@ (8013e50 <prvInitialiseTaskLists+0x68>)
 8013e1c:	f7fe f9f0 	bl	8012200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013e20:	480c      	ldr	r0, [pc, #48]	@ (8013e54 <prvInitialiseTaskLists+0x6c>)
 8013e22:	f7fe f9ed 	bl	8012200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013e26:	480c      	ldr	r0, [pc, #48]	@ (8013e58 <prvInitialiseTaskLists+0x70>)
 8013e28:	f7fe f9ea 	bl	8012200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013e2c:	480b      	ldr	r0, [pc, #44]	@ (8013e5c <prvInitialiseTaskLists+0x74>)
 8013e2e:	f7fe f9e7 	bl	8012200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e32:	4b0b      	ldr	r3, [pc, #44]	@ (8013e60 <prvInitialiseTaskLists+0x78>)
 8013e34:	4a05      	ldr	r2, [pc, #20]	@ (8013e4c <prvInitialiseTaskLists+0x64>)
 8013e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e38:	4b0a      	ldr	r3, [pc, #40]	@ (8013e64 <prvInitialiseTaskLists+0x7c>)
 8013e3a:	4a05      	ldr	r2, [pc, #20]	@ (8013e50 <prvInitialiseTaskLists+0x68>)
 8013e3c:	601a      	str	r2, [r3, #0]
}
 8013e3e:	bf00      	nop
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	2000113c 	.word	0x2000113c
 8013e4c:	200011c8 	.word	0x200011c8
 8013e50:	200011dc 	.word	0x200011dc
 8013e54:	200011f8 	.word	0x200011f8
 8013e58:	2000120c 	.word	0x2000120c
 8013e5c:	20001224 	.word	0x20001224
 8013e60:	200011f0 	.word	0x200011f0
 8013e64:	200011f4 	.word	0x200011f4

08013e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e6e:	e019      	b.n	8013ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e70:	f000 fbea 	bl	8014648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e74:	4b10      	ldr	r3, [pc, #64]	@ (8013eb8 <prvCheckTasksWaitingTermination+0x50>)
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	68db      	ldr	r3, [r3, #12]
 8013e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	3304      	adds	r3, #4
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7fe fa47 	bl	8012314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e86:	4b0d      	ldr	r3, [pc, #52]	@ (8013ebc <prvCheckTasksWaitingTermination+0x54>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	3b01      	subs	r3, #1
 8013e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8013ebc <prvCheckTasksWaitingTermination+0x54>)
 8013e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e90:	4b0b      	ldr	r3, [pc, #44]	@ (8013ec0 <prvCheckTasksWaitingTermination+0x58>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	4a0a      	ldr	r2, [pc, #40]	@ (8013ec0 <prvCheckTasksWaitingTermination+0x58>)
 8013e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e9a:	f000 fc07 	bl	80146ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 f848 	bl	8013f34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ea4:	4b06      	ldr	r3, [pc, #24]	@ (8013ec0 <prvCheckTasksWaitingTermination+0x58>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d1e1      	bne.n	8013e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013eac:	bf00      	nop
 8013eae:	bf00      	nop
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	2000120c 	.word	0x2000120c
 8013ebc:	20001238 	.word	0x20001238
 8013ec0:	20001220 	.word	0x20001220

08013ec4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013ed0:	e005      	b.n	8013ede <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3301      	adds	r3, #1
 8013edc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	2ba5      	cmp	r3, #165	@ 0xa5
 8013ee4:	d0f5      	beq.n	8013ed2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	089b      	lsrs	r3, r3, #2
 8013eea:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	b29b      	uxth	r3, r3
	}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3714      	adds	r7, #20
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b086      	sub	sp, #24
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d102      	bne.n	8013f10 <uxTaskGetStackHighWaterMark+0x14>
 8013f0a:	4b09      	ldr	r3, [pc, #36]	@ (8013f30 <uxTaskGetStackHighWaterMark+0x34>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	e000      	b.n	8013f12 <uxTaskGetStackHighWaterMark+0x16>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f18:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8013f1a:	6938      	ldr	r0, [r7, #16]
 8013f1c:	f7ff ffd2 	bl	8013ec4 <prvTaskCheckFreeStackSpace>
 8013f20:	4603      	mov	r3, r0
 8013f22:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013f24:	68fb      	ldr	r3, [r7, #12]
	}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3718      	adds	r7, #24
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	20001138 	.word	0x20001138

08013f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f40:	4618      	mov	r0, r3
 8013f42:	f000 fd71 	bl	8014a28 <vPortFree>
			vPortFree( pxTCB );
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f000 fd6e 	bl	8014a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013f4c:	bf00      	nop
 8013f4e:	3708      	adds	r7, #8
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8013f8c <prvResetNextTaskUnblockTime+0x38>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d104      	bne.n	8013f6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f64:	4b0a      	ldr	r3, [pc, #40]	@ (8013f90 <prvResetNextTaskUnblockTime+0x3c>)
 8013f66:	f04f 32ff 	mov.w	r2, #4294967295
 8013f6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013f6c:	e008      	b.n	8013f80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f6e:	4b07      	ldr	r3, [pc, #28]	@ (8013f8c <prvResetNextTaskUnblockTime+0x38>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	4a04      	ldr	r2, [pc, #16]	@ (8013f90 <prvResetNextTaskUnblockTime+0x3c>)
 8013f7e:	6013      	str	r3, [r2, #0]
}
 8013f80:	bf00      	nop
 8013f82:	370c      	adds	r7, #12
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr
 8013f8c:	200011f0 	.word	0x200011f0
 8013f90:	20001258 	.word	0x20001258

08013f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8013fc8 <xTaskGetSchedulerState+0x34>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d102      	bne.n	8013fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	607b      	str	r3, [r7, #4]
 8013fa6:	e008      	b.n	8013fba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fa8:	4b08      	ldr	r3, [pc, #32]	@ (8013fcc <xTaskGetSchedulerState+0x38>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d102      	bne.n	8013fb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013fb0:	2302      	movs	r3, #2
 8013fb2:	607b      	str	r3, [r7, #4]
 8013fb4:	e001      	b.n	8013fba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013fba:	687b      	ldr	r3, [r7, #4]
	}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	20001244 	.word	0x20001244
 8013fcc:	20001260 	.word	0x20001260

08013fd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d05e      	beq.n	80140a4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fea:	4b31      	ldr	r3, [pc, #196]	@ (80140b0 <xTaskPriorityInherit+0xe0>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d24e      	bcs.n	8014092 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	699b      	ldr	r3, [r3, #24]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	db06      	blt.n	801400a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80140b0 <xTaskPriorityInherit+0xe0>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014002:	f1c3 0207 	rsb	r2, r3, #7
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	6959      	ldr	r1, [r3, #20]
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014012:	4613      	mov	r3, r2
 8014014:	009b      	lsls	r3, r3, #2
 8014016:	4413      	add	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	4a26      	ldr	r2, [pc, #152]	@ (80140b4 <xTaskPriorityInherit+0xe4>)
 801401c:	4413      	add	r3, r2
 801401e:	4299      	cmp	r1, r3
 8014020:	d12f      	bne.n	8014082 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	3304      	adds	r3, #4
 8014026:	4618      	mov	r0, r3
 8014028:	f7fe f974 	bl	8012314 <uxListRemove>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	d10a      	bne.n	8014048 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014036:	2201      	movs	r2, #1
 8014038:	fa02 f303 	lsl.w	r3, r2, r3
 801403c:	43da      	mvns	r2, r3
 801403e:	4b1e      	ldr	r3, [pc, #120]	@ (80140b8 <xTaskPriorityInherit+0xe8>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	4013      	ands	r3, r2
 8014044:	4a1c      	ldr	r2, [pc, #112]	@ (80140b8 <xTaskPriorityInherit+0xe8>)
 8014046:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014048:	4b19      	ldr	r3, [pc, #100]	@ (80140b0 <xTaskPriorityInherit+0xe0>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014056:	2201      	movs	r2, #1
 8014058:	409a      	lsls	r2, r3
 801405a:	4b17      	ldr	r3, [pc, #92]	@ (80140b8 <xTaskPriorityInherit+0xe8>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	4313      	orrs	r3, r2
 8014060:	4a15      	ldr	r2, [pc, #84]	@ (80140b8 <xTaskPriorityInherit+0xe8>)
 8014062:	6013      	str	r3, [r2, #0]
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014068:	4613      	mov	r3, r2
 801406a:	009b      	lsls	r3, r3, #2
 801406c:	4413      	add	r3, r2
 801406e:	009b      	lsls	r3, r3, #2
 8014070:	4a10      	ldr	r2, [pc, #64]	@ (80140b4 <xTaskPriorityInherit+0xe4>)
 8014072:	441a      	add	r2, r3
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	3304      	adds	r3, #4
 8014078:	4619      	mov	r1, r3
 801407a:	4610      	mov	r0, r2
 801407c:	f7fe f8ed 	bl	801225a <vListInsertEnd>
 8014080:	e004      	b.n	801408c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014082:	4b0b      	ldr	r3, [pc, #44]	@ (80140b0 <xTaskPriorityInherit+0xe0>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801408c:	2301      	movs	r3, #1
 801408e:	60fb      	str	r3, [r7, #12]
 8014090:	e008      	b.n	80140a4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014096:	4b06      	ldr	r3, [pc, #24]	@ (80140b0 <xTaskPriorityInherit+0xe0>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801409c:	429a      	cmp	r2, r3
 801409e:	d201      	bcs.n	80140a4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80140a0:	2301      	movs	r3, #1
 80140a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80140a4:	68fb      	ldr	r3, [r7, #12]
	}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3710      	adds	r7, #16
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	20001138 	.word	0x20001138
 80140b4:	2000113c 	.word	0x2000113c
 80140b8:	20001240 	.word	0x20001240

080140bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b086      	sub	sp, #24
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80140c8:	2300      	movs	r3, #0
 80140ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d070      	beq.n	80141b4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80140d2:	4b3b      	ldr	r3, [pc, #236]	@ (80141c0 <xTaskPriorityDisinherit+0x104>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	693a      	ldr	r2, [r7, #16]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d00b      	beq.n	80140f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80140dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140e0:	f383 8811 	msr	BASEPRI, r3
 80140e4:	f3bf 8f6f 	isb	sy
 80140e8:	f3bf 8f4f 	dsb	sy
 80140ec:	60fb      	str	r3, [r7, #12]
}
 80140ee:	bf00      	nop
 80140f0:	bf00      	nop
 80140f2:	e7fd      	b.n	80140f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d10b      	bne.n	8014114 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80140fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014100:	f383 8811 	msr	BASEPRI, r3
 8014104:	f3bf 8f6f 	isb	sy
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	60bb      	str	r3, [r7, #8]
}
 801410e:	bf00      	nop
 8014110:	bf00      	nop
 8014112:	e7fd      	b.n	8014110 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014118:	1e5a      	subs	r2, r3, #1
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014126:	429a      	cmp	r2, r3
 8014128:	d044      	beq.n	80141b4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801412e:	2b00      	cmp	r3, #0
 8014130:	d140      	bne.n	80141b4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	3304      	adds	r3, #4
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe f8ec 	bl	8012314 <uxListRemove>
 801413c:	4603      	mov	r3, r0
 801413e:	2b00      	cmp	r3, #0
 8014140:	d115      	bne.n	801416e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014146:	491f      	ldr	r1, [pc, #124]	@ (80141c4 <xTaskPriorityDisinherit+0x108>)
 8014148:	4613      	mov	r3, r2
 801414a:	009b      	lsls	r3, r3, #2
 801414c:	4413      	add	r3, r2
 801414e:	009b      	lsls	r3, r3, #2
 8014150:	440b      	add	r3, r1
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d10a      	bne.n	801416e <xTaskPriorityDisinherit+0xb2>
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801415c:	2201      	movs	r2, #1
 801415e:	fa02 f303 	lsl.w	r3, r2, r3
 8014162:	43da      	mvns	r2, r3
 8014164:	4b18      	ldr	r3, [pc, #96]	@ (80141c8 <xTaskPriorityDisinherit+0x10c>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4013      	ands	r3, r2
 801416a:	4a17      	ldr	r2, [pc, #92]	@ (80141c8 <xTaskPriorityDisinherit+0x10c>)
 801416c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801417a:	f1c3 0207 	rsb	r2, r3, #7
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014186:	2201      	movs	r2, #1
 8014188:	409a      	lsls	r2, r3
 801418a:	4b0f      	ldr	r3, [pc, #60]	@ (80141c8 <xTaskPriorityDisinherit+0x10c>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	4313      	orrs	r3, r2
 8014190:	4a0d      	ldr	r2, [pc, #52]	@ (80141c8 <xTaskPriorityDisinherit+0x10c>)
 8014192:	6013      	str	r3, [r2, #0]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014198:	4613      	mov	r3, r2
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	4a08      	ldr	r2, [pc, #32]	@ (80141c4 <xTaskPriorityDisinherit+0x108>)
 80141a2:	441a      	add	r2, r3
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	3304      	adds	r3, #4
 80141a8:	4619      	mov	r1, r3
 80141aa:	4610      	mov	r0, r2
 80141ac:	f7fe f855 	bl	801225a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80141b0:	2301      	movs	r3, #1
 80141b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80141b4:	697b      	ldr	r3, [r7, #20]
	}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3718      	adds	r7, #24
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}
 80141be:	bf00      	nop
 80141c0:	20001138 	.word	0x20001138
 80141c4:	2000113c 	.word	0x2000113c
 80141c8:	20001240 	.word	0x20001240

080141cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b088      	sub	sp, #32
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80141da:	2301      	movs	r3, #1
 80141dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d079      	beq.n	80142d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d10b      	bne.n	8014204 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80141ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141f0:	f383 8811 	msr	BASEPRI, r3
 80141f4:	f3bf 8f6f 	isb	sy
 80141f8:	f3bf 8f4f 	dsb	sy
 80141fc:	60fb      	str	r3, [r7, #12]
}
 80141fe:	bf00      	nop
 8014200:	bf00      	nop
 8014202:	e7fd      	b.n	8014200 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014208:	683a      	ldr	r2, [r7, #0]
 801420a:	429a      	cmp	r2, r3
 801420c:	d902      	bls.n	8014214 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	61fb      	str	r3, [r7, #28]
 8014212:	e002      	b.n	801421a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014218:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801421a:	69bb      	ldr	r3, [r7, #24]
 801421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801421e:	69fa      	ldr	r2, [r7, #28]
 8014220:	429a      	cmp	r2, r3
 8014222:	d059      	beq.n	80142d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014224:	69bb      	ldr	r3, [r7, #24]
 8014226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014228:	697a      	ldr	r2, [r7, #20]
 801422a:	429a      	cmp	r2, r3
 801422c:	d154      	bne.n	80142d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801422e:	4b2c      	ldr	r3, [pc, #176]	@ (80142e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	69ba      	ldr	r2, [r7, #24]
 8014234:	429a      	cmp	r2, r3
 8014236:	d10b      	bne.n	8014250 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801423c:	f383 8811 	msr	BASEPRI, r3
 8014240:	f3bf 8f6f 	isb	sy
 8014244:	f3bf 8f4f 	dsb	sy
 8014248:	60bb      	str	r3, [r7, #8]
}
 801424a:	bf00      	nop
 801424c:	bf00      	nop
 801424e:	e7fd      	b.n	801424c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014254:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	69fa      	ldr	r2, [r7, #28]
 801425a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801425c:	69bb      	ldr	r3, [r7, #24]
 801425e:	699b      	ldr	r3, [r3, #24]
 8014260:	2b00      	cmp	r3, #0
 8014262:	db04      	blt.n	801426e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	f1c3 0207 	rsb	r2, r3, #7
 801426a:	69bb      	ldr	r3, [r7, #24]
 801426c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	6959      	ldr	r1, [r3, #20]
 8014272:	693a      	ldr	r2, [r7, #16]
 8014274:	4613      	mov	r3, r2
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	4413      	add	r3, r2
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	4a19      	ldr	r2, [pc, #100]	@ (80142e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801427e:	4413      	add	r3, r2
 8014280:	4299      	cmp	r1, r3
 8014282:	d129      	bne.n	80142d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	3304      	adds	r3, #4
 8014288:	4618      	mov	r0, r3
 801428a:	f7fe f843 	bl	8012314 <uxListRemove>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d10a      	bne.n	80142aa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014298:	2201      	movs	r2, #1
 801429a:	fa02 f303 	lsl.w	r3, r2, r3
 801429e:	43da      	mvns	r2, r3
 80142a0:	4b11      	ldr	r3, [pc, #68]	@ (80142e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4013      	ands	r3, r2
 80142a6:	4a10      	ldr	r2, [pc, #64]	@ (80142e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80142a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ae:	2201      	movs	r2, #1
 80142b0:	409a      	lsls	r2, r3
 80142b2:	4b0d      	ldr	r3, [pc, #52]	@ (80142e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	4313      	orrs	r3, r2
 80142b8:	4a0b      	ldr	r2, [pc, #44]	@ (80142e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80142ba:	6013      	str	r3, [r2, #0]
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142c0:	4613      	mov	r3, r2
 80142c2:	009b      	lsls	r3, r3, #2
 80142c4:	4413      	add	r3, r2
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4a06      	ldr	r2, [pc, #24]	@ (80142e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80142ca:	441a      	add	r2, r3
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	3304      	adds	r3, #4
 80142d0:	4619      	mov	r1, r3
 80142d2:	4610      	mov	r0, r2
 80142d4:	f7fd ffc1 	bl	801225a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142d8:	bf00      	nop
 80142da:	3720      	adds	r7, #32
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	20001138 	.word	0x20001138
 80142e4:	2000113c 	.word	0x2000113c
 80142e8:	20001240 	.word	0x20001240

080142ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80142ec:	b480      	push	{r7}
 80142ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80142f0:	4b07      	ldr	r3, [pc, #28]	@ (8014310 <pvTaskIncrementMutexHeldCount+0x24>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d004      	beq.n	8014302 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80142f8:	4b05      	ldr	r3, [pc, #20]	@ (8014310 <pvTaskIncrementMutexHeldCount+0x24>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80142fe:	3201      	adds	r2, #1
 8014300:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8014302:	4b03      	ldr	r3, [pc, #12]	@ (8014310 <pvTaskIncrementMutexHeldCount+0x24>)
 8014304:	681b      	ldr	r3, [r3, #0]
	}
 8014306:	4618      	mov	r0, r3
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr
 8014310:	20001138 	.word	0x20001138

08014314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801431e:	4b29      	ldr	r3, [pc, #164]	@ (80143c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014324:	4b28      	ldr	r3, [pc, #160]	@ (80143c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	3304      	adds	r3, #4
 801432a:	4618      	mov	r0, r3
 801432c:	f7fd fff2 	bl	8012314 <uxListRemove>
 8014330:	4603      	mov	r3, r0
 8014332:	2b00      	cmp	r3, #0
 8014334:	d10b      	bne.n	801434e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014336:	4b24      	ldr	r3, [pc, #144]	@ (80143c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801433c:	2201      	movs	r2, #1
 801433e:	fa02 f303 	lsl.w	r3, r2, r3
 8014342:	43da      	mvns	r2, r3
 8014344:	4b21      	ldr	r3, [pc, #132]	@ (80143cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	4013      	ands	r3, r2
 801434a:	4a20      	ldr	r2, [pc, #128]	@ (80143cc <prvAddCurrentTaskToDelayedList+0xb8>)
 801434c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014354:	d10a      	bne.n	801436c <prvAddCurrentTaskToDelayedList+0x58>
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d007      	beq.n	801436c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801435c:	4b1a      	ldr	r3, [pc, #104]	@ (80143c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	3304      	adds	r3, #4
 8014362:	4619      	mov	r1, r3
 8014364:	481a      	ldr	r0, [pc, #104]	@ (80143d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014366:	f7fd ff78 	bl	801225a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801436a:	e026      	b.n	80143ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801436c:	68fa      	ldr	r2, [r7, #12]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4413      	add	r3, r2
 8014372:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014374:	4b14      	ldr	r3, [pc, #80]	@ (80143c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	68ba      	ldr	r2, [r7, #8]
 801437a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801437c:	68ba      	ldr	r2, [r7, #8]
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	429a      	cmp	r2, r3
 8014382:	d209      	bcs.n	8014398 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014384:	4b13      	ldr	r3, [pc, #76]	@ (80143d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	4b0f      	ldr	r3, [pc, #60]	@ (80143c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	3304      	adds	r3, #4
 801438e:	4619      	mov	r1, r3
 8014390:	4610      	mov	r0, r2
 8014392:	f7fd ff86 	bl	80122a2 <vListInsert>
}
 8014396:	e010      	b.n	80143ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014398:	4b0f      	ldr	r3, [pc, #60]	@ (80143d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	4b0a      	ldr	r3, [pc, #40]	@ (80143c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	3304      	adds	r3, #4
 80143a2:	4619      	mov	r1, r3
 80143a4:	4610      	mov	r0, r2
 80143a6:	f7fd ff7c 	bl	80122a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80143aa:	4b0c      	ldr	r3, [pc, #48]	@ (80143dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	68ba      	ldr	r2, [r7, #8]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d202      	bcs.n	80143ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80143b4:	4a09      	ldr	r2, [pc, #36]	@ (80143dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	6013      	str	r3, [r2, #0]
}
 80143ba:	bf00      	nop
 80143bc:	3710      	adds	r7, #16
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	2000123c 	.word	0x2000123c
 80143c8:	20001138 	.word	0x20001138
 80143cc:	20001240 	.word	0x20001240
 80143d0:	20001224 	.word	0x20001224
 80143d4:	200011f4 	.word	0x200011f4
 80143d8:	200011f0 	.word	0x200011f0
 80143dc:	20001258 	.word	0x20001258

080143e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80143e0:	b480      	push	{r7}
 80143e2:	b085      	sub	sp, #20
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	3b04      	subs	r3, #4
 80143f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80143f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	3b04      	subs	r3, #4
 80143fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	f023 0201 	bic.w	r2, r3, #1
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	3b04      	subs	r3, #4
 801440e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014410:	4a0c      	ldr	r2, [pc, #48]	@ (8014444 <pxPortInitialiseStack+0x64>)
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	3b14      	subs	r3, #20
 801441a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	3b04      	subs	r3, #4
 8014426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	f06f 0202 	mvn.w	r2, #2
 801442e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	3b20      	subs	r3, #32
 8014434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014436:	68fb      	ldr	r3, [r7, #12]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3714      	adds	r7, #20
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	08014449 	.word	0x08014449

08014448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801444e:	2300      	movs	r3, #0
 8014450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014452:	4b13      	ldr	r3, [pc, #76]	@ (80144a0 <prvTaskExitError+0x58>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801445a:	d00b      	beq.n	8014474 <prvTaskExitError+0x2c>
	__asm volatile
 801445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014460:	f383 8811 	msr	BASEPRI, r3
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	f3bf 8f4f 	dsb	sy
 801446c:	60fb      	str	r3, [r7, #12]
}
 801446e:	bf00      	nop
 8014470:	bf00      	nop
 8014472:	e7fd      	b.n	8014470 <prvTaskExitError+0x28>
	__asm volatile
 8014474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014478:	f383 8811 	msr	BASEPRI, r3
 801447c:	f3bf 8f6f 	isb	sy
 8014480:	f3bf 8f4f 	dsb	sy
 8014484:	60bb      	str	r3, [r7, #8]
}
 8014486:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014488:	bf00      	nop
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d0fc      	beq.n	801448a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014490:	bf00      	nop
 8014492:	bf00      	nop
 8014494:	3714      	adds	r7, #20
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr
 801449e:	bf00      	nop
 80144a0:	200000bc 	.word	0x200000bc
	...

080144b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80144b0:	4b07      	ldr	r3, [pc, #28]	@ (80144d0 <pxCurrentTCBConst2>)
 80144b2:	6819      	ldr	r1, [r3, #0]
 80144b4:	6808      	ldr	r0, [r1, #0]
 80144b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ba:	f380 8809 	msr	PSP, r0
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	f04f 0000 	mov.w	r0, #0
 80144c6:	f380 8811 	msr	BASEPRI, r0
 80144ca:	4770      	bx	lr
 80144cc:	f3af 8000 	nop.w

080144d0 <pxCurrentTCBConst2>:
 80144d0:	20001138 	.word	0x20001138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80144d4:	bf00      	nop
 80144d6:	bf00      	nop

080144d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80144d8:	4808      	ldr	r0, [pc, #32]	@ (80144fc <prvPortStartFirstTask+0x24>)
 80144da:	6800      	ldr	r0, [r0, #0]
 80144dc:	6800      	ldr	r0, [r0, #0]
 80144de:	f380 8808 	msr	MSP, r0
 80144e2:	f04f 0000 	mov.w	r0, #0
 80144e6:	f380 8814 	msr	CONTROL, r0
 80144ea:	b662      	cpsie	i
 80144ec:	b661      	cpsie	f
 80144ee:	f3bf 8f4f 	dsb	sy
 80144f2:	f3bf 8f6f 	isb	sy
 80144f6:	df00      	svc	0
 80144f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80144fa:	bf00      	nop
 80144fc:	e000ed08 	.word	0xe000ed08

08014500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014506:	4b47      	ldr	r3, [pc, #284]	@ (8014624 <xPortStartScheduler+0x124>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4a47      	ldr	r2, [pc, #284]	@ (8014628 <xPortStartScheduler+0x128>)
 801450c:	4293      	cmp	r3, r2
 801450e:	d10b      	bne.n	8014528 <xPortStartScheduler+0x28>
	__asm volatile
 8014510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014514:	f383 8811 	msr	BASEPRI, r3
 8014518:	f3bf 8f6f 	isb	sy
 801451c:	f3bf 8f4f 	dsb	sy
 8014520:	613b      	str	r3, [r7, #16]
}
 8014522:	bf00      	nop
 8014524:	bf00      	nop
 8014526:	e7fd      	b.n	8014524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014528:	4b3e      	ldr	r3, [pc, #248]	@ (8014624 <xPortStartScheduler+0x124>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4a3f      	ldr	r2, [pc, #252]	@ (801462c <xPortStartScheduler+0x12c>)
 801452e:	4293      	cmp	r3, r2
 8014530:	d10b      	bne.n	801454a <xPortStartScheduler+0x4a>
	__asm volatile
 8014532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014536:	f383 8811 	msr	BASEPRI, r3
 801453a:	f3bf 8f6f 	isb	sy
 801453e:	f3bf 8f4f 	dsb	sy
 8014542:	60fb      	str	r3, [r7, #12]
}
 8014544:	bf00      	nop
 8014546:	bf00      	nop
 8014548:	e7fd      	b.n	8014546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801454a:	4b39      	ldr	r3, [pc, #228]	@ (8014630 <xPortStartScheduler+0x130>)
 801454c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	b2db      	uxtb	r3, r3
 8014554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	22ff      	movs	r2, #255	@ 0xff
 801455a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	b2db      	uxtb	r3, r3
 8014562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014564:	78fb      	ldrb	r3, [r7, #3]
 8014566:	b2db      	uxtb	r3, r3
 8014568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801456c:	b2da      	uxtb	r2, r3
 801456e:	4b31      	ldr	r3, [pc, #196]	@ (8014634 <xPortStartScheduler+0x134>)
 8014570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014572:	4b31      	ldr	r3, [pc, #196]	@ (8014638 <xPortStartScheduler+0x138>)
 8014574:	2207      	movs	r2, #7
 8014576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014578:	e009      	b.n	801458e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801457a:	4b2f      	ldr	r3, [pc, #188]	@ (8014638 <xPortStartScheduler+0x138>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	3b01      	subs	r3, #1
 8014580:	4a2d      	ldr	r2, [pc, #180]	@ (8014638 <xPortStartScheduler+0x138>)
 8014582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014584:	78fb      	ldrb	r3, [r7, #3]
 8014586:	b2db      	uxtb	r3, r3
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	b2db      	uxtb	r3, r3
 801458c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801458e:	78fb      	ldrb	r3, [r7, #3]
 8014590:	b2db      	uxtb	r3, r3
 8014592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014596:	2b80      	cmp	r3, #128	@ 0x80
 8014598:	d0ef      	beq.n	801457a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801459a:	4b27      	ldr	r3, [pc, #156]	@ (8014638 <xPortStartScheduler+0x138>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	f1c3 0307 	rsb	r3, r3, #7
 80145a2:	2b04      	cmp	r3, #4
 80145a4:	d00b      	beq.n	80145be <xPortStartScheduler+0xbe>
	__asm volatile
 80145a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145aa:	f383 8811 	msr	BASEPRI, r3
 80145ae:	f3bf 8f6f 	isb	sy
 80145b2:	f3bf 8f4f 	dsb	sy
 80145b6:	60bb      	str	r3, [r7, #8]
}
 80145b8:	bf00      	nop
 80145ba:	bf00      	nop
 80145bc:	e7fd      	b.n	80145ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80145be:	4b1e      	ldr	r3, [pc, #120]	@ (8014638 <xPortStartScheduler+0x138>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	021b      	lsls	r3, r3, #8
 80145c4:	4a1c      	ldr	r2, [pc, #112]	@ (8014638 <xPortStartScheduler+0x138>)
 80145c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80145c8:	4b1b      	ldr	r3, [pc, #108]	@ (8014638 <xPortStartScheduler+0x138>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80145d0:	4a19      	ldr	r2, [pc, #100]	@ (8014638 <xPortStartScheduler+0x138>)
 80145d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	b2da      	uxtb	r2, r3
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80145dc:	4b17      	ldr	r3, [pc, #92]	@ (801463c <xPortStartScheduler+0x13c>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	4a16      	ldr	r2, [pc, #88]	@ (801463c <xPortStartScheduler+0x13c>)
 80145e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80145e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80145e8:	4b14      	ldr	r3, [pc, #80]	@ (801463c <xPortStartScheduler+0x13c>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	4a13      	ldr	r2, [pc, #76]	@ (801463c <xPortStartScheduler+0x13c>)
 80145ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80145f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80145f4:	f000 f8da 	bl	80147ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80145f8:	4b11      	ldr	r3, [pc, #68]	@ (8014640 <xPortStartScheduler+0x140>)
 80145fa:	2200      	movs	r2, #0
 80145fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80145fe:	f000 f8f9 	bl	80147f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014602:	4b10      	ldr	r3, [pc, #64]	@ (8014644 <xPortStartScheduler+0x144>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4a0f      	ldr	r2, [pc, #60]	@ (8014644 <xPortStartScheduler+0x144>)
 8014608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801460c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801460e:	f7ff ff63 	bl	80144d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014612:	f7ff fa65 	bl	8013ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8014616:	f7ff ff17 	bl	8014448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801461a:	2300      	movs	r3, #0
}
 801461c:	4618      	mov	r0, r3
 801461e:	3718      	adds	r7, #24
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}
 8014624:	e000ed00 	.word	0xe000ed00
 8014628:	410fc271 	.word	0x410fc271
 801462c:	410fc270 	.word	0x410fc270
 8014630:	e000e400 	.word	0xe000e400
 8014634:	20001264 	.word	0x20001264
 8014638:	20001268 	.word	0x20001268
 801463c:	e000ed20 	.word	0xe000ed20
 8014640:	200000bc 	.word	0x200000bc
 8014644:	e000ef34 	.word	0xe000ef34

08014648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014648:	b480      	push	{r7}
 801464a:	b083      	sub	sp, #12
 801464c:	af00      	add	r7, sp, #0
	__asm volatile
 801464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014652:	f383 8811 	msr	BASEPRI, r3
 8014656:	f3bf 8f6f 	isb	sy
 801465a:	f3bf 8f4f 	dsb	sy
 801465e:	607b      	str	r3, [r7, #4]
}
 8014660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014662:	4b10      	ldr	r3, [pc, #64]	@ (80146a4 <vPortEnterCritical+0x5c>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	3301      	adds	r3, #1
 8014668:	4a0e      	ldr	r2, [pc, #56]	@ (80146a4 <vPortEnterCritical+0x5c>)
 801466a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801466c:	4b0d      	ldr	r3, [pc, #52]	@ (80146a4 <vPortEnterCritical+0x5c>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	2b01      	cmp	r3, #1
 8014672:	d110      	bne.n	8014696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014674:	4b0c      	ldr	r3, [pc, #48]	@ (80146a8 <vPortEnterCritical+0x60>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	b2db      	uxtb	r3, r3
 801467a:	2b00      	cmp	r3, #0
 801467c:	d00b      	beq.n	8014696 <vPortEnterCritical+0x4e>
	__asm volatile
 801467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014682:	f383 8811 	msr	BASEPRI, r3
 8014686:	f3bf 8f6f 	isb	sy
 801468a:	f3bf 8f4f 	dsb	sy
 801468e:	603b      	str	r3, [r7, #0]
}
 8014690:	bf00      	nop
 8014692:	bf00      	nop
 8014694:	e7fd      	b.n	8014692 <vPortEnterCritical+0x4a>
	}
}
 8014696:	bf00      	nop
 8014698:	370c      	adds	r7, #12
 801469a:	46bd      	mov	sp, r7
 801469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a0:	4770      	bx	lr
 80146a2:	bf00      	nop
 80146a4:	200000bc 	.word	0x200000bc
 80146a8:	e000ed04 	.word	0xe000ed04

080146ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80146b2:	4b12      	ldr	r3, [pc, #72]	@ (80146fc <vPortExitCritical+0x50>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d10b      	bne.n	80146d2 <vPortExitCritical+0x26>
	__asm volatile
 80146ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146be:	f383 8811 	msr	BASEPRI, r3
 80146c2:	f3bf 8f6f 	isb	sy
 80146c6:	f3bf 8f4f 	dsb	sy
 80146ca:	607b      	str	r3, [r7, #4]
}
 80146cc:	bf00      	nop
 80146ce:	bf00      	nop
 80146d0:	e7fd      	b.n	80146ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80146d2:	4b0a      	ldr	r3, [pc, #40]	@ (80146fc <vPortExitCritical+0x50>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	3b01      	subs	r3, #1
 80146d8:	4a08      	ldr	r2, [pc, #32]	@ (80146fc <vPortExitCritical+0x50>)
 80146da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80146dc:	4b07      	ldr	r3, [pc, #28]	@ (80146fc <vPortExitCritical+0x50>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d105      	bne.n	80146f0 <vPortExitCritical+0x44>
 80146e4:	2300      	movs	r3, #0
 80146e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	f383 8811 	msr	BASEPRI, r3
}
 80146ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80146f0:	bf00      	nop
 80146f2:	370c      	adds	r7, #12
 80146f4:	46bd      	mov	sp, r7
 80146f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fa:	4770      	bx	lr
 80146fc:	200000bc 	.word	0x200000bc

08014700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014700:	f3ef 8009 	mrs	r0, PSP
 8014704:	f3bf 8f6f 	isb	sy
 8014708:	4b15      	ldr	r3, [pc, #84]	@ (8014760 <pxCurrentTCBConst>)
 801470a:	681a      	ldr	r2, [r3, #0]
 801470c:	f01e 0f10 	tst.w	lr, #16
 8014710:	bf08      	it	eq
 8014712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471a:	6010      	str	r0, [r2, #0]
 801471c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014724:	f380 8811 	msr	BASEPRI, r0
 8014728:	f3bf 8f4f 	dsb	sy
 801472c:	f3bf 8f6f 	isb	sy
 8014730:	f7ff f9d6 	bl	8013ae0 <vTaskSwitchContext>
 8014734:	f04f 0000 	mov.w	r0, #0
 8014738:	f380 8811 	msr	BASEPRI, r0
 801473c:	bc09      	pop	{r0, r3}
 801473e:	6819      	ldr	r1, [r3, #0]
 8014740:	6808      	ldr	r0, [r1, #0]
 8014742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014746:	f01e 0f10 	tst.w	lr, #16
 801474a:	bf08      	it	eq
 801474c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014750:	f380 8809 	msr	PSP, r0
 8014754:	f3bf 8f6f 	isb	sy
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop
 801475c:	f3af 8000 	nop.w

08014760 <pxCurrentTCBConst>:
 8014760:	20001138 	.word	0x20001138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014764:	bf00      	nop
 8014766:	bf00      	nop

08014768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af00      	add	r7, sp, #0
	__asm volatile
 801476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014772:	f383 8811 	msr	BASEPRI, r3
 8014776:	f3bf 8f6f 	isb	sy
 801477a:	f3bf 8f4f 	dsb	sy
 801477e:	607b      	str	r3, [r7, #4]
}
 8014780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014782:	f7ff f8f3 	bl	801396c <xTaskIncrementTick>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d003      	beq.n	8014794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801478c:	4b06      	ldr	r3, [pc, #24]	@ (80147a8 <SysTick_Handler+0x40>)
 801478e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014792:	601a      	str	r2, [r3, #0]
 8014794:	2300      	movs	r3, #0
 8014796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	f383 8811 	msr	BASEPRI, r3
}
 801479e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80147a0:	bf00      	nop
 80147a2:	3708      	adds	r7, #8
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	e000ed04 	.word	0xe000ed04

080147ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80147ac:	b480      	push	{r7}
 80147ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80147b0:	4b0b      	ldr	r3, [pc, #44]	@ (80147e0 <vPortSetupTimerInterrupt+0x34>)
 80147b2:	2200      	movs	r2, #0
 80147b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80147b6:	4b0b      	ldr	r3, [pc, #44]	@ (80147e4 <vPortSetupTimerInterrupt+0x38>)
 80147b8:	2200      	movs	r2, #0
 80147ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80147bc:	4b0a      	ldr	r3, [pc, #40]	@ (80147e8 <vPortSetupTimerInterrupt+0x3c>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4a0a      	ldr	r2, [pc, #40]	@ (80147ec <vPortSetupTimerInterrupt+0x40>)
 80147c2:	fba2 2303 	umull	r2, r3, r2, r3
 80147c6:	099b      	lsrs	r3, r3, #6
 80147c8:	4a09      	ldr	r2, [pc, #36]	@ (80147f0 <vPortSetupTimerInterrupt+0x44>)
 80147ca:	3b01      	subs	r3, #1
 80147cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80147ce:	4b04      	ldr	r3, [pc, #16]	@ (80147e0 <vPortSetupTimerInterrupt+0x34>)
 80147d0:	2207      	movs	r2, #7
 80147d2:	601a      	str	r2, [r3, #0]
}
 80147d4:	bf00      	nop
 80147d6:	46bd      	mov	sp, r7
 80147d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop
 80147e0:	e000e010 	.word	0xe000e010
 80147e4:	e000e018 	.word	0xe000e018
 80147e8:	20000064 	.word	0x20000064
 80147ec:	10624dd3 	.word	0x10624dd3
 80147f0:	e000e014 	.word	0xe000e014

080147f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80147f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014804 <vPortEnableVFP+0x10>
 80147f8:	6801      	ldr	r1, [r0, #0]
 80147fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80147fe:	6001      	str	r1, [r0, #0]
 8014800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014802:	bf00      	nop
 8014804:	e000ed88 	.word	0xe000ed88

08014808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014808:	b480      	push	{r7}
 801480a:	b085      	sub	sp, #20
 801480c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801480e:	f3ef 8305 	mrs	r3, IPSR
 8014812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	2b0f      	cmp	r3, #15
 8014818:	d915      	bls.n	8014846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801481a:	4a18      	ldr	r2, [pc, #96]	@ (801487c <vPortValidateInterruptPriority+0x74>)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	4413      	add	r3, r2
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014824:	4b16      	ldr	r3, [pc, #88]	@ (8014880 <vPortValidateInterruptPriority+0x78>)
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	7afa      	ldrb	r2, [r7, #11]
 801482a:	429a      	cmp	r2, r3
 801482c:	d20b      	bcs.n	8014846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014832:	f383 8811 	msr	BASEPRI, r3
 8014836:	f3bf 8f6f 	isb	sy
 801483a:	f3bf 8f4f 	dsb	sy
 801483e:	607b      	str	r3, [r7, #4]
}
 8014840:	bf00      	nop
 8014842:	bf00      	nop
 8014844:	e7fd      	b.n	8014842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014846:	4b0f      	ldr	r3, [pc, #60]	@ (8014884 <vPortValidateInterruptPriority+0x7c>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801484e:	4b0e      	ldr	r3, [pc, #56]	@ (8014888 <vPortValidateInterruptPriority+0x80>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	429a      	cmp	r2, r3
 8014854:	d90b      	bls.n	801486e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801485a:	f383 8811 	msr	BASEPRI, r3
 801485e:	f3bf 8f6f 	isb	sy
 8014862:	f3bf 8f4f 	dsb	sy
 8014866:	603b      	str	r3, [r7, #0]
}
 8014868:	bf00      	nop
 801486a:	bf00      	nop
 801486c:	e7fd      	b.n	801486a <vPortValidateInterruptPriority+0x62>
	}
 801486e:	bf00      	nop
 8014870:	3714      	adds	r7, #20
 8014872:	46bd      	mov	sp, r7
 8014874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014878:	4770      	bx	lr
 801487a:	bf00      	nop
 801487c:	e000e3f0 	.word	0xe000e3f0
 8014880:	20001264 	.word	0x20001264
 8014884:	e000ed0c 	.word	0xe000ed0c
 8014888:	20001268 	.word	0x20001268

0801488c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b08a      	sub	sp, #40	@ 0x28
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014894:	2300      	movs	r3, #0
 8014896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014898:	f7fe ff9a 	bl	80137d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801489c:	4b5c      	ldr	r3, [pc, #368]	@ (8014a10 <pvPortMalloc+0x184>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d101      	bne.n	80148a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80148a4:	f000 f924 	bl	8014af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80148a8:	4b5a      	ldr	r3, [pc, #360]	@ (8014a14 <pvPortMalloc+0x188>)
 80148aa:	681a      	ldr	r2, [r3, #0]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	4013      	ands	r3, r2
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f040 8095 	bne.w	80149e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d01e      	beq.n	80148fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80148bc:	2208      	movs	r2, #8
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	4413      	add	r3, r2
 80148c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f003 0307 	and.w	r3, r3, #7
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d015      	beq.n	80148fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f023 0307 	bic.w	r3, r3, #7
 80148d4:	3308      	adds	r3, #8
 80148d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f003 0307 	and.w	r3, r3, #7
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d00b      	beq.n	80148fa <pvPortMalloc+0x6e>
	__asm volatile
 80148e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e6:	f383 8811 	msr	BASEPRI, r3
 80148ea:	f3bf 8f6f 	isb	sy
 80148ee:	f3bf 8f4f 	dsb	sy
 80148f2:	617b      	str	r3, [r7, #20]
}
 80148f4:	bf00      	nop
 80148f6:	bf00      	nop
 80148f8:	e7fd      	b.n	80148f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d06f      	beq.n	80149e0 <pvPortMalloc+0x154>
 8014900:	4b45      	ldr	r3, [pc, #276]	@ (8014a18 <pvPortMalloc+0x18c>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	429a      	cmp	r2, r3
 8014908:	d86a      	bhi.n	80149e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801490a:	4b44      	ldr	r3, [pc, #272]	@ (8014a1c <pvPortMalloc+0x190>)
 801490c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801490e:	4b43      	ldr	r3, [pc, #268]	@ (8014a1c <pvPortMalloc+0x190>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014914:	e004      	b.n	8014920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	429a      	cmp	r2, r3
 8014928:	d903      	bls.n	8014932 <pvPortMalloc+0xa6>
 801492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d1f1      	bne.n	8014916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014932:	4b37      	ldr	r3, [pc, #220]	@ (8014a10 <pvPortMalloc+0x184>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014938:	429a      	cmp	r2, r3
 801493a:	d051      	beq.n	80149e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801493c:	6a3b      	ldr	r3, [r7, #32]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2208      	movs	r2, #8
 8014942:	4413      	add	r3, r2
 8014944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	6a3b      	ldr	r3, [r7, #32]
 801494c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014950:	685a      	ldr	r2, [r3, #4]
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	1ad2      	subs	r2, r2, r3
 8014956:	2308      	movs	r3, #8
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	429a      	cmp	r2, r3
 801495c:	d920      	bls.n	80149a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801495e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	4413      	add	r3, r2
 8014964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	f003 0307 	and.w	r3, r3, #7
 801496c:	2b00      	cmp	r3, #0
 801496e:	d00b      	beq.n	8014988 <pvPortMalloc+0xfc>
	__asm volatile
 8014970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014974:	f383 8811 	msr	BASEPRI, r3
 8014978:	f3bf 8f6f 	isb	sy
 801497c:	f3bf 8f4f 	dsb	sy
 8014980:	613b      	str	r3, [r7, #16]
}
 8014982:	bf00      	nop
 8014984:	bf00      	nop
 8014986:	e7fd      	b.n	8014984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801498a:	685a      	ldr	r2, [r3, #4]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	1ad2      	subs	r2, r2, r3
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801499a:	69b8      	ldr	r0, [r7, #24]
 801499c:	f000 f90a 	bl	8014bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80149a0:	4b1d      	ldr	r3, [pc, #116]	@ (8014a18 <pvPortMalloc+0x18c>)
 80149a2:	681a      	ldr	r2, [r3, #0]
 80149a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	1ad3      	subs	r3, r2, r3
 80149aa:	4a1b      	ldr	r2, [pc, #108]	@ (8014a18 <pvPortMalloc+0x18c>)
 80149ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80149ae:	4b1a      	ldr	r3, [pc, #104]	@ (8014a18 <pvPortMalloc+0x18c>)
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014a20 <pvPortMalloc+0x194>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d203      	bcs.n	80149c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80149ba:	4b17      	ldr	r3, [pc, #92]	@ (8014a18 <pvPortMalloc+0x18c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4a18      	ldr	r2, [pc, #96]	@ (8014a20 <pvPortMalloc+0x194>)
 80149c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80149c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c4:	685a      	ldr	r2, [r3, #4]
 80149c6:	4b13      	ldr	r3, [pc, #76]	@ (8014a14 <pvPortMalloc+0x188>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	431a      	orrs	r2, r3
 80149cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80149d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d2:	2200      	movs	r2, #0
 80149d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80149d6:	4b13      	ldr	r3, [pc, #76]	@ (8014a24 <pvPortMalloc+0x198>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	3301      	adds	r3, #1
 80149dc:	4a11      	ldr	r2, [pc, #68]	@ (8014a24 <pvPortMalloc+0x198>)
 80149de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80149e0:	f7fe ff04 	bl	80137ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	f003 0307 	and.w	r3, r3, #7
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00b      	beq.n	8014a06 <pvPortMalloc+0x17a>
	__asm volatile
 80149ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149f2:	f383 8811 	msr	BASEPRI, r3
 80149f6:	f3bf 8f6f 	isb	sy
 80149fa:	f3bf 8f4f 	dsb	sy
 80149fe:	60fb      	str	r3, [r7, #12]
}
 8014a00:	bf00      	nop
 8014a02:	bf00      	nop
 8014a04:	e7fd      	b.n	8014a02 <pvPortMalloc+0x176>
	return pvReturn;
 8014a06:	69fb      	ldr	r3, [r7, #28]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3728      	adds	r7, #40	@ 0x28
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	20003274 	.word	0x20003274
 8014a14:	20003288 	.word	0x20003288
 8014a18:	20003278 	.word	0x20003278
 8014a1c:	2000326c 	.word	0x2000326c
 8014a20:	2000327c 	.word	0x2000327c
 8014a24:	20003280 	.word	0x20003280

08014a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b086      	sub	sp, #24
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d04f      	beq.n	8014ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014a3a:	2308      	movs	r3, #8
 8014a3c:	425b      	negs	r3, r3
 8014a3e:	697a      	ldr	r2, [r7, #20]
 8014a40:	4413      	add	r3, r2
 8014a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	685a      	ldr	r2, [r3, #4]
 8014a4c:	4b25      	ldr	r3, [pc, #148]	@ (8014ae4 <vPortFree+0xbc>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4013      	ands	r3, r2
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d10b      	bne.n	8014a6e <vPortFree+0x46>
	__asm volatile
 8014a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a5a:	f383 8811 	msr	BASEPRI, r3
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	f3bf 8f4f 	dsb	sy
 8014a66:	60fb      	str	r3, [r7, #12]
}
 8014a68:	bf00      	nop
 8014a6a:	bf00      	nop
 8014a6c:	e7fd      	b.n	8014a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014a6e:	693b      	ldr	r3, [r7, #16]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d00b      	beq.n	8014a8e <vPortFree+0x66>
	__asm volatile
 8014a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a7a:	f383 8811 	msr	BASEPRI, r3
 8014a7e:	f3bf 8f6f 	isb	sy
 8014a82:	f3bf 8f4f 	dsb	sy
 8014a86:	60bb      	str	r3, [r7, #8]
}
 8014a88:	bf00      	nop
 8014a8a:	bf00      	nop
 8014a8c:	e7fd      	b.n	8014a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	685a      	ldr	r2, [r3, #4]
 8014a92:	4b14      	ldr	r3, [pc, #80]	@ (8014ae4 <vPortFree+0xbc>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	4013      	ands	r3, r2
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d01e      	beq.n	8014ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d11a      	bne.n	8014ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	685a      	ldr	r2, [r3, #4]
 8014aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8014ae4 <vPortFree+0xbc>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	43db      	mvns	r3, r3
 8014aae:	401a      	ands	r2, r3
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ab4:	f7fe fe8c 	bl	80137d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	685a      	ldr	r2, [r3, #4]
 8014abc:	4b0a      	ldr	r3, [pc, #40]	@ (8014ae8 <vPortFree+0xc0>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4413      	add	r3, r2
 8014ac2:	4a09      	ldr	r2, [pc, #36]	@ (8014ae8 <vPortFree+0xc0>)
 8014ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014ac6:	6938      	ldr	r0, [r7, #16]
 8014ac8:	f000 f874 	bl	8014bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014acc:	4b07      	ldr	r3, [pc, #28]	@ (8014aec <vPortFree+0xc4>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	4a06      	ldr	r2, [pc, #24]	@ (8014aec <vPortFree+0xc4>)
 8014ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014ad6:	f7fe fe89 	bl	80137ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ada:	bf00      	nop
 8014adc:	3718      	adds	r7, #24
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	20003288 	.word	0x20003288
 8014ae8:	20003278 	.word	0x20003278
 8014aec:	20003284 	.word	0x20003284

08014af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014af0:	b480      	push	{r7}
 8014af2:	b085      	sub	sp, #20
 8014af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014afc:	4b27      	ldr	r3, [pc, #156]	@ (8014b9c <prvHeapInit+0xac>)
 8014afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f003 0307 	and.w	r3, r3, #7
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d00c      	beq.n	8014b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	3307      	adds	r3, #7
 8014b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	f023 0307 	bic.w	r3, r3, #7
 8014b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014b18:	68ba      	ldr	r2, [r7, #8]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8014b9c <prvHeapInit+0xac>)
 8014b20:	4413      	add	r3, r2
 8014b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014b28:	4a1d      	ldr	r2, [pc, #116]	@ (8014ba0 <prvHeapInit+0xb0>)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8014ba0 <prvHeapInit+0xb0>)
 8014b30:	2200      	movs	r2, #0
 8014b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	68ba      	ldr	r2, [r7, #8]
 8014b38:	4413      	add	r3, r2
 8014b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014b3c:	2208      	movs	r2, #8
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	1a9b      	subs	r3, r3, r2
 8014b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	f023 0307 	bic.w	r3, r3, #7
 8014b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	4a15      	ldr	r2, [pc, #84]	@ (8014ba4 <prvHeapInit+0xb4>)
 8014b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014b52:	4b14      	ldr	r3, [pc, #80]	@ (8014ba4 <prvHeapInit+0xb4>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	2200      	movs	r2, #0
 8014b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014b5a:	4b12      	ldr	r3, [pc, #72]	@ (8014ba4 <prvHeapInit+0xb4>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	68fa      	ldr	r2, [r7, #12]
 8014b6a:	1ad2      	subs	r2, r2, r3
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014b70:	4b0c      	ldr	r3, [pc, #48]	@ (8014ba4 <prvHeapInit+0xb4>)
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8014ba8 <prvHeapInit+0xb8>)
 8014b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	4a09      	ldr	r2, [pc, #36]	@ (8014bac <prvHeapInit+0xbc>)
 8014b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014b88:	4b09      	ldr	r3, [pc, #36]	@ (8014bb0 <prvHeapInit+0xc0>)
 8014b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014b8e:	601a      	str	r2, [r3, #0]
}
 8014b90:	bf00      	nop
 8014b92:	3714      	adds	r7, #20
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr
 8014b9c:	2000126c 	.word	0x2000126c
 8014ba0:	2000326c 	.word	0x2000326c
 8014ba4:	20003274 	.word	0x20003274
 8014ba8:	2000327c 	.word	0x2000327c
 8014bac:	20003278 	.word	0x20003278
 8014bb0:	20003288 	.word	0x20003288

08014bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b085      	sub	sp, #20
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014bbc:	4b28      	ldr	r3, [pc, #160]	@ (8014c60 <prvInsertBlockIntoFreeList+0xac>)
 8014bbe:	60fb      	str	r3, [r7, #12]
 8014bc0:	e002      	b.n	8014bc8 <prvInsertBlockIntoFreeList+0x14>
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	60fb      	str	r3, [r7, #12]
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d8f7      	bhi.n	8014bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	4413      	add	r3, r2
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d108      	bne.n	8014bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	685a      	ldr	r2, [r3, #4]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	441a      	add	r2, r3
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	68ba      	ldr	r2, [r7, #8]
 8014c00:	441a      	add	r2, r3
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d118      	bne.n	8014c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	4b15      	ldr	r3, [pc, #84]	@ (8014c64 <prvInsertBlockIntoFreeList+0xb0>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d00d      	beq.n	8014c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	685a      	ldr	r2, [r3, #4]
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	441a      	add	r2, r3
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	681a      	ldr	r2, [r3, #0]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	601a      	str	r2, [r3, #0]
 8014c30:	e008      	b.n	8014c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014c32:	4b0c      	ldr	r3, [pc, #48]	@ (8014c64 <prvInsertBlockIntoFreeList+0xb0>)
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	601a      	str	r2, [r3, #0]
 8014c3a:	e003      	b.n	8014c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681a      	ldr	r2, [r3, #0]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d002      	beq.n	8014c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c52:	bf00      	nop
 8014c54:	3714      	adds	r7, #20
 8014c56:	46bd      	mov	sp, r7
 8014c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	2000326c 	.word	0x2000326c
 8014c64:	20003274 	.word	0x20003274

08014c68 <calloc>:
 8014c68:	4b02      	ldr	r3, [pc, #8]	@ (8014c74 <calloc+0xc>)
 8014c6a:	460a      	mov	r2, r1
 8014c6c:	4601      	mov	r1, r0
 8014c6e:	6818      	ldr	r0, [r3, #0]
 8014c70:	f000 b802 	b.w	8014c78 <_calloc_r>
 8014c74:	200000c0 	.word	0x200000c0

08014c78 <_calloc_r>:
 8014c78:	b570      	push	{r4, r5, r6, lr}
 8014c7a:	fba1 5402 	umull	r5, r4, r1, r2
 8014c7e:	b93c      	cbnz	r4, 8014c90 <_calloc_r+0x18>
 8014c80:	4629      	mov	r1, r5
 8014c82:	f000 f82f 	bl	8014ce4 <_malloc_r>
 8014c86:	4606      	mov	r6, r0
 8014c88:	b928      	cbnz	r0, 8014c96 <_calloc_r+0x1e>
 8014c8a:	2600      	movs	r6, #0
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	bd70      	pop	{r4, r5, r6, pc}
 8014c90:	220c      	movs	r2, #12
 8014c92:	6002      	str	r2, [r0, #0]
 8014c94:	e7f9      	b.n	8014c8a <_calloc_r+0x12>
 8014c96:	462a      	mov	r2, r5
 8014c98:	4621      	mov	r1, r4
 8014c9a:	f000 f8af 	bl	8014dfc <memset>
 8014c9e:	e7f5      	b.n	8014c8c <_calloc_r+0x14>

08014ca0 <sbrk_aligned>:
 8014ca0:	b570      	push	{r4, r5, r6, lr}
 8014ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8014ce0 <sbrk_aligned+0x40>)
 8014ca4:	460c      	mov	r4, r1
 8014ca6:	6831      	ldr	r1, [r6, #0]
 8014ca8:	4605      	mov	r5, r0
 8014caa:	b911      	cbnz	r1, 8014cb2 <sbrk_aligned+0x12>
 8014cac:	f000 f8ae 	bl	8014e0c <_sbrk_r>
 8014cb0:	6030      	str	r0, [r6, #0]
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f000 f8a9 	bl	8014e0c <_sbrk_r>
 8014cba:	1c43      	adds	r3, r0, #1
 8014cbc:	d103      	bne.n	8014cc6 <sbrk_aligned+0x26>
 8014cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	bd70      	pop	{r4, r5, r6, pc}
 8014cc6:	1cc4      	adds	r4, r0, #3
 8014cc8:	f024 0403 	bic.w	r4, r4, #3
 8014ccc:	42a0      	cmp	r0, r4
 8014cce:	d0f8      	beq.n	8014cc2 <sbrk_aligned+0x22>
 8014cd0:	1a21      	subs	r1, r4, r0
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f000 f89a 	bl	8014e0c <_sbrk_r>
 8014cd8:	3001      	adds	r0, #1
 8014cda:	d1f2      	bne.n	8014cc2 <sbrk_aligned+0x22>
 8014cdc:	e7ef      	b.n	8014cbe <sbrk_aligned+0x1e>
 8014cde:	bf00      	nop
 8014ce0:	2000328c 	.word	0x2000328c

08014ce4 <_malloc_r>:
 8014ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ce8:	1ccd      	adds	r5, r1, #3
 8014cea:	f025 0503 	bic.w	r5, r5, #3
 8014cee:	3508      	adds	r5, #8
 8014cf0:	2d0c      	cmp	r5, #12
 8014cf2:	bf38      	it	cc
 8014cf4:	250c      	movcc	r5, #12
 8014cf6:	2d00      	cmp	r5, #0
 8014cf8:	4606      	mov	r6, r0
 8014cfa:	db01      	blt.n	8014d00 <_malloc_r+0x1c>
 8014cfc:	42a9      	cmp	r1, r5
 8014cfe:	d904      	bls.n	8014d0a <_malloc_r+0x26>
 8014d00:	230c      	movs	r3, #12
 8014d02:	6033      	str	r3, [r6, #0]
 8014d04:	2000      	movs	r0, #0
 8014d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014de0 <_malloc_r+0xfc>
 8014d0e:	f000 f869 	bl	8014de4 <__malloc_lock>
 8014d12:	f8d8 3000 	ldr.w	r3, [r8]
 8014d16:	461c      	mov	r4, r3
 8014d18:	bb44      	cbnz	r4, 8014d6c <_malloc_r+0x88>
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	4630      	mov	r0, r6
 8014d1e:	f7ff ffbf 	bl	8014ca0 <sbrk_aligned>
 8014d22:	1c43      	adds	r3, r0, #1
 8014d24:	4604      	mov	r4, r0
 8014d26:	d158      	bne.n	8014dda <_malloc_r+0xf6>
 8014d28:	f8d8 4000 	ldr.w	r4, [r8]
 8014d2c:	4627      	mov	r7, r4
 8014d2e:	2f00      	cmp	r7, #0
 8014d30:	d143      	bne.n	8014dba <_malloc_r+0xd6>
 8014d32:	2c00      	cmp	r4, #0
 8014d34:	d04b      	beq.n	8014dce <_malloc_r+0xea>
 8014d36:	6823      	ldr	r3, [r4, #0]
 8014d38:	4639      	mov	r1, r7
 8014d3a:	4630      	mov	r0, r6
 8014d3c:	eb04 0903 	add.w	r9, r4, r3
 8014d40:	f000 f864 	bl	8014e0c <_sbrk_r>
 8014d44:	4581      	cmp	r9, r0
 8014d46:	d142      	bne.n	8014dce <_malloc_r+0xea>
 8014d48:	6821      	ldr	r1, [r4, #0]
 8014d4a:	1a6d      	subs	r5, r5, r1
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	4630      	mov	r0, r6
 8014d50:	f7ff ffa6 	bl	8014ca0 <sbrk_aligned>
 8014d54:	3001      	adds	r0, #1
 8014d56:	d03a      	beq.n	8014dce <_malloc_r+0xea>
 8014d58:	6823      	ldr	r3, [r4, #0]
 8014d5a:	442b      	add	r3, r5
 8014d5c:	6023      	str	r3, [r4, #0]
 8014d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8014d62:	685a      	ldr	r2, [r3, #4]
 8014d64:	bb62      	cbnz	r2, 8014dc0 <_malloc_r+0xdc>
 8014d66:	f8c8 7000 	str.w	r7, [r8]
 8014d6a:	e00f      	b.n	8014d8c <_malloc_r+0xa8>
 8014d6c:	6822      	ldr	r2, [r4, #0]
 8014d6e:	1b52      	subs	r2, r2, r5
 8014d70:	d420      	bmi.n	8014db4 <_malloc_r+0xd0>
 8014d72:	2a0b      	cmp	r2, #11
 8014d74:	d917      	bls.n	8014da6 <_malloc_r+0xc2>
 8014d76:	1961      	adds	r1, r4, r5
 8014d78:	42a3      	cmp	r3, r4
 8014d7a:	6025      	str	r5, [r4, #0]
 8014d7c:	bf18      	it	ne
 8014d7e:	6059      	strne	r1, [r3, #4]
 8014d80:	6863      	ldr	r3, [r4, #4]
 8014d82:	bf08      	it	eq
 8014d84:	f8c8 1000 	streq.w	r1, [r8]
 8014d88:	5162      	str	r2, [r4, r5]
 8014d8a:	604b      	str	r3, [r1, #4]
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	f000 f82f 	bl	8014df0 <__malloc_unlock>
 8014d92:	f104 000b 	add.w	r0, r4, #11
 8014d96:	1d23      	adds	r3, r4, #4
 8014d98:	f020 0007 	bic.w	r0, r0, #7
 8014d9c:	1ac2      	subs	r2, r0, r3
 8014d9e:	bf1c      	itt	ne
 8014da0:	1a1b      	subne	r3, r3, r0
 8014da2:	50a3      	strne	r3, [r4, r2]
 8014da4:	e7af      	b.n	8014d06 <_malloc_r+0x22>
 8014da6:	6862      	ldr	r2, [r4, #4]
 8014da8:	42a3      	cmp	r3, r4
 8014daa:	bf0c      	ite	eq
 8014dac:	f8c8 2000 	streq.w	r2, [r8]
 8014db0:	605a      	strne	r2, [r3, #4]
 8014db2:	e7eb      	b.n	8014d8c <_malloc_r+0xa8>
 8014db4:	4623      	mov	r3, r4
 8014db6:	6864      	ldr	r4, [r4, #4]
 8014db8:	e7ae      	b.n	8014d18 <_malloc_r+0x34>
 8014dba:	463c      	mov	r4, r7
 8014dbc:	687f      	ldr	r7, [r7, #4]
 8014dbe:	e7b6      	b.n	8014d2e <_malloc_r+0x4a>
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	42a3      	cmp	r3, r4
 8014dc6:	d1fb      	bne.n	8014dc0 <_malloc_r+0xdc>
 8014dc8:	2300      	movs	r3, #0
 8014dca:	6053      	str	r3, [r2, #4]
 8014dcc:	e7de      	b.n	8014d8c <_malloc_r+0xa8>
 8014dce:	230c      	movs	r3, #12
 8014dd0:	6033      	str	r3, [r6, #0]
 8014dd2:	4630      	mov	r0, r6
 8014dd4:	f000 f80c 	bl	8014df0 <__malloc_unlock>
 8014dd8:	e794      	b.n	8014d04 <_malloc_r+0x20>
 8014dda:	6005      	str	r5, [r0, #0]
 8014ddc:	e7d6      	b.n	8014d8c <_malloc_r+0xa8>
 8014dde:	bf00      	nop
 8014de0:	20003290 	.word	0x20003290

08014de4 <__malloc_lock>:
 8014de4:	4801      	ldr	r0, [pc, #4]	@ (8014dec <__malloc_lock+0x8>)
 8014de6:	f000 b84b 	b.w	8014e80 <__retarget_lock_acquire_recursive>
 8014dea:	bf00      	nop
 8014dec:	200033d0 	.word	0x200033d0

08014df0 <__malloc_unlock>:
 8014df0:	4801      	ldr	r0, [pc, #4]	@ (8014df8 <__malloc_unlock+0x8>)
 8014df2:	f000 b846 	b.w	8014e82 <__retarget_lock_release_recursive>
 8014df6:	bf00      	nop
 8014df8:	200033d0 	.word	0x200033d0

08014dfc <memset>:
 8014dfc:	4402      	add	r2, r0
 8014dfe:	4603      	mov	r3, r0
 8014e00:	4293      	cmp	r3, r2
 8014e02:	d100      	bne.n	8014e06 <memset+0xa>
 8014e04:	4770      	bx	lr
 8014e06:	f803 1b01 	strb.w	r1, [r3], #1
 8014e0a:	e7f9      	b.n	8014e00 <memset+0x4>

08014e0c <_sbrk_r>:
 8014e0c:	b538      	push	{r3, r4, r5, lr}
 8014e0e:	4d06      	ldr	r5, [pc, #24]	@ (8014e28 <_sbrk_r+0x1c>)
 8014e10:	2300      	movs	r3, #0
 8014e12:	4604      	mov	r4, r0
 8014e14:	4608      	mov	r0, r1
 8014e16:	602b      	str	r3, [r5, #0]
 8014e18:	f7f0 fd66 	bl	80058e8 <_sbrk>
 8014e1c:	1c43      	adds	r3, r0, #1
 8014e1e:	d102      	bne.n	8014e26 <_sbrk_r+0x1a>
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	b103      	cbz	r3, 8014e26 <_sbrk_r+0x1a>
 8014e24:	6023      	str	r3, [r4, #0]
 8014e26:	bd38      	pop	{r3, r4, r5, pc}
 8014e28:	200033cc 	.word	0x200033cc

08014e2c <__errno>:
 8014e2c:	4b01      	ldr	r3, [pc, #4]	@ (8014e34 <__errno+0x8>)
 8014e2e:	6818      	ldr	r0, [r3, #0]
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	200000c0 	.word	0x200000c0

08014e38 <__libc_init_array>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8014e70 <__libc_init_array+0x38>)
 8014e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8014e74 <__libc_init_array+0x3c>)
 8014e3e:	1b64      	subs	r4, r4, r5
 8014e40:	10a4      	asrs	r4, r4, #2
 8014e42:	2600      	movs	r6, #0
 8014e44:	42a6      	cmp	r6, r4
 8014e46:	d109      	bne.n	8014e5c <__libc_init_array+0x24>
 8014e48:	4d0b      	ldr	r5, [pc, #44]	@ (8014e78 <__libc_init_array+0x40>)
 8014e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8014e7c <__libc_init_array+0x44>)
 8014e4c:	f000 fd16 	bl	801587c <_init>
 8014e50:	1b64      	subs	r4, r4, r5
 8014e52:	10a4      	asrs	r4, r4, #2
 8014e54:	2600      	movs	r6, #0
 8014e56:	42a6      	cmp	r6, r4
 8014e58:	d105      	bne.n	8014e66 <__libc_init_array+0x2e>
 8014e5a:	bd70      	pop	{r4, r5, r6, pc}
 8014e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e60:	4798      	blx	r3
 8014e62:	3601      	adds	r6, #1
 8014e64:	e7ee      	b.n	8014e44 <__libc_init_array+0xc>
 8014e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e6a:	4798      	blx	r3
 8014e6c:	3601      	adds	r6, #1
 8014e6e:	e7f2      	b.n	8014e56 <__libc_init_array+0x1e>
 8014e70:	08015f50 	.word	0x08015f50
 8014e74:	08015f50 	.word	0x08015f50
 8014e78:	08015f50 	.word	0x08015f50
 8014e7c:	08015f54 	.word	0x08015f54

08014e80 <__retarget_lock_acquire_recursive>:
 8014e80:	4770      	bx	lr

08014e82 <__retarget_lock_release_recursive>:
 8014e82:	4770      	bx	lr

08014e84 <memcpy>:
 8014e84:	440a      	add	r2, r1
 8014e86:	4291      	cmp	r1, r2
 8014e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e8c:	d100      	bne.n	8014e90 <memcpy+0xc>
 8014e8e:	4770      	bx	lr
 8014e90:	b510      	push	{r4, lr}
 8014e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e9a:	4291      	cmp	r1, r2
 8014e9c:	d1f9      	bne.n	8014e92 <memcpy+0xe>
 8014e9e:	bd10      	pop	{r4, pc}

08014ea0 <sqrt>:
 8014ea0:	b538      	push	{r3, r4, r5, lr}
 8014ea2:	ed2d 8b02 	vpush	{d8}
 8014ea6:	ec55 4b10 	vmov	r4, r5, d0
 8014eaa:	f000 f8a5 	bl	8014ff8 <__ieee754_sqrt>
 8014eae:	4622      	mov	r2, r4
 8014eb0:	462b      	mov	r3, r5
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	4629      	mov	r1, r5
 8014eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8014eba:	eef0 8a60 	vmov.f32	s17, s1
 8014ebe:	f7eb fddd 	bl	8000a7c <__aeabi_dcmpun>
 8014ec2:	b990      	cbnz	r0, 8014eea <sqrt+0x4a>
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4629      	mov	r1, r5
 8014ecc:	f7eb fdae 	bl	8000a2c <__aeabi_dcmplt>
 8014ed0:	b158      	cbz	r0, 8014eea <sqrt+0x4a>
 8014ed2:	f7ff ffab 	bl	8014e2c <__errno>
 8014ed6:	2321      	movs	r3, #33	@ 0x21
 8014ed8:	6003      	str	r3, [r0, #0]
 8014eda:	2200      	movs	r2, #0
 8014edc:	2300      	movs	r3, #0
 8014ede:	4610      	mov	r0, r2
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	f7eb fc5b 	bl	800079c <__aeabi_ddiv>
 8014ee6:	ec41 0b18 	vmov	d8, r0, r1
 8014eea:	eeb0 0a48 	vmov.f32	s0, s16
 8014eee:	eef0 0a68 	vmov.f32	s1, s17
 8014ef2:	ecbd 8b02 	vpop	{d8}
 8014ef6:	bd38      	pop	{r3, r4, r5, pc}

08014ef8 <powf>:
 8014ef8:	b508      	push	{r3, lr}
 8014efa:	ed2d 8b04 	vpush	{d8-d9}
 8014efe:	eeb0 8a60 	vmov.f32	s16, s1
 8014f02:	eeb0 9a40 	vmov.f32	s18, s0
 8014f06:	f000 f955 	bl	80151b4 <__ieee754_powf>
 8014f0a:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f12:	eef0 8a40 	vmov.f32	s17, s0
 8014f16:	d63e      	bvs.n	8014f96 <powf+0x9e>
 8014f18:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f20:	d112      	bne.n	8014f48 <powf+0x50>
 8014f22:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f2a:	d039      	beq.n	8014fa0 <powf+0xa8>
 8014f2c:	eeb0 0a48 	vmov.f32	s0, s16
 8014f30:	f000 f858 	bl	8014fe4 <finitef>
 8014f34:	b378      	cbz	r0, 8014f96 <powf+0x9e>
 8014f36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f3e:	d52a      	bpl.n	8014f96 <powf+0x9e>
 8014f40:	f7ff ff74 	bl	8014e2c <__errno>
 8014f44:	2322      	movs	r3, #34	@ 0x22
 8014f46:	e014      	b.n	8014f72 <powf+0x7a>
 8014f48:	f000 f84c 	bl	8014fe4 <finitef>
 8014f4c:	b998      	cbnz	r0, 8014f76 <powf+0x7e>
 8014f4e:	eeb0 0a49 	vmov.f32	s0, s18
 8014f52:	f000 f847 	bl	8014fe4 <finitef>
 8014f56:	b170      	cbz	r0, 8014f76 <powf+0x7e>
 8014f58:	eeb0 0a48 	vmov.f32	s0, s16
 8014f5c:	f000 f842 	bl	8014fe4 <finitef>
 8014f60:	b148      	cbz	r0, 8014f76 <powf+0x7e>
 8014f62:	eef4 8a68 	vcmp.f32	s17, s17
 8014f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6a:	d7e9      	bvc.n	8014f40 <powf+0x48>
 8014f6c:	f7ff ff5e 	bl	8014e2c <__errno>
 8014f70:	2321      	movs	r3, #33	@ 0x21
 8014f72:	6003      	str	r3, [r0, #0]
 8014f74:	e00f      	b.n	8014f96 <powf+0x9e>
 8014f76:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f7e:	d10a      	bne.n	8014f96 <powf+0x9e>
 8014f80:	eeb0 0a49 	vmov.f32	s0, s18
 8014f84:	f000 f82e 	bl	8014fe4 <finitef>
 8014f88:	b128      	cbz	r0, 8014f96 <powf+0x9e>
 8014f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8014f8e:	f000 f829 	bl	8014fe4 <finitef>
 8014f92:	2800      	cmp	r0, #0
 8014f94:	d1d4      	bne.n	8014f40 <powf+0x48>
 8014f96:	eeb0 0a68 	vmov.f32	s0, s17
 8014f9a:	ecbd 8b04 	vpop	{d8-d9}
 8014f9e:	bd08      	pop	{r3, pc}
 8014fa0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8014fa4:	e7f7      	b.n	8014f96 <powf+0x9e>
	...

08014fa8 <sqrtf>:
 8014fa8:	b508      	push	{r3, lr}
 8014faa:	ed2d 8b02 	vpush	{d8}
 8014fae:	eeb0 8a40 	vmov.f32	s16, s0
 8014fb2:	f000 f8fb 	bl	80151ac <__ieee754_sqrtf>
 8014fb6:	eeb4 8a48 	vcmp.f32	s16, s16
 8014fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fbe:	d60c      	bvs.n	8014fda <sqrtf+0x32>
 8014fc0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014fe0 <sqrtf+0x38>
 8014fc4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fcc:	d505      	bpl.n	8014fda <sqrtf+0x32>
 8014fce:	f7ff ff2d 	bl	8014e2c <__errno>
 8014fd2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014fd6:	2321      	movs	r3, #33	@ 0x21
 8014fd8:	6003      	str	r3, [r0, #0]
 8014fda:	ecbd 8b02 	vpop	{d8}
 8014fde:	bd08      	pop	{r3, pc}
 8014fe0:	00000000 	.word	0x00000000

08014fe4 <finitef>:
 8014fe4:	ee10 3a10 	vmov	r3, s0
 8014fe8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8014fec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8014ff0:	bfac      	ite	ge
 8014ff2:	2000      	movge	r0, #0
 8014ff4:	2001      	movlt	r0, #1
 8014ff6:	4770      	bx	lr

08014ff8 <__ieee754_sqrt>:
 8014ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ffc:	4a68      	ldr	r2, [pc, #416]	@ (80151a0 <__ieee754_sqrt+0x1a8>)
 8014ffe:	ec55 4b10 	vmov	r4, r5, d0
 8015002:	43aa      	bics	r2, r5
 8015004:	462b      	mov	r3, r5
 8015006:	4621      	mov	r1, r4
 8015008:	d110      	bne.n	801502c <__ieee754_sqrt+0x34>
 801500a:	4622      	mov	r2, r4
 801500c:	4620      	mov	r0, r4
 801500e:	4629      	mov	r1, r5
 8015010:	f7eb fa9a 	bl	8000548 <__aeabi_dmul>
 8015014:	4602      	mov	r2, r0
 8015016:	460b      	mov	r3, r1
 8015018:	4620      	mov	r0, r4
 801501a:	4629      	mov	r1, r5
 801501c:	f7eb f8de 	bl	80001dc <__adddf3>
 8015020:	4604      	mov	r4, r0
 8015022:	460d      	mov	r5, r1
 8015024:	ec45 4b10 	vmov	d0, r4, r5
 8015028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801502c:	2d00      	cmp	r5, #0
 801502e:	dc0e      	bgt.n	801504e <__ieee754_sqrt+0x56>
 8015030:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015034:	4322      	orrs	r2, r4
 8015036:	d0f5      	beq.n	8015024 <__ieee754_sqrt+0x2c>
 8015038:	b19d      	cbz	r5, 8015062 <__ieee754_sqrt+0x6a>
 801503a:	4622      	mov	r2, r4
 801503c:	4620      	mov	r0, r4
 801503e:	4629      	mov	r1, r5
 8015040:	f7eb f8ca 	bl	80001d8 <__aeabi_dsub>
 8015044:	4602      	mov	r2, r0
 8015046:	460b      	mov	r3, r1
 8015048:	f7eb fba8 	bl	800079c <__aeabi_ddiv>
 801504c:	e7e8      	b.n	8015020 <__ieee754_sqrt+0x28>
 801504e:	152a      	asrs	r2, r5, #20
 8015050:	d115      	bne.n	801507e <__ieee754_sqrt+0x86>
 8015052:	2000      	movs	r0, #0
 8015054:	e009      	b.n	801506a <__ieee754_sqrt+0x72>
 8015056:	0acb      	lsrs	r3, r1, #11
 8015058:	3a15      	subs	r2, #21
 801505a:	0549      	lsls	r1, r1, #21
 801505c:	2b00      	cmp	r3, #0
 801505e:	d0fa      	beq.n	8015056 <__ieee754_sqrt+0x5e>
 8015060:	e7f7      	b.n	8015052 <__ieee754_sqrt+0x5a>
 8015062:	462a      	mov	r2, r5
 8015064:	e7fa      	b.n	801505c <__ieee754_sqrt+0x64>
 8015066:	005b      	lsls	r3, r3, #1
 8015068:	3001      	adds	r0, #1
 801506a:	02dc      	lsls	r4, r3, #11
 801506c:	d5fb      	bpl.n	8015066 <__ieee754_sqrt+0x6e>
 801506e:	1e44      	subs	r4, r0, #1
 8015070:	1b12      	subs	r2, r2, r4
 8015072:	f1c0 0420 	rsb	r4, r0, #32
 8015076:	fa21 f404 	lsr.w	r4, r1, r4
 801507a:	4323      	orrs	r3, r4
 801507c:	4081      	lsls	r1, r0
 801507e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015082:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801508a:	07d2      	lsls	r2, r2, #31
 801508c:	bf5c      	itt	pl
 801508e:	005b      	lslpl	r3, r3, #1
 8015090:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015094:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015098:	bf58      	it	pl
 801509a:	0049      	lslpl	r1, r1, #1
 801509c:	2600      	movs	r6, #0
 801509e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80150a2:	106d      	asrs	r5, r5, #1
 80150a4:	0049      	lsls	r1, r1, #1
 80150a6:	2016      	movs	r0, #22
 80150a8:	4632      	mov	r2, r6
 80150aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80150ae:	1917      	adds	r7, r2, r4
 80150b0:	429f      	cmp	r7, r3
 80150b2:	bfde      	ittt	le
 80150b4:	193a      	addle	r2, r7, r4
 80150b6:	1bdb      	suble	r3, r3, r7
 80150b8:	1936      	addle	r6, r6, r4
 80150ba:	0fcf      	lsrs	r7, r1, #31
 80150bc:	3801      	subs	r0, #1
 80150be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80150c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80150c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80150ca:	d1f0      	bne.n	80150ae <__ieee754_sqrt+0xb6>
 80150cc:	4604      	mov	r4, r0
 80150ce:	2720      	movs	r7, #32
 80150d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80150d4:	429a      	cmp	r2, r3
 80150d6:	eb00 0e0c 	add.w	lr, r0, ip
 80150da:	db02      	blt.n	80150e2 <__ieee754_sqrt+0xea>
 80150dc:	d113      	bne.n	8015106 <__ieee754_sqrt+0x10e>
 80150de:	458e      	cmp	lr, r1
 80150e0:	d811      	bhi.n	8015106 <__ieee754_sqrt+0x10e>
 80150e2:	f1be 0f00 	cmp.w	lr, #0
 80150e6:	eb0e 000c 	add.w	r0, lr, ip
 80150ea:	da42      	bge.n	8015172 <__ieee754_sqrt+0x17a>
 80150ec:	2800      	cmp	r0, #0
 80150ee:	db40      	blt.n	8015172 <__ieee754_sqrt+0x17a>
 80150f0:	f102 0801 	add.w	r8, r2, #1
 80150f4:	1a9b      	subs	r3, r3, r2
 80150f6:	458e      	cmp	lr, r1
 80150f8:	bf88      	it	hi
 80150fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80150fe:	eba1 010e 	sub.w	r1, r1, lr
 8015102:	4464      	add	r4, ip
 8015104:	4642      	mov	r2, r8
 8015106:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801510a:	3f01      	subs	r7, #1
 801510c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015110:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015114:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015118:	d1dc      	bne.n	80150d4 <__ieee754_sqrt+0xdc>
 801511a:	4319      	orrs	r1, r3
 801511c:	d01b      	beq.n	8015156 <__ieee754_sqrt+0x15e>
 801511e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80151a4 <__ieee754_sqrt+0x1ac>
 8015122:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80151a8 <__ieee754_sqrt+0x1b0>
 8015126:	e9da 0100 	ldrd	r0, r1, [sl]
 801512a:	e9db 2300 	ldrd	r2, r3, [fp]
 801512e:	f7eb f853 	bl	80001d8 <__aeabi_dsub>
 8015132:	e9da 8900 	ldrd	r8, r9, [sl]
 8015136:	4602      	mov	r2, r0
 8015138:	460b      	mov	r3, r1
 801513a:	4640      	mov	r0, r8
 801513c:	4649      	mov	r1, r9
 801513e:	f7eb fc7f 	bl	8000a40 <__aeabi_dcmple>
 8015142:	b140      	cbz	r0, 8015156 <__ieee754_sqrt+0x15e>
 8015144:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015148:	e9da 0100 	ldrd	r0, r1, [sl]
 801514c:	e9db 2300 	ldrd	r2, r3, [fp]
 8015150:	d111      	bne.n	8015176 <__ieee754_sqrt+0x17e>
 8015152:	3601      	adds	r6, #1
 8015154:	463c      	mov	r4, r7
 8015156:	1072      	asrs	r2, r6, #1
 8015158:	0863      	lsrs	r3, r4, #1
 801515a:	07f1      	lsls	r1, r6, #31
 801515c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015160:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015164:	bf48      	it	mi
 8015166:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801516a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801516e:	4618      	mov	r0, r3
 8015170:	e756      	b.n	8015020 <__ieee754_sqrt+0x28>
 8015172:	4690      	mov	r8, r2
 8015174:	e7be      	b.n	80150f4 <__ieee754_sqrt+0xfc>
 8015176:	f7eb f831 	bl	80001dc <__adddf3>
 801517a:	e9da 8900 	ldrd	r8, r9, [sl]
 801517e:	4602      	mov	r2, r0
 8015180:	460b      	mov	r3, r1
 8015182:	4640      	mov	r0, r8
 8015184:	4649      	mov	r1, r9
 8015186:	f7eb fc51 	bl	8000a2c <__aeabi_dcmplt>
 801518a:	b120      	cbz	r0, 8015196 <__ieee754_sqrt+0x19e>
 801518c:	1ca0      	adds	r0, r4, #2
 801518e:	bf08      	it	eq
 8015190:	3601      	addeq	r6, #1
 8015192:	3402      	adds	r4, #2
 8015194:	e7df      	b.n	8015156 <__ieee754_sqrt+0x15e>
 8015196:	1c63      	adds	r3, r4, #1
 8015198:	f023 0401 	bic.w	r4, r3, #1
 801519c:	e7db      	b.n	8015156 <__ieee754_sqrt+0x15e>
 801519e:	bf00      	nop
 80151a0:	7ff00000 	.word	0x7ff00000
 80151a4:	20000118 	.word	0x20000118
 80151a8:	20000110 	.word	0x20000110

080151ac <__ieee754_sqrtf>:
 80151ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80151b0:	4770      	bx	lr
	...

080151b4 <__ieee754_powf>:
 80151b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151b8:	ee10 4a90 	vmov	r4, s1
 80151bc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80151c0:	ed2d 8b02 	vpush	{d8}
 80151c4:	ee10 6a10 	vmov	r6, s0
 80151c8:	eeb0 8a40 	vmov.f32	s16, s0
 80151cc:	eef0 8a60 	vmov.f32	s17, s1
 80151d0:	d10c      	bne.n	80151ec <__ieee754_powf+0x38>
 80151d2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80151d6:	0076      	lsls	r6, r6, #1
 80151d8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80151dc:	f240 829c 	bls.w	8015718 <__ieee754_powf+0x564>
 80151e0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80151e4:	ecbd 8b02 	vpop	{d8}
 80151e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151ec:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80151f0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80151f4:	d802      	bhi.n	80151fc <__ieee754_powf+0x48>
 80151f6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80151fa:	d908      	bls.n	801520e <__ieee754_powf+0x5a>
 80151fc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8015200:	d1ee      	bne.n	80151e0 <__ieee754_powf+0x2c>
 8015202:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8015206:	0064      	lsls	r4, r4, #1
 8015208:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801520c:	e7e6      	b.n	80151dc <__ieee754_powf+0x28>
 801520e:	2e00      	cmp	r6, #0
 8015210:	da1e      	bge.n	8015250 <__ieee754_powf+0x9c>
 8015212:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8015216:	d22b      	bcs.n	8015270 <__ieee754_powf+0xbc>
 8015218:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801521c:	d332      	bcc.n	8015284 <__ieee754_powf+0xd0>
 801521e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8015222:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8015226:	fa49 f503 	asr.w	r5, r9, r3
 801522a:	fa05 f303 	lsl.w	r3, r5, r3
 801522e:	454b      	cmp	r3, r9
 8015230:	d126      	bne.n	8015280 <__ieee754_powf+0xcc>
 8015232:	f005 0501 	and.w	r5, r5, #1
 8015236:	f1c5 0502 	rsb	r5, r5, #2
 801523a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801523e:	d122      	bne.n	8015286 <__ieee754_powf+0xd2>
 8015240:	2c00      	cmp	r4, #0
 8015242:	f280 826f 	bge.w	8015724 <__ieee754_powf+0x570>
 8015246:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801524a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801524e:	e7c9      	b.n	80151e4 <__ieee754_powf+0x30>
 8015250:	2500      	movs	r5, #0
 8015252:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015256:	d1f0      	bne.n	801523a <__ieee754_powf+0x86>
 8015258:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801525c:	f000 825c 	beq.w	8015718 <__ieee754_powf+0x564>
 8015260:	d908      	bls.n	8015274 <__ieee754_powf+0xc0>
 8015262:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80155c4 <__ieee754_powf+0x410>
 8015266:	2c00      	cmp	r4, #0
 8015268:	bfa8      	it	ge
 801526a:	eeb0 0a68 	vmovge.f32	s0, s17
 801526e:	e7b9      	b.n	80151e4 <__ieee754_powf+0x30>
 8015270:	2502      	movs	r5, #2
 8015272:	e7ee      	b.n	8015252 <__ieee754_powf+0x9e>
 8015274:	2c00      	cmp	r4, #0
 8015276:	f280 8252 	bge.w	801571e <__ieee754_powf+0x56a>
 801527a:	eeb1 0a68 	vneg.f32	s0, s17
 801527e:	e7b1      	b.n	80151e4 <__ieee754_powf+0x30>
 8015280:	2500      	movs	r5, #0
 8015282:	e7da      	b.n	801523a <__ieee754_powf+0x86>
 8015284:	2500      	movs	r5, #0
 8015286:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801528a:	d102      	bne.n	8015292 <__ieee754_powf+0xde>
 801528c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015290:	e7a8      	b.n	80151e4 <__ieee754_powf+0x30>
 8015292:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015296:	d109      	bne.n	80152ac <__ieee754_powf+0xf8>
 8015298:	2e00      	cmp	r6, #0
 801529a:	db07      	blt.n	80152ac <__ieee754_powf+0xf8>
 801529c:	eeb0 0a48 	vmov.f32	s0, s16
 80152a0:	ecbd 8b02 	vpop	{d8}
 80152a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152a8:	f7ff bf80 	b.w	80151ac <__ieee754_sqrtf>
 80152ac:	eeb0 0a48 	vmov.f32	s0, s16
 80152b0:	f000 fa50 	bl	8015754 <fabsf>
 80152b4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80152b8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80152bc:	4647      	mov	r7, r8
 80152be:	d002      	beq.n	80152c6 <__ieee754_powf+0x112>
 80152c0:	f1b8 0f00 	cmp.w	r8, #0
 80152c4:	d117      	bne.n	80152f6 <__ieee754_powf+0x142>
 80152c6:	2c00      	cmp	r4, #0
 80152c8:	bfbc      	itt	lt
 80152ca:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80152ce:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80152d2:	2e00      	cmp	r6, #0
 80152d4:	da86      	bge.n	80151e4 <__ieee754_powf+0x30>
 80152d6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80152da:	ea58 0805 	orrs.w	r8, r8, r5
 80152de:	d104      	bne.n	80152ea <__ieee754_powf+0x136>
 80152e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80152e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80152e8:	e77c      	b.n	80151e4 <__ieee754_powf+0x30>
 80152ea:	2d01      	cmp	r5, #1
 80152ec:	f47f af7a 	bne.w	80151e4 <__ieee754_powf+0x30>
 80152f0:	eeb1 0a40 	vneg.f32	s0, s0
 80152f4:	e776      	b.n	80151e4 <__ieee754_powf+0x30>
 80152f6:	0ff0      	lsrs	r0, r6, #31
 80152f8:	3801      	subs	r0, #1
 80152fa:	ea55 0300 	orrs.w	r3, r5, r0
 80152fe:	d104      	bne.n	801530a <__ieee754_powf+0x156>
 8015300:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015304:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015308:	e76c      	b.n	80151e4 <__ieee754_powf+0x30>
 801530a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801530e:	d973      	bls.n	80153f8 <__ieee754_powf+0x244>
 8015310:	4bad      	ldr	r3, [pc, #692]	@ (80155c8 <__ieee754_powf+0x414>)
 8015312:	4598      	cmp	r8, r3
 8015314:	d808      	bhi.n	8015328 <__ieee754_powf+0x174>
 8015316:	2c00      	cmp	r4, #0
 8015318:	da0b      	bge.n	8015332 <__ieee754_powf+0x17e>
 801531a:	2000      	movs	r0, #0
 801531c:	ecbd 8b02 	vpop	{d8}
 8015320:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015324:	f000 baa4 	b.w	8015870 <__math_oflowf>
 8015328:	4ba8      	ldr	r3, [pc, #672]	@ (80155cc <__ieee754_powf+0x418>)
 801532a:	4598      	cmp	r8, r3
 801532c:	d908      	bls.n	8015340 <__ieee754_powf+0x18c>
 801532e:	2c00      	cmp	r4, #0
 8015330:	dcf3      	bgt.n	801531a <__ieee754_powf+0x166>
 8015332:	2000      	movs	r0, #0
 8015334:	ecbd 8b02 	vpop	{d8}
 8015338:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801533c:	f000 ba92 	b.w	8015864 <__math_uflowf>
 8015340:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015344:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015348:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80155d0 <__ieee754_powf+0x41c>
 801534c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8015350:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015354:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015358:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801535c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015364:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80155d4 <__ieee754_powf+0x420>
 8015368:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801536c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80155d8 <__ieee754_powf+0x424>
 8015370:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015374:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80155dc <__ieee754_powf+0x428>
 8015378:	eef0 6a67 	vmov.f32	s13, s15
 801537c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8015380:	ee16 3a90 	vmov	r3, s13
 8015384:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8015388:	f023 030f 	bic.w	r3, r3, #15
 801538c:	ee06 3a90 	vmov	s13, r3
 8015390:	eee0 6a47 	vfms.f32	s13, s0, s14
 8015394:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015398:	3d01      	subs	r5, #1
 801539a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801539e:	4305      	orrs	r5, r0
 80153a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80153a4:	f024 040f 	bic.w	r4, r4, #15
 80153a8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80153ac:	bf18      	it	ne
 80153ae:	eeb0 8a47 	vmovne.f32	s16, s14
 80153b2:	ee07 4a10 	vmov	s14, r4
 80153b6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80153ba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80153be:	ee07 3a90 	vmov	s15, r3
 80153c2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80153c6:	ee07 4a10 	vmov	s14, r4
 80153ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153ce:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80153d2:	ee17 1a10 	vmov	r1, s14
 80153d6:	2900      	cmp	r1, #0
 80153d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80153dc:	f340 80dd 	ble.w	801559a <__ieee754_powf+0x3e6>
 80153e0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80153e4:	f240 80ca 	bls.w	801557c <__ieee754_powf+0x3c8>
 80153e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80153ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f0:	bf4c      	ite	mi
 80153f2:	2001      	movmi	r0, #1
 80153f4:	2000      	movpl	r0, #0
 80153f6:	e791      	b.n	801531c <__ieee754_powf+0x168>
 80153f8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80153fc:	bf01      	itttt	eq
 80153fe:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80155e0 <__ieee754_powf+0x42c>
 8015402:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015406:	f06f 0317 	mvneq.w	r3, #23
 801540a:	ee17 7a90 	vmoveq	r7, s15
 801540e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8015412:	bf18      	it	ne
 8015414:	2300      	movne	r3, #0
 8015416:	3a7f      	subs	r2, #127	@ 0x7f
 8015418:	441a      	add	r2, r3
 801541a:	4b72      	ldr	r3, [pc, #456]	@ (80155e4 <__ieee754_powf+0x430>)
 801541c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8015420:	429f      	cmp	r7, r3
 8015422:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8015426:	dd06      	ble.n	8015436 <__ieee754_powf+0x282>
 8015428:	4b6f      	ldr	r3, [pc, #444]	@ (80155e8 <__ieee754_powf+0x434>)
 801542a:	429f      	cmp	r7, r3
 801542c:	f340 80a4 	ble.w	8015578 <__ieee754_powf+0x3c4>
 8015430:	3201      	adds	r2, #1
 8015432:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8015436:	2600      	movs	r6, #0
 8015438:	4b6c      	ldr	r3, [pc, #432]	@ (80155ec <__ieee754_powf+0x438>)
 801543a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801543e:	ee07 1a10 	vmov	s14, r1
 8015442:	edd3 5a00 	vldr	s11, [r3]
 8015446:	4b6a      	ldr	r3, [pc, #424]	@ (80155f0 <__ieee754_powf+0x43c>)
 8015448:	ee75 7a87 	vadd.f32	s15, s11, s14
 801544c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015450:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8015454:	1049      	asrs	r1, r1, #1
 8015456:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801545a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801545e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8015462:	ee37 6a65 	vsub.f32	s12, s14, s11
 8015466:	ee07 1a90 	vmov	s15, r1
 801546a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801546e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8015472:	ee15 7a10 	vmov	r7, s10
 8015476:	401f      	ands	r7, r3
 8015478:	ee06 7a90 	vmov	s13, r7
 801547c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8015480:	ee37 7a65 	vsub.f32	s14, s14, s11
 8015484:	ee65 7a05 	vmul.f32	s15, s10, s10
 8015488:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801548c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80155f4 <__ieee754_powf+0x440>
 8015490:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80155f8 <__ieee754_powf+0x444>
 8015494:	eee7 5a87 	vfma.f32	s11, s15, s14
 8015498:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80155fc <__ieee754_powf+0x448>
 801549c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80154a0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80155d0 <__ieee754_powf+0x41c>
 80154a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80154a8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8015600 <__ieee754_powf+0x44c>
 80154ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80154b0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8015604 <__ieee754_powf+0x450>
 80154b4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80154b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80154bc:	ee35 7a26 	vadd.f32	s14, s10, s13
 80154c0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80154c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80154c8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80154cc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80154d0:	eef0 5a67 	vmov.f32	s11, s15
 80154d4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80154d8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80154dc:	ee15 1a90 	vmov	r1, s11
 80154e0:	4019      	ands	r1, r3
 80154e2:	ee05 1a90 	vmov	s11, r1
 80154e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80154ea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80154ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80154f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80154fa:	eeb0 6a67 	vmov.f32	s12, s15
 80154fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015502:	ee16 1a10 	vmov	r1, s12
 8015506:	4019      	ands	r1, r3
 8015508:	ee06 1a10 	vmov	s12, r1
 801550c:	eeb0 7a46 	vmov.f32	s14, s12
 8015510:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8015514:	493c      	ldr	r1, [pc, #240]	@ (8015608 <__ieee754_powf+0x454>)
 8015516:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801551a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801551e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801560c <__ieee754_powf+0x458>
 8015522:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8015610 <__ieee754_powf+0x45c>
 8015526:	ee67 7a87 	vmul.f32	s15, s15, s14
 801552a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8015614 <__ieee754_powf+0x460>
 801552e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015532:	ed91 7a00 	vldr	s14, [r1]
 8015536:	ee77 7a87 	vadd.f32	s15, s15, s14
 801553a:	ee07 2a10 	vmov	s14, r2
 801553e:	eef0 6a67 	vmov.f32	s13, s15
 8015542:	4a35      	ldr	r2, [pc, #212]	@ (8015618 <__ieee754_powf+0x464>)
 8015544:	eee6 6a25 	vfma.f32	s13, s12, s11
 8015548:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801554c:	ed92 5a00 	vldr	s10, [r2]
 8015550:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015554:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015558:	ee76 6a87 	vadd.f32	s13, s13, s14
 801555c:	ee16 2a90 	vmov	r2, s13
 8015560:	4013      	ands	r3, r2
 8015562:	ee06 3a90 	vmov	s13, r3
 8015566:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801556a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801556e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8015572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015576:	e70f      	b.n	8015398 <__ieee754_powf+0x1e4>
 8015578:	2601      	movs	r6, #1
 801557a:	e75d      	b.n	8015438 <__ieee754_powf+0x284>
 801557c:	d152      	bne.n	8015624 <__ieee754_powf+0x470>
 801557e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801561c <__ieee754_powf+0x468>
 8015582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015586:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801558a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015592:	f73f af29 	bgt.w	80153e8 <__ieee754_powf+0x234>
 8015596:	2386      	movs	r3, #134	@ 0x86
 8015598:	e048      	b.n	801562c <__ieee754_powf+0x478>
 801559a:	4a21      	ldr	r2, [pc, #132]	@ (8015620 <__ieee754_powf+0x46c>)
 801559c:	4293      	cmp	r3, r2
 801559e:	d907      	bls.n	80155b0 <__ieee754_powf+0x3fc>
 80155a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80155a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a8:	bf4c      	ite	mi
 80155aa:	2001      	movmi	r0, #1
 80155ac:	2000      	movpl	r0, #0
 80155ae:	e6c1      	b.n	8015334 <__ieee754_powf+0x180>
 80155b0:	d138      	bne.n	8015624 <__ieee754_powf+0x470>
 80155b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80155b6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80155ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155be:	dbea      	blt.n	8015596 <__ieee754_powf+0x3e2>
 80155c0:	e7ee      	b.n	80155a0 <__ieee754_powf+0x3ec>
 80155c2:	bf00      	nop
 80155c4:	00000000 	.word	0x00000000
 80155c8:	3f7ffff3 	.word	0x3f7ffff3
 80155cc:	3f800007 	.word	0x3f800007
 80155d0:	3eaaaaab 	.word	0x3eaaaaab
 80155d4:	3fb8aa3b 	.word	0x3fb8aa3b
 80155d8:	36eca570 	.word	0x36eca570
 80155dc:	3fb8aa00 	.word	0x3fb8aa00
 80155e0:	4b800000 	.word	0x4b800000
 80155e4:	001cc471 	.word	0x001cc471
 80155e8:	005db3d6 	.word	0x005db3d6
 80155ec:	08015f40 	.word	0x08015f40
 80155f0:	fffff000 	.word	0xfffff000
 80155f4:	3e6c3255 	.word	0x3e6c3255
 80155f8:	3e53f142 	.word	0x3e53f142
 80155fc:	3e8ba305 	.word	0x3e8ba305
 8015600:	3edb6db7 	.word	0x3edb6db7
 8015604:	3f19999a 	.word	0x3f19999a
 8015608:	08015f30 	.word	0x08015f30
 801560c:	3f76384f 	.word	0x3f76384f
 8015610:	3f763800 	.word	0x3f763800
 8015614:	369dc3a0 	.word	0x369dc3a0
 8015618:	08015f38 	.word	0x08015f38
 801561c:	3338aa3c 	.word	0x3338aa3c
 8015620:	43160000 	.word	0x43160000
 8015624:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015628:	d971      	bls.n	801570e <__ieee754_powf+0x55a>
 801562a:	15db      	asrs	r3, r3, #23
 801562c:	3b7e      	subs	r3, #126	@ 0x7e
 801562e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8015632:	4118      	asrs	r0, r3
 8015634:	4408      	add	r0, r1
 8015636:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801563a:	4a3c      	ldr	r2, [pc, #240]	@ (801572c <__ieee754_powf+0x578>)
 801563c:	3b7f      	subs	r3, #127	@ 0x7f
 801563e:	411a      	asrs	r2, r3
 8015640:	4002      	ands	r2, r0
 8015642:	ee07 2a10 	vmov	s14, r2
 8015646:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801564a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801564e:	f1c3 0317 	rsb	r3, r3, #23
 8015652:	4118      	asrs	r0, r3
 8015654:	2900      	cmp	r1, #0
 8015656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801565a:	bfb8      	it	lt
 801565c:	4240      	neglt	r0, r0
 801565e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015662:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8015730 <__ieee754_powf+0x57c>
 8015666:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8015734 <__ieee754_powf+0x580>
 801566a:	ee17 3a10 	vmov	r3, s14
 801566e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8015672:	f023 030f 	bic.w	r3, r3, #15
 8015676:	ee07 3a10 	vmov	s14, r3
 801567a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801567e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015682:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015686:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8015738 <__ieee754_powf+0x584>
 801568a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801568e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8015692:	eef0 6a67 	vmov.f32	s13, s15
 8015696:	eee7 6a06 	vfma.f32	s13, s14, s12
 801569a:	eef0 5a66 	vmov.f32	s11, s13
 801569e:	eee7 5a46 	vfms.f32	s11, s14, s12
 80156a2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80156a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80156aa:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801573c <__ieee754_powf+0x588>
 80156ae:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8015740 <__ieee754_powf+0x58c>
 80156b2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80156b6:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8015744 <__ieee754_powf+0x590>
 80156ba:	eee6 5a07 	vfma.f32	s11, s12, s14
 80156be:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8015748 <__ieee754_powf+0x594>
 80156c2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80156c6:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801574c <__ieee754_powf+0x598>
 80156ca:	eee6 5a07 	vfma.f32	s11, s12, s14
 80156ce:	eeb0 6a66 	vmov.f32	s12, s13
 80156d2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80156d6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80156da:	ee66 5a86 	vmul.f32	s11, s13, s12
 80156de:	ee36 6a47 	vsub.f32	s12, s12, s14
 80156e2:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80156e6:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80156ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80156f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80156f6:	ee10 3a10 	vmov	r3, s0
 80156fa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80156fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015702:	da06      	bge.n	8015712 <__ieee754_powf+0x55e>
 8015704:	f000 f82e 	bl	8015764 <scalbnf>
 8015708:	ee20 0a08 	vmul.f32	s0, s0, s16
 801570c:	e56a      	b.n	80151e4 <__ieee754_powf+0x30>
 801570e:	2000      	movs	r0, #0
 8015710:	e7a5      	b.n	801565e <__ieee754_powf+0x4aa>
 8015712:	ee00 3a10 	vmov	s0, r3
 8015716:	e7f7      	b.n	8015708 <__ieee754_powf+0x554>
 8015718:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801571c:	e562      	b.n	80151e4 <__ieee754_powf+0x30>
 801571e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8015750 <__ieee754_powf+0x59c>
 8015722:	e55f      	b.n	80151e4 <__ieee754_powf+0x30>
 8015724:	eeb0 0a48 	vmov.f32	s0, s16
 8015728:	e55c      	b.n	80151e4 <__ieee754_powf+0x30>
 801572a:	bf00      	nop
 801572c:	ff800000 	.word	0xff800000
 8015730:	3f317218 	.word	0x3f317218
 8015734:	3f317200 	.word	0x3f317200
 8015738:	35bfbe8c 	.word	0x35bfbe8c
 801573c:	b5ddea0e 	.word	0xb5ddea0e
 8015740:	3331bb4c 	.word	0x3331bb4c
 8015744:	388ab355 	.word	0x388ab355
 8015748:	bb360b61 	.word	0xbb360b61
 801574c:	3e2aaaab 	.word	0x3e2aaaab
 8015750:	00000000 	.word	0x00000000

08015754 <fabsf>:
 8015754:	ee10 3a10 	vmov	r3, s0
 8015758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801575c:	ee00 3a10 	vmov	s0, r3
 8015760:	4770      	bx	lr
	...

08015764 <scalbnf>:
 8015764:	ee10 3a10 	vmov	r3, s0
 8015768:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801576c:	d02b      	beq.n	80157c6 <scalbnf+0x62>
 801576e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015772:	d302      	bcc.n	801577a <scalbnf+0x16>
 8015774:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015778:	4770      	bx	lr
 801577a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801577e:	d123      	bne.n	80157c8 <scalbnf+0x64>
 8015780:	4b24      	ldr	r3, [pc, #144]	@ (8015814 <scalbnf+0xb0>)
 8015782:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8015818 <scalbnf+0xb4>
 8015786:	4298      	cmp	r0, r3
 8015788:	ee20 0a27 	vmul.f32	s0, s0, s15
 801578c:	db17      	blt.n	80157be <scalbnf+0x5a>
 801578e:	ee10 3a10 	vmov	r3, s0
 8015792:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015796:	3a19      	subs	r2, #25
 8015798:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801579c:	4288      	cmp	r0, r1
 801579e:	dd15      	ble.n	80157cc <scalbnf+0x68>
 80157a0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801581c <scalbnf+0xb8>
 80157a4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8015820 <scalbnf+0xbc>
 80157a8:	ee10 3a10 	vmov	r3, s0
 80157ac:	eeb0 7a67 	vmov.f32	s14, s15
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	bfb8      	it	lt
 80157b4:	eef0 7a66 	vmovlt.f32	s15, s13
 80157b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80157bc:	4770      	bx	lr
 80157be:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015824 <scalbnf+0xc0>
 80157c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80157c6:	4770      	bx	lr
 80157c8:	0dd2      	lsrs	r2, r2, #23
 80157ca:	e7e5      	b.n	8015798 <scalbnf+0x34>
 80157cc:	4410      	add	r0, r2
 80157ce:	28fe      	cmp	r0, #254	@ 0xfe
 80157d0:	dce6      	bgt.n	80157a0 <scalbnf+0x3c>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	dd06      	ble.n	80157e4 <scalbnf+0x80>
 80157d6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80157da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80157de:	ee00 3a10 	vmov	s0, r3
 80157e2:	4770      	bx	lr
 80157e4:	f110 0f16 	cmn.w	r0, #22
 80157e8:	da09      	bge.n	80157fe <scalbnf+0x9a>
 80157ea:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8015824 <scalbnf+0xc0>
 80157ee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8015828 <scalbnf+0xc4>
 80157f2:	ee10 3a10 	vmov	r3, s0
 80157f6:	eeb0 7a67 	vmov.f32	s14, s15
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	e7d9      	b.n	80157b2 <scalbnf+0x4e>
 80157fe:	3019      	adds	r0, #25
 8015800:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015804:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8015808:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801582c <scalbnf+0xc8>
 801580c:	ee07 3a90 	vmov	s15, r3
 8015810:	e7d7      	b.n	80157c2 <scalbnf+0x5e>
 8015812:	bf00      	nop
 8015814:	ffff3cb0 	.word	0xffff3cb0
 8015818:	4c000000 	.word	0x4c000000
 801581c:	7149f2ca 	.word	0x7149f2ca
 8015820:	f149f2ca 	.word	0xf149f2ca
 8015824:	0da24260 	.word	0x0da24260
 8015828:	8da24260 	.word	0x8da24260
 801582c:	33000000 	.word	0x33000000

08015830 <with_errnof>:
 8015830:	b510      	push	{r4, lr}
 8015832:	ed2d 8b02 	vpush	{d8}
 8015836:	eeb0 8a40 	vmov.f32	s16, s0
 801583a:	4604      	mov	r4, r0
 801583c:	f7ff faf6 	bl	8014e2c <__errno>
 8015840:	eeb0 0a48 	vmov.f32	s0, s16
 8015844:	ecbd 8b02 	vpop	{d8}
 8015848:	6004      	str	r4, [r0, #0]
 801584a:	bd10      	pop	{r4, pc}

0801584c <xflowf>:
 801584c:	b130      	cbz	r0, 801585c <xflowf+0x10>
 801584e:	eef1 7a40 	vneg.f32	s15, s0
 8015852:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015856:	2022      	movs	r0, #34	@ 0x22
 8015858:	f7ff bfea 	b.w	8015830 <with_errnof>
 801585c:	eef0 7a40 	vmov.f32	s15, s0
 8015860:	e7f7      	b.n	8015852 <xflowf+0x6>
	...

08015864 <__math_uflowf>:
 8015864:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801586c <__math_uflowf+0x8>
 8015868:	f7ff bff0 	b.w	801584c <xflowf>
 801586c:	10000000 	.word	0x10000000

08015870 <__math_oflowf>:
 8015870:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015878 <__math_oflowf+0x8>
 8015874:	f7ff bfea 	b.w	801584c <xflowf>
 8015878:	70000000 	.word	0x70000000

0801587c <_init>:
 801587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801587e:	bf00      	nop
 8015880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015882:	bc08      	pop	{r3}
 8015884:	469e      	mov	lr, r3
 8015886:	4770      	bx	lr

08015888 <_fini>:
 8015888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588a:	bf00      	nop
 801588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801588e:	bc08      	pop	{r3}
 8015890:	469e      	mov	lr, r3
 8015892:	4770      	bx	lr
