
safe_out.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004024  08004024  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004024  08004024  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004024  08004024  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004028  08004028  00014028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800402c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000018  08004044  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08004044  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013078  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a34  00000000  00000000  000330b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00035af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00036878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afb1  00000000  00000000  00037510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012991  00000000  00000000  000524c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f7f  00000000  00000000  00064e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010edd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  0010ee24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ee0 	.word	0x08003ee0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003ee0 	.word	0x08003ee0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b24      	ldr	r3, [pc, #144]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b21      	ldr	r3, [pc, #132]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1d      	ldr	r2, [pc, #116]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_GPIO_Init+0xa8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b15      	ldr	r3, [pc, #84]	; (80001f4 <MX_GPIO_Init+0xa8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001c8:	f001 fd22 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80001cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001e6:	f001 fb8f 	bl	8001908 <HAL_GPIO_Init>

}
 80001ea:	bf00      	nop
 80001ec:	3720      	adds	r7, #32
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000

080001fc <HAL_UART_RxCpltCallback>:
#include "timer.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <HAL_UART_RxCpltCallback+0x2c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d102      	bne.n	8000212 <HAL_UART_RxCpltCallback+0x16>
	{
		ibus_calback();
 800020c:	f000 fca2 	bl	8000b54 <ibus_calback>
    }
    else if(huart ==&huart2){
    	 mavlink_callback();
    }
}
 8000210:	e005      	b.n	800021e <HAL_UART_RxCpltCallback+0x22>
    else if(huart ==&huart2){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <HAL_UART_RxCpltCallback+0x30>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d101      	bne.n	800021e <HAL_UART_RxCpltCallback+0x22>
    	 mavlink_callback();
 800021a:	f000 ffbb 	bl	8001194 <mavlink_callback>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000590 	.word	0x20000590
 800022c:	200005d8 	.word	0x200005d8

08000230 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if(htim == timer_name())
 8000238:	f001 f916 	bl	8001468 <timer_name>
 800023c:	4602      	mov	r2, r0
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		TIMER_CALLBACK();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800024c:	33ff      	adds	r3, #255	; 0xff
 800024e:	4a03      	ldr	r2, [pc, #12]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000250:	6013      	str	r3, [r2, #0]
	}
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	200007a0 	.word	0x200007a0

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f001 f909 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f8f3 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f7ff ff6d 	bl	800014c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000272:	f000 f9d1 	bl	8000618 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000276:	f000 fb2f 	bl	80008d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800027a:	f000 fb57 	bl	800092c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800027e:	f000 fa57 	bl	8000730 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  static uint32_t last_ms = 0;
  static int count;
  HAL_Delay(3000);
 8000282:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000286:	f001 f95b 	bl	8001540 <HAL_Delay>
  timer_start(&htim4);
 800028a:	4863      	ldr	r0, [pc, #396]	; (8000418 <main+0x1b8>)
 800028c:	f001 f8da 	bl	8001444 <timer_start>
  initPWM(&htim3);
 8000290:	4862      	ldr	r0, [pc, #392]	; (800041c <main+0x1bc>)
 8000292:	f001 f801 	bl	8001298 <initPWM>
  ibus_init(&huart1);
 8000296:	4862      	ldr	r0, [pc, #392]	; (8000420 <main+0x1c0>)
 8000298:	f000 fc2c 	bl	8000af4 <ibus_init>
  mavlink_init(&huart2);
 800029c:	4861      	ldr	r0, [pc, #388]	; (8000424 <main+0x1c4>)
 800029e:	f000 ff63 	bl	8001168 <mavlink_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ibusFrameComplete();
 80002a2:	f000 fcb3 	bl	8000c0c <ibusFrameComplete>
      int16_t roll_trim = ((int)ibusChannelData[CH8] - 1500);
 80002a6:	4b60      	ldr	r3, [pc, #384]	; (8000428 <main+0x1c8>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	81fb      	strh	r3, [r7, #14]
      int16_t pitch_trim = ((int)ibusChannelData[CH7] - 1500);
 80002b4:	4b5c      	ldr	r3, [pc, #368]	; (8000428 <main+0x1c8>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80002be:	b29b      	uxth	r3, r3
 80002c0:	81bb      	strh	r3, [r7, #12]
      if(trim_state){
 80002c2:	4b5a      	ldr	r3, [pc, #360]	; (800042c <main+0x1cc>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d005      	beq.n	80002d6 <main+0x76>
    	  roll_trim_manual = roll_trim;
 80002ca:	4a59      	ldr	r2, [pc, #356]	; (8000430 <main+0x1d0>)
 80002cc:	89fb      	ldrh	r3, [r7, #14]
 80002ce:	8013      	strh	r3, [r2, #0]
    	  pitch_trim_manual = pitch_trim;
 80002d0:	4a58      	ldr	r2, [pc, #352]	; (8000434 <main+0x1d4>)
 80002d2:	89bb      	ldrh	r3, [r7, #12]
 80002d4:	8013      	strh	r3, [r2, #0]
      }
      if(ibusChannelData[CH5] > 1600){
 80002d6:	4b54      	ldr	r3, [pc, #336]	; (8000428 <main+0x1c8>)
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80002de:	d902      	bls.n	80002e6 <main+0x86>
    	  trim_state = 0;
 80002e0:	4b52      	ldr	r3, [pc, #328]	; (800042c <main+0x1cc>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
      }
	  if(mavlink_check_fc_healthy()){
 80002e6:	f000 ffbd 	bl	8001264 <mavlink_check_fc_healthy>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d00e      	beq.n	800030e <main+0xae>
    	  thortle = rc_channels_raw.chan3_raw;
 80002f0:	4b51      	ldr	r3, [pc, #324]	; (8000438 <main+0x1d8>)
 80002f2:	891a      	ldrh	r2, [r3, #8]
 80002f4:	4b51      	ldr	r3, [pc, #324]	; (800043c <main+0x1dc>)
 80002f6:	801a      	strh	r2, [r3, #0]
    	  servoL =  rc_channels_raw.chan1_raw;
 80002f8:	4b4f      	ldr	r3, [pc, #316]	; (8000438 <main+0x1d8>)
 80002fa:	889b      	ldrh	r3, [r3, #4]
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	4b50      	ldr	r3, [pc, #320]	; (8000440 <main+0x1e0>)
 8000300:	801a      	strh	r2, [r3, #0]
    	  servoR =  rc_channels_raw.chan2_raw;
 8000302:	4b4d      	ldr	r3, [pc, #308]	; (8000438 <main+0x1d8>)
 8000304:	88db      	ldrh	r3, [r3, #6]
 8000306:	b21a      	sxth	r2, r3
 8000308:	4b4e      	ldr	r3, [pc, #312]	; (8000444 <main+0x1e4>)
 800030a:	801a      	strh	r2, [r3, #0]
 800030c:	e04c      	b.n	80003a8 <main+0x148>
      }else{

    	  count ++;
 800030e:	4b4e      	ldr	r3, [pc, #312]	; (8000448 <main+0x1e8>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	4a4c      	ldr	r2, [pc, #304]	; (8000448 <main+0x1e8>)
 8000316:	6013      	str	r3, [r2, #0]
    	  if(count > 100){
 8000318:	4b4b      	ldr	r3, [pc, #300]	; (8000448 <main+0x1e8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b64      	cmp	r3, #100	; 0x64
 800031e:	dd07      	ble.n	8000330 <main+0xd0>
    		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000324:	4849      	ldr	r0, [pc, #292]	; (800044c <main+0x1ec>)
 8000326:	f001 fc8b 	bl	8001c40 <HAL_GPIO_TogglePin>
    		  count = 0;
 800032a:	4b47      	ldr	r3, [pc, #284]	; (8000448 <main+0x1e8>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
    	  }

          int s1 = 1500 - ibusChannelData[CH1];
 8000330:	4b3d      	ldr	r3, [pc, #244]	; (8000428 <main+0x1c8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000338:	3304      	adds	r3, #4
 800033a:	60bb      	str	r3, [r7, #8]
          int s2 = 1500 - ibusChannelData[CH2];
 800033c:	4b3a      	ldr	r3, [pc, #232]	; (8000428 <main+0x1c8>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000344:	3304      	adds	r3, #4
 8000346:	607b      	str	r3, [r7, #4]

          servoL = 1500 - s1 - s2 + roll_trim_manual  + pitch_trim_manual;
 8000348:	4b39      	ldr	r3, [pc, #228]	; (8000430 <main+0x1d0>)
 800034a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800034e:	b29a      	uxth	r2, r3
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	b299      	uxth	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	b29b      	uxth	r3, r3
 8000358:	440b      	add	r3, r1
 800035a:	b29b      	uxth	r3, r3
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b34      	ldr	r3, [pc, #208]	; (8000434 <main+0x1d4>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	b29b      	uxth	r3, r3
 8000368:	4413      	add	r3, r2
 800036a:	b29b      	uxth	r3, r3
 800036c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000370:	b29b      	uxth	r3, r3
 8000372:	b21a      	sxth	r2, r3
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <main+0x1e0>)
 8000376:	801a      	strh	r2, [r3, #0]
          servoR = 1500 + s1 - s2 - roll_trim_manual  + pitch_trim_manual;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	b29a      	uxth	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	b29b      	uxth	r3, r3
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <main+0x1d0>)
 8000386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038a:	b29b      	uxth	r3, r3
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <main+0x1d4>)
 8000392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000396:	b29b      	uxth	r3, r3
 8000398:	4413      	add	r3, r2
 800039a:	b29b      	uxth	r3, r3
 800039c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	b21a      	sxth	r2, r3
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <main+0x1e4>)
 80003a6:	801a      	strh	r2, [r3, #0]
          //servoL = 1500 - s1  + pitch_trim_manual;
          //servoR = 1500 + s2  - roll_trim_manual ;
      }

	  servoL = constrain(servoL,1000,2000);
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <main+0x1e0>)
 80003aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f891 	bl	80004de <constrain>
 80003bc:	4603      	mov	r3, r0
 80003be:	b21a      	sxth	r2, r3
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <main+0x1e0>)
 80003c2:	801a      	strh	r2, [r3, #0]
	  servoR = constrain(servoR,1000,2000);
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <main+0x1e4>)
 80003c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f883 	bl	80004de <constrain>
 80003d8:	4603      	mov	r3, r0
 80003da:	b21a      	sxth	r2, r3
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <main+0x1e4>)
 80003de:	801a      	strh	r2, [r3, #0]
	  write_pwm_ctrl(thortle,servoL,servoR);
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <main+0x1dc>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	4a16      	ldr	r2, [pc, #88]	; (8000440 <main+0x1e0>)
 80003e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80003ea:	b291      	uxth	r1, r2
 80003ec:	4a15      	ldr	r2, [pc, #84]	; (8000444 <main+0x1e4>)
 80003ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80003f2:	b292      	uxth	r2, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 ffe7 	bl	80013c8 <write_pwm_ctrl>
	  while(HAL_GetTick() - last_ms < 10);
 80003fa:	bf00      	nop
 80003fc:	f001 f896 	bl	800152c <HAL_GetTick>
 8000400:	4602      	mov	r2, r0
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <main+0x1f0>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	2b09      	cmp	r3, #9
 800040a:	d9f7      	bls.n	80003fc <main+0x19c>
	  last_ms = HAL_GetTick();
 800040c:	f001 f88e 	bl	800152c <HAL_GetTick>
 8000410:	4603      	mov	r3, r0
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <main+0x1f0>)
 8000414:	6013      	str	r3, [r2, #0]
  {
 8000416:	e744      	b.n	80002a2 <main+0x42>
 8000418:	20000500 	.word	0x20000500
 800041c:	20000548 	.word	0x20000548
 8000420:	20000590 	.word	0x20000590
 8000424:	200005d8 	.word	0x200005d8
 8000428:	20000624 	.word	0x20000624
 800042c:	20000006 	.word	0x20000006
 8000430:	200004fa 	.word	0x200004fa
 8000434:	200004fc 	.word	0x200004fc
 8000438:	2000065c 	.word	0x2000065c
 800043c:	20000000 	.word	0x20000000
 8000440:	20000002 	.word	0x20000002
 8000444:	20000004 	.word	0x20000004
 8000448:	20000034 	.word	0x20000034
 800044c:	40011000 	.word	0x40011000
 8000450:	20000038 	.word	0x20000038

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fd34 	bl	8003ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000492:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fbe9 	bl	8001c74 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a8:	f000 f832 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fe54 	bl	8002174 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f81d 	bl	8000510 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	; 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <constrain>:

/* USER CODE BEGIN 4 */
int constrain(int val,int min,int max){
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
	if(val > max)
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dd02      	ble.n	80004f8 <constrain+0x1a>
		val = max;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	e005      	b.n	8000504 <constrain+0x26>
	else if(val < min)
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	da01      	bge.n	8000504 <constrain+0x26>
		val = min;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	60fb      	str	r3, [r7, #12]
	return val;
 8000504:	68fb      	ldr	r3, [r7, #12]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <HAL_MspInit+0x5c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x5c>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x60>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_MspInit+0x60>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c6:	f000 ff9f 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <TIM4_IRQHandler+0x10>)
 80005d6:	f002 f8f7 	bl	80027c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000500 	.word	0x20000500

080005e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <USART1_IRQHandler+0x10>)
 80005ea:	f002 ff2d 	bl	8003448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000590 	.word	0x20000590

080005f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <USART2_IRQHandler+0x10>)
 80005fe:	f002 ff23 	bl	8003448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200005d8 	.word	0x200005d8

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000648:	4b37      	ldr	r3, [pc, #220]	; (8000728 <MX_TIM3_Init+0x110>)
 800064a:	4a38      	ldr	r2, [pc, #224]	; (800072c <MX_TIM3_Init+0x114>)
 800064c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800064e:	4b36      	ldr	r3, [pc, #216]	; (8000728 <MX_TIM3_Init+0x110>)
 8000650:	2247      	movs	r2, #71	; 0x47
 8000652:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <MX_TIM3_Init+0x110>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <MX_TIM3_Init+0x110>)
 800065c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000660:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_TIM3_Init+0x110>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_TIM3_Init+0x110>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800066e:	482e      	ldr	r0, [pc, #184]	; (8000728 <MX_TIM3_Init+0x110>)
 8000670:	f001 ff0e 	bl	8002490 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800067a:	f7ff ff49 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	; (8000728 <MX_TIM3_Init+0x110>)
 800068c:	f002 fa66 	bl	8002b5c <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000696:	f7ff ff3b 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <MX_TIM3_Init+0x110>)
 800069c:	f001 ff9a 	bl	80025d4 <HAL_TIM_PWM_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006a6:	f7ff ff33 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4619      	mov	r1, r3
 80006b8:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_TIM3_Init+0x110>)
 80006ba:	f002 fddf 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006c4:	f7ff ff24 	bl	8000510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <MX_TIM3_Init+0x110>)
 80006e0:	f002 f97a 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006ea:	f7ff ff11 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2204      	movs	r2, #4
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_TIM3_Init+0x110>)
 80006f6:	f002 f96f 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000700:	f7ff ff06 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2208      	movs	r2, #8
 8000708:	4619      	mov	r1, r3
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_TIM3_Init+0x110>)
 800070c:	f002 f964 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000716:	f7ff fefb 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <MX_TIM3_Init+0x110>)
 800071c:	f000 f890 	bl	8000840 <HAL_TIM_MspPostInit>

}
 8000720:	bf00      	nop
 8000722:	3738      	adds	r7, #56	; 0x38
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000548 	.word	0x20000548
 800072c:	40000400 	.word	0x40000400

08000730 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_TIM4_Init+0x94>)
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <MX_TIM4_Init+0x98>)
 8000750:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_TIM4_Init+0x94>)
 8000754:	2247      	movs	r2, #71	; 0x47
 8000756:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_TIM4_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_TIM4_Init+0x94>)
 8000760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000764:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_TIM4_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_TIM4_Init+0x94>)
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM4_Init+0x94>)
 8000774:	f001 fe8c 	bl	8002490 <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800077e:	f7ff fec7 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM4_Init+0x94>)
 8000790:	f002 f9e4 	bl	8002b5c <HAL_TIM_ConfigClockSource>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800079a:	f7ff feb9 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_TIM4_Init+0x94>)
 80007ac:	f002 fd66 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007b6:	f7ff feab 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000500 	.word	0x20000500
 80007c8:	40000800 	.word	0x40000800

080007cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a16      	ldr	r2, [pc, #88]	; (8000834 <HAL_TIM_Base_MspInit+0x68>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d10c      	bne.n	80007f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80007f6:	e018      	b.n	800082a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_TIM_Base_MspInit+0x70>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d113      	bne.n	800082a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	201e      	movs	r0, #30
 8000820:	f000 ff89 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000824:	201e      	movs	r0, #30
 8000826:	f000 ffa2 	bl	800176e <HAL_NVIC_EnableIRQ>
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40000400 	.word	0x40000400
 8000838:	40021000 	.word	0x40021000
 800083c:	40000800 	.word	0x40000800

08000840 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <HAL_TIM_MspPostInit+0x88>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d12f      	bne.n	80008c0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <HAL_TIM_MspPostInit+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_TIM_MspPostInit+0x8c>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_TIM_MspPostInit+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_TIM_MspPostInit+0x8c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <HAL_TIM_MspPostInit+0x8c>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_TIM_MspPostInit+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2302      	movs	r3, #2
 800089a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <HAL_TIM_MspPostInit+0x90>)
 80008a4:	f001 f830 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <HAL_TIM_MspPostInit+0x94>)
 80008bc:	f001 f824 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40000400 	.word	0x40000400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010800 	.word	0x40010800
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART1_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000910:	f002 fd24 	bl	800335c <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f7ff fdf9 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000590 	.word	0x20000590
 8000928:	40013800 	.word	0x40013800

0800092c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART2_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000964:	f002 fcfa 	bl	800335c <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f7ff fdcf 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200005d8 	.word	0x200005d8
 800097c:	40004400 	.word	0x40004400

08000980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <HAL_UART_MspInit+0x118>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13a      	bne.n	8000a16 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a3d      	ldr	r2, [pc, #244]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	4619      	mov	r1, r3
 80009e4:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <HAL_UART_MspInit+0x120>)
 80009e6:	f000 ff8f 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <HAL_UART_MspInit+0x120>)
 8000a00:	f000 ff82 	bl	8001908 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2101      	movs	r1, #1
 8000a08:	2025      	movs	r0, #37	; 0x25
 8000a0a:	f000 fe94 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a0e:	2025      	movs	r0, #37	; 0x25
 8000a10:	f000 fead 	bl	800176e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a14:	e03c      	b.n	8000a90 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_UART_MspInit+0x124>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d137      	bne.n	8000a90 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_UART_MspInit+0x11c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a50:	2304      	movs	r3, #4
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4619      	mov	r1, r3
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <HAL_UART_MspInit+0x120>)
 8000a64:	f000 ff50 	bl	8001908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <HAL_UART_MspInit+0x120>)
 8000a7c:	f000 ff44 	bl	8001908 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2026      	movs	r0, #38	; 0x26
 8000a86:	f000 fe56 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a8a:	2026      	movs	r0, #38	; 0x26
 8000a8c:	f000 fe6f 	bl	800176e <HAL_NVIC_EnableIRQ>
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff fdb0 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aae:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ac4:	4c09      	ldr	r4, [pc, #36]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 f9cb 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fbc3 	bl	8000260 <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ae4:	0800402c 	.word	0x0800402c
  ldr r2, =_sbss
 8000ae8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000aec:	200007a8 	.word	0x200007a8

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <ibus_init+0x54>)
 8000afe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b02:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <ibus_init+0x54>)
 8000b06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b0a:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e008      	b.n	8000b24 <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 8000b12:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <ibus_init+0x54>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b0d      	cmp	r3, #13
 8000b28:	ddf3      	ble.n	8000b12 <ibus_init+0x1e>
    }
	uart = uartt;
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <ibus_init+0x58>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <ibus_init+0x58>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4906      	ldr	r1, [pc, #24]	; (8000b50 <ibus_init+0x5c>)
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 fc5f 	bl	80033fc <HAL_UART_Receive_IT>
#endif
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000624 	.word	0x20000624
 8000b4c:	20000064 	.word	0x20000064
 8000b50:	20000060 	.word	0x20000060

08000b54 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <ibus_calback+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f80d 	bl	8000b7c <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <ibus_calback+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2201      	movs	r2, #1
 8000b68:	4902      	ldr	r1, [pc, #8]	; (8000b74 <ibus_calback+0x20>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fc46 	bl	80033fc <HAL_UART_Receive_IT>
#endif

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000060 	.word	0x20000060
 8000b78:	20000064 	.word	0x20000064

08000b7c <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <ibusDataReceive+0x78>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <ibusDataReceive+0x7c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <ibusDataReceive+0x80>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d902      	bls.n	8000bac <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <ibusDataReceive+0x84>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <ibusDataReceive+0x80>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <ibusDataReceive+0x84>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <ibusDataReceive+0x44>
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b20      	cmp	r3, #32
 8000bbe:	d114      	bne.n	8000bea <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <ibusDataReceive+0x84>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <ibusDataReceive+0x88>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <ibusDataReceive+0x84>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b1f      	cmp	r3, #31
 8000bd2:	d103      	bne.n	8000bdc <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <ibusDataReceive+0x8c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e007      	b.n	8000bec <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <ibusDataReceive+0x84>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <ibusDataReceive+0x84>)
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e000      	b.n	8000bec <ibusDataReceive+0x70>
        return;
 8000bea:	bf00      	nop
    }
}
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	2000079c 	.word	0x2000079c
 8000bf8:	200007a0 	.word	0x200007a0
 8000bfc:	20000068 	.word	0x20000068
 8000c00:	2000006c 	.word	0x2000006c
 8000c04:	20000040 	.word	0x20000040
 8000c08:	2000003c 	.word	0x2000003c

08000c0c <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 8000c12:	4b57      	ldr	r3, [pc, #348]	; (8000d70 <ibusFrameComplete+0x164>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80a4 	beq.w	8000d64 <ibusFrameComplete+0x158>
        ibusFrameDone = FALSE;
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <ibusFrameComplete+0x164>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 8000c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c26:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < 30; i++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	e009      	b.n	8000c42 <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a50      	ldr	r2, [pc, #320]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	88ba      	ldrh	r2, [r7, #4]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	80bb      	strh	r3, [r7, #4]
        for (i = 0; i < 30; i++)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b1d      	cmp	r3, #29
 8000c46:	d9f2      	bls.n	8000c2e <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c4a:	7f9b      	ldrb	r3, [r3, #30]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c50:	7fdb      	ldrb	r3, [r3, #31]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	807b      	strh	r3, [r7, #2]

        if (chksum == rxsum) {
 8000c5c:	88ba      	ldrh	r2, [r7, #4]
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d17f      	bne.n	8000d64 <ibusFrameComplete+0x158>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8000c64:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	4a42      	ldr	r2, [pc, #264]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c6c:	7892      	ldrb	r2, [r2, #2]
 8000c6e:	4413      	add	r3, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000c74:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c78:	795b      	ldrb	r3, [r3, #5]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	4a3d      	ldr	r2, [pc, #244]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c7e:	7912      	ldrb	r2, [r2, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000c86:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c8a:	79db      	ldrb	r3, [r3, #7]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	4a39      	ldr	r2, [pc, #228]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c90:	7992      	ldrb	r2, [r2, #6]
 8000c92:	4413      	add	r3, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000c98:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <ibusFrameComplete+0x168>)
 8000c9c:	7a5b      	ldrb	r3, [r3, #9]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	4a34      	ldr	r2, [pc, #208]	; (8000d74 <ibusFrameComplete+0x168>)
 8000ca2:	7a12      	ldrb	r2, [r2, #8]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000caa:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cae:	7adb      	ldrb	r3, [r3, #11]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	4a30      	ldr	r2, [pc, #192]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cb4:	7a92      	ldrb	r2, [r2, #10]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000cbc:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cc0:	7b5b      	ldrb	r3, [r3, #13]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	4a2b      	ldr	r2, [pc, #172]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cc6:	7b12      	ldrb	r2, [r2, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000cce:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cd2:	7bdb      	ldrb	r3, [r3, #15]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cd8:	7b92      	ldrb	r2, [r2, #14]
 8000cda:	4413      	add	r3, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000ce0:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <ibusFrameComplete+0x168>)
 8000ce4:	7c5b      	ldrb	r3, [r3, #17]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cea:	7c12      	ldrb	r2, [r2, #16]
 8000cec:	4413      	add	r3, r2
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000cf2:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cf6:	7cdb      	ldrb	r3, [r3, #19]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <ibusFrameComplete+0x168>)
 8000cfc:	7c92      	ldrb	r2, [r2, #18]
 8000cfe:	4413      	add	r3, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000d04:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d08:	7d5b      	ldrb	r3, [r3, #21]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d0e:	7d12      	ldrb	r2, [r2, #20]
 8000d10:	4413      	add	r3, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d1a:	7ddb      	ldrb	r3, [r3, #23]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d20:	7d92      	ldrb	r2, [r2, #22]
 8000d22:	4413      	add	r3, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d2c:	7e5b      	ldrb	r3, [r3, #25]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d32:	7e12      	ldrb	r2, [r2, #24]
 8000d34:	4413      	add	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d3e:	7edb      	ldrb	r3, [r3, #27]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d44:	7e92      	ldrb	r2, [r2, #26]
 8000d46:	4413      	add	r3, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000d4c:	631a      	str	r2, [r3, #48]	; 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d50:	7f5b      	ldrb	r3, [r3, #29]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <ibusFrameComplete+0x168>)
 8000d56:	7f12      	ldrb	r2, [r2, #28]
 8000d58:	4413      	add	r3, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <ibusFrameComplete+0x16c>)
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
            return TRUE;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <ibusFrameComplete+0x15a>
        }
    }
    return FALSE;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	2000003c 	.word	0x2000003c
 8000d74:	20000040 	.word	0x20000040
 8000d78:	20000624 	.word	0x20000624

08000d7c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4053      	eors	r3, r2
 8000d92:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4053      	eors	r3, r2
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4053      	eors	r3, r2
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4053      	eors	r3, r2
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4053      	eors	r3, r2
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	801a      	strh	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dec:	801a      	strh	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <mavlink_get_channel_status+0x24>)
 8000e0e:	4413      	add	r3, r2
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200004c4 	.word	0x200004c4

08000e20 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <mavlink_get_channel_buffer+0x24>)
 8000e36:	4413      	add	r3, r2
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000084 	.word	0x20000084

08000e48 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	crc_init(&msg->checksum);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffc3 	bl	8000dde <crc_init>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	crc_accumulate(c, &msg->checksum);
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff82 	bl	8000d7c <crc_accumulate>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60ba      	str	r2, [r7, #8]
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	73bb      	strb	r3, [r7, #14]
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ffc3 	bl	8000e20 <mavlink_get_channel_buffer>
 8000e9a:	61f8      	str	r0, [r7, #28]
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ffaa 	bl	8000df8 <mavlink_get_channel_status>
 8000ea4:	61b8      	str	r0, [r7, #24]
	int bufferIndex = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]

	status->msg_received = 0;
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	78db      	ldrb	r3, [r3, #3]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	f200 8114 	bhi.w	80010e2 <mavlink_parse_char+0x262>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <mavlink_parse_char+0x40>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ee9 	.word	0x08000ee9
 8000ec4:	08000ee9 	.word	0x08000ee9
 8000ec8:	08000f0b 	.word	0x08000f0b
 8000ecc:	08000f6f 	.word	0x08000f6f
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f87 	.word	0x08000f87
 8000ed8:	08000f9f 	.word	0x08000f9f
 8000edc:	08000fc7 	.word	0x08000fc7
 8000ee0:	08000ffd 	.word	0x08000ffd
 8000ee4:	08001065 	.word	0x08001065
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	2bfe      	cmp	r3, #254	; 0xfe
 8000eec:	f040 80f2 	bne.w	80010d4 <mavlink_parse_char+0x254>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	7bba      	ldrb	r2, [r7, #14]
 8000f00:	709a      	strb	r2, [r3, #2]
			mavlink_start_checksum(rxmsg);
 8000f02:	69f8      	ldr	r0, [r7, #28]
 8000f04:	f7ff ffa0 	bl	8000e48 <mavlink_start_checksum>
		}
		break;
 8000f08:	e0e4      	b.n	80010d4 <mavlink_parse_char+0x254>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d012      	beq.n	8000f38 <mavlink_parse_char+0xb8>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	785b      	ldrb	r3, [r3, #1]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	705a      	strb	r2, [r3, #1]
			status->parse_error++;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	709a      	strb	r2, [r3, #2]
			status->msg_received = 0;
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2201      	movs	r2, #1
 8000f34:	70da      	strb	r2, [r3, #3]
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
 8000f36:	e0d4      	b.n	80010e2 <mavlink_parse_char+0x262>
			rxmsg->len = c;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	7bba      	ldrb	r2, [r7, #14]
 8000f3c:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2200      	movs	r2, #0
 8000f42:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	4619      	mov	r1, r3
 8000f48:	69f8      	ldr	r0, [r7, #28]
 8000f4a:	f7ff ff89 	bl	8000e60 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2204      	movs	r2, #4
 8000f52:	70da      	strb	r2, [r3, #3]
		break;
 8000f54:	e0c5      	b.n	80010e2 <mavlink_parse_char+0x262>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	7bba      	ldrb	r2, [r7, #14]
 8000f5a:	711a      	strb	r2, [r3, #4]
		mavlink_update_checksum(rxmsg, c);
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	69f8      	ldr	r0, [r7, #28]
 8000f62:	f7ff ff7d 	bl	8000e60 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	70da      	strb	r2, [r3, #3]
		break;
 8000f6c:	e0b9      	b.n	80010e2 <mavlink_parse_char+0x262>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	7bba      	ldrb	r2, [r7, #14]
 8000f72:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	4619      	mov	r1, r3
 8000f78:	69f8      	ldr	r0, [r7, #28]
 8000f7a:	f7ff ff71 	bl	8000e60 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2205      	movs	r2, #5
 8000f82:	70da      	strb	r2, [r3, #3]
		break;
 8000f84:	e0ad      	b.n	80010e2 <mavlink_parse_char+0x262>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	7bba      	ldrb	r2, [r7, #14]
 8000f8a:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	69f8      	ldr	r0, [r7, #28]
 8000f92:	f7ff ff65 	bl	8000e60 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2206      	movs	r2, #6
 8000f9a:	70da      	strb	r2, [r3, #3]
		break;
 8000f9c:	e0a1      	b.n	80010e2 <mavlink_parse_char+0x262>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	7bba      	ldrb	r2, [r7, #14]
 8000fa2:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	69f8      	ldr	r0, [r7, #28]
 8000faa:	f7ff ff59 	bl	8000e60 <mavlink_update_checksum>
		if (rxmsg->len == 0)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	78db      	ldrb	r3, [r3, #3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <mavlink_parse_char+0x13e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2208      	movs	r2, #8
 8000fba:	70da      	strb	r2, [r3, #3]
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
 8000fbc:	e091      	b.n	80010e2 <mavlink_parse_char+0x262>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	70da      	strb	r2, [r3, #3]
		break;
 8000fc4:	e08d      	b.n	80010e2 <mavlink_parse_char+0x262>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f103 0208 	add.w	r2, r3, #8
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	1c59      	adds	r1, r3, #1
 8000fd2:	b2c8      	uxtb	r0, r1
 8000fd4:	69b9      	ldr	r1, [r7, #24]
 8000fd6:	7108      	strb	r0, [r1, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	7bba      	ldrb	r2, [r7, #14]
 8000fdc:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	69f8      	ldr	r0, [r7, #28]
 8000fe4:	f7ff ff3c 	bl	8000e60 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	791a      	ldrb	r2, [r3, #4]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d171      	bne.n	80010d8 <mavlink_parse_char+0x258>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	70da      	strb	r2, [r3, #3]
		}
		break;
 8000ffa:	e06d      	b.n	80010d8 <mavlink_parse_char+0x258>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	79db      	ldrb	r3, [r3, #7]
 8001000:	461a      	mov	r2, r3
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <mavlink_parse_char+0x2c4>)
 8001004:	5c9b      	ldrb	r3, [r3, r2]
 8001006:	4619      	mov	r1, r3
 8001008:	69f8      	ldr	r0, [r7, #28]
 800100a:	f7ff ff29 	bl	8000e60 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
 800100e:	7bba      	ldrb	r2, [r7, #14]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	429a      	cmp	r2, r3
 800101a:	d018      	beq.n	800104e <mavlink_parse_char+0x1ce>
			// Check first checksum byte
			status->parse_error++;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	709a      	strb	r2, [r3, #2]
			status->msg_received = 0;
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2201      	movs	r2, #1
 8001032:	70da      	strb	r2, [r3, #3]
			if (c == MAVLINK_STX)
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2bfe      	cmp	r3, #254	; 0xfe
 8001038:	d150      	bne.n	80010dc <mavlink_parse_char+0x25c>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	2202      	movs	r2, #2
 800103e:	70da      	strb	r2, [r3, #3]
				rxmsg->len = 0;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2200      	movs	r2, #0
 8001044:	70da      	strb	r2, [r3, #3]
				mavlink_start_checksum(rxmsg);
 8001046:	69f8      	ldr	r0, [r7, #28]
 8001048:	f7ff fefe 	bl	8000e48 <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
 800104c:	e046      	b.n	80010dc <mavlink_parse_char+0x25c>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2209      	movs	r2, #9
 8001052:	70da      	strb	r2, [r3, #3]
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	3308      	adds	r3, #8
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	7912      	ldrb	r2, [r2, #4]
 800105c:	4413      	add	r3, r2
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	701a      	strb	r2, [r3, #0]
		break;
 8001062:	e03b      	b.n	80010dc <mavlink_parse_char+0x25c>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	b29a      	uxth	r2, r3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	429a      	cmp	r2, r3
 8001074:	d018      	beq.n	80010a8 <mavlink_parse_char+0x228>
			// Check second checksum byte
			status->parse_error++;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	709a      	strb	r2, [r3, #2]
			status->msg_received = 0;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2201      	movs	r2, #1
 800108c:	70da      	strb	r2, [r3, #3]
			if (c == MAVLINK_STX)
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	2bfe      	cmp	r3, #254	; 0xfe
 8001092:	d125      	bne.n	80010e0 <mavlink_parse_char+0x260>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2202      	movs	r2, #2
 8001098:	70da      	strb	r2, [r3, #3]
				rxmsg->len = 0;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	2200      	movs	r2, #0
 800109e:	70da      	strb	r2, [r3, #3]
				mavlink_start_checksum(rxmsg);
 80010a0:	69f8      	ldr	r0, [r7, #28]
 80010a2:	f7ff fed1 	bl	8000e48 <mavlink_start_checksum>
			status->msg_received = 1;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
 80010a6:	e01b      	b.n	80010e0 <mavlink_parse_char+0x260>
			status->msg_received = 1;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2201      	movs	r2, #1
 80010b2:	70da      	strb	r2, [r3, #3]
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f103 0208 	add.w	r2, r3, #8
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	7bba      	ldrb	r2, [r7, #14]
 80010c4:	701a      	strb	r2, [r3, #0]
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80010c6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80010ca:	69f9      	ldr	r1, [r7, #28]
 80010cc:	68b8      	ldr	r0, [r7, #8]
 80010ce:	f002 fef1 	bl	8003eb4 <memcpy>
		break;
 80010d2:	e005      	b.n	80010e0 <mavlink_parse_char+0x260>
		break;
 80010d4:	bf00      	nop
 80010d6:	e004      	b.n	80010e2 <mavlink_parse_char+0x262>
		break;
 80010d8:	bf00      	nop
 80010da:	e002      	b.n	80010e2 <mavlink_parse_char+0x262>
		break;
 80010dc:	bf00      	nop
 80010de:	e000      	b.n	80010e2 <mavlink_parse_char+0x262>
		break;
 80010e0:	bf00      	nop
	}

	bufferIndex++;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d110      	bne.n	8001112 <mavlink_parse_char+0x292>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	791a      	ldrb	r2, [r3, #4]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	891b      	ldrh	r3, [r3, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <mavlink_parse_char+0x286>
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2200      	movs	r2, #0
 8001104:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	891b      	ldrh	r3, [r3, #8]
 800110a:	3301      	adds	r3, #1
 800110c:	b29a      	uxth	r2, r3
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	811a      	strh	r2, [r3, #8]
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	3301      	adds	r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	715a      	strb	r2, [r3, #5]
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	891a      	ldrh	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	811a      	strh	r2, [r3, #8]
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	789b      	ldrb	r3, [r3, #2]
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	815a      	strh	r2, [r3, #10]
	status->parse_error = 0;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
	return status->msg_received;
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	781b      	ldrb	r3, [r3, #0]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08003f10 	.word	0x08003f10

08001148 <mavlink_msg_rc_channels_raw_decode>:
 *
 * @param msg The message to decode
 * @param rc_channels_raw C-struct to decode the message contents into
 */
static inline void mavlink_msg_rc_channels_raw_decode(const mavlink_message_t* msg, mavlink_rc_channels_raw_t* rc_channels_raw)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	rc_channels_raw->chan7_raw = mavlink_msg_rc_channels_raw_get_chan7_raw(msg);
	rc_channels_raw->chan8_raw = mavlink_msg_rc_channels_raw_get_chan8_raw(msg);
	rc_channels_raw->port = mavlink_msg_rc_channels_raw_get_port(msg);
	rc_channels_raw->rssi = mavlink_msg_rc_channels_raw_get_rssi(msg);
#else
	memcpy(rc_channels_raw, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3308      	adds	r3, #8
 8001156:	2216      	movs	r2, #22
 8001158:	4619      	mov	r1, r3
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	f002 feaa 	bl	8003eb4 <memcpy>
#endif
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mavlink_init>:
uint32_t ms_boottime = 0;
uint8_t iSfcdead_ = 1;
static uint8_t fc_lost_cnt = 0;


void mavlink_init(UART_HandleTypeDef *huart){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uart = huart;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <mavlink_init+0x24>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(uart, &c,1);
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <mavlink_init+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2201      	movs	r2, #1
 800117c:	4904      	ldr	r1, [pc, #16]	; (8001190 <mavlink_init+0x28>)
 800117e:	4618      	mov	r0, r3
 8001180:	f002 f93c 	bl	80033fc <HAL_UART_Receive_IT>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000070 	.word	0x20000070
 8001190:	20000074 	.word	0x20000074

08001194 <mavlink_callback>:

static uint32_t rc_msg_call_ms;
void mavlink_callback(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    if (mavlink_parse_char(MAVLINK_COMM_0,c,&msg, &msg_status)){
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <mavlink_callback+0xa8>)
 800119c:	7819      	ldrb	r1, [r3, #0]
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <mavlink_callback+0xac>)
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <mavlink_callback+0xb0>)
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fe6c 	bl	8000e80 <mavlink_parse_char>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d036      	beq.n	800121c <mavlink_callback+0x88>
        switch (msg.msgid)
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <mavlink_callback+0xb0>)
 80011b0:	79db      	ldrb	r3, [r3, #7]
 80011b2:	2b23      	cmp	r3, #35	; 0x23
 80011b4:	d134      	bne.n	8001220 <mavlink_callback+0x8c>
        {
        case MAVLINK_MSG_ID_RC_CHANNELS_RAW:
        	rc_msg_call_ms = HAL_GetTick();
 80011b6:	f000 f9b9 	bl	800152c <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <mavlink_callback+0xb4>)
 80011be:	6013      	str	r3, [r2, #0]
        	mavlink_msg_rc_channels_raw_decode((const mavlink_message_t*)&msg,&rc_channels_raw);
 80011c0:	4922      	ldr	r1, [pc, #136]	; (800124c <mavlink_callback+0xb8>)
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <mavlink_callback+0xb0>)
 80011c4:	f7ff ffc0 	bl	8001148 <mavlink_msg_rc_channels_raw_decode>
        	if(reset_state){
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <mavlink_callback+0xbc>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <mavlink_callback+0x4c>
        		ms_boottime = rc_channels_raw.time_boot_ms;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <mavlink_callback+0xb8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <mavlink_callback+0xc0>)
 80011d6:	6013      	str	r3, [r2, #0]
        		reset_state =  0;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <mavlink_callback+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
        		break;
 80011de:	e022      	b.n	8001226 <mavlink_callback+0x92>
        	}
       		uint32_t ms_check = rc_channels_raw.time_boot_ms - ms_boottime;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <mavlink_callback+0xb8>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <mavlink_callback+0xc0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	607b      	str	r3, [r7, #4]
       		ms_boottime = rc_channels_raw.time_boot_ms;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <mavlink_callback+0xb8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a18      	ldr	r2, [pc, #96]	; (8001254 <mavlink_callback+0xc0>)
 80011f2:	6013      	str	r3, [r2, #0]
       		if(ms_check == 0 ){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <mavlink_callback+0x72>
       			 fc_lost_cnt++;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <mavlink_callback+0xc4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <mavlink_callback+0xc4>)
 8001204:	701a      	strb	r2, [r3, #0]
       		}
       		if(fc_lost_cnt > MAX_LOST_DATA){
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <mavlink_callback+0xc4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d90a      	bls.n	8001224 <mavlink_callback+0x90>
       			fc_lost_cnt = MAX_LOST_DATA;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <mavlink_callback+0xc4>)
 8001210:	2205      	movs	r2, #5
 8001212:	701a      	strb	r2, [r3, #0]
       			iSfcdead_ = 0;   // fc is dead hmm
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <mavlink_callback+0xc8>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
       		}
            break;
 800121a:	e003      	b.n	8001224 <mavlink_callback+0x90>
        default:
            //mavlink_msg_attitude_decode((const mavlink_message_t*)&msg,&attitude);
            break;
        }
    }
 800121c:	bf00      	nop
 800121e:	e002      	b.n	8001226 <mavlink_callback+0x92>
            break;
 8001220:	bf00      	nop
 8001222:	e000      	b.n	8001226 <mavlink_callback+0x92>
            break;
 8001224:	bf00      	nop
    HAL_UART_Receive_IT(uart, &c,1);
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <mavlink_callback+0xcc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	4903      	ldr	r1, [pc, #12]	; (800123c <mavlink_callback+0xa8>)
 800122e:	4618      	mov	r0, r3
 8001230:	f002 f8e4 	bl	80033fc <HAL_UART_Receive_IT>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000074 	.word	0x20000074
 8001240:	20000784 	.word	0x20000784
 8001244:	20000674 	.word	0x20000674
 8001248:	20000080 	.word	0x20000080
 800124c:	2000065c 	.word	0x2000065c
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000078 	.word	0x20000078
 8001258:	2000007c 	.word	0x2000007c
 800125c:	2000000d 	.word	0x2000000d
 8001260:	20000070 	.word	0x20000070

08001264 <mavlink_check_fc_healthy>:

uint8_t mavlink_check_fc_healthy(){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	uint32_t wait_time = HAL_GetTick() - rc_msg_call_ms;
 800126a:	f000 f95f 	bl	800152c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <mavlink_check_fc_healthy+0x2c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	607b      	str	r3, [r7, #4]
	if(wait_time > 500)  // 0.5 s
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	d901      	bls.n	8001284 <mavlink_check_fc_healthy+0x20>
	    return 0;
 8001280:	2300      	movs	r3, #0
 8001282:	e001      	b.n	8001288 <mavlink_check_fc_healthy+0x24>
     return iSfcdead_;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <mavlink_check_fc_healthy+0x30>)
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000080 	.word	0x20000080
 8001294:	2000000d 	.word	0x2000000d

08001298 <initPWM>:
uint8_t pwm_lock_status;
static int constrain(int val,int min,int max);
/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	htimm = htim;
 80012a0:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <initPWM+0x7c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <initPWM+0x80>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <initPWM+0x84>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <initPWM+0x88>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 f9e2 	bl	8002684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 80012c0:	2104      	movs	r1, #4
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f001 f9de 	bl	8002684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80012c8:	2108      	movs	r1, #8
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f001 f9da 	bl	8002684 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <initPWM+0x7c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <initPWM+0x7c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012e4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <initPWM+0x7c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <initPWM+0x7c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <initPWM+0x7c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001308:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000794 	.word	0x20000794
 8001318:	200004f8 	.word	0x200004f8
 800131c:	20000790 	.word	0x20000790
 8001320:	200004f4 	.word	0x200004f4

08001324 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
 8001334:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <writePwm+0x2c>
	    dulty -= 1000;
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001342:	b29b      	uxth	r3, r3
 8001344:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800134c:	b29b      	uxth	r3, r3
 800134e:	807b      	strh	r3, [r7, #2]
      }
	  if(dulty > 2000)
 8001350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001354:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001358:	dd03      	ble.n	8001362 <writePwm+0x3e>
		  dulty = 2000;
 800135a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	e007      	b.n	8001372 <writePwm+0x4e>
	  else if(dulty < 1000){
 8001362:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136a:	da02      	bge.n	8001372 <writePwm+0x4e>
		  dulty = 1000;
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	807b      	strh	r3, [r7, #2]
	  }
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <writePwm+0x62>
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <writePwm+0xa0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001384:	e019      	b.n	80013ba <writePwm+0x96>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d106      	bne.n	800139a <writePwm+0x76>
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <writePwm+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001396:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001398:	e00f      	b.n	80013ba <writePwm+0x96>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d106      	bne.n	80013ae <writePwm+0x8a>
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <writePwm+0xa0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013aa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80013ac:	e005      	b.n	80013ba <writePwm+0x96>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <writePwm+0xa0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000794 	.word	0x20000794

080013c8 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
 80013d2:	460b      	mov	r3, r1
 80013d4:	80bb      	strh	r3, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <write_pwm_ctrl+0x70>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <write_pwm_ctrl+0x22>
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <write_pwm_ctrl+0x74>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 80013ea:	f000 f89f 	bl	800152c <HAL_GetTick>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <write_pwm_ctrl+0x78>)
 80013f2:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <write_pwm_ctrl+0x70>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		   return;
 80013fa:	e019      	b.n	8001430 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 80013fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001400:	2201      	movs	r2, #1
 8001402:	4619      	mov	r1, r3
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff ff8d 	bl	8001324 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 800140a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	2004      	movs	r0, #4
 8001414:	f7ff ff86 	bl	8001324 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8001418:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	2008      	movs	r0, #8
 8001422:	f7ff ff7f 	bl	8001324 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8001426:	f000 f881 	bl	800152c <HAL_GetTick>
 800142a:	4603      	mov	r3, r0
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <write_pwm_ctrl+0x78>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200004f8 	.word	0x200004f8
 800143c:	20000790 	.word	0x20000790
 8001440:	200004f4 	.word	0x200004f4

08001444 <timer_start>:
    k = val - (l*k);
    return k;
}


void timer_start(TIM_HandleTypeDef *htimz){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <timer_start+0x20>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <timer_start+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f001 f86a 	bl	8002530 <HAL_TIM_Base_Start_IT>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000079c 	.word	0x2000079c

08001468 <timer_name>:


TIM_HandleTypeDef *timer_name(){
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return htimmz;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <timer_name+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	2000079c 	.word	0x2000079c

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x28>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x28>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f947 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff f840 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f95f 	bl	800178a <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f927 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000014 	.word	0x20000014
 8001504:	20000010 	.word	0x20000010

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	; (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000014 	.word	0x20000014
 8001528:	200007a4 	.word	0x200007a4

0800152c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200007a4 	.word	0x200007a4

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fff0 	bl	800152c <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffe0 	bl	800152c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000014 	.word	0x20000014

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4906      	ldr	r1, [pc, #24]	; (8001620 <__NVIC_EnableIRQ+0x34>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff90 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff2d 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff42 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff35 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffa2 	bl	80016dc <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d008      	beq.n	80017cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2204      	movs	r2, #4
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e020      	b.n	800180e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020e 	bic.w	r2, r2, #14
 80017da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d005      	beq.n	800183c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2204      	movs	r2, #4
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	e051      	b.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 020e 	bic.w	r2, r2, #14
 800184a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_DMA_Abort_IT+0xd4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d029      	beq.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <HAL_DMA_Abort_IT+0xd8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d022      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x9e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_DMA_Abort_IT+0xdc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01a      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x98>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_DMA_Abort_IT+0xe0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d012      	beq.n	80018aa <HAL_DMA_Abort_IT+0x92>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_DMA_Abort_IT+0xe4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00a      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x8c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_DMA_Abort_IT+0xe8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d102      	bne.n	800189e <HAL_DMA_Abort_IT+0x86>
 8001898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800189c:	e00e      	b.n	80018bc <HAL_DMA_Abort_IT+0xa4>
 800189e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a2:	e00b      	b.n	80018bc <HAL_DMA_Abort_IT+0xa4>
 80018a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a8:	e008      	b.n	80018bc <HAL_DMA_Abort_IT+0xa4>
 80018aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ae:	e005      	b.n	80018bc <HAL_DMA_Abort_IT+0xa4>
 80018b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b4:	e002      	b.n	80018bc <HAL_DMA_Abort_IT+0xa4>
 80018b6:	2310      	movs	r3, #16
 80018b8:	e000      	b.n	80018bc <HAL_DMA_Abort_IT+0xa4>
 80018ba:	2301      	movs	r3, #1
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_DMA_Abort_IT+0xec>)
 80018be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
    } 
  }
  return status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020008 	.word	0x40020008
 80018f0:	4002001c 	.word	0x4002001c
 80018f4:	40020030 	.word	0x40020030
 80018f8:	40020044 	.word	0x40020044
 80018fc:	40020058 	.word	0x40020058
 8001900:	4002006c 	.word	0x4002006c
 8001904:	40020000 	.word	0x40020000

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	; 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e169      	b.n	8001bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8158 	bne.w	8001bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a9a      	ldr	r2, [pc, #616]	; (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d05e      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001944:	4a98      	ldr	r2, [pc, #608]	; (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d875      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800194a:	4a98      	ldr	r2, [pc, #608]	; (8001bac <HAL_GPIO_Init+0x2a4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d058      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001950:	4a96      	ldr	r2, [pc, #600]	; (8001bac <HAL_GPIO_Init+0x2a4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d86f      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001956:	4a96      	ldr	r2, [pc, #600]	; (8001bb0 <HAL_GPIO_Init+0x2a8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d052      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 800195c:	4a94      	ldr	r2, [pc, #592]	; (8001bb0 <HAL_GPIO_Init+0x2a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d869      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001962:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <HAL_GPIO_Init+0x2ac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04c      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001968:	4a92      	ldr	r2, [pc, #584]	; (8001bb4 <HAL_GPIO_Init+0x2ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d863      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800196e:	4a92      	ldr	r2, [pc, #584]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d046      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001974:	4a90      	ldr	r2, [pc, #576]	; (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d85d      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d82a      	bhi.n	80019d4 <HAL_GPIO_Init+0xcc>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d859      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001982:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <HAL_GPIO_Init+0x80>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	08001a03 	.word	0x08001a03
 800198c:	080019dd 	.word	0x080019dd
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a37 	.word	0x08001a37
 800199c:	08001a37 	.word	0x08001a37
 80019a0:	08001a37 	.word	0x08001a37
 80019a4:	08001a37 	.word	0x08001a37
 80019a8:	08001a37 	.word	0x08001a37
 80019ac:	08001a37 	.word	0x08001a37
 80019b0:	08001a37 	.word	0x08001a37
 80019b4:	08001a37 	.word	0x08001a37
 80019b8:	08001a37 	.word	0x08001a37
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a37 	.word	0x08001a37
 80019c4:	08001a37 	.word	0x08001a37
 80019c8:	08001a37 	.word	0x08001a37
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	4a79      	ldr	r2, [pc, #484]	; (8001bbc <HAL_GPIO_Init+0x2b4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019da:	e02c      	b.n	8001a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e029      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e024      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3308      	adds	r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e01f      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	330c      	adds	r3, #12
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e01a      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e013      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	611a      	str	r2, [r3, #16]
          break;
 8001a22:	e009      	b.n	8001a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	615a      	str	r2, [r3, #20]
          break;
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          break;
 8001a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d801      	bhi.n	8001a42 <HAL_GPIO_Init+0x13a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_Init+0x13e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	; 0xff
 8001a4c:	d802      	bhi.n	8001a54 <HAL_GPIO_Init+0x14c>
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x152>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	3b08      	subs	r3, #8
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	210f      	movs	r1, #15
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80b1 	beq.w	8001bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a40      	ldr	r2, [pc, #256]	; (8001bc8 <HAL_GPIO_Init+0x2c0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_GPIO_Init+0x1ec>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3f      	ldr	r2, [pc, #252]	; (8001bcc <HAL_GPIO_Init+0x2c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1e8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <HAL_GPIO_Init+0x2c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3d      	ldr	r2, [pc, #244]	; (8001bd4 <HAL_GPIO_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1e0>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001ae8:	2304      	movs	r3, #4
 8001aea:	e004      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001af4:	2300      	movs	r3, #0
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4093      	lsls	r3, r2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b06:	492f      	ldr	r1, [pc, #188]	; (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	492c      	ldr	r1, [pc, #176]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4928      	ldr	r1, [pc, #160]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	491e      	ldr	r1, [pc, #120]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4918      	ldr	r1, [pc, #96]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4914      	ldr	r1, [pc, #80]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d021      	beq.n	8001bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e021      	b.n	8001bea <HAL_GPIO_Init+0x2e2>
 8001ba6:	bf00      	nop
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10310000 	.word	0x10310000
 8001bb0:	10220000 	.word	0x10220000
 8001bb4:	10210000 	.word	0x10210000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40011400 	.word	0x40011400
 8001bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4909      	ldr	r1, [pc, #36]	; (8001c0c <HAL_GPIO_Init+0x304>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f ae8e 	bne.w	800191c <HAL_GPIO_Init+0x14>
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	372c      	adds	r7, #44	; 0x2c
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43d9      	mvns	r1, r3
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	400b      	ands	r3, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e26c      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8087 	beq.w	8001da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d00c      	beq.n	8001cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d112      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
 8001cac:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x12c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d168      	bne.n	8001da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e246      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x76>
 8001cdc:	4b80      	ldr	r3, [pc, #512]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x98>
 8001cf2:	4b7b      	ldr	r3, [pc, #492]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7a      	ldr	r2, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a77      	ldr	r2, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xbc>
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a71      	ldr	r2, [pc, #452]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd4>
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6a      	ldr	r2, [pc, #424]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fbec 	bl	800152c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fbe8 	bl	800152c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1fa      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe4>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fbd8 	bl	800152c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fbd4 	bl	800152c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1e6      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x10c>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1ba      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fb8d 	bl	800152c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fb89 	bl	800152c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e19b      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4927      	ldr	r1, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fb6c 	bl	800152c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fb68 	bl	800152c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e17a      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03a      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d019      	beq.n	8001ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fb4c 	bl	800152c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fb48 	bl	800152c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e15a      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f000 facc 	bl	8002454 <RCC_Delay>
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fb32 	bl	800152c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fb2e 	bl	800152c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e140      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	42420000 	.word	0x42420000
 8001ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	4b9e      	ldr	r3, [pc, #632]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e9      	bne.n	8001ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a6 	beq.w	8002052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0a:	4b97      	ldr	r3, [pc, #604]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b94      	ldr	r3, [pc, #592]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a93      	ldr	r2, [pc, #588]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b91      	ldr	r3, [pc, #580]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b8e      	ldr	r3, [pc, #568]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a8a      	ldr	r2, [pc, #552]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff faef 	bl	800152c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff faeb 	bl	800152c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b64      	cmp	r3, #100	; 0x64
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0fd      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x312>
 8001f78:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a7a      	ldr	r2, [pc, #488]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e02d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x334>
 8001f8e:	4b76      	ldr	r3, [pc, #472]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a75      	ldr	r2, [pc, #468]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b73      	ldr	r3, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a72      	ldr	r2, [pc, #456]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	e01c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d10c      	bne.n	8001fca <HAL_RCC_OscConfig+0x356>
 8001fb0:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a6c      	ldr	r2, [pc, #432]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a69      	ldr	r2, [pc, #420]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	e00b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x36e>
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a66      	ldr	r2, [pc, #408]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fa9f 	bl	800152c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fa9b 	bl	800152c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0ab      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ee      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x37e>
 8002014:	e014      	b.n	8002040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fa89 	bl	800152c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fa85 	bl	800152c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e095      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4b48      	ldr	r3, [pc, #288]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8081 	beq.w	800215e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d061      	beq.n	800212c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d146      	bne.n	80020fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fa59 	bl	800152c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff fa55 	bl	800152c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e067      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	492d      	ldr	r1, [pc, #180]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a19      	ldr	r1, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	430b      	orrs	r3, r1
 80020ca:	4927      	ldr	r1, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fa29 	bl	800152c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff fa25 	bl	800152c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e037      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x46a>
 80020fc:	e02f      	b.n	800215e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_RCC_OscConfig+0x4fc>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fa12 	bl	800152c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fa0e 	bl	800152c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e020      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x498>
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	40007000 	.word	0x40007000
 8002170:	42420060 	.word	0x42420060

08002174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d0      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4965      	ldr	r1, [pc, #404]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b8      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a58      	ldr	r2, [pc, #352]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e8:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a52      	ldr	r2, [pc, #328]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	494d      	ldr	r1, [pc, #308]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d040      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e073      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06b      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4936      	ldr	r1, [pc, #216]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff f962 	bl	800152c <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff f95e 	bl	800152c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e053      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4922      	ldr	r1, [pc, #136]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e032      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4916      	ldr	r1, [pc, #88]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002302:	f000 f821 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490a      	ldr	r1, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f8c0 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	08003ef8 	.word	0x08003ef8
 8002340:	20000008 	.word	0x20000008
 8002344:	20000010 	.word	0x20000010

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e027      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e027      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0c5b      	lsrs	r3, r3, #17
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	fb02 f203 	mul.w	r2, r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	693b      	ldr	r3, [r7, #16]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	08004010 	.word	0x08004010
 80023e8:	08004020 	.word	0x08004020
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <HAL_RCC_GetHCLKFreq+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002408:	f7ff fff2 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08003f08 	.word	0x08003f08

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002430:	f7ff ffde 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0adb      	lsrs	r3, r3, #11
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	08003f08 	.word	0x08003f08

08002454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <RCC_Delay+0x34>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <RCC_Delay+0x38>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a5b      	lsrs	r3, r3, #9
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002470:	bf00      	nop
  }
  while (Delay --);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	60fa      	str	r2, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f9      	bne.n	8002470 <RCC_Delay+0x1c>
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	20000008 	.word	0x20000008
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e041      	b.n	8002526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe f988 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f000 fc30 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e03a      	b.n	80025be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_TIM_Base_Start_IT+0x98>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x58>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002572:	d009      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x58>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_TIM_Base_Start_IT+0x9c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x58>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d111      	bne.n	80025ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d010      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025aa:	e007      	b.n	80025bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800

080025d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e041      	b.n	800266a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f839 	bl	8002672 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 fb8e 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_TIM_PWM_Start+0x24>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e022      	b.n	80026ee <HAL_TIM_PWM_Start+0x6a>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d109      	bne.n	80026c2 <HAL_TIM_PWM_Start+0x3e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	e015      	b.n	80026ee <HAL_TIM_PWM_Start+0x6a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d109      	bne.n	80026dc <HAL_TIM_PWM_Start+0x58>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e008      	b.n	80026ee <HAL_TIM_PWM_Start+0x6a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e05e      	b.n	80027b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_PWM_Start+0x82>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002704:	e013      	b.n	800272e <HAL_TIM_PWM_Start+0xaa>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d104      	bne.n	8002716 <HAL_TIM_PWM_Start+0x92>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002714:	e00b      	b.n	800272e <HAL_TIM_PWM_Start+0xaa>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d104      	bne.n	8002726 <HAL_TIM_PWM_Start+0xa2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002724:	e003      	b.n	800272e <HAL_TIM_PWM_Start+0xaa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fd7c 	bl	8003234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_TIM_PWM_Start+0x138>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d107      	bne.n	8002756 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_TIM_PWM_Start+0x138>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_TIM_PWM_Start+0xfa>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d009      	beq.n	800277e <HAL_TIM_PWM_Start+0xfa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_TIM_PWM_Start+0x13c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_TIM_PWM_Start+0xfa>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_TIM_PWM_Start+0x140>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d111      	bne.n	80027a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b06      	cmp	r3, #6
 800278e:	d010      	beq.n	80027b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	e007      	b.n	80027b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800

080027c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0202 	mvn.w	r2, #2
 80027f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa76 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa69 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fa78 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d122      	bne.n	8002878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11b      	bne.n	8002878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0204 	mvn.w	r2, #4
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa4c 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fa3f 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fa4e 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0208 	mvn.w	r2, #8
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa22 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa15 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa24 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0210 	mvn.w	r2, #16
 80028f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2208      	movs	r2, #8
 80028f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9f8 	bl	8002cfc <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9eb 	bl	8002cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f9fa 	bl	8002d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd fc72 	bl	8000230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b80      	cmp	r3, #128	; 0x80
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fce9 	bl	800334a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9be 	bl	8002d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d107      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0220 	mvn.w	r2, #32
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fcb4 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0ae      	b.n	8002b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	f200 809f 	bhi.w	8002b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002b45 	.word	0x08002b45
 8002a14:	08002b45 	.word	0x08002b45
 8002a18:	08002b45 	.word	0x08002b45
 8002a1c:	08002a81 	.word	0x08002a81
 8002a20:	08002b45 	.word	0x08002b45
 8002a24:	08002b45 	.word	0x08002b45
 8002a28:	08002b45 	.word	0x08002b45
 8002a2c:	08002ac3 	.word	0x08002ac3
 8002a30:	08002b45 	.word	0x08002b45
 8002a34:	08002b45 	.word	0x08002b45
 8002a38:	08002b45 	.word	0x08002b45
 8002a3c:	08002b03 	.word	0x08002b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f9d6 	bl	8002df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0204 	bic.w	r2, r2, #4
 8002a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6999      	ldr	r1, [r3, #24]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	619a      	str	r2, [r3, #24]
      break;
 8002a7e:	e064      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fa1c 	bl	8002ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6999      	ldr	r1, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]
      break;
 8002ac0:	e043      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fa65 	bl	8002f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0208 	orr.w	r2, r2, #8
 8002adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0204 	bic.w	r2, r2, #4
 8002aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69d9      	ldr	r1, [r3, #28]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	61da      	str	r2, [r3, #28]
      break;
 8002b00:	e023      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 faaf 	bl	800306c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69d9      	ldr	r1, [r3, #28]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	021a      	lsls	r2, r3, #8
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	61da      	str	r2, [r3, #28]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
      break;
 8002b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_ConfigClockSource+0x1c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0b4      	b.n	8002ce2 <HAL_TIM_ConfigClockSource+0x186>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb0:	d03e      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0xd4>
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	f200 8087 	bhi.w	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	f000 8086 	beq.w	8002cce <HAL_TIM_ConfigClockSource+0x172>
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	d87f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b70      	cmp	r3, #112	; 0x70
 8002bca:	d01a      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0xa6>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d87b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d050      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x11a>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d877      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d03c      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xfa>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d873      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d058      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x13a>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d86f      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b30      	cmp	r3, #48	; 0x30
 8002bea:	d064      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d86b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d060      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d867      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05c      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d05a      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c00:	e062      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f000 faf0 	bl	80031f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	609a      	str	r2, [r3, #8]
      break;
 8002c2e:	e04f      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f000 fad9 	bl	80031f6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c52:	609a      	str	r2, [r3, #8]
      break;
 8002c54:	e03c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 fa50 	bl	8003108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2150      	movs	r1, #80	; 0x50
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 faa7 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e02c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fa6e 	bl	8003164 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2160      	movs	r1, #96	; 0x60
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fa97 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e01c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fa30 	bl	8003108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fa87 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e00c      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 fa7e 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002cc6:	e003      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
	...

08002d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <TIM_Base_SetConfig+0xb8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_Base_SetConfig+0x30>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d007      	beq.n	8002d64 <TIM_Base_SetConfig+0x30>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <TIM_Base_SetConfig+0xbc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0x30>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a25      	ldr	r2, [pc, #148]	; (8002df4 <TIM_Base_SetConfig+0xc0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <TIM_Base_SetConfig+0xb8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_Base_SetConfig+0x62>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0x62>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <TIM_Base_SetConfig+0xbc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0x62>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <TIM_Base_SetConfig+0xc0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <TIM_Base_SetConfig+0xb8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	615a      	str	r2, [r3, #20]
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800

08002df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f023 0201 	bic.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 0302 	bic.w	r3, r3, #2
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <TIM_OC1_SetConfig+0xc8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10c      	bne.n	8002e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0308 	bic.w	r3, r3, #8
 8002e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <TIM_OC1_SetConfig+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d111      	bne.n	8002e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00

08002ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 0210 	bic.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0320 	bic.w	r3, r3, #32
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <TIM_OC2_SetConfig+0xd0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10d      	bne.n	8002f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <TIM_OC2_SetConfig+0xd0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d113      	bne.n	8002f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00

08002f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <TIM_OC3_SetConfig+0xd0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10d      	bne.n	8003012 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <TIM_OC3_SetConfig+0xd0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d113      	bne.n	8003042 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00

0800306c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	031b      	lsls	r3, r3, #12
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <TIM_OC4_SetConfig+0x98>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d109      	bne.n	80030e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00

08003108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0201 	bic.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 030a 	bic.w	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0210 	bic.w	r2, r3, #16
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800318e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	031b      	lsls	r3, r3, #12
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f043 0307 	orr.w	r3, r3, #7
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	021a      	lsls	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	431a      	orrs	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4313      	orrs	r3, r2
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	609a      	str	r2, [r3, #8]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2201      	movs	r2, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1a      	ldr	r2, [r3, #32]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a1a      	ldr	r2, [r3, #32]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003290:	2302      	movs	r3, #2
 8003292:	e046      	b.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d009      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10c      	bne.n	8003310 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4313      	orrs	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e042      	b.n	80033f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fafc 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fcd5 	bl	8003d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b20      	cmp	r3, #32
 8003414:	d112      	bne.n	800343c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_UART_Receive_IT+0x26>
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00b      	b.n	800343e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	461a      	mov	r2, r3
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fab7 	bl	80039a6 <UART_Start_Receive_IT>
 8003438:	4603      	mov	r3, r0
 800343a:	e000      	b.n	800343e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ba      	sub	sp, #232	; 0xe8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_UART_IRQHandler+0x66>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fb93 	bl	8003bd2 <UART_Receive_IT>
      return;
 80034ac:	e25b      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80de 	beq.w	8003674 <HAL_UART_IRQHandler+0x22c>
 80034b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80d1 	beq.w	8003674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_UART_IRQHandler+0xae>
 80034de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_UART_IRQHandler+0xd2>
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0xf6>
 8003526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <HAL_UART_IRQHandler+0x126>
 800354a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0208 	orr.w	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 81f2 	beq.w	800395c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x14e>
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fb1e 	bl	8003bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_UART_IRQHandler+0x17a>
 80035ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04f      	beq.n	8003662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa28 	bl	8003a18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d041      	beq.n	800365a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3314      	adds	r3, #20
 80035dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800360e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800361a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1d9      	bne.n	80035d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	4a7e      	ldr	r2, [pc, #504]	; (8003828 <HAL_UART_IRQHandler+0x3e0>)
 8003630:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f8ee 	bl	8001818 <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e00e      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f993 	bl	800397e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	e00a      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f98f 	bl	800397e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e006      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f98b 	bl	800397e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800366e:	e175      	b.n	800395c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	bf00      	nop
    return;
 8003672:	e173      	b.n	800395c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 814f 	bne.w	800391c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8148 	beq.w	800391c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8141 	beq.w	800391c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80b6 	beq.w	800382c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8145 	beq.w	8003960 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036de:	429a      	cmp	r2, r3
 80036e0:	f080 813e 	bcs.w	8003960 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	f000 8088 	beq.w	8003808 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800370e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003716:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003724:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003730:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800373c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1d9      	bne.n	80036f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3314      	adds	r3, #20
 8003764:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003768:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800376c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003770:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800377a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e1      	bne.n	8003744 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3314      	adds	r3, #20
 8003786:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3314      	adds	r3, #20
 80037a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e3      	bne.n	8003780 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d8:	f023 0310 	bic.w	r3, r3, #16
 80037dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80037ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e3      	bne.n	80037c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd ffcd 	bl	80017a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003816:	b29b      	uxth	r3, r3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8b6 	bl	8003990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003824:	e09c      	b.n	8003960 <HAL_UART_IRQHandler+0x518>
 8003826:	bf00      	nop
 8003828:	08003add 	.word	0x08003add
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003834:	b29b      	uxth	r3, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 808e 	beq.w	8003964 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8089 	beq.w	8003964 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003876:	647a      	str	r2, [r7, #68]	; 0x44
 8003878:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800387c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e3      	bne.n	8003852 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	623b      	str	r3, [r7, #32]
   return(result);
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3314      	adds	r3, #20
 80038aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038ae:	633a      	str	r2, [r7, #48]	; 0x30
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e3      	bne.n	800388a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038f4:	61fa      	str	r2, [r7, #28]
 80038f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	617b      	str	r3, [r7, #20]
   return(result);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e3      	bne.n	80038d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800390e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f83b 	bl	8003990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800391a:	e023      	b.n	8003964 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_UART_IRQHandler+0x4f4>
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f8e5 	bl	8003b04 <UART_Transmit_IT>
    return;
 800393a:	e014      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <HAL_UART_IRQHandler+0x51e>
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f924 	bl	8003ba2 <UART_EndTransmit_IT>
    return;
 800395a:	e004      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
    return;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
      return;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
      return;
 8003964:	bf00      	nop
  }
}
 8003966:	37e8      	adds	r7, #232	; 0xe8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	4613      	mov	r3, r2
 80039b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2222      	movs	r2, #34	; 0x22
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b095      	sub	sp, #84	; 0x54
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a40:	643a      	str	r2, [r7, #64]	; 0x40
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e5      	bne.n	8003a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d119      	bne.n	8003ac4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f023 0310 	bic.w	r3, r3, #16
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab0:	61ba      	str	r2, [r7, #24]
 8003ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6979      	ldr	r1, [r7, #20]
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	613b      	str	r3, [r7, #16]
   return(result);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e5      	bne.n	8003a90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ad2:	bf00      	nop
 8003ad4:	3754      	adds	r7, #84	; 0x54
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ff41 	bl	800397e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b21      	cmp	r3, #33	; 0x21
 8003b16:	d13e      	bne.n	8003b96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d114      	bne.n	8003b4c <UART_Transmit_IT+0x48>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d110      	bne.n	8003b4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]
 8003b4a:	e008      	b.n	8003b5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6211      	str	r1, [r2, #32]
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fed2 	bl	800396c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08c      	sub	sp, #48	; 0x30
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b22      	cmp	r3, #34	; 0x22
 8003be4:	f040 80ae 	bne.w	8003d44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d117      	bne.n	8003c22 <UART_Receive_IT+0x50>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c20:	e026      	b.n	8003c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d007      	beq.n	8003c46 <UART_Receive_IT+0x74>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <UART_Receive_IT+0x82>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e008      	b.n	8003c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d15d      	bne.n	8003d40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0220 	bic.w	r2, r2, #32
 8003c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d135      	bne.n	8003d36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f023 0310 	bic.w	r3, r3, #16
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	623a      	str	r2, [r7, #32]
 8003cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69f9      	ldr	r1, [r7, #28]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d10a      	bne.n	8003d28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fe2e 	bl	8003990 <HAL_UARTEx_RxEventCallback>
 8003d34:	e002      	b.n	8003d3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fc fa60 	bl	80001fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e002      	b.n	8003d46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3730      	adds	r7, #48	; 0x30
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d8a:	f023 030c 	bic.w	r3, r3, #12
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	430b      	orrs	r3, r1
 8003d96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <UART_SetConfig+0x114>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe fb38 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	e002      	b.n	8003dc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7fe fb20 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009a      	lsls	r2, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <UART_SetConfig+0x118>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	0119      	lsls	r1, r3, #4
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009a      	lsls	r2, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <UART_SetConfig+0x118>)
 8003dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2064      	movs	r0, #100	; 0x64
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	; 0x32
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <UART_SetConfig+0x118>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	4419      	add	r1, r3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <UART_SetConfig+0x118>)
 8003e36:	fba3 0302 	umull	r0, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2064      	movs	r0, #100	; 0x64
 8003e3e:	fb00 f303 	mul.w	r3, r0, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <UART_SetConfig+0x118>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	440a      	add	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40013800 	.word	0x40013800
 8003e68:	51eb851f 	.word	0x51eb851f

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	2600      	movs	r6, #0
 8003e70:	4d0c      	ldr	r5, [pc, #48]	; (8003ea4 <__libc_init_array+0x38>)
 8003e72:	4c0d      	ldr	r4, [pc, #52]	; (8003ea8 <__libc_init_array+0x3c>)
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	42a6      	cmp	r6, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	f000 f830 	bl	8003ee0 <_init>
 8003e80:	2600      	movs	r6, #0
 8003e82:	4d0a      	ldr	r5, [pc, #40]	; (8003eac <__libc_init_array+0x40>)
 8003e84:	4c0a      	ldr	r4, [pc, #40]	; (8003eb0 <__libc_init_array+0x44>)
 8003e86:	1b64      	subs	r4, r4, r5
 8003e88:	10a4      	asrs	r4, r4, #2
 8003e8a:	42a6      	cmp	r6, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e94:	4798      	blx	r3
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9e:	4798      	blx	r3
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08004024 	.word	0x08004024
 8003ea8:	08004024 	.word	0x08004024
 8003eac:	08004024 	.word	0x08004024
 8003eb0:	08004028 	.word	0x08004028

08003eb4 <memcpy>:
 8003eb4:	440a      	add	r2, r1
 8003eb6:	4291      	cmp	r1, r2
 8003eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ebc:	d100      	bne.n	8003ec0 <memcpy+0xc>
 8003ebe:	4770      	bx	lr
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ec6:	4291      	cmp	r1, r2
 8003ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ecc:	d1f9      	bne.n	8003ec2 <memcpy+0xe>
 8003ece:	bd10      	pop	{r4, pc}

08003ed0 <memset>:
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4402      	add	r2, r0
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d100      	bne.n	8003eda <memset+0xa>
 8003ed8:	4770      	bx	lr
 8003eda:	f803 1b01 	strb.w	r1, [r3], #1
 8003ede:	e7f9      	b.n	8003ed4 <memset+0x4>

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
